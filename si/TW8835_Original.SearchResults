---- WriteTW88 Matches (2813 in 40 files) ----
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0);
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, INT_STATUS & 0xFF);		//clear	
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG004, INT_STATUS2 & 0x07);		//clear
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_TOUCH);
CPU-master.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG0B0, 0x01 );		// adc  mode Z1
CPU-master.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG0B0, 0 );		// adc start with mode XPOS
CPU-master.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG0B0, 0x03 );		// adc start with mode YPOS
CPU-master.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG0B0, 0x01 );		// adc start with mode Z1
CPU-master.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0B0, 0x07 );			// write Start, erase Ready, mode AUX0
CPU-master.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG0B0, 2 );			// write Start, erase Ready, mode Z2
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page );
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, 0x80);	// Clear Int		
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E2, 0x69);		// Timer0 Divider : system tic 0. 
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E3, 0x78);		// 27M/27000 = 1msec
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E6, 0);			// Timer2 Divider : remo timer
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E7, 0x1b);		// 27M/27 = 1usec
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E8, 0);			// Timer3 Divider : baudrate for UART0
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E9, 0x0c);		// (22.1184M/16) / 12 = 115200bps on SM0=1	
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4EA, 0);			// Timer4 Divider : baudrate for UART1
CPU-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4EB, 0x18);		// (22.1184M/16) / 24 = 57600bps on SM1=1	
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0);
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, INT_STATUS & 0xFF);		//clear	
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG004, INT_STATUS2 & 0x07);		//clear
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0);
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, INT_STATUS );		//clear	
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, INT_STATUS & 0xFF);		//clear	
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG004, INT_STATUS2 & 0x07);		//clear
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_TOUCH);
CPU.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG0B0, 0x01 );		// adc  mode Z1
CPU.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG0B0, 0 );		// adc start with mode XPOS
CPU.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG0B0, 0x03 );		// adc start with mode YPOS
CPU.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG0B0, 0x01 );		// adc start with mode Z1
CPU.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0B0, 0x07 );			// write Start, erase Ready, mode AUX0
CPU.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG0B0, 2 );			// write Start, erase Ready, mode Z2
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page );
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, 0x80);	// Clear Int		
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, INT_STATUS3);		//clear	
CPU.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(sw_i2c_regidx++,sw_i2c_data);
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E2, 0x69);		// Timer0 Divider : system tic 0. 
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E3, 0x78);		// 27M/27000 = 1msec
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E4, 0x01);		// Timer1 Divider : for Touch
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E5, 0x0e);		// 27M/270 = 10usec	
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E6, 0);			// Timer2 Divider : remo timer
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E7, 0x1b);		// 27M/27 = 1usec
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E8, 0);			// Timer3 Divider : baudrate for UART0
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E9, 0x0c);		// (22.1184M/16) / 12 = 115200bps on SM0=1	
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4EA, 0);			// Timer4 Divider : baudrate for UART1
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4EB, 0x18);		// (22.1184M/16) / 24 = 57600bps on SM1=1	
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0);
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, ReadTW88(REG002));		//clear	
CPU.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG004, ReadTW88(REG004) & 0x07);	//clear
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER);
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );
Decoder.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG102, r102 );
Decoder.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG105, r105 );
Decoder.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG106, r106 );
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );	
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG102, path );   		
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );	
Decoder.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG105, (ReadTW88(REG105) & 0xF0) | 0x04);	//? C is for decoder, not RGB	
Decoder.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG105, (ReadTW88(REG105) | 0x0F));	
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER)
Decoder.c (e:\prog\tw8835_e_fw120803b):	if(fOn) WriteTW88(REG106, ReadTW88(REG106) | 0x07);
Decoder.c (e:\prog\tw8835_e_fw120803b):	else    WriteTW88(REG106, ReadTW88(REG106) & ~0x07);
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );		// get VDelay from Decoder
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG107, (ReadTW88(REG107 ) & 0x3F) | ( (delay & 0x0300) >> 2)); 
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG108, (BYTE)delay );
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );		// get VDelay from Decoder
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );		
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG107, (ReadTW88(REG107) & 0xCF) | ( (length & 0x0300) >> 4)); 
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG109, (BYTE)length );
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );		// get VDelay from Decoder
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG107, (ReadTW88(REG107 ) & 0xF3) | ( (delay & 0x0300) >> 6)); 
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG10A, (BYTE)delay );
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );		// get VDelay from Decoder
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );		// get VDelay from Decoder
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG107, (ReadTW88(REG107 ) & 0xFC) | ( (length & 0x0300) >> 8)); 
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG10B, (BYTE)length );
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );		// get VDelay from Decoder
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER);
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page );
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );		// set Decoder page
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );
Decoder.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG133, (ReadTW88(REG133) & 0x3F) | (mode<<6));
DemoMain.c (e:\prog\tw8835_e_fw120803b):WriteTW88Page(PAGE4_SOSD);
DemoMain.c (e:\prog\tw8835_e_fw120803b):				WriteTW88Page(page);
DemoMain.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_DTV);
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG050, value);	
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_DTV);
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG051, (ReadTW88(REG051) & 0xF8) | delay);
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_DTV);
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG052, (ReadTW88(REG052) & 0xF8) | route);
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG053, (ReadTW88(REG053) & 0xF0) | format);
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_DTV );
DTV.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG050, ReadTW88(REG050) | 0x80 );	// set Det field by WIN
DTV.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG054, r054 );						// set window
DTV.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG050, ReadTW88(REG050) & ~0x80 );	// use VSync/HSync Pulse
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_DTV );
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG056, value);
DTV.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(page );
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page );
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );							//Trick.
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG400, ReadTW88(REG400) & ~0x04);			//disable SpiOSD
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG210, HDE);
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG215, vde);
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21C, (ReadTW88(REG21C)&0x0F)|(HTotal>>4)&0xF0);
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21D, (BYTE)HTotal );
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, (ReadTW88(REG20D)&0x3F)|(VTotal>>2)&0xC0);
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG219, (BYTE)VTotal );
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
DTV.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
DTV.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
DTV.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304)&0xFE); // OSD RAM Auto Access Enable
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, (ReadTW88(REG304)&0xF3)); // Normal
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG306, i );
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, i*3 );
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG308, (i / 42)*2 );
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30B, 0 );						// 2bit multi color start = 0
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG_FOSD_MADD3, 0 );				// 3bit multi color start = 0
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG_FOSD_MADD4, 0xff );			// 4bit multi color start = 0
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG_FOSD_ALPHA_SEL, j );
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(FOSDWinBase[TECHWELLOGO_OSDWIN]  +1, i );
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(FOSDWinBase[TECHWELLOGO_OSDWIN+2]+1, i );
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG_FOSD_ALPHA_SEL, j );
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(FOSDWinBase[TECHWELLOGO_OSDWIN]  +1, 0 );
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(FOSDWinBase[TECHWELLOGO_OSDWIN+2]+1, 0 );
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page );
FOsdDisplay.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(1 );
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE2_RGBLEVEL);
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG281+i,   toValue + val );
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(2);
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG281+color,(BYTE)(toValue + regv));
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE2_IMAGE );
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG284_IA_CONTRAST_Y, 	VideoModeTable_value[mode][0]);
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG28A_IA_BRIGHTNESS_Y,	VideoModeTable_value[mode][1]);
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG285_IA_CONTRAST_CB, 	VideoModeTable_value[mode][2]);
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG285_IA_CONTRAST_CB+1, 	VideoModeTable_value[mode][2]);
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG280_IA_HUE_REG, 		VideoModeTable_value[mode][3] | (ReadTW88(REG280_IA_HUE_REG) & 0xC0));
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG28B_IA_SHARPNESS, 		VideoModeTable_value[mode][4] | (ReadTW88(REG28B_IA_SHARPNESS ) & 0xF0) );
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE0_LEDC);
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E5, 					VideoModeTable_value[mode][5] | (ReadTW88(REG0E5) & 0x80));
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(0x66, bl);
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):					WriteTW88($$$WIDE_ADDRESS[i], *WideData);
FOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(0);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(0);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(0);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG096, ReadTW88(REG096) | 0x01);	//GPIO60
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(0);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG088, ReadTW88(REG088) | 0x02);	  //NOTE
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG090, ReadTW88(REG090) | 0x02);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(0);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG096, ReadTW88(REG096) | 0x06);	 //TURN ON EN_3V3 & EN_1V2
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(0);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG096, ReadTW88(REG096) & ~0x01);	//GPIO60
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(0);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG088, ReadTW88(REG088) | 0x02);	  //NOTE
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG090, ReadTW88(REG090) & ~0x02);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(0);
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG096, ReadTW88(REG096) & ~0x06);	 //TURN OFF EN_3V3 & EN_1V2
HDMI_SIL9127.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
HID.c (e:\prog\tw8835_e_fw120803b):				WriteTW88Page(PAGE3_FOSD);
HID.c (e:\prog\tw8835_e_fw120803b):				WriteTW88Page(page);
HID.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE0_GENERAL);
HID.c (e:\prog\tw8835_e_fw120803b):			if(value & 0x40) 	WriteTW88(REG006, value & ~0x40);
HID.c (e:\prog\tw8835_e_fw120803b):			else				WriteTW88(REG006, value | 0x40);
HID.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(page);
Host.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);
Host.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C1,r4c1 & ~0x01); 
Host.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0, (ReadTW88(REG4C0) & ~0x07) | 1);
Host.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x05);	//or 0x01						//DMA Read
Host.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0, (ReadTW88(REG4C0) & ~0x07) | 5);
Host.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C1,r4c1);
Host.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);					// Set Page=4
I2c.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(index, val);
I2c.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(w_page+index, val);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG284_IA_CONTRAST_Y, (BYTE)val );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG28A_IA_BRIGHTNESS_Y, (BYTE)val );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG285_IA_CONTRAST_CB, (BYTE)val );	  //update Contrast_Cb(U)
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG285_IA_CONTRAST_CB+1, (BYTE)val );  //update Contrast_Cr(V)
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG280_IA_HUE_REG, reserved | reg_hw);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG280_IA_HUE_REG, reserved | reg_hw);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG28B_IA_SHARPNESS, ((ReadTW88(REG28B_IA_SHARPNESS ) & 0xf0) + val) );	  
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG281_IA_CONTRAST_R+index,   (BYTE)val );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_IMAGE);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG2E4,value);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE1_DECODER );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG110, 0x00);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG111, 0x5C);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG112, 0x11);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG113, 0x80);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG114, 0x80);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG115, 0x00);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG117, 0x30);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG280_IA_HUE_REG,      (ReadTW88(REG280_IA_HUE_REG ) & 0xC0) | IA_HUE_DEFAULT);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG285_IA_CONTRAST_CB,  IA_CONTRAST_CB_DEFAULT);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG286_IA_CONTRAST_CR,  IA_CONTRAST_CR_DEFAULT);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG287_IA_BRIGHTNESS_R, IA_BRIGHTNESS_R_DEFAULT);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG288_IA_BRIGHTNESS_G, IA_BRIGHTNESS_G_DEFAULT);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG289_IA_BRIGHTNESS_B, IA_BRIGHTNESS_B_DEFAULT);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG28B_IA_SHARPNESS,    (ReadTW88(REG28B_IA_SHARPNESS ) & 0xf0) | IA_SHARP_DEFAULT);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE2_IMAGE );
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG281_IA_CONTRAST_R,   IA_CONTRAST_R_DEFAULT);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG282_IA_CONTRAST_G,   IA_CONTRAST_G_DEFAULT);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG283_IA_CONTRAST_B,   IA_CONTRAST_B_DEFAULT);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG287_IA_BRIGHTNESS_R, IA_BRIGHTNESS_R_DEFAULT);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG288_IA_BRIGHTNESS_G, IA_BRIGHTNESS_G_DEFAULT);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG289_IA_BRIGHTNESS_B, IA_BRIGHTNESS_B_DEFAULT);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_LEDC);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0E5, (ReadTW88(REG0E5) & 0x80) | val);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_LEDC);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E5, reg);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_LEDC);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E5, reg);
ImageCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG002, 0xff );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, 0xff );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_GENERAL );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG040_INPUT_CTRL_I,r040);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG041_INPUT_CTRL_II,r041);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_INPUT);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG041_INPUT_CTRL_II, ReadTW88(REG041_INPUT_CTRL_II) | 0x20);	    //On Field for Prog
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	else	WriteTW88(REG041_INPUT_CTRL_II, ReadTW88(REG041_INPUT_CTRL_II) & ~0x20);	//Off Field for Prog
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_INPUT );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG041_INPUT_CTRL_II, r041);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_INPUT );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_INPUT );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_INPUT );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_INPUT );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	if(fInv)	WriteTW88(REG041_INPUT_CTRL_II, r041 | 0x02);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	else 		WriteTW88(REG041_INPUT_CTRL_II, r041 & ~0x02);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_INPUT );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_INPUT );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG040_INPUT_CTRL_I, (ReadTW88(REG040_INPUT_CTRL_I) & 0x3F) | ((x & 0x300)>>2) );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG045, (BYTE)x);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG043, (BYTE)y);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG042, ((h&0xF00) >> 4)|(w >>8) );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG044, (BYTE)h);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG046, (BYTE)w);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_INPUT );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG040, (ReadTW88(REG040) & 0x3F) | ((x & 0xF00)>>2) );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG045, (BYTE)x);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG043, (BYTE)y);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_INPUT );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG040, (ReadTW88(REG040) & 0x3F) | ((x & 0xF00)>>2) );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG045, (BYTE)x);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_INPUT );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_INPUT );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG043, (BYTE)y);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_INPUT );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_INPUT );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE0_INPUT );
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_INPUT);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG047,ReadTW88(REG047) | 0x80);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	else	WriteTW88(REG047,ReadTW88(REG047) & ~0x80);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_INPUT);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG047, value);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E0, 0x00);				//use PCLK
InputCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE4_CLOCK);
InputCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4E1, (ReadTW88(REG4E1) & 0xF8) | 0x02);	//if Macronix SPI Flash, SPI_CK_DIV[2:0]=2
InputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_BT656);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI );
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C3, 0x40+w_cnt);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4DA,0 );					// DMA Length high
Junk.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CA+i, w_cmd[i] );		// write cmd1
Junk.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x01 );				// start
Junk.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x07 );				// start, with write, with busycheck
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page );	//restore
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG102, value);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG106,value);		
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG102,value);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG105,r105);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1C0,r1c0);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_INPUT);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_INPUT);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI );					// Set Page=4
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C3, 0xC0 | CMD_x_BYTES);	//DMAMODE_R_XDATA );		// Mode = SPI -> incremental xdata
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CA, CMD_x_READ );			// Read Command
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CB, spiaddr>>16 );			// SPI address
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CC, spiaddr>>8 );				// SPI address
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CD, spiaddr );				// SPI address
Junk.c (e:\prog\tw8835_e_fw120803b): 	WriteTW88(REG4C6, xaddr>>8 );				// Buffer address
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C7, xaddr );					// Buffer address
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4DA, cnt>>16 );				// Read count
Junk.c (e:\prog\tw8835_e_fw120803b): 	WriteTW88(REG4C8, cnt>>8 );					// Read count
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C9, cnt );					// Read count
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C4, 0x01);					//DMA-Read start
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG403, DMAMODE_RW_FIX_REG);		// Mode = SPI -> fixed register
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG40a, SPICMD_x_READ );			// Read Command
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG40b, spiaddr>>16 );			// SPI address
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG40c, spiaddr>>8 );				// SPI address
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG40d, spiaddr );				// SPI address
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG406, index>>8 );				// Buffer address
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG407, index );					// Buffer address
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG41a, size>>16 );					// Read count
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG408, size>>8 );					// Read count
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG409, size );						// Read count
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG404, 0x01 );					// DMA-Read start
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );	
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG102, path );   		
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );	
Junk.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG105, (ReadTW88(REG105) & 0xF0) | 0x04);	//? C is for decoder, not RGB	
Junk.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG105, (ReadTW88(REG105) | 0x0F));	
Junk.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
Junk.c (e:\prog\tw8835_e_fw120803b):	 WriteTW88Page(PAGE0_TOUCH );
Junk.c (e:\prog\tw8835_e_fw120803b):	 WriteTW88(REG0B0, mode );				// 0000-0xxx & mode
Junk.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0B1, 0x00 );			// enable the ready interrupt
Junk.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0B4, 0x08 | 0x04 );	// div32.Continuous sampling for TSC_ADC regardless of the START command 
Junk.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0B1, 0x80 );			// disable the ready interrupt
Junk.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0B4, 0x08 );			// div2. Continuous sampling for TSC_ADC regardless of the START command
Junk.c (e:\prog\tw8835_e_fw120803b):	 WriteTW88Page(PAGE0_TOUCH );
Junk.c (e:\prog\tw8835_e_fw120803b):	 WriteTW88(REG0B0, 0x04 | auxn);			//  
Junk.c (e:\prog\tw8835_e_fw120803b):	 WriteTW88(REG0B1, 0x00 );				// enable Ready Interrupt
Junk.c (e:\prog\tw8835_e_fw120803b):	 WriteTW88(REG0B4, 0x08 | 0x04 );		// continuous sampling. div32  
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_SSPLL);
Main-master.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG0FC, ReadTW88(REG0FC) & ~0x80);
Main-master.c (e:\prog\tw8835_e_fw120803b):	else	WriteTW88(REG0FC, ReadTW88(REG0FC) |  0x80);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GPIO);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG084, 0x00);	//FP_BiasOnOff(OFF);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG08C, 0x00);	//FP_PWC_OnOff(OFF);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG094, 0x00);	//output
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Main-master.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4E1, 0x02);			//if Macronix SPI Flash, SPI_CK_DIV[2:0]=2
Main-master.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4E1, 0x01);			//SPI_CK_SEL[5:4]=2. PCLK, SPI_CK_DIV[2:0]=1
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E0, 0x01);				// PCLK_SEL[0]=1
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F8, 0x02);				//108MHz
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F9, 0x00);	
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0FA, 0x00);	
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F6, 0x00); 				//PCLK_div_by_1 SPICLK_div_by_1
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0FD, 0x34);				//SSPLL Analog Control
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, 0x02);				//pclko div 3. 	108/3=36MHz
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0FC, ReadTW88(REG0FC) & ~0x80);	//Turn off SSPLL PowerDown first.
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F6, ReadTW88(REG0F6) | 0x20); 	//SPICLK_div_by_3
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, ReadTW88(REG4E1) | 0x20);		//SPI_CK_SEL[5:4]=2. CLKPLL
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1C0, 0x01);				//LLPLL input def 0x00
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG105, 0x2f);				//Reserved def 0x0E
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21E, 0x03);				//BLANK def 0x00.	--enable screen blanking with AUTO
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_LEDC);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0E0, 0xF2);				//LEDC. default. 
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0E8, 0x70);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0EA, 0x3F);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG007, 0x00);	// TCON
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG008, 0xA9);	//<<<======	
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG040, 0x10);		
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG041, 0x0C);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG042, 0x02);	
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG043, 0x10);	
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG044, 0xF0);	
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG045, 0x82);	
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG046, 0xD0);	
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG047, 0x80);	
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG049, 0x41);	//def 0x00
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0ED, 0x40);	//def:0x80
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F1, 0xC0);	//[7]FP_PWC [6]FP_BIAS		
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG11C, 0x0F);	//*** Disable Shadow
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG102, 0x40);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG106, 0x03);	//ACNTL def 0x00
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG107, 0x02);	//Cropping Register High(CROP_HI) def 0x12
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG109, 0xF0);	//Vertical Active Register,Low(VACTIVE_LO) def 0x20
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG10A, 0x0B);	//Horizontal Delay,Low(HDELAY_LO) def 0x10
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG111, 0x5C);	//CONTRAST def 0x64
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG117, 0x80);	//Vertical Peaking Control I	def 0x30
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG11E, 0x00);	//Component video format: def 0x08
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG121, 0x22);	//Individual AGC Gain def 0x48
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG127, 0x38);	//Clamp Position(PCLAMP)	def 0x2A
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG128, 0x00);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG12B, 0x44);	//Comb Filter	def -100-100b
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG130, 0x00);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG134, 0x1A);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG135, 0x00);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1C6, 0x20); //WriteTW88(REG1C6, 0x27);	//WriteTW88(REG1C6, 0x20);  Use VAdcSetFilterBandwidth()
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1CB, 0x3A);	//WriteTW88(REG1CB, 0x30);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG203, 0xCC);		//XSCALE: 0x1C00. def:0x2000
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG204, 0x1C);		//XSCALE:
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG205, 0x8A);		//YSCALE: 0x0F8A. def:0x2000
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG206, 0x0F);		//YSCALE:
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG207, 0x40);		//PXSCALE[11:4]	def 0x800
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG208, 0x20);		//PXINC	def 0x10
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG209, 0x00);		//HDSCALE:0x0400 def:0x0100
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20A, 0x04);		//HDSCALE
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20B, 0x08);		//HDELAY2 def:0x30
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, 0x90 | (ReadTW88(REG20D) & 0x03));  //LNTT_HI def 0x80. 
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20E, 0x20);		//HPADJ def 0x0000.  20E[6:4] HACTIVE2_HI
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20F, 0x00);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG210, 0x21);		//HA_POS	def 0x10
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG211, 0x21);		//HA_LEN	def 0x0300
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG212, 0x03);		//PXSCALE[3:0]	def:0x800 HALEN_H[3:0] def:0x03
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG213, 0x00);		//HS_POS	def 0x10
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG214, 0x20);		//HS_LEN
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG215, 0x2E);		//VA_POS	def 0x20
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG216, 0xE0);		//VA_LEN_LO	def 0x0300
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG217, 0x01);		//VA_LEN_HI
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21C, 0x42);	//PANEL_FRUN. def 0x40
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21E, 0x03);		//BLANK def 0x00.	--enable screen blanking. SW have to remove 21E[0]
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG280, 0x20);		//Image Adjustment register
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG28B, 0x44);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG2E4, 0x21);		//--dither
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_TCON);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG240, 0x10);		//WriteTW88(REG240, 0x11);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG241, 0x00);		//WriteTW88(REG241, 0x0A);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG242, 0x05);		//WriteTW88(REG242, 0x05);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG243, 0x01);		//WriteTW88(REG243, 0x01);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG244, 0x64);		//WriteTW88(REG244, 0x64);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG245, 0xF4);		//WriteTW88(REG245, 0xF4);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG246, 0x00);		//WriteTW88(REG246, 0x00);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG247, 0x0A);		//WriteTW88(REG247, 0x0A);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG248, 0x36);		//WriteTW88(REG248, 0x36);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG249, 0x10);		//WriteTW88(REG249, 0x10);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24A, 0x00);		//WriteTW88(REG24A, 0x00);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24B, 0x00);		//WriteTW88(REG24B, 0x00);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24C, 0x00);		//WriteTW88(REG24C, 0x00);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24D, 0x44);		//WriteTW88(REG24D, 0x44);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24E, 0x04);		//WriteTW88(REG24E, 0x04);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG006, 0x06);	//display direction. TSCP,TRSP
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG007, 0x00);	// TCON
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL );
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, 0xFF );	// Clear Pending Interrupts
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG003, 0xFE );	// enable SW. disable all other interrupts
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0);
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG008, 0x89);	//Output enable
Main-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);		
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG009, 0xE0);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(I2CCMD_REG4,InputMain);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(I2CCMD_REG4,MenuGetLevel());
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(I2CCMD_REG4,DebugLevel);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(I2CCMD_REG4,access);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(I2CCMD_REG4,access);
Main.c (e:\prog\tw8835_e_fw120803b):		if(SFR_WDCON & 0x02) WriteTW88(I2CCMD_REG4,0x01);	//On
Main.c (e:\prog\tw8835_e_fw120803b):		else                 WriteTW88(I2CCMD_REG4,0x00);	//Off
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(I2CCMD_REG3,(WORD)SPI_Buffer>>8);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(I2CCMD_REG4,(BYTE)SPI_Buffer);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(I2CCMD_REG3,SPI_BUFFER_SIZE>>8);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(I2CCMD_REG4,(BYTE)SPI_BUFFER_SIZE);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG009,0xD0);	//Done
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG009,0xF0);	//FAIL
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0D4, ReadTW88(REG0D4) | 0x01);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG009,0xD0);	
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG009,0xD0);	//Done
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG009,0xF0);	//FAIL
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(I2CCMD_REG4,ret);	//result
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG009,0xD0);	//Done
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(I2CCMD_REG4,value);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG009,0xD0);	//Done
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG009, 0xD0);	//done
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GPIO);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG08C, 0x00);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_OUTPUT); 		
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG008, ReadTW88(REG008) | 0x30);	// Tri-State All outputs & FPdata 
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, 0x00);	 				// SPI clock Source=27MHz
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_LEDC );
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0E0, 0xF2 );					// LEDC
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0E8, 0xFE );					// DCDC, VCOM-DC, VCOM-AMP
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_TOUCH );
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B0, Buf_0B0 | 0x80 );			// TSC_ADC			  	*** 0.2uA
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG106, Buf_106 | 0x0F );			// ADC
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1E6, 0x00 );					// AFE Mode=low speed	*** 0.6uA
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1CB, Buf_1CB & 0x1F );			// SOG, LLPLL
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1E1, Buf_1E1 | 0x20 );			// LLPLL GPLL
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, 0x10);	 				// SPI clock Source=32KHz, ...
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_LOPOR);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0D4, ReadTW88(REG0D4) | (0x80));	// Enable Xtal PD Control
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_LOPOR);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0D4, ReadTW88(REG0D4) & ~(0x80)); 	// Disable Xtal PD Control
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, 0x00);	 					// SPI clock Source=27MHz, ...
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1E1, Buf_1E1);					// LLPLL GPLL
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1CB, Buf_1CB);					// LLPLL, SOG
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER );
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG106, Buf_106);					// ADC
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1E6, Buf_1E6);					// AFE mode
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_TOUCH );
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B0, Buf_0B0);					// Touch
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, Buf_4E1);	 				// Clock selection
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GPIO);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG08C, 0x0C);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GPIO);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG003, Buf_r003);	//recover ISR mask
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG096, ReadTW88(REG096) | 0x10);		//GPIO64
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG096, ReadTW88(REG096) | 0x08);		//GPIO63
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG096, ReadTW88(REG096) | 0x20);		//GPIO65
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG007, Status & ~0x07);	//clear
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG007, Status);			//restore
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0);
Main.c (e:\prog\tw8835_e_fw120803b):	if(fOn) WriteTW88(REG094, ReadTW88(REG094) | 0x20);		//GPIO_45=1
Main.c (e:\prog\tw8835_e_fw120803b):	else	WriteTW88(REG094, ReadTW88(REG094) & ~0x20);	//GPIO_45=0
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GPIO);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG088, ReadTW88(REG088) & ~0x03);		//                  I  I
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG080, ReadTW88(REG080) | 0x03);			//					G  G
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG094, ReadTW88(REG094) & ~0x20);		//x  x  0  0  x  x  x  x
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG08C, ReadTW88(REG08C) | 0x20);			//      O  X         
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG084, ReadTW88(REG084) | 0x20);			//      G  X         
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG096,(ReadTW88(REG094) & ~0x3E) & 0x01);//      0  0  0	 0  0  1
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG08E, ReadTW88(REG08E) | 0x3F);			//      O  O  O	 O  O  O
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG086, ReadTW88(REG086) | 0x3F);			//		G  G  G	 G	G  G
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG040, ReadTW88(REG040) & ~0x10);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(1);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG11D, 0x01);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL );
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG003, 0xFE );	// enable only SW interrupt
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL );
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, 0xFF );	// Clear Pending Interrupts
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG003, 0xFE );	// enable SW. disable all other interrupts
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE0_GENERAL);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE2_SCALER);
Main.c (e:\prog\tw8835_e_fw120803b):	    WriteTW88(REG201, ReadTW88(REG201) | 0x80);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
Main.c (e:\prog\tw8835_e_fw120803b): 	WriteTW88Page(PAGE0_GENERAL);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
Main.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE0_GENERAL);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
Main.c (e:\prog\tw8835_e_fw120803b):				WriteTW88Page(PAGE0_GENERAL);
Main.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG00F, SW_INTR_VIDEO);	//SW interrupt.		
Main.c (e:\prog\tw8835_e_fw120803b):				WriteTW88Page(PAGE0_GENERAL);
Main.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG00F, SW_INTR_VIDEO);	//SW interrupt.		
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG002, 0xFF);	//clear
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG004, 0xFF);	//clear
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG003, 0xFC);	//release Video, but still block SYNC
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG003, 0xFE);	//block.
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG002, 0xFF);	//clear
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG004, 0xFF);	//clear
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG002, 0x04);	//clear
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG004, 0x06);	//clear
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG003, ReadTW88(REG003) & ~0x04);	//release
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG003, ReadTW88(REG003) | 0x04);	//block
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG002, 0x04);	//clear
Main.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG004, 0x06);	//clear
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
Main.c (e:\prog\tw8835_e_fw120803b):					WriteTW88(REG009, 0xA1);
Main.c (e:\prog\tw8835_e_fw120803b):					WriteTW88(REG009, 0xA1);
Main.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE0_GENERAL);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
Main.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG009,0);	// ? clear
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(0x84, 0x0C);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE4_CLOCK);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4E1, ReadTW88(REG4E1) & 0x0F);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, 0xFF );	// Clear Pending Interrupts
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG003, 0xFE );	// enable SW. disable all other interrupts
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4E1, 0x01);	//SPI_CK_SEL[5:4]=2. PCLK, SPI_CK_DIV[2:0]=1
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E0, 0x01);	// PCLK_SEL[0]=1
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F8, 0x02);	//108MHz
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F9, 0x00);	
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0FA, 0x00);	
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F6, 0x00); 	//PCLK_div_by_1 SPICLK_div_by_1
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0FD, 0x34);	//SSPLL Analog Control
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, 0x01);  //pclko div 2. 	 
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1C0, 0x01);		//LLPLL input def 0x00
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG105, 0x2f);		//Reserved def 0x0E
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21E, 0x03);		//BLANK def 0x00.	--enable screen blanking with AUTO
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_LEDC);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0E0, 0xF2);		//LEDC. default. 
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0E8, 0x70);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0EA, 0x3F);		//Van. 110909
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG007, 0x02);	// FP LSB
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG008, 0x89);		
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG040, 0x10);		
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG041, 0x0C);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG042, 0x02);	
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG043, 0x10);	
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG044, 0xF0);	
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG045, 0x82);	
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG046, 0xD0);	
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG047, 0x80);	
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG049, 0x41);	//def 0x00
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0ED, 0x40);	//def:0x80
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F1, 0xC0);	//[7]FP_PWC [6]FP_BIAS		
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG11C, 0x0F);	//*** Disable Shadow
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG102, 0x40);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG106, 0x03);	//ACNTL def 0x00
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG107, 0x02);	//Cropping Register High(CROP_HI) def 0x12
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG109, 0xF0);	//Vertical Active Register,Low(VACTIVE_LO) def 0x20
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG10A, 0x0B);	//Horizontal Delay,Low(HDELAY_LO) def 0x10
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG111, 0x5C);	//CONTRAST def 0x64
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG117, 0x80);	//Vertical Peaking Control I	def 0x30
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG11E, 0x00);	//Component video format: def 0x08
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG121, 0x22);	//Individual AGC Gain def 0x48
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG127, 0x38);	//Clamp Position(PCLAMP)	def 0x2A
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG128, 0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG12B, 0x44);	//Comb Filter	def -100-100b
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG130, 0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG134, 0x1A);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG135, 0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1C6, 0x20); //WriteTW88(REG1C6, 0x27);	//WriteTW88(REG1C6, 0x20);  Use VAdcSetFilterBandwidth()
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1CB, 0x3A);	//WriteTW88(REG1CB, 0x30);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG203, 0xCC);		//XSCALE: 0x1C00. def:0x2000
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG204, 0x1C);		//XSCALE:
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG205, 0x8A);		//YSCALE: 0x0F8A. def:0x2000
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG206, 0x0F);		//YSCALE:
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG207, 0x40);		//PXSCALE[11:4]	def 0x800
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG208, 0x20);		//PXINC	def 0x10
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG209, 0x00);		//HDSCALE:0x0400 def:0x0100
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20A, 0x04);		//HDSCALE
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20B, 0x08);		//HDELAY2 def:0x30
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, 0x90 | (ReadTW88(REG20D) & 0x03));  //LNTT_HI def 0x80. 
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20E, 0x20);		//HPADJ def 0x0000.  20E[6:4] HACTIVE2_HI
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20F, 0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG210, 0x21);		//HA_POS	def 0x10
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG211, 0x21);		//HA_LEN	def 0x0300
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG212, 0x03);		//PXSCALE[3:0]	def:0x800 HALEN_H[3:0] def:0x03
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG213, 0x00);		//HS_POS	def 0x10
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG214, 0x20);		//HS_LEN
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG215, 0x2E);		//VA_POS	def 0x20
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG216, 0xE0);		//VA_LEN_LO	def 0x0300
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG217, 0x01);		//VA_LEN_HI
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21C, 0x42);	//PANEL_FRUN. def 0x40
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21E, 0x03);		//BLANK def 0x00.	--enable screen blanking. SW have to remove 21E[0]
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG280, 0x20);		//Image Adjustment register
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG28B, 0x44);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG2E4, 0x21);		//--dither
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_TCON);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG240, 0x10);		//WriteTW88(REG240, 0x11);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG241, 0x00);		//WriteTW88(REG241, 0x0A);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG242, 0x05);		//WriteTW88(REG242, 0x05);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG243, 0x01);		//WriteTW88(REG243, 0x01);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG244, 0x64);		//WriteTW88(REG244, 0x64);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG245, 0xF4);		//WriteTW88(REG245, 0xF4);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG246, 0x00);		//WriteTW88(REG246, 0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG247, 0x0A);		//WriteTW88(REG247, 0x0A);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG248, 0x36);		//WriteTW88(REG248, 0x36);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG249, 0x10);		//WriteTW88(REG249, 0x10);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24A, 0x00);		//WriteTW88(REG24A, 0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24B, 0x00);		//WriteTW88(REG24B, 0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24C, 0x00);		//WriteTW88(REG24C, 0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24D, 0x44);		//WriteTW88(REG24D, 0x44);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24E, 0x04);		//WriteTW88(REG24E, 0x04);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG006, 0x06);	//display direction. TSCP,TRSP
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG007, 0x02);	// FP LSB
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0E0,0x80);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0E0,0x07);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0x03);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG300,0x60);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG3D0,0x09);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG3D1,0x1b);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304,0x02);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG047,0x80);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG040,0x02);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0x02);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D,0x81);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0x03);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG305,0x0e);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304,0x01);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG309,0xfb);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG309,0xfc);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG309,0xfd);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG309,0xfe);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG309,0xfa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x31);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xff);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xc8);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x67);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x6e);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x76);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x13);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xff);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xc8);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x6e);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x76);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xe6);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x13);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xff);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x8c);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30E,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG311,0x43);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG313,0x1c);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG314,0x06);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG316,0x03);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG315,0x01);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG318,0x84);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG317,0x01);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG31C,0x84);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG31B,0x04);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG319,0x01);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG31A,0x01);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG31D,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG310,0xc0);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG31F,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG31E,0x32);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG306,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307,0xfb);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG308,0x37);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG306,0x01);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307,0xfb);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG308,0x37);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG306,0x02);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307,0xfb);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG308,0x37);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0x00); 	  	  
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0x00);	 
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0E0,0x80);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0E0,0x07);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0x03);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG300,0x60);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG3D0,0x09);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG3D1,0x1b);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304,0x02);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG047,0x80);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG040,0x02);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0x02);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D,0x81);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0x03);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG305,0x0e);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304,0x01);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG309,0xfb);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG309,0xfc);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG309,0xfd);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG309,0xfe);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x55);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xaa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG309,0xfa);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x31);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xff);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xc8);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x67);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x6e);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x76);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x13);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xff);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xc8);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x6e);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x76);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xe6);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x13);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0xff);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x8c);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30A,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30E,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG351,0x43);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG353,0x1c);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG354,0x06);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG356,0x03);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG355,0x01);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG358,0x84);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG357,0x01);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG35C,0x84);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG35B,0x04);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG359,0x01);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG35A,0x01);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG35D,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG350,0xc0);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG35F,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG35E,0x32);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG306,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307,0xfb);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG308,0x37);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG306,0x01);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307,0xfb);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG308,0x37);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG306,0x02);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307,0xfb);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG308,0x37);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, 0xff );				
Main_rtl.c (e:\prog\tw8835_e_fw120803b): 	WriteTW88Page(PAGE4_CLOCK);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E0, shadow_r4e0 & 0xFE);	//select PCLK.
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, 0x20 | divider);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E0, shadow_r4e0 & 0xFE);	//select PCLK.
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, 0x20 | divider);		//CLKPLL + divider.
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, 0xff );				
Main_rtl.c (e:\prog\tw8835_e_fw120803b): 	WriteTW88Page(PAGE4_CLOCK);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E0, shadow_r4e0);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, shadow_r4e1);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG002, 0xff );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Byte(MonIndex, MonWdata);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):			if(MonIndex==0xff) 	{ WriteTW88BytePage(MonWdata); }
Main_rtl.c (e:\prog\tw8835_e_fw120803b):			else				WriteTW88Byte(MonIndex, MonWdata);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage,MonWdata);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(MonIndex, MonWdata);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(MonPage | MonIndex, MonWdata);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):			if(MonIndex==0xff) 	{ WriteTW88Page(MonWdata); }
Main_rtl.c (e:\prog\tw8835_e_fw120803b):			else				WriteTW88(MonIndex, MonWdata);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonIndex, MonWdata);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage | MonIndex, MonWdata);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonIndex, MonWdata);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage | MonIndex, MonWdata);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Byte(MonIndex, MonWdata);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage | MonIndex, MonWdata);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0);	//WriteI2CByte(0x8a,0xff,0x00);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, 0xFF);	//WriteI2CByte( 0x8a,0x02, 0xff ); //clear
Main_rtl.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE0_GENERAL );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG003, 0xFE );	// enable only SW interrupt
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C4, 0);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C3, dest << 6 | SPICMD_x_BYTES);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CA, SPICMD_x_READ);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C3, dat);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C3, (ReadTW88(REG4C3) & 0xF0) | len);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(4);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C4, dat);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C6, (BYTE)(addr >> 8));	//page
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C7, (BYTE)addr);			//index
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4F6, (BYTE)(addr >> 8));	//page
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4F7, (BYTE)addr);			//index
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4DA, len>>16 );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C8, len>>8 );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C9, len );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C9, len_l );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4F5, len>>16 );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4F8, len>>8 );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4F9, len );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4F9, len_l );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CA, cmd);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CA, cmd1);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CB, cmd2);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CA, cmd1);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CB, cmd2);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CC, cmd3);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CB, (BYTE)(addr >> 16));
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CC, (BYTE)(addr >> 8));
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CD, (BYTE)(addr));
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0, (ReadTW88(REG4C0) & ~0x07) | mode);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(4);						 
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG300, ReadTW88(REG300) & ~0x02);	//turn off bypass, so FIFO will be ON.
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	else	WriteTW88(REG300, ReadTW88(REG300) |  0x02);	//turn on bypass, so FIFO will be OFF.
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	if(fType)	WriteTW88(REG304, ReadTW88(REG304)| 0x01);	// Font Ram Access
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	else		WriteTW88(REG304, ReadTW88(REG304)& 0xFE);	// Osd Ram Access
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG352,  lut );	 			// first, select color index
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, alpha );				// second, write alpha value
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, (ReadTW88(index) & 0x7F) | 0x40 );		//FOsdWinEnable(winno, OFF) & Enable Multi-Color
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x07, 0x00 );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x08, 0x00 );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x09, 0x00 );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0A, 0x00 );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0B, 0x00 );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0C, 0x00 );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0D, 0x00 );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0E, 0x00 );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0F, 0x00 );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, value);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG305, (ReadTW88(REG305) & 0xFE) | (addr >> 8));
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG306, (BYTE)addr);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG308, attr);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	if(dat&0x100)	WriteTW88(REG304,ReadTW88(REG304) |  0x20); 
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	else			WriteTW88(REG304,ReadTW88(REG304) & ~0x20);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307, (BYTE)dat);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+2,  temp );			// upper bit for position x, y
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+3, x );				// position x
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+4, y );				// position y
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+5, h );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+6, w );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, temp );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, dat);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	if(addr >=0x100)	WriteTW88(index+0x07, ReadTW88(index+0x07) |  0x10);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	else 				WriteTW88(index+0x07, ReadTW88(index+0x07) & ~0x10);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0F, (BYTE)addr);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
Main_rtl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, dat);
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG508, ReadTW88(REG508) & 0xF3 | (field << 2) );	// Note:DO not turn on the start
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG508, ReadTW88(REG508) & 0xFD | (fLock << 1) );	// Note:DO not turn on the start
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG508, ReadTW88(REG508) | 1 );	// Measure start
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG509, val | 0x80);
Measure.c (e:\prog\tw8835_e_fw120803b):	else 	WriteTW88(REG509, val & ~0x80);
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG509, (ReadTW88(REG509) & 0x8F) | (mask << 4));	
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS);
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG509, (ReadTW88(REG509) & 0xF1) | (value << 1));	//up to 32 counts
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS);
Measure.c (e:\prog\tw8835_e_fw120803b):	if(on)	WriteTW88(REG509, ReadTW88(REG509) | 0x01);
Measure.c (e:\prog\tw8835_e_fw120803b):	else    WriteTW88(REG509, ReadTW88(REG509) & ~0x01);
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG50A, ReadTW88(REG50A) | 0x01 );
Measure.c (e:\prog\tw8835_e_fw120803b):	else	WriteTW88(REG50A, ReadTW88(REG50A) & 0xFE );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG50B, thold ); 
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS );
Measure.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(page);
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
Measure.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(page );
Measure.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(5 );
Measure.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page );
Misc.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE2_SCALER);
Misc.c (e:\prog\tw8835_e_fw120803b):	    WriteTW88(REG201, ReadTW88(REG201) | 0x80);
Monitor-master.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4E1, reg4E1 & 0xCF);	//make me slow
Monitor-master.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, reg4E1 | 0x20);		//make me fast
Monitor-master.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4E1, reg4E1 & 0xCF);	//make me slow
Monitor-master.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage,MonWdata);
Monitor-master.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(MonPage | MonIndex, MonWdata);
Monitor-master.c (e:\prog\tw8835_e_fw120803b):			if(MonIndex==0xff) 	{ WriteTW88Page(MonWdata); }
Monitor-master.c (e:\prog\tw8835_e_fw120803b):			else				WriteTW88(MonIndex, MonWdata);
Monitor-master.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage | MonIndex, MonWdata);
Monitor-master.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage | MonIndex, MonWdata);
Monitor-master.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage | MonIndex, MonWdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG310,volatile_value);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG310,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG310,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG311,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG312,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG313,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG314,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG315,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG316,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG317,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG318,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG319,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG320,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG321,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG322,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG323,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG324,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG325,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG326,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG327,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG328,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG329,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4DC,0xAB);	
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG310,0x00);	
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG115,0xAB);
Monitor.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Monitor.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
Monitor.c (e:\prog\tw8835_e_fw120803b): 	WriteTW88Page(page);
Monitor.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG4FA+k, wdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG4FA+k, wdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(0);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG009,wdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):				WriteTW88Page(page);
Monitor.c (e:\prog\tw8835_e_fw120803b): 			WriteTW88Page(1);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG103,wdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):				WriteTW88Page(page);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(2);
Monitor.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG280+k, wdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):					WriteTW88Page(page);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(3);
Monitor.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG340+k, wdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):					WriteTW88Page(page);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(4);
Monitor.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG4FA+k, wdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):					WriteTW88Page(page);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Byte(MonIndex, MonWdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):			if(MonIndex==0xff) 	{ WriteTW88BytePage(MonWdata); }
Monitor.c (e:\prog\tw8835_e_fw120803b):			else				WriteTW88Byte(MonIndex, MonWdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage,MonWdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(MonIndex, MonWdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(MonPage | MonIndex, MonWdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):			if(MonIndex==0xff) 	{ WriteTW88Page(MonWdata); }
Monitor.c (e:\prog\tw8835_e_fw120803b):			else				WriteTW88(MonIndex, MonWdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(MonPage | MonIndex, MonWdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonIndex, MonWdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage | MonIndex, MonWdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonIndex, MonWdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage | MonIndex, MonWdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Byte(MonIndex, MonWdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage | MonIndex, MonWdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0);	//WriteI2CByte(0x8a,0xff,0x00);
Monitor.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, 0xFF);	//WriteI2CByte( 0x8a,0x02, 0xff ); //clear
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(4);	//WriteI2CByte(0x8a,0xff, 0x04);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG431+0x10*win, xpositionH);	//WriteI2CByte(0x8a,0x41, xpositionH);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG432+0x10*win, xpositionL);	//WriteI2CByte(0x8a,0x42, xpositionL);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(4);	//WriteI2CByte(0x8a,0xff, 0x04);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG441, xpositionH);	//WriteI2CByte(0x8a,0x41, xpositionH);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG442, xpositionL);	//WriteI2CByte(0x8a,0x42, xpositionL);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(4);	//WriteI2CByte(0x8a,0xff, 0x04);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG445, 0x20-i);	
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(4);	//WriteI2CByte(0x8a,0xff, 0x04);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG461, xpositionH);	//WriteI2CByte(0x8a,0x41, xpositionH);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG462, xpositionL);	//WriteI2CByte(0x8a,0x42, xpositionL);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE0_GENERAL );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG003, 0xFE );	// enable only SW interrupt
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE0_GENERAL );
Monitor.c (e:\prog\tw8835_e_fw120803b):				WriteTW88Page(4);
Monitor.c (e:\prog\tw8835_e_fw120803b):				if(r4e0 & 0x01)	WriteTW88(REG4E0, r4e0 & ~0x01);
Monitor.c (e:\prog\tw8835_e_fw120803b):				else			WriteTW88(REG4E0, r4e0 |  0x01);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE4_CLOCK);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE0_GENERAL);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG002, 0xff );
Monitor.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88Page(PAGE4_CLOCK);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4E0, r4e0 & 0xFE);	//select PCLK.
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE0_GENERAL);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG002, 0xff );
Monitor.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88Page(PAGE4_CLOCK);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4E0, r4e0 & 0xFE);	//select PCLK.
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE3_FOSD );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG304, 0 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, fdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG308, attr ); 			// bgColor + fgColor in 1BPP
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE3_FOSD );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG308, attr ); 			// bgColor + fgColor in 1BPP
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG304, 0x0C ); // Auto Inc.
Monitor.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG307, fdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE3_FOSD );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG308, attr ); 			// bgColor + fgColor in 1BPP
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG304, 0x0C ); // Auto Inc.
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG300, ReadTW88(REG300) | 0x01);		// bypass on
Monitor.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG307, fdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG300, ReadTW88(REG300) & 0xFE);		 // bypass off
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE3_FOSD );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG308, attr ); 			// bgColor + fgColor in 1BPP
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG304, 0x0C ); // Auto Inc.
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG300, ReadTW88(REG300) | 0x01);		// bypass on
Monitor.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG307, fdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG300, ReadTW88(REG300) & 0xFE);		 // bypass off
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE3_FOSD );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG308, attr ); 			// bgColor + fgColor in 1BPP
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG304, 0x0C ); // Auto Inc.
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG300, ReadTW88(REG300) | 0x01);		// bypass on
Monitor.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG307, fdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG304, 0x0D);		// change to FontRAM
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG300, ReadTW88(REG300) & 0xFE);		 // bypass off
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE3_FOSD );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG304, 0x00 ); 			// Auto Inc OFF
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG308, attr ); 			// bgColor + fgColor in 1BPP
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG304, 0x0C ); // Auto Inc.
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG300, ReadTW88(REG300) | 0x01);		// bypass on
Monitor.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG307, fdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG304, 0x0D);		// change to FontRAM
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG300, ReadTW88(REG300) & 0xFE);		 // bypass off
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE3_FOSD );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG300, ReadTW88(REG300) | 0x01);		// bypass on
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG304, 0x0C ); 			// Auto Inc OFF
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE3_FOSD );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG308, attr ); 			// bgColor + fgColor in 1BPP
Monitor.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG307, fdata);
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(3 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG305, 0 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30B, 0 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30C, 0x3f );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG340, 0xcb );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG345, 0x01 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG346, 0x10 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG300, 0x11 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG305, 0 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG306, 0 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG304, 0 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, 0 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, 0 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG308, i );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG300, 0x11 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG304, 0x0d );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG_FOSD_CHEIGHT, 0x0d /* 26/2 */ );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG_FOSD_MUL_CON, 0x34 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG309, 0x00 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30A, 0x00 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30A, 0x00 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30A, 0xff );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30A, 0xff );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30A, 0x00 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30A, 0xff );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30A, 0x00 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30A, 0xff );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30c, i );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30D, color>>8 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30E, color );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(3 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG300, 0x11 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG304, 0x0d );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG305, 0x00 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG309, 0x00 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30B, 0x00 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG_FOSD_CHEIGHT, (0x1a >> 1) );	 //?? 0x1A=26 
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG_FOSD_MUL_CON, 0x34 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG_FOSD_MADD3, 0x00 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG_FOSD_MADD4, 0x00 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30a, 0x00 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30a, 0x00 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30a, 0xff );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30a, 0xff );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30a, 0x00 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30a, 0xff );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30a, 0x00 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30a, 0xff );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30a, 0x33 );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(3 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30c, i );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30d, color>>8 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30e, color );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(3 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30c, i );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30d, color>>8 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30e, color );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(3 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30c, i );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30d, color>>8 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30e, color );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(3 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30c, i );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30d, color>>8 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30e, color );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(3 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30c, i );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30d, color>>8 );
Monitor.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30e, color );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page );
Monitor_menu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
Monitor_menu.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(3);
Monitor_menu.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG310+dest*0x10+i, ReadTW88(REG310+src*0x10+i));
Monitor_menu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
monitor_OSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(OSD_LUT_WINNO, winno<<6 );
monitor_OSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(OSD_LUT_INDEX, i );
monitor_OSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(OSD_LUT_ATTR, attr );
monitor_OSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(OSD_PAGE);
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Byte(MonIndex, MonWdata);
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):			if(MonIndex==0xff) 	{ WriteTW88BytePage(MonWdata); }
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):			else				WriteTW88Byte(MonIndex, MonWdata);
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage,MonWdata);
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(MonIndex, MonWdata);
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(MonPage | MonIndex, MonWdata);
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):			if(MonIndex==0xff) 	{ WriteTW88Page(MonWdata); }
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):			else				WriteTW88(MonIndex, MonWdata);
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonIndex, MonWdata);
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage | MonIndex, MonWdata);
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonIndex, MonWdata);
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage | MonIndex, MonWdata);
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Byte(MonIndex, MonWdata);
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(MonPage | MonIndex, MonWdata);
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE0_GENERAL );
monitor_RTL.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG003, 0xFE );	// enable only SW interrupt
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE4_SPI );					// Set Page=4
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);	// cmd len 1
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CA, SPICMD_WREN );				// SPI Command = WRITE_ENABLE
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C9, 0x00 );						// data Buff count Lo
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x03 );						// DMA-Write start
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);	// cmd len 1
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CA, SPICMD_RDSR);					// SPI Command
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88(REG4C6, 0x04 );						// data Buffer address 0x04D0
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C7, 0xD0 );						// data Buffer address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C9, 0x01 );						// data Buff count Lo
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x01 );						// DMA-Read
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4D0+cnt, dat); 
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 4);	// cmd len 1
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CA, SPICMD_PP );					// SPI Command = PAGE_PROGRAM
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CB, spiaddr>>16 );				// SPI address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CC, spiaddr>>8 );					// SPI address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CD, spiaddr );					// SPI address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88(REG4C6, 0x04 );						// data Buffer address 0x04D0
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C7, 0xD0 );						// data Buffer address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88(REG4C8, 0 );							// Write count Middle
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C9, cnt );						// Write count Low
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x07 );						// DMA-Write start, Busy check
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 1);	// cmd len 1
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CA,SPICMD_RDSR);					// CMD
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88(REG4C6, 0x04 );						// data Buffer address 0x04D0
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C7, 0xD0 );						// data Buffer address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C9, 0x01 );						// len of data buffer
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x01 );						// start READ
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(4);
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CA, SPICMD_RDID );
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88(REG4C6, 0x04 );						// data Buffer address 0x04D0
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C7, 0xD0 );						// data Buffer address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4DA, 0x00 );						// data Buff count high
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C8, 0x00 );						// data Buff count middle
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C9, 0x03 );						// data Buff count Lo
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x01 );						// DMA-Read
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4CA, SPICMD_WRDI );
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4CA, SPICMD_WREN );
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88(REG4C6, 0x04 );						// data Buffer address 0x04D0
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C7, 0xD0 );						// data Buffer address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4DA, 0x00 );						// data Buff count high
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C8, 0x00 );						// data Buff count middle
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C9, 0x00 );						// data Buff count Lo
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x03 );						// DMA-Write
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CA, cmd );
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88(REG4C6, 0x04 );						// data Buffer address 0x04D0
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C7, 0xD0 );						// data Buffer address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4DA, 0x00 );						// data Buff count high
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C8, 0x00 );						// data Buff count middle
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C9, 0x01 );						// data Buff count Lo
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x01 );						// DMA-Read
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 3);	// cmd len 1
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CA, SPICMD_WRSR );				// SPI Command = 
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CB, dat0);
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CC, dat1);
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88(REG4C6, 0x04 );						// data Buffer address 0x04D0
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C7, 0xD0 );						// data Buffer address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4DA, 0x00 );						// data Buff count high
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C8, 0x00 );						// data Buff count middle
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C9, 0x00 );						// data Buff count Low
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x07 );						// DMA-Write start, Busy check
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4D0+cnt, dat0); 
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 4);	// cmd len 1
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CA, SPICMD_PP );					// SPI Command = PAGE_PROGRAM
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CB, spiaddr>>16 );				// SPI address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CC, spiaddr>>8 );					// SPI address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CD, spiaddr );					// SPI address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88(REG4C6, 0x04 );						// data Buffer address 0x04D0
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C7, 0xD0 );						// data Buffer address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4DA, 0x00 );						// data Buff count high
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C8, 0x00 );						// data Buff count middle
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C9, cnt );						// data buff count Low
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x07 );						// DMA-Write start, Busy check
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CA, SPICMD_RDSR );
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88(REG4C6, 0x04 );						// data Buffer address 0x04D0
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C7, 0xD0 );						// data Buffer address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C9, 0x01 );						// data Buff count Lo
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x01 );						// DMA-Read
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 4);	// cmd len 1
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4CA, SPICMD_BE );				// SPI Command = 
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4CA, SPICMD_SE );				// SPI Command = 
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CB, spiaddr>>16 );				// SPI address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CC, spiaddr>>8 );					// SPI address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CD, spiaddr );					// SPI address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4DA, 0x00 );						// data Buff count high
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C8, 0x00 );						// data Buff count middle
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C9, 0 );							// data buff count Low
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x07 );						// DMA-Write start, Busy check
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG4C0, 1);		//BKTODO:TW8836 need REG4C0[7]
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG4C0, 5);		//BKTODO:TW8836 need REG4C0[7]
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG4C0, 0);		//BKTODO:TW8836 need REG4C0[7]
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 5);	// cmd len 5
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4CA, SPICMD_FASTREAD );			// SPI Command = 
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 7);	// cmd len 4
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4CA, SPICMD_4READ );				// SPI Command = 
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 4);	// cmd len 1
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4CA, SPICMD_READ );				// SPI Command = 
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CB, spiaddr>>16 );				// SPI address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CC, spiaddr>>8 );					// SPI address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CD, spiaddr );					// SPI address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88(REG4C6, 0x04 );						// data Buffer address 0x04D0
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C7, 0xD0 );						// data Buffer address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4DA, 0x00 );						// data Buff count high
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C8, 0x00 );						// data Buff count middle
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C9, cnt );						// data Buff count Lo
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x05 );						// DMA-Read start, Busy check
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CA, cmd );
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88(REG4C6, 0x04 );						// data Buffer address 0x04D0
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C7, 0xD0 );						// data Buffer address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4DA, 0x00 );						// data Buff count high
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C8, 0x00 );						// data Buff count middle
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4C9, 0x01 );						// data Buff count Lo
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4C9, 0x02 );						// data Buff count Lo
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x01 );						// DMA-Read
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | cmd_len);	// cmd len 1
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CA, cmd );				// SPI Command = 
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CB, dat0);
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4CC, dat1);
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	 	WriteTW88(REG4C6, 0x04 );						// data Buffer address 0x04D0
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C7, 0xD0 );						// data Buffer address
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4DA, 0x00 );						// data Buff count high
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C8, 0x00 );						// data Buff count middle
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C9, 0x00 );						// data Buff count Low
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x07 );						// DMA-Write start, Busy check
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE4_SPI );
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C3, 0x40+c_cnt);			// use chip register
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4DA,0 );					// DMA Length high
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4CA+i, w_cmd[i] );		// write cmd1
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C4, 0x01 );			// start
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4C4, 0x03 );		// start           , with busycheck
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( page );	//restore
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE4_SPI );
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4c3, 0x41 );				// mode, cmd-len 1
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4DA,0 );					// DMA Length high
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4ca, reg );					// cmd1
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4c4, 0x01 );				// start
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(4);							  	
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4c3, 0x41+cnt );				// mode, cmd-len 1+cnt
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4DA, 0 );						// DMA Length high
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C8, 0 );						// DMA Length middle
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C9, cnt);						// DMA Length low
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4ca, reg );						// cmd1
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG4cb+i, w_cmd[i] );
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4c4, 0x01 );					// start
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( page );	//restore
monitor_SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG300, ReadTW88(REG300) & ~0x01);	//turn off bypass, so FIFO will be ON.
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	else	WriteTW88(REG300, ReadTW88(REG300) | 0x01);		//turn on bypass, so FIFO will be OFF.
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG300, ReadTW88(REG300) | 0x01);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG300, ReadTW88(REG300) & ~0x02);	//turn off bypass, so FIFO will be ON.
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	else	WriteTW88(REG300, ReadTW88(REG300) |  0x02);	//turn on bypass, so FIFO will be OFF.
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG300, value ); 
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG_FOSD_CHEIGHT, height >> 1 ); 					//Font height(2~32)
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG_FOSD_MUL_CON, (width >> 2) * (height >> 1));	//sub-font total count.
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG303, temp );   				// write FONT OSD DE value
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG303, temp );   				// write FONT OSD DE value
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG304, ReadTW88(REG304) | 0x80);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	else    WriteTW88(REG304, ReadTW88(REG304) & ~0x80);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, value);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) | 0x02);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	if(fType)	WriteTW88(REG304, ReadTW88(REG304)| 0x01);	// Font Ram Access
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	else		WriteTW88(REG304, ReadTW88(REG304)& 0xFE);	// Osd Ram Access
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG305, (ReadTW88(REG305) & 0xFE) | (addr >> 8));
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG306, (BYTE)addr);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	if(dat&0x100)	WriteTW88(REG304,ReadTW88(REG304) |  0x20); 
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	else			WriteTW88(REG304,ReadTW88(REG304) & ~0x20);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307, (BYTE)dat);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG308, attr);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		if(addr & 0x100)	WriteTW88(REG304, ReadTW88(REG304) |  0x20); 	//Upper256
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		else 				WriteTW88(REG304, ReadTW88(REG304) & ~0x20);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG309, (BYTE)addr);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30A, *dat++);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30C, value & ~0x40);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30C, value | 0x40);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30C, r30c | i );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30D, (BYTE)(color>>8));
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30E, (BYTE)color);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30C, (index+i) | r30c);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30D, (BYTE)(array[i] >> 8));
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30E, (BYTE)array[i]);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) & ~0x20);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, *str++);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304)& ~0x20);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, *str++);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, dat);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	if( dat & 0x80 )  	WriteTW88(index, dat & 0x7F); 	//ON->OFF
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	else 				WriteTW88(index, dat | 0x80);	//OFF->ON
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, dat);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, temp );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG352,  lut );	 			// first, select color index
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, alpha );				// second, write alpha value
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG_FOSD_ALPHA_SEL, array[i*2]); 	// first, select color index
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(index,   array[i*2+1] );			// second, write alpha value
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG_FOSD_ALPHA_SEL,  base_lut+BPP3_alpha_lut_offset[i] );	// first, select color index
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(index, BPP3_alpha_value[i] );								// second, write alpha value
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+2,  temp );			// upper bit for position x, y
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+3, x );				// position x
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+4, y );				// position y
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+5, h );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+6, w );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+2, (ReadTW88(index+2)&0x8F) | ((x>>4)&0x70));
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+3, x);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+2, (ReadTW88(index+2)&0xFC)|(y>>8));
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+4, y);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+6, w);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(FOSDWinBase[win]+0x0B,value); 	
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	if(addr >=0x100)	WriteTW88(index+0x07, ReadTW88(index+0x07) |  0x10);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	else 				WriteTW88(index+0x07, ReadTW88(index+0x07) & ~0x10);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0F, (BYTE)addr);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, (ReadTW88(index) & 0x7F) | 0x40 );		//FOsdWinEnable(winno, OFF) & Enable Multi-Color
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x07, 0x00 );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x08, 0x00 );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x09, 0x00 );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0A, 0x00 );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0B, 0x00 );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0C, 0x00 );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0D, 0x00 );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0E, 0x00 );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0F, 0x00 );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG304, value);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG309, (BYTE)addr ); 		//Font Addr
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30A, *dat++);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):    WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG305, value);	
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30B, (BYTE)(font->bpp2 + dest_font_index) ); 			// 2bit-multi-font start
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG_FOSD_MADD3, (BYTE)(font->bpp3 +dest_font_index)); 	// 3bit-multi-font start
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG_FOSD_MADD4, (BYTE)(font->bpp4 +dest_font_index)); 	// 4bit-multi-font start
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG304,ReadTW88(REG304) & ~0x20);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		if(palette_group < 0xA)	WriteTW88(REG307, '0'+palette_group);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		else					WriteTW88(REG307, 'A'+palette_group-0x0A);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG308, FOSD_LUT_MAP_BPP2_START >>2);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG308, FOSD_LUT_MAP_BPP3_START >>2);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG308, FOSD_LUT_MAP_BPP4_START >>2);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG308, attr);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	if(dat < 0x100)	WriteTW88(REG304, ReadTW88(REG304)& ~0x20);			// clear Upper 256 it
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	else			WriteTW88(REG304, ReadTW88(REG304)| 0x20);			// upper 256
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, (BYTE)dat);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	if(dat < 0x100)	WriteTW88(REG304, ReadTW88(REG304)& ~0x20);			// clear Upper 256 it
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	else			WriteTW88(REG304, ReadTW88(REG304)| 0x20);			// upper 256
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, (BYTE)dat);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	if(dat&0x100)	WriteTW88(REG304,ReadTW88(REG304) |  0x20); 
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	else			WriteTW88(REG304,ReadTW88(REG304) & ~0x20);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, dat);
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont-RTL.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(index, *ptr );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG300, ReadTW88(REG300) & ~0x01);	//turn off bypass, so FIFO will be ON.
OSDFont.c (e:\prog\tw8835_e_fw120803b):	else	WriteTW88(REG300, ReadTW88(REG300) | 0x01);		//turn on bypass, so FIFO will be OFF.
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG300, ReadTW88(REG300) & ~0x02);	//turn off bypass, so FIFO will be ON.
OSDFont.c (e:\prog\tw8835_e_fw120803b):	else	WriteTW88(REG300, ReadTW88(REG300) |  0x02);	//turn on bypass, so FIFO will be OFF.
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG300, value ); 
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG_FOSD_CHEIGHT, height >> 1 ); 					//Font height(2~32)
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG_FOSD_MUL_CON, (width >> 2) * (height >> 1));	//sub-font total count.
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG303, temp );   				// write FONT OSD DE value
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG303, temp );   				// write FONT OSD DE value
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG304, ReadTW88(REG304) | 0x80);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	else    WriteTW88(REG304, ReadTW88(REG304) & ~0x80);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, value);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) | 0x02);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	if(fType)	WriteTW88(REG304, ReadTW88(REG304)| 0x01);	// Font Ram Access
OSDFont.c (e:\prog\tw8835_e_fw120803b):	else		WriteTW88(REG304, ReadTW88(REG304)& 0xFE);	// Osd Ram Access
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG305, (ReadTW88(REG305) & 0xFE) | (addr >> 8));
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG306, (BYTE)addr);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	if(dat&0x100)	WriteTW88(REG304,ReadTW88(REG304) |  0x20); 
OSDFont.c (e:\prog\tw8835_e_fw120803b):	else			WriteTW88(REG304,ReadTW88(REG304) & ~0x20);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307, (BYTE)dat);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG308, attr);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):		if(addr & 0x100)	WriteTW88(REG304, ReadTW88(REG304) |  0x20); 	//Upper256
OSDFont.c (e:\prog\tw8835_e_fw120803b):		else 				WriteTW88(REG304, ReadTW88(REG304) & ~0x20);
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG309, (BYTE)addr);
OSDFont.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30A, *dat++);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30C, value & ~0x40);
OSDFont.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30C, value | 0x40);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30C, r30c | i );
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30D, (BYTE)(color>>8));
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30E, (BYTE)color);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30C, (index+i) | r30c);
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30D, (BYTE)(array[i] >> 8));
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30E, (BYTE)array[i]);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) & ~0x20);
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, *str++);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304)& ~0x20);
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, *str++);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, dat);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	if( dat & 0x80 )  	WriteTW88(index, dat & 0x7F); 	//ON->OFF
OSDFont.c (e:\prog\tw8835_e_fw120803b):	else 				WriteTW88(index, dat | 0x80);	//OFF->ON
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, dat);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, temp );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG352,  lut );	 			// first, select color index
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, alpha );				// second, write alpha value
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG_FOSD_ALPHA_SEL, array[i*2]); 	// first, select color index
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(index,   array[i*2+1] );			// second, write alpha value
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG_FOSD_ALPHA_SEL,  base_lut+BPP3_alpha_lut_offset[i] );	// first, select color index
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(index, BPP3_alpha_value[i] );								// second, write alpha value
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+2,  temp );			// upper bit for position x, y
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+3, x );				// position x
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+4, y );				// position y
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+5, h );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+6, w );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+2, (ReadTW88(index+2)&0x8F) | ((x>>4)&0x70));
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+3, x);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+2, (ReadTW88(index+2)&0xFC)|(y>>8));
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+4, y);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+6, w);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(FOSDWinBase[win]+0x0B,value); 	
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	if(addr >=0x100)	WriteTW88(index+0x07, ReadTW88(index+0x07) |  0x10);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	else 				WriteTW88(index+0x07, ReadTW88(index+0x07) & ~0x10);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0F, (BYTE)addr);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, (ReadTW88(index) & 0x7F) | 0x40 );		//FOsdWinEnable(winno, OFF) & Enable Multi-Color
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x07, 0x00 );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x08, 0x00 );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x09, 0x00 );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0A, 0x00 );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0B, 0x00 );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0C, 0x00 );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0D, 0x00 );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0E, 0x00 );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index+0x0F, 0x00 );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG304, value);
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG309, (BYTE)addr ); 		//Font Addr
OSDFont.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG30A, *dat++);
OSDFont.c (e:\prog\tw8835_e_fw120803b):    WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG305, value);	
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG30B, (BYTE)(font->bpp2 + dest_font_index) ); 			// 2bit-multi-font start
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG_FOSD_MADD3, (BYTE)(font->bpp3 +dest_font_index)); 	// 3bit-multi-font start
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG_FOSD_MADD4, (BYTE)(font->bpp4 +dest_font_index)); 	// 4bit-multi-font start
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG304,ReadTW88(REG304) & ~0x20);
OSDFont.c (e:\prog\tw8835_e_fw120803b):		if(palette_group < 0xA)	WriteTW88(REG307, '0'+palette_group);
OSDFont.c (e:\prog\tw8835_e_fw120803b):		else					WriteTW88(REG307, 'A'+palette_group-0x0A);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG308, FOSD_LUT_MAP_BPP2_START >>2);
OSDFont.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG308, FOSD_LUT_MAP_BPP3_START >>2);
OSDFont.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG308, FOSD_LUT_MAP_BPP4_START >>2);
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG308, attr);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	if(dat < 0x100)	WriteTW88(REG304, ReadTW88(REG304)& ~0x20);			// clear Upper 256 it
OSDFont.c (e:\prog\tw8835_e_fw120803b):	else			WriteTW88(REG304, ReadTW88(REG304)| 0x20);			// upper 256
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, (BYTE)dat);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	if(dat < 0x100)	WriteTW88(REG304, ReadTW88(REG304)& ~0x20);			// clear Upper 256 it
OSDFont.c (e:\prog\tw8835_e_fw120803b):	else			WriteTW88(REG304, ReadTW88(REG304)| 0x20);			// upper 256
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, (BYTE)dat);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	if(dat&0x100)	WriteTW88(REG304,ReadTW88(REG304) |  0x20); 
OSDFont.c (e:\prog\tw8835_e_fw120803b):	else			WriteTW88(REG304,ReadTW88(REG304) & ~0x20);
OSDFont.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, dat);
OSDFont.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
OSDFont.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(index, *ptr );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG40E, (ReadTW88(REG40E) & 0x0F) | msb);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG40E, (BYTE)(wTemp>>8) );		// write SPI OSD DE value(high nibble)
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG40F, (BYTE)wTemp );   		// write SPI OSD DE value(low byte)
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C1, ReadTW88(REG4C1) |  0x01);		//DMA start at VBlank
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG400, dat | 0x04);						//enable SpiOSD
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG400, dat & ~0x04);						//disable SpiOSD
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C1, ReadTW88(REG4C1) & ~0x01);		//DMA start at immediately
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(index, dat | 0x01);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	else     WriteTW88(index, dat & 0xfe);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	if( en ) WriteTW88(index, dat | 0x02);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	else     WriteTW88(index, dat & ~0x02);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//0
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//1
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//2
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//3
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//4
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//5
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//6
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//7
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//8
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//9
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//A
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//B
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//C
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//D
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(reg_i++, *data_p++);	//E
OSDSPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(reg_i++, *data_p++);	//0F
OSDSPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(reg_i++, *data_p++);	//10
OSDSPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(reg_i++, *data_p++);	//11
OSDSPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(reg_i++, *data_p++);	//12
OSDSPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(reg_i++, *data_p++);	//13
OSDSPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(reg_i++, *data_p++);	//14
OSDSPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(reg_i++, *data_p++);	//15
OSDSPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(reg_i++, *data_p++);	//16
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(index, dat & 0xfe);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(index, (ReadTW88(index ) | 0x04));				// en Alpha & Global
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(index, (ReadTW88(index ) & 0xFB ) );				// dis Alpha & Global
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(index, color );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	if( high ) WriteTW88(REG420, dat | 0x02);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	else       WriteTW88(REG420, dat & 0xfd);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG410, R410_data | i );	//assign byte ptr	
OSDSPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG411, (BYTE)LutOffset);	//reset address ptr.
OSDSPI.c (e:\prog\tw8835_e_fw120803b):					WriteTW88(REG412, temp_SPI_Buffer[k]);		//write data
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG410, R410_data);			//assign byte ptr. always start from 0.
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG411, (BYTE)LutOffset);	//reset address ptr.
OSDSPI.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG412, temp_SPI_Buffer[k]);		//write data
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG410, 0xa0 );    			// LUT Write Mode, En & byte ptr inc. DMA needs it.
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG411, 0); 					// LUT addr. set 0 on DMA
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x04, 0x00 );	// DMA stop
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x03, 0x80 | SPICMD_x_BYTES ); //LUT,Increase, 0x0B with 5 commands, 0xeb with 7 commands	           
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x0a, SPICMD_x_READ ); 			// SPI Command=R
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x08, *data_p++ );	//size0
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x09, *data_p++ );	//size1
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x06, *data_p++ ); 	//LutOffset[8:6] -> R4C6[2:0]
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x07, *data_p++ );		//LutOffset[5:0] -> R4C7[7:2] 
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x0b, *data_p++); 		//address0
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x0c, *data_p++ );		//address1
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x0d, *data_p++ ); 	//address2
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG404, ReadTW88(REG404) | 0x01);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG405, ((SOsdHwBuff_rle_bpp==7?8:SOsdHwBuff_rle_bpp) << 4) | (SOsdHwBuff_rle_count));
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG406, SOsdHwBuff_rle_win);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG404, ReadTW88(REG404) & 0xFE);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG405, 0);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG406, 0);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG410, 0xc3 );    		// LUT Write Mode, En & byte ptr inc.
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		if(SOsdHwBuff_alpha >> 8)	WriteTW88(REG410, ReadTW88(REG410) | 0x08);	//support 512 palette
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		else            			WriteTW88(REG410, ReadTW88(REG410) & 0xF7);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG411, (BYTE)SOsdHwBuff_alpha ); 	// alpha index
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG412, 0x7F/*value*/ ); 			// alpha value
OSDSPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(reg_i++, *data_p++);	
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG410,0xa0);		//read B
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG411,0);		//addr 0
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG410, 0xa0 );    			// LUT Write Mode, En & byte ptr inc. DMA needs it.
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG411, 0); 					// LUT addr. set 0 on DMA
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x04, 0x00 );	// DMA stop
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x03, 0x80 | SPICMD_x_BYTES ); //LUT,Increase, 0x0B with 5 commands, 0xeb with 7 commands	           
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x0a, SPICMD_x_READ ); 			// SPI Command=R
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x08, *data_p++ );	//size0
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x09, *data_p++ );	//size1
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x06, *data_p++ ); 	//LutOffset[8:6] -> R4C6[2:0]
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x07, *data_p++ );		//LutOffset[5:0] -> R4C7[7:2] 
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x0b, *data_p++); 		//address0
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x0c, *data_p++ );		//address1
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x0d, *data_p++ ); 	//address2
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x04, 0x01 ); 			// DMA Start
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG410,0xa0);	//read B
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG411,0);		//addr 0
OSDSPI.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG411, 0);			//addr 0
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG404, ReadTW88(REG404) | 0x01);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG405, ((SOsdHwBuff_rle_bpp==7?8:SOsdHwBuff_rle_bpp) << 4) | (SOsdHwBuff_rle_count));
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG406, SOsdHwBuff_rle_win);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG404, ReadTW88(REG404) & 0xFE);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG405, 0);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG406, 0);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG410, 0xc3 );    		// LUT Write Mode, En & byte ptr inc.
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		if(SOsdHwBuff_alpha >> 8)	WriteTW88(REG410, ReadTW88(REG410) | 0x08);	//support 512 palette
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		else            			WriteTW88(REG410, ReadTW88(REG410) & 0xF7);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG411, (BYTE)SOsdHwBuff_alpha ); 	// alpha index
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG412, 0x7F/*value*/ ); 			// alpha value
OSDSPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(reg_i++, *data_p++);	
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG410, reg);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG411, (BYTE)LutOffset ); 			// LUT addr. set 0 on DMA
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x03, 0x80 | 7/*SPICMD_x_BYTES*/ ); //LUT,Increase, 0x0B with 5 commands, 0xeb with 7 commands	           
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x0a, 0xEB/*SPICMD_x_READ*/ ); 			// SPI Command=R
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x0b, (BYTE)(address>>16) ); 	// SPI Addr
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x0c, (BYTE)(address>>8) );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x0d, (BYTE)(address) ); 		//////00
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x06, (BYTE)(LutOffset >> 6) ); 	//LutOffset[8:6] -> R4C6[2:0]
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x07, (BYTE)(LutOffset << 2) );	//LutOffset[5:0] -> R4C7[7:2] 
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x1a, 0x00 ); // DMA size
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x08, (BYTE)(size >> 8) );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x09, (BYTE)size );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG410,0x80/*0xa0*/);	//read B
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG411,0);		//addr 0
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG410, reg);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG411, (BYTE)LutOffset ); 			// LUT addr. set 0 on DMA
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x04, 0x00 );	// DMA stop	
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x03, 0x80 | SPICMD_x_BYTES ); //LUT,Increase, 0x0B with 5 commands, 0xeb with 7 commands	           
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x0a, SPICMD_x_READ ); 			// SPI Command=R
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x0b, (BYTE)(address>>16) ); 	// SPI Addr
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x0c, (BYTE)(address>>8) );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x0d, (BYTE)(address) ); 		//////00
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x06, (BYTE)(LutOffset >> 8));	//LutOffset[8]  ->R4C6[0]
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x07, (BYTE)LutOffset);			//LutOffset[7:0]->R4C7[7:0]
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x06, (BYTE)(LutOffset >> 6) ); 	//LutOffset[8:6] -> R4C6[2:0]
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4C0_SPIBASE+0x07, (BYTE)(LutOffset << 2) );	//LutOffset[5:0] -> R4C7[7:2] 
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x1a, 0x00 ); // DMA size
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x08, (BYTE)(size >> 8) );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x09, (BYTE)size );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG410, ReadTW88(REG410) | 0x04);	//indicate GROUP_B palette table. MAX size 256.
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0_SPIBASE+0x04, 0x01 ); // DMA Start
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG410,0x80/*0xa0*/);	//read B
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG411,0);		//addr 0
OSDSPI.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG411, 0);			//addr 0
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG410, 0xc3 );    		// LUT Write Mode, En & byte ptr inc.
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	if(lutloc >> 8)	WriteTW88(REG410, ReadTW88(REG410) | 0x08);	//support 512 palette
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	else            WriteTW88(REG410, ReadTW88(REG410) & 0xF7);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG411, (BYTE)lutloc ); // LUT addr
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG412, value ); // LUT addr
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG407, (dcnt << 4) | (ccnt));
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG406, (ReadTW88(REG406) & 0x0F) | (winno << 4));
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG405, (dcnt << 4) | (ccnt));
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG404, (ReadTW88(REG404) & 0x0F) | (winno << 4));
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG405, (dcnt << 4) | (ccnt));
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG406, winno);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		if(reset)	WriteTW88(REG406, ReadTW88(REG406) | 0x02);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		else		WriteTW88(REG406, ReadTW88(REG406) & 0xFD);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		if(reset)	WriteTW88(REG404, ReadTW88(REG404) | 0x02);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		else		WriteTW88(REG404, ReadTW88(REG404) & 0xFD);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	if(en)		WriteTW88(REG404, ReadTW88(REG404) | 0x01);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	else		WriteTW88(REG404, ReadTW88(REG404) & 0xFE);
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG406, (ReadTW88(REG406) & 0x0F));
OSDSPI.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG404, (ReadTW88(REG404) & 0x0F));
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SOSD );
OSDSPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG406, 0);
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_LEDC);
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E0, ReadTW88(REG0E0 ) | 1 );
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E0, ReadTW88(REG0E0 ) & ~0x01 );
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_LEDC);
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E0, 0x72);	//default. & disable OverVoltage
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E5, 0x80);	//LEDC digital output enable.
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E0, 0x12);	//Off OverCurrent. Disable Protection
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E0, 0x13);	//LEDC digital block enable
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E0, 0x11);	//Analog block powerup
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E0, 0x71);	//enable OverCurrent, enable Protection control
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GPIO);
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG084, 0x0C);	//enable
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG08C, 0x0C);	//output enable
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_INPUT);
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG007, ReadTW88(REG007) | 0x08);	 
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG007, ReadTW88(REG007) & ~0x08);	//DataInitNTSC clear it. 
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG008, 0x80 | (ReadTW88(REG008) & 0x0F));	//Output enable......BUGBUG
OutputCtrl.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG008,  value);
Printf.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(reg>>8);
Printf.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	if(onoff)	WriteTW88(REG201, ReadTW88(REG201) | 0x04);
Scaler.c (e:\prog\tw8835_e_fw120803b):	else		WriteTW88(REG201, ReadTW88(REG201) & 0xFB);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG202, (ReadTW88(REG202) & 0xC0) | filedOffset);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG204, (BYTE)(value>>8));		
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG203, (BYTE)value);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20A, (ReadTW88(REG20A) & 0xF0) | (value >> 8));
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG209, (BYTE)value);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG206, (BYTE)(value>>8));
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG205, (BYTE)value);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG201, ReadTW88(REG201) | 0x40);
Scaler.c (e:\prog\tw8835_e_fw120803b):	else    WriteTW88(REG201, ReadTW88(REG201) & ~0x40);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG207, px_scale >> 4);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG212, (ReadTW88(REG212) & 0x0F) | (BYTE)(px_scale & 0x0F));
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG208, px_inc);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20B, delay);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20E, (ReadTW88(REG20E) & 0x8F) | ((len & 0x700) >> 4));
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20C, (BYTE)len);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	if(fInvert) WriteTW88(REG20D, ReadTW88(REG20D) |  0x04);
Scaler.c (e:\prog\tw8835_e_fw120803b):	else		WriteTW88(REG20D, ReadTW88(REG20D) & ~0x04);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20E, (ReadTW88(REG20E) & 0xF0) | (length >> 8) );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20F, (BYTE)length);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG210, pos);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG212, (ReadTW88(REG212) & 0xF0) | (BYTE)(width>>8));
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG211, (BYTE)width);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG213, pos);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG214, (ReadTW88(REG214) & 0xF0) | len);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG215, pos);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG217, (ReadTW88(REG217) & 0xF0) | (BYTE)(height>>8));
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG216, (BYTE)height);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE5_MEAS);
Scaler.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE0_DTV);
Scaler.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE0_INPUT);
Scaler.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(PAGE5_MEAS);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG218, len << 6 | pos);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, (ReadTW88(REG20D)&0x3F)|(value>>2)&0xC0);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG219, (BYTE)value );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21A, top);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21B, bottom);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21C, (ReadTW88(REG21C)&0x0F)|(value>>4)&0xF0);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21D, (BYTE)value );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	if(on)	WriteTW88(REG21C, (ReadTW88(REG21C) | 0x04) );			//on manual freerun
Scaler.c (e:\prog\tw8835_e_fw120803b):	else 	WriteTW88(REG21C, (ReadTW88(REG21C) & ~0x04) );		//off manual freerun
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21C, value);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21E, value);
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Scaler.c (e:\prog\tw8835_e_fw120803b):	if(on)	WriteTW88(REG21E, (ReadTW88(REG21E) | 0x01) );			//on manual mute
Scaler.c (e:\prog\tw8835_e_fw120803b):	else 	WriteTW88(REG21E, (ReadTW88(REG21E) & ~0x01) );		//off manual mute
Scaler.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG006, ReadTW88(REG006) | 0x80);	//SW RESET
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_SSPLL );
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F6, 0x00 );	// PCLK div by 1
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, 0x81 );	// PCLKO div by 2
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, 0xe0 );	// Source=PCLK, Delay=1, Edge=1
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_SSPLL );
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F6, 0x00 );	// PCLK div by 1
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, 0x80 );	// PCLKO div by 1
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, 0x20 );	// Source=PCLK, Delay=0, Edge=0
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_SSPLL );
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F6, 0x00 );	// PCLK div by 1
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, 0x80 );	// PCLKO div by 1
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, 0x00 );	// Source=27M
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_SSPLL);
Settings.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG0FC, ReadTW88(REG0FC) & ~0x80);
Settings.c (e:\prog\tw8835_e_fw120803b):	else	WriteTW88(REG0FC, ReadTW88(REG0FC) |  0x80);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_SSPLL);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0FA_FPLL2, (BYTE)FPLL );
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F9_FPLL1, (BYTE)(FPLL>>8));
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F8_FPLL0, (ReadTW88(REG0F8_FPLL0)&0xF0) | (FPLL>>16));
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE0_SSPLL);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_SSPLL);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0FD_SSPLL_ANALOG, value );
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE0_SSPLL);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F6, (ReadTW88(REG0F6) & 0xF8) | divider);
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(0);
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(2);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, value | div);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, value);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(4);
Settings.c (e:\prog\tw8835_e_fw120803b):	if(ClkPllSel) WriteTW88(REG4E0, ReadTW88(REG4E0) |  0x01);
Settings.c (e:\prog\tw8835_e_fw120803b):	else		  WriteTW88(REG4E0, ReadTW88(REG4E0) & ~0x01);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(4);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, (ReadTW88(REG4E1) & ~0x07) | divider);	//CLKPLL Divider
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(4);
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(4);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, 0xff );				
Settings.c (e:\prog\tw8835_e_fw120803b): 	WriteTW88Page(PAGE4_CLOCK);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E0, shadow_r4e0 & 0xFE);	//select PCLK.
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, 0x20 | divider);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E0, shadow_r4e0 & 0xFE);	//select PCLK.
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, 0x20 | divider);		//CLKPLL + divider.
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG002, 0xff );				
Settings.c (e:\prog\tw8835_e_fw120803b): 	WriteTW88Page(PAGE4_CLOCK);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E0, shadow_r4e0);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, shadow_r4e1);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, (McuSpiClkSel << 4) | value);
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(4);
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(0);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_LLPLL);
Settings.c (e:\prog\tw8835_e_fw120803b):	if(use_27M)	WriteTW88(REG1C0, ReadTW88(REG1C0) | 0x01); 
Settings.c (e:\prog\tw8835_e_fw120803b):	else		WriteTW88(REG1C0, ReadTW88(REG1C0) & ~0x01);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_SSPLL);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F9, 0x50);	  	//SSPLL 70MKz. 0x50:70MHz, 0x3C:66.6MHz..Pls use SspllSetFreqReg(0x015000);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F6, 0x00); 		//PCLK div:1. SPI CLK div:1
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, 0x81 );	// PCLKO div by 2. ??Polarity
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_DCDC);
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E8, 0x72);	//default. & disable OverVoltage
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E8, 0x12);	//disable OverCurrent, disable UnderCurrent
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E8, 0x13);	//enable DC convert digital block
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E8, 0xF2);	//Printf("\nREG0E8:F2[%bd]",ReadTW88(REG0EA)>>4);
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E8, 0x02);	//Printf("\nREG0E8:02[%bd]",ReadTW88(REG0EA)>>4);
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E8, 0x03);	//Printf("\nREG0E8:03[%bd]",ReadTW88(REG0EA)>>4);
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E8, 0x01);	//Printf("\nREG0E8:01[%bd]",ReadTW88(REG0EA)>>4);
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E8, 0x11);	//powerup DC sense block
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0E8, 0x71);	//turn on under current feedback control
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG084, ReadTW88(REG084) | 0x08);		//enable 
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG08C, ReadTW88(REG08C) | 0x08);		//output enable
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG08C, ReadTW88(REG08C) & ~0x08);	//output disable
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG084, ReadTW88(REG084) & ~0x08);	//disable
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG084, 0x00);	//disable
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Settings.c (e:\prog\tw8835_e_fw120803b):	if(fOn) WriteTW88(REG0F1, ReadTW88(REG0F1) |  0x40);		
Settings.c (e:\prog\tw8835_e_fw120803b):	else	WriteTW88(REG0F1, ReadTW88(REG0F1) & ~0x40);		
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG08C, ReadTW88(REG08C) | 0x04);		//output FPPWC enable
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG084, ReadTW88(REG084) | 0x04);		//enable GPIO
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG08C, ReadTW88(REG08C) & ~0x04);	//output FPPWC disable
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG084, ReadTW88(REG084) & ~0x04);	//disable GPIO
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG084, 0x00);											//disable
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Settings.c (e:\prog\tw8835_e_fw120803b):	if(fOn) WriteTW88(REG0F1, ReadTW88(REG0F1) |  0x80);		
Settings.c (e:\prog\tw8835_e_fw120803b):	else	WriteTW88(REG0F1, ReadTW88(REG0F1) & ~0x80);		
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GPIO);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG084, 0x00);	//FP_BiasOnOff(OFF);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG08C, 0x00);	//FP_PWC_OnOff(OFF);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG094, 0x00);	//output
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, 0x01);			//SPI_CK_DIV[2:0]=1. SPI_CK_SEL[5:4]=0(27MHz) will be changed later 
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E0, 0x00);			// PCLK_SEL[0]=0(PCLK)
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4E1, 0x02);		//SPI_CK_DIV[2:0]=2(%2). SPI_CK_SEL[5:4]=0(27MHz) will be changed later 
Settings.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG4E1, 0x01);		//SPI_CK_DIV[2:0]=1(%1.5).SPI_CK_SEL[5:4]=0(27MHz) will be changed later
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E0, 0x00);			// PCLK_SEL[0]=0(PCLK)
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E0, 0x01);			// PCLK_SEL[0]=1(PLL108M)
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F8, 0x01);	//65MHz
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F9, 0x34);	
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0FA, 0x26);	
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F6, 0x00); 	//PCLK_div_by_1 SPICLK_div_by_1
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0FD, 0x34);	//SSPLL Analog Control
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F8, 0x02);	//108MHz
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F9, 0x00);	
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0FA, 0x00);	
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F6, 0x00); 	//PCLK_div_by_1 SPICLK_div_by_1
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0FD, 0x34);	//SSPLL Analog Control
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, 0x01);  	//pclko div 2. 	65/2 = 32.5MHz 
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, 0x02);	//pclko div 3. 	108/3=36MHz
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0FC, ReadTW88(REG0FC) & ~0x80);	//Turn off SSPLL PowerDown first.
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F6, ReadTW88(REG0F6) | 0x20); 	//SPICLK_div_by_3
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_CLOCK);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, ReadTW88(REG4E1) | 0x20);		//SPI_CK_SEL[5:4]=2. CLKPLL
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1C0, 0x01);		//LLPLL input def 0x00
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG105, 0x2f);		//Reserved def 0x0E
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21E, 0x03);		//BLANK def 0x00.	--enable screen blanking with AUTO
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_LEDC);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0E0, 0xF2);		//LEDC. default. 
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0E8, 0x70);		//Masami
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0EA, 0x3F);		//Van. 110909
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG007, 0x01);	// Serial RGB
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG007, 0x02);	// FP LSB
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG007, 0x00);	// TCON
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG008, 0xA0);	//GPOSEL for IRQ. 0=Negative IRQ(Use).1=Positive IRQ
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG008, 0x89);		
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG008, 0xA9);		
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG040, 0x10);		
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG041, 0x0C);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG042, 0x02);	
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG043, 0x10);	
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG044, 0xF0);	
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG045, 0x82);	
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG046, 0xD0);	
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG047, 0x80);	
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG049, 0x41);	//def 0x00
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B1, 0xC0); //disable Touch Ready&Pen interrupt
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0ED, 0x40);	//def:0x80
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0F1, 0xC0);	//[7]FP_PWC [6]FP_BIAS		
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_DECODER);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG11C, 0x0F);	//*** Disable Shadow
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG102, 0x40);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG106, 0x03);	//ACNTL def 0x00
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG107, 0x02);	//Cropping Register High(CROP_HI) def 0x12
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG109, 0xF0);	//Vertical Active Register,Low(VACTIVE_LO) def 0x20
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG10A, 0x0B);	//Horizontal Delay,Low(HDELAY_LO) def 0x10
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG111, 0x5C);	//CONTRAST def 0x64
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG117, 0x80);	//Vertical Peaking Control I	def 0x30
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG11E, 0x00);	//Component video format: def 0x08
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG121, 0x22);	//Individual AGC Gain def 0x48
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG127, 0x38);	//Clamp Position(PCLAMP)	def 0x2A
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG128, 0x00);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG12B, 0x44);	//Comb Filter	def -100-100b
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG130, 0x00);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG134, 0x1A);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG135, 0x00);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1C6, 0x20); //WriteTW88(REG1C6, 0x27);	//WriteTW88(REG1C6, 0x20);  Use VAdcSetFilterBandwidth()
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1CB, 0x3A);	//WriteTW88(REG1CB, 0x30);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG203, 0xCC);		//XSCALE: 0x1C00. def:0x2000
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG204, 0x1C);		//XSCALE:
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG205, 0x8A);		//YSCALE: 0x0F8A. def:0x2000
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG206, 0x0F);		//YSCALE:
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG207, 0x40);		//PXSCALE[11:4]	def 0x800
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG208, 0x20);		//PXINC	def 0x10
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG209, 0x00);		//HDSCALE:0x0400 def:0x0100
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20A, 0x04);		//HDSCALE
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20B, 0x08);		//HDELAY2 def:0x30
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20D, 0x90 | (ReadTW88(REG20D) & 0x03));  //LNTT_HI def 0x80. 
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20E, 0x20);		//HPADJ def 0x0000.  20E[6:4] HACTIVE2_HI
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG20F, 0x00);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG210, 0x21);		//HA_POS	def 0x10
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG211, 0x21);		//HA_LEN	def 0x0300
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG212, 0x03);		//PXSCALE[3:0]	def:0x800 HALEN_H[3:0] def:0x03
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG211, (BYTE)(PANEL_H+1));		//HA_LEN	def 0x0300
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG212, (PANEL_H+1)>>8);		//PXSCALE[3:0]	def:0x800 HALEN_H[3:0] def:0x03
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG213, 0x00);		//HS_POS	def 0x10
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG214, 0x20);		//HS_LEN
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG215, 0x2E);		//VA_POS	def 0x20
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG216, 0xE0);		//VA_LEN_LO	def 0x0300
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG217, 0x01);		//VA_LEN_HI
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG216, PANEL_V);		//VA_LEN_LO	def 0x0300
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG217, PANEL_V>>8);	//VA_LEN_HI
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21C, 0x42);	//PANEL_FRUN. def 0x40
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG21E, 0x03);		//BLANK def 0x00.	--enable screen blanking. SW have to remove 21E[0]
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG280, 0x20);		//Image Adjustment register
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG28B, 0x44);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG2E4, 0x21);		//--dither
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_TCON);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG240, 0x10);		//WriteTW88(REG240, 0x11);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG241, 0x00);		//WriteTW88(REG241, 0x0A);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG242, 0x05);		//WriteTW88(REG242, 0x05);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG243, 0x01);		//WriteTW88(REG243, 0x01);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG244, 0x64);		//WriteTW88(REG244, 0x64);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG245, 0xF4);		//WriteTW88(REG245, 0xF4);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG246, 0x00);		//WriteTW88(REG246, 0x00);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG247, 0x0A);		//WriteTW88(REG247, 0x0A);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG248, 0x36);		//WriteTW88(REG248, 0x36);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG249, 0x10);		//WriteTW88(REG249, 0x10);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24A, 0x00);		//WriteTW88(REG24A, 0x00);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24B, 0x00);		//WriteTW88(REG24B, 0x00);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24C, 0x00);		//WriteTW88(REG24C, 0x00);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24D, 0x44);		//WriteTW88(REG24D, 0x44);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG24E, 0x04);		//WriteTW88(REG24E, 0x04);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG006, 0x06);	//display direction. TSCP,TRSP
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG007, 0x01);	// Serial RGB
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG007, 0x02);	// FP LSB
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG007, 0x00);	// TCON
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(4);
Settings.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4E1, 0x21);			//SPI_CK_DIV[2:0]=1. SPI_CK_SEL[5:4]=2(CLKPLLMHz) will be changed later 
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER );
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) & 0xDF);		//default: lower 256 char.		
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) & 0xFE);		//OsdRam access mode
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) & 0xDF);		//default: lower 256 char.		
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) & 0xFE);		//OsdRam access mode
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE3_FOSD);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG304, value & 0xDE);	//lower 256 char, OsdRam access mode.
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, *str++);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, *str);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, font * 3 + BPP3DIGIT_START);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, *str);	
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(0x00);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG003, 0xF8);	//enable ISR.
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(0x00);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG003, 0xF8);	//enable ISR.
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE2_SCALER);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	    WriteTW88(REG201, ReadTW88(REG201) | 0x80);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG201, value & 0x7F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	    WriteTW88(REG201, value | 0x80);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(0x00);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG003, 0xFE);	//disable ISR.
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307, ch);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, (ch-0x30) * 3 + BPP3DIGIT_START);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, ch);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, ch);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, ch);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, *str);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, 0);	//space
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE2_SCALER);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG201, ReadTW88(REG201) & 0xFD);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_GENERAL );
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG003, 0xFC );	// enable VDLOSS, SW
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG003, 0xF8 );	// enable HSyncVSync, VDLOSS, SW
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG003, 0xFC );	// enable VDLOSS, SW
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page( PAGE4_SOSD );
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88( REG410, 0xc3 );    		// LUT Write Mode, En & byte ptr inc.
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG411, 0x00);			WriteTW88(REG412, 0x7F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x01);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x02);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x03);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x04);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x05);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x06);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x07);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x08);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x09);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x0a);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x0b);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x0c);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x0d);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x0e);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	/*WriteTW88(REG411, 0x0f);*/		WriteTW88(REG412, 0x3F);
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);	
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);	
SOsdMenu.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);	
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0, (ReadTW88(REG4C0) & ~0x07) | mode);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C4, 0);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C3, dest << 6 | SPICMD_x_BYTES);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CA, SPICMD_x_READ);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C3, dat);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C3, (ReadTW88(REG4C3) & 0xF0) | len);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(4);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C4, dat);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C6, (BYTE)(addr >> 8));	//page
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C7, (BYTE)addr);			//index
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4F6, (BYTE)(addr >> 8));	//page
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4F7, (BYTE)addr);			//index
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4DA, len>>16 );
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C8, len>>8 );
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C9, len );
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C9, len_l );
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4F5, len>>16 );
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4F8, len>>8 );
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4F9, len );
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4F9, len_l );
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CA, cmd);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CA, cmd1);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CB, cmd2);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CA, cmd1);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CB, cmd2);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CC, cmd3);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CB, (BYTE)(addr >> 16));
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CC, (BYTE)(addr >> 8));
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4CD, (BYTE)(addr));
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG4C0, (ReadTW88(REG4C0) & ~0x07) | mode);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI );
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI);
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE4_SPI );
SPI.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(4);						 
SpiFlashMap.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(4);
SpiFlashMap.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG410, 0xc3 );    		// LUT Write Mode, En & byte ptr inc.
SpiFlashMap.c (e:\prog\tw8835_e_fw120803b):			if(SOsdHwBuff_alpha >> 8)	WriteTW88(REG410, ReadTW88(REG410) | 0x08);	//support 512 palette
SpiFlashMap.c (e:\prog\tw8835_e_fw120803b):			else            			WriteTW88(REG410, ReadTW88(REG410) & 0xF7);
SpiFlashMap.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG411, (BYTE)SOsdHwBuff_alpha ); 	// alpha index
SpiFlashMap.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG412, 0x7F/*value*/ ); 			// alpha value
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, 0x0c ); // Auto Inc. use under 256 char index
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			if(i >= 10) WriteTW88(REG307, 0x41+i-10);	//draw A to F
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			else 		WriteTW88(REG307, 0x30+i);	//draw 0 to 9
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			if(j >= 10) WriteTW88(REG307, 0x41+j-10);	//draw A to F
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			else 		WriteTW88(REG307, 0x30+j);	//draw 0 to 9
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, 0x0c );			// Display RAM Access Mode
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, 0x0c ); // Auto Inc.
test_FOSD.c (e:\prog\tw8835_e_fw120803b):				WriteTW88(REG304, ReadTW88(REG304) | 0x20);	 
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, (BYTE)index);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) & 0xDF);		//default: lower 256 char.		
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) & 0xFE);		//OsdRam access mode
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, 0x0c ); // Auto Inc.
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, (BYTE)index);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, 0x0c ); // Auto Inc.
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307, 0xFD);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307, 0xFE);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307, 0xFF);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) | 0x20);	//set UP256 before update attr.
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, (BYTE)index);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) & 0xDF);		//default: lower 256 char.		
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) & 0xFE);		//OsdRam access mode
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, 0x0c ); // Auto Inc.
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, (BYTE)index);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, (BYTE)index);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) & 0xDF);		//default: lower 256 char.		
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) & 0xFE);		//OsdRam access mode
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG310, ReadTW88(REG310) | 0x40 ); // temp - enable MultiBPP on Win1
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30C, (index+i) | r30c); //index 2 is for normal foreground	   Now 6bit.(64).
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30D, (BYTE)(array[i] >> 8));
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG30E, (BYTE)array[i]);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, 0x0c ); // Auto Inc.
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, i+0x10);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307, 0x7E);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307, 0x82); 
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, i*3+BPP3DIGIT_START);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, i*3+BPP3DIGIT_START);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307, BPP4PENGUIN_START);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG307, BPP4PENGUIN_START+4); 
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, i*3+BPP3DIGIT_START);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, i+0x10);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, i+0x10+5);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, i*3+BPP3DIGIT_START);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):			WriteTW88(REG307, i*3+BPP3DIGIT_START);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) & 0xDF);		//default: lower 256 char.		
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, ReadTW88(REG304) & 0xFE);		//OsdRam access mode
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE3_FOSD );
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG310, ReadTW88(REG310) | 0x40 ); // temp - enable MultiBPP on Win1
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG304, 0x00);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG305, 0x00);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG306, WIN0_OSDRAM+i);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, FOSD_ASCII_BLANK);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG306, WIN0_OSDRAM+i);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG308, i << 4 );			//change BG color. LOW 8
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG306, WIN1_OSDRAM+i);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, FOSD_ASCII_BLANK);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG306, WIN1_OSDRAM+i);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG308, (i << 4) + 0x80);	//change BG color. High 8
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG306, WIN2_OSDRAM+i);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG307, FOSD_ASCII_BLANK);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG306, WIN2_OSDRAM+i);
test_FOSD.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG308, (i << 4) );			//change BG color.
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_TOUCH );
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B4, 0x03 );						// clock sel div16
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B0, 0x0c + channel );				// write Start, erase Ready,
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B0, 0x24 + channel );				// write Start, erase Ready,
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page );
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_TOUCH );
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B4, 0x03 );						// clock sel div16
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page );
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_TOUCH );
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B0, 0x02 );				//power up. with Z2 measure
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B1, 0xF8 );				//TODO:Touch Ready & Touch Pen is not implemented yet.
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B4, 0x02 ); 
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B0, 0x20 | ReadTW88(REG0B0) );	//need a start command
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B0, ~0x20 & ReadTW88(REG0B0) );
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B4, 0x0A );				// div 8, rsel=10k, continuous sensing mode
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B4, 0x0C );				// div 32, rsel=10k, continuous sensing mode
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_TOUCH);
TouchKey.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG0B0, 0x07); 	//mode_aux3
TouchKey.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B0, 0x01);		//mode_z1
TouchKey.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B0, 0x00);		//mode_X
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B0, 0x03);		//mode_Y
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG0B0, 0x01);		//mode_z1
TouchKey.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
TouchKey.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(page);
TouchKey.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteTW88(a, b)			WriteI2CByte(TW88I2CAddress, a, b)
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteTW88Page(p)		WriteI2CByte(TW88I2CAddress, 0xFF, p)
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteTW88Byte(a, b)		WriteTW88(a,b)
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteTW88BytePage(p)	WriteTW88Page(p)
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteTW88(a, b)			regTW88[(BYTE)(a)] = ((BYTE)(b))
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteTW88Page(p)		regTW88[(BYTE)0xff] = ((BYTE)(p))
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteTW88Byte(a, b)		WriteTW88(a, b)
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteTW88BytePage(p)	WriteTW88Page(p)
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteHost(a, b)			WriteTW88(a, b)
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteHostPage(p)		WriteTW88Page(p)
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteTW88(a, b)			regTW88[a] = ((BYTE)(b))
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteTW88Page(p)    
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteTW88Byte(a, b)		regTW88[(BYTE)(a)] = ((BYTE)(b))   
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteTW88BytePage(p)	regTW88[(BYTE)0xff] = ((BYTE)(p))
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteHost(a, b)			WriteTW88(a, b)
TW8835.h (e:\prog\tw8835_e_fw120803b):	#define WriteHostPage(p)		WriteTW88Page(p)
TW8835.h (e:\prog\tw8835_e_fw120803b):#define Write2TW88(rhi,rlo,value) WriteTW88(rhi, (value >> 8)); WriteTW88(rlo, (BYTE)value)
Util.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
Util.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page);
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC);
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1C2, VCO_CURR);			// VADC_VCOCURR
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC);
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1C0, ReadTW88(REG1C0) & ~0x04);
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1CC, ReadTW88(REG1CC) & ~0x02);	//if active high, no inv.
VADC.c (e:\prog\tw8835_e_fw120803b):		if(r1c1 & 0x40) WriteTW88(REG1C0, ReadTW88(REG1C0) | 0x04);		//if active high, invert. make negative
VADC.c (e:\prog\tw8835_e_fw120803b):		else			WriteTW88(REG1C0, ReadTW88(REG1C0) & ~0x04);	//if active low, normal. keep negative
VADC.c (e:\prog\tw8835_e_fw120803b):		if(r1c1 & 0x80) WriteTW88(REG1CC, ReadTW88(REG1CC) & ~0x02);	//if active high, normal.
VADC.c (e:\prog\tw8835_e_fw120803b):		else			WriteTW88(REG1CC, ReadTW88(REG1CC) | 0x02);		//if active low, inv
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1C2, value);
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1CD, ReadTW88(REG1CD) | 0x01);		// PLL init
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC);
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC);
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1C5, value&0x1f);
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1CD, ReadTW88(REG1CD) | 0x01);	// PLL init
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC);
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC);
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1C6, (ReadTW88(REG1C6) & 0xF8) | value);
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1CB, (ReadTW88(REG1CB) & 0x1F));	
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1CB, ReadTW88(REG1CB) & ~0x1F | value);	
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1D1, GainG );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1D2, GainB );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1D3, GainR );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1D0, (GainR >> 8)+ ((GainB >> 7) & 2) + ((GainG >> 6) & 4 ));
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1D4, value );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):	if(fOn)	WriteTW88(REG1D4, ReadTW88(REG1D4) | 0x20 );
VADC.c (e:\prog\tw8835_e_fw120803b):	else	WriteTW88(REG1D4, ReadTW88(REG1D4) & ~0x20 );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88(REG1D7, value );	// ADC clamp position from HSync edge by TABLE ClampPos[]
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):	if(fHigh)	WriteTW88(REG1E6, ReadTW88(REG1E6) | 0x20);		//HighSpeed
VADC.c (e:\prog\tw8835_e_fw120803b):	else		WriteTW88(REG1E6, ReadTW88(REG1E6) & ~0x20);	//LowSpeed
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE1_VADC );
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1C0,0x10);	// mode for SOG slicer
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1C2,0xD2);	// ==> VCO Charge pump		POST:1. VCO:10~54MHz Pump:5uA
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1C6,0x20);	// PLL loop control
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1C9,0x00);	// Pre-coast = 0
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1CA,0x00);	// Post-coast = 0
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1CB,0xD6);	// Power up PLL, SOG
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1CC,(ReadTW88(REG1CC) & 0xE0) | 0x0B);	//1CC[3:2]=10b. HS Pin.1CC[1]=1. VSYNC inversion, 1CC[0]=1. HSYNC inversion
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1CC,0x00);	// ==> Sync selection
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D0,0x00);	// ADC gain
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D1,0xF0);	// 
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D2,0xF0);	// 
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D3,0xF0);	// 
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D4,0x20);	// clamp mode
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D5,0x00);	// clamp start
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D6,0x10);	// clamp stop
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D7,0x00);	// clamp pos.
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D9,0x02);	// clamp Y level
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1DA,0x80);	// clamp U level
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1DB,0x80);	// clamp V level
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1DC,0x10);	// HS width
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1E2,0x59);	//***
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1E3,0x37);	//***
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1E4,0x55);	//***
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1E5,0x55);	//***
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1E6,0x20);	// PGA high speed
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1C0,0x08);	// mode for HV sync
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1C2,0xD2);	// ==> VCO Charge pump		POST:1. VCO:10~54MHz Pump:5uA
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1C6,0x20);	// PLL loop control
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1C9,0x00);	// Pre-coast = 0
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1CA,0x00);	// Post-coast = 0
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1CB,0x56);	// Power up PLL
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1CC,(ReadTW88(REG1CC) & 0xE0) | 0x18);	////1CC[4]:1  VSYNC: input pin. 1CC[3:2]=10b.
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1CC,0x12);	// ==> Sync selection
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D0,0x00);	// ADC gain
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D1,0xF0);	// 
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D2,0xF0);	// 
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D3,0xF0);	// 
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D4,0x20);	// clamp mode
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D5,0x00);	// clamp start
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D6,0x10);	// clamp stop
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D7,0x00);	// clamp pos.
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1D9,0x02);	// clamp G/Y level
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1DA,0x01);	// clamp B/U level
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1DB,0x01);	// clamp R/V level
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1DC,0x10);	// HS width
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1E2,0x59);	//***
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1E3,0x37);	//***
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1E4,0x53);	//***
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1E4,0x55);	//***
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1E5,0x55);	//***
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1E6,0x20);	// PGA high speed
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1CB, (ReadTW88(REG1CB) & 0x1F));
VADC.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(page );
VADC.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(page );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(PAGE0_INPUT );
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(0 );
VADC.c (e:\prog\tw8835_e_fw120803b):				WriteTW88Page(page );
VADC.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(page );
VADC.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(page );
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88Page(PAGE1_VADC );		
VADC.c (e:\prog\tw8835_e_fw120803b):		WriteTW88(REG1CC, ReadTW88(REG1CC) | 0x02);	
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page );
VADC.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(page );
VADC.c (e:\prog\tw8835_e_fw120803b):			WriteTW88Page(page );
VADC.c (e:\prog\tw8835_e_fw120803b):					WriteTW88Page(page );
VADC.c (e:\prog\tw8835_e_fw120803b):				WriteTW88Page(page );
VADC.c (e:\prog\tw8835_e_fw120803b):	WriteTW88Page(page );
