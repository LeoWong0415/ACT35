C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MONITOR
OBJECT MODULE PLACED IN .\Output\monitor.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE monitor.c LARGE OPTIMIZE(9,SPEED) REGFILE(.\Output\TW8835_REV31.ORC) BROWSE
                    - MODDP2 DEFINE(EVB_30,EVB_31,nullFn=//) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\List\monitor.lst) OBJECT(.\Output\monito
                    -r.obj)

line level    source

   1          /**
   2           * @file
   3           * Monitor.c 
   4           * @author Harry Han
   5           * @author YoungHwan Bae
   6           * @author Brian Kang
   7           * @version 1.0
   8           * @section LICENSE
   9           *      Copyright (C) 2011~2012 Intersil Corporation
  10           * @section DESCRIPTION
  11           *      Interface between TW_Terminal2 and Firmware.
  12          */
  13          
  14          //*****************************************************************************
  15          //
  16          //                                                              Monitor.c
  17          //
  18          //*****************************************************************************
  19          //
  20          //
  21          //#include <intrins.h>
  22          
  23          #include "config.h"
  24          #include "reg.h"
  25          #include "typedefs.h"
  26          #include "TW8835.h"
  27          
  28          #include "global.h"
  29          #include "cpu.h"
  30          #include "printf.h"     
  31          #include "util.h"
  32          #include "monitor.h"
  33          #include "monitor_MCU.h"
  34          #include "monitor_SPI.h"
  35          #include "monitor_MENU.h"
  36                            
  37          #include "i2c.h"
  38          #include "spi.h"
  39          
  40          #include "main.h"
  41          #include "SOsd.h"
  42          #include "FOsd.h"
  43          #include "Measure.h"
  44          #include "Settings.h"
  45          #include "Remo.h"
  46          #include "scaler.h"
  47          #ifdef SUPPORT_DELTA_RGB
              #include "DeltaRGB.h"
              #endif
  50          #include "InputCtrl.h"
  51          #include "ImageCtrl.h"
  52          #include "OutputCtrl.h"
  53          #include "TouchKey.h"
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 2   

  54          #include "measure.h"
  55          #include "HDMI_EP9351.h"
  56          #include "VAdc.h"
  57          #include "DTV.h"
  58          #include "EEPROM.H"
  59          #include "SOsdMenu.h"
  60          #include "DebugMsg.h"
  61          #ifdef SUPPORT_HDMI_EP9351
              #include "EP9x53RegDef.h"
              #endif
  64          
  65          
  66                          BYTE    DebugLevel = 0;
  67          XDATA   BYTE    MonAddress = TW88I2CAddress;    
  68          XDATA   BYTE    MonIndex;
  69          XDATA   BYTE    MonRdata, MonWdata;
  70          XDATA   BYTE    monstr[50];                             // buffer for input string
  71          XDATA   BYTE    *argv[12];
  72          XDATA   BYTE    argc=0;
  73                          bit             echo=1;
  74                          bit             access=1;
  75          XDATA   BYTE    SW_key;
  76          
  77          #ifdef SUPPORT_UART1
              XDATA   BYTE    mon1str[40];                            // buffer for input string
              XDATA   BYTE    *argv1[10];
              XDATA   BYTE    argc1=0;
              #endif
  82          
  83          
  84          
  85          #if defined(MODEL_TW8835_SLAVE) && defined(SUPPORT_I2CCMD_TEST)
              #define ReadTscData_TEST(TscData) TscData = ReadTW88(REG0B2); TscData <<= 4; TscData += ReadTW88(REG0B3) 
              extern void InterruptPollingRoutine(void);
              extern void InterruptHandlerRoutine(void);
              void i2c_test_slave_conflict(void)
              {
                      DWORD StartTime;
                      volatile BYTE volatile_value;
                      WORD init;      //mode
                      WORD step;      //duration
              
                      init = a2i( argv[1] );
                      step = a2i( argv[2] );
                      
              
                      StartTime = init; //skip warning
                      StartTime = SystemClock;
                      ePrintf("\nStartTime:%ld.%ldsec", StartTime/100, StartTime%100 );
                      if(init==0) {
                              do {
                                      volatile_value=ReadTW88(REG310);
                              } while ((SystemClock - StartTime) < (step*100)); //step*1sec
                      }
                      else if(init==1) {
                              do {
                              SFR_EA=0;
                                      volatile_value=ReadTW88(REG310);        
                              SFR_EA=1;
                              } while ((SystemClock - StartTime) < (step*100)); //step*1sec
                      }
                      else if(init==2) {
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 3   

                              do {
                                      volatile_value=ReadTW88(REG310);        
                                      WriteTW88(REG310,volatile_value);       
                              } while ((SystemClock - StartTime) < (step*100)); //step*1sec
                      }
                      else if(init==3) {
                              do {
                                      WriteTW88(REG310,0x00); 
                              } while ((SystemClock - StartTime) < (step*100)); //step*1sec
                      }
                      else if(init==4) {
                              do {
                                      WriteTW88(REG310,0x00); 
                                      WriteTW88(REG311,0x00); 
                                      WriteTW88(REG312,0x00); 
                                      WriteTW88(REG313,0x00); 
                                      WriteTW88(REG314,0x00); 
                                      WriteTW88(REG315,0x00); 
                                      WriteTW88(REG316,0x00); 
                                      WriteTW88(REG317,0x00); 
                                      WriteTW88(REG318,0x00); 
                                      WriteTW88(REG319,0x00); 
                                      WriteTW88(REG320,0x00); 
                                      WriteTW88(REG321,0x00); 
                                      WriteTW88(REG322,0x00); 
                                      WriteTW88(REG323,0x00); 
                                      WriteTW88(REG324,0x00); 
                                      WriteTW88(REG325,0x00); 
                                      WriteTW88(REG326,0x00); 
                                      WriteTW88(REG327,0x00); 
                                      WriteTW88(REG328,0x00); 
                                      WriteTW88(REG329,0x00); 
                              } while ((SystemClock - StartTime) < (step*100)); //step*1sec
                      }
                      else if(init==5) {
                              do {
                                      volatile_value=ReadTW88(REG4DC);
                              } while ((SystemClock - StartTime) < (step*100)); //step*1sec
                      }
                      else if(init==6) {
                              do {
                                      WriteTW88(REG4DC,0xAB); 
                              } while ((SystemClock - StartTime) < (step*100)); //step*1sec
                      }
                      else
                              Puts("\Invalid parameter");
              
                      StartTime = SystemClock;
                      ePrintf("\nStartTime:%ld.%ldsec", StartTime/100, StartTime%100 );
                      Puts("\nDone");
              #if 0
                      DWORD StartTime;
                      StartTime = SystemClock;
                      ePrintf("\nStartTime:%ld.%ldsec", StartTime/100, StartTime%100 );
                      do {
                              WriteTW88(REG310,0x00); 
                      } while ((SystemClock - StartTime) < 1000); //10sec
                      StartTime = SystemClock;
                      ePrintf("\nStartTime:%ld.%ldsec", StartTime/100, StartTime%100 );
                      Puts("\nDone");
              #endif
              #if 0
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 4   

                      WORD i,target,/*step,init,*/ value;
                      volatile BYTE test;
                      volatile WORD TscData;
                      BYTE r003;
              
              //      BYTE ii,jj,kk;
              
                      //init = 1024;
                      //step = 32;
                      i = 0;
                      target = 2048;
                      for(i=0; i < 100000; i++) {
                              value=init+ i*step;
                              //Printf("\n%d:value %d",i,value);
                              //Printf("  reverse:%d", target-value);
                              //Printf(" R000: %bx",ReadTW88(REG000));
              //EA=0;
                              WriteTW88(REG115,0xAB);
                              ReadTscData_TEST(TscData);
              
                              test = TW8835_R11C;
                              test = TW8835_R130;
                              test = TW8835_R1C1;
                              test = TW8835_R1CD;
                              test = TW8835_R412;
                              test = TW8835_R508;
              
                              test = TW8835_R101;
              
              
              //-----------------
              //                              InterruptPollingRoutine();
              //-----------------
                      ReadTW88Page(page);
                      WriteTW88Page(PAGE0_GENERAL);
                      r003 = ReadTW88(REG003);
                      WriteTW88Page(page);
              
              //--------------------
              //                              InterruptHandlerRoutine();
              //-------------------
                      ReadTW88Page(page);
                      WriteTW88Page(page);
              
              //      for(ii=0; ii< 255; ii++)
              //              for(jj=0; jj< 255;jj++)
              //                      for(kk=0;kk < 255;kk++);
              //                              ;
              
              //EA=1;
                              Printf("R101:%bx %x %bx ",test, TscData, r003);
                              //(64-i)*4.6874
                              if(value >= target)
                                      break;
                      }
                      Printf("\ni=%d",i);
              #endif
              #if 0
                      BYTE ii,jj;
                      WORD i;
              
                      i = init; i = step;
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 5   

                      for(ii=0; ii<100;ii++) {
                              for(jj=0; jj < 6; jj++) {
                                      if(INT_STATUS || VH_Loss_Changed ) {
                                              InterruptPollingRoutine();
                                              InterruptHandlerRoutine();
                                      }
                                      CheckKeyIn();
                                      CheckRemo();
                                      DumpRegister(jj);
                              }
                              Printf("=========%bd",ii);
                      }
              #endif
              }
              #endif
 255          #if defined(SUPPORT_I2CCMD_TEST)
              void i2ccmd_test(BYTE mode, WORD duration)
              {
                      DWORD StartTime;
                      volatile BYTE vdata;
                      //BYTE ii;
                      BYTE k;
                      BYTE wdata;
                      BYTE error=0;
                      WORD ii;
                              BYTE wbuff[5];                                  
              
                      StartTime = SystemClock;
                      ePrintf("\nStartTime:%ld.%ldsec", StartTime/100, StartTime%100 );
              
                      if(mode==0) {
                              SFR_EA=0;
                              for(ii=0; ii < duration; ii++) {
                                      for(k=0; k < 8; k++) {
                                              vdata = ReadTW88(REG4D0+k);
                                              if(vdata==0) {
                                                      SFR_EA=1;
                                                      Printf("\nFound 0 at %x:%02bx", ii,k);
                                                      return;
                                              }
                                      }
                                                      
                                      SFR_EA=1;
                                      Puts(".");
                                      SFR_EA=0;       
                              }
                              SFR_EA=1;
                              return;
                      }
              
                      if(mode==1) {
                              SFR_EA=0;
                              for(ii=0; ii < duration; ii++) {
                                      for(k=0; k < 5; k++) {
                                              wdata = ((ii << 4) | (ii & 0x000F)) + k;
                                              WriteTW88(REG4FA+k, wdata);
                                              vdata = ReadTW88(REG4FA+k);
                                              if(vdata !=wdata) {
                                                      SFR_EA=1;
                                                      Printf("\nFound ERROR at %x:%02bx w:%bx r:%bx", ii,k, wdata,vdata);
                                                      return;
                                              }
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 6   

                                      }
                              }
                              SFR_EA=1;
                              return;
                      }
              
                      if(mode==2) {
                              SFR_EA=0;
                              for(ii=0; ii < duration; ii++) {
                                      for(k=0; k < 5; k++) {
                                              wdata = ((ii << 4) | (ii & 0x000F)) + k;
                                              WriteTW88(REG4FA+k, wdata);
                                              vdata = ReadTW88(REG4FA+k);
                                              if(vdata !=wdata) {
                                                      SFR_EA=1;
                                                      Printf("\nFound ERROR at %x:%02bx w:%bx r:%bx old:%bx", 
                                                              ii,k, wdata,vdata,wbuff[k]);
              
                                                      for(ii=0; ii < 0x8000; ii++) {
                                                              vdata = ReadTW88(REG4FA+k);
                                                              if(vdata == wdata) {
                                                                      Printf(" same at %d", ii);
                                                                      return;
                                                              }
                                                      }
                                                      Printf(" fail");
                                                      return;
                                              }
                                              wbuff[k] = wdata;
                                      }
                              }
                              SFR_EA=1;
                              return;
                      }
                      if(mode==3) {
                              SFR_EA=0;
                              ReadTW88Page(page);
                              for(ii=0; ii < duration; ii++) {
                                      wdata = ((ii << 4) | (ii & 0x000F)) + k;
                                      //REG009
                                      WriteTW88Page(0);
                                      WriteTW88(REG009,wdata);
                                      vdata = ReadTW88(REG009);
                                      if(vdata !=wdata) {
                                              WriteTW88Page(page);
                                              SFR_EA=1;       
                                              Printf("\nFound ERROR at %x:%02bx REG009 w:%bx r:%bx ", 
                                                      ii,k, wdata,vdata);
                                                      return;
                                      }
                                      //REG103
                                      WriteTW88Page(1);
                                      WriteTW88(REG103,wdata);
                                      vdata = ReadTW88(REG103);
                                      if(vdata !=wdata) {
                                              WriteTW88Page(page);
                                              SFR_EA=1;       
                                              Printf("\nFound ERROR at %x:%02bx REG103 w:%bx r:%bx ", 
                                                      ii,k, wdata,vdata);
                                                      return;
                                      }
              
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 7   

                                      //-------------
                                      //REG281~288
                                      WriteTW88Page(2);
                                      for(k=1; k <= 8; k++) {
                                              wdata = ((ii << 4) | (ii & 0x000F)) + k;
                                              WriteTW88(REG280+k, wdata);
                                              vdata = ReadTW88(REG280+k);
                                              if(vdata !=wdata) {
                                                      WriteTW88Page(page);
                                                      SFR_EA=1;
                                                      Printf("\nFound ERROR at %x:%02bx REG3%02bx w:%bx r:%bx", ii,k, (BYTE)(REG280+k), wdata,vdata);
                                                      return;
                                              }
                                      }
                                      //-------------
                                      //REG341~348
                                      WriteTW88Page(3);
                                      for(k=1; k <= 8; k++) {
                                              wdata = ((ii << 4) | (ii & 0x000F)) + k;
                                              WriteTW88(REG340+k, wdata);
                                              vdata = ReadTW88(REG340+k);
                                              if(vdata !=wdata) {
                                                      WriteTW88Page(page);
                                                      SFR_EA=1;
                                                      Printf("\nFound ERROR at %x:%02bx REG3%02bx w:%bx r:%bx", ii,k, (BYTE)(REG340+k), wdata,vdata);
                                                      return;
                                              }
                                      }
                                      //-------------
                                      //REG4FA~4FE
                                      WriteTW88Page(4);
                                      for(k=0; k < 5; k++) {
                                              wdata = ((ii << 4) | (ii & 0x000F)) + k;
                                              WriteTW88(REG4FA+k, wdata);
                                              vdata = ReadTW88(REG4FA+k);
                                              if(vdata !=wdata) {
                                                      WriteTW88Page(page);
                                                      SFR_EA=1;
                                                      Printf("\nFound ERROR at %x:%02bx w:%bx r:%bx", ii,k, wdata,vdata);
                                                      return;
                                              }
                                      }
                                      SFR_EA=1;
                                      Puts(".");
                                      SFR_EA=0;       
                              }
                              WriteTW88Page(page);
                              SFR_EA=1;
                              return;
                      }
              }
              
              
              #endif
 418          //=============================================================================
 419          //
 420          //=============================================================================
 421          /**
 422          * print prompt
 423          */
 424          void Prompt(void)
 425          {
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 8   

 426   1      #ifdef BANKING
                      if ( MonAddress == TW88I2CAddress )
                              Printf("\n[B%02bx]MCU_I2C[%02bx]>", BANKREG, MonAddress);
                      else
              #else
 431   1              if ( MonAddress == TW88I2CAddress )
 432   1                      Printf("\nMCU_I2C[%02bx]>", MonAddress);
 433   1              else
 434   1      #endif
 435   1                      Printf("\nI2C[%02bx]>", MonAddress);
 436   1      }
 437          #ifdef SUPPORT_UART1
              void Prompt1(void)
              {
                      if ( MonAddress == TW88I2CAddress )
                              Printf1("\niAP>");
                      else
                      Printf1("\nRS1_I2C[%02bx]>", MonAddress);
              }
              #endif
 446          
 447          #if 0
              void WaitUserInput(void)
              {
                      Printf("\nPress any key...");
                      while ( !RS_ready() );
                      Puts("\n");
              }
              #endif
 455          
 456          void Mon_tx(BYTE ch)
 457          {
 458   1              RS_tx(ch);
 459   1      }
 460          #ifdef SUPPORT_UART1
              void Mon1_tx(BYTE ch)
              {
                      RS1_tx(ch);
              }
              #endif
 466          //=============================================================================
 467          //
 468          //=============================================================================
 469          
 470          /**
 471          * format: c I2cId
 472          */
 473          void SetMonAddress(BYTE addr)
 474          {
 475   1              MonAddress = addr;
 476   1      }
 477          
 478          /**
 479          * format: r idx
 480          */
 481          void MonReadI2CByte(void)
 482          {
 483   1              ////////////////////////////////////
 484   1              BYTE len;
 485   1      #ifndef SUPPORT_8BIT_CHIP_ACCESS
 486   1              WORD MonPage;
 487   1      #endif
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 9   

 488   1                              
 489   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      if( argc>=2 ) 
                              for(len=0; len<10; len++) 
                                      if( argv[1][len]==0 ) 
                                              break;
              
                      if( len>2 ) {
                              MonWdata = a2h( argv[1] ) / 0x100;
                              MonIndex = 0xff;
              
                              Printf("\nWrite %02bxh:%02bxh ", MonIndex, MonWdata);
                              if ( MonAddress == TW88I2CAddress ) {
                                      WriteTW88Byte(MonIndex, MonWdata);
                                      MonRdata = ReadTW88Byte(MonIndex);
                              }
                              else {
                                      WriteI2CByte(MonAddress, MonIndex, MonWdata);
                                      MonRdata = ReadI2CByte(MonAddress, MonIndex);
                              }
                              Printf("==> Read %02bxh:%02bxh", MonIndex, MonRdata);
                              if( MonWdata != MonRdata ) Printf(" [%02bx]", MonWdata);
                      }
              #endif
 512   1              ////////////////////////////////////
 513   1      
 514   1              if( argc>=2 ) {
 515   2      #ifndef SUPPORT_8BIT_CHIP_ACCESS
 516   2                      for(len=0; len<10; len++) 
 517   2                              if( argv[1][len]==0 ) 
 518   2                                      break;
 519   2                      if( len>2 ) {
 520   3                              MonPage = a2h( argv[1] );               //page+index
 521   3                              MonRdata = ReadTW88(MonPage);
 522   3                              if( echo )
 523   3                                      Printf("\nRead %03xh:%02bxh", MonPage, MonRdata);
 524   3                              return; 
 525   3                      }
 526   2      #endif  
 527   2                      MonIndex = a2h( argv[1] );
 528   2              }
 529   1              else    {
 530   2                      Printf("   --> Missing parameter !!!");
 531   2                      return;
 532   2              }
 533   1      
 534   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      if ( MonAddress == TW88I2CAddress )
                              MonRdata = ReadTW88(MonIndex);
              #else
 538   1              if ( MonAddress == TW88I2CAddress )     {
 539   2                      MonPage = ReadTW88Byte(0xff) << 8;
 540   2                      MonRdata = ReadTW88(MonPage | MonIndex);
 541   2              }
 542   1      #endif
 543   1              //else if( MonAddress == TW88SalveI2CAddress )
 544   1              //      MonRdata = ReadI2CByte(MonAddress+2, MonIndex);
 545   1              else
 546   1                      MonRdata = ReadSlowI2CByte(MonAddress, MonIndex);
 547   1              if( echo )
 548   1                      Printf("\nRead %02bxh:%02bxh", MonIndex, MonRdata);     
 549   1              
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 10  

 550   1              MonWdata = MonRdata;
 551   1      }
 552          //!void MonReadSlowI2CByte(void)
 553          //!{
 554          //!     if( argc>=2 ) MonIndex = a2h( argv[1] );
 555          //!     else    {
 556          //!             Printf("   --> Missing parameter !!!");
 557          //!             return;
 558          //!     }
 559          //!
 560          //!     MonRdata = ReadSlowI2CByte(MonAddress, MonIndex);
 561          //!
 562          //!     if( echo )
 563          //!             Printf("\nRead %02bxh:%02bxh", MonIndex, MonRdata);     
 564          //!     
 565          //!     MonWdata = MonRdata;
 566          //!}
 567          
 568          
 569          #if 0
              //!xdata        BYTE B1 _at_ 0xC412;
              //!void MonReadInternalReg(void)
              //!{
              //!     WORD MonReg;
              //!     BYTE B0;
              //!     BYTE page;
              //!
              //!     if( argc !=2 ) {
              //!             Printf("   --> Missing parameter !!!");
              //!             return;
              //!     }
              //!
              //!     MonReg = a2h( argv[1] );
              //!
              //!     ReadTW88Page(page);
              //!     SFR_E2 = 1;
              //!     MonRdata = ReadTW88(MonReg);
              //!     SFR_E2 = 0;
              //!     Printf("\nCurrPage:%bd",ReadTW88Page());
              //!     WriteTW88Page(page);
              //!     if( echo )
              //!             Printf("\nRead %03xh:%02bxh", MonReg, MonRdata);        
              //!
              //!
              //!     //test
              //!     ReadTW88Page(page);
              //!     WriteTW88Page(1 );
              //!     B0 = TW8835_R412;
              //!     Printf("==test B0:%bx ",B0);                    
              //!     SFR_E2 = 1;
              //!     B0 = B1;
              //!     SFR_E2 = 0;
              //!     WriteTW88Page(page);
              //!     Printf("==test B0:%bx ",B0);                    
              //!
              //!}
              #endif
 607          
 608          /**
 609          * write
 610          * format: w idx data
 611          */
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 11  

 612          void MonWriteI2CByte(void) 
 613          {
 614   1              ////////////////////////////////////
 615   1              BYTE len;
 616   1      #ifndef SUPPORT_8BIT_CHIP_ACCESS
 617   1              WORD MonPage;
 618   1      #endif
 619   1      
 620   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      if( argc>=2 ) 
                              for(len=0; len<10; len++) 
                                      if( argv[1][len]==0 ) 
                                              break;
              
                      if( len>2 ) {
                              MonWdata = a2h( argv[1] ) / 0x100;
                              MonIndex = 0xff;
              
                              Printf("\nWrite %02bxh:%02bxh ", MonIndex, MonWdata);
                              if ( MonAddress == TW88I2CAddress ) {
                                      if(MonIndex==0xff)      { WriteTW88BytePage(MonWdata); }
                                      else                            WriteTW88Byte(MonIndex, MonWdata);
                                      MonRdata = ReadTW88Byte(MonIndex);
                              }
                              else {
                                      WriteI2CByte(MonAddress, MonIndex, MonWdata);
                                      MonRdata = ReadI2CByte(MonAddress, MonIndex);
                              }
                              Printf("==> Read %02bxh:%02bxh", MonIndex, MonRdata);
                              if( MonWdata != MonRdata ) Printf(" [%02bx]", MonWdata);
                      }
              #endif
 644   1              ////////////////////////////////////
 645   1      
 646   1              if( argc<3 ) {
 647   2                      Printf("   --> Missing parameter !!!");
 648   2                      return;
 649   2              }
 650   1              MonIndex = a2h( argv[1] );
 651   1              MonWdata = a2h( argv[2] );
 652   1      
 653   1      #ifndef SUPPORT_8BIT_CHIP_ACCESS
 654   1              for(len=0; len<5; len++) 
 655   1                      if( argv[1][len]==0 ) 
 656   1                              break;
 657   1              if( len>2 ) {
 658   2                      MonPage = a2h( argv[1] );               //page+index
 659   2                      WriteTW88(MonPage,MonWdata);
 660   2                      if( echo ) {
 661   3                              Printf("\nWrite %03xh:%02bxh", MonPage, MonWdata);
 662   3                              MonRdata = ReadTW88(MonPage);                   
 663   3                              Printf("==> Read %03xh:%02bxh", MonPage, MonRdata);
 664   3                              if( MonWdata != MonRdata ) Printf(" [%02bx]", MonWdata);
 665   3                      }
 666   2                      return; 
 667   2              }
 668   1      #endif  
 669   1              
 670   1              if( echo ) {
 671   2      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                              Printf("\nWrite %02bxh:%02bxh ", MonIndex, MonWdata);
                              if ( MonAddress == TW88I2CAddress ) {
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 12  

                                      WriteTW88(MonIndex, MonWdata);
                                      MonRdata = ReadTW88(MonIndex);
                              }
              #else
 678   2      //??            if(len>2)
 679   2      //                      MonPageIndex = a2h( argv[1] );
 680   2      //              else 
 681   2      //??                    MonPage = ReadTW88Byte(0xff) << 8;      
 682   2      
 683   2      
 684   2                      MonPage = ReadTW88Byte(0xff) << 8;
 685   2                      Printf("\nWrite %03xh:%02bxh ", MonPage | MonIndex, MonWdata);
 686   2                      if ( MonAddress == TW88I2CAddress ) {
 687   3                              WriteTW88(MonPage | MonIndex, MonWdata);
 688   3      
 689   3                              MonPage = ReadTW88Byte(0xff) << 8;
 690   3                              MonRdata = ReadTW88(MonPage | MonIndex);
 691   3                      }
 692   2      #endif
 693   2                      //else if( MonAddress == TW88SalveI2CAddress ) {
 694   2                      //      WriteI2CByte(MonAddress+2, MonIndex, MonWdata);
 695   2                      //      MonRdata = ReadI2CByte(MonAddress+2, MonIndex);
 696   2                      //}
 697   2                      else {
 698   3                              WriteSlowI2CByte(MonAddress, MonIndex, MonWdata);
 699   3                              MonRdata = ReadSlowI2CByte(MonAddress, MonIndex);
 700   3                      }
 701   2                      Printf("==> Read %02bxh:%02bxh", MonIndex, MonRdata);
 702   2                      if( MonWdata != MonRdata ) Printf(" [%02bx]", MonWdata);
 703   2              }
 704   1              else {
 705   2      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                              if ( MonAddress == TW88I2CAddress ) {
                                      if(MonIndex==0xff)      { WriteTW88Page(MonWdata); }
                                      else                            WriteTW88(MonIndex, MonWdata);
                              }
              #else
 711   2                      if ( MonAddress == TW88I2CAddress ) {
 712   3                              MonPage = ReadTW88Byte(0xff) << 8;
 713   3                              WriteTW88(MonPage | MonIndex, MonWdata);
 714   3                      }
 715   2      #endif
 716   2                      //else if( MonAddress == TW88SalveI2CAddress )
 717   2                      //      WriteI2CByte(MonAddress+2, MonIndex, MonWdata);
 718   2                      else {
 719   3                              WriteI2CByte(MonAddress, MonIndex, MonWdata);
 720   3                      }
 721   2              }
 722   1      }
 723          //!void MonWriteSlowI2CByte(void) 
 724          //!{
 725          //!     if( argc<3 ) {
 726          //!             Printf("   --> Missing parameter !!!");
 727          //!             return;
 728          //!     }
 729          //!     
 730          //!     MonIndex = a2h( argv[1] );
 731          //!     MonWdata = a2h( argv[2] );
 732          //!     
 733          //!     Printf("\nWrite %02bxh:%02bxh ", MonIndex, MonWdata);
 734          //!     WriteSlowI2CByte(MonAddress, MonIndex, MonWdata);
 735          //!     //MonRdata = ReadSlowI2CByte(MonAddress, MonIndex);
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 13  

 736          //!     //Printf("==> Read %02bxh:%02bxh", MonIndex, MonRdata);
 737          //!     //if( MonWdata != MonRdata ) Printf(" [%02bx]", MonWdata);
 738          //!}
 739          #if 0
              //!void MonWriteInternalReg(void)
              //!{
              //!     WORD MonReg;
              //!     if( argc !=3 ) {
              //!             Printf("   --> Missing parameter !!!");
              //!             return;
              //!     }
              //!
              //!     MonReg = a2h( argv[1] );
              //!     MonWdata = a2h( argv[2] );
              //!     if( echo )
              //!             Printf("\nWrite %03xh:%02bxh ", MonReg, MonWdata);
              //!     TW8835WriteReg(MonReg, MonWdata);
              //!     MonRdata = TW8835ReadReg(MonReg);
              //!     if( echo )
              //!             Printf("==> Read %02bxh", MonRdata);
              //!}
              #endif
 758          
 759          /**
 760          * increase/decrease value
 761          *
 762          * @param inc 0:decrease 1:increase 10:decrease 10 value. 11:increase 10 value
 763          *
 764          * format
 765          * decrease 1:  ,
 766          * decrease 10: <
 767          * increase 1:  .
 768          * increase 10: >
 769          */
 770          void MonIncDecI2C(BYTE inc)
 771          {
 772   1      #ifndef SUPPORT_8BIT_CHIP_ACCESS
 773   1              WORD MonPage;
 774   1      #endif
 775   1              switch(inc){
 776   2                      case 0:  MonWdata--;    break;
 777   2                      case 1:  MonWdata++;    break;
 778   2                      case 10: MonWdata-=0x10;        break;
 779   2                      case 11: MonWdata+=0x10;        break;
 780   2              }
 781   1      
 782   1              if ( MonAddress == TW88I2CAddress ) {
 783   2      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                              WriteTW88(MonIndex, MonWdata);
                              MonRdata = ReadTW88(MonIndex);
              #else
 787   2                      MonPage = ReadTW88Byte(0xff) << 8;
 788   2                      WriteTW88(MonPage | MonIndex, MonWdata);
 789   2                      MonRdata = ReadTW88(MonPage | MonIndex);
 790   2      #endif
 791   2              }
 792   1              else {
 793   2                      WriteI2CByte(MonAddress, MonIndex, MonWdata);
 794   2                      MonRdata = ReadI2CByte(MonAddress, MonIndex);
 795   2              }
 796   1      
 797   1              if( echo ) {
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 14  

 798   2                      Printf("Write %02bxh:%02bxh ", MonIndex, MonWdata);
 799   2                      Printf("==> Read %02bxh:%02bxh", MonIndex, MonRdata);
 800   2              }
 801   1      
 802   1              Prompt();
 803   1      }
 804          /**
 805          * dump
 806          *
 807          * format: d idx_from [idx_to]
 808          */
 809          void MonDumpI2C(void)
 810          {
 811   1              BYTE ToMonIndex;
 812   1      #ifndef SUPPORT_8BIT_CHIP_ACCESS
 813   1              WORD MonPage;
 814   1              BYTE len;
 815   1      #endif
 816   1              int  cnt=7;
 817   1      
 818   1              if( argc>=2 ) MonIndex   = a2h(argv[1]);
 819   1              if( argc>=3 ) ToMonIndex = a2h(argv[2]);
 820   1              else          ToMonIndex = MonIndex+cnt;
 821   1              
 822   1              if ( ToMonIndex < MonIndex ) ToMonIndex = 0xFF;
 823   1              cnt = ToMonIndex - MonIndex + 1;
 824   1      
 825   1              if( echo ) {
 826   2                      if ( MonAddress == TW88I2CAddress ) {
 827   3      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                                      for ( ; cnt > 0; cnt-- ) {
                                              MonRdata = ReadTW88(MonIndex);
                                              Printf("\n==> Read %02bxh:%02bxh", MonIndex, MonRdata);
                                              MonIndex++;
                                      }
              #else
 834   3                              for(len=0; len<10; len++) 
 835   3                                      if( argv[1][len]==0 ) 
 836   3                                              break;
 837   3                              if( len>2 )
 838   3                                      MonPage = a2h(argv[1]) & 0xFF00;                //page
 839   3                              else
 840   3                                      MonPage = ReadTW88Byte(0xff) << 8;
 841   3                              for ( ; cnt > 0; cnt-- ) {
 842   4                                      MonRdata = ReadTW88(MonPage | MonIndex);
 843   4                                      Printf("\n==> Read %02bxh:%02bxh", MonIndex, MonRdata);
 844   4                                      MonIndex++;
 845   4                              }
 846   3      #endif
 847   3                      }
 848   2                      else {
 849   3                              for ( ; cnt > 0; cnt-- ) {
 850   4                                      MonRdata = ReadI2CByte(MonAddress, MonIndex);
 851   4                                      Printf("\n==> Read %02bxh:%02bxh", MonIndex, MonRdata);
 852   4                                      //if( MonWdata != MonRdata ) Printf(" [%02bx]", MonWdata);
 853   4                                      MonIndex++;
 854   4                              }
 855   3                      }
 856   2              }
 857   1              else {
 858   2                      if ( MonAddress == TW88I2CAddress ) {
 859   3      #ifdef SUPPORT_8BIT_CHIP_ACCESS
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 15  

                                      for ( ; cnt > 0; cnt-- ) {
                                              MonRdata = ReadTW88(MonIndex);
                                              MonIndex++;
                                      }
              #else
 865   3                              for(len=0; len<10; len++) 
 866   3                                      if( argv[1][len]==0 ) 
 867   3                                              break;
 868   3                              if( len>2 )
 869   3                                      MonPage = a2h(argv[1]) & 0xFF00;                //page
 870   3                              else
 871   3                                      MonPage = ReadTW88Byte(0xff) << 8;
 872   3                              for ( ; cnt > 0; cnt-- ) {
 873   4                                      MonRdata = ReadTW88(MonPage | MonIndex);
 874   4                                      MonIndex++;
 875   4                              }
 876   3      #endif
 877   3                      }
 878   2                      else {
 879   3                              for ( ; cnt > 0; cnt-- ) {
 880   4                                      MonRdata = ReadI2CByte(MonAddress, MonIndex);
 881   4                                      MonIndex++;
 882   4                              }
 883   3                      }
 884   2              }
 885   1      }
 886          
 887          //-----------------------------------------------------------------------------
 888          /**
 889          * dump
 890          * 
 891          * format: &     slave index
 892          */
 893          void MonNewReadI2CByte(void)
 894          {
 895   1              BYTE Slave;
 896   1      #ifndef SUPPORT_8BIT_CHIP_ACCESS
 897   1              WORD MonPage;
 898   1      #endif
 899   1      
 900   1              if( argc>=3 ) MonIndex = a2h( argv[2] );
 901   1              else    {
 902   2                      Printf("   --> Missing parameter !!!");
 903   2                      return;
 904   2              }
 905   1              Slave = a2h(argv[1]);
 906   1      
 907   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      if ( Slave == TW88I2CAddress )
                              MonRdata = ReadTW88(MonIndex);
              #else
 911   1              if ( Slave == TW88I2CAddress ) {
 912   2                      MonPage = ReadTW88Byte(0xff) << 8;
 913   2                      MonRdata = ReadTW88(MonPage | MonIndex);
 914   2              }
 915   1      #endif  
 916   1              else
 917   1                      MonRdata = ReadI2CByte(Slave, MonIndex);
 918   1      
 919   1              if( echo )
 920   1                      Printf("\n<R>%02bx[%02bx]=%02bx", Slave, MonIndex, MonRdata);
 921   1              MonWdata = MonRdata;
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 16  

 922   1      }
 923          
 924          /**
 925          * write
 926          * format: ")" slave idx data
 927          */
 928          void MonNewWriteI2CByte(void)
 929          {
 930   1              BYTE Slave;
 931   1      #ifndef SUPPORT_8BIT_CHIP_ACCESS
 932   1              WORD MonPage;
 933   1      #endif
 934   1      
 935   1              if( argc<4 ) {
 936   2                      Printf("   --> Missing parameter !!!");
 937   2                      return;
 938   2              }
 939   1              
 940   1              Slave    = a2h( argv[1] );
 941   1              MonIndex = a2h( argv[2] );
 942   1              MonWdata = a2h( argv[3] );
 943   1              
 944   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      if ( Slave == TW88I2CAddress ) {
                              WriteTW88(MonIndex, MonWdata);
                              MonRdata = ReadTW88(MonIndex);
                      }
              #else
 950   1              if ( Slave == TW88I2CAddress ) {
 951   2                      MonPage = ReadTW88Byte(0xff) << 8;
 952   2                      WriteTW88(MonPage | MonIndex, MonWdata);
 953   2                      MonPage = ReadTW88Byte(0xff) << 8;
 954   2                      MonRdata = ReadTW88(MonPage | MonIndex);
 955   2              }
 956   1      #endif
 957   1              else {
 958   2                      WriteI2CByte(Slave, MonIndex, MonWdata);
 959   2                      MonRdata = ReadI2CByte(Slave, MonIndex);
 960   2              }
 961   1              if( echo ) {
 962   2                      Printf("\n<R>%02bx[%02bx]=%02bx", Slave, MonIndex, MonRdata);
 963   2              }
 964   1      }
 965          /**
 966          * dump
 967          *
 968          * format: "&" i2cid idx_from idx_to
 969          */
 970          void MonNewDumpI2C(void)
 971          {
 972   1      #ifndef SUPPORT_8BIT_CHIP_ACCESS
 973   1              WORD MonPage;
 974   1      #endif
 975   1              BYTE    ToMonIndex, Slave;
 976   1              WORD    i;
 977   1              
 978   1              if( argc>=2 ) MonIndex = a2h(argv[2]);
 979   1              if( argc>=3 ) ToMonIndex = a2h(argv[3]);
 980   1              Slave = a2h(argv[1]);
 981   1      
 982   1              if( echo ) {
 983   2                      if ( Slave == TW88I2CAddress ) {
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 17  

 984   3      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                                      for(i=MonIndex; i<=ToMonIndex; i++) {
                                              MonRdata = ReadTW88(i);
                                      Printf("\n<R>%02bx[%02x]=%02bx", Slave, i, MonRdata);
                                      }
              #else
 990   3                              MonPage = ReadTW88Byte(0xff) << 8;
 991   3                              for(i=MonIndex; i<=ToMonIndex; i++) {
 992   4                                      MonRdata = ReadTW88(MonPage | i);
 993   4                              Printf("\n<R>%02bx[%02x]=%02bx", Slave, i, MonRdata);
 994   4                              }
 995   3      #endif
 996   3                      }
 997   2                      else {
 998   3                              for(i=MonIndex; i<=ToMonIndex; i++) {
 999   4                                      MonRdata = ReadI2CByte(Slave, i);
1000   4                              Printf("\n<R>%02bx[%02x]=%02bx", Slave, i, MonRdata);
1001   4                              }
1002   3                      }
1003   2              }
1004   1              else {
1005   2                      if ( Slave == TW88I2CAddress ) {
1006   3      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                                      for(i=MonIndex; i<=ToMonIndex; i++)
                                              MonRdata = ReadTW88(i);
              #else
1010   3                              MonPage = ReadTW88Byte(0xff) << 8;
1011   3                              for(i=MonIndex; i<=ToMonIndex; i++)
1012   3                                      MonRdata = ReadTW88(MonPage | i);
1013   3      #endif
1014   3                      }
1015   2                      else {
1016   3                              for(i=MonIndex; i<=ToMonIndex; i++) {
1017   4                                      MonRdata = ReadI2CByte(Slave, i);
1018   4                              }
1019   3                      }
1020   2              }
1021   1      }
1022          
1023          /**
1024          * bitwise wirte
1025          *
1026          * format:
1027          *       b 88 index startbit|endbit data
1028          */
1029          void MonWriteBit(void)
1030          {
1031   1      #ifndef SUPPORT_8BIT_CHIP_ACCESS
1032   1              WORD MonPage;
1033   1      #endif
1034   1              BYTE mask, i, FromBit, ToBit,  MonMask, val;
1035   1              BYTE Slave;
1036   1      
1037   1              if( argc<5 ) {
1038   2                      Printf("   --> Missing parameter !!!");
1039   2                      return;
1040   2              }
1041   1              Slave = a2h(argv[1]);
1042   1      
1043   1              MonIndex = a2h( argv[2] );
1044   1              FromBit  =(a2h( argv[3] ) >> 4) & 0x0f;
1045   1              ToBit    = a2h( argv[3] )  & 0x0f;
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 18  

1046   1              MonMask  = a2h( argv[4] );
1047   1      
1048   1              if( FromBit<ToBit || FromBit>7 || ToBit>7) {
1049   2                      Printf("\n   --> Wrong range of bit operation !!!");
1050   2                      return;
1051   2              }
1052   1              
1053   1              mask = 0xff; 
1054   1              val=0x7f;
1055   1              for(i=7; i>FromBit; i--) {
1056   2                      mask &= val;
1057   2                      val = val>>1;
1058   2              }
1059   1      
1060   1              val=0xfe;
1061   1              for(i=0; i<ToBit; i++) {
1062   2                      mask &= val;
1063   2                      val = val<<1;
1064   2              }
1065   1      
1066   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      if ( Slave == TW88I2CAddress ) {
                              MonRdata = ReadTW88(MonIndex);
                              MonWdata = (MonRdata & (~mask)) | (MonMask & mask);
                                              
                              WriteTW88Byte(MonIndex, MonWdata);
                              MonRdata = ReadTW88(MonIndex);
                      }
              #else
1075   1              if ( Slave == TW88I2CAddress ) {
1076   2                      MonPage = ReadTW88Byte(0xff) << 8;
1077   2                      MonRdata = ReadTW88(MonPage | MonIndex);
1078   2                      MonWdata = (MonRdata & (~mask)) | (MonMask & mask);
1079   2                                      
1080   2                      WriteTW88(MonPage | MonIndex, MonWdata);
1081   2                      MonRdata = ReadTW88(MonPage | MonIndex);
1082   2              }
1083   1      #endif
1084   1              else {
1085   2                      MonRdata = ReadI2CByte(Slave, MonIndex);
1086   2                      MonWdata = (MonRdata & (~mask)) | (MonMask & mask);
1087   2                                      
1088   2                      WriteI2CByte(Slave, MonIndex, MonWdata);
1089   2                      MonRdata = ReadI2CByte(Slave, MonIndex);
1090   2              }
1091   1              if( echo )
1092   1                      //TW_TERMINAL need this syntax
1093   1                      Printf("\n<R>%02bx[%02bx]=%02bx", Slave, MonIndex, MonRdata);
1094   1      }
1095          /**
1096          * wait reg mask result max_wait
1097          */
1098          void MonWait(void)
1099          {
1100   1              WORD i,max;
1101   1              BYTE reg, mask, result;
1102   1              if( argc<5 ) {
1103   2                      Printf("   --> Missing parameter !!!");
1104   2                      return;
1105   2              }
1106   1              reg = a2h( argv[1] );
1107   1              mask = a2h( argv[2] );
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 19  

1108   1              result = a2h( argv[3] );
1109   1              max = a2h( argv[4] );
1110   1              for(i=0; i < max; i++) {
1111   2                      if((ReadTW88(reg) & mask)==result) {
1112   3                              Printf("=>OK@%bd",i);
1113   3                              break;
1114   3                      }
1115   2                      delay1ms(2);
1116   2              }
1117   1              if(i >= max)
1118   1                      Printf("=>fail wait %bx %bx %bx %d->fail",reg,mask,result,max);
1119   1      }
1120          
1121          //=============================================================================
1122          //                      Help Message
1123          //=============================================================================
1124          void MonHelp(void)
1125          {
1126   1              Puts("\n=======================================================");
1127   1              Puts("\n>>>     Welcome to Intersil Monitor  Rev 1.01       <<<");
1128   1              Puts("\n=======================================================");
1129   1              Puts("\n   R ii             ; Read data.(");
1130   1              Puts("\n   W ii dd          ; Write data.)");
1131   1              Puts("\n   D [ii] [cc]      ; Dump.&");
1132   1              Puts("\n   B AA II bb DD    ; Bit Operation. bb:StartEnd");
1133   1              Puts("\n   C aa             ; Change I2C address");
1134   1              Puts("\n   Echo On/Off      ; Terminal Echoing On/Off");
1135   1      #ifdef EVB_30
1136   1              Puts("\n   HDMI [init start dnedid dnhdcp avi timereg]");
1137   1      #endif
1138   1              Puts("\n=======================================================");
1139   1              Puts("\n=== DEBUG ACCESS time init MCU SPI EE menu task [on] ====");
1140   1              Puts("\nM [CVBS|SVIDEO|COMP|PC|DVI|HDMI|BT656]      ; Change Input Mode");
1141   1              Puts("\nselect [CVBS|SVIDEO|COMP|PC|DVI|HDMI|BT656] ; select Input Mode");
1142   1              Puts("\ninit default                               : default for selected input");
1143   1              Puts("\nCheckAndSet                                ; CheckAndSet selected input");
1144   1              Puts("\nISR [ON|OFF]                                                            ; On/Off ISR");
1145   1              Puts("\n=======================================================");
1146   1      #if defined(MODEL_TW8835_SLAVE) && defined(SUPPORT_I2CCMD_TEST)
                      Puts("\ni2ctest mode duration");
                      Puts("\n        mode:0  read");
                      Puts("\n        mode:1  read with SFR_EA");
                      Puts("\n        mode:2  read and write");
                      Puts("\n        mode:3  write");
                      Puts("\n        mode:4  write x 20 times");
                      Puts("\n        mode:5  read R4DC");
                      Puts("\n        mode:6  write R4DC=0xAB");
                      Puts("\ni2ctestpage page           ; set compare page");
                      Puts("\n=======================================================");
              #endif
1158   1      #if defined(SUPPORT_I2CCMD_TEST)
                      Puts("\ni2ccmdtest mode duration");
                      Puts("\n        mode:0  ??");
                      Puts("\n        mode:1  ??");
                      Puts("\n        mode:2  ??");
              #endif
1164   1              Puts("\n");
1165   1      
1166   1      }
1167          #ifdef SUPPORT_UART1
              void Mon1Help(void)
              {
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 20  

                      Puts1("\n=======================================================");
                      Puts1("\n>>>     Welcome to Intersil Monitor1  Rev 1.01       <<<");
                      Puts1("\n=======================================================");
                      Puts1("\n GE nn");
                      Puts1("\n IR nn");
                      Puts1("\n RE ii");
                      Puts1("\n WE ii dd");
                      Puts1("\n RA ii");
                      Puts1("\n WA ii dd");
                      Printf1("\nHELP or H or ?");
              }
              #endif
1182          //=============================================================================
1183          //
1184          //=============================================================================
1185          /**
1186          * Mon GetCommand
1187          *
1188          */
1189          BYTE MonGetCommand(void)
1190          {
1191   1              static BYTE comment=0;
1192   1              static BYTE incnt=0, last_argc=0;
1193   1              BYTE i, ch;
1194   1              BYTE ret=0;
1195   1      
1196   1              if( !RS_ready() ) return 0;
1197   1              ch = RS_rx();
1198   1      
1199   1              //----- if comment, echo back and ignore -----
1200   1              if( comment ) {
1201   2                      if( ch=='\r' || ch==0x1b ) comment = 0;
1202   2                      else { 
1203   3                              Mon_tx(ch);
1204   3                              return 0;
1205   3                      }
1206   2              }
1207   1              else if( ch==';' ) {
1208   2                      comment = 1;
1209   2                      Mon_tx(ch);
1210   2                      return 0;
1211   2              }
1212   1      
1213   1              //=====================================
1214   1              switch( ch ) {
1215   2      
1216   2              case 0x1b:
1217   2                      argc = 0;
1218   2                      incnt = 0;
1219   2                      comment = 0;
1220   2                      Prompt();
1221   2                      return 0;
1222   2      
1223   2              //--- end of string
1224   2              case '\r':
1225   2      
1226   2                      if( incnt==0 ) {
1227   3                              Prompt();
1228   3                              break;
1229   3                      }
1230   2      
1231   2                      monstr[incnt++] = '\0';
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 21  

1232   2                      argc=0;
1233   2      
1234   2                      for(i=0; i<incnt; i++) if( monstr[i] > ' ' ) break;
1235   2      
1236   2                      if( !monstr[i] ) {
1237   3                              incnt = 0;
1238   3                              comment = 0;
1239   3                              Prompt();
1240   3                              return 0;
1241   3                      }
1242   2                      argv[0] = &monstr[i];
1243   2                      for(; i<incnt; i++) {
1244   3                              if( monstr[i] <= ' ' ) {
1245   4                                      monstr[i]='\0';
1246   4                               //Printf("(%s) ",  argv[argc]);
1247   4                                      i++;
1248   4                                      while( monstr[i]==' ' ) i++;
1249   4                                      argc++;
1250   4                                      if( monstr[i] ){
1251   5                                      argv[argc] = &monstr[i];
1252   5                                      }
1253   4                              }
1254   3                      }
1255   2      
1256   2                      ret = 1;
1257   2                      last_argc = argc;
1258   2                      incnt = 0;
1259   2                      
1260   2                      break;
1261   2      
1262   2              //--- repeat command
1263   2              case '/':
1264   2                      argc = last_argc;
1265   2                      ret = 1;
1266   2                      break;
1267   2      
1268   2              //--- repeat command without CR
1269   2              case '`':
1270   2              {
1271   3                      BYTE i, j, ch;
1272   3      
1273   3                      for(j=0; j<last_argc; j++) {
1274   4                              for(i=0; i<100; i++) {
1275   5                                      ch = argv[j][i];
1276   5                                      if( ch==0 ) {
1277   6                                              if( j==last_argc-1 ) return 0;
1278   6                                              ch = ' ';
1279   6                                              RS_ungetch( ch );
1280   6                                              break;
1281   6                                      }
1282   5                                      else {
1283   6                                              RS_ungetch( ch );
1284   6                                      }
1285   5                              }
1286   4                      }
1287   3                      break;
1288   3              }
1289   2      
1290   2              //--- back space
1291   2              case 0x08:
1292   2                      if( incnt ) {
1293   3                              incnt--;
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 22  

1294   3                              Mon_tx(ch);
1295   3                              Mon_tx(' ');
1296   3                              Mon_tx(ch);
1297   3                      }
1298   2                      break;
1299   2      
1300   2              //--- decreamental write
1301   2              case ',':
1302   2                      if( incnt ) {
1303   3                              Mon_tx(ch);
1304   3                              monstr[incnt++] = ch;
1305   3                      }
1306   2                      else
1307   2                              MonIncDecI2C(0);
1308   2                      break;
1309   2      
1310   2              case '<':
1311   2                      if( incnt ) {
1312   3                              Mon_tx(ch);
1313   3                              monstr[incnt++] = ch;
1314   3                      }
1315   2                      else
1316   2                              MonIncDecI2C(10);
1317   2                      break;
1318   2      
1319   2              //--- increamental write
1320   2              case '.':
1321   2                      if( incnt ) {
1322   3                              Mon_tx(ch);
1323   3                              monstr[incnt++] = ch;
1324   3                      }
1325   2                      else
1326   2                              MonIncDecI2C(1);
1327   2                      break;
1328   2      
1329   2              case '>':
1330   2                      if( incnt ) {
1331   3                              Mon_tx(ch);
1332   3                              monstr[incnt++] = ch;
1333   3                      }
1334   2                      else
1335   2                              MonIncDecI2C(11);
1336   2                      break;
1337   2      
1338   2              default:
1339   2                      Mon_tx(ch);
1340   2                      monstr[incnt++] = ch;
1341   2                      break;
1342   2              }
1343   1      
1344   1              if( ret ) {
1345   2                      comment = 0;
1346   2                      last_argc = argc;
1347   2                      return ret;
1348   2              }
1349   1              else {
1350   2                      return ret;
1351   2              }
1352   1      }
1353          
1354          #ifdef SUPPORT_UART1
              /**
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 23  

              * Mon1 GetCommand
              *
              */
              BYTE Mon1GetCommand(void)
              {
                      static BYTE comment1=0;
                      static BYTE incnt1=0, last_argc1=0;
                      BYTE i, ch;
                      BYTE ret=0;
              
                      if( !RS1_ready() ) return 0;
                      ch = RS1_rx();
              
                      //----- if comment, echo back and ignore -----
                      if( comment1 ) {
                              if( ch=='\r' || ch==0x1b ) comment1 = 0;
                              else { 
                                      Mon1_tx(ch);
                                      return 0;
                              }
                      }
                      else if( ch==';' ) {
                              comment1 = 1;
                              Mon1_tx(ch);
                              return 0;
                      }
              
                      //=====================================
                      switch( ch ) {
              
                      case 0x1b:
                              argc1 = 0;
                              incnt1 = 0;
                              comment1 = 0;
                              Prompt1();
                              return 0;
              
                      //--- end of string
                      case '\r':
              
                              if( incnt1==0 ) {
                                      Prompt1();
                                      break;
                              }
              
                              mon1str[incnt1++] = '\0';
                              argc1=0;
              
                              for(i=0; i<incnt1; i++) if( mon1str[i] > ' ' ) break;
              
                              if( !mon1str[i] ) {
                                      incnt1 = 0;
                                      comment1 = 0;
                                      Prompt1();
                                      return 0;
                              }
                              argv1[0] = &mon1str[i];
                              for(; i<incnt1; i++) {
                                      if( mon1str[i] <= ' ' ) {
                                              mon1str[i]='\0';
                                       //Printf("(%s) ",  argv[argc]);
                                              i++;
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 24  

                                              while( mon1str[i]==' ' ) i++;
                                              argc1++;
                                              if( mon1str[i] ){
                                       argv1[argc1] = &mon1str[i];
                                              }
                                      }
                              }
              
                              ret = 1;
                              last_argc1 = argc1;
                              incnt1 = 0;
                              
                              break;
              
                      //--- repeat command
                      case '/':
                              argc1 = last_argc1;
                              ret = 1;
                              break;
              
                      //--- repeat command without CR
                      case '`':
                      {
                              BYTE i, j, ch;
              
                              for(j=0; j<last_argc1; j++) {
                                      for(i=0; i<100; i++) {
                                              ch = argv1[j][i];
                                              if( ch==0 ) {
                                                      if( j==last_argc1-1 ) return 0;
                                                      ch = ' ';
                                                      RS1_ungetch( ch );
                                                      break;
                                              }
                                              else {
                                                      RS1_ungetch( ch );
                                              }
                                      }
                              }
                              break;
                      }
              
                      //--- back space
                      case 0x08:
                              if( incnt1 ) {
                                      incnt1--;
                                      Mon1_tx(ch);
                                      Mon1_tx(' ');
                                      Mon1_tx(ch);
                              }
                              break;
              
                      //--- decreamental write
                      case ',':
                              if( incnt1 ) {
                                      Mon1_tx(ch);
                                      mon1str[incnt1++] = ch;
                              }
                              //else
                              //      MonIncDecI2C(0);          //BKTODO??
                              break;
              
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 25  

                      case '<':
                              if( incnt1 ) {
                                      Mon1_tx(ch);
                                      mon1str[incnt1++] = ch;
                              }
                              //else
                              //      MonIncDecI2C(10);       //??BKTODO??
                              break;
              
                      //--- increamental write
                      case '.':
                              if( incnt1 ) {
                                      Mon1_tx(ch);
                                      mon1str[incnt1++] = ch;
                              }
                              //else
                              //      MonIncDecI2C(1);        //??BKTODO
                              break;
              
                      case '>':
                              if( incnt1 ) {
                                      Mon1_tx(ch);
                                      mon1str[incnt1++] = ch;
                              }
                              //else
                              //      MonIncDecI2C(11);       //BKTODO
                              break;
              
                      default:
                              Mon1_tx(ch);
                              mon1str[incnt1++] = ch;
                              break;
                      }
              
                      if( ret ) {
                              comment1 = 0;
                              last_argc1 = argc1;
                              return ret;
                      }
                      else {
                              return ret;
                      }
              }
              #endif
1524          
1525          //*****************************************************************************
1526          //                              Monitoring Command
1527          //*****************************************************************************
1528          
1529          BYTE *MonString = 0;
1530          extern CODE BYTE DataInitADC[];
1531          extern CODE BYTE DataInitYUV[];
1532          extern CODE BYTE DataInitNTSC[];
1533          extern CODE BYTE DataInitDTV[];
1534          extern CODE BYTE DataInitTCON[];
1535          
1536          #if 1 // OSPOSD Move test
1537          void WaitVBlank1(void)
1538          {
1539   1              //XDATA BYTE i;
1540   1              WORD loop;
1541   1              volatile BYTE vdata;
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 26  

1542   1      
1543   1              WriteTW88Page(0);       //WriteI2CByte(0x8a,0xff,0x00);
1544   1      
1545   1      //      PORT_DEBUG = 0;
1546   1              WriteTW88(REG002, 0xFF);        //WriteI2CByte( 0x8a,0x02, 0xff ); //clear
1547   1              loop = 0;
1548   1              while(1) {
1549   2                      vdata = ReadTW88(REG002);       //vdata = ReadI2CByte( 0x8a,0x02 );
1550   2                      //Printf("\nREG002:%bx", vdata);                
1551   2                      if(vdata & 0x40) 
1552   2                              break;
1553   2                      loop++;
1554   2                      if(loop > 0xFFFE) {
1555   3                              ePrintf("\nERR:WaitVBlank");
1556   3                              break;
1557   3                      }
1558   2              }
1559   1      //      PORT_DEBUG = 1;
1560   1              //Printf("\nWaitVBlank1 loop:%d", loop);
1561   1      }
1562          #endif
1563          
1564          //extern void TestCrC8(void);   //test
1565          
1566          /**
1567          * monitor.
1568          *
1569          * get user command and execute it.
1570          */
1571          void Monitor(void)
1572          {
1573   1              WORD wValue;
1574   1      #if defined(MODEL_TW8835_EXTI2C)
                      DWORD dValue;
              #endif
1577   1      
1578   1              if( MonString ) {                                                                                                                                                                 
1579   2                      RS_ungetch( *MonString++ );
1580   2                      if( *MonString==0 ) MonString = 0;
1581   2              }
1582   1      
1583   1              if( !MonGetCommand() ) return;
1584   1      
1585   1              //---------------- Write Register -------------------
1586   1              if( !stricmp( argv[0], "W" ) ) {
1587   2                      MonWriteI2CByte();
1588   2              }
1589   1              else if( !stricmp( argv[0], ")" ) ) {
1590   2                      MonNewWriteI2CByte();
1591   2              }
1592   1              //---------------- Read Register --------------------
1593   1              else if ( !stricmp( argv[0], "R" ) ) {
1594   2                      MonReadI2CByte();
1595   2              }
1596   1              else if ( !stricmp( argv[0], "(" ) ) {
1597   2                      MonNewReadI2CByte();
1598   2              }
1599   1              //---------------- Dump Register --------------------
1600   1              else if( !stricmp( argv[0], "D" ) ) {
1601   2                      Puts("\ndump start");
1602   2                      MonDumpI2C();
1603   2              }
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 27  

1604   1              else if( !stricmp( argv[0], "&" ) ) {
1605   2                      MonNewDumpI2C();
1606   2              }
1607   1      
1608   1              //---------------- Bit Operation --------------------
1609   1              else if( !stricmp( argv[0], "B" ) ) {// Write bits - B AA II bb DD
1610   2                      MonWriteBit();
1611   2              }
1612   1              //---------------- Change I2C -----------------------
1613   1              else if( !stricmp( argv[0], "C" ) ) {
1614   2                      MonAddress = a2h( argv[1] );
1615   2      Printf("\nSetMonAddress:%d",__LINE__);
1616   2              }
1617   1              //---------------- wait -----------------------
1618   1              else if( !stricmp( argv[0], "wait" ) ) {
1619   2                      MonWait();
1620   2              }
1621   1              //---------------- delay -----------------------
1622   1              else if( !stricmp( argv[0], "delay" ) ) {
1623   2                      wValue = a2i( argv[1] );
1624   2                      delay1ms(wValue);
1625   2              }
1626   1              //---------------- Help -----------------------------
1627   1              else if( !stricmp( argv[0], "H" ) || !stricmp( argv[0], "HELP" ) || !stricmp( argv[0], "?" ) ) {
1628   2                      MonHelp();
1629   2      
1630   2              }
1631   1      #if 0
                      else if(!stricmp( argv[0], "wwww")) {
                              WaitVBlank(1);
                      }
              #endif
1636   1              //---------------- HOST SPIOSD TEST  ------
1637   1      #if 1 // SPIOSD Move test
1638   1              else if(!stricmp( argv[0], "move")) {
1639   2                      WORD i;
1640   2                      BYTE xpositionH,xpositionL;
1641   2                      WORD delay;
1642   2                      BYTE win;
1643   2      
1644   2                      if(argc < 2) {
1645   3                              win = 1;
1646   3                              if(SFR_CACHE_EN)        delay = 50;
1647   3                              else                            delay=10;
1648   3                      }
1649   2                      else {
1650   3                              win = a2h(argv[1]);
1651   3                              if(win==0)      win = 1;
1652   3                              if(argc < 3)
1653   3                                      delay = a2i(argv[2]);
1654   3      
1655   3                      }
1656   2      
1657   2      
1658   2                      for(i = 0; i< 801; i+= 1) {
1659   3                              xpositionH = i >>8;
1660   3                              xpositionL = (BYTE)i & 0xff;
1661   3                              
1662   3                              WaitVBlank1();
1663   3                              //TEST   delay1ms(15);
1664   3      //                      PORT_DEBUG = 0;
1665   3                              WriteTW88Page(4);       //WriteI2CByte(0x8a,0xff, 0x04);
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 28  

1666   3                              WriteTW88(REG431+0x10*win, xpositionH); //WriteI2CByte(0x8a,0x41, xpositionH);
1667   3                              WriteTW88(REG432+0x10*win, xpositionL); //WriteI2CByte(0x8a,0x42, xpositionL);
1668   3      //                      PORT_DEBUG = 1;
1669   3      
1670   3                              delay1ms(delay);
1671   3                      }
1672   2              }
1673   1      #endif
1674   1      #if 1
1675   1              else if(!stricmp( argv[0], "move1")) {
1676   2                      WORD i;
1677   2                      BYTE xpositionH,xpositionL;
1678   2                      WORD delay;
1679   2                      BYTE wait;
1680   2      
1681   2                      if(argc < 2) {
1682   3                              if(SFR_CACHE_EN)        delay = 50;
1683   3                              else                            delay=10;
1684   3                      }
1685   2                      else
1686   2                              delay = a2i(argv[1]);
1687   2      
1688   2                      if(argc==3)
1689   2                              wait=a2i(argv[2]);
1690   2                      else
1691   2                              wait=2;
1692   2      
1693   2                      //for(i = 0; i< 801; i+= 1) {
1694   2                      i = 0;
1695   2                      while(!RS_ready()) {
1696   3                              i++;
1697   3                              i %= 2;
1698   3                              xpositionH = i >>8;
1699   3                              xpositionL = (BYTE)i & 0xff;
1700   3                              
1701   3                              WaitVBlank1();
1702   3                              delay1ms(wait);
1703   3      //                      PORT_DEBUG = 0;
1704   3                              WriteTW88Page(4);       //WriteI2CByte(0x8a,0xff, 0x04);
1705   3                              WriteTW88(REG441, xpositionH);  //WriteI2CByte(0x8a,0x41, xpositionH);
1706   3                              WriteTW88(REG442, xpositionL);  //WriteI2CByte(0x8a,0x42, xpositionL);
1707   3      //                      PORT_DEBUG = 1;
1708   3      
1709   3                              delay1ms(delay);
1710   3                      }
1711   2              }
1712   1              else if(!stricmp( argv[0], "move2")) {
1713   2                      WORD i;
1714   2                      BYTE xpositionH,xpositionL;
1715   2                      WORD delay;
1716   2                      BYTE wait;
1717   2      
1718   2                      if(argc < 2) {
1719   3                              if(SFR_CACHE_EN)        delay = 50;
1720   3                              else                            delay=10;
1721   3                      }
1722   2                      else
1723   2                              delay = a2i(argv[1]);
1724   2      
1725   2                      if(argc==3)
1726   2                              wait=a2i(argv[2]);
1727   2                      else
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 29  

1728   2                              wait=2;
1729   2      
1730   2                      //for(i = 0; i< 801; i+= 1) {
1731   2                      i = 0;
1732   2                      while(!RS_ready()) {
1733   3                              i++;
1734   3                              i %= 2;
1735   3                              xpositionH = i >>8;
1736   3                              xpositionL = (BYTE)i & 0xff;
1737   3                              
1738   3                              WaitVBlank1();
1739   3                              //test::delay1ms(wait);
1740   3      //                      PORT_DEBUG = 0;
1741   3                              WriteTW88Page(4);       //WriteI2CByte(0x8a,0xff, 0x04);
1742   3                              WriteTW88(REG445, 0x20-i);      
1743   3      //                      PORT_DEBUG = 1;
1744   3      
1745   3                              delay1ms(delay);
1746   3                      }
1747   2              }
1748   1              else if(!stricmp( argv[0], "move3")) {
1749   2                      WORD i;
1750   2                      BYTE xpositionH,xpositionL;
1751   2                      WORD delay;
1752   2      
1753   2                      if(argc < 2) {
1754   3                              if(SFR_CACHE_EN)        delay = 50;
1755   3                              else                            delay=10;
1756   3                      }
1757   2                      else
1758   2                              delay = a2i(argv[1]);
1759   2      
1760   2                      //for(i = 0; i< 801; i+= 1) {
1761   2                      i = 0;
1762   2                      while(!RS_ready()) {
1763   3                              i++;
1764   3                              i %= 2;
1765   3                              xpositionH = i >>8;
1766   3                              xpositionL = (BYTE)i & 0xff;
1767   3                              
1768   3                              WaitVBlank1();
1769   3                              //test::delay1ms(1);
1770   3      //                      PORT_DEBUG = 0;
1771   3                              WriteTW88Page(4);       //WriteI2CByte(0x8a,0xff, 0x04);
1772   3                              WriteTW88(REG461, xpositionH);  //WriteI2CByte(0x8a,0x41, xpositionH);
1773   3                              WriteTW88(REG462, xpositionL);  //WriteI2CByte(0x8a,0x42, xpositionL);
1774   3      //                      PORT_DEBUG = 1;
1775   3      
1776   3                              delay1ms(delay);
1777   3                      }
1778   2              }
1779   1      #endif
1780   1      #if 0
                      //---------------- UART TEST  ------
                      else if(!stricmp( argv[0], "UARTDUMP")) {
                              BYTE    ch;
              
                              do {
                                      if( !RS_ready() ) continue;
                                      ch = RS_rx();
                                      Printf("%02bx ", ch );
                              } while ( ch != 'x' );
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 30  

                      }
              #endif
1792   1      
1793   1      //#if 1
1794   1      //      else if( !stricmp( argv[0], "crc8" ) ) {
1795   1      //              TestCrC8();
1796   1      //      }
1797   1      //#endif
1798   1      
1799   1              //---------------- Read/Write Register for slow I2C  ------
1800   1      #if 0
              //!     //==>to test SW I2C Slave
              //!     else if ( !stricmp( argv[0], "RR" ) ) {
              //!             MonReadSlowI2CByte();   
              //!     }
              //!     else if( !stricmp( argv[0], "WW" ) ) {
              //!             MonWriteSlowI2CByte();  
              //!     }
              #endif
1809   1      #if 0
              //!     //---------------- Read/Write Register for internal register ------
              //!     else if ( !stricmp( argv[0], "RR" ) ) {
              //!             MonReadInternalReg();   //==>see "mcu Rx addr"
              //!     }
              //!     else if( !stricmp( argv[0], "WW" ) ) {
              //!             MonWriteInternalReg();  //==>see "mcu Wx addr"
              //!     }
              #endif
1818   1      
1819   1      #ifdef SW_I2C_SLAVE
                      else if( !stricmp( argv[0], "i2c" ) ) {
              
                              extern BYTE dbg_sw_i2c_index[];
                              extern BYTE dbg_sw_i2c_devid[];
                              extern BYTE dbg_sw_i2c_regidx[];
                              extern BYTE dbg_sw_i2c_data[];
                              BYTE i;
                              extern BYTE i2c_delay_start /*= 160*/;
                              extern BYTE i2c_delay_restart /*= 2*/;
                              extern BYTE i2c_delay_datasetup /*= 32*/;
                              extern BYTE i2c_delay_clockhigh /*= 32*/;
                              extern BYTE i2c_delay_datahold /*= 32*/;
              
              
                              if(!stricmp(argv[1],"?")) {
                                      Printf("\nSW i2c ");
              
                              }
                              if(!stricmp(argv[1],"reset")) {
                                      dbg_sw_i2c_sda_count = 0;
                                      dbg_sw_i2c_scl_count = 0;
                                      sw_i2c_regidx = 0;
                                      for(i=0; i < 4; i++) {
                                              dbg_sw_i2c_index[i] = 0;
                                              dbg_sw_i2c_devid[i] = 0;
                                              dbg_sw_i2c_regidx[i] = 0;
                                              dbg_sw_i2c_data[i] = 0; 
                                      }
                                      i2c_delay_start = 160;
                                      i2c_delay_restart = 2;
                                      i2c_delay_datasetup = 32;
                                      i2c_delay_clockhigh = 32;
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 31  

                                      i2c_delay_datahold = 32;
                              }
              
              
                              if(!stricmp(argv[1],"delay_start")) {
                                      if( argc>=3 ) 
                                              i2c_delay_start = (BYTE)a2h( argv[2] );
                              }
                              if(!stricmp(argv[1],"delay_restart")) {
                                      if( argc>=3 ) 
                                              i2c_delay_restart = (BYTE)a2h( argv[2] );
                              }
                              if(!stricmp(argv[1],"delay_datasetup")) {
                                      if( argc>=3 ) 
                                              i2c_delay_datasetup = (BYTE)a2h( argv[2] );
                              }
                              if(!stricmp(argv[1],"delay_clockhigh")) {
                                      if( argc>=3 ) 
                                              i2c_delay_clockhigh = (BYTE)a2h( argv[2] );
                              }
                              if(!stricmp(argv[1],"delay_datahold")) {
                                      if( argc>=3 ) 
                                              i2c_delay_datahold = (BYTE)a2h( argv[2] );
                              }
                              Printf("\ni2c_delay start:%bx restart:%bx datasetup:%bx clockhigh:%bx datahold:%bx",
                                      i2c_delay_start,i2c_delay_restart,i2c_delay_datasetup, i2c_delay_clockhigh,i2c_delay_datahold);         
              
              
                              Printf("\nsda_count:%bd scl_count:%d",dbg_sw_i2c_sda_count, dbg_sw_i2c_scl_count);
                              Printf("\nsw_i2c_index:%bx sw_i2c_devid:%bx",sw_i2c_index, sw_i2c_devid);
              
                              //Printf("\nstart:%bd",sw_i2c_index);
                              //Printf(" devid:%02bx index:%02bx", sw_i2c_devid,      sw_i2c_regidx);
                              for(i=0; i < dbg_sw_i2c_sda_count; i++) {
                                      Printf("\n%bd::start:%bd id:%02bx index:%02bx data:%02bx",i,dbg_sw_i2c_index[i],dbg_sw_i2c_devid[i], db
             -g_sw_i2c_regidx[i],  dbg_sw_i2c_data[i]);
                              }
                      }
              #endif
1890   1              //---------------------------------------------------
1891   1      /*
1892   1              else if( !stricmp( argv[0], "*" ) ) {
1893   1                              
1894   1                                      if( argc==1 ) {
1895   1                                              Printf("\n  * 0 : Program default Loader");
1896   1                                              Printf("\n  * 1 : Program external Loader");
1897   1                                              Printf("\n  * 2 : Execute Loader");
1898   1                                      }
1899   1                                      else { 
1900   1                                              BYTE mode;
1901   1                                              mode = a2h(argv[1]);
1902   1                                              //Loader(mode);
1903   1                                      }
1904   1              }
1905   1      */
1906   1              //----------------------------------------------------
1907   1              //---------------- ISR ------------------------------
1908   1              //----------------------------------------------------
1909   1              else if(!stricmp( argv[0], "ISR" ) ) {
1910   2                      if(argc < 2) {
1911   3                              Printf("\nISR status:");
1912   3                              if(SFR_EX0) Printf("EX0 ");                                             // ext0
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 32  

1913   3                              if(SFR_ET1) Printf("ET1 ");                                             // timer1 - touch
1914   3                              if(SFR_ET2) Printf("ET2 ");                                             // timer2 - Remo
1915   3                              if(SFR_E2IE) Printf("E2IE:%02bx ",SFR_E2IE);    // E2IE[4] - Remo                               
1916   3                      }
1917   2                      else if(!stricmp( argv[1], "ON" )) {
1918   3                              if(SFR_EX0) Printf("-->Skip");
1919   3                              else {
1920   4                                      SFR_EX0 = 1;
1921   4      #ifdef SUPPORT_TOUCH
1922   4                                      SFR_ET1 = 1;
1923   4      #endif
1924   4                                      SFR_E2IE |= 0x04;
1925   4                              }
1926   3                      }       
1927   2                      else if(!stricmp( argv[1], "OFF" ))     {
1928   3                              if(SFR_EX0 == 0) Printf("-->Skip");
1929   3                              else {
1930   4                                      SFR_EX0 = 0;
1931   4                                      SFR_ET1 = 0;
1932   4                                      SFR_E2IE = 0;
1933   4                              }
1934   3                      }
1935   2              }
1936   1              //----------------------------------------------------
1937   1              //---------------- Init ------------------------------
1938   1              //----------------------------------------------------
1939   1              else if(!stricmp( argv[0], "init" ) ) {
1940   2                      if(argc < 2) {
1941   3                              InitWithNTSC();
1942   3                              FP_GpioDefault();
1943   3                              SSPLL_PowerUp(ON);
1944   3                              //DCDC needs 100ms, but we have enough delay on...
1945   3                              DCDC_StartUP();
1946   3              
1947   3                              ScalerSetMuteManual(OFF);
1948   3                              LedPowerUp();
1949   3                      }
1950   2                      else {
1951   3                              if( !stricmp( argv[1], "?") || !stricmp( argv[1], "help") ) {
1952   4                                      Puts("\nInit {?|core|fpga|NTSC|panel|sspll|clock {H|L}|logo {on|off}|default}");
1953   4      
1954   4                                      Puts("\n\nExample:BootUp");
1955   4                                      Puts("\n init core");
1956   4                                      Puts("\n init | init NTSC");
1957   4                                      Puts("\n      | init panel");
1958   4                                      Puts("\n m");
1959   4                                      Puts("\n init logo");
1960   4                                      Puts("\n\nExample:change input");
1961   4                                      Puts("\n m [CVBS|SVIDEO|COMP|PC|DVI|HDMI|BT656]");
1962   4                                      Puts("\n or");
1963   4                                      Puts("\n input [CVBS|SVIDEO|COMP|PC|DVI|HDMI|BT656]");
1964   4                                      Puts("\n init default");
1965   4                                      Puts("\n checkandset");
1966   4                              }
1967   3                              else if( !stricmp( argv[1], "fpga" ) ) {        
1968   4                                      InitISR(0);     //InitCPU();
1969   4                                      InitCore(0);
1970   4                                      /*ee_mode = */ CheckEEPROM();
1971   4                                      InitWithNTSC();
1972   4                                      DCDC_StartUP();
1973   4                                      ScalerSetMuteManual(OFF);
1974   4                                      LedPowerUp();
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 33  

1975   4                                      ClkPllSetDividerReg(CLKPLL_DIV_1P5);
1976   4                                      SpiOsdEnable(ON);
1977   4                                      SpiOsdSetDeValue();
1978   4                                      DebugLevel = 0;
1979   4                              }       
1980   3                              else if( !stricmp( argv[1], "ISR" ) ) { 
1981   4                                      InitISR(0);
1982   4                              }
1983   3                              else if( !stricmp( argv[1], "core" ) ) {        
1984   4                                      InitCore(0);
1985   4                              }
1986   3                              else if( !stricmp( argv[1], "NTSC" ) ) {
1987   4                                      InitWithNTSC();
1988   4                                      FP_GpioDefault();
1989   4                                      SSPLL_PowerUp(ON);
1990   4                              }
1991   3                              else if( !stricmp( argv[1], "panel" ) ) {
1992   4                                      DCDC_StartUP();
1993   4                                      ScalerSetMuteManual(OFF);
1994   4                                      LedPowerUp();
1995   4                              }
1996   3                              else if( !stricmp( argv[1], "sspll" ) ) {
1997   4                                      McuSpiClkSelect(MCUSPI_CLK_27M);
1998   4                                      SspllSetFreqAndPll(108000000L);
1999   4                                      if(SpiFlashVendor==SFLASH_VENDOR_MX)
2000   4                                              ClkPllSetSelDiv(CLKPLL_SEL_PLL,CLKPLL_DIV_2P0);
2001   4                                      else
2002   4                                              ClkPllSetSelDiv(CLKPLL_SEL_PLL,CLKPLL_DIV_1P5);
2003   4                              }
2004   3                              else if( !stricmp( argv[1], "clock" ) ) {
2005   4                                      if( argc>=3 ) {
2006   5                                              if     ( toupper(argv[2][0])=='H' ) ClockHigh();
2007   5                                              else if( toupper(argv[2][0])=='L' ) ClockLow();
2008   5                                              else                                Clock27();
2009   5                                      }
2010   4                                      else
2011   4                                              Clock27();
2012   4                              }
2013   3                              else if( !stricmp( argv[1], "logo" ) ) {
2014   4                                      if( argc>=3 ) {
2015   5                                              if( !stricmp( argv[2], "on" ) )
2016   5                                                      InitLogo1();
2017   5                                              else if( !stricmp( argv[2], "off" ) )
2018   5                                                      RemoveLogoWithWait(1);
2019   5                                              else
2020   5                                                      Printf("\nInvalid command...");
2021   5                                      }
2022   4                                      else {
2023   5                                              //auto
2024   5                                              InitLogo1();
2025   5                                              if(1) {
2026   6                                                      RemoveLogoWithWait(1);
2027   6                                              }
2028   5                                      }
2029   4                              }
2030   3                              else if( !stricmp( argv[1], "default" ) ) {
2031   4                                      InitInputAsDefault();
2032   4                              } 
2033   3                      }
2034   2              }
2035   1              //-----input select------------------------------------------
2036   1              else if ( !stricmp( argv[0], "input" ) ) {
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 34  

2037   2                      if(argc < 2) {
2038   3                              Printf("\nInputMain:");
2039   3                              PrintfInput(InputMain,1);
2040   3                              Printf("\t\tInputMainEE:");
2041   3                              PrintfInput(GetInputEE(),1);
2042   3                      }
2043   2                      else {
2044   3                              if     ( !stricmp( argv[1], "CVBS" ))   InputMain = INPUT_CVBS;
2045   3                              else if( !stricmp( argv[1], "SVIDEO" )) InputMain = INPUT_SVIDEO;
2046   3                              else if( !stricmp( argv[1], "COMP" ))   InputMain = INPUT_COMP;
2047   3                              else if( !stricmp( argv[1], "PC" ))     InputMain = INPUT_PC;
2048   3                              else if( !stricmp( argv[1], "DVI" ))    InputMain = INPUT_DVI;
2049   3                              else if( !stricmp( argv[1], "HDMI" )) {
2050   4                                      if(GetHdmiModeEE())                             InputMain = INPUT_HDMITV;
2051   4                                      else                                                            InputMain = INPUT_HDMIPC;
2052   4                              }
2053   3                              else if( !stricmp( argv[1], "BT656" ))  InputMain = INPUT_BT656;
2054   3                              else                                    InputMain = INPUT_CVBS;
2055   3                              InputSubMode = 7; //N/A
2056   3      
2057   3                              LinkCheckAndSetInput();
2058   3                      
2059   3                              if(GetInputEE() != InputMain)   
2060   3                                      SaveInputEE( InputMain );
2061   3      
2062   3                              ChangeInput( InputMain );       
2063   3                      }
2064   2              }
2065   1              //---------------- Change Input Mode ---------------------
2066   1              // M [CVBS|SVIDEO|COMP|PC|DVI|HDMI|BT656]
2067   1              //--------------------------------------------------------      
2068   1              else if ( !stricmp( argv[0], "M" ) ) {
2069   2                      if(argc < 2) {
2070   3                              StartVideoInput();
2071   3                      }
2072   2                      else {
2073   3                              if ( !stricmp( argv[1], "CVBS" ) || !stricmp( argv[1], "C" )) {
2074   4                                      InputMain = 0xff;                       // start with saved input                                               
2075   4                                      ChangeInput( INPUT_CVBS );      
2076   4                              }
2077   3                              else if ( !stricmp( argv[1], "SVIDEO" ) || !stricmp( argv[1], "S" )) {
2078   4                                      InputMain = 0xff;                       // start with saved input                                               
2079   4                                      ChangeInput( INPUT_SVIDEO );    
2080   4                              }
2081   3                              else if ( !stricmp( argv[1], "COMP" ) || !stricmp( argv[1], "Y" )) { //NOTE:Y
2082   4                                      InputMain = 0xff;                       // start with saved input                                               
2083   4                                      ChangeInput( INPUT_COMP );      
2084   4                              }
2085   3                              else if ( !stricmp( argv[1], "PC" ) || !stricmp( argv[1], "P" )) {
2086   4                                      InputMain = 0xff;                       // start with saved input                                               
2087   4                                      ChangeInput( INPUT_PC );        
2088   4                              }
2089   3                              else if ( !stricmp( argv[1], "DVI" ) || !stricmp( argv[1], "D" )) {
2090   4                                      InputMain = 0xff;                       // start with saved input                                               
2091   4                                      ChangeInput( INPUT_DVI );       
2092   4                              }
2093   3                              else if ( !stricmp( argv[1], "HDMI" ) || !stricmp( argv[1], "H" )) {
2094   4                                      BYTE InputMainEE;
2095   4              
2096   4                                      if(GetHdmiModeEE())  InputMainEE = INPUT_HDMITV;
2097   4                                      else                             InputMainEE = INPUT_HDMIPC;
2098   4              
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 35  

2099   4                                      InputMain = 0xff;                       // start with saved input                                               
2100   4                                      ChangeInput( InputMainEE );     
2101   4                              }
2102   3                              else if ( !stricmp( argv[1], "HDMIPC" )) {
2103   4                                      InputMain = 0xff;                       // start with saved input                                               
2104   4                                      ChangeInput( INPUT_HDMIPC );
2105   4                              }       
2106   3                              else if ( !stricmp( argv[1], "HDMITV" )) {
2107   4                                      InputMain = 0xff;                       // start with saved input                                               
2108   4                                      ChangeInput( INPUT_HDMITV );
2109   4                              }       
2110   3                              else if ( !stricmp( argv[1], "BT656" ) || !stricmp( argv[1], "B" )) {
2111   4                                      InputMain = 0xff;                       // start with saved input                                               
2112   4                                      ChangeInput( INPUT_BT656 );     
2113   4                              }
2114   3                      }
2115   2              }
2116   1              //---------------- CheckAndSet ---------------------
2117   1              else if ( !stricmp( argv[0], "CheckAndSet" ) ) {
2118   2                      BYTE ret;
2119   2      
2120   2                      switch(InputMain) {
2121   3                      case INPUT_CVBS:
2122   3                      case INPUT_SVIDEO:      ret=CheckAndSetDecoderScaler(); break;
2123   3      #ifdef SUPPORT_COMPONENT
2124   3                      case INPUT_COMP:        ret=CheckAndSetComponent();             break;
2125   3      #endif
2126   3      #ifdef SUPPORT_PC
2127   3                      case INPUT_PC:          ret=CheckAndSetPC();                    break;
2128   3      #endif
2129   3      #ifdef SUPPORT_DVI
                              case INPUT_DVI:         ret=CheckAndSetDVI();                   break;
              #endif
2132   3      #if defined(SUPPORT_HDMI_EP9351) || defined(SUPPORT_HDMI_SiIRX)
                              case INPUT_HDMIPC:
                              case INPUT_HDMITV:
                                                                      ret= CheckAndSetHDMI();                 break;
              #endif
2137   3      #ifdef SUPPORT_BT656
2138   3                      case INPUT_BT656:       ret = CheckAndSetBT656();               break;
2139   3      #endif
2140   3                      default:                        ret = CheckAndSetUnknown();             break;
2141   3                      }
2142   2                      if(ret==ERR_SUCCESS) {
2143   3                              //success
2144   3                              VInput_enableOutput(0);
2145   3                              Puts("\n==>SUCCESS");
2146   3      #ifdef NOSIGNAL_LOGO
2147   3                              if(getNoSignalLogoStatus())
2148   3                                      RemoveLogo();
2149   3      #endif
2150   3                      } else {
2151   3                              //------------------
2152   3                              // NO SIGNAL
2153   3                              // Prepare NoSignal Task...
2154   3                              VInput_gotoFreerun(0);
2155   3                              Puts("\n==>FAIL");
2156   3                      }
2157   2              }
2158   1              //---------------- check -------------------------
2159   1              else if ( !stricmp( argv[0], "check" ) ) {
2160   2                      if(argc < 2) {
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 36  

2161   3                              Puts("\n ? Phase|Color");
2162   3                      }
2163   2                      else {
2164   3      #ifdef SUPPORT_PC
2165   3                              if ( !stricmp( argv[1], "PHASE" )|| !stricmp( argv[1], "PH" ))
2166   3                                      AutoTunePhase();
2167   3                              else if ( !stricmp( argv[1], "COLOR" ))
2168   3                                      AutoTuneColor();
2169   3      #endif  
2170   3                      }
2171   2              }
2172   1      
2173   1              //---------------- SPI Debug -------------------------
2174   1              else if( !stricmp( argv[0], "SPI" ) ) {
2175   2                      MonitorSPI();
2176   2              }
2177   1              else if( !stricmp( argv[0], "SPIC" ) ) {
2178   2                      MonitorSPIC();
2179   2              }
2180   1              //---------------- EEPROM Debug -------------------------
2181   1      #ifdef USE_SFLASH_EEPROM
2182   1              else if( !stricmp( argv[0], "EE" ) ) {
2183   2                      MonitorEE();
2184   2              }
2185   1      #endif
2186   1              //---------------- MENU Debug -------------------------
2187   1              else if( !stricmp( argv[0], "menu" ) ) {
2188   2                      MonitorMenu();
2189   2              }
2190   1              //---------------- Font Osd Debug -------------------------
2191   1              else if( !stricmp( argv[0], "fosd" ) ) {
2192   2                      MonitorFOsd();
2193   2              }
2194   1              //---------------- SPI Osd Debug -------------------------
2195   1              else if( !stricmp( argv[0], "sosd" ) ) {
2196   2                      MonitorSOsd();
2197   2              }
2198   1              //---------------- MCU Debug -------------------------
2199   1              else if( !stricmp( argv[0], "MCU" ) ) {
2200   2                      MonitorMCU();
2201   2              }
2202   1              //---------------- Debug Level ---------------------
2203   1              else if ( !stricmp( argv[0], "DEBUG" ) ) {
2204   2                      if( argc==2 ) {
2205   3                              DebugLevel = a2h(argv[1]);
2206   3                      }
2207   2                      Printf("\nDebug Level = %2bx", DebugLevel);
2208   2              }
2209   1              //---------------- SW Key pad ---------------------
2210   1              else if ( !stricmp( argv[0], "KEY" ) ) {
2211   2                      if( argc==2 ) {
2212   3                              SW_key = a2h(argv[1]);
2213   3                      }
2214   2                      Printf("\nSW_key = %2bx", SW_key);
2215   2              }
2216   1              //---------------- Echo back on/off -----------------
2217   1              else if ( !stricmp( argv[0], "echo" ) ) {
2218   2                      if( !stricmp( argv[1], "off" ) ) {
2219   3                              echo = 0;
2220   3                              Printf("\necho off");
2221   3                      }
2222   2                      else {
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 37  

2223   3                              echo = 1;
2224   3                              Printf("\necho on");
2225   3                      }
2226   2              }
2227   1              //---------------- access on/off -----------------
2228   1              else if ( !stricmp( argv[0], "ACCESS" ) ) {
2229   2                      if( !stricmp( argv[1], "0" ) ) {
2230   3                              access = 0;
2231   3                              Printf("\nAccess off");
2232   3                              //disable interrupt.
2233   3                              WriteTW88Page(PAGE0_GENERAL );
2234   3                              WriteTW88(REG003, 0xFE );       // enable only SW interrupt
2235   3                      }
2236   2                      else {
2237   3                              access = 1;
2238   3                              Printf("\nAccess on");
2239   3                      }
2240   2              }
2241   1              //---------------- cache on/off -----------------
2242   1              else if ( !stricmp( argv[0], "cache" ) ) {
2243   2                      if(argc >=2) {
2244   3                              if( !stricmp( argv[1], "on" ) )
2245   3                                      SFR_CACHE_EN = 1;
2246   3                              else if( !stricmp( argv[1], "off" ) )
2247   3                                      SFR_CACHE_EN = 0;
2248   3                              else
2249   3                                      Printf("\nusage:cache [on|off]");
2250   3                      }
2251   2                      //cache status
2252   2                      if(SFR_CACHE_EN)        Printf("\ncache on");
2253   2                      else                            Printf("\ncache off");
2254   2              }
2255   1              //---------------- task on/off -----------------
2256   1              else if ( !stricmp( argv[0], "task" ) ) {
2257   2                      if( !stricmp( argv[1], "on") ) {
2258   3                              tic_task = 10*100;      // NOSIGNAL_TIME_INTERVAL
2259   3                              TaskNoSignal_setCmd(TASK_CMD_RUN);
2260   3                      }
2261   2                      else {
2262   3                              TaskSetGrid(0);
2263   3              
2264   3                              TaskNoSignal_setCmd(TASK_CMD_DONE);
2265   3                              WriteTW88Page(PAGE0_GENERAL );
2266   3                              //WriteTW88(REG003, 0xFF );     // disable all INTR
2267   3                      }
2268   2              }
2269   1              //---------------- System Clock Display -----------------
2270   1              else if ( !stricmp( argv[0], "time" ) ) {
2271   2                              Printf("\nSystem Clock: %ld:%5bd", SystemClock, tic01);
2272   2              }
2273   1              //---------------- HDMI test -------------------------
2274   1      #ifdef SUPPORT_HDMI_EP9351
              #ifdef ON_CHIP_EDID_ENABLE
                      else if( !stricmp( argv[0], "edid" ) ) {
                              DWORD addr;
                              if(argc < 2)
                                      addr = 0;
                              else
                                      addr = a2h( argv[1] );
                              HdmiDownloadEdid(addr);
                      }
              #endif
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 38  

              #ifdef ON_CHIP_HDCP_ENABLE
                      else if( !stricmp( argv[0], "hdcp" ) ) {
                              DWORD addr;
                              if(argc < 2)
                                      addr = 0;
                              else
                                      addr = a2h( argv[1] );
                              HdmiDownloadDhcp(addr);
                      }
              #endif
                      else if( !stricmp( argv[0], "aviinfo" ) ) {
                              BYTE TempByte[16];
                              ReadI2C(I2CID_EP9351, EP9351_AVI_InfoFrame, TempByte, 15);
                              DBG_PrintAviInfoFrame();
                      }
              #endif
2301   1              
2302   1      #if 0
                      //---------------- pclk -------------------------
                      //      pclk 1080 means 108MHz
                      //      pclk 27 means 27MHz
                      else if( !stricmp( argv[0], "pclk" ) ) {
                              if(argc >= 2) {
                                      dValue = a2i( argv[1] );
                                      dValue *= 100000L;
                                      SspllSetFreqAndPll(dValue);
                              }
                              //print current pclk info
                              Printf("\nsspll:%ld",SspllGetPPF(0));
                      }
              #endif
2316   1      #if defined(MODEL_TW8835_EXTI2C)
                      else if( !stricmp( argv[0], "pclk" ) ) {
                              BYTE div; //,i;
                              //volatile BYTE dat;
                              //BYTE r400;
                              //DWORD dValue;
                              BYTE r4e0;
              
                              if(argc >= 2) {
                                      if( !stricmp( argv[1], "onoff" )) {
              
                                              WriteTW88Page(4);
                                              r4e0 = ReadTW88(REG4E0);
                                              WaitVBlank(1);
                                              if(r4e0 & 0x01) WriteTW88(REG4E0, r4e0 & ~0x01);
                                              else                    WriteTW88(REG4E0, r4e0 |  0x01);
                                              Prompt();
                                              return;
                                      }
              
                                      dValue = a2i( argv[1] );
                                      if(dValue ==0) {
                                              McuSpiClkRestore();
                                              Prompt();
                                              return;
                                      }
                              }
                              else
                                      dValue = 20;
                              
                              if(dValue==10)          div = CLKPLL_DIV_1P0;
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 39  

                              else if(dValue==15) div = CLKPLL_DIV_1P5;
                              else if(dValue==20) div = CLKPLL_DIV_2P0;
                              else if(dValue==25) div = CLKPLL_DIV_2P5;
                              else if(dValue==30) div = 4;
                              else if(dValue==35) div = 5;
                              else if(dValue==40) div = 6;
                              else if(dValue==50) div = CLKPLL_DIV_5P0;
                              else                            div = CLKPLL_DIV_2P0;
              
              //              McuSpiClkToPclk(div);
              //      WaitVBlank(1);
              
              //P1_4 = 0;                             
                              WriteTW88Page(PAGE4_CLOCK);
              //P1_4 = 1;
                              r4e0 = ReadTW88(REG4E0);
                      
                              WriteTW88Page(PAGE0_GENERAL);
                              WriteTW88(REG002, 0xff );
              //P1_4 = 0;                             
                              while((ReadTW88(REG002) & 0x40) ==0);
                              WriteTW88Page(PAGE4_CLOCK);
                              WriteTW88(REG4E0, r4e0 & 0xFE); //select PCLK.
              //P1_4 = 1;
                              //----
                              //wait
                              //-----
                              delay1ms(2);
                              WriteTW88Page(PAGE0_GENERAL);
                              WriteTW88(REG002, 0xff );
              //P1_4 = 0;                             
                              while((ReadTW88(REG002) & 0x40) ==0);
                              WriteTW88Page(PAGE4_CLOCK);
                              WriteTW88(REG4E0, r4e0 & 0xFE); //select PCLK.
              //P1_4 = 1;
              
              
                              //check DMA
              //              WriteTW88Page(4);
              //              dat = ReadTW88(REG4C4);
              //r400 = ReadTW88(REG400);
              ////            WaitVBlank(1);
              ////WriteTW88Page(4);
              //WriteTW88(REG400,r400 & ~0x04);
              //              WaitVBlank(1);
              ////WriteTW88Page(4);
              //              WriteTW88(REG4C4,  dat | 0x01); //DMA start
              //              for(i=0; i < 250; i++) {
              //                      dat = ReadTW88(REG4C4);
              //                      if((dat & 0x01) == 0)
              //                              break;
              //              }
              //WriteTW88(REG400,r400);
              //              if(i >=250) {
              //                      Printf("\nDMA fail");
              //              }
              //              else {
              //                      Printf("\nDMA done at %bd",i);
                              
              //P1_4 = 0;                             
              //                      McuSpiClkRestore();
              //P1_4 = 1;
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 40  

              //                      delay1ms(100);
              //              }
              //P1_4 = 1;             
                              Prompt();
                              return;
              
                      }
              #endif  
2417   1              //====================================================
2418   1              // OTHER TEST ROUTINES
2419   1              //====================================================
2420   1      #if defined(MODEL_TW8835_SLAVE) && defined(SUPPORT_I2CCMD_TEST)
              //def SUPPOR T_I2CCMD_SLAVE
                      //---------------- test -------------------
                      else if( !stricmp( argv[0], "i2ctest" ) )        {
                              i2c_test_slave_conflict();
                      }
                      else if( !stricmp( argv[0], "i2ctestpage" ) )    {
                              BYTE page;
                              page = a2i( argv[1] );
                              test_set_i2c_slave_compare_page(page);
                      }
              #endif
2432   1      #if defined(SUPPORT_I2CCMD_TEST)
                      else if( !stricmp( argv[0], "i2ccmdtest" ) )     {
                              BYTE mode;
                              WORD duration;
              
                              if(argc < 2) {
                                      Printf("\nInvalid parameter");
                                      return;
                              }
                              else if(argc < 3) {
                                      duration = 0xFFFF;      //max 65536
                              }
                              else {
                                      duration = a2i( argv[2] );
                              }
                              mode = a2i( argv[1] );
                              i2ccmd_test(mode,duration);
                      }
              #endif
2451   1      
2452   1              else if( !stricmp( argv[0], "testfont" ) )       {
2453   2                      extern void TestInitFontRam(WORD start);
2454   2                      WORD start;
2455   2                      start = a2h( argv[1] );
2456   2                      TestInitFontRam(start);
2457   2              }       
2458   1      
2459   1              //==========================================
2460   1              // FontOSD Test
2461   1              //==========================================
2462   1      #if 1
2463   1              else if ( !stricmp( argv[0], "FT0" )) {
2464   2                      //FontOSD Test
2465   2                      WORD    OsdRamAddr;
2466   2                      DECLARE_LOCAL_page
2467   2                      BYTE    i;
2468   2                      static  BYTE    attr = 0x1a;
2469   2                      static  BYTE    fdata = 1;
2470   2      
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 41  

2471   2                      ReadTW88Page(page);
2472   2                      WriteTW88Page(PAGE3_FOSD );
2473   2      
2474   2                      OsdRamAddr =  0x1fD;
2475   2      
2476   2                      for(i=0; i < 16; i++) {
2477   3                              FOsdRamSetAddress(OsdRamAddr);
2478   3                              WriteTW88(REG304, 0 );
2479   3                              WriteTW88(REG307, fdata);
2480   3                              WriteTW88(REG308, attr );                       // bgColor + fgColor in 1BPP
2481   3                              OsdRamAddr++;
2482   3                              fdata++;
2483   3                      }
2484   2      
2485   2                      if ( fdata>60 ) fdata=1;
2486   2                      attr = ~attr;
2487   2                      WriteTW88Page(page );
2488   2              }
2489   1              else if ( !stricmp( argv[0], "FT1" )) {
2490   2                      //FontOSD test
2491   2                      WORD    OsdRamAddr;
2492   2                      DECLARE_LOCAL_page
2493   2                      BYTE    i;
2494   2                      static  BYTE    attr = 0x1a;
2495   2                      static  BYTE    fdata = 1;
2496   2      
2497   2      
2498   2                      ReadTW88Page(page);
2499   2      
2500   2                      while ( !RS_ready() ) {
2501   3                      
2502   3                              WriteTW88Page(PAGE3_FOSD );
2503   3                      
2504   3                              OsdRamAddr =  0x1fD;
2505   3                      
2506   3                              //set address again for index data
2507   3                      
2508   3                              FOsdRamSetAddress(OsdRamAddr);
2509   3                              WriteTW88(REG308, attr );                       // bgColor + fgColor in 1BPP
2510   3                      
2511   3                              WriteTW88(REG304, 0x0C ); // Auto Inc.
2512   3                              FOsdRamSetAddress(OsdRamAddr);
2513   3                      
2514   3                              for(i=0; i < 16; i++) {
2515   4                                      WriteTW88(REG307, fdata);
2516   4                                      fdata++;
2517   4                              }
2518   3                      
2519   3                              if ( fdata>60 ) fdata=1;
2520   3                              attr = ~attr;
2521   3                      }
2522   2                      WriteTW88Page(page );
2523   2              }
2524   1              else if ( !stricmp( argv[0], "FT2" )) {
2525   2                      //FontOSD test
2526   2                      WORD    OsdRamAddr;
2527   2                      DECLARE_LOCAL_page
2528   2                      BYTE    i;
2529   2                      static  BYTE    attr = 0x1a;
2530   2                      static  BYTE    fdata = 1;
2531   2      
2532   2                      ReadTW88Page(page);
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 42  

2533   2                      while ( !RS_ready() ) {
2534   3                              WriteTW88Page(PAGE3_FOSD );
2535   3              
2536   3                              OsdRamAddr =  0x1fD;
2537   3              
2538   3                              //set address again for index data
2539   3              
2540   3                              FOsdRamSetAddress(OsdRamAddr);
2541   3                              WriteTW88(REG308, attr );                       // bgColor + fgColor in 1BPP
2542   3                      
2543   3                              WriteTW88(REG304, 0x0C ); // Auto Inc.
2544   3                              FOsdRamSetAddress(OsdRamAddr);
2545   3              
2546   3                              WriteTW88(REG300, ReadTW88(REG300) | 0x01);             // bypass on
2547   3                              for(i=0; i < 16; i++) {
2548   4                                      WriteTW88(REG307, fdata);
2549   4                                      fdata++;
2550   4                              }
2551   3                              WriteTW88(REG300, ReadTW88(REG300) & 0xFE);              // bypass off
2552   3              
2553   3                              if ( fdata>60 ) fdata=1;
2554   3                              attr = ~attr;
2555   3                      }
2556   2                      WriteTW88Page(page );
2557   2              }
2558   1      
2559   1              else if ( !stricmp( argv[0], "FT3" )) {
2560   2                      //FontOSD test
2561   2                      WORD    OsdRamAddr;
2562   2                      DECLARE_LOCAL_page
2563   2                      BYTE    i;
2564   2                      static  BYTE    attr = 0x1a;
2565   2                      static  BYTE    fdata = 1;
2566   2      
2567   2                      ReadTW88Page(page);
2568   2                      while ( !RS_ready() ) {
2569   3                              WriteTW88Page(PAGE3_FOSD );
2570   3              
2571   3                              OsdRamAddr =  0x1fD;
2572   3              
2573   3                              //set address again for index data
2574   3              
2575   3                              FOsdRamSetAddress(OsdRamAddr);
2576   3                              WriteTW88(REG308, attr );                       // bgColor + fgColor in 1BPP
2577   3                      
2578   3                              WriteTW88(REG304, 0x0C ); // Auto Inc.
2579   3                              FOsdRamSetAddress(OsdRamAddr);
2580   3      
2581   3                              WriteTW88(REG300, ReadTW88(REG300) | 0x01);             // bypass on
2582   3                              for(i=0; i < 16; i++) {
2583   4                                      WriteTW88(REG307, fdata);
2584   4                                      fdata++;
2585   4                              }
2586   3                              delay1ms(300);
2587   3                              WriteTW88(REG300, ReadTW88(REG300) & 0xFE);              // bypass off
2588   3              
2589   3                              if ( fdata>60 ) fdata=1;
2590   3                              attr = ~attr;
2591   3                      }
2592   2                      WriteTW88Page(page );
2593   2              }
2594   1      
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 43  

2595   1              else if ( !stricmp( argv[0], "FT4" )) {
2596   2                      WORD    OsdRamAddr;
2597   2                      DECLARE_LOCAL_page
2598   2                      BYTE    i;
2599   2                      static  BYTE    attr = 0x1a;
2600   2                      static  BYTE    fdata = 1;
2601   2      
2602   2                      ReadTW88Page(page);
2603   2                      while ( !RS_ready() ) {
2604   3                              WriteTW88Page(PAGE3_FOSD );
2605   3              
2606   3                              OsdRamAddr =  0x1fD;
2607   3              
2608   3                              //set address again for index data
2609   3              
2610   3                              FOsdRamSetAddress(OsdRamAddr);
2611   3                              WriteTW88(REG308, attr );                       // bgColor + fgColor in 1BPP
2612   3                      
2613   3                              WriteTW88(REG304, 0x0C ); // Auto Inc.
2614   3                              FOsdRamSetAddress(OsdRamAddr);
2615   3              
2616   3                              WriteTW88(REG300, ReadTW88(REG300) | 0x01);             // bypass on
2617   3                              for(i=0; i < 16; i++) {
2618   4                                      WriteTW88(REG307, fdata);
2619   4                                      fdata++;
2620   4                              }
2621   3                              WriteTW88(REG304, 0x0D);                // change to FontRAM
2622   3                              WriteTW88(REG300, ReadTW88(REG300) & 0xFE);              // bypass off
2623   3              
2624   3                              if ( fdata>60 ) fdata=1;
2625   3                              attr = ~attr;
2626   3                      }
2627   2                      WriteTW88Page(page );
2628   2              }
2629   1      
2630   1              else if ( !stricmp( argv[0], "FT5" )) {
2631   2                      static  WORD    OsdRamAddr=0x1fd;
2632   2                      DECLARE_LOCAL_page
2633   2                      BYTE    i;
2634   2                      static  BYTE    attr = 0x1a;
2635   2                      static  BYTE    fdata = 1;
2636   2      
2637   2                      ReadTW88Page(page);
2638   2                      while ( !RS_ready() ) {
2639   3                              WriteTW88Page(PAGE3_FOSD );
2640   3              
2641   3                              //OsdRamAddr =  0x1fD;
2642   3              
2643   3                              //set address again for index data
2644   3              
2645   3                              WriteTW88(REG304, 0x00 );                       // Auto Inc OFF
2646   3                              FOsdRamSetAddress(OsdRamAddr);
2647   3                              delay1ms(1000);
2648   3                              WriteTW88(REG308, attr );                       // bgColor + fgColor in 1BPP
2649   3                      
2650   3                              WriteTW88(REG304, 0x0C ); // Auto Inc.
2651   3                              FOsdRamSetAddress(OsdRamAddr);
2652   3              
2653   3                              WriteTW88(REG300, ReadTW88(REG300) | 0x01);             // bypass on
2654   3                              delay1ms(1000);
2655   3                              for(i=0; i < 16; i++) {
2656   4                                      WriteTW88(REG307, fdata);
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 44  

2657   4                                      fdata++;
2658   4                                      OsdRamAddr++;
2659   4                              }
2660   3                              OsdRamAddr++;
2661   3                              WriteTW88(REG304, 0x0D);                // change to FontRAM
2662   3                              WriteTW88(REG300, ReadTW88(REG300) & 0xFE);              // bypass off
2663   3              
2664   3                              if ( fdata>60 ) fdata=1;
2665   3                              attr = ~attr;
2666   3                      }
2667   2                      WriteTW88Page(page );
2668   2              }
2669   1      
2670   1              else if ( !stricmp( argv[0], "FT6" )) {
2671   2                      static  WORD    OsdRamAddr=0x1fd;
2672   2                      DECLARE_LOCAL_page
2673   2                      BYTE    i;
2674   2                      static  BYTE    attr = 0x1a;
2675   2                      static  BYTE    fdata = 1;
2676   2      
2677   2                      ReadTW88Page(page);
2678   2                      WriteTW88Page(PAGE3_FOSD );
2679   2                      WriteTW88(REG300, ReadTW88(REG300) | 0x01);             // bypass on
2680   2                      WriteTW88(REG304, 0x0C );                       // Auto Inc OFF
2681   2                      while ( !RS_ready() ) {
2682   3                              WriteTW88Page(PAGE3_FOSD );
2683   3              
2684   3                              OsdRamAddr =  0xfD;
2685   3              
2686   3                              //set address again for index data
2687   3              
2688   3                              FOsdRamSetAddress(OsdRamAddr);
2689   3                              //delay1ms(500);
2690   3                              WaitVBlank(1);
2691   3                              WriteTW88(REG308, attr );                       // bgColor + fgColor in 1BPP
2692   3                      
2693   3                              FOsdRamSetAddress(OsdRamAddr);
2694   3              
2695   3                              for(i=0; i < 16; i++) {
2696   4                                      WriteTW88(REG307, fdata);
2697   4                                      fdata++;
2698   4                                      OsdRamAddr++;
2699   4                              }
2700   3                              OsdRamAddr++;
2701   3              
2702   3                              if ( fdata>60 ) fdata=1;
2703   3                              attr = ~attr;
2704   3                      }
2705   2                      WriteTW88Page(page );
2706   2              }
2707   1      #endif
2708   1              //==========================================
2709   1              // SpiOSD Test
2710   1              //==========================================
2711   1      #if 0
                      else if ( !stricmp( argv[0], "LUT0" )) {
                              BYTE    page, i;
              
                              ReadTW88Page(page);
              
                              WriteTW88Page(3 );
              
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 45  

                              // Win4 enable and OSD RAM set
                              WriteTW88(REG305, 0 );
                              WriteTW88(REG30B, 0 );
                              WriteTW88(REG30C, 0x3f );
                              WriteTW88(REG340, 0xcb );
                              WriteTW88(REG345, 0x01 );
                              WriteTW88(REG346, 0x10 );
              
              
                              // Enable OSD RAM
                              WriteTW88(REG300, 0x11 );
                              WriteTW88(REG305, 0 );
                              WriteTW88(REG306, 0 );
                              WriteTW88(REG304, 0 );
                              WriteTW88(REG307, 0 );
                              for ( i=0; i<16; i++ ) {
                                      FOsdRamSetAddress((WORD)i);     //WriteTW88(REG306, i );
                                      WriteTW88(REG307, 0 );
                                      WriteTW88(REG308, i );
                                      delay1ms(10);
                              }
              
              #if 0
                              // download Font
                              WriteTW88(REG300, 0x11 );
                              WriteTW88(REG304, 0x0d );
                              WriteTW88(REG_FOSD_CHEIGHT, 0x0d /* 26/2 */ );
                              WriteTW88(REG_FOSD_MUL_CON, 0x34 );
                              WriteTW88(REG309, 0x00 );
              
                              for ( i=0; i<13; i++ ) {
                                      WriteTW88(REG30A, 0x00 );
                                      WriteTW88(REG30A, 0x00 );
                                      WriteTW88(REG30A, 0xff );
                                      WriteTW88(REG30A, 0xff );
                              }
                              for ( i=0; i<13; i++ ) {
                                      WriteTW88(REG30A, 0x00 );
                                      WriteTW88(REG30A, 0xff );
                                      WriteTW88(REG30A, 0x00 );
                                      WriteTW88(REG30A, 0xff );
                              }
                              
                              color = 0;
                              for ( i=0; i<64; i++ ) {
                                      WriteTW88(REG30c, i );
                                      WriteTW88(REG30D, color>>8 );
                                      WriteTW88(REG30E, color );
              
                              }
              #endif
                              WriteTW88Page(page );
                      }
              
                      else if ( !stricmp( argv[0], "LUTF" )) {         // font download
                              BYTE    page, i;
              
                              ReadTW88Page(page);
              
                              WriteTW88Page(3 );
              
                              // download Font
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 46  

                              WriteTW88(REG300, 0x11 );
                              WriteTW88(REG304, 0x0d );
                              WriteTW88(REG305, 0x00 );
                              WriteTW88(REG309, 0x00 );
                              WriteTW88(REG30B, 0x00 );
                              WriteTW88(REG_FOSD_CHEIGHT, (0x1a >> 1) );       //?? 0x1A=26 
                              WriteTW88(REG_FOSD_MUL_CON, 0x34 );
                              WriteTW88(REG_FOSD_MADD3, 0x00 );
                              WriteTW88(REG_FOSD_MADD4, 0x00 );
              
                              for ( i=0; i<13; i++ ) {
                                      WriteTW88(REG30a, 0x00 );
                                      WriteTW88(REG30a, 0x00 );
                                      WriteTW88(REG30a, 0xff );
                                      WriteTW88(REG30a, 0xff );
                                      delay1ms( 10 );
                              }
                              for ( i=0; i<13; i++ ) {
                                      WriteTW88(REG30a, 0x00 );
                                      WriteTW88(REG30a, 0xff );
                                      WriteTW88(REG30a, 0x00 );
                                      WriteTW88(REG30a, 0xff );
                                      delay1ms( 10 );
                              }
                              for ( i=0; i<52; i++ ) {
                                      WriteTW88(REG30a, 0x33 );
                                      delay1ms( 2 );
                              }
              
                              WriteTW88Page(page );
                      }
              
                      else if ( !stricmp( argv[0], "LUTC" )) {         // clear = black
                              BYTE    page, i;
                              WORD    color;
              
                              ReadTW88Page(page);
              
                              WriteTW88Page(3 );
              
              
                              color = 0;
                              for ( i=0; i<64; i++ ) {
                                      WriteTW88(REG30c, i );
                                      WriteTW88(REG30d, color>>8 );
                                      WriteTW88(REG30e, color );
                              }
                              WriteTW88Page(page );
                      }
              
                      else if ( !stricmp( argv[0], "LUTB" )) {         // blue
                              BYTE    page, i;
                              WORD    color;
              
                              ReadTW88Page(page);
              
                              WriteTW88Page(3 );
              
              
                              color = 0;
                              for ( i=0; i<64; i++ ) {
                                      WriteTW88(REG30c, i );
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 47  

                                      WriteTW88(REG30d, color>>8 );
                                      WriteTW88(REG30e, color );
                                      if ( i%2 ) color ++;
                              }
                              WriteTW88Page(page );
                      }
              
                      else if ( !stricmp( argv[0], "LUTG" )) {         // blue
                              BYTE    page, i;
                              WORD    color;
              
                              ReadTW88Page(page);
              
                              WriteTW88Page(3 );
              
              
                              color = 0;
                              for ( i=0; i<64; i++ ) {
                                      WriteTW88(REG30c, i );
                                      WriteTW88(REG30d, color>>8 );
                                      WriteTW88(REG30e, color );
                                      color += 0x20;
                              }
                              WriteTW88Page(page );
                      }
              
                      else if ( !stricmp( argv[0], "LUTR" )) {         // red
                              BYTE    page, i;
                              WORD    color;
              
                              ReadTW88Page(page);
              
                              WriteTW88Page(3 );
              
              
                              color = 0;
                              for ( i=0; i<64; i++ ) {
                                      WriteTW88(REG30c, i );
                                      WriteTW88(REG30d, color>>8 );
                                      WriteTW88(REG30e, color );
                                      if ( i%2 ) color += 0x800;
                              }
                              WriteTW88Page(page );
                      }
              
                      else if ( !stricmp( argv[0], "LUTW" )) {         // white
                              BYTE    page, i;
                              WORD    color;
              
                              ReadTW88Page(page);
              
                              WriteTW88Page(3 );
              
              
                              color = 0;
                              for ( i=0; i<64; i++ ) {
                                      WriteTW88(REG30c, i );
                                      WriteTW88(REG30d, color>>8 );
                                      WriteTW88(REG30e, color );
                                      color += 0x20;
                                      if ( i%2 ) color += 0x801;
                              }
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 48  

                              WriteTW88Page(page );
                      }
              
                      else if ( !stricmp( argv[0], "SLUT0" )) {        // white
                              BYTE page;
                              ReadTW88Page(page);
              
                              WaitVBlank(1);
                              SpiOsdLoadLUT(3, 1, 0, 1024, 0xb0000);   //winno ?3
              
                              WriteTW88Page(page );
                      }
              
                      else if ( !stricmp( argv[0], "SLUT1" )) {        // white
                              BYTE page;
                              ReadTW88Page(page);
              
                              WaitVBlank(1);
                              SpiOsdLoadLUT( 3, 1, 256, 1024, 0xb0400); //winno ?3
              
                              WriteTW88Page(page );
                      }
              
                      else if ( !stricmp( argv[0], "SLUT2" )) {        // white
                              BYTE page, i;
                              ReadTW88Page(page);
              
                              i = 0;
                              while ( !RS_ready() ) {
                                      #if 0
                                      WaitVBlank(1);
                                      SpiOsdLoadLUT( 3, 1, 128, 512, 0xb0800); //winno ?3
                                      delay1ms(100);
                                      
                                      WaitVBlank(1);
                                      SpiOsdLoadLUT(3,  1, 128, 512, 0xb0a00); //winno ?3
                                      delay1ms(100);
                                      #endif
                                      WaitVBlank(1);
                                      SpiOsdLoadLUT(3,  1, 128+i++, 512, 0xb0c00);    //winno ? 3
                                      //WaitVBlank(1);
                                      //SpiOsdLoadLUT( 1, 128+i++, 512, 0xb0e00);
                                      i %= 128;
                              }
                              WriteTW88Page(page );
                      }
              #endif
2952   1      
2953   1              //---------------- TOUCH Debug -------------------------
2954   1      #ifdef SUPPORT_TOUCH
2955   1              else if( !stricmp( argv[0], "TOUCH" ) ) {
2956   2                      if ( argc == 2 ) {
2957   3                              if ( !stricmp( argv[1], "ON" ) ) {
2958   4                                      SFR_ET1 = 1;    //BK110531
2959   4                                      SetTouchAuto(1);
2960   4                                      Puts("\r\nTurn ON Touch Sense");
2961   4                              }
2962   3                              else if ( !stricmp( argv[1], "DATA" ) ) {
2963   4                                      PrintCalibData();
2964   4                              }
2965   3                              else {
2966   4                                      SetTouchAuto(0);
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 49  

2967   4                                      SFR_ET1 = 0;    //BK110531
2968   4                                      Puts("\r\nTurn OFF Touch Sense");
2969   4                              }
2970   3                      }
2971   2                      else {
2972   3                              GetTouch2();
2973   3                      }
2974   2              }
2975   1              else if( !stricmp( argv[0], "TSC_DEBUG" ) ) {
2976   2                      tsc_debug = 0;
2977   2                      if ( argc == 2 ) {
2978   3                              if ( !stricmp( argv[1], "ON" ) )
2979   3                                      tsc_debug = 1;
2980   3                      }
2981   2                      if(tsc_debug) {
2982   3                              SFR_ET1 = 0;    //disable touch timer
2983   3                      }
2984   2                      else {
2985   3                              InitTouch();
2986   3                      }
2987   2              }
2988   1              else if( !stricmp( argv[0], "TRACE" ) ) {
2989   2                      if ( argc == 2 ) {
2990   3                              if ( !stricmp( argv[1], "ON" ) ) {
2991   4                                      Puts("\r\nTurn ON Touch Trace");
2992   4                                      SFR_ET1 = 0;    //BK110531
2993   4                                      SetTraceAuto(1);
2994   4                              }
2995   3                              else {
2996   4                                      Puts("\r\nTurn OFF Touch Trace");
2997   4                                      SFR_ET1 = 1;    //BK110531
2998   4                                      SetTraceAuto(0);
2999   4                              }
3000   3                      }
3001   2                      else {
3002   3      //                      TraceTouch();
3003   3      //                      extern  bit FLAG_TOUCH;
3004   3                              extern  WORD    TouchX, TouchY, TouchZ1; //, AUX[4];
3005   3                              //extern        BYTE    /*CpuTouchChanged,*/ AUX_Changed[4];
3006   3                              BYTE    temp, atemp[4], i;
3007   3                              temp = CpuTouchChanged;
3008   3                              atemp[0] = CpuAUX0_Changed;
3009   3                              atemp[1] = CpuAUX1_Changed;
3010   3                              atemp[2] = CpuAUX2_Changed;
3011   3                              atemp[3] = CpuAUX3_Changed;
3012   3                              while ( !RS_ready() ) {
3013   4                                      delay1ms(500);
3014   4                                      if ( CpuTouchPressed ) {
3015   5                                              if (CpuTouchChanged != temp) {
3016   6                                                      Printf("\nTouchX: 0x%04x, TouchY: 0x%04x, Z1: 0x%04x", TouchX, TouchY, TouchZ1);
3017   6                                                      temp = CpuTouchChanged;
3018   6                                              }
3019   5                                      }
3020   4                                      if ( atemp[0] != CpuAUX0_Changed ) {
3021   5                                              Printf("\n0x%02bx - AUX[0]: 0x%04x",atemp[i], CpuAUX0);
3022   5                                              atemp[0] = CpuAUX0_Changed;
3023   5                                      }
3024   4                                      if ( atemp[1] != CpuAUX1_Changed ) {
3025   5                                              Printf("\n0x%02bx - AUX[1]: 0x%04x",atemp[i], CpuAUX1);
3026   5                                              atemp[1] = CpuAUX1_Changed;
3027   5                                      }
3028   4                                      if ( atemp[2] != CpuAUX2_Changed ) {
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 50  

3029   5                                              Printf("\n0x%02bx - AUX[2]: 0x%04x",atemp[i], CpuAUX2);
3030   5                                              atemp[2] = CpuAUX2_Changed;
3031   5                                      }
3032   4                                      if ( atemp[3] != CpuAUX3_Changed ) {
3033   5                                              Printf("\n0x%02bx - AUX[3]: 0x%04x",atemp[i], CpuAUX3);
3034   5                                              atemp[3] = CpuAUX3_Changed;
3035   5                                      }
3036   4                              }
3037   3                      }
3038   2              }
3039   1              else if(!stricmp( argv[0], "TCOUNT" ) ) {
3040   2                      CpuTouchSkipCount = 100;
3041   2                      if ( argc == 2 ) {
3042   3                              CpuTouchSkipCount = a2i(argv[1]);
3043   3                      }
3044   2              }
3045   1              else if( !stricmp( argv[0], "TDUMP" ) ) {
3046   2                      Puts("\r\nTouch Dump");
3047   2                      TouchDump();
3048   2              }
3049   1              
3050   1              //---------------- Touch Calibration -------------------------
3051   1              else if( !stricmp( argv[0], "CALIB" ) ) {
3052   2                      BYTE    n;
3053   2                      if ( argc == 2 ) {
3054   3                              n = a2h(argv[1]);
3055   3                              if ( n > 4 ) n = 4;
3056   3                              CalibTouch(n);
3057   3                      }
3058   2              }
3059   1      #endif
3060   1              //---------------- Delta RGB Panel Test -------------------------
3061   1      #ifdef SUPPORT_DELTA_RGB
              
                      else if( !stricmp( argv[0], "delta" ) ) {
                              extern  BYTE    SPI_ID;
                              if( argc==1 )   DeltaRGBPanelInit();
                              else {
                                      
                                      if( !stricmp( argv[1], "w" ) ) {
              
                                              WORD val;
                                              //val= Asc2Bin(argv[3])<<8 | Asc2Bin(argv[4]);
                                              val= a2h(argv[3]);
                                              Printf("\r\n SPI Write: Addr:%2x  Data:%4x", (WORD)a2h(argv[2]), val);
                                              WriteSPI(a2h(argv[2]), val );
                                      }
                                      else if( !stricmp( argv[1], "r" ) ) {
                                              WORD val;
                                              val = ReadSPI(a2h(argv[2]));
                                              Printf("\r\n SPI Read: Addr:%2x  Data:%4x", (WORD)a2h(argv[2]), val);
                                      }
                                      else if( !stricmp( argv[1], "c" ) ) {
                                              if ( argc == 3 ) 
                                                      SPI_ID = a2h(argv[2]) & 0xfc;
                                              Printf("\r\n SPI Device ID:%2bx", SPI_ID);
                                      }
                              }
                      }
                      else if( !stricmp( argv[0], "AUO" ) ) {
                              if( argc==1 )   Puts( "\r\nIncorrect commad - AUO r ii or AUO w ii ddd" );
                              else {
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 51  

                                      
                                      if( !stricmp( argv[1], "w" ) ) {
              
                                              WORD val;
                                              val= a2h(argv[3]);
                                              Printf("\r\n SPI Write: Addr:%2x  Data:%4x", (WORD)a2h(argv[2]), val);
                                              WriteAUO(a2h(argv[2]), val );
                                      }
                                      else if( !stricmp( argv[1], "r" ) ) {
                                              WORD val;
                                              val = ReadAUO(a2h(argv[2]));
                                              Printf("\r\n SPI Read: Addr:%2x  Data:%4x", (WORD)a2h(argv[2]), val);
                                      }
                              }
                      }
                      else if( !stricmp( argv[0], "AUO2" ) ) {
                              if( argc==1 )   Puts( "\r\nIncorrect commad - AUO2 r ii or AUO2 w ii ddd" );
                              else {
                                      
                                      BYTE val, addr;
                                      if( !stricmp( argv[1], "w" ) ) {
              
                                              addr = a2h( argv[2] );
                                              val= a2h( argv[3] );
                                              Printf("\r\n SPI Write: Addr:%02bx  Data:%02bx", addr, val);
                                              WriteAUO2( addr, val );
                                      }
                                      else if( !stricmp( argv[1], "r" ) ) {
                                              addr = a2h( argv[2] );
                                              val = ReadAUO2( addr );
                                              Printf("\r\n SPI Read: Addr:%02bx  Data:%02bx", addr, val);
                                      }
                              }
                      }
              #endif
3126   1      #ifdef EVB_30
3127   1              //---------------- HDMI -------------------
3128   1              //Read HDMI register
3129   1              else if( !stricmp( argv[0], "HDMI" ) ) {
3130   2                      //BYTE val[20];
3131   2                      //BYTE cnt = 1, i;
3132   2                      //if ( argc > 2 )
3133   2                      //      cnt     = a2h(argv[2]);
3134   2                      //if ( cnt > 20 )
3135   2                      //      cnt = 20;
3136   2                      //ReadI2C(I2CID_EP9351, a2h(argv[1]), val, cnt);
3137   2                      //for   (i=0; i<cnt; i++) 
3138   2                      //      Printf("\n%3bd %02bx", i, val[i]);
3139   2                      if(argc < 2) {
3140   3                              Printf(" init start avi timereg dnedid dnhdcp");
3141   3                      }
3142   2                      else if( !stricmp( argv[1], "init" )) {
3143   3                              Hdmi_SystemInit_EP9351();
3144   3                      }
3145   2                      else if( !stricmp( argv[1], "start" )) {
3146   3                              HdmiInitEp9351Chip();
3147   3                      }
3148   2                      else if( !stricmp( argv[1], "avi" )) {
3149   3                              DBG_PrintAviInfoFrame();
*** WARNING C206 IN LINE 3149 OF MONITOR.C: 'DBG_PrintAviInfoFrame': missing function-prototype
3150   3                      }
3151   2                      else if( !stricmp( argv[1], "timereg" )) {
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 52  

3152   3                              DBG_PrintTimingRegister();
*** WARNING C206 IN LINE 3152 OF MONITOR.C: 'DBG_PrintTimingRegister': missing function-prototype
3153   3                      }
3154   2                      else if( !stricmp( argv[1], "dump" )) {
3155   3                              DBG_DumpControlRegister();
*** WARNING C206 IN LINE 3155 OF MONITOR.C: 'DBG_DumpControlRegister': missing function-prototype
3156   3                      }
3157   2      #ifdef ON_CHIP_EDID_ENABLE
3158   2                      else if( !stricmp( argv[1], "dnedid" )) {
3159   3                              HdmiDownloadEdid(0);
3160   3                      }
3161   2      #endif
3162   2      #ifdef ON_CHIP_HDCP_ENABLE
3163   2                      else if( !stricmp( argv[1], "dnhdcp" )) {
3164   3                              HdmiDownloadDhcp(0);
3165   3                      }
3166   2      #endif
3167   2              }
3168   1      
3169   1      //      else if( !stricmp( argv[0], "HDINIT" ) ) {
3170   1      //#ifdef SUPPORT_HDMI_EP9351
3171   1      //              CheckAndSet_EP9351();
3172   1      //#endif
3173   1      //      }
3174   1      //      else if( !stricmp( argv[0], "HDINFO" ) ) {
3175   1      //              BYTE val[13];
3176   1      //              WORD tmp;
3177   1      //              ReadI2C(I2CID_EP9351, 0x3B, val, 13);
3178   1      //              if ( val[12] & 0x80 ) 
3179   1      //                      Puts("\nInterlace Video Signal");
3180   1      //              else
3181   1      //                      Puts("\nNON-Interlace Video Signal");
3182   1      //              tmp = val[1];           tmp <<= 8;              tmp += val[0];
3183   1      //              Printf("\nActive Pixels Per Line = %d", tmp ); 
3184   1      //              tmp = val[3];           tmp <<= 8;              tmp += val[2];
3185   1      //              Printf("\nHorizontal Front Porch = %d", tmp ); 
3186   1      //              tmp = val[5];           tmp <<= 8;              tmp += val[4];
3187   1      //              Printf("\nHorizontal Back Porch  = %d", tmp ); 
3188   1      //              tmp = val[7];           tmp <<= 8;              tmp += val[6];
3189   1      //              Printf("\nHorizontal Pulse Width = %d", tmp ); 
3190   1      //              tmp = val[9];           tmp <<= 8;              tmp += val[8];
3191   1      //              Printf("\nActive Lines Per Frame = %d", tmp ); 
3192   1      //              Printf("\nVertical Front Porch   = %bd", val[10] ); 
3193   1      //              Printf("\nVertical Back Porch    = %bd", val[11] ); 
3194   1      //              Printf("\nVertical Pulse Width   = %bd", val[12]&0x7f ); 
3195   1      //      }
3196   1      #endif
3197   1      
3198   1      #if 1
3199   1              //----<<TEST customer PARKGRID>>------------------------------------
3200   1              //before you call it, enable SPIOSD, update MCUSPICLK.
3201   1              else if( !stricmp( argv[0], "tgrid" ) ) {
3202   2                      extern void TestDParkGridAction(void);
3203   2                      TestDParkGridAction();
3204   2              }
3205   1              //BKTODO: Add "autogrid"
3206   1              else if( !stricmp( argv[0], "autogrid" ) ) {
3207   2                      extern void TestAutoDParkGridAction(BYTE positionX, BYTE positionY);
3208   2                      BYTE positionX, positionY;
3209   2      
3210   2                      if(argc==3) {
3211   3                              positionX = a2h(argv[1]);
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 53  

3212   3                              positionY = a2h(argv[2]);
3213   3                      }
3214   2                      else {
3215   3                              positionX = 22;
3216   3                              positionY = 5;
3217   3                      }
3218   2                      TestAutoDParkGridAction(positionX, positionY);
3219   2              }
3220   1              else if( !stricmp( argv[0], "stepgrid" ) ) {
3221   2                      extern void TestStepDParkGridAction(BYTE positionX, BYTE positionY);
3222   2                      BYTE positionX, positionY;
3223   2      
3224   2                      if(argc==3) {
3225   3                              positionX = a2h(argv[1]);
3226   3                              positionY = a2h(argv[2]);
3227   3                      }
3228   2                      else {
3229   3                              positionX = 22;
3230   3                              positionY = 5;
3231   3                      }
3232   2                      TestStepDParkGridAction(positionX, positionY);
3233   2              }
3234   1      #endif
3235   1              //----------------------------------------------------
3236   1              //make compiler happy.
3237   1              //Please, DO NOT EXECUTE
3238   1              //----------------------------------------------------  
3239   1              else if(!stricmp( argv[0], "compiler" )) {
3240   2      #ifndef SUPPORT_FOSD_MENU
3241   2                      extern void Dummy_FosdMenu_func(void);
3242   2                      extern void Dummy_FosdInitTable_func(void);
3243   2                      extern void Dummy_FosdDispInfo_func(void);
3244   2                      extern void Dummy_FosdString_func(void);
3245   2      #endif
3246   2      #ifdef SUPPORT_FOSD_MENU
                              extern BYTE CheckAndClearFOsd(void);
              #endif
3249   2      #if !defined(SUPPORT_DVI) && !defined(SUPPORT_HDMI_EP9351) && !defined(SUPPORT_HDMI_SiIRX)
3250   2                      extern void Dummy_DTV_func(void);
3251   2      #endif
3252   2      #ifndef MODEL_TW8835_EXTI2C
3253   2                      extern void Dummy_HOST_func(void);
3254   2      #endif
3255   2                      WORD wTemp;
3256   2      
3257   2      
3258   2                      wPuts("\nwPuts");
3259   2                      delay1s(1, __LINE__);
3260   2                      //----------------------
3261   2                      // main.c
3262   2                      //----------------------
3263   2      #ifdef CHIP_MANUAL_TEST
              //              InitSystem(1);
              #endif
3266   2                      //----------------------
3267   2                      // host.c
3268   2                      //----------------------
3269   2      #ifndef MODEL_TW8835_EXTI2C
3270   2                      Dummy_HOST_func();
3271   2      #endif
3272   2      
3273   2                      //----------------------
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 54  

3274   2                      // I2C
3275   2                      //--------------------
3276   2      #if !defined(EVB_30)
                              ReadI2C(0x00, 0x00, (BYTE *)&wValue, 1);
              #endif
3279   2      #if !defined(SUPPORT_HDMI_SiIRX)
3280   2                      WriteI2C(0x00, 0x00, (BYTE *)&wValue, 1);
3281   2      #endif
3282   2      #ifndef MODEL_TW8835_MASTER
3283   2                      CheckI2C(0x8A);
3284   2      #endif
3285   2      #if defined(PICO_GENERIC) || defined(EVB_10)
                              WriteSlowI2CByte(0x8A, 0x00, 0x00);
                              ReadSlowI2CByte(0x8A,0x00);
              #endif
3289   2                      ReadSlowI2C(0x8A, 0, (BYTE *)&wValue, 1);
3290   2                      WriteSlowI2C(0x8A, 0, (BYTE *)&wValue, 1);
3291   2      
3292   2      
3293   2                      //--------------------
3294   2                      // Scaler
3295   2                      //--------------------
3296   2                      //ScalerSetOutputFixedVline(OFF);
3297   2                      //ScalerSetFieldOffset(OFF);
3298   2                      //ScalerWriteXUpReg(0);
3299   2                      //ScalerReadXUpReg();
3300   2                      ScalerWriteXDownReg(0);
3301   2      #if defined(SUPPORT_PC) || defined(SUPPORT_DVI) || defined(SUPPORT_HDMI_EP9351) || defined(SUPPORT_HDMI_Si
             -IRX)
3302   2                      ScalerReadXDownReg();
3303   2      #endif
3304   2                      //ScalerSetHScaleReg(0,0);
3305   2                      //ScalerSetHScale_FULL(0); //internal   
3306   2                      //ScalerSetHScale_Panorama(0);  //internal
3307   2                      ScalerSetHScaleWithRatio(0,0);  
3308   2                      ScalerSetHScale(0);     
3309   2                      ScalerWriteVScaleReg(0);
3310   2                      ScalerReadVScaleReg();
3311   2                      ScalerSetVScaleWithRatio(0,0);
3312   2                      ScalerSetVScale(0);
3313   2                      ScalerPanoramaOnOff(OFF);
3314   2                      ScalerSetPanorama(0,0);
3315   2                      ScalerWriteLineBufferDelay(0);
3316   2                      ScalerReadLineBufferDelay();
3317   2                      ScalerSetLineBufferSize(0);
3318   2                      //ScalerSetLineBuffer(0,0);
3319   2                      //ScalerSetFPHSOutputPolarity(BYTE fInvert)
3320   2                      //ScalerWriteOutputHBlank(WORD length)
3321   2                      ScalerWriteHDEReg(0);
3322   2                      ScalerReadHDEReg();
3323   2                      ScalerCalcHDE();
3324   2                      ScalerReadOutputWidth();
3325   2                      //ScalerWriteOutputWidth(WORD width)
3326   2      
3327   2                      //ScalerSetHSyncPosLen(BYTE pos, BYTE len)
3328   2                      ScalerReadVDEReg();
3329   2                      ScalerWriteVDEReg(0);
3330   2                      //ScalerWriteOutputHeight(WORD height)
3331   2                      //ScalerReadOutputHeight();
3332   2      #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC) || defined(SUPPORT_DVI)
3333   2                      ScalerCalcVDE();
3334   2      #endif
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 55  

3335   2                      //ScalerSetVDEPosHeight(BYTE pos, WORD len)
3336   2                      //ScalerSetOutputWidthAndHeight(WORD width, WORD height)
3337   2                      //ScalerSetVSyncPosLen(BYTE pos, BYTE len)
3338   2                      ScalerWriteFreerunVtotal(0);
3339   2                      //ScalerReadFreerunVtotal();
3340   2                      ScalerCalcFreerunVtotal();
3341   2                      //ScalerSetVDEMask(BYTE top, BYTE bottom)
3342   2                      ScalerWriteFreerunHtotal(0);
3343   2                      //ScalerReadFreerunHtotal();
3344   2                      ScalerCalcFreerunHtotal();
3345   2                      ScalerSetFreerunManual(OFF);
3346   2                      //ScalerIsFreerunManual( void )
3347   2                      ScalerSetFreerunAutoManual(OFF,OFF);
3348   2                      ScalerSetMuteAutoManual(OFF,OFF);
3349   2                      ScalerSetMuteManual(OFF);
3350   2                      ScalerSetFreerunValue(ON);
3351   2                      ScalerCheckPanelFreerunValue();
3352   2                      //--------------------
3353   2                      // Measure
3354   2                      //--------------------
3355   2                      //void MeasSetWindow( WORD x, WORD y, WORD w, WORD h )
3356   2                      //void MeasSetField(BYTE field)
3357   2                      //void MeasLockData(BYTE fLock)
3358   2                      //BYTE MeasStartMeasure(void)
3359   2                      //BYTE MeasSetInputClkForHPeriodReg(BYTE fOn)
3360   2                      //MeasGetInputClkForHPeriodReg();
3361   2                      //void MeasSetNoiseMask(BYTE mask)
3362   2                      MeasSetErrTolerance(0);
3363   2                      MeasEnableChangedDetection(0);
3364   2                      MeasEnableDeMeasure(0);
3365   2                      MeasSetThreshold(0);
3366   2                      //DWORD MeasReadPhaseR(void)
3367   2                      //DWORD MeasReadPhaseG(void)
3368   2                      //DWORD MeasReadPhaseB(void)
3369   2                      //DWORD MeasReadPhaseRGB(void)
3370   2                      MeasGetVPeriod();
3371   2                      MeasGetHPeriod();
3372   2                      MeasGetHTotal(1);
3373   2                      //BYTE MeasGetHFreq(void)
3374   2                      MeasGetHSyncRiseToFallWidth();
3375   2                      //MeasGetHSyncRiseToHActiveEnd();
3376   2                      MeasGetVSyncRiseToFallWidth();
3377   2                      MeasGetVsyncRisePos();
3378   2                      MeasGetHActive(&wTemp);
3379   2                      //MesaGetHPol(void)
3380   2                      //#if defined(SUPPORT_PC) || defined(SUPPORT_DVI) || defined(SUPPORT_HDMI)
3381   2                      //WORD MeasGetDviDivider(void)
3382   2                      //#endif
3383   2                      
3384   2                      //MeasGetHActive2();
3385   2                      MeasGetVActive(&wTemp);
3386   2                      //MeasGetVActive2();
3387   2      #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC) || defined(SUPPORT_DVI) || defined(SUPPORT_HDMI_EP93
             -51) || defined(SUPPORT_HDMI_SiIRX)
3388   2                      MeasGetVPeriod27();
3389   2      #endif
3390   2                      //MeasGetVFreq();
3391   2      
3392   2                      //#if defined(SUPPORT_PC)       BYTE MeasRoundDownVFreqValue(BYTE vfreq)
3393   2                      //#ifdef SUPPORT_PC     void AutoTunePhase(void)
3394   2                      //#ifdef SUPPORT_PCvoid AutoTuneColor(void)
3395   2                      //#ifdef SUPPORT_PC MeasCheckVPulse(void)
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 56  

3396   2                      CheckMeasure();
3397   2                      // 
3398   2                      //--------------------
3399   2      #if !defined(SUPPORT_COMPONENT) && !defined(SUPPORT_PC)
              //              Dummy_VADC_func();
              #endif
3402   2      #if !defined(SUPPORT_DVI) && !defined(SUPPORT_HDMI_EP9351) && !defined(SUPPORT_HDMI_SiIRX) 
3403   2                      Dummy_DTV_func();
3404   2      #endif
3405   2      #ifndef SUPPORT_HDMI_EP9351
3406   2                      Dummy_HDMI_EP9351_func();
3407   2      #endif
3408   2                      //----------------------------
3409   2                      //Trick for Bank Code Segment
3410   2                      //----------------------------
3411   2      #ifndef SUPPORT_FOSD_MENU
3412   2                      Dummy_FosdMenu_func();
3413   2                      Dummy_FosdInitTable_func();
3414   2                      Dummy_FosdDispInfo_func();
3415   2                      Dummy_FosdString_func();
3416   2      #endif
3417   2      #ifdef SUPPORT_FOSD_MENU
                              CheckAndClearFOsd();
              #endif
3420   2      
3421   2      
3422   2      #ifndef SUPPORT_HDMI_EP9351
3423   2                      Dummy_DebugMsg_func();
3424   2      #endif
3425   2      
3426   2      
3427   2              }
3428   1              //----------------------------------------------------
3429   1              else {
3430   2                      Printf("\nInvalid command...");
3431   2              }
3432   1              Prompt();
3433   1      }
3434          
3435          //=============================================================================
3436          //  UART1. 57600bps 8Data 1Stop NoParity NoFlowControl
3437          //=============================================================================
3438          
3439          #ifdef SUPPORT_UART1
              BYTE *Mon1String = 0;
              void ProcessFinishMessage(void)
              {
                      Puts1("OK");
              }
              /**
              * monitor1
              *
              */
              
              void Monitor1(void)
              {
              #if 0
                      //test routine. - echo
                      BYTE    ch;
              
                      if( !RS1_ready() ) return;
                      ch = RS1_rx();                                  // get data
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 57  

                      RS1_tx(ch);                                             // echo back
                      RS_tx(ch);                                              // doublecheck at UART0
              #endif
              #if 1
                      if( Mon1String ) {
                              RS1_ungetch( *Mon1String++ );
                              if( *Mon1String==0 ) Mon1String = 0;
                      }
              
                      if( !Mon1GetCommand() ) return;
              
                      //---------------- Get TW8835 Info -------------------
                      if( !stricmp( argv1[0], "GE" ) ) {
                              BYTE cmd;
                              if(argc1 < 2)
                                      return;
                              cmd = a2h( argv1[1] );
                              switch(cmd) {
                              case 0x01:      //get FW revision
                                      //_outchar1((BYTE)(FWVER>>8));
                                      //_outchar1((BYTE)FWVER);
                                      Printf1("\n%02bx.%02bx",(BYTE)(FWVER>>8),(BYTE)FWVER);
                                      ProcessFinishMessage();
                                      break;
                              }       
                      }
                      //---------------- IR Key data -------------------
                      else if( !stricmp( argv1[0], "IR" ) ) {
                              BYTE RemoDataCode;
                              BYTE cmd;
                              BYTE value;
              
                              if(argc1 < 2)
                                      return;
                              cmd = a2h( argv1[1] );
                              switch(cmd) {
                              case 0x01:      RemoDataCode=REMO_STANDBY;      break;  //power
                              case 0x02:      RemoDataCode=REMO_CHNUP;        break;  //up
                              case 0x03:      RemoDataCode=REMO_CHNDN;        break;  //down
                              case 0x04:      RemoDataCode=REMO_VOLDN;        break;  //left
                              case 0x05:      RemoDataCode=REMO_VOLUP;        break;  //right
                              case 0x06:      RemoDataCode=REMO_MENU;         break;  //enter
                              case 0x07:      RemoDataCode=REMO_MUTE;         break;  //mute
                              case 0x08:      RemoDataCode=REMO_INPUT;        break;  //source
                              case 0x09:      RemoDataCode=REMO_SELECT;       break;  //set
                              case 0x0A:      RemoDataCode=REMO_EXIT;         break;  //end
                              case 0x0B:      BackLightUp();  ProcessFinishMessage(); return; //light up
                              case 0x0C:      BackLightDown(); ProcessFinishMessage();        return; //light down
                              case 0x0D:      RemoDataCode=REMO_TTXRED;       break;  //function key1: define to Display "All RED"
                              case 0x0E:      RemoDataCode=REMO_TTXGREEN;     break;  //function key2: define to Display "All Green"
                              case 0x0F:      RemoDataCode=REMO_TTXCYAN;      break;  //function key3: define to Display "All Blue"
                              case 0x1F:      
                                      value = 25; //a2h( argv1[2] );
                                      ImgAdjSetBrightnessY(value);
                                      break;  //test
                              case 0x20:      
                                      value = 35; //a2h( argv1[2] );
                                      ImgAdjSetContrastY(value);
                                      break;  //test
                              default:        RemoDataCode = 0;                       break;
                              }
                              if(RemoDataCode) {
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 58  

                                      ActionRemo(RemoDataCode,0);
                                      ProcessFinishMessage();
                              }
                      }
                      //---------------- Read data from EEPROM -------------------
                      else if( !stricmp( argv1[0], "RE" ) ) {
                              BYTE index;
                              if(argc1 < 2)
                                      return;
                              index = a2h( argv1[1] );
                              if(index >= EE_MAX_INDEX)
                                      return;
                              Printf1("\n%02bx",EE_Read(index));
                              ProcessFinishMessage();
                      }
                      //---------------- Write data to EEPROM -------------------
                      else if( !stricmp( argv1[0], "WE" ) ) {
                              BYTE index,dat;
                              if(argc1 < 3)
                                      return;
              
                              index = a2h( argv1[1] );
                              if(index >= EE_MAX_INDEX)
                                      return;
                              dat = a2h( argv1[2] );
                              
                              EE_Write(index, dat);
                              ProcessFinishMessage();
                      }
                      //---------------- Read data from audio -------------------
                      else if( !stricmp( argv1[0], "RA" ) ) {
                              if(argc1 < 2)
                                      return;
                      }
                      //---------------- Read data to audio amplifier -------------------
                      else if( !stricmp( argv1[0], "WA" ) ) {
                              if(argc1 < 2)
                                      return;
                      }
                      //---------------- Help -----------------------------
                      else if( !stricmp( argv1[0], "H" ) || !stricmp( argv1[0], "HELP" ) || !stricmp( argv1[0], "?" ) ) {
                              Mon1Help();
                              ProcessFinishMessage();
                      }
                      //----------------------------------------------------
                      else {
                              Printf1("\nInvalid command...");
                      }
                      Prompt1();
              
              #endif
              }
              #endif
3573          
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 59  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0280 (BEGIN)
0000         L?0641:
0000 A3                INC     DPTR
0001         L?0642:
0001 F0                MOVX    @DPTR,A
0002         L?0643:
0002 900000      R     MOV     DPTR,#argv+03H
0005         L?0644:
0005 E0                MOVX    A,@DPTR
0006 FB                MOV     R3,A
0007 A3                INC     DPTR
0008 E0                MOVX    A,@DPTR
0009 FA                MOV     R2,A
000A A3                INC     DPTR
000B E0                MOVX    A,@DPTR
000C F9                MOV     R1,A
000D 22                RET     
000E         L?0645:
000E         L?0646:
000E 900000      E     MOV     DPTR,#?_stricmp?BYTE+03H
0011 74FF              MOV     A,#0FFH
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 22                RET     
0016         L?0648:
0016         L?0649:
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 E500        E     MOV     A,regTW88+01H
001A 2408              ADD     A,#08H
001C F582              MOV     DPL,A
001E E500        E     MOV     A,regTW88
0020 3403              ADDC    A,#03H
0022 F583              MOV     DPH,A
0024 EF                MOV     A,R7
0025         L?0650:
0025 F0                MOVX    @DPTR,A
0026         L?0651:
0026 E500        E     MOV     A,regTW88+01H
0028 2404              ADD     A,#04H
002A         L?0652:
002A F582              MOV     DPL,A
002C E500        E     MOV     A,regTW88
002E 3403              ADDC    A,#03H
0030 F583              MOV     DPH,A
0032 22                RET     
0033         L?0653:
0033 900000      R     MOV     DPTR,#MonIndex
0036 E0                MOVX    A,@DPTR
0037 900000      R     MOV     DPTR,#MonPage
003A         L?0654:
003A FF                MOV     R7,A
003B         L?0655:
003B E0                MOVX    A,@DPTR
003C FE                MOV     R6,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F 4F                ORL     A,R7
0040         L?0656:
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 60  

0040 2500        E     ADD     A,regTW88+01H
0042         L?0657:
0042 F582              MOV     DPL,A
0044 E500        E     MOV     A,regTW88
0046 3E                ADDC    A,R6
0047 F583              MOV     DPH,A
0049 22                RET     
004A         L?0658:
004A F0                MOVX    @DPTR,A
004B         L?0659:
004B E500        E     MOV     A,regTW88+01H
004D 24FF              ADD     A,#0FFH
004F         L?0660:
004F F582              MOV     DPL,A
0051 E4                CLR     A
0052 3500        E     ADDC    A,regTW88
0054 F583              MOV     DPH,A
0056 E0                MOVX    A,@DPTR
0057 22                RET     
0058         L?0664:
0058 7BFF              MOV     R3,#0FFH
005A 7A00        R     MOV     R2,#HIGH ?SC_238
005C 7900        R     MOV     R1,#LOW ?SC_238
005E         L?0665:
005E E0                MOVX    A,@DPTR
005F 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0062 F0                MOVX    @DPTR,A
0063 900000      R     MOV     DPTR,#MonIndex
0066 E0                MOVX    A,@DPTR
0067 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
006A         L?0666:
006A F0                MOVX    @DPTR,A
006B 900000      R     MOV     DPTR,#MonRdata
006E E0                MOVX    A,@DPTR
006F 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
0072 F0                MOVX    @DPTR,A
0073 22                RET     
0074         L?0667:
0074         L?0668:
0074 900000      R     MOV     DPTR,#argc
0077 E0                MOVX    A,@DPTR
0078 C3                CLR     C
0079 9402              SUBB    A,#02H
007B 22                RET     
007C         L?0670:
007C         L?0671:
007C 900000      R     MOV     DPTR,#MonAddress
007F         L?0672:
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 900000      R     MOV     DPTR,#MonIndex
0084 E0                MOVX    A,@DPTR
0085 FD                MOV     R5,A
0086 22                RET     
0087         L?0673:
0087 7BFF              MOV     R3,#0FFH
0089         L?0674:
0089 900000      R     MOV     DPTR,#i
008C         L?0675:
008C E0                MOVX    A,@DPTR
008D 2400        R     ADD     A,#LOW atemp
008F F582              MOV     DPL,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 61  

0091 E4                CLR     A
0092 3400        R     ADDC    A,#HIGH atemp
0094 F583              MOV     DPH,A
0096 E0                MOVX    A,@DPTR
0097 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
009A F0                MOVX    @DPTR,A
009B 22                RET     
009C         L?0676:
009C         L?0677:
009C 900000      R     MOV     DPTR,#ToMonIndex
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 900000      R     MOV     DPTR,#i
00A4 E0                MOVX    A,@DPTR
00A5 FC                MOV     R4,A
00A6 A3                INC     DPTR
00A7 E0                MOVX    A,@DPTR
00A8 FD                MOV     R5,A
00A9 D3                SETB    C
00AA 9F                SUBB    A,R7
00AB EC                MOV     A,R4
00AC 9400              SUBB    A,#00H
00AE 22                RET     
00AF         L?0678:
00AF 7A00        R     MOV     R2,#HIGH ?SC_170
00B1 7900        R     MOV     R1,#LOW ?SC_170
00B3         L?0679:
00B3 7BFF              MOV     R3,#0FFH
00B5         L?0680:
00B5 900000      R     MOV     DPTR,#MonIndex
00B8 E0                MOVX    A,@DPTR
00B9 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
00BC F0                MOVX    @DPTR,A
00BD 22                RET     
00BE         L?0683:
00BE 900000      R     MOV     DPTR,#MonPage
00C1 F0                MOVX    @DPTR,A
00C2 A3                INC     DPTR
00C3 E4                CLR     A
00C4 F0                MOVX    @DPTR,A
00C5         L?0684:
00C5 900000      R     MOV     DPTR,#MonIndex
00C8 E0                MOVX    A,@DPTR
00C9 FF                MOV     R7,A
00CA 900000      R     MOV     DPTR,#i
00CD E4                CLR     A
00CE F0                MOVX    @DPTR,A
00CF A3                INC     DPTR
00D0 EF                MOV     A,R7
00D1 F0                MOVX    @DPTR,A
00D2 22                RET     
00D3         L?0685:
00D3         L?0686:
00D3 D3                SETB    C
00D4 900000      R     MOV     DPTR,#cnt+01H
00D7 E0                MOVX    A,@DPTR
00D8 9400              SUBB    A,#00H
00DA 900000      R     MOV     DPTR,#cnt
00DD E0                MOVX    A,@DPTR
00DE 6480              XRL     A,#080H
00E0 9480              SUBB    A,#080H
00E2 22                RET     
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 62  

00E3         L?0687:
00E3         L?0688:
00E3 7400        R     MOV     A,#LOW monstr
00E5 2E                ADD     A,R6
00E6         L?0689:
00E6 F582              MOV     DPL,A
00E8 E4                CLR     A
00E9 3400        R     ADDC    A,#HIGH monstr
00EB F583              MOV     DPH,A
00ED 22                RET     
00EE         L?0693:
00EE 900000      R     MOV     DPTR,#MonPage
00F1         L?0694:
00F1 FD                MOV     R5,A
00F2 E0                MOVX    A,@DPTR
00F3 FC                MOV     R4,A
00F4 A3                INC     DPTR
00F5 E0                MOVX    A,@DPTR
00F6 4D                ORL     A,R5
00F7         L?0695:
00F7 2500        E     ADD     A,regTW88+01H
00F9 F582              MOV     DPL,A
00FB E500        E     MOV     A,regTW88
00FD 3C                ADDC    A,R4
00FE F583              MOV     DPH,A
0100 22                RET     
0101         L?0696:
0101         L?0697:
0101 E0                MOVX    A,@DPTR
0102 04                INC     A
0103 F0                MOVX    @DPTR,A
0104 900000      R     MOV     DPTR,#i
0107 E0                MOVX    A,@DPTR
0108 04                INC     A
0109 F0                MOVX    @DPTR,A
010A E0                MOVX    A,@DPTR
010B 22                RET     
010C         L?0698:
010C 7BFF              MOV     R3,#0FFH
010E         L?0699:
010E E0                MOVX    A,@DPTR
010F FF                MOV     R7,A
0110 A3                INC     DPTR
0111 E0                MOVX    A,@DPTR
0112 CF                XCH     A,R7
0113         L?0700:
0113 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0116 F0                MOVX    @DPTR,A
0117 A3                INC     DPTR
0118 EF                MOV     A,R7
0119 22                RET     
011A         L?0701:
011A         L?0702:
011A 900000      R     MOV     DPTR,#argc
011D E0                MOVX    A,@DPTR
011E C3                CLR     C
011F 9403              SUBB    A,#03H
0121 22                RET     
0122         L?0703:
0122         L?0704:
0122 900000      E     MOV     DPTR,#InputMain
0125 74FF              MOV     A,#0FFH
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 63  

0127 F0                MOVX    @DPTR,A
0128 22                RET     
0129         L?0707:
0129         L?0708:
0129 900000      R     MOV     DPTR,#MonPage
012C         L?0709:
012C 7F00              MOV     R7,#00H
012E FE                MOV     R6,A
012F F0                MOVX    @DPTR,A
0130 A3                INC     DPTR
0131 EF                MOV     A,R7
0132 F0                MOVX    @DPTR,A
0133 22                RET     
0134         L?0711:
0134         L?0712:
0134 8F82              MOV     DPL,R7
0136 758300            MOV     DPH,#00H
0139 020000      E     LJMP    ?C?CLDOPTR
013C         L?0713:
013C F0                MOVX    @DPTR,A
013D 7A00        R     MOV     R2,#HIGH ?SC_261
013F 7900        R     MOV     R1,#LOW ?SC_261
0141 900000      R     MOV     DPTR,#Slave
0144         L?0714:
0144 7BFF              MOV     R3,#0FFH
0146 E0                MOVX    A,@DPTR
0147 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
014A 22                RET     
014B         L?0717:
014B F0                MOVX    @DPTR,A
014C 900000      R     MOV     DPTR,#MonIndex
014F E0                MOVX    A,@DPTR
0150 04                INC     A
0151 F0                MOVX    @DPTR,A
0152 900000      R     MOV     DPTR,#cnt+01H
0155 E0                MOVX    A,@DPTR
0156 24FF              ADD     A,#0FFH
0158 F0                MOVX    @DPTR,A
0159 900000      R     MOV     DPTR,#cnt
015C E0                MOVX    A,@DPTR
015D 34FF              ADDC    A,#0FFH
015F F0                MOVX    @DPTR,A
0160 22                RET     
0161         L?0718:
0161         L?0719:
0161 900000      R     MOV     DPTR,#i
0164 E0                MOVX    A,@DPTR
0165 04                INC     A
0166 F0                MOVX    @DPTR,A
0167 22                RET     
0168         L?0720:
0168         L?0721:
0168 E0                MOVX    A,@DPTR
0169 FF                MOV     R7,A
016A E500        E     MOV     A,regTW88+01H
016C 2407              ADD     A,#07H
016E 22                RET     
016F         L?0724:
016F 900000      R     MOV     DPTR,#max
0172 E0                MOVX    A,@DPTR
0173 FE                MOV     R6,A
0174 A3                INC     DPTR
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 64  

0175 E0                MOVX    A,@DPTR
0176 FF                MOV     R7,A
0177 C3                CLR     C
0178 900000      R     MOV     DPTR,#i+01H
017B E0                MOVX    A,@DPTR
017C 9F                SUBB    A,R7
017D 900000      R     MOV     DPTR,#i
0180 E0                MOVX    A,@DPTR
0181 9E                SUBB    A,R6
0182 22                RET     
0183         L?0725:
0183         L?0726:
0183 7BFF              MOV     R3,#0FFH
0185 7A00        R     MOV     R2,#HIGH ?SC_49
0187 7900        R     MOV     R1,#LOW ?SC_49
0189 22                RET     
018A         L?0727:
018A         L?0728:
018A F582              MOV     DPL,A
018C E500        E     MOV     A,regTW88
018E 3404              ADDC    A,#04H
0190 F583              MOV     DPH,A
0192 EF                MOV     A,R7
0193 F0                MOVX    @DPTR,A
0194 22                RET     
0195         L?0730:
0195         L?0731:
0195 900000      R     MOV     DPTR,#MonWdata
0198 E0                MOVX    A,@DPTR
0199 FD                MOV     R5,A
019A 900000      R     MOV     DPTR,#MonIndex
019D E0                MOVX    A,@DPTR
019E 22                RET     
019F         L?0732:
019F         L?0733:
019F E4                CLR     A
01A0 900000      R     MOV     DPTR,#i
01A3 F0                MOVX    @DPTR,A
01A4 A3                INC     DPTR
01A5 22                RET     
01A6         L?0734:
01A6         L?0735:
01A6 900000      R     MOV     DPTR,#i+01H
01A9 E0                MOVX    A,@DPTR
01AA 04                INC     A
01AB F0                MOVX    @DPTR,A
01AC 22                RET     
01AD         L?0736:
01AD         L?0737:
01AD 900000      R     MOV     DPTR,#OsdRamAddr
01B0 04                INC     A
01B1 F0                MOVX    @DPTR,A
01B2 A3                INC     DPTR
01B3 74FD              MOV     A,#0FDH
01B5 F0                MOVX    @DPTR,A
01B6 22                RET     
01B7         L?0738:
01B7         L?0739:
01B7 E0                MOVX    A,@DPTR
01B8 4401              ORL     A,#01H
01BA F0                MOVX    @DPTR,A
01BB E4                CLR     A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 65  

01BC 900000      R     MOV     DPTR,#i
01BF F0                MOVX    @DPTR,A
01C0 22                RET     
01C1         L?0741:
01C1 7A00        R     MOV     R2,#HIGH ?SC_140
01C3 7900        R     MOV     R1,#LOW ?SC_140
01C5 EE                MOV     A,R6
01C6         L?0742:
01C6 7BFF              MOV     R3,#0FFH
01C8 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
01CB F0                MOVX    @DPTR,A
01CC 22                RET     
01CD         L?0743:
01CD 75F003            MOV     B,#03H
01D0 A4                MUL     AB
01D1 2400        R     ADD     A,#LOW argv
01D3 F582              MOV     DPL,A
01D5 E4                CLR     A
01D6 3400        R     ADDC    A,#HIGH argv
01D8 F583              MOV     DPH,A
01DA 22                RET     
01DB         L?0744:
01DB         L?0745:
01DB 850082      E     MOV     DPL,regTW88+01H
01DE 850083      E     MOV     DPH,regTW88
01E1 A3                INC     DPTR
01E2 A3                INC     DPTR
01E3 22                RET     
01E4         L?0746:
01E4 7B01              MOV     R3,#01H
01E6 7A00        R     MOV     R2,#HIGH wValue
01E8 7900        R     MOV     R1,#LOW wValue
01EA 7401              MOV     A,#01H
01EC F0                MOVX    @DPTR,A
01ED 22                RET     
01EE         L?0748:
01EE AF01              MOV     R7,AR1
01F0 900000      R     MOV     DPTR,#MonIndex
01F3 E0                MOVX    A,@DPTR
01F4 FD                MOV     R5,A
01F5 900000      R     MOV     DPTR,#MonWdata
01F8 E0                MOVX    A,@DPTR
01F9 FB                MOV     R3,A
01FA 22                RET     
01FB         L?0749:
01FB         L?0750:
01FB 900000      R     MOV     DPTR,#i
01FE E0                MOVX    A,@DPTR
01FF 04                INC     A
0200 F0                MOVX    @DPTR,A
0201 22                RET     
0202         L?0751:
0202 900000      R     MOV     DPTR,#incnt
0205 E0                MOVX    A,@DPTR
0206 FF                MOV     R7,A
0207 900000      R     MOV     DPTR,#i
020A E0                MOVX    A,@DPTR
020B FE                MOV     R6,A
020C C3                CLR     C
020D 9F                SUBB    A,R7
020E 22                RET     
020F         L?0752:
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 66  

020F         L?0753:
020F E4                CLR     A
0210 F0                MOVX    @DPTR,A
0211 A3                INC     DPTR
0212 7432              MOV     A,#032H
0214 F0                MOVX    @DPTR,A
0215 22                RET     
0216         L?0754:
0216         L?0755:
0216 E4                CLR     A
0217 F0                MOVX    @DPTR,A
0218 A3                INC     DPTR
0219 740A              MOV     A,#0AH
021B F0                MOVX    @DPTR,A
021C 22                RET     
021D         L?0756:
021D         L?0757:
021D 900000      R     MOV     DPTR,#argc
0220 E0                MOVX    A,@DPTR
0221 6402              XRL     A,#02H
0223 22                RET     
0224         L?0760:
0224         L?0761:
0224 900000      R     MOV     DPTR,#MonRdata
0227 E0                MOVX    A,@DPTR
0228 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
022B 22                RET     
022C         L?0762:
022C 900000      R     MOV     DPTR,#i
022F E0                MOVX    A,@DPTR
0230 2400        R     ADD     A,#LOW monstr
0232 F9                MOV     R1,A
0233 E4                CLR     A
0234 3400        R     ADDC    A,#HIGH monstr
0236 FA                MOV     R2,A
0237 22                RET     
0238         L?0767:
0238 900000      R     MOV     DPTR,#positionX
023B 7416              MOV     A,#016H
023D F0                MOVX    @DPTR,A
023E A3                INC     DPTR
023F 7405              MOV     A,#05H
0241 F0                MOVX    @DPTR,A
0242 22                RET     
0243         L?0768:
0243         L?0769:
0243 900000      R     MOV     DPTR,#MonAddress
0246 E0                MOVX    A,@DPTR
0247 648A              XRL     A,#08AH
0249 22                RET     
024A         L?0770:
024A 900000      R     MOV     DPTR,#MonPage
024D E0                MOVX    A,@DPTR
024E 4C                ORL     A,R4
024F FE                MOV     R6,A
0250 A3                INC     DPTR
0251 E0                MOVX    A,@DPTR
0252 4D                ORL     A,R5
0253 22                RET     
0254         L?0771:
0254         L?0772:
0254 900000      R     MOV     DPTR,#i
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 67  

0257 E0                MOVX    A,@DPTR
0258 04                INC     A
0259 F0                MOVX    @DPTR,A
025A 22                RET     
025B         L?0773:
025B 7401              MOV     A,#01H
025D F0                MOVX    @DPTR,A
025E A3                INC     DPTR
025F EA                MOV     A,R2
0260 F0                MOVX    @DPTR,A
0261 A3                INC     DPTR
0262 E9                MOV     A,R1
0263 F0                MOVX    @DPTR,A
0264 22                RET     
0265         L?0774:
0265 F0                MOVX    @DPTR,A
0266 900000      R     MOV     DPTR,#argc
0269 E0                MOVX    A,@DPTR
026A 900000      R     MOV     DPTR,#last_argc
026D F0                MOVX    @DPTR,A
026E 22                RET     
026F         L?0775:
026F FF                MOV     R7,A
0270 E5F0              MOV     A,B
0272 3404              ADDC    A,#04H
0274 FE                MOV     R6,A
0275 E500        E     MOV     A,regTW88+01H
0277 2F                ADD     A,R7
0278 22                RET     
             ; FUNCTION Com0280 (END)

             ; FUNCTION Prompt (BEGIN)
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 431
0000 900000      R     MOV     DPTR,#MonAddress
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 7BFF              MOV     R3,#0FFH
0007 B48A06            CJNE    A,#08AH,?C0001
                                           ; SOURCE LINE # 432
000A 7A00        R     MOV     R2,#HIGH ?SC_0
000C 7900        R     MOV     R1,#LOW ?SC_0
000E 8008              SJMP    ?C0559
0010         ?C0001:
                                           ; SOURCE LINE # 435
0010 7A00        R     MOV     R2,#HIGH ?SC_17
0012 7900        R     MOV     R1,#LOW ?SC_17
0014 900000      R     MOV     DPTR,#MonAddress
0017 E0                MOVX    A,@DPTR
0018         ?C0559:
0018 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
001B F0                MOVX    @DPTR,A
001C 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 436
001F         ?C0003:
001F 22                RET     
             ; FUNCTION Prompt (END)

             ; FUNCTION _Mon_tx (BEGIN)
                                           ; SOURCE LINE # 456
;---- Variable 'ch' assigned to Register 'R7' ----
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 68  

                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
0000 020000      E     LJMP    _RS_tx
             ; FUNCTION _Mon_tx (END)

             ; FUNCTION _SetMonAddress (BEGIN)
                                           ; SOURCE LINE # 473
;---- Variable 'addr' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
0000 900000      R     MOV     DPTR,#MonAddress
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 476
0005 22                RET     
             ; FUNCTION _SetMonAddress (END)

             ; FUNCTION MonReadI2CByte (BEGIN)
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 514
0000 120000      R     LCALL   L?0667
0003 4057              JC      ?C0006
                                           ; SOURCE LINE # 516
;---- Variable 'len' assigned to Register 'R7' ----
0005 E4                CLR     A
0006 FF                MOV     R7,A
0007         ?C0007:
                                           ; SOURCE LINE # 517
0007 120000      R     LCALL   L?0643
000A 120000      R     LCALL   L?0711
000D 6005              JZ      ?C0008
                                           ; SOURCE LINE # 518
000F         ?C0010:
000F         ?C0009:
000F 0F                INC     R7
0010 EF                MOV     A,R7
0011 B40AF3            CJNE    A,#0AH,?C0007
0014         ?C0008:
                                           ; SOURCE LINE # 519
0014 EF                MOV     A,R7
0015 D3                SETB    C
0016 9402              SUBB    A,#02H
0018 4035              JC      ?C0011
                                           ; SOURCE LINE # 520
001A 120000      R     LCALL   L?0643
001D 120000      E     LCALL   _a2h
0020 900000      R     MOV     DPTR,#MonPage
0023 EE                MOV     A,R6
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
0028 900000      R     MOV     DPTR,#MonPage
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F 120000      R     LCALL   L?0656
0032 E0                MOVX    A,@DPTR
0033 900000      R     MOV     DPTR,#MonRdata
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 69  

0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 522
0037 300072      R     JNB     echo,?C0013
                                           ; SOURCE LINE # 523
003A 7BFF              MOV     R3,#0FFH
003C 7A00        R     MOV     R2,#HIGH ?SC_30
003E 7900        R     MOV     R1,#LOW ?SC_30
0040 900000      R     MOV     DPTR,#MonPage
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 EE                MOV     A,R6
0047 120000      R     LCALL   L?0700
004A 120000      R     LCALL   L?0666
004D 8010              SJMP    ?C0560
                                           ; SOURCE LINE # 525
004F         ?C0011:
                                           ; SOURCE LINE # 527
004F 120000      R     LCALL   L?0643
0052 120000      E     LCALL   _a2h
0055 900000      R     MOV     DPTR,#MonIndex
0058 EF                MOV     A,R7
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
005A 8006              SJMP    ?C0014
005C         ?C0006:
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
005C 120000      R     LCALL   L?0725
005F         ?C0560:
005F 020000      E     LJMP    _Printf
                                           ; SOURCE LINE # 532
0062         ?C0014:
                                           ; SOURCE LINE # 538
0062 900000      R     MOV     DPTR,#MonAddress
0065 E0                MOVX    A,@DPTR
0066 FD                MOV     R5,A
0067 648A              XRL     A,#08AH
0069 7019              JNZ     ?C0015
                                           ; SOURCE LINE # 539
006B 120000      R     LCALL   L?0659
006E 900000      R     MOV     DPTR,#MonPage
0071 120000      R     LCALL   L?0709
                                           ; SOURCE LINE # 540
0074 900000      R     MOV     DPTR,#MonIndex
0077 E0                MOVX    A,@DPTR
0078 FB                MOV     R3,A
0079 EB                MOV     A,R3
007A 120000      R     LCALL   L?0656
007D E0                MOVX    A,@DPTR
007E 900000      R     MOV     DPTR,#MonRdata
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
0082 800F              SJMP    ?C0016
0084         ?C0015:
                                           ; SOURCE LINE # 546
0084 AF05              MOV     R7,AR5
0086 900000      R     MOV     DPTR,#MonIndex
0089 E0                MOVX    A,@DPTR
008A FD                MOV     R5,A
008B 120000      E     LCALL   _ReadSlowI2CByte
008E 900000      R     MOV     DPTR,#MonRdata
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 70  

0091 EF                MOV     A,R7
0092 F0                MOVX    @DPTR,A
0093         ?C0016:
                                           ; SOURCE LINE # 547
0093 30000E      R     JNB     echo,?C0017
                                           ; SOURCE LINE # 548
0096 7A00        R     MOV     R2,#HIGH ?SC_78
0098 7900        R     MOV     R1,#LOW ?SC_78
009A 120000      R     LCALL   L?0679
009D 120000      R     LCALL   L?0760
00A0 F0                MOVX    @DPTR,A
00A1 120000      E     LCALL   _Printf
00A4         ?C0017:
                                           ; SOURCE LINE # 550
00A4 900000      R     MOV     DPTR,#MonRdata
00A7 E0                MOVX    A,@DPTR
00A8 900000      R     MOV     DPTR,#MonWdata
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 551
00AC         ?C0013:
00AC 22                RET     
             ; FUNCTION MonReadI2CByte (END)

             ; FUNCTION MonWriteI2CByte (BEGIN)
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 613
                                           ; SOURCE LINE # 646
0000 120000      R     LCALL   L?0701
0003 5006              JNC     ?C0018
                                           ; SOURCE LINE # 647
0005 120000      R     LCALL   L?0725
0008 020000      R     LJMP    ?C0562
                                           ; SOURCE LINE # 649
000B         ?C0018:
                                           ; SOURCE LINE # 650
000B 120000      R     LCALL   L?0643
000E 120000      E     LCALL   _a2h
0011 900000      R     MOV     DPTR,#MonIndex
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 651
0016 900000      R     MOV     DPTR,#argv+06H
0019 120000      R     LCALL   L?0644
001C 120000      E     LCALL   _a2h
001F 900000      R     MOV     DPTR,#MonWdata
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 654
;---- Variable 'len' assigned to Register 'R7' ----
0024 E4                CLR     A
0025 FF                MOV     R7,A
0026         ?C0020:
                                           ; SOURCE LINE # 655
0026 120000      R     LCALL   L?0643
0029 120000      R     LCALL   L?0711
002C 6005              JZ      ?C0021
                                           ; SOURCE LINE # 656
002E         ?C0023:
002E         ?C0022:
002E 0F                INC     R7
002F EF                MOV     A,R7
0030 B405F3            CJNE    A,#05H,?C0020
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 71  

0033         ?C0021:
                                           ; SOURCE LINE # 657
0033 EF                MOV     A,R7
0034 D3                SETB    C
0035 9402              SUBB    A,#02H
0037 4067              JC      ?C0024
                                           ; SOURCE LINE # 658
0039 120000      R     LCALL   L?0643
003C 120000      E     LCALL   _a2h
003F 900000      R     MOV     DPTR,#MonPage
0042 EE                MOV     A,R6
0043 F0                MOVX    @DPTR,A
0044 A3                INC     DPTR
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 659
0047 900000      R     MOV     DPTR,#MonWdata
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C 900000      R     MOV     DPTR,#MonPage
004F E0                MOVX    A,@DPTR
0050 FC                MOV     R4,A
0051 A3                INC     DPTR
0052 E0                MOVX    A,@DPTR
0053 120000      R     LCALL   L?0695
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 660
0058 200003      R     JB      echo,$ + 6H
005B 020000      R     LJMP    ?C0019
                                           ; SOURCE LINE # 661
005E 7A00        R     MOV     R2,#HIGH ?SC_98
0060 7900        R     MOV     R1,#LOW ?SC_98
0062 900000      R     MOV     DPTR,#MonPage
0065 120000      R     LCALL   L?0698
0068 120000      R     LCALL   L?0758
                                           ; SOURCE LINE # 662
006B 900000      R     MOV     DPTR,#MonPage
006E E0                MOVX    A,@DPTR
006F FE                MOV     R6,A
0070 A3                INC     DPTR
0071 E0                MOVX    A,@DPTR
0072 120000      R     LCALL   L?0656
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 900000      R     MOV     DPTR,#MonRdata
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 663
007B 7BFF              MOV     R3,#0FFH
007D 7A00        R     MOV     R2,#HIGH ?SC_118
007F 7900        R     MOV     R1,#LOW ?SC_118
0081 900000      R     MOV     DPTR,#MonPage
0084 E0                MOVX    A,@DPTR
0085 FD                MOV     R5,A
0086 A3                INC     DPTR
0087 E0                MOVX    A,@DPTR
0088 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
008B CD                XCH     A,R5
008C F0                MOVX    @DPTR,A
008D A3                INC     DPTR
008E ED                MOV     A,R5
008F F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 72  

0090 A3                INC     DPTR
0091 EF                MOV     A,R7
                                           ; SOURCE LINE # 664
0092 120000      R     LCALL   L?0740
0095 7003              JNZ     $ + 5H
0097 020000      R     LJMP    ?C0019
009A 120000      R     LCALL   L?0741
009D         ?C0561:
                                           ; SOURCE LINE # 665
009D 020000      R     LJMP    ?C0562
                                           ; SOURCE LINE # 667
00A0         ?C0024:
                                           ; SOURCE LINE # 670
00A0 30006D      R     JNB     echo,?C0027
                                           ; SOURCE LINE # 684
00A3 120000      R     LCALL   L?0659
00A6 120000      R     LCALL   L?0707
                                           ; SOURCE LINE # 685
00A9 7BFF              MOV     R3,#0FFH
00AB 7A00        R     MOV     R2,#HIGH ?SC_149
00AD 7900        R     MOV     R1,#LOW ?SC_149
00AF 900000      R     MOV     DPTR,#MonIndex
00B2 E0                MOVX    A,@DPTR
00B3 FD                MOV     R5,A
00B4 ED                MOV     A,R5
00B5 FF                MOV     R7,A
00B6 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
00B9 EE                MOV     A,R6
00BA F0                MOVX    @DPTR,A
00BB A3                INC     DPTR
00BC EF                MOV     A,R7
00BD 120000      R     LCALL   L?0758
                                           ; SOURCE LINE # 686
00C0 120000      R     LCALL   L?0768
00C3 7024              JNZ     ?C0028
                                           ; SOURCE LINE # 687
00C5 900000      R     MOV     DPTR,#MonWdata
00C8 E0                MOVX    A,@DPTR
00C9 FF                MOV     R7,A
00CA 900000      R     MOV     DPTR,#MonIndex
00CD E0                MOVX    A,@DPTR
00CE F9                MOV     R1,A
00CF 900000      R     MOV     DPTR,#MonPage
00D2 120000      R     LCALL   L?0694
00D5 EF                MOV     A,R7
                                           ; SOURCE LINE # 689
00D6 120000      R     LCALL   L?0658
00D9 120000      R     LCALL   L?0707
                                           ; SOURCE LINE # 690
00DC E9                MOV     A,R1
00DD FD                MOV     R5,A
00DE ED                MOV     A,R5
00DF 120000      R     LCALL   L?0656
00E2 E0                MOVX    A,@DPTR
00E3 900000      R     MOV     DPTR,#MonRdata
00E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 691
00E7 8016              SJMP    ?C0029
00E9         ?C0028:
                                           ; SOURCE LINE # 697
                                           ; SOURCE LINE # 698
00E9 120000      R     LCALL   L?0670
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 73  

00EC 900000      R     MOV     DPTR,#MonWdata
00EF E0                MOVX    A,@DPTR
00F0 FB                MOV     R3,A
00F1 120000      E     LCALL   _WriteSlowI2CByte
                                           ; SOURCE LINE # 699
00F4 120000      R     LCALL   L?0670
00F7 120000      E     LCALL   _ReadSlowI2CByte
00FA 900000      R     MOV     DPTR,#MonRdata
00FD EF                MOV     A,R7
00FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 700
00FF         ?C0029:
                                           ; SOURCE LINE # 701
00FF 120000      R     LCALL   L?0678
0102 120000      R     LCALL   L?0760
                                           ; SOURCE LINE # 702
0105 120000      R     LCALL   L?0740
0108 6026              JZ      ?C0019
010A 120000      R     LCALL   L?0741
010D         ?C0562:
010D 020000      E     LJMP    _Printf
                                           ; SOURCE LINE # 703
0110         ?C0027:
                                           ; SOURCE LINE # 704
                                           ; SOURCE LINE # 711
0110 900000      R     MOV     DPTR,#MonAddress
0113 E0                MOVX    A,@DPTR
0114 F9                MOV     R1,A
0115 648A              XRL     A,#08AH
0117 7011              JNZ     ?C0032
                                           ; SOURCE LINE # 712
0119 120000      R     LCALL   L?0659
011C 120000      R     LCALL   L?0708
                                           ; SOURCE LINE # 713
011F 120000      R     LCALL   L?0730
0122 FB                MOV     R3,A
0123 EB                MOV     A,R3
0124 120000      R     LCALL   L?0656
0127 ED                MOV     A,R5
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 714
0129 22                RET     
012A         ?C0032:
                                           ; SOURCE LINE # 718
                                           ; SOURCE LINE # 719
012A 120000      R     LCALL   L?0748
012D 120000      E     LCALL   _WriteI2CByte
                                           ; SOURCE LINE # 720
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 722
0130         ?C0019:
0130 22                RET     
0131         L?0740:
0131 F0                MOVX    @DPTR,A
0132 120000      E     LCALL   _Printf
0135 900000      R     MOV     DPTR,#MonRdata
0138 E0                MOVX    A,@DPTR
0139 FF                MOV     R7,A
013A 900000      R     MOV     DPTR,#MonWdata
013D E0                MOVX    A,@DPTR
013E FE                MOV     R6,A
013F 6F                XRL     A,R7
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 74  

0140 22                RET     
0141         L?0758:
0141 F0                MOVX    @DPTR,A
0142 900000      R     MOV     DPTR,#MonWdata
0145 E0                MOVX    A,@DPTR
0146 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
0149 F0                MOVX    @DPTR,A
014A 120000      E     LCALL   _Printf
014D 22                RET     
             ; FUNCTION MonWriteI2CByte (END)

             ; FUNCTION _MonIncDecI2C (BEGIN)
                                           ; SOURCE LINE # 770
;---- Variable 'inc' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 775
0000 EF                MOV     A,R7
0001 14                DEC     A
0002 6013              JZ      ?C0036
0004 24F7              ADD     A,#0F7H
0006 6017              JZ      ?C0037
0008 14                DEC     A
0009 601D              JZ      ?C0038
000B 240B              ADD     A,#0BH
000D 7020              JNZ     ?C0034
                                           ; SOURCE LINE # 776
000F         ?C0035:
000F 900000      R     MOV     DPTR,#MonWdata
0012 E0                MOVX    A,@DPTR
0013 14                DEC     A
0014 F0                MOVX    @DPTR,A
0015 8018              SJMP    ?C0034
                                           ; SOURCE LINE # 777
0017         ?C0036:
0017 900000      R     MOV     DPTR,#MonWdata
001A E0                MOVX    A,@DPTR
001B 04                INC     A
001C F0                MOVX    @DPTR,A
001D 8010              SJMP    ?C0034
                                           ; SOURCE LINE # 778
001F         ?C0037:
001F 900000      R     MOV     DPTR,#MonWdata
0022 E0                MOVX    A,@DPTR
0023 24F0              ADD     A,#0F0H
0025 F0                MOVX    @DPTR,A
0026 8007              SJMP    ?C0034
                                           ; SOURCE LINE # 779
0028         ?C0038:
0028 900000      R     MOV     DPTR,#MonWdata
002B E0                MOVX    A,@DPTR
002C 2410              ADD     A,#010H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 780
002F         ?C0034:
                                           ; SOURCE LINE # 782
002F 900000      R     MOV     DPTR,#MonAddress
0032 E0                MOVX    A,@DPTR
0033 F9                MOV     R1,A
0034 648A              XRL     A,#08AH
0036 7026              JNZ     ?C0039
                                           ; SOURCE LINE # 787
0038 120000      R     LCALL   L?0659
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 75  

003B 7F00              MOV     R7,#00H
003D FE                MOV     R6,A
003E 900000      R     MOV     DPTR,#MonPage
0041 F0                MOVX    @DPTR,A
0042 A3                INC     DPTR
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 788
0045 120000      R     LCALL   L?0730
0048 FC                MOV     R4,A
0049 FB                MOV     R3,A
004A EB                MOV     A,R3
004B 120000      R     LCALL   L?0656
004E ED                MOV     A,R5
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 789
0050 EC                MOV     A,R4
0051 900000      R     MOV     DPTR,#MonPage
0054 120000      R     LCALL   L?0654
0057 E0                MOVX    A,@DPTR
0058 900000      R     MOV     DPTR,#MonRdata
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 791
005C 8011              SJMP    ?C0040
005E         ?C0039:
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 793
005E 120000      R     LCALL   L?0748
0061 120000      E     LCALL   _WriteI2CByte
                                           ; SOURCE LINE # 794
0064 120000      R     LCALL   L?0671
0067 120000      E     LCALL   _ReadI2CByte
006A 900000      R     MOV     DPTR,#MonRdata
006D EF                MOV     A,R7
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 795
006F         ?C0040:
                                           ; SOURCE LINE # 797
006F 30001E      R     JNB     echo,?C0041
                                           ; SOURCE LINE # 798
0072 7BFF              MOV     R3,#0FFH
0074 7A00        R     MOV     R2,#HIGH ?SC_193
0076 7900        R     MOV     R1,#LOW ?SC_193
0078 120000      R     LCALL   L?0680
007B 900000      R     MOV     DPTR,#MonWdata
007E E0                MOVX    A,@DPTR
007F 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
0082 F0                MOVX    @DPTR,A
0083 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 799
0086 120000      R     LCALL   L?0678
0089 120000      R     LCALL   L?0761
008C F0                MOVX    @DPTR,A
008D 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 800
0090         ?C0041:
                                           ; SOURCE LINE # 802
0090 020000      R     LJMP    Prompt
             ; FUNCTION _MonIncDecI2C (END)

             ; FUNCTION MonDumpI2C (BEGIN)
                                           ; SOURCE LINE # 809
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 76  

                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 816
0000 900000      R     MOV     DPTR,#cnt
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 7407              MOV     A,#07H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 818
0009 120000      R     LCALL   L?0667
000C 400B              JC      ?C0043
000E 120000      R     LCALL   L?0643
0011 120000      E     LCALL   _a2h
0014 900000      R     MOV     DPTR,#MonIndex
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
0019         ?C0043:
                                           ; SOURCE LINE # 819
0019 120000      R     LCALL   L?0701
001C 4010              JC      ?C0044
001E 900000      R     MOV     DPTR,#argv+06H
0021 120000      R     LCALL   L?0644
0024 120000      E     LCALL   _a2h
0027 900000      R     MOV     DPTR,#ToMonIndex
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
002C 800F              SJMP    ?C0045
002E         ?C0044:
                                           ; SOURCE LINE # 820
002E 900000      R     MOV     DPTR,#cnt
0031 A3                INC     DPTR
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 900000      R     MOV     DPTR,#MonIndex
0037 E0                MOVX    A,@DPTR
0038 2F                ADD     A,R7
0039 900000      R     MOV     DPTR,#ToMonIndex
003C F0                MOVX    @DPTR,A
003D         ?C0045:
                                           ; SOURCE LINE # 822
003D 900000      R     MOV     DPTR,#MonIndex
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 900000      R     MOV     DPTR,#ToMonIndex
0045 E0                MOVX    A,@DPTR
0046 C3                CLR     C
0047 9F                SUBB    A,R7
0048 5003              JNC     ?C0046
004A 74FF              MOV     A,#0FFH
004C F0                MOVX    @DPTR,A
004D         ?C0046:
                                           ; SOURCE LINE # 823
004D 900000      R     MOV     DPTR,#ToMonIndex
0050 E0                MOVX    A,@DPTR
0051 C3                CLR     C
0052 9F                SUBB    A,R7
0053 FF                MOV     R7,A
0054 E4                CLR     A
0055 9400              SUBB    A,#00H
0057 CF                XCH     A,R7
0058 2401              ADD     A,#01H
005A CF                XCH     A,R7
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 77  

005B 3400              ADDC    A,#00H
005D 900000      R     MOV     DPTR,#cnt
0060 F0                MOVX    @DPTR,A
0061 A3                INC     DPTR
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 825
0064 30006B      R     JNB     echo,?C0047
                                           ; SOURCE LINE # 826
0067 120000      R     LCALL   L?0768
006A 7052              JNZ     ?C0059
                                           ; SOURCE LINE # 834
006C 900000      R     MOV     DPTR,#len
006F F0                MOVX    @DPTR,A
0070         ?C0049:
0070 900000      R     MOV     DPTR,#len
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 C3                CLR     C
0076 940A              SUBB    A,#0AH
0078 5010              JNC     ?C0050
                                           ; SOURCE LINE # 835
007A 120000      R     LCALL   L?0643
007D 120000      R     LCALL   L?0712
0080 6008              JZ      ?C0050
                                           ; SOURCE LINE # 836
0082         ?C0052:
0082         ?C0051:
0082 900000      R     MOV     DPTR,#len
0085 E0                MOVX    A,@DPTR
0086 04                INC     A
0087 F0                MOVX    @DPTR,A
0088 80E6              SJMP    ?C0049
008A         ?C0050:
                                           ; SOURCE LINE # 837
008A 900000      R     MOV     DPTR,#len
008D E0                MOVX    A,@DPTR
008E D3                SETB    C
008F 9402              SUBB    A,#02H
0091 400C              JC      ?C0053
                                           ; SOURCE LINE # 838
0093 120000      R     LCALL   L?0643
0096 120000      E     LCALL   _a2h
0099 900000      R     MOV     DPTR,#MonPage
009C EE                MOV     A,R6
009D 8006              SJMP    ?C0563
009F         ?C0053:
                                           ; SOURCE LINE # 840
009F 120000      R     LCALL   L?0659
00A2 900000      R     MOV     DPTR,#MonPage
00A5         ?C0563:
00A5 F0                MOVX    @DPTR,A
00A6 A3                INC     DPTR
00A7 E4                CLR     A
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 841
00A9         ?C0055:
00A9 120000      R     LCALL   L?0685
00AC 5003              JNC     $ + 5H
00AE 020000      R     LJMP    ?C0077
                                           ; SOURCE LINE # 842
00B1 120000      R     LCALL   L?0653
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 78  

00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 900000      R     MOV     DPTR,#MonRdata
                                           ; SOURCE LINE # 843
                                           ; SOURCE LINE # 844
                                           ; SOURCE LINE # 845
00B9 120000      R     LCALL   L?0662
00BC 80EB              SJMP    ?C0055
                                           ; SOURCE LINE # 847
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 849
00BE         ?C0059:
00BE 120000      R     LCALL   L?0685
00C1 4076              JC      ?C0077
                                           ; SOURCE LINE # 850
00C3 120000      R     LCALL   L?0671
00C6 120000      E     LCALL   _ReadI2CByte
00C9 900000      R     MOV     DPTR,#MonRdata
00CC EF                MOV     A,R7
                                           ; SOURCE LINE # 851
                                           ; SOURCE LINE # 853
                                           ; SOURCE LINE # 854
00CD 120000      R     LCALL   L?0662
00D0 80EC              SJMP    ?C0059
                                           ; SOURCE LINE # 855
                                           ; SOURCE LINE # 856
00D2         ?C0047:
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 858
00D2 120000      R     LCALL   L?0769
00D5 704E              JNZ     ?C0074
                                           ; SOURCE LINE # 865
00D7 900000      R     MOV     DPTR,#len
00DA F0                MOVX    @DPTR,A
00DB         ?C0064:
00DB 900000      R     MOV     DPTR,#len
00DE E0                MOVX    A,@DPTR
00DF FF                MOV     R7,A
00E0 C3                CLR     C
00E1 940A              SUBB    A,#0AH
00E3 5010              JNC     ?C0065
                                           ; SOURCE LINE # 866
00E5 120000      R     LCALL   L?0643
00E8 120000      R     LCALL   L?0712
00EB 6008              JZ      ?C0065
                                           ; SOURCE LINE # 867
00ED         ?C0067:
00ED         ?C0066:
00ED 900000      R     MOV     DPTR,#len
00F0 E0                MOVX    A,@DPTR
00F1 04                INC     A
00F2 F0                MOVX    @DPTR,A
00F3 80E6              SJMP    ?C0064
00F5         ?C0065:
                                           ; SOURCE LINE # 868
00F5 900000      R     MOV     DPTR,#len
00F8 E0                MOVX    A,@DPTR
00F9 D3                SETB    C
00FA 9402              SUBB    A,#02H
00FC 400C              JC      ?C0068
                                           ; SOURCE LINE # 869
00FE 120000      R     LCALL   L?0643
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 79  

0101 120000      E     LCALL   _a2h
0104 900000      R     MOV     DPTR,#MonPage
0107 EE                MOV     A,R6
0108 8006              SJMP    ?C0564
010A         ?C0068:
                                           ; SOURCE LINE # 871
010A 120000      R     LCALL   L?0659
010D 900000      R     MOV     DPTR,#MonPage
0110         ?C0564:
0110 F0                MOVX    @DPTR,A
0111 A3                INC     DPTR
0112 E4                CLR     A
0113 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 872
0114         ?C0070:
0114 120000      R     LCALL   L?0686
0117 4020              JC      ?C0077
                                           ; SOURCE LINE # 873
0119 120000      R     LCALL   L?0653
011C E0                MOVX    A,@DPTR
011D 900000      R     MOV     DPTR,#MonRdata
                                           ; SOURCE LINE # 874
                                           ; SOURCE LINE # 875
0120 120000      R     LCALL   L?0717
0123 80EF              SJMP    ?C0070
                                           ; SOURCE LINE # 877
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 879
0125         ?C0074:
0125 120000      R     LCALL   L?0686
0128 400F              JC      ?C0077
                                           ; SOURCE LINE # 880
012A 120000      R     LCALL   L?0671
012D 120000      E     LCALL   _ReadI2CByte
0130 900000      R     MOV     DPTR,#MonRdata
0133 EF                MOV     A,R7
                                           ; SOURCE LINE # 881
                                           ; SOURCE LINE # 882
0134 120000      R     LCALL   L?0717
0137 80EC              SJMP    ?C0074
                                           ; SOURCE LINE # 883
                                           ; SOURCE LINE # 884
                                           ; SOURCE LINE # 885
0139         ?C0077:
0139 22                RET     
013A         L?0662:
013A F0                MOVX    @DPTR,A
013B 7BFF              MOV     R3,#0FFH
013D 7A00        R     MOV     R2,#HIGH ?SC_214
013F 7900        R     MOV     R1,#LOW ?SC_214
0141 900000      R     MOV     DPTR,#MonIndex
0144 E0                MOVX    A,@DPTR
0145 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0148 F0                MOVX    @DPTR,A
0149 A3                INC     DPTR
014A EF                MOV     A,R7
014B F0                MOVX    @DPTR,A
014C 120000      E     LCALL   _Printf
014F 900000      R     MOV     DPTR,#MonIndex
0152 E0                MOVX    A,@DPTR
0153 04                INC     A
0154 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 80  

0155 900000      R     MOV     DPTR,#cnt+01H
0158 E0                MOVX    A,@DPTR
0159 24FF              ADD     A,#0FFH
015B F0                MOVX    @DPTR,A
015C 900000      R     MOV     DPTR,#cnt
015F E0                MOVX    A,@DPTR
0160 34FF              ADDC    A,#0FFH
0162 F0                MOVX    @DPTR,A
0163 22                RET     
             ; FUNCTION MonDumpI2C (END)

             ; FUNCTION MonNewReadI2CByte (BEGIN)
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 894
                                           ; SOURCE LINE # 900
0000 120000      R     LCALL   L?0702
0003 4010              JC      ?C0078
0005 900000      R     MOV     DPTR,#argv+06H
0008 120000      R     LCALL   L?0644
000B 120000      E     LCALL   _a2h
000E 900000      R     MOV     DPTR,#MonIndex
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
0013 8006              SJMP    ?C0079
0015         ?C0078:
                                           ; SOURCE LINE # 901
                                           ; SOURCE LINE # 902
0015 120000      R     LCALL   L?0726
0018 020000      E     LJMP    _Printf
                                           ; SOURCE LINE # 904
001B         ?C0079:
                                           ; SOURCE LINE # 905
001B 120000      R     LCALL   L?0643
001E 120000      E     LCALL   _a2h
0021 900000      R     MOV     DPTR,#Slave
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 911
0026 648A              XRL     A,#08AH
0028 7016              JNZ     ?C0081
                                           ; SOURCE LINE # 912
002A 120000      R     LCALL   L?0659
002D 7F00              MOV     R7,#00H
002F FE                MOV     R6,A
;---- Variable 'MonPage' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 913
0030 900000      R     MOV     DPTR,#MonIndex
0033 E0                MOVX    A,@DPTR
0034 FD                MOV     R5,A
0035 ED                MOV     A,R5
0036 120000      R     LCALL   L?0656
0039 E0                MOVX    A,@DPTR
003A 900000      R     MOV     DPTR,#MonRdata
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 914
003E 800E              SJMP    ?C0082
0040         ?C0081:
                                           ; SOURCE LINE # 917
0040 900000      R     MOV     DPTR,#Slave
0043 120000      R     LCALL   L?0672
0046 120000      E     LCALL   _ReadI2CByte
0049 900000      R     MOV     DPTR,#MonRdata
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 81  

004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
004E         ?C0082:
                                           ; SOURCE LINE # 919
004E 300009      R     JNB     echo,?C0083
                                           ; SOURCE LINE # 920
0051 900000      R     MOV     DPTR,#Slave
0054 120000      R     LCALL   L?0664
0057 120000      E     LCALL   _Printf
005A         ?C0083:
                                           ; SOURCE LINE # 921
005A 900000      R     MOV     DPTR,#MonRdata
005D E0                MOVX    A,@DPTR
005E 900000      R     MOV     DPTR,#MonWdata
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 922
0062         ?C0080:
0062 22                RET     
             ; FUNCTION MonNewReadI2CByte (END)

             ; FUNCTION MonNewWriteI2CByte (BEGIN)
                                           ; SOURCE LINE # 928
                                           ; SOURCE LINE # 929
                                           ; SOURCE LINE # 935
0000 900000      R     MOV     DPTR,#argc
0003 E0                MOVX    A,@DPTR
0004 C3                CLR     C
0005 9404              SUBB    A,#04H
0007 5006              JNC     ?C0084
                                           ; SOURCE LINE # 936
0009 120000      R     LCALL   L?0726
000C 020000      R     LJMP    ?C0565
                                           ; SOURCE LINE # 938
000F         ?C0084:
                                           ; SOURCE LINE # 940
000F 120000      R     LCALL   L?0643
0012 120000      E     LCALL   _a2h
0015 900000      R     MOV     DPTR,#Slave
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 941
001A 900000      R     MOV     DPTR,#argv+06H
001D 120000      R     LCALL   L?0644
0020 120000      E     LCALL   _a2h
0023 900000      R     MOV     DPTR,#MonIndex
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 942
0028 900000      R     MOV     DPTR,#argv+09H
002B 120000      R     LCALL   L?0644
002E 120000      E     LCALL   _a2h
0031 900000      R     MOV     DPTR,#MonWdata
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 950
0036 900000      R     MOV     DPTR,#Slave
0039 E0                MOVX    A,@DPTR
003A 648A              XRL     A,#08AH
003C 7021              JNZ     ?C0086
                                           ; SOURCE LINE # 951
003E 120000      R     LCALL   L?0659
0041 FE                MOV     R6,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 82  

;---- Variable 'MonPage' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 952
0042 120000      R     LCALL   L?0731
0045 F9                MOV     R1,A
0046 FB                MOV     R3,A
0047 EB                MOV     A,R3
0048 120000      R     LCALL   L?0656
004B ED                MOV     A,R5
                                           ; SOURCE LINE # 953
004C 120000      R     LCALL   L?0658
004F 7F00              MOV     R7,#00H
0051 FE                MOV     R6,A
                                           ; SOURCE LINE # 954
0052 E9                MOV     A,R1
0053 FD                MOV     R5,A
0054 ED                MOV     A,R5
0055 120000      R     LCALL   L?0656
0058 E0                MOVX    A,@DPTR
0059 900000      R     MOV     DPTR,#MonRdata
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 955
005D 801C              SJMP    ?C0087
005F         ?C0086:
                                           ; SOURCE LINE # 957
                                           ; SOURCE LINE # 958
005F 900000      R     MOV     DPTR,#Slave
0062 120000      R     LCALL   L?0672
0065 900000      R     MOV     DPTR,#MonWdata
0068 E0                MOVX    A,@DPTR
0069 FB                MOV     R3,A
006A 120000      E     LCALL   _WriteI2CByte
                                           ; SOURCE LINE # 959
006D 900000      R     MOV     DPTR,#Slave
0070 120000      R     LCALL   L?0672
0073 120000      E     LCALL   _ReadI2CByte
0076 900000      R     MOV     DPTR,#MonRdata
0079 EF                MOV     A,R7
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 960
007B         ?C0087:
                                           ; SOURCE LINE # 961
007B 300009      R     JNB     echo,?C0085
                                           ; SOURCE LINE # 962
007E 900000      R     MOV     DPTR,#Slave
0081 120000      R     LCALL   L?0664
0084         ?C0565:
0084 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 963
                                           ; SOURCE LINE # 964
0087         ?C0085:
0087 22                RET     
             ; FUNCTION MonNewWriteI2CByte (END)

             ; FUNCTION MonNewDumpI2C (BEGIN)
                                           ; SOURCE LINE # 970
                                           ; SOURCE LINE # 971
                                           ; SOURCE LINE # 978
0000 120000      R     LCALL   L?0668
0003 400E              JC      ?C0089
0005 900000      R     MOV     DPTR,#argv+06H
0008 120000      R     LCALL   L?0644
000B 120000      E     LCALL   _a2h
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 83  

000E 900000      R     MOV     DPTR,#MonIndex
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
0013         ?C0089:
                                           ; SOURCE LINE # 979
0013 120000      R     LCALL   L?0702
0016 400E              JC      ?C0090
0018 900000      R     MOV     DPTR,#argv+09H
001B 120000      R     LCALL   L?0644
001E 120000      E     LCALL   _a2h
0021 900000      R     MOV     DPTR,#ToMonIndex
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
0026         ?C0090:
                                           ; SOURCE LINE # 980
0026 120000      R     LCALL   L?0643
0029 120000      E     LCALL   _a2h
002C 900000      R     MOV     DPTR,#Slave
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 982
0031 30004E      R     JNB     echo,?C0091
                                           ; SOURCE LINE # 983
0034 E0                MOVX    A,@DPTR
0035 648A              XRL     A,#08AH
0037 7028              JNZ     ?C0092
                                           ; SOURCE LINE # 990
0039 120000      R     LCALL   L?0659
                                           ; SOURCE LINE # 991
003C 120000      R     LCALL   L?0683
003F         ?C0093:
003F 120000      R     LCALL   L?0676
0042 4003              JC      $ + 5H
0044 020000      R     LJMP    ?C0109
                                           ; SOURCE LINE # 992
0047 120000      R     LCALL   L?0770
004A 120000      R     LCALL   L?0656
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F 900000      R     MOV     DPTR,#MonRdata
                                           ; SOURCE LINE # 993
0052 120000      R     LCALL   L?0713
0055 F0                MOVX    @DPTR,A
0056 EC                MOV     A,R4
                                           ; SOURCE LINE # 994
0057 120000      R     LCALL   L?0710
005A 70E3              JNZ     ?C0093
005C 120000      R     LCALL   L?0749
005F         ?C0544:
005F 80DE              SJMP    ?C0093
                                           ; SOURCE LINE # 996
0061         ?C0092:
                                           ; SOURCE LINE # 997
                                           ; SOURCE LINE # 998
0061 120000      R     LCALL   L?0684
0064         ?C0097:
0064 120000      R     LCALL   L?0676
0067 505D              JNC     ?C0109
                                           ; SOURCE LINE # 999
0069 120000      R     LCALL   L?0759
                                           ; SOURCE LINE # 1000
006C 120000      R     LCALL   L?0713
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 84  

006F F0                MOVX    @DPTR,A
0070 900000      R     MOV     DPTR,#i
0073 E0                MOVX    A,@DPTR
0074 FD                MOV     R5,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 CD                XCH     A,R5
                                           ; SOURCE LINE # 1001
0078 120000      R     LCALL   L?0710
007B 70E7              JNZ     ?C0097
007D 120000      R     LCALL   L?0749
0080         ?C0545:
0080 80E2              SJMP    ?C0097
                                           ; SOURCE LINE # 1002
                                           ; SOURCE LINE # 1003
0082         ?C0091:
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1005
0082 900000      R     MOV     DPTR,#Slave
0085 E0                MOVX    A,@DPTR
0086 648A              XRL     A,#08AH
0088 7023              JNZ     ?C0101
                                           ; SOURCE LINE # 1010
008A 120000      R     LCALL   L?0659
                                           ; SOURCE LINE # 1011
008D 120000      R     LCALL   L?0683
0090         ?C0102:
0090 120000      R     LCALL   L?0677
0093 5031              JNC     ?C0109
                                           ; SOURCE LINE # 1012
0095 120000      R     LCALL   L?0770
0098 120000      R     LCALL   L?0656
009B E0                MOVX    A,@DPTR
009C 900000      R     MOV     DPTR,#MonRdata
009F F0                MOVX    @DPTR,A
00A0 900000      R     MOV     DPTR,#i+01H
00A3 E0                MOVX    A,@DPTR
00A4 04                INC     A
00A5 F0                MOVX    @DPTR,A
00A6 70E8              JNZ     ?C0102
00A8 120000      R     LCALL   L?0750
00AB         ?C0546:
00AB 80E3              SJMP    ?C0102
                                           ; SOURCE LINE # 1014
00AD         ?C0101:
                                           ; SOURCE LINE # 1015
                                           ; SOURCE LINE # 1016
00AD 120000      R     LCALL   L?0684
00B0         ?C0106:
00B0 120000      R     LCALL   L?0677
00B3 5011              JNC     ?C0109
                                           ; SOURCE LINE # 1017
00B5 120000      R     LCALL   L?0759
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1018
00B9 900000      R     MOV     DPTR,#i+01H
00BC E0                MOVX    A,@DPTR
00BD 04                INC     A
00BE F0                MOVX    @DPTR,A
00BF 70EF              JNZ     ?C0106
00C1 120000      R     LCALL   L?0750
00C4         ?C0547:
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 85  

00C4 80EA              SJMP    ?C0106
                                           ; SOURCE LINE # 1019
                                           ; SOURCE LINE # 1020
                                           ; SOURCE LINE # 1021
00C6         ?C0109:
00C6 22                RET     
00C7         L?0710:
00C7 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
00CA F0                MOVX    @DPTR,A
00CB A3                INC     DPTR
00CC ED                MOV     A,R5
00CD F0                MOVX    @DPTR,A
00CE A3                INC     DPTR
00CF EF                MOV     A,R7
00D0 F0                MOVX    @DPTR,A
00D1 120000      E     LCALL   _Printf
00D4 900000      R     MOV     DPTR,#i+01H
00D7 E0                MOVX    A,@DPTR
00D8 04                INC     A
00D9 F0                MOVX    @DPTR,A
00DA 22                RET     
00DB         L?0759:
00DB 900000      R     MOV     DPTR,#Slave
00DE E0                MOVX    A,@DPTR
00DF FF                MOV     R7,A
00E0 120000      E     LCALL   _ReadI2CByte
00E3 900000      R     MOV     DPTR,#MonRdata
00E6 EF                MOV     A,R7
00E7 22                RET     
             ; FUNCTION MonNewDumpI2C (END)

             ; FUNCTION MonWriteBit (BEGIN)
                                           ; SOURCE LINE # 1029
                                           ; SOURCE LINE # 1030
                                           ; SOURCE LINE # 1037
0000 900000      R     MOV     DPTR,#argc
0003 E0                MOVX    A,@DPTR
0004 C3                CLR     C
0005 9405              SUBB    A,#05H
0007 5006              JNC     ?C0110
                                           ; SOURCE LINE # 1038
0009 120000      R     LCALL   L?0726
000C 020000      R     LJMP    ?C0567
                                           ; SOURCE LINE # 1040
000F         ?C0110:
                                           ; SOURCE LINE # 1041
000F 120000      R     LCALL   L?0643
0012 120000      E     LCALL   _a2h
0015 900000      R     MOV     DPTR,#Slave
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1043
001A 900000      R     MOV     DPTR,#argv+06H
001D 120000      R     LCALL   L?0644
0020 120000      E     LCALL   _a2h
0023 900000      R     MOV     DPTR,#MonIndex
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1044
0028 900000      R     MOV     DPTR,#argv+09H
002B 120000      R     LCALL   L?0644
002E 120000      E     LCALL   _a2h
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 86  

0031 7804              MOV     R0,#04H
0033 120000      E     LCALL   ?C?ULSHR
0036 EF                MOV     A,R7
0037 540F              ANL     A,#0FH
0039 FF                MOV     R7,A
003A 900000      R     MOV     DPTR,#FromBit
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1045
003F 900000      R     MOV     DPTR,#argv+09H
0042 120000      R     LCALL   L?0644
0045 120000      E     LCALL   _a2h
0048 EF                MOV     A,R7
0049 540F              ANL     A,#0FH
004B FF                MOV     R7,A
004C 900000      R     MOV     DPTR,#ToBit
004F EF                MOV     A,R7
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1046
0051 900000      R     MOV     DPTR,#argv+0CH
0054 120000      R     LCALL   L?0644
0057 120000      E     LCALL   _a2h
005A 900000      R     MOV     DPTR,#MonMask
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1048
005F 900000      R     MOV     DPTR,#ToBit
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
0064 900000      R     MOV     DPTR,#FromBit
0067 E0                MOVX    A,@DPTR
0068 FE                MOV     R6,A
0069 C3                CLR     C
006A 9F                SUBB    A,R7
006B 400B              JC      ?C0113
006D EE                MOV     A,R6
006E D3                SETB    C
006F 9407              SUBB    A,#07H
0071 5005              JNC     ?C0113
0073 EF                MOV     A,R7
0074 9407              SUBB    A,#07H
0076 4009              JC      ?C0112
0078         ?C0113:
                                           ; SOURCE LINE # 1049
0078 7BFF              MOV     R3,#0FFH
007A 7A00        R     MOV     R2,#HIGH ?SC_283
007C 7900        R     MOV     R1,#LOW ?SC_283
007E         ?C0566:
007E 020000      R     LJMP    ?C0567
                                           ; SOURCE LINE # 1051
0081         ?C0112:
                                           ; SOURCE LINE # 1053
0081 900000      R     MOV     DPTR,#mask
0084 74FF              MOV     A,#0FFH
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1054
;---- Variable 'val' assigned to Register 'R4' ----
0087 7C7F              MOV     R4,#07FH
                                           ; SOURCE LINE # 1055
;---- Variable 'i' assigned to Register 'R6' ----
0089 7E07              MOV     R6,#07H
008B         ?C0114:
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 87  

008B 900000      R     MOV     DPTR,#FromBit
008E E0                MOVX    A,@DPTR
008F FD                MOV     R5,A
0090 EE                MOV     A,R6
0091 D3                SETB    C
0092 9D                SUBB    A,R5
0093 400C              JC      ?C0115
                                           ; SOURCE LINE # 1056
0095 900000      R     MOV     DPTR,#mask
0098 E0                MOVX    A,@DPTR
0099 5C                ANL     A,R4
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1057
009B EC                MOV     A,R4
009C 13                RRC     A
009D FC                MOV     R4,A
                                           ; SOURCE LINE # 1058
009E 1E                DEC     R6
009F 80EA              SJMP    ?C0114
00A1         ?C0115:
                                           ; SOURCE LINE # 1060
00A1 7CFE              MOV     R4,#0FEH
                                           ; SOURCE LINE # 1061
00A3 E4                CLR     A
00A4 FE                MOV     R6,A
00A5         ?C0117:
00A5 900000      R     MOV     DPTR,#ToBit
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA EE                MOV     A,R6
00AB C3                CLR     C
00AC 9F                SUBB    A,R7
00AD 500D              JNC     ?C0118
                                           ; SOURCE LINE # 1062
00AF 900000      R     MOV     DPTR,#mask
00B2 E0                MOVX    A,@DPTR
00B3 5C                ANL     A,R4
00B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1063
00B5 EC                MOV     A,R4
00B6 25E0              ADD     A,ACC
00B8 FC                MOV     R4,A
                                           ; SOURCE LINE # 1064
00B9 0E                INC     R6
00BA 80E9              SJMP    ?C0117
00BC         ?C0118:
                                           ; SOURCE LINE # 1075
00BC 900000      R     MOV     DPTR,#Slave
00BF E0                MOVX    A,@DPTR
00C0 F9                MOV     R1,A
00C1 648A              XRL     A,#08AH
00C3 7043              JNZ     ?C0120
                                           ; SOURCE LINE # 1076
00C5 120000      R     LCALL   L?0659
00C8 900000      R     MOV     DPTR,#MonPage
00CB F0                MOVX    @DPTR,A
00CC A3                INC     DPTR
00CD E4                CLR     A
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1077
00CF 900000      R     MOV     DPTR,#MonIndex
00D2 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 88  

00D3 FF                MOV     R7,A
00D4 120000      R     LCALL   L?0693
00D7 E0                MOVX    A,@DPTR
00D8 FE                MOV     R6,A
00D9 900000      R     MOV     DPTR,#MonRdata
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1078
00DD 900000      R     MOV     DPTR,#mask
00E0 E0                MOVX    A,@DPTR
00E1 FD                MOV     R5,A
00E2 F4                CPL     A
00E3 5E                ANL     A,R6
00E4 FE                MOV     R6,A
00E5 900000      R     MOV     DPTR,#MonMask
00E8 E0                MOVX    A,@DPTR
00E9 5D                ANL     A,R5
00EA 4E                ORL     A,R6
00EB FE                MOV     R6,A
00EC 900000      R     MOV     DPTR,#MonWdata
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1080
00F0 EF                MOV     A,R7
00F1 120000      R     LCALL   L?0693
00F4 EE                MOV     A,R6
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1081
00F6 900000      R     MOV     DPTR,#MonIndex
00F9 E0                MOVX    A,@DPTR
00FA FF                MOV     R7,A
00FB 900000      R     MOV     DPTR,#MonPage
00FE 120000      R     LCALL   L?0655
0101 E0                MOVX    A,@DPTR
0102 900000      R     MOV     DPTR,#MonRdata
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1082
0106 8039              SJMP    ?C0121
0108         ?C0120:
                                           ; SOURCE LINE # 1084
                                           ; SOURCE LINE # 1085
0108 AF01              MOV     R7,AR1
010A 900000      R     MOV     DPTR,#MonIndex
010D E0                MOVX    A,@DPTR
010E FD                MOV     R5,A
010F 120000      E     LCALL   _ReadI2CByte
0112 900000      R     MOV     DPTR,#MonRdata
0115 EF                MOV     A,R7
0116 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1086
0117 900000      R     MOV     DPTR,#mask
011A E0                MOVX    A,@DPTR
011B FE                MOV     R6,A
011C F4                CPL     A
011D 5F                ANL     A,R7
011E FF                MOV     R7,A
011F 900000      R     MOV     DPTR,#MonMask
0122 E0                MOVX    A,@DPTR
0123 5E                ANL     A,R6
0124 4F                ORL     A,R7
0125 900000      R     MOV     DPTR,#MonWdata
0128 F0                MOVX    @DPTR,A
0129 FB                MOV     R3,A
                                           ; SOURCE LINE # 1088
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 89  

012A 900000      R     MOV     DPTR,#Slave
012D 120000      R     LCALL   L?0672
0130 120000      E     LCALL   _WriteI2CByte
                                           ; SOURCE LINE # 1089
0133 900000      R     MOV     DPTR,#Slave
0136 120000      R     LCALL   L?0672
0139 120000      E     LCALL   _ReadI2CByte
013C 900000      R     MOV     DPTR,#MonRdata
013F EF                MOV     A,R7
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1090
0141         ?C0121:
                                           ; SOURCE LINE # 1091
0141 30000F      R     JNB     echo,?C0111
                                           ; SOURCE LINE # 1093
0144 7BFF              MOV     R3,#0FFH
0146 7A00        R     MOV     R2,#HIGH ?SC_238
0148 7900        R     MOV     R1,#LOW ?SC_238
014A 900000      R     MOV     DPTR,#Slave
014D 120000      R     LCALL   L?0665
0150         ?C0567:
0150 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1094
0153         ?C0111:
0153 22                RET     
             ; FUNCTION MonWriteBit (END)

             ; FUNCTION MonWait (BEGIN)
                                           ; SOURCE LINE # 1098
                                           ; SOURCE LINE # 1099
                                           ; SOURCE LINE # 1102
0000 900000      R     MOV     DPTR,#argc
0003 E0                MOVX    A,@DPTR
0004 C3                CLR     C
0005 9405              SUBB    A,#05H
0007 5006              JNC     ?C0123
                                           ; SOURCE LINE # 1103
0009 120000      R     LCALL   L?0726
000C 020000      R     LJMP    ?C0568
                                           ; SOURCE LINE # 1105
000F         ?C0123:
                                           ; SOURCE LINE # 1106
000F 120000      R     LCALL   L?0643
0012 120000      E     LCALL   _a2h
0015 900000      R     MOV     DPTR,#reg
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1107
001A 900000      R     MOV     DPTR,#argv+06H
001D 120000      R     LCALL   L?0644
0020 120000      E     LCALL   _a2h
0023 900000      R     MOV     DPTR,#mask
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1108
0028 900000      R     MOV     DPTR,#argv+09H
002B 120000      R     LCALL   L?0644
002E 120000      E     LCALL   _a2h
0031 900000      R     MOV     DPTR,#result
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1109
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 90  

0036 900000      R     MOV     DPTR,#argv+0CH
0039 120000      R     LCALL   L?0644
003C 120000      E     LCALL   _a2h
003F 900000      R     MOV     DPTR,#max
0042 EE                MOV     A,R6
0043 F0                MOVX    @DPTR,A
0044 A3                INC     DPTR
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1110
0047 E4                CLR     A
0048 900000      R     MOV     DPTR,#i
004B F0                MOVX    @DPTR,A
004C A3                INC     DPTR
004D F0                MOVX    @DPTR,A
004E         ?C0125:
004E 120000      R     LCALL   L?0724
0051 503E              JNC     ?C0126
                                           ; SOURCE LINE # 1111
0053 900000      R     MOV     DPTR,#reg
0056 E0                MOVX    A,@DPTR
0057 2500        E     ADD     A,regTW88+01H
0059 120000      R     LCALL   L?0660
005C FF                MOV     R7,A
005D 900000      R     MOV     DPTR,#mask
0060 E0                MOVX    A,@DPTR
0061 FE                MOV     R6,A
0062 EF                MOV     A,R7
0063 5E                ANL     A,R6
0064 FF                MOV     R7,A
0065 A3                INC     DPTR
0066 E0                MOVX    A,@DPTR
0067 B50710            CJNE    A,AR7,?C0128
                                           ; SOURCE LINE # 1112
006A 7A00        R     MOV     R2,#HIGH ?SC_324
006C 7900        R     MOV     R1,#LOW ?SC_324
006E 900000      R     MOV     DPTR,#i
0071 120000      R     LCALL   L?0698
0074 F0                MOVX    @DPTR,A
0075 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1113
0078 8017              SJMP    ?C0126
                                           ; SOURCE LINE # 1114
007A         ?C0128:
                                           ; SOURCE LINE # 1115
007A 7F02              MOV     R7,#02H
007C 7E00              MOV     R6,#00H
007E 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 1116
0081 900000      R     MOV     DPTR,#i+01H
0084 E0                MOVX    A,@DPTR
0085 04                INC     A
0086 F0                MOVX    @DPTR,A
0087 70C5              JNZ     ?C0125
0089 900000      R     MOV     DPTR,#i
008C E0                MOVX    A,@DPTR
008D 04                INC     A
008E F0                MOVX    @DPTR,A
008F         ?C0548:
008F 80BD              SJMP    ?C0125
0091         ?C0126:
                                           ; SOURCE LINE # 1117
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 91  

0091 120000      R     LCALL   L?0724
0094 4026              JC      ?C0124
                                           ; SOURCE LINE # 1118
0096 7A00        R     MOV     R2,#HIGH ?SC_333
0098 7900        R     MOV     R1,#LOW ?SC_333
009A 900000      R     MOV     DPTR,#reg
009D 120000      R     LCALL   L?0714
00A0 F0                MOVX    @DPTR,A
00A1 900000      R     MOV     DPTR,#mask
00A4 E0                MOVX    A,@DPTR
00A5 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
00A8 F0                MOVX    @DPTR,A
00A9 900000      R     MOV     DPTR,#result
00AC E0                MOVX    A,@DPTR
00AD 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
00B0 F0                MOVX    @DPTR,A
00B1 900000      E     MOV     DPTR,#?_Printf?BYTE+06H
00B4 EE                MOV     A,R6
00B5 F0                MOVX    @DPTR,A
00B6 A3                INC     DPTR
00B7 EF                MOV     A,R7
00B8 F0                MOVX    @DPTR,A
00B9         ?C0568:
00B9 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1119
00BC         ?C0124:
00BC 22                RET     
             ; FUNCTION MonWait (END)

             ; FUNCTION MonHelp (BEGIN)
                                           ; SOURCE LINE # 1124
                                           ; SOURCE LINE # 1125
                                           ; SOURCE LINE # 1126
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_366
0004 7900        R     MOV     R1,#LOW ?SC_366
0006 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1127
0009 7A00        R     MOV     R2,#HIGH ?SC_423
000B 7900        R     MOV     R1,#LOW ?SC_423
                                           ; SOURCE LINE # 1128
                                           ; SOURCE LINE # 1129
000D 120000      R     LCALL   L?0661
0010 7A00        R     MOV     R2,#HIGH ?SC_480
0012 7900        R     MOV     R1,#LOW ?SC_480
0014 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1130
0017 7A00        R     MOV     R2,#HIGH ?SC_515
0019 7900        R     MOV     R1,#LOW ?SC_515
                                           ; SOURCE LINE # 1131
001B 120000      R     LCALL   L?0690
001E 7A00        R     MOV     R2,#HIGH ?SC_551
0020 7900        R     MOV     R1,#LOW ?SC_551
0022 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1132
0025 7A00        R     MOV     R2,#HIGH ?SC_581
0027 7900        R     MOV     R1,#LOW ?SC_581
                                           ; SOURCE LINE # 1133
0029 120000      R     LCALL   L?0690
002C 7A00        R     MOV     R2,#HIGH ?SC_631
002E 7900        R     MOV     R1,#LOW ?SC_631
0030 120000      E     LCALL   _Puts
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 92  

                                           ; SOURCE LINE # 1134
0033 7A00        R     MOV     R2,#HIGH ?SC_673
0035 7900        R     MOV     R1,#LOW ?SC_673
                                           ; SOURCE LINE # 1136
0037 120000      R     LCALL   L?0715
003A 7A00        R     MOV     R2,#HIGH ?SC_720
003C 7900        R     MOV     R1,#LOW ?SC_720
003E 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1138
0041 7A00        R     MOV     R2,#HIGH ?SC_366
0043 7900        R     MOV     R1,#LOW ?SC_366
                                           ; SOURCE LINE # 1139
0045 120000      R     LCALL   L?0715
0048 7A00        R     MOV     R2,#HIGH ?SC_768
004A 7900        R     MOV     R1,#LOW ?SC_768
004C 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1140
004F 7BFF              MOV     R3,#0FFH
0051 7A00        R     MOV     R2,#HIGH ?SC_827
0053 7900        R     MOV     R1,#LOW ?SC_827
0055 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1141
0058 7BFF              MOV     R3,#0FFH
005A 7A00        R     MOV     R2,#HIGH ?SC_892
005C 7900        R     MOV     R1,#LOW ?SC_892
005E 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1142
0061 7BFF              MOV     R3,#0FFH
0063 7A00        R     MOV     R2,#HIGH ?SC_957
0065 7900        R     MOV     R1,#LOW ?SC_957
0067 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1143
006A 7BFF              MOV     R3,#0FFH
006C 7A00        R     MOV     R2,#HIGH ?SC_1030
006E 7900        R     MOV     R1,#LOW ?SC_1030
0070 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1144
0073 7A00        R     MOV     R2,#HIGH ?SC_1103
0075 7900        R     MOV     R1,#LOW ?SC_1103
                                           ; SOURCE LINE # 1145
                                           ; SOURCE LINE # 1164
0077 120000      R     LCALL   L?0661
007A 7A00        R     MOV     R2,#HIGH ?SC_1137
007C 7900        R     MOV     R1,#LOW ?SC_1137
007E 020000      E     LJMP    _Puts
                                           ; SOURCE LINE # 1166
0081         L?0661:
0081 7BFF              MOV     R3,#0FFH
0083 120000      E     LCALL   _Puts
0086 7BFF              MOV     R3,#0FFH
0088 7A00        R     MOV     R2,#HIGH ?SC_366
008A 7900        R     MOV     R1,#LOW ?SC_366
008C 120000      E     LCALL   _Puts
008F 7BFF              MOV     R3,#0FFH
0091 22                RET     
0092         L?0690:
0092 7BFF              MOV     R3,#0FFH
0094 120000      E     LCALL   _Puts
0097 7BFF              MOV     R3,#0FFH
0099 22                RET     
009A         L?0715:
009A 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 93  

009C 120000      E     LCALL   _Puts
009F 7BFF              MOV     R3,#0FFH
00A1 22                RET     
             ; FUNCTION MonHelp (END)

             ; FUNCTION MonGetCommand (BEGIN)
                                           ; SOURCE LINE # 1189
                                           ; SOURCE LINE # 1190
                                           ; SOURCE LINE # 1194
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#ret
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1196
0005 120000      E     LCALL   RS_ready
0008 EF                MOV     A,R7
0009 7002              JNZ     ?C0131
000B FF                MOV     R7,A
000C 22                RET     
000D         ?C0131:
                                           ; SOURCE LINE # 1197
000D 120000      E     LCALL   RS_rx
0010 900000      R     MOV     DPTR,#ch
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1200
0015 900000      R     MOV     DPTR,#comment
0018 E0                MOVX    A,@DPTR
0019 6016              JZ      ?C0133
                                           ; SOURCE LINE # 1201
001B 900000      R     MOV     DPTR,#ch
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 640D              XRL     A,#0DH
0022 6004              JZ      ?C0135
0024 EF                MOV     A,R7
0025 B41B07            CJNE    A,#01BH,?C0134
0028         ?C0135:
0028 E4                CLR     A
0029 900000      R     MOV     DPTR,#comment
002C F0                MOVX    @DPTR,A
002D 8016              SJMP    ?C0137
002F         ?C0134:
                                           ; SOURCE LINE # 1202
                                           ; SOURCE LINE # 1203
                                           ; SOURCE LINE # 1204
002F 800E              SJMP    ?C0569
                                           ; SOURCE LINE # 1205
                                           ; SOURCE LINE # 1206
0031         ?C0133:
                                           ; SOURCE LINE # 1207
0031 900000      R     MOV     DPTR,#ch
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 B43B0C            CJNE    A,#03BH,?C0137
                                           ; SOURCE LINE # 1208
0039 900000      R     MOV     DPTR,#comment
003C 7401              MOV     A,#01H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1209
003F         ?C0569:
003F 120000      R     LCALL   _Mon_tx
                                           ; SOURCE LINE # 1210
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 94  

0042 7F00              MOV     R7,#00H
0044 22                RET     
                                           ; SOURCE LINE # 1211
0045         ?C0137:
                                           ; SOURCE LINE # 1214
0045 900000      R     MOV     DPTR,#ch
0048 E0                MOVX    A,@DPTR
0049 120000      E     LCALL   ?C?CCASE
004C 0000        R     DW      ?C0166
004E 08                DB      08H
004F 0000        R     DW      ?C0141
0051 0D                DB      0DH
0052 0000        R     DW      ?C0140
0054 1B                DB      01BH
0055 0000        R     DW      ?C0168
0057 2C                DB      02CH
0058 0000        R     DW      ?C0174
005A 2E                DB      02EH
005B 0000        R     DW      ?C0155
005D 2F                DB      02FH
005E 0000        R     DW      ?C0171
0060 3C                DB      03CH
0061 0000        R     DW      ?C0177
0063 3E                DB      03EH
0064 0000        R     DW      ?C0156
0066 60                DB      060H
0067 0000              DW      00H
0069 0000        R     DW      ?C0180
                                           ; SOURCE LINE # 1216
006B         ?C0140:
                                           ; SOURCE LINE # 1217
006B E4                CLR     A
006C 900000      R     MOV     DPTR,#argc
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1218
                                           ; SOURCE LINE # 1219
                                           ; SOURCE LINE # 1220
                                           ; SOURCE LINE # 1221
0070 803C              SJMP    ?C0570
                                           ; SOURCE LINE # 1224
0072         ?C0141:
                                           ; SOURCE LINE # 1226
0072 900000      R     MOV     DPTR,#incnt
0075 E0                MOVX    A,@DPTR
0076 7006              JNZ     ?C0142
                                           ; SOURCE LINE # 1227
0078 120000      R     LCALL   Prompt
                                           ; SOURCE LINE # 1228
007B 020000      R     LJMP    ?C0139
                                           ; SOURCE LINE # 1229
007E         ?C0142:
                                           ; SOURCE LINE # 1231
007E 900000      R     MOV     DPTR,#incnt
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 04                INC     A
0084 F0                MOVX    @DPTR,A
0085 7400        R     MOV     A,#LOW monstr
0087 2F                ADD     A,R7
0088 120000      R     LCALL   L?0689
008B E4                CLR     A
008C F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 95  

                                           ; SOURCE LINE # 1232
008D 900000      R     MOV     DPTR,#argc
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1234
0091 900000      R     MOV     DPTR,#i
0094 F0                MOVX    @DPTR,A
0095         ?C0143:
0095 120000      R     LCALL   L?0751
0098 500E              JNC     ?C0144
009A 120000      R     LCALL   L?0687
009D E0                MOVX    A,@DPTR
009E D3                SETB    C
009F 9420              SUBB    A,#020H
00A1 5005              JNC     ?C0144
00A3         ?C0146:
00A3         ?C0145:
00A3 120000      R     LCALL   L?0771
00A6 80ED              SJMP    ?C0143
00A8         ?C0144:
                                           ; SOURCE LINE # 1236
00A8 120000      R     LCALL   L?0687
00AB E0                MOVX    A,@DPTR
00AC 700E              JNZ     ?C0147
                                           ; SOURCE LINE # 1237
00AE         ?C0570:
00AE 900000      R     MOV     DPTR,#incnt
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1238
00B2 900000      R     MOV     DPTR,#comment
00B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1239
00B6 120000      R     LCALL   Prompt
                                           ; SOURCE LINE # 1240
00B9 7F00              MOV     R7,#00H
00BB 22                RET     
                                           ; SOURCE LINE # 1241
00BC         ?C0147:
                                           ; SOURCE LINE # 1242
00BC 120000      R     LCALL   L?0762
00BF 900000      R     MOV     DPTR,#argv
00C2 120000      R     LCALL   L?0773
                                           ; SOURCE LINE # 1243
00C5         ?C0148:
00C5 120000      R     LCALL   L?0751
00C8 503E              JNC     ?C0149
                                           ; SOURCE LINE # 1244
00CA 120000      R     LCALL   L?0688
00CD E0                MOVX    A,@DPTR
00CE D3                SETB    C
00CF 9420              SUBB    A,#020H
00D1 5030              JNC     ?C0150
                                           ; SOURCE LINE # 1245
00D3 120000      R     LCALL   L?0688
00D6 E4                CLR     A
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1247
00D8 800E              SJMP    ?C0571
00DA         ?C0152:
                                           ; SOURCE LINE # 1248
00DA 900000      R     MOV     DPTR,#i
00DD E0                MOVX    A,@DPTR
00DE 2400        R     ADD     A,#LOW monstr
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 96  

00E0 120000      R     LCALL   L?0689
00E3 E0                MOVX    A,@DPTR
00E4 FF                MOV     R7,A
00E5 B42005            CJNE    A,#020H,?C0153
00E8         ?C0571:
00E8 120000      R     LCALL   L?0771
00EB 80ED              SJMP    ?C0152
00ED         ?C0153:
                                           ; SOURCE LINE # 1249
00ED 900000      R     MOV     DPTR,#argc
00F0 E0                MOVX    A,@DPTR
00F1 04                INC     A
00F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1250
00F3 EF                MOV     A,R7
00F4 600D              JZ      ?C0150
                                           ; SOURCE LINE # 1251
00F6 120000      R     LCALL   L?0762
00F9 900000      R     MOV     DPTR,#argc
00FC E0                MOVX    A,@DPTR
00FD 120000      R     LCALL   L?0743
0100 120000      R     LCALL   L?0773
                                           ; SOURCE LINE # 1252
                                           ; SOURCE LINE # 1253
                                           ; SOURCE LINE # 1254
0103         ?C0150:
0103 120000      R     LCALL   L?0772
0106 80BD              SJMP    ?C0148
0108         ?C0149:
                                           ; SOURCE LINE # 1256
0108 900000      R     MOV     DPTR,#ret
010B 7401              MOV     A,#01H
                                           ; SOURCE LINE # 1257
010D 120000      R     LCALL   L?0774
                                           ; SOURCE LINE # 1258
0110 E4                CLR     A
0111 900000      R     MOV     DPTR,#incnt
0114 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1260
0115 020000      R     LJMP    ?C0139
                                           ; SOURCE LINE # 1263
0118         ?C0155:
                                           ; SOURCE LINE # 1264
0118 900000      R     MOV     DPTR,#last_argc
011B E0                MOVX    A,@DPTR
011C 900000      R     MOV     DPTR,#argc
011F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1265
0120 900000      R     MOV     DPTR,#ret
0123 7401              MOV     A,#01H
0125 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1266
0126 020000      R     LJMP    ?C0139
                                           ; SOURCE LINE # 1269
0129         ?C0156:
                                           ; SOURCE LINE # 1270
                                           ; SOURCE LINE # 1273
0129 E4                CLR     A
012A 900000      R     MOV     DPTR,#j
012D F0                MOVX    @DPTR,A
012E         ?C0157:
012E 900000      R     MOV     DPTR,#last_argc
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 97  

0131 E0                MOVX    A,@DPTR
0132 FF                MOV     R7,A
0133 900000      R     MOV     DPTR,#j
0136 E0                MOVX    A,@DPTR
0137 C3                CLR     C
0138 9F                SUBB    A,R7
0139 4003              JC      $ + 5H
013B 020000      R     LJMP    ?C0139
                                           ; SOURCE LINE # 1274
013E E4                CLR     A
013F 900000      R     MOV     DPTR,#i
0142 F0                MOVX    @DPTR,A
0143         ?C0160:
0143 900000      R     MOV     DPTR,#i
0146 E0                MOVX    A,@DPTR
0147 FF                MOV     R7,A
0148 C3                CLR     C
0149 9464              SUBB    A,#064H
014B 5039              JNC     ?C0159
                                           ; SOURCE LINE # 1275
014D A3                INC     DPTR
014E E0                MOVX    A,@DPTR
014F FE                MOV     R6,A
0150 120000      R     LCALL   L?0743
0153 120000      R     LCALL   L?0644
0156 120000      R     LCALL   L?0712
0159 900000      R     MOV     DPTR,#ch
015C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1276
015D 7017              JNZ     ?C0163
                                           ; SOURCE LINE # 1277
015F 900000      R     MOV     DPTR,#last_argc
0162 E0                MOVX    A,@DPTR
0163 14                DEC     A
0164 B50603            CJNE    A,AR6,?C0164
0167 7F00              MOV     R7,#00H
0169 22                RET     
016A         ?C0164:
                                           ; SOURCE LINE # 1278
016A 900000      R     MOV     DPTR,#ch
016D 7420              MOV     A,#020H
016F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1279
0170 FF                MOV     R7,A
0171 120000      E     LCALL   _RS_ungetch
                                           ; SOURCE LINE # 1280
0174 8010              SJMP    ?C0159
                                           ; SOURCE LINE # 1281
0176         ?C0163:
                                           ; SOURCE LINE # 1282
                                           ; SOURCE LINE # 1283
0176 900000      R     MOV     DPTR,#ch
0179 E0                MOVX    A,@DPTR
017A FF                MOV     R7,A
017B 120000      E     LCALL   _RS_ungetch
                                           ; SOURCE LINE # 1284
                                           ; SOURCE LINE # 1285
017E         ?C0162:
017E 900000      R     MOV     DPTR,#i
0181 E0                MOVX    A,@DPTR
0182 04                INC     A
0183 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 98  

0184 80BD              SJMP    ?C0160
                                           ; SOURCE LINE # 1286
0186         ?C0159:
0186 900000      R     MOV     DPTR,#j
0189 E0                MOVX    A,@DPTR
018A 04                INC     A
018B F0                MOVX    @DPTR,A
018C 80A0              SJMP    ?C0157
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1288
                                           ; SOURCE LINE # 1291
018E         ?C0166:
                                           ; SOURCE LINE # 1292
018E 900000      R     MOV     DPTR,#incnt
0191 E0                MOVX    A,@DPTR
0192 605F              JZ      ?C0139
                                           ; SOURCE LINE # 1293
0194 14                DEC     A
0195 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1294
0196 900000      R     MOV     DPTR,#ch
0199 E0                MOVX    A,@DPTR
019A FF                MOV     R7,A
019B 120000      R     LCALL   _Mon_tx
                                           ; SOURCE LINE # 1295
019E 7F20              MOV     R7,#020H
01A0 120000      R     LCALL   _Mon_tx
                                           ; SOURCE LINE # 1296
01A3 E0                MOVX    A,@DPTR
01A4 FF                MOV     R7,A
01A5 120000      R     LCALL   _Mon_tx
                                           ; SOURCE LINE # 1297
                                           ; SOURCE LINE # 1298
01A8 8049              SJMP    ?C0139
                                           ; SOURCE LINE # 1301
01AA         ?C0168:
                                           ; SOURCE LINE # 1302
01AA 900000      R     MOV     DPTR,#incnt
01AD E0                MOVX    A,@DPTR
01AE 6002              JZ      ?C0169
                                           ; SOURCE LINE # 1303
                                           ; SOURCE LINE # 1304
                                           ; SOURCE LINE # 1305
01B0 802B              SJMP    ?C0578
01B2         ?C0169:
                                           ; SOURCE LINE # 1307
01B2 E4                CLR     A
01B3 FF                MOV     R7,A
                                           ; SOURCE LINE # 1308
01B4 8022              SJMP    ?C0577
                                           ; SOURCE LINE # 1310
01B6         ?C0171:
                                           ; SOURCE LINE # 1311
01B6 900000      R     MOV     DPTR,#incnt
01B9 E0                MOVX    A,@DPTR
01BA 6002              JZ      ?C0172
                                           ; SOURCE LINE # 1312
01BC         ?C0572:
                                           ; SOURCE LINE # 1313
                                           ; SOURCE LINE # 1314
01BC 801F              SJMP    ?C0578
01BE         ?C0172:
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 99  

                                           ; SOURCE LINE # 1316
01BE 7F0A              MOV     R7,#0AH
01C0         ?C0573:
                                           ; SOURCE LINE # 1317
01C0 8016              SJMP    ?C0577
                                           ; SOURCE LINE # 1320
01C2         ?C0174:
                                           ; SOURCE LINE # 1321
01C2 900000      R     MOV     DPTR,#incnt
01C5 E0                MOVX    A,@DPTR
01C6 6002              JZ      ?C0175
                                           ; SOURCE LINE # 1322
01C8         ?C0574:
                                           ; SOURCE LINE # 1323
                                           ; SOURCE LINE # 1324
01C8 8013              SJMP    ?C0578
01CA         ?C0175:
                                           ; SOURCE LINE # 1326
01CA 7F01              MOV     R7,#01H
01CC         ?C0575:
                                           ; SOURCE LINE # 1327
01CC 800A              SJMP    ?C0577
                                           ; SOURCE LINE # 1329
01CE         ?C0177:
                                           ; SOURCE LINE # 1330
01CE 900000      R     MOV     DPTR,#incnt
01D1 E0                MOVX    A,@DPTR
01D2 6002              JZ      ?C0178
                                           ; SOURCE LINE # 1331
01D4         ?C0576:
                                           ; SOURCE LINE # 1332
                                           ; SOURCE LINE # 1333
01D4 8007              SJMP    ?C0578
01D6         ?C0178:
                                           ; SOURCE LINE # 1335
01D6 7F0B              MOV     R7,#0BH
01D8         ?C0577:
01D8 120000      R     LCALL   _MonIncDecI2C
                                           ; SOURCE LINE # 1336
01DB 8016              SJMP    ?C0139
                                           ; SOURCE LINE # 1338
01DD         ?C0180:
                                           ; SOURCE LINE # 1339
01DD         ?C0578:
01DD 900000      R     MOV     DPTR,#ch
01E0 E0                MOVX    A,@DPTR
01E1 FF                MOV     R7,A
01E2 120000      R     LCALL   _Mon_tx
                                           ; SOURCE LINE # 1340
01E5 E0                MOVX    A,@DPTR
01E6 FF                MOV     R7,A
01E7 900000      R     MOV     DPTR,#incnt
01EA E0                MOVX    A,@DPTR
01EB FE                MOV     R6,A
01EC 04                INC     A
01ED F0                MOVX    @DPTR,A
01EE 120000      R     LCALL   L?0688
01F1 EF                MOV     A,R7
01F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1341
                                           ; SOURCE LINE # 1342
01F3         ?C0139:
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 100 

                                           ; SOURCE LINE # 1344
01F3 900000      R     MOV     DPTR,#ret
01F6 E0                MOVX    A,@DPTR
01F7 FF                MOV     R7,A
01F8 6008              JZ      ?C0181
                                           ; SOURCE LINE # 1345
01FA E4                CLR     A
01FB 900000      R     MOV     DPTR,#comment
                                           ; SOURCE LINE # 1346
01FE 120000      R     LCALL   L?0774
                                           ; SOURCE LINE # 1347
0201 22                RET     
                                           ; SOURCE LINE # 1348
0202         ?C0181:
                                           ; SOURCE LINE # 1349
                                           ; SOURCE LINE # 1350
0202 900000      R     MOV     DPTR,#ret
0205 E0                MOVX    A,@DPTR
0206 FF                MOV     R7,A
                                           ; SOURCE LINE # 1351
                                           ; SOURCE LINE # 1352
0207         ?C0132:
0207 22                RET     
             ; FUNCTION MonGetCommand (END)

             ; FUNCTION WaitVBlank1 (BEGIN)
                                           ; SOURCE LINE # 1537
                                           ; SOURCE LINE # 1538
                                           ; SOURCE LINE # 1546
0000 120000      R     LCALL   L?0744
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1547
;---- Variable 'loop' assigned to Register 'R6/R7' ----
0006 E4                CLR     A
0007 FF                MOV     R7,A
0008 FE                MOV     R6,A
0009         ?C0183:
                                           ; SOURCE LINE # 1548
                                           ; SOURCE LINE # 1549
0009 120000      R     LCALL   L?0744
000C E0                MOVX    A,@DPTR
000D 900000      R     MOV     DPTR,#vdata
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1551
0011 E0                MOVX    A,@DPTR
0012 20E617            JB      ACC.6,?C0187
                                           ; SOURCE LINE # 1552
0015         ?C0185:
                                           ; SOURCE LINE # 1553
0015 0F                INC     R7
0016 BF0001            CJNE    R7,#00H,?C0549
0019 0E                INC     R6
001A         ?C0549:
                                           ; SOURCE LINE # 1554
001A D3                SETB    C
001B EF                MOV     A,R7
001C 94FE              SUBB    A,#0FEH
001E EE                MOV     A,R6
001F 94FF              SUBB    A,#0FFH
0021 40E6              JC      ?C0183
                                           ; SOURCE LINE # 1555
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 101 

0023 7BFF              MOV     R3,#0FFH
0025 7A00        R     MOV     R2,#HIGH ?SC_1139
0027 7900        R     MOV     R1,#LOW ?SC_1139
0029 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 1556
                                           ; SOURCE LINE # 1557
                                           ; SOURCE LINE # 1558
                                           ; SOURCE LINE # 1561
002C         ?C0187:
002C 22                RET     
             ; FUNCTION WaitVBlank1 (END)

             ; FUNCTION Monitor (BEGIN)
                                           ; SOURCE LINE # 1571
                                           ; SOURCE LINE # 1572
                                           ; SOURCE LINE # 1578
0000 900000      R     MOV     DPTR,#MonString
0003 120000      R     LCALL   L?0644
0006 EA                MOV     A,R2
0007 49                ORL     A,R1
0008 4B                ORL     A,R3
0009 602B              JZ      ?C0188
                                           ; SOURCE LINE # 1579
000B 900000      R     MOV     DPTR,#MonString
000E A3                INC     DPTR
000F E4                CLR     A
0010 75F001            MOV     B,#01H
0013 120000      E     LCALL   ?C?ILDIX
0016 A9F0              MOV     R1,B
0018 FA                MOV     R2,A
0019 120000      E     LCALL   ?C?CLDPTR
001C FF                MOV     R7,A
001D 120000      E     LCALL   _RS_ungetch
                                           ; SOURCE LINE # 1580
0020 900000      R     MOV     DPTR,#MonString
0023 120000      R     LCALL   L?0644
0026 120000      E     LCALL   ?C?CLDPTR
0029 700B              JNZ     ?C0188
002B F9                MOV     R1,A
002C 900000      R     MOV     DPTR,#MonString
002F C9                XCH     A,R1
0030 F0                MOVX    @DPTR,A
0031 A3                INC     DPTR
0032 F0                MOVX    @DPTR,A
0033 A3                INC     DPTR
0034 E9                MOV     A,R1
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1581
0036         ?C0188:
                                           ; SOURCE LINE # 1583
0036 120000      R     LCALL   MonGetCommand
0039 EF                MOV     A,R7
003A 7003              JNZ     $ + 5H
003C 020000      R     LJMP    ?C0191
003F         ?C0190:
                                           ; SOURCE LINE # 1586
003F 120000      R     LCALL   L?0645
0042 7400        R     MOV     A,#HIGH ?SC_1155
0044 F0                MOVX    @DPTR,A
0045 7400        R     MOV     A,#LOW ?SC_1155
0047 120000      R     LCALL   L?0619
004A 7006              JNZ     ?C0192
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 102 

                                           ; SOURCE LINE # 1587
004C 120000      R     LCALL   MonWriteI2CByte
                                           ; SOURCE LINE # 1588
004F 020000      R     LJMP    ?C0193
0052         ?C0192:
                                           ; SOURCE LINE # 1589
0052 120000      R     LCALL   L?0645
0055 7400        R     MOV     A,#HIGH ?SC_1157
0057 F0                MOVX    @DPTR,A
0058 7400        R     MOV     A,#LOW ?SC_1157
005A 120000      R     LCALL   L?0619
005D 7006              JNZ     ?C0194
                                           ; SOURCE LINE # 1590
005F 120000      R     LCALL   MonNewWriteI2CByte
                                           ; SOURCE LINE # 1591
0062 020000      R     LJMP    ?C0193
0065         ?C0194:
                                           ; SOURCE LINE # 1593
0065 120000      R     LCALL   L?0646
0068 7400        R     MOV     A,#HIGH ?SC_1159
006A F0                MOVX    @DPTR,A
006B 7400        R     MOV     A,#LOW ?SC_1159
006D 120000      R     LCALL   L?0621
0070 7006              JNZ     ?C0196
                                           ; SOURCE LINE # 1594
0072 120000      R     LCALL   MonReadI2CByte
                                           ; SOURCE LINE # 1595
0075 020000      R     LJMP    ?C0193
0078         ?C0196:
                                           ; SOURCE LINE # 1596
0078 120000      R     LCALL   L?0646
007B 7400        R     MOV     A,#HIGH ?SC_1161
007D F0                MOVX    @DPTR,A
007E 7400        R     MOV     A,#LOW ?SC_1161
0080 120000      R     LCALL   L?0621
0083 7006              JNZ     ?C0198
                                           ; SOURCE LINE # 1597
0085 120000      R     LCALL   MonNewReadI2CByte
                                           ; SOURCE LINE # 1598
0088 020000      R     LJMP    ?C0193
008B         ?C0198:
                                           ; SOURCE LINE # 1600
008B 120000      R     LCALL   L?0646
008E 7400        R     MOV     A,#HIGH ?SC_1163
0090 F0                MOVX    @DPTR,A
0091 7400        R     MOV     A,#LOW ?SC_1163
0093 120000      R     LCALL   L?0623
0096 700F              JNZ     ?C0200
                                           ; SOURCE LINE # 1601
0098 7BFF              MOV     R3,#0FFH
009A 7A00        R     MOV     R2,#HIGH ?SC_1165
009C 7900        R     MOV     R1,#LOW ?SC_1165
009E 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1602
00A1 120000      R     LCALL   MonDumpI2C
                                           ; SOURCE LINE # 1603
00A4 020000      R     LJMP    ?C0193
00A7         ?C0200:
                                           ; SOURCE LINE # 1604
00A7 120000      R     LCALL   L?0646
00AA 7400        R     MOV     A,#HIGH ?SC_1177
00AC F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 103 

00AD 7400        R     MOV     A,#LOW ?SC_1177
00AF 120000      R     LCALL   L?0623
00B2 7006              JNZ     ?C0202
                                           ; SOURCE LINE # 1605
00B4 120000      R     LCALL   MonNewDumpI2C
                                           ; SOURCE LINE # 1606
00B7 020000      R     LJMP    ?C0193
00BA         ?C0202:
                                           ; SOURCE LINE # 1609
00BA 120000      R     LCALL   L?0646
00BD 7400        R     MOV     A,#HIGH ?SC_1179
00BF F0                MOVX    @DPTR,A
00C0 7400        R     MOV     A,#LOW ?SC_1179
00C2 120000      R     LCALL   L?0625
00C5 7006              JNZ     ?C0204
                                           ; SOURCE LINE # 1610
00C7 120000      R     LCALL   MonWriteBit
                                           ; SOURCE LINE # 1611
00CA 020000      R     LJMP    ?C0193
00CD         ?C0204:
                                           ; SOURCE LINE # 1613
00CD 120000      R     LCALL   L?0646
00D0 7400        R     MOV     A,#HIGH ?SC_1181
00D2 F0                MOVX    @DPTR,A
00D3 7400        R     MOV     A,#LOW ?SC_1181
00D5 120000      R     LCALL   L?0625
00D8 701A              JNZ     ?C0206
                                           ; SOURCE LINE # 1614
00DA 120000      R     LCALL   L?0643
00DD 120000      E     LCALL   _a2h
00E0 900000      R     MOV     DPTR,#MonAddress
00E3 EF                MOV     A,R7
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1615
00E5 7A00        R     MOV     R2,#HIGH ?SC_1183
00E7 7900        R     MOV     R1,#LOW ?SC_1183
00E9 7406              MOV     A,#06H
00EB 120000      R     LCALL   L?0742
00EE A3                INC     DPTR
00EF 744F              MOV     A,#04FH
                                           ; SOURCE LINE # 1616
00F1 020000      R     LJMP    ?C0580
00F4         ?C0206:
                                           ; SOURCE LINE # 1618
00F4 120000      R     LCALL   L?0646
00F7 7400        R     MOV     A,#HIGH ?SC_1201
00F9 F0                MOVX    @DPTR,A
00FA 7400        R     MOV     A,#LOW ?SC_1201
00FC 120000      R     LCALL   L?0627
00FF 7006              JNZ     ?C0208
                                           ; SOURCE LINE # 1619
0101 120000      R     LCALL   MonWait
                                           ; SOURCE LINE # 1620
0104 020000      R     LJMP    ?C0193
0107         ?C0208:
                                           ; SOURCE LINE # 1622
0107 120000      R     LCALL   L?0646
010A 7400        R     MOV     A,#HIGH ?SC_1206
010C F0                MOVX    @DPTR,A
010D 7400        R     MOV     A,#LOW ?SC_1206
010F 120000      R     LCALL   L?0627
0112 701C              JNZ     ?C0210
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 104 

                                           ; SOURCE LINE # 1623
0114 120000      R     LCALL   L?0643
0117 120000      E     LCALL   _a2i
011A 900000      R     MOV     DPTR,#wValue
011D EE                MOV     A,R6
011E F0                MOVX    @DPTR,A
011F A3                INC     DPTR
0120 EF                MOV     A,R7
0121 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1624
0122 900000      R     MOV     DPTR,#wValue
0125 E0                MOVX    A,@DPTR
0126 FE                MOV     R6,A
0127 A3                INC     DPTR
0128 E0                MOVX    A,@DPTR
0129 FF                MOV     R7,A
012A 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 1625
012D 020000      R     LJMP    ?C0193
0130         ?C0210:
                                           ; SOURCE LINE # 1627
0130 120000      R     LCALL   L?0646
0133 7400        R     MOV     A,#HIGH ?SC_1212
0135 F0                MOVX    @DPTR,A
0136 7400        R     MOV     A,#LOW ?SC_1212
0138 120000      R     LCALL   L?0629
013B 601A              JZ      ?C0213
013D 120000      R     LCALL   L?0646
0140 7400        R     MOV     A,#HIGH ?SC_1214
0142 F0                MOVX    @DPTR,A
0143 7400        R     MOV     A,#LOW ?SC_1214
0145 120000      R     LCALL   L?0629
0148 600D              JZ      ?C0213
014A 120000      R     LCALL   L?0646
014D 7400        R     MOV     A,#HIGH ?SC_1219
014F F0                MOVX    @DPTR,A
0150 7400        R     MOV     A,#LOW ?SC_1219
0152 120000      R     LCALL   L?0631
0155 7006              JNZ     ?C0212
0157         ?C0213:
                                           ; SOURCE LINE # 1628
0157 120000      R     LCALL   MonHelp
                                           ; SOURCE LINE # 1630
015A 020000      R     LJMP    ?C0193
015D         ?C0212:
                                           ; SOURCE LINE # 1638
015D 120000      R     LCALL   L?0646
0160 7400        R     MOV     A,#HIGH ?SC_1221
0162 F0                MOVX    @DPTR,A
0163 7400        R     MOV     A,#LOW ?SC_1221
0165 120000      R     LCALL   L?0631
0168 6003              JZ      $ + 5H
016A 020000      R     LJMP    ?C0215
                                           ; SOURCE LINE # 1644
016D 120000      R     LCALL   L?0668
0170 5017              JNC     ?C0216
                                           ; SOURCE LINE # 1645
0172 900000      R     MOV     DPTR,#win
0175 7401              MOV     A,#01H
0177 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1646
0178 E59B              MOV     A,SFR_CACHE_EN
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 105 

017A 900000      R     MOV     DPTR,#delay
017D 6005              JZ      ?C0217
017F 120000      R     LCALL   L?0752
0182 8022              SJMP    ?C0219
0184         ?C0217:
                                           ; SOURCE LINE # 1647
0184 120000      R     LCALL   L?0754
                                           ; SOURCE LINE # 1648
0187 801D              SJMP    ?C0219
0189         ?C0216:
                                           ; SOURCE LINE # 1649
                                           ; SOURCE LINE # 1650
0189 120000      R     LCALL   L?0643
018C 120000      E     LCALL   _a2h
018F 900000      R     MOV     DPTR,#win
0192 EF                MOV     A,R7
0193 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1651
0194 7002              JNZ     ?C0220
0196 04                INC     A
0197 F0                MOVX    @DPTR,A
0198         ?C0220:
                                           ; SOURCE LINE # 1652
0198 120000      R     LCALL   L?0702
019B 5009              JNC     ?C0219
                                           ; SOURCE LINE # 1653
019D 900000      R     MOV     DPTR,#argv+06H
01A0 120000      R     LCALL   L?0644
01A3 120000      R     LCALL   L?0705
                                           ; SOURCE LINE # 1655
01A6         ?C0219:
                                           ; SOURCE LINE # 1658
01A6 120000      R     LCALL   L?0732
01A9 F0                MOVX    @DPTR,A
01AA         ?C0222:
                                           ; SOURCE LINE # 1659
                                           ; SOURCE LINE # 1660
                                           ; SOURCE LINE # 1662
                                           ; SOURCE LINE # 1666
01AA 120000      R     LCALL   L?0722
01AD FD                MOV     R5,A
01AE 900000      R     MOV     DPTR,#win
01B1 E0                MOVX    A,@DPTR
01B2 F9                MOV     R1,A
01B3 75F010            MOV     B,#010H
01B6 A4                MUL     AB
01B7 2431              ADD     A,#031H
01B9 120000      R     LCALL   L?0775
01BC 120000      R     LCALL   L?0657
01BF ED                MOV     A,R5
01C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1667
01C1 900000      R     MOV     DPTR,#xpositionL
01C4 E0                MOVX    A,@DPTR
01C5 FD                MOV     R5,A
01C6 E9                MOV     A,R1
01C7 75F010            MOV     B,#010H
01CA A4                MUL     AB
01CB 2432              ADD     A,#032H
01CD 120000      R     LCALL   L?0775
01D0 120000      R     LCALL   L?0657
01D3 ED                MOV     A,R5
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 106 

01D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1670
01D5 120000      R     LCALL   L?0729
                                           ; SOURCE LINE # 1671
01D8 120000      R     LCALL   L?0734
01DB 7003              JNZ     ?C0550
01DD 120000      R     LCALL   L?0718
01E0         ?C0550:
01E0 C3                CLR     C
01E1 900000      R     MOV     DPTR,#i+01H
01E4 E0                MOVX    A,@DPTR
01E5 9421              SUBB    A,#021H
01E7 900000      R     MOV     DPTR,#i
01EA E0                MOVX    A,@DPTR
01EB 9403              SUBB    A,#03H
01ED 40BB              JC      ?C0222
01EF 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 1672
01F2         ?C0215:
                                           ; SOURCE LINE # 1675
01F2 120000      R     LCALL   L?0646
01F5 7400        R     MOV     A,#HIGH ?SC_1226
01F7 F0                MOVX    @DPTR,A
01F8 7400        R     MOV     A,#LOW ?SC_1226
01FA 120000      R     LCALL   L?0633
01FD 7075              JNZ     ?C0226
                                           ; SOURCE LINE # 1681
01FF 120000      R     LCALL   L?0668
0202 5011              JNC     ?C0227
                                           ; SOURCE LINE # 1682
0204 E59B              MOV     A,SFR_CACHE_EN
0206 900000      R     MOV     DPTR,#delay
0209 6005              JZ      ?C0228
020B 120000      R     LCALL   L?0752
020E 800B              SJMP    ?C0230
0210         ?C0228:
                                           ; SOURCE LINE # 1683
0210 120000      R     LCALL   L?0754
                                           ; SOURCE LINE # 1684
0213 8006              SJMP    ?C0230
0215         ?C0227:
                                           ; SOURCE LINE # 1686
0215 120000      R     LCALL   L?0643
0218 120000      R     LCALL   L?0705
021B         ?C0230:
                                           ; SOURCE LINE # 1688
021B 900000      R     MOV     DPTR,#argc
021E E0                MOVX    A,@DPTR
021F B40310            CJNE    A,#03H,?C0231
                                           ; SOURCE LINE # 1689
0222 900000      R     MOV     DPTR,#argv+06H
0225 120000      R     LCALL   L?0644
0228 120000      E     LCALL   _a2i
022B 900000      R     MOV     DPTR,#wait
022E EF                MOV     A,R7
022F F0                MOVX    @DPTR,A
0230 8006              SJMP    ?C0232
0232         ?C0231:
                                           ; SOURCE LINE # 1691
0232 900000      R     MOV     DPTR,#wait
0235 7402              MOV     A,#02H
0237 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 107 

0238         ?C0232:
                                           ; SOURCE LINE # 1694
0238 120000      R     LCALL   L?0732
023B F0                MOVX    @DPTR,A
023C         ?C0233:
                                           ; SOURCE LINE # 1695
023C 120000      E     LCALL   RS_ready
023F EF                MOV     A,R7
0240 6003              JZ      $ + 5H
0242 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 1696
0245 120000      R     LCALL   L?0734
0248 7003              JNZ     ?C0551
024A 120000      R     LCALL   L?0718
024D         ?C0551:
                                           ; SOURCE LINE # 1697
                                           ; SOURCE LINE # 1698
                                           ; SOURCE LINE # 1699
                                           ; SOURCE LINE # 1701
024D 120000      R     LCALL   L?0663
                                           ; SOURCE LINE # 1702
0250 900000      R     MOV     DPTR,#wait
0253 E0                MOVX    A,@DPTR
0254 FF                MOV     R7,A
0255 7E00              MOV     R6,#00H
0257 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 1705
025A 900000      R     MOV     DPTR,#xpositionH
025D E0                MOVX    A,@DPTR
025E FF                MOV     R7,A
025F E500        E     MOV     A,regTW88+01H
0261 2441              ADD     A,#041H
0263 120000      R     LCALL   L?0727
                                           ; SOURCE LINE # 1706
0266 900000      R     MOV     DPTR,#xpositionL
0269 E0                MOVX    A,@DPTR
026A FF                MOV     R7,A
026B E500        E     MOV     A,regTW88+01H
026D 2442              ADD     A,#042H
                                           ; SOURCE LINE # 1709
026F 120000      R     LCALL   L?0669
                                           ; SOURCE LINE # 1710
0272 80C8              SJMP    ?C0233
                                           ; SOURCE LINE # 1711
0274         ?C0226:
                                           ; SOURCE LINE # 1712
0274 120000      R     LCALL   L?0646
0277 7400        R     MOV     A,#HIGH ?SC_1232
0279 F0                MOVX    @DPTR,A
027A 7400        R     MOV     A,#LOW ?SC_1232
027C 120000      R     LCALL   L?0633
027F 7065              JNZ     ?C0236
                                           ; SOURCE LINE # 1718
0281 120000      R     LCALL   L?0668
0284 5011              JNC     ?C0237
                                           ; SOURCE LINE # 1719
0286 E59B              MOV     A,SFR_CACHE_EN
0288 900000      R     MOV     DPTR,#delay
028B 6005              JZ      ?C0238
028D 120000      R     LCALL   L?0753
0290 800B              SJMP    ?C0240
0292         ?C0238:
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 108 

                                           ; SOURCE LINE # 1720
0292 120000      R     LCALL   L?0755
                                           ; SOURCE LINE # 1721
0295 8006              SJMP    ?C0240
0297         ?C0237:
                                           ; SOURCE LINE # 1723
0297 120000      R     LCALL   L?0643
029A 120000      R     LCALL   L?0763
029D         ?C0240:
                                           ; SOURCE LINE # 1725
029D 900000      R     MOV     DPTR,#argc
02A0 E0                MOVX    A,@DPTR
02A1 B40310            CJNE    A,#03H,?C0241
                                           ; SOURCE LINE # 1726
02A4 900000      R     MOV     DPTR,#argv+06H
02A7 120000      R     LCALL   L?0644
02AA 120000      E     LCALL   _a2i
02AD 900000      R     MOV     DPTR,#wait
02B0 EF                MOV     A,R7
02B1 F0                MOVX    @DPTR,A
02B2 8006              SJMP    ?C0242
02B4         ?C0241:
                                           ; SOURCE LINE # 1728
02B4 900000      R     MOV     DPTR,#wait
02B7 7402              MOV     A,#02H
02B9 F0                MOVX    @DPTR,A
02BA         ?C0242:
                                           ; SOURCE LINE # 1731
02BA 120000      R     LCALL   L?0733
02BD F0                MOVX    @DPTR,A
02BE         ?C0243:
                                           ; SOURCE LINE # 1732
02BE 120000      E     LCALL   RS_ready
02C1 EF                MOV     A,R7
02C2 6003              JZ      $ + 5H
02C4 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 1733
02C7 120000      R     LCALL   L?0735
02CA 7003              JNZ     ?C0552
02CC 120000      R     LCALL   L?0719
02CF         ?C0552:
                                           ; SOURCE LINE # 1734
                                           ; SOURCE LINE # 1735
                                           ; SOURCE LINE # 1736
                                           ; SOURCE LINE # 1738
02CF 120000      R     LCALL   L?0663
                                           ; SOURCE LINE # 1742
02D2 900000      R     MOV     DPTR,#i
02D5 A3                INC     DPTR
02D6 E0                MOVX    A,@DPTR
02D7 FF                MOV     R7,A
02D8 C3                CLR     C
02D9 7420              MOV     A,#020H
02DB 9F                SUBB    A,R7
02DC FF                MOV     R7,A
02DD E500        E     MOV     A,regTW88+01H
02DF 2445              ADD     A,#045H
                                           ; SOURCE LINE # 1745
02E1 120000      R     LCALL   L?0669
                                           ; SOURCE LINE # 1746
02E4 80D8              SJMP    ?C0243
                                           ; SOURCE LINE # 1747
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 109 

02E6         ?C0236:
                                           ; SOURCE LINE # 1748
02E6 120000      R     LCALL   L?0646
02E9 7400        R     MOV     A,#HIGH ?SC_1238
02EB F0                MOVX    @DPTR,A
02EC 7400        R     MOV     A,#LOW ?SC_1238
02EE 120000      R     LCALL   L?0635
02F1 7054              JNZ     ?C0246
                                           ; SOURCE LINE # 1753
02F3 120000      R     LCALL   L?0668
02F6 5011              JNC     ?C0247
                                           ; SOURCE LINE # 1754
02F8 E59B              MOV     A,SFR_CACHE_EN
02FA 900000      R     MOV     DPTR,#delay
02FD 6005              JZ      ?C0248
02FF 120000      R     LCALL   L?0753
0302 800B              SJMP    ?C0250
0304         ?C0248:
                                           ; SOURCE LINE # 1755
0304 120000      R     LCALL   L?0755
                                           ; SOURCE LINE # 1756
0307 8006              SJMP    ?C0250
0309         ?C0247:
                                           ; SOURCE LINE # 1758
0309 120000      R     LCALL   L?0643
030C 120000      R     LCALL   L?0763
030F         ?C0250:
                                           ; SOURCE LINE # 1761
030F 120000      R     LCALL   L?0733
0312 F0                MOVX    @DPTR,A
0313         ?C0251:
                                           ; SOURCE LINE # 1762
0313 120000      E     LCALL   RS_ready
0316 EF                MOV     A,R7
0317 6003              JZ      $ + 5H
0319 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 1763
031C 120000      R     LCALL   L?0735
031F 7003              JNZ     ?C0553
0321 120000      R     LCALL   L?0719
0324         ?C0553:
                                           ; SOURCE LINE # 1764
0324 120000      R     LCALL   L?0733
0327 E0                MOVX    A,@DPTR
0328 5401              ANL     A,#01H
032A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1765
                                           ; SOURCE LINE # 1766
                                           ; SOURCE LINE # 1768
                                           ; SOURCE LINE # 1772
032B 120000      R     LCALL   L?0722
032E FF                MOV     R7,A
032F E500        E     MOV     A,regTW88+01H
0331 2461              ADD     A,#061H
0333 120000      R     LCALL   L?0727
                                           ; SOURCE LINE # 1773
0336 900000      R     MOV     DPTR,#xpositionL
0339 E0                MOVX    A,@DPTR
033A FF                MOV     R7,A
033B E500        E     MOV     A,regTW88+01H
033D 2462              ADD     A,#062H
033F 120000      R     LCALL   L?0728
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 110 

                                           ; SOURCE LINE # 1776
0342 120000      R     LCALL   L?0729
                                           ; SOURCE LINE # 1777
0345 80CC              SJMP    ?C0251
                                           ; SOURCE LINE # 1778
0347         ?C0246:
                                           ; SOURCE LINE # 1909
0347 120000      R     LCALL   L?0646
034A 7400        R     MOV     A,#HIGH ?SC_1244
034C F0                MOVX    @DPTR,A
034D 7400        R     MOV     A,#LOW ?SC_1244
034F 120000      R     LCALL   L?0635
0352 6003              JZ      $ + 5H
0354 020000      R     LJMP    ?C0254
                                           ; SOURCE LINE # 1910
0357 120000      R     LCALL   L?0668
035A 5043              JNC     ?C0255
                                           ; SOURCE LINE # 1911
035C 7BFF              MOV     R3,#0FFH
035E 7A00        R     MOV     R2,#HIGH ?SC_1248
0360 7900        R     MOV     R1,#LOW ?SC_1248
0362 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1912
0365 30A809            JNB     SFR_EX0,?C0256
0368 7BFF              MOV     R3,#0FFH
036A 7A00        R     MOV     R2,#HIGH ?SC_1261
036C 7900        R     MOV     R1,#LOW ?SC_1261
036E 120000      E     LCALL   _Printf
0371         ?C0256:
                                           ; SOURCE LINE # 1913
0371 30AB09            JNB     SFR_ET1,?C0257
0374 7BFF              MOV     R3,#0FFH
0376 7A00        R     MOV     R2,#HIGH ?SC_1266
0378 7900        R     MOV     R1,#LOW ?SC_1266
037A 120000      E     LCALL   _Printf
037D         ?C0257:
                                           ; SOURCE LINE # 1914
037D 30AD09            JNB     SFR_ET2,?C0258
0380 7BFF              MOV     R3,#0FFH
0382 7A00        R     MOV     R2,#HIGH ?SC_1271
0384 7900        R     MOV     R1,#LOW ?SC_1271
0386 120000      E     LCALL   _Printf
0389         ?C0258:
                                           ; SOURCE LINE # 1915
0389 E5FB              MOV     A,SFR_E2IE
038B 7003              JNZ     $ + 5H
038D 020000      R     LJMP    ?C0193
0390 7BFF              MOV     R3,#0FFH
0392 7A00        R     MOV     R2,#HIGH ?SC_1276
0394 7900        R     MOV     R1,#LOW ?SC_1276
0396 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0399 E5FB              MOV     A,SFR_E2IE
039B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1916
039C 020000      R     LJMP    ?C0617
039F         ?C0255:
                                           ; SOURCE LINE # 1917
039F 120000      R     LCALL   L?0618
03A2 7016              JNZ     ?C0261
                                           ; SOURCE LINE # 1918
03A4 30A809            JNB     SFR_EX0,?C0262
03A7 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 111 

03A9 7A00        R     MOV     R2,#HIGH ?SC_1291
03AB 7900        R     MOV     R1,#LOW ?SC_1291
03AD         ?C0581:
03AD 020000      R     LJMP    ?C0617
03B0         ?C0262:
                                           ; SOURCE LINE # 1919
                                           ; SOURCE LINE # 1920
03B0 D2A8              SETB    SFR_EX0
                                           ; SOURCE LINE # 1922
03B2 D2AB              SETB    SFR_ET1
                                           ; SOURCE LINE # 1924
03B4 43FB04            ORL     SFR_E2IE,#04H
                                           ; SOURCE LINE # 1925
                                           ; SOURCE LINE # 1926
03B7 020000      R     LJMP    ?C0193
03BA         ?C0261:
                                           ; SOURCE LINE # 1927
03BA 120000      R     LCALL   L?0646
03BD 7400        R     MOV     A,#HIGH ?SC_1299
03BF F0                MOVX    @DPTR,A
03C0 7400        R     MOV     A,#LOW ?SC_1299
03C2 120000      R     LCALL   L?0641
03C5 120000      E     LCALL   _stricmp
03C8 EF                MOV     A,R7
03C9 4E                ORL     A,R6
03CA 6003              JZ      $ + 5H
03CC 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 1928
03CF 20A809            JB      SFR_EX0,?C0266
03D2 7BFF              MOV     R3,#0FFH
03D4 7A00        R     MOV     R2,#HIGH ?SC_1291
03D6 7900        R     MOV     R1,#LOW ?SC_1291
03D8         ?C0582:
03D8 020000      R     LJMP    ?C0617
03DB         ?C0266:
                                           ; SOURCE LINE # 1929
                                           ; SOURCE LINE # 1930
03DB C2A8              CLR     SFR_EX0
                                           ; SOURCE LINE # 1931
03DD C2AB              CLR     SFR_ET1
                                           ; SOURCE LINE # 1932
03DF E4                CLR     A
03E0 F5FB              MOV     SFR_E2IE,A
                                           ; SOURCE LINE # 1933
                                           ; SOURCE LINE # 1934
                                           ; SOURCE LINE # 1935
03E2 020000      R     LJMP    ?C0193
03E5         ?C0254:
                                           ; SOURCE LINE # 1939
03E5 120000      R     LCALL   L?0646
03E8 7400        R     MOV     A,#HIGH ?SC_1303
03EA F0                MOVX    @DPTR,A
03EB 7400        R     MOV     A,#LOW ?SC_1303
03ED 120000      R     LCALL   L?0637
03F0 6003              JZ      $ + 5H
03F2 020000      R     LJMP    ?C0269
                                           ; SOURCE LINE # 1940
03F5 120000      R     LCALL   L?0668
03F8 5006              JNC     ?C0270
                                           ; SOURCE LINE # 1941
                                           ; SOURCE LINE # 1942
                                           ; SOURCE LINE # 1943
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 112 

03FA 120000      R     LCALL   L?0764
                                           ; SOURCE LINE # 1945
                                           ; SOURCE LINE # 1947
                                           ; SOURCE LINE # 1948
                                           ; SOURCE LINE # 1949
03FD 020000      R     LJMP    ?C0584
0400         ?C0270:
                                           ; SOURCE LINE # 1950
                                           ; SOURCE LINE # 1951
0400 120000      R     LCALL   L?0646
0403 7400        R     MOV     A,#HIGH ?SC_1219
0405 F0                MOVX    @DPTR,A
0406 7400        R     MOV     A,#LOW ?SC_1219
0408 120000      R     LCALL   L?0641
040B 120000      E     LCALL   _stricmp
040E EF                MOV     A,R7
040F 4E                ORL     A,R6
0410 6013              JZ      ?C0273
0412 120000      R     LCALL   L?0646
0415 7400        R     MOV     A,#HIGH ?SC_1308
0417 F0                MOVX    @DPTR,A
0418 A3                INC     DPTR
0419 7400        R     MOV     A,#LOW ?SC_1308
041B 120000      R     LCALL   L?0642
041E 120000      E     LCALL   _stricmp
0421 EF                MOV     A,R7
0422 4E                ORL     A,R6
0423 705D              JNZ     ?C0272
0425         ?C0273:
                                           ; SOURCE LINE # 1952
0425 7A00        R     MOV     R2,#HIGH ?SC_1313
0427 7900        R     MOV     R1,#LOW ?SC_1313
                                           ; SOURCE LINE # 1954
0429 120000      R     LCALL   L?0682
042C 7A00        R     MOV     R2,#HIGH ?SC_1384
042E 7900        R     MOV     R1,#LOW ?SC_1384
0430 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1955
0433 7A00        R     MOV     R2,#HIGH ?SC_1401
0435 7900        R     MOV     R1,#LOW ?SC_1401
                                           ; SOURCE LINE # 1956
0437 120000      R     LCALL   L?0682
043A 7A00        R     MOV     R2,#HIGH ?SC_1413
043C 7900        R     MOV     R1,#LOW ?SC_1413
043E 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1957
0441 7A00        R     MOV     R2,#HIGH ?SC_1432
0443 7900        R     MOV     R1,#LOW ?SC_1432
                                           ; SOURCE LINE # 1958
0445 120000      R     LCALL   L?0706
0448 7A00        R     MOV     R2,#HIGH ?SC_1452
044A 7900        R     MOV     R1,#LOW ?SC_1452
044C 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1959
044F 7A00        R     MOV     R2,#HIGH ?SC_1456
0451 7900        R     MOV     R1,#LOW ?SC_1456
                                           ; SOURCE LINE # 1960
0453 120000      R     LCALL   L?0706
0456 7A00        R     MOV     R2,#HIGH ?SC_1468
0458 7900        R     MOV     R1,#LOW ?SC_1468
045A 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1961
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 113 

045D 7A00        R     MOV     R2,#HIGH ?SC_1491
045F 7900        R     MOV     R1,#LOW ?SC_1491
                                           ; SOURCE LINE # 1962
0461 120000      R     LCALL   L?0765
0464 7A00        R     MOV     R2,#HIGH ?SC_1532
0466 7900        R     MOV     R1,#LOW ?SC_1532
0468 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1963
046B 7A00        R     MOV     R2,#HIGH ?SC_1537
046D 7900        R     MOV     R1,#LOW ?SC_1537
                                           ; SOURCE LINE # 1964
046F 120000      R     LCALL   L?0765
0472 7A00        R     MOV     R2,#HIGH ?SC_1582
0474 7900        R     MOV     R1,#LOW ?SC_1582
0476 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1965
0479 7BFF              MOV     R3,#0FFH
047B 7A00        R     MOV     R2,#HIGH ?SC_1597
047D 7900        R     MOV     R1,#LOW ?SC_1597
                                           ; SOURCE LINE # 1966
047F 020000      R     LJMP    ?C0614
0482         ?C0272:
                                           ; SOURCE LINE # 1967
0482 120000      R     LCALL   L?0646
0485 7400        R     MOV     A,#HIGH ?SC_1611
0487 F0                MOVX    @DPTR,A
0488 A3                INC     DPTR
0489 7400        R     MOV     A,#LOW ?SC_1611
048B 120000      R     LCALL   L?0642
048E 120000      E     LCALL   _stricmp
0491 EF                MOV     A,R7
0492 4E                ORL     A,R6
0493 7027              JNZ     ?C0275
                                           ; SOURCE LINE # 1968
0495 FF                MOV     R7,A
0496 120000      E     LCALL   _InitISR
                                           ; SOURCE LINE # 1969
0499 E4                CLR     A
049A FF                MOV     R7,A
049B 120000      E     LCALL   _InitCore
                                           ; SOURCE LINE # 1970
049E 120000      E     LCALL   CheckEEPROM
                                           ; SOURCE LINE # 1971
04A1 120000      E     LCALL   InitWithNTSC
                                           ; SOURCE LINE # 1972
                                           ; SOURCE LINE # 1973
                                           ; SOURCE LINE # 1974
04A4 120000      R     LCALL   L?0766
                                           ; SOURCE LINE # 1975
04A7 7F01              MOV     R7,#01H
04A9 120000      E     LCALL   _ClkPllSetDividerReg
                                           ; SOURCE LINE # 1976
04AC 7F01              MOV     R7,#01H
04AE 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 1977
04B1 120000      E     LCALL   SpiOsdSetDeValue
                                           ; SOURCE LINE # 1978
04B4 E4                CLR     A
04B5 900000      R     MOV     DPTR,#DebugLevel
04B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1979
04B9 020000      R     LJMP    ?C0193
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 114 

04BC         ?C0275:
                                           ; SOURCE LINE # 1980
04BC 120000      R     LCALL   L?0646
04BF 7400        R     MOV     A,#HIGH ?SC_1244
04C1 F0                MOVX    @DPTR,A
04C2 A3                INC     DPTR
04C3 7400        R     MOV     A,#LOW ?SC_1244
04C5 120000      R     LCALL   L?0642
04C8 120000      E     LCALL   _stricmp
04CB EF                MOV     A,R7
04CC 4E                ORL     A,R6
04CD 7007              JNZ     ?C0277
                                           ; SOURCE LINE # 1981
04CF FF                MOV     R7,A
04D0 120000      E     LCALL   _InitISR
                                           ; SOURCE LINE # 1982
04D3 020000      R     LJMP    ?C0193
04D6         ?C0277:
                                           ; SOURCE LINE # 1983
04D6 120000      R     LCALL   L?0646
04D9 7400        R     MOV     A,#HIGH ?SC_1616
04DB F0                MOVX    @DPTR,A
04DC A3                INC     DPTR
04DD 7400        R     MOV     A,#LOW ?SC_1616
04DF 120000      R     LCALL   L?0642
04E2 120000      E     LCALL   _stricmp
04E5 EF                MOV     A,R7
04E6 4E                ORL     A,R6
04E7 7007              JNZ     ?C0279
                                           ; SOURCE LINE # 1984
04E9 FF                MOV     R7,A
04EA 120000      E     LCALL   _InitCore
                                           ; SOURCE LINE # 1985
04ED 020000      R     LJMP    ?C0193
04F0         ?C0279:
                                           ; SOURCE LINE # 1986
04F0 120000      R     LCALL   L?0646
04F3 7400        R     MOV     A,#HIGH ?SC_1621
04F5 F0                MOVX    @DPTR,A
04F6 A3                INC     DPTR
04F7 7400        R     MOV     A,#LOW ?SC_1621
04F9 120000      R     LCALL   L?0642
04FC 120000      E     LCALL   _stricmp
04FF EF                MOV     A,R7
0500 4E                ORL     A,R6
0501 7006              JNZ     ?C0281
                                           ; SOURCE LINE # 1987
                                           ; SOURCE LINE # 1988
                                           ; SOURCE LINE # 1989
0503 120000      R     LCALL   L?0764
                                           ; SOURCE LINE # 1990
0506 020000      R     LJMP    ?C0193
0509         ?C0281:
                                           ; SOURCE LINE # 1991
0509 120000      R     LCALL   L?0646
050C 7400        R     MOV     A,#HIGH ?SC_1626
050E F0                MOVX    @DPTR,A
050F A3                INC     DPTR
0510 7400        R     MOV     A,#LOW ?SC_1626
0512 120000      R     LCALL   L?0642
0515 120000      E     LCALL   _stricmp
0518 EF                MOV     A,R7
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 115 

0519 4E                ORL     A,R6
051A 7006              JNZ     ?C0283
                                           ; SOURCE LINE # 1992
051C         ?C0584:
                                           ; SOURCE LINE # 1993
                                           ; SOURCE LINE # 1994
051C 120000      R     LCALL   L?0766
                                           ; SOURCE LINE # 1995
051F 020000      R     LJMP    ?C0193
0522         ?C0283:
                                           ; SOURCE LINE # 1996
0522 120000      R     LCALL   L?0646
0525 7400        R     MOV     A,#HIGH ?SC_1632
0527 F0                MOVX    @DPTR,A
0528 A3                INC     DPTR
0529 7400        R     MOV     A,#LOW ?SC_1632
052B 120000      R     LCALL   L?0642
052E 120000      E     LCALL   _stricmp
0531 EF                MOV     A,R7
0532 4E                ORL     A,R6
0533 7024              JNZ     ?C0285
                                           ; SOURCE LINE # 1997
0535 FF                MOV     R7,A
0536 120000      E     LCALL   _McuSpiClkSelect
                                           ; SOURCE LINE # 1998
0539 7F00              MOV     R7,#00H
053B 7EF3              MOV     R6,#0F3H
053D 7D6F              MOV     R5,#06FH
053F 7C06              MOV     R4,#06H
0541 120000      E     LCALL   _SspllSetFreqAndPll
                                           ; SOURCE LINE # 1999
0544 900000      E     MOV     DPTR,#SpiFlashVendor
0547 E0                MOVX    A,@DPTR
0548 B40104            CJNE    A,#01H,?C0286
                                           ; SOURCE LINE # 2000
054B 7D02              MOV     R5,#02H
054D 8002              SJMP    ?C0579
054F         ?C0286:
                                           ; SOURCE LINE # 2002
054F 7D01              MOV     R5,#01H
0551         ?C0579:
0551 7F01              MOV     R7,#01H
0553 120000      E     LCALL   _ClkPllSetSelDiv
                                           ; SOURCE LINE # 2003
0556 020000      R     LJMP    ?C0193
0559         ?C0285:
                                           ; SOURCE LINE # 2004
0559 120000      R     LCALL   L?0646
055C 7400        R     MOV     A,#HIGH ?SC_1638
055E F0                MOVX    @DPTR,A
055F A3                INC     DPTR
0560 7400        R     MOV     A,#LOW ?SC_1638
0562 120000      R     LCALL   L?0642
0565 120000      E     LCALL   _stricmp
0568 EF                MOV     A,R7
0569 4E                ORL     A,R6
056A 7039              JNZ     ?C0289
                                           ; SOURCE LINE # 2005
056C 120000      R     LCALL   L?0702
056F 402E              JC      ?C0290
                                           ; SOURCE LINE # 2006
0571 900000      R     MOV     DPTR,#argv+06H
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 116 

0574 120000      R     LCALL   L?0644
0577 120000      E     LCALL   ?C?CLDPTR
057A FF                MOV     R7,A
057B 120000      E     LCALL   _toupper
057E BF4806            CJNE    R7,#048H,?C0291
0581 120000      E     LCALL   ClockHigh
0584 020000      R     LJMP    ?C0193
0587         ?C0291:
                                           ; SOURCE LINE # 2007
0587 900000      R     MOV     DPTR,#argv+06H
058A 120000      R     LCALL   L?0644
058D 120000      E     LCALL   ?C?CLDPTR
0590 FF                MOV     R7,A
0591 120000      E     LCALL   _toupper
0594 BF4C06            CJNE    R7,#04CH,?C0293
0597 120000      E     LCALL   ClockLow
059A 020000      R     LJMP    ?C0193
059D         ?C0293:
                                           ; SOURCE LINE # 2008
                                           ; SOURCE LINE # 2009
059D 8000              SJMP    ?C0586
059F         ?C0290:
                                           ; SOURCE LINE # 2011
059F         ?C0586:
059F 120000      E     LCALL   Clock27
                                           ; SOURCE LINE # 2012
05A2 020000      R     LJMP    ?C0193
05A5         ?C0289:
                                           ; SOURCE LINE # 2013
05A5 120000      R     LCALL   L?0646
05A8 7400        R     MOV     A,#HIGH ?SC_1644
05AA F0                MOVX    @DPTR,A
05AB A3                INC     DPTR
05AC 7400        R     MOV     A,#LOW ?SC_1644
05AE 120000      R     LCALL   L?0642
05B1 120000      E     LCALL   _stricmp
05B4 EF                MOV     A,R7
05B5 4E                ORL     A,R6
05B6 704F              JNZ     ?C0297
                                           ; SOURCE LINE # 2014
05B8 120000      R     LCALL   L?0702
05BB 403F              JC      ?C0298
                                           ; SOURCE LINE # 2015
05BD 120000      R     LCALL   L?0646
05C0 7400        R     MOV     A,#HIGH ?SC_1649
05C2 F0                MOVX    @DPTR,A
05C3 A3                INC     DPTR
05C4 7400        R     MOV     A,#LOW ?SC_1649
05C6 F0                MOVX    @DPTR,A
05C7 900000      R     MOV     DPTR,#argv+06H
05CA 120000      R     LCALL   L?0644
05CD 120000      E     LCALL   _stricmp
05D0 EF                MOV     A,R7
05D1 4E                ORL     A,R6
05D2 7006              JNZ     ?C0299
                                           ; SOURCE LINE # 2016
05D4 120000      E     LCALL   InitLogo1
05D7 020000      R     LJMP    ?C0193
05DA         ?C0299:
                                           ; SOURCE LINE # 2017
05DA 120000      R     LCALL   L?0646
05DD 7400        R     MOV     A,#HIGH ?SC_1652
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 117 

05DF F0                MOVX    @DPTR,A
05E0 A3                INC     DPTR
05E1 7400        R     MOV     A,#LOW ?SC_1652
05E3 F0                MOVX    @DPTR,A
05E4 900000      R     MOV     DPTR,#argv+06H
05E7 120000      R     LCALL   L?0644
05EA 120000      E     LCALL   _stricmp
05ED EF                MOV     A,R7
05EE 4E                ORL     A,R6
05EF 7002              JNZ     ?C0301
                                           ; SOURCE LINE # 2018
05F1 800C              SJMP    ?C0587
05F3         ?C0301:
                                           ; SOURCE LINE # 2020
05F3 7BFF              MOV     R3,#0FFH
05F5 7A00        R     MOV     R2,#HIGH ?SC_1656
05F7 7900        R     MOV     R1,#LOW ?SC_1656
05F9         ?C0583:
                                           ; SOURCE LINE # 2021
05F9 020000      R     LJMP    ?C0617
05FC         ?C0298:
                                           ; SOURCE LINE # 2022
                                           ; SOURCE LINE # 2024
05FC 120000      E     LCALL   InitLogo1
                                           ; SOURCE LINE # 2025
                                           ; SOURCE LINE # 2026
05FF         ?C0587:
05FF 7F01              MOV     R7,#01H
0601 120000      E     LCALL   _RemoveLogoWithWait
                                           ; SOURCE LINE # 2027
                                           ; SOURCE LINE # 2028
                                           ; SOURCE LINE # 2029
0604 020000      R     LJMP    ?C0193
0607         ?C0297:
                                           ; SOURCE LINE # 2030
0607 120000      R     LCALL   L?0646
060A 7400        R     MOV     A,#HIGH ?SC_1676
060C F0                MOVX    @DPTR,A
060D A3                INC     DPTR
060E 7400        R     MOV     A,#LOW ?SC_1676
0610 120000      R     LCALL   L?0642
0613 120000      E     LCALL   _stricmp
0616 EF                MOV     A,R7
0617 4E                ORL     A,R6
0618 6003              JZ      $ + 5H
061A 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 2031
061D 120000      E     LCALL   InitInputAsDefault
                                           ; SOURCE LINE # 2032
                                           ; SOURCE LINE # 2033
                                           ; SOURCE LINE # 2034
0620 020000      R     LJMP    ?C0193
0623         ?C0269:
                                           ; SOURCE LINE # 2036
0623 120000      R     LCALL   L?0646
0626 7400        R     MOV     A,#HIGH ?SC_1684
0628 F0                MOVX    @DPTR,A
0629 7400        R     MOV     A,#LOW ?SC_1684
062B 120000      R     LCALL   L?0637
062E 6003              JZ      $ + 5H
0630 020000      R     LJMP    ?C0308
                                           ; SOURCE LINE # 2037
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 118 

0633 120000      R     LCALL   L?0668
0636 5027              JNC     ?C0309
                                           ; SOURCE LINE # 2038
0638 7BFF              MOV     R3,#0FFH
063A 7A00        R     MOV     R2,#HIGH ?SC_1690
063C 7900        R     MOV     R1,#LOW ?SC_1690
063E 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 2039
0641 900000      E     MOV     DPTR,#InputMain
0644 E0                MOVX    A,@DPTR
0645 FF                MOV     R7,A
0646 7D01              MOV     R5,#01H
0648 120000      E     LCALL   _PrintfInput
                                           ; SOURCE LINE # 2040
064B 7BFF              MOV     R3,#0FFH
064D 7A00        R     MOV     R2,#HIGH ?SC_1702
064F 7900        R     MOV     R1,#LOW ?SC_1702
0651 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 2041
0654 120000      E     LCALL   GetInputEE
0657 7D01              MOV     R5,#01H
0659 120000      E     LCALL   _PrintfInput
                                           ; SOURCE LINE # 2042
065C 020000      R     LJMP    ?C0193
065F         ?C0309:
                                           ; SOURCE LINE # 2043
                                           ; SOURCE LINE # 2044
065F 120000      R     LCALL   L?0620
0662 7003              JNZ     ?C0311
0664 020000      R     LJMP    ?C0589
0667         ?C0311:
                                           ; SOURCE LINE # 2045
0667 120000      R     LCALL   L?0622
066A 7008              JNZ     ?C0313
066C 900000      E     MOV     DPTR,#InputMain
066F 04                INC     A
0670 F0                MOVX    @DPTR,A
0671 020000      R     LJMP    ?C0312
0674         ?C0313:
                                           ; SOURCE LINE # 2046
0674 120000      R     LCALL   L?0624
0677 7009              JNZ     ?C0315
0679 900000      E     MOV     DPTR,#InputMain
067C 7402              MOV     A,#02H
067E F0                MOVX    @DPTR,A
067F 020000      R     LJMP    ?C0312
0682         ?C0315:
                                           ; SOURCE LINE # 2047
0682 120000      R     LCALL   L?0626
0685 7009              JNZ     ?C0317
0687 900000      E     MOV     DPTR,#InputMain
068A 7403              MOV     A,#03H
068C F0                MOVX    @DPTR,A
068D 020000      R     LJMP    ?C0312
0690         ?C0317:
                                           ; SOURCE LINE # 2048
0690 120000      R     LCALL   L?0628
0693 7008              JNZ     ?C0319
0695 900000      E     MOV     DPTR,#InputMain
0698 7404              MOV     A,#04H
069A F0                MOVX    @DPTR,A
069B 802A              SJMP    ?C0312
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 119 

069D         ?C0319:
                                           ; SOURCE LINE # 2049
069D 120000      R     LCALL   L?0630
06A0 7013              JNZ     ?C0321
                                           ; SOURCE LINE # 2050
06A2 120000      E     LCALL   GetHdmiModeEE
06A5 EF                MOV     A,R7
06A6 900000      E     MOV     DPTR,#InputMain
06A9 6005              JZ      ?C0322
06AB 7406              MOV     A,#06H
06AD F0                MOVX    @DPTR,A
06AE 8017              SJMP    ?C0312
06B0         ?C0322:
                                           ; SOURCE LINE # 2051
06B0 7405              MOV     A,#05H
06B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2052
06B3 8012              SJMP    ?C0312
06B5         ?C0321:
                                           ; SOURCE LINE # 2053
06B5 120000      R     LCALL   L?0632
06B8 7008              JNZ     ?C0325
06BA 900000      E     MOV     DPTR,#InputMain
06BD 7407              MOV     A,#07H
06BF F0                MOVX    @DPTR,A
06C0 8005              SJMP    ?C0312
06C2         ?C0325:
                                           ; SOURCE LINE # 2054
06C2 E4                CLR     A
06C3         ?C0589:
06C3 900000      E     MOV     DPTR,#InputMain
06C6 F0                MOVX    @DPTR,A
06C7         ?C0312:
                                           ; SOURCE LINE # 2055
06C7 900000      E     MOV     DPTR,#InputSubMode
06CA 7407              MOV     A,#07H
06CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2057
06CD 120000      E     LCALL   LinkCheckAndSetInput
                                           ; SOURCE LINE # 2059
06D0 120000      E     LCALL   GetInputEE
06D3 AE07              MOV     R6,AR7
06D5 900000      E     MOV     DPTR,#InputMain
06D8 E0                MOVX    A,@DPTR
06D9 FF                MOV     R7,A
06DA 6E                XRL     A,R6
06DB 6003              JZ      ?C0327
                                           ; SOURCE LINE # 2060
06DD 120000      E     LCALL   _SaveInputEE
06E0         ?C0327:
                                           ; SOURCE LINE # 2062
06E0 900000      E     MOV     DPTR,#InputMain
                                           ; SOURCE LINE # 2063
                                           ; SOURCE LINE # 2064
06E3 020000      R     LJMP    ?C0590
06E6         ?C0308:
                                           ; SOURCE LINE # 2068
06E6 120000      R     LCALL   L?0646
06E9 7400        R     MOV     A,#HIGH ?SC_1752
06EB F0                MOVX    @DPTR,A
06EC 7400        R     MOV     A,#LOW ?SC_1752
06EE 120000      R     LCALL   L?0639
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 120 

06F1 6003              JZ      $ + 5H
06F3 020000      R     LJMP    ?C0329
                                           ; SOURCE LINE # 2069
06F6 120000      R     LCALL   L?0668
06F9 5006              JNC     ?C0330
                                           ; SOURCE LINE # 2070
06FB 120000      E     LCALL   StartVideoInput
                                           ; SOURCE LINE # 2071
06FE 020000      R     LJMP    ?C0193
0701         ?C0330:
                                           ; SOURCE LINE # 2072
                                           ; SOURCE LINE # 2073
0701 120000      R     LCALL   L?0620
0704 6013              JZ      ?C0333
0706 120000      R     LCALL   L?0646
0709 7400        R     MOV     A,#HIGH ?SC_1181
070B F0                MOVX    @DPTR,A
070C A3                INC     DPTR
070D 7400        R     MOV     A,#LOW ?SC_1181
070F 120000      R     LCALL   L?0642
0712 120000      E     LCALL   _stricmp
0715 EF                MOV     A,R7
0716 4E                ORL     A,R6
0717 7007              JNZ     ?C0332
0719         ?C0333:
                                           ; SOURCE LINE # 2074
0719 120000      R     LCALL   L?0703
                                           ; SOURCE LINE # 2075
071C E4                CLR     A
                                           ; SOURCE LINE # 2076
071D 020000      R     LJMP    ?C0591
0720         ?C0332:
                                           ; SOURCE LINE # 2077
0720 120000      R     LCALL   L?0622
0723 6013              JZ      ?C0336
0725 120000      R     LCALL   L?0646
0728 7400        R     MOV     A,#HIGH ?SC_1754
072A F0                MOVX    @DPTR,A
072B A3                INC     DPTR
072C 7400        R     MOV     A,#LOW ?SC_1754
072E 120000      R     LCALL   L?0642
0731 120000      E     LCALL   _stricmp
0734 EF                MOV     A,R7
0735 4E                ORL     A,R6
0736 7008              JNZ     ?C0335
0738         ?C0336:
                                           ; SOURCE LINE # 2078
0738 120000      R     LCALL   L?0703
                                           ; SOURCE LINE # 2079
073B 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2080
073D 020000      R     LJMP    ?C0598
0740         ?C0335:
                                           ; SOURCE LINE # 2081
0740 120000      R     LCALL   L?0624
0743 6013              JZ      ?C0339
0745 120000      R     LCALL   L?0646
0748 7400        R     MOV     A,#HIGH ?SC_1756
074A F0                MOVX    @DPTR,A
074B A3                INC     DPTR
074C 7400        R     MOV     A,#LOW ?SC_1756
074E 120000      R     LCALL   L?0642
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 121 

0751 120000      E     LCALL   _stricmp
0754 EF                MOV     A,R7
0755 4E                ORL     A,R6
0756 7008              JNZ     ?C0338
0758         ?C0339:
                                           ; SOURCE LINE # 2082
0758 120000      R     LCALL   L?0704
                                           ; SOURCE LINE # 2083
075B 7F02              MOV     R7,#02H
075D         ?C0592:
                                           ; SOURCE LINE # 2084
075D 020000      R     LJMP    ?C0598
0760         ?C0338:
                                           ; SOURCE LINE # 2085
0760 120000      R     LCALL   L?0626
0763 6013              JZ      ?C0342
0765 120000      R     LCALL   L?0646
0768 7400        R     MOV     A,#HIGH ?SC_1758
076A F0                MOVX    @DPTR,A
076B A3                INC     DPTR
076C 7400        R     MOV     A,#LOW ?SC_1758
076E 120000      R     LCALL   L?0642
0771 120000      E     LCALL   _stricmp
0774 EF                MOV     A,R7
0775 4E                ORL     A,R6
0776 7008              JNZ     ?C0341
0778         ?C0342:
                                           ; SOURCE LINE # 2086
0778 120000      R     LCALL   L?0704
                                           ; SOURCE LINE # 2087
077B 7F03              MOV     R7,#03H
077D         ?C0593:
                                           ; SOURCE LINE # 2088
077D 020000      R     LJMP    ?C0598
0780         ?C0341:
                                           ; SOURCE LINE # 2089
0780 120000      R     LCALL   L?0628
0783 6013              JZ      ?C0345
0785 120000      R     LCALL   L?0646
0788 7400        R     MOV     A,#HIGH ?SC_1163
078A F0                MOVX    @DPTR,A
078B A3                INC     DPTR
078C 7400        R     MOV     A,#LOW ?SC_1163
078E 120000      R     LCALL   L?0642
0791 120000      E     LCALL   _stricmp
0794 EF                MOV     A,R7
0795 4E                ORL     A,R6
0796 7008              JNZ     ?C0344
0798         ?C0345:
                                           ; SOURCE LINE # 2090
0798 120000      R     LCALL   L?0704
                                           ; SOURCE LINE # 2091
079B 7F04              MOV     R7,#04H
079D         ?C0594:
                                           ; SOURCE LINE # 2092
079D 020000      R     LJMP    ?C0598
07A0         ?C0344:
                                           ; SOURCE LINE # 2093
07A0 120000      R     LCALL   L?0630
07A3 6013              JZ      ?C0348
07A5 120000      R     LCALL   L?0646
07A8 7400        R     MOV     A,#HIGH ?SC_1212
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 122 

07AA F0                MOVX    @DPTR,A
07AB A3                INC     DPTR
07AC 7400        R     MOV     A,#LOW ?SC_1212
07AE 120000      R     LCALL   L?0642
07B1 120000      E     LCALL   _stricmp
07B4 EF                MOV     A,R7
07B5 4E                ORL     A,R6
07B6 701C              JNZ     ?C0347
07B8         ?C0348:
                                           ; SOURCE LINE # 2096
07B8 120000      E     LCALL   GetHdmiModeEE
07BB EF                MOV     A,R7
07BC 900000      R     MOV     DPTR,#InputMainEE
07BF 6005              JZ      ?C0349
07C1 7406              MOV     A,#06H
07C3 F0                MOVX    @DPTR,A
07C4 8003              SJMP    ?C0350
07C6         ?C0349:
                                           ; SOURCE LINE # 2097
07C6 7405              MOV     A,#05H
07C8 F0                MOVX    @DPTR,A
07C9         ?C0350:
                                           ; SOURCE LINE # 2099
07C9 120000      R     LCALL   L?0704
                                           ; SOURCE LINE # 2100
07CC 900000      R     MOV     DPTR,#InputMainEE
07CF         ?C0590:
07CF E0                MOVX    A,@DPTR
07D0         ?C0591:
07D0 FF                MOV     R7,A
07D1         ?C0595:
                                           ; SOURCE LINE # 2101
07D1 020000      R     LJMP    ?C0598
07D4         ?C0347:
                                           ; SOURCE LINE # 2102
07D4 120000      R     LCALL   L?0646
07D7 7400        R     MOV     A,#HIGH ?SC_1760
07D9 F0                MOVX    @DPTR,A
07DA A3                INC     DPTR
07DB 7400        R     MOV     A,#LOW ?SC_1760
07DD 120000      R     LCALL   L?0642
07E0 120000      E     LCALL   _stricmp
07E3 EF                MOV     A,R7
07E4 4E                ORL     A,R6
07E5 7007              JNZ     ?C0352
                                           ; SOURCE LINE # 2103
07E7 120000      R     LCALL   L?0704
                                           ; SOURCE LINE # 2104
07EA 7F05              MOV     R7,#05H
07EC         ?C0596:
                                           ; SOURCE LINE # 2105
07EC 803A              SJMP    ?C0598
07EE         ?C0352:
                                           ; SOURCE LINE # 2106
07EE 120000      R     LCALL   L?0646
07F1 7400        R     MOV     A,#HIGH ?SC_1767
07F3 F0                MOVX    @DPTR,A
07F4 A3                INC     DPTR
07F5 7400        R     MOV     A,#LOW ?SC_1767
07F7 120000      R     LCALL   L?0642
07FA 120000      E     LCALL   _stricmp
07FD EF                MOV     A,R7
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 123 

07FE 4E                ORL     A,R6
07FF 7007              JNZ     ?C0354
                                           ; SOURCE LINE # 2107
0801 120000      R     LCALL   L?0704
                                           ; SOURCE LINE # 2108
0804 7F06              MOV     R7,#06H
0806         ?C0597:
                                           ; SOURCE LINE # 2109
0806 8020              SJMP    ?C0598
0808         ?C0354:
                                           ; SOURCE LINE # 2110
0808 120000      R     LCALL   L?0632
080B 6016              JZ      ?C0357
080D 120000      R     LCALL   L?0646
0810 7400        R     MOV     A,#HIGH ?SC_1179
0812 F0                MOVX    @DPTR,A
0813 A3                INC     DPTR
0814 7400        R     MOV     A,#LOW ?SC_1179
0816 120000      R     LCALL   L?0642
0819 120000      E     LCALL   _stricmp
081C EF                MOV     A,R7
081D 4E                ORL     A,R6
081E 6003              JZ      $ + 5H
0820 020000      R     LJMP    ?C0193
0823         ?C0357:
                                           ; SOURCE LINE # 2111
0823 120000      R     LCALL   L?0704
                                           ; SOURCE LINE # 2112
0826 7F07              MOV     R7,#07H
0828         ?C0598:
0828 120000      E     LCALL   _ChangeInput
                                           ; SOURCE LINE # 2113
                                           ; SOURCE LINE # 2114
                                           ; SOURCE LINE # 2115
082B 020000      R     LJMP    ?C0193
082E         ?C0329:
                                           ; SOURCE LINE # 2117
082E 120000      R     LCALL   L?0646
0831 7400        R     MOV     A,#HIGH ?SC_1774
0833 F0                MOVX    @DPTR,A
0834 7400        R     MOV     A,#LOW ?SC_1774
0836 120000      R     LCALL   L?0639
0839 7061              JNZ     ?C0359
                                           ; SOURCE LINE # 2120
083B 900000      E     MOV     DPTR,#InputMain
083E E0                MOVX    A,@DPTR
083F 14                DEC     A
0840 600E              JZ      ?C0362
0842 14                DEC     A
0843 6010              JZ      ?C0363
0845 14                DEC     A
0846 6012              JZ      ?C0364
0848 24FC              ADD     A,#0FCH
084A 6013              JZ      ?C0365
084C 2407              ADD     A,#07H
084E 7014              JNZ     ?C0366
                                           ; SOURCE LINE # 2121
                                           ; SOURCE LINE # 2122
0850         ?C0362:
0850 120000      E     LCALL   CheckAndSetDecoderScaler
0853 8012              SJMP    ?C0602
                                           ; SOURCE LINE # 2124
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 124 

0855         ?C0363:
0855 120000      E     LCALL   CheckAndSetComponent
0858         ?C0599:
0858 800D              SJMP    ?C0602
                                           ; SOURCE LINE # 2127
085A         ?C0364:
085A 120000      E     LCALL   CheckAndSetPC
085D         ?C0600:
085D 8008              SJMP    ?C0602
                                           ; SOURCE LINE # 2138
085F         ?C0365:
085F 120000      E     LCALL   CheckAndSetBT656
0862         ?C0601:
0862 8003              SJMP    ?C0602
                                           ; SOURCE LINE # 2140
0864         ?C0366:
0864 120000      E     LCALL   CheckAndSetUnknown
0867         ?C0602:
0867 900000      R     MOV     DPTR,#ret
086A EF                MOV     A,R7
086B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2141
086C         ?C0360:
                                           ; SOURCE LINE # 2142
086C 900000      R     MOV     DPTR,#ret
086F E0                MOVX    A,@DPTR
0870 701C              JNZ     ?C0367
                                           ; SOURCE LINE # 2144
0872 FF                MOV     R7,A
0873 120000      E     LCALL   _VInput_enableOutput
                                           ; SOURCE LINE # 2145
0876 7BFF              MOV     R3,#0FFH
0878 7A00        R     MOV     R2,#HIGH ?SC_1786
087A 7900        R     MOV     R1,#LOW ?SC_1786
087C 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 2147
087F 120000      E     LCALL   getNoSignalLogoStatus
0882 EF                MOV     A,R7
0883 7003              JNZ     $ + 5H
0885 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 2148
0888 120000      E     LCALL   RemoveLogo
                                           ; SOURCE LINE # 2150
088B 020000      R     LJMP    ?C0193
088E         ?C0367:
                                           ; SOURCE LINE # 2154
088E E4                CLR     A
088F FF                MOV     R7,A
0890 120000      E     LCALL   _VInput_gotoFreerun
                                           ; SOURCE LINE # 2155
0893 7BFF              MOV     R3,#0FFH
0895 7A00        R     MOV     R2,#HIGH ?SC_1798
0897 7900        R     MOV     R1,#LOW ?SC_1798
0899         ?C0585:
                                           ; SOURCE LINE # 2156
                                           ; SOURCE LINE # 2157
0899 020000      R     LJMP    ?C0614
089C         ?C0359:
                                           ; SOURCE LINE # 2159
089C 120000      R     LCALL   L?0646
089F 7400        R     MOV     A,#HIGH ?SC_1807
08A1 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 125 

08A2 A3                INC     DPTR
08A3 7400        R     MOV     A,#LOW ?SC_1807
08A5 F0                MOVX    @DPTR,A
08A6 900000      R     MOV     DPTR,#argv
08A9 120000      R     LCALL   L?0644
08AC 120000      E     LCALL   _stricmp
08AF EF                MOV     A,R7
08B0 4E                ORL     A,R6
08B1 7056              JNZ     ?C0371
                                           ; SOURCE LINE # 2160
08B3 120000      R     LCALL   L?0668
08B6 5009              JNC     ?C0372
                                           ; SOURCE LINE # 2161
08B8 7BFF              MOV     R3,#0FFH
08BA 7A00        R     MOV     R2,#HIGH ?SC_1813
08BC 7900        R     MOV     R1,#LOW ?SC_1813
08BE         ?C0603:
                                           ; SOURCE LINE # 2162
08BE 020000      R     LJMP    ?C0614
08C1         ?C0372:
                                           ; SOURCE LINE # 2163
                                           ; SOURCE LINE # 2165
08C1 120000      R     LCALL   L?0646
08C4 7400        R     MOV     A,#HIGH ?SC_1829
08C6 F0                MOVX    @DPTR,A
08C7 A3                INC     DPTR
08C8 7400        R     MOV     A,#LOW ?SC_1829
08CA 120000      R     LCALL   L?0642
08CD 120000      E     LCALL   _stricmp
08D0 EF                MOV     A,R7
08D1 4E                ORL     A,R6
08D2 6013              JZ      ?C0375
08D4 120000      R     LCALL   L?0646
08D7 7400        R     MOV     A,#HIGH ?SC_1835
08D9 F0                MOVX    @DPTR,A
08DA A3                INC     DPTR
08DB 7400        R     MOV     A,#LOW ?SC_1835
08DD 120000      R     LCALL   L?0642
08E0 120000      E     LCALL   _stricmp
08E3 EF                MOV     A,R7
08E4 4E                ORL     A,R6
08E5 7006              JNZ     ?C0374
08E7         ?C0375:
                                           ; SOURCE LINE # 2166
08E7 120000      E     LCALL   AutoTunePhase
08EA 020000      R     LJMP    ?C0193
08ED         ?C0374:
                                           ; SOURCE LINE # 2167
08ED 120000      R     LCALL   L?0646
08F0 7400        R     MOV     A,#HIGH ?SC_1838
08F2 F0                MOVX    @DPTR,A
08F3 A3                INC     DPTR
08F4 7400        R     MOV     A,#LOW ?SC_1838
08F6 120000      R     LCALL   L?0642
08F9 120000      E     LCALL   _stricmp
08FC EF                MOV     A,R7
08FD 4E                ORL     A,R6
08FE 6003              JZ      $ + 5H
0900 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 2168
0903 120000      E     LCALL   AutoTuneColor
                                           ; SOURCE LINE # 2170
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 126 

                                           ; SOURCE LINE # 2171
0906 020000      R     LJMP    ?C0193
0909         ?C0371:
                                           ; SOURCE LINE # 2174
0909 120000      R     LCALL   L?0646
090C 7400        R     MOV     A,#HIGH ?SC_1844
090E F0                MOVX    @DPTR,A
090F A3                INC     DPTR
0910 7400        R     MOV     A,#LOW ?SC_1844
0912 F0                MOVX    @DPTR,A
0913 900000      R     MOV     DPTR,#argv
0916 120000      R     LCALL   L?0644
0919 120000      E     LCALL   _stricmp
091C EF                MOV     A,R7
091D 4E                ORL     A,R6
091E 7006              JNZ     ?C0379
                                           ; SOURCE LINE # 2175
0920 120000      E     LCALL   MonitorSPI
                                           ; SOURCE LINE # 2176
0923 020000      R     LJMP    ?C0193
0926         ?C0379:
                                           ; SOURCE LINE # 2177
0926 120000      R     LCALL   L?0646
0929 7400        R     MOV     A,#HIGH ?SC_1848
092B F0                MOVX    @DPTR,A
092C A3                INC     DPTR
092D 7400        R     MOV     A,#LOW ?SC_1848
092F F0                MOVX    @DPTR,A
0930 900000      R     MOV     DPTR,#argv
0933 120000      R     LCALL   L?0644
0936 120000      E     LCALL   _stricmp
0939 EF                MOV     A,R7
093A 4E                ORL     A,R6
093B 7006              JNZ     ?C0381
                                           ; SOURCE LINE # 2178
093D 120000      E     LCALL   MonitorSPIC
                                           ; SOURCE LINE # 2179
0940 020000      R     LJMP    ?C0193
0943         ?C0381:
                                           ; SOURCE LINE # 2182
0943 120000      R     LCALL   L?0646
0946 7400        R     MOV     A,#HIGH ?SC_1853
0948 F0                MOVX    @DPTR,A
0949 A3                INC     DPTR
094A 7400        R     MOV     A,#LOW ?SC_1853
094C F0                MOVX    @DPTR,A
094D 900000      R     MOV     DPTR,#argv
0950 120000      R     LCALL   L?0644
0953 120000      E     LCALL   _stricmp
0956 EF                MOV     A,R7
0957 4E                ORL     A,R6
0958 7006              JNZ     ?C0383
                                           ; SOURCE LINE # 2183
095A 120000      E     LCALL   MonitorEE
                                           ; SOURCE LINE # 2184
095D 020000      R     LJMP    ?C0193
0960         ?C0383:
                                           ; SOURCE LINE # 2187
0960 120000      R     LCALL   L?0646
0963 7400        R     MOV     A,#HIGH ?SC_1856
0965 F0                MOVX    @DPTR,A
0966 A3                INC     DPTR
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 127 

0967 7400        R     MOV     A,#LOW ?SC_1856
0969 F0                MOVX    @DPTR,A
096A 900000      R     MOV     DPTR,#argv
096D 120000      R     LCALL   L?0644
0970 120000      E     LCALL   _stricmp
0973 EF                MOV     A,R7
0974 4E                ORL     A,R6
0975 7006              JNZ     ?C0385
                                           ; SOURCE LINE # 2188
0977 120000      E     LCALL   MonitorMenu
                                           ; SOURCE LINE # 2189
097A 020000      R     LJMP    ?C0193
097D         ?C0385:
                                           ; SOURCE LINE # 2191
097D 120000      R     LCALL   L?0646
0980 7400        R     MOV     A,#HIGH ?SC_1861
0982 F0                MOVX    @DPTR,A
0983 A3                INC     DPTR
0984 7400        R     MOV     A,#LOW ?SC_1861
0986 F0                MOVX    @DPTR,A
0987 900000      R     MOV     DPTR,#argv
098A 120000      R     LCALL   L?0644
098D 120000      E     LCALL   _stricmp
0990 EF                MOV     A,R7
0991 4E                ORL     A,R6
0992 7006              JNZ     ?C0387
                                           ; SOURCE LINE # 2192
0994 120000      E     LCALL   MonitorFOsd
                                           ; SOURCE LINE # 2193
0997 020000      R     LJMP    ?C0193
099A         ?C0387:
                                           ; SOURCE LINE # 2195
099A 120000      R     LCALL   L?0646
099D 7400        R     MOV     A,#HIGH ?SC_1866
099F F0                MOVX    @DPTR,A
09A0 A3                INC     DPTR
09A1 7400        R     MOV     A,#LOW ?SC_1866
09A3 F0                MOVX    @DPTR,A
09A4 900000      R     MOV     DPTR,#argv
09A7 120000      R     LCALL   L?0644
09AA 120000      E     LCALL   _stricmp
09AD EF                MOV     A,R7
09AE 4E                ORL     A,R6
09AF 7006              JNZ     ?C0389
                                           ; SOURCE LINE # 2196
09B1 120000      E     LCALL   MonitorSOsd
                                           ; SOURCE LINE # 2197
09B4 020000      R     LJMP    ?C0193
09B7         ?C0389:
                                           ; SOURCE LINE # 2199
09B7 120000      R     LCALL   L?0646
09BA 7400        R     MOV     A,#HIGH ?SC_1871
09BC F0                MOVX    @DPTR,A
09BD A3                INC     DPTR
09BE 7400        R     MOV     A,#LOW ?SC_1871
09C0 F0                MOVX    @DPTR,A
09C1 900000      R     MOV     DPTR,#argv
09C4 120000      R     LCALL   L?0644
09C7 120000      E     LCALL   _stricmp
09CA EF                MOV     A,R7
09CB 4E                ORL     A,R6
09CC 7006              JNZ     ?C0391
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 128 

                                           ; SOURCE LINE # 2200
09CE 120000      E     LCALL   MonitorMCU
                                           ; SOURCE LINE # 2201
09D1 020000      R     LJMP    ?C0193
09D4         ?C0391:
                                           ; SOURCE LINE # 2203
09D4 120000      R     LCALL   L?0646
09D7 7400        R     MOV     A,#HIGH ?SC_1875
09D9 F0                MOVX    @DPTR,A
09DA A3                INC     DPTR
09DB 7400        R     MOV     A,#LOW ?SC_1875
09DD F0                MOVX    @DPTR,A
09DE 900000      R     MOV     DPTR,#argv
09E1 120000      R     LCALL   L?0644
09E4 120000      E     LCALL   _stricmp
09E7 EF                MOV     A,R7
09E8 4E                ORL     A,R6
09E9 7023              JNZ     ?C0393
                                           ; SOURCE LINE # 2204
09EB 900000      R     MOV     DPTR,#argc
09EE E0                MOVX    A,@DPTR
09EF B4020B            CJNE    A,#02H,?C0394
                                           ; SOURCE LINE # 2205
09F2 120000      R     LCALL   L?0643
09F5 120000      E     LCALL   _a2h
09F8 900000      R     MOV     DPTR,#DebugLevel
09FB EF                MOV     A,R7
09FC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2206
09FD         ?C0394:
                                           ; SOURCE LINE # 2207
09FD 7BFF              MOV     R3,#0FFH
09FF 7A00        R     MOV     R2,#HIGH ?SC_1881
0A01 7900        R     MOV     R1,#LOW ?SC_1881
0A03 900000      R     MOV     DPTR,#DebugLevel
0A06 E0                MOVX    A,@DPTR
0A07 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0A0A         ?C0580:
0A0A F0                MOVX    @DPTR,A
0A0B         ?C0588:
                                           ; SOURCE LINE # 2208
0A0B 020000      R     LJMP    ?C0617
0A0E         ?C0393:
                                           ; SOURCE LINE # 2210
0A0E 120000      R     LCALL   L?0646
0A11 7400        R     MOV     A,#HIGH ?SC_1901
0A13 F0                MOVX    @DPTR,A
0A14 A3                INC     DPTR
0A15 7400        R     MOV     A,#LOW ?SC_1901
0A17 F0                MOVX    @DPTR,A
0A18 900000      R     MOV     DPTR,#argv
0A1B 120000      R     LCALL   L?0644
0A1E 120000      E     LCALL   _stricmp
0A21 EF                MOV     A,R7
0A22 4E                ORL     A,R6
0A23 7023              JNZ     ?C0396
                                           ; SOURCE LINE # 2211
0A25 900000      R     MOV     DPTR,#argc
0A28 E0                MOVX    A,@DPTR
0A29 B4020B            CJNE    A,#02H,?C0397
                                           ; SOURCE LINE # 2212
0A2C 120000      R     LCALL   L?0643
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 129 

0A2F 120000      E     LCALL   _a2h
0A32 900000      R     MOV     DPTR,#SW_key
0A35 EF                MOV     A,R7
0A36 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2213
0A37         ?C0397:
                                           ; SOURCE LINE # 2214
0A37 7BFF              MOV     R3,#0FFH
0A39 7A00        R     MOV     R2,#HIGH ?SC_1905
0A3B 7900        R     MOV     R1,#LOW ?SC_1905
0A3D 900000      R     MOV     DPTR,#SW_key
0A40 E0                MOVX    A,@DPTR
0A41 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0A44 F0                MOVX    @DPTR,A
0A45         ?C0605:
                                           ; SOURCE LINE # 2215
0A45 020000      R     LJMP    ?C0617
0A48         ?C0396:
                                           ; SOURCE LINE # 2217
0A48 120000      R     LCALL   L?0646
0A4B 7400        R     MOV     A,#HIGH ?SC_1920
0A4D F0                MOVX    @DPTR,A
0A4E A3                INC     DPTR
0A4F 7400        R     MOV     A,#LOW ?SC_1920
0A51 F0                MOVX    @DPTR,A
0A52 900000      R     MOV     DPTR,#argv
0A55 120000      R     LCALL   L?0644
0A58 120000      E     LCALL   _stricmp
0A5B EF                MOV     A,R7
0A5C 4E                ORL     A,R6
0A5D 701B              JNZ     ?C0399
                                           ; SOURCE LINE # 2218
0A5F 120000      R     LCALL   L?0634
0A62 700B              JNZ     ?C0400
                                           ; SOURCE LINE # 2219
0A64 C200        R     CLR     echo
                                           ; SOURCE LINE # 2220
0A66 7BFF              MOV     R3,#0FFH
0A68 7A00        R     MOV     R2,#HIGH ?SC_1925
0A6A 7900        R     MOV     R1,#LOW ?SC_1925
0A6C         ?C0606:
                                           ; SOURCE LINE # 2221
0A6C 020000      R     LJMP    ?C0617
0A6F         ?C0400:
                                           ; SOURCE LINE # 2222
                                           ; SOURCE LINE # 2223
0A6F D200        R     SETB    echo
                                           ; SOURCE LINE # 2224
0A71 7BFF              MOV     R3,#0FFH
0A73 7A00        R     MOV     R2,#HIGH ?SC_1935
0A75 7900        R     MOV     R1,#LOW ?SC_1935
0A77         ?C0607:
                                           ; SOURCE LINE # 2225
                                           ; SOURCE LINE # 2226
0A77 020000      R     LJMP    ?C0617
0A7A         ?C0399:
                                           ; SOURCE LINE # 2228
0A7A 120000      R     LCALL   L?0646
0A7D 7400        R     MOV     A,#HIGH ?SC_1944
0A7F F0                MOVX    @DPTR,A
0A80 A3                INC     DPTR
0A81 7400        R     MOV     A,#LOW ?SC_1944
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 130 

0A83 F0                MOVX    @DPTR,A
0A84 900000      R     MOV     DPTR,#argv
0A87 120000      R     LCALL   L?0644
0A8A 120000      E     LCALL   _stricmp
0A8D EF                MOV     A,R7
0A8E 4E                ORL     A,R6
0A8F 7033              JNZ     ?C0403
                                           ; SOURCE LINE # 2229
0A91 120000      R     LCALL   L?0646
0A94 7400        R     MOV     A,#HIGH ?SC_1951
0A96 F0                MOVX    @DPTR,A
0A97 A3                INC     DPTR
0A98 7400        R     MOV     A,#LOW ?SC_1951
0A9A 120000      R     LCALL   L?0642
0A9D 120000      E     LCALL   _stricmp
0AA0 EF                MOV     A,R7
0AA1 4E                ORL     A,R6
0AA2 7015              JNZ     ?C0404
                                           ; SOURCE LINE # 2230
0AA4 C200        R     CLR     access
                                           ; SOURCE LINE # 2231
0AA6 7BFF              MOV     R3,#0FFH
0AA8 7A00        R     MOV     R2,#HIGH ?SC_1953
0AAA 7900        R     MOV     R1,#LOW ?SC_1953
0AAC 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 2234
0AAF 120000      R     LCALL   L?0745
0AB2 A3                INC     DPTR
0AB3 74FE              MOV     A,#0FEH
0AB5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2235
0AB6 020000      R     LJMP    ?C0193
0AB9         ?C0404:
                                           ; SOURCE LINE # 2236
                                           ; SOURCE LINE # 2237
0AB9 D200        R     SETB    access
                                           ; SOURCE LINE # 2238
0ABB 7BFF              MOV     R3,#0FFH
0ABD 7A00        R     MOV     R2,#HIGH ?SC_1965
0ABF 7900        R     MOV     R1,#LOW ?SC_1965
0AC1         ?C0608:
                                           ; SOURCE LINE # 2239
                                           ; SOURCE LINE # 2240
0AC1 020000      R     LJMP    ?C0617
0AC4         ?C0403:
                                           ; SOURCE LINE # 2242
0AC4 120000      R     LCALL   L?0646
0AC7 7400        R     MOV     A,#HIGH ?SC_1976
0AC9 F0                MOVX    @DPTR,A
0ACA A3                INC     DPTR
0ACB 7400        R     MOV     A,#LOW ?SC_1976
0ACD F0                MOVX    @DPTR,A
0ACE 900000      R     MOV     DPTR,#argv
0AD1 120000      R     LCALL   L?0644
0AD4 120000      E     LCALL   _stricmp
0AD7 EF                MOV     A,R7
0AD8 4E                ORL     A,R6
0AD9 7035              JNZ     ?C0407
                                           ; SOURCE LINE # 2243
0ADB 120000      R     LCALL   L?0668
0ADE 401C              JC      ?C0408
                                           ; SOURCE LINE # 2244
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 131 

0AE0 120000      R     LCALL   L?0636
0AE3 7005              JNZ     ?C0409
                                           ; SOURCE LINE # 2245
0AE5 759B01            MOV     SFR_CACHE_EN,#01H
0AE8 8012              SJMP    ?C0408
0AEA         ?C0409:
                                           ; SOURCE LINE # 2246
0AEA 120000      R     LCALL   L?0634
0AED 7004              JNZ     ?C0411
                                           ; SOURCE LINE # 2247
0AEF F59B              MOV     SFR_CACHE_EN,A
0AF1 8009              SJMP    ?C0408
0AF3         ?C0411:
                                           ; SOURCE LINE # 2249
0AF3 7BFF              MOV     R3,#0FFH
0AF5 7A00        R     MOV     R2,#HIGH ?SC_1982
0AF7 7900        R     MOV     R1,#LOW ?SC_1982
0AF9 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 2250
0AFC         ?C0408:
                                           ; SOURCE LINE # 2252
0AFC E59B              MOV     A,SFR_CACHE_EN
0AFE 7BFF              MOV     R3,#0FFH
0B00 6007              JZ      ?C0413
0B02 7A00        R     MOV     R2,#HIGH ?SC_2004
0B04 7900        R     MOV     R1,#LOW ?SC_2004
0B06         ?C0609:
0B06 020000      R     LJMP    ?C0617
0B09         ?C0413:
                                           ; SOURCE LINE # 2253
0B09 7A00        R     MOV     R2,#HIGH ?SC_2014
0B0B 7900        R     MOV     R1,#LOW ?SC_2014
0B0D         ?C0610:
                                           ; SOURCE LINE # 2254
0B0D 020000      R     LJMP    ?C0617
0B10         ?C0407:
                                           ; SOURCE LINE # 2256
0B10 120000      R     LCALL   L?0646
0B13 7400        R     MOV     A,#HIGH ?SC_2025
0B15 F0                MOVX    @DPTR,A
0B16 A3                INC     DPTR
0B17 7400        R     MOV     A,#LOW ?SC_2025
0B19 F0                MOVX    @DPTR,A
0B1A 900000      R     MOV     DPTR,#argv
0B1D 120000      R     LCALL   L?0644
0B20 120000      E     LCALL   _stricmp
0B23 EF                MOV     A,R7
0B24 4E                ORL     A,R6
0B25 701A              JNZ     ?C0416
                                           ; SOURCE LINE # 2257
0B27 120000      R     LCALL   L?0636
0B2A 700A              JNZ     ?C0417
                                           ; SOURCE LINE # 2258
0B2C 750003      E     MOV     tic_task,#03H
0B2F 7500E8      E     MOV     tic_task+01H,#0E8H
                                           ; SOURCE LINE # 2259
0B32 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 2260
0B34 8005              SJMP    ?C0612
0B36         ?C0417:
                                           ; SOURCE LINE # 2261
                                           ; SOURCE LINE # 2262
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 132 

0B36 E4                CLR     A
0B37 FF                MOV     R7,A
0B38 120000      E     LCALL   _TaskSetGrid
                                           ; SOURCE LINE # 2264
0B3B         ?C0612:
0B3B 120000      E     LCALL   _TaskNoSignal_setCmd
                                           ; SOURCE LINE # 2267
                                           ; SOURCE LINE # 2268
0B3E 020000      R     LJMP    ?C0193
0B41         ?C0416:
                                           ; SOURCE LINE # 2270
0B41 120000      R     LCALL   L?0646
0B44 7400        R     MOV     A,#HIGH ?SC_2030
0B46 F0                MOVX    @DPTR,A
0B47 A3                INC     DPTR
0B48 7400        R     MOV     A,#LOW ?SC_2030
0B4A F0                MOVX    @DPTR,A
0B4B 900000      R     MOV     DPTR,#argv
0B4E 120000      R     LCALL   L?0644
0B51 120000      E     LCALL   _stricmp
0B54 EF                MOV     A,R7
0B55 4E                ORL     A,R6
0B56 701D              JNZ     ?C0420
                                           ; SOURCE LINE # 2271
0B58 7BFF              MOV     R3,#0FFH
0B5A 7A00        R     MOV     R2,#HIGH ?SC_2035
0B5C 7900        R     MOV     R1,#LOW ?SC_2035
0B5E AF00        E     MOV     R7,SystemClock+03H
0B60 AE00        E     MOV     R6,SystemClock+02H
0B62 AD00        E     MOV     R5,SystemClock+01H
0B64 AC00        E     MOV     R4,SystemClock
0B66 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0B69 120000      E     LCALL   ?C?LSTXDATA
0B6C 900000      E     MOV     DPTR,#?_Printf?BYTE+07H
0B6F E500        E     MOV     A,tic01
0B71 F0                MOVX    @DPTR,A
0B72         ?C0611:
                                           ; SOURCE LINE # 2272
0B72 020000      R     LJMP    ?C0617
0B75         ?C0420:
                                           ; SOURCE LINE # 2452
0B75 120000      R     LCALL   L?0646
0B78 7400        R     MOV     A,#HIGH ?SC_2059
0B7A F0                MOVX    @DPTR,A
0B7B A3                INC     DPTR
0B7C 7400        R     MOV     A,#LOW ?SC_2059
0B7E F0                MOVX    @DPTR,A
0B7F 900000      R     MOV     DPTR,#argv
0B82 120000      R     LCALL   L?0644
0B85 120000      E     LCALL   _stricmp
0B88 EF                MOV     A,R7
0B89 4E                ORL     A,R6
0B8A 7014              JNZ     ?C0422
                                           ; SOURCE LINE # 2455
0B8C 120000      R     LCALL   L?0643
0B8F 120000      E     LCALL   _a2h
0B92 900000      R     MOV     DPTR,#start
0B95 EE                MOV     A,R6
0B96 F0                MOVX    @DPTR,A
0B97 A3                INC     DPTR
0B98 EF                MOV     A,R7
0B99 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 133 

                                           ; SOURCE LINE # 2456
0B9A 120000      E     LCALL   _TestInitFontRam
                                           ; SOURCE LINE # 2457
0B9D 020000      R     LJMP    ?C0193
0BA0         ?C0422:
                                           ; SOURCE LINE # 2463
0BA0 120000      R     LCALL   L?0646
0BA3 7400        R     MOV     A,#HIGH ?SC_2068
0BA5 F0                MOVX    @DPTR,A
0BA6 A3                INC     DPTR
0BA7 7400        R     MOV     A,#LOW ?SC_2068
0BA9 F0                MOVX    @DPTR,A
0BAA 900000      R     MOV     DPTR,#argv
0BAD 120000      R     LCALL   L?0644
0BB0 120000      E     LCALL   _stricmp
0BB3 EF                MOV     A,R7
0BB4 4E                ORL     A,R6
0BB5 7057              JNZ     ?C0424
                                           ; SOURCE LINE # 2474
0BB7 120000      R     LCALL   L?0736
                                           ; SOURCE LINE # 2476
0BBA E4                CLR     A
0BBB A3                INC     DPTR
0BBC F0                MOVX    @DPTR,A
0BBD         ?C0425:
                                           ; SOURCE LINE # 2477
0BBD 900000      R     MOV     DPTR,#OsdRamAddr
0BC0 E0                MOVX    A,@DPTR
0BC1 FE                MOV     R6,A
0BC2 A3                INC     DPTR
0BC3 E0                MOVX    A,@DPTR
0BC4 FF                MOV     R7,A
0BC5 120000      E     LCALL   _FOsdRamSetAddress
                                           ; SOURCE LINE # 2478
0BC8 120000      R     LCALL   L?0651
0BCB E4                CLR     A
0BCC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2479
0BCD 900000      R     MOV     DPTR,#fdata
0BD0 120000      R     LCALL   L?0720
0BD3 120000      R     LCALL   L?0652
0BD6 EF                MOV     A,R7
0BD7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2480
0BD8 900000      R     MOV     DPTR,#attr
0BDB E0                MOVX    A,@DPTR
0BDC FF                MOV     R7,A
0BDD E500        E     MOV     A,regTW88+01H
0BDF 2408              ADD     A,#08H
0BE1 120000      R     LCALL   L?0652
0BE4 EF                MOV     A,R7
0BE5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2481
0BE6 120000      R     LCALL   L?0735
0BE9 7003              JNZ     ?C0554
0BEB 120000      R     LCALL   L?0719
0BEE         ?C0554:
                                           ; SOURCE LINE # 2482
0BEE 900000      R     MOV     DPTR,#fdata
                                           ; SOURCE LINE # 2483
0BF1 120000      R     LCALL   L?0696
0BF4 C3                CLR     C
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 134 

0BF5 9410              SUBB    A,#010H
0BF7 40C4              JC      ?C0425
0BF9         ?C0426:
                                           ; SOURCE LINE # 2485
0BF9 900000      R     MOV     DPTR,#fdata
0BFC E0                MOVX    A,@DPTR
0BFD D3                SETB    C
0BFE 943C              SUBB    A,#03CH
0C00 4003              JC      ?C0428
0C02 7401              MOV     A,#01H
0C04 F0                MOVX    @DPTR,A
0C05         ?C0428:
                                           ; SOURCE LINE # 2486
0C05 900000      R     MOV     DPTR,#attr
0C08 E0                MOVX    A,@DPTR
0C09 F4                CPL     A
0C0A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2488
0C0B 020000      R     LJMP    ?C0193
0C0E         ?C0424:
                                           ; SOURCE LINE # 2489
0C0E 120000      R     LCALL   L?0646
0C11 7400        R     MOV     A,#HIGH ?SC_2072
0C13 F0                MOVX    @DPTR,A
0C14 A3                INC     DPTR
0C15 7400        R     MOV     A,#LOW ?SC_2072
0C17 F0                MOVX    @DPTR,A
0C18 900000      R     MOV     DPTR,#argv
0C1B 120000      R     LCALL   L?0644
0C1E 120000      E     LCALL   _stricmp
0C21 EF                MOV     A,R7
0C22 4E                ORL     A,R6
0C23 7043              JNZ     ?C0430
0C25         ?C0431:
                                           ; SOURCE LINE # 2500
0C25 120000      E     LCALL   RS_ready
0C28 EF                MOV     A,R7
0C29 6003              JZ      $ + 5H
0C2B 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 2504
                                           ; SOURCE LINE # 2508
0C2E 120000      R     LCALL   L?0691
                                           ; SOURCE LINE # 2509
0C31 900000      R     MOV     DPTR,#attr
                                           ; SOURCE LINE # 2511
0C34 120000      R     LCALL   L?0648
                                           ; SOURCE LINE # 2512
0C37 120000      R     LCALL   L?0692
                                           ; SOURCE LINE # 2514
0C3A E4                CLR     A
0C3B 900000      R     MOV     DPTR,#i
0C3E F0                MOVX    @DPTR,A
0C3F         ?C0433:
                                           ; SOURCE LINE # 2515
0C3F 900000      R     MOV     DPTR,#fdata
0C42 120000      R     LCALL   L?0720
0C45 120000      R     LCALL   L?0652
0C48 EF                MOV     A,R7
0C49 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2516
0C4A 900000      R     MOV     DPTR,#fdata
                                           ; SOURCE LINE # 2517
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 135 

0C4D 120000      R     LCALL   L?0696
0C50 B410EC            CJNE    A,#010H,?C0433
0C53         ?C0434:
                                           ; SOURCE LINE # 2519
0C53 900000      R     MOV     DPTR,#fdata
0C56 E0                MOVX    A,@DPTR
0C57 D3                SETB    C
0C58 943C              SUBB    A,#03CH
0C5A 4003              JC      ?C0436
0C5C 7401              MOV     A,#01H
0C5E F0                MOVX    @DPTR,A
0C5F         ?C0436:
                                           ; SOURCE LINE # 2520
0C5F 900000      R     MOV     DPTR,#attr
0C62 E0                MOVX    A,@DPTR
0C63 F4                CPL     A
0C64 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2521
0C65 020000      R     LJMP    ?C0431
                                           ; SOURCE LINE # 2523
0C68         ?C0430:
                                           ; SOURCE LINE # 2524
0C68 120000      R     LCALL   L?0646
0C6B 7400        R     MOV     A,#HIGH ?SC_2076
0C6D F0                MOVX    @DPTR,A
0C6E A3                INC     DPTR
0C6F 7400        R     MOV     A,#LOW ?SC_2076
0C71 F0                MOVX    @DPTR,A
0C72 900000      R     MOV     DPTR,#argv
0C75 120000      R     LCALL   L?0644
0C78 120000      E     LCALL   _stricmp
0C7B EF                MOV     A,R7
0C7C 4E                ORL     A,R6
0C7D 7048              JNZ     ?C0438
0C7F         ?C0439:
                                           ; SOURCE LINE # 2533
0C7F 120000      E     LCALL   RS_ready
0C82 EF                MOV     A,R7
0C83 6003              JZ      $ + 5H
0C85 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 2536
                                           ; SOURCE LINE # 2540
0C88 120000      R     LCALL   L?0691
                                           ; SOURCE LINE # 2541
0C8B 900000      R     MOV     DPTR,#attr
                                           ; SOURCE LINE # 2543
                                           ; SOURCE LINE # 2544
                                           ; SOURCE LINE # 2546
0C8E 120000      R     LCALL   L?0647
                                           ; SOURCE LINE # 2547
0C91 120000      R     LCALL   L?0738
0C94         ?C0441:
                                           ; SOURCE LINE # 2548
0C94 900000      R     MOV     DPTR,#fdata
0C97 120000      R     LCALL   L?0721
0C9A 120000      R     LCALL   L?0652
0C9D EF                MOV     A,R7
0C9E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2549
0C9F 900000      R     MOV     DPTR,#fdata
                                           ; SOURCE LINE # 2550
0CA2 120000      R     LCALL   L?0697
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 136 

0CA5 B410EC            CJNE    A,#010H,?C0441
0CA8         ?C0442:
                                           ; SOURCE LINE # 2551
0CA8 E4                CLR     A
0CA9 2500        E     ADD     A,regTW88+01H
0CAB 120000      R     LCALL   L?0652
0CAE E0                MOVX    A,@DPTR
0CAF 54FE              ANL     A,#0FEH
0CB1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2553
0CB2 900000      R     MOV     DPTR,#fdata
0CB5 E0                MOVX    A,@DPTR
0CB6 D3                SETB    C
0CB7 943C              SUBB    A,#03CH
0CB9 4003              JC      ?C0444
0CBB 7401              MOV     A,#01H
0CBD F0                MOVX    @DPTR,A
0CBE         ?C0444:
                                           ; SOURCE LINE # 2554
0CBE 900000      R     MOV     DPTR,#attr
0CC1 E0                MOVX    A,@DPTR
0CC2 F4                CPL     A
0CC3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2555
0CC4 020000      R     LJMP    ?C0439
                                           ; SOURCE LINE # 2557
0CC7         ?C0438:
                                           ; SOURCE LINE # 2559
0CC7 120000      R     LCALL   L?0646
0CCA 7400        R     MOV     A,#HIGH ?SC_2080
0CCC F0                MOVX    @DPTR,A
0CCD A3                INC     DPTR
0CCE 7400        R     MOV     A,#LOW ?SC_2080
0CD0 F0                MOVX    @DPTR,A
0CD1 900000      R     MOV     DPTR,#argv
0CD4 120000      R     LCALL   L?0644
0CD7 120000      E     LCALL   _stricmp
0CDA EF                MOV     A,R7
0CDB 4E                ORL     A,R6
0CDC 7055              JNZ     ?C0446
0CDE         ?C0447:
                                           ; SOURCE LINE # 2568
0CDE 120000      E     LCALL   RS_ready
0CE1 EF                MOV     A,R7
0CE2 6003              JZ      $ + 5H
0CE4 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 2571
0CE7 120000      R     LCALL   L?0736
                                           ; SOURCE LINE # 2575
0CEA FF                MOV     R7,A
0CEB 7E01              MOV     R6,#01H
0CED 120000      E     LCALL   _FOsdRamSetAddress
                                           ; SOURCE LINE # 2576
0CF0 900000      R     MOV     DPTR,#attr
                                           ; SOURCE LINE # 2578
                                           ; SOURCE LINE # 2579
                                           ; SOURCE LINE # 2581
0CF3 120000      R     LCALL   L?0647
                                           ; SOURCE LINE # 2582
0CF6 120000      R     LCALL   L?0738
0CF9         ?C0449:
                                           ; SOURCE LINE # 2583
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 137 

0CF9 900000      R     MOV     DPTR,#fdata
0CFC 120000      R     LCALL   L?0721
0CFF 120000      R     LCALL   L?0652
0D02 EF                MOV     A,R7
0D03 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2584
0D04 900000      R     MOV     DPTR,#fdata
                                           ; SOURCE LINE # 2585
0D07 120000      R     LCALL   L?0697
0D0A B410EC            CJNE    A,#010H,?C0449
0D0D         ?C0450:
                                           ; SOURCE LINE # 2586
0D0D 7F2C              MOV     R7,#02CH
0D0F 7E01              MOV     R6,#01H
0D11 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 2587
0D14 E4                CLR     A
0D15 2500        E     ADD     A,regTW88+01H
0D17 120000      R     LCALL   L?0652
0D1A E0                MOVX    A,@DPTR
0D1B 54FE              ANL     A,#0FEH
0D1D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2589
0D1E 900000      R     MOV     DPTR,#fdata
0D21 E0                MOVX    A,@DPTR
0D22 D3                SETB    C
0D23 943C              SUBB    A,#03CH
0D25 4003              JC      ?C0452
0D27 7401              MOV     A,#01H
0D29 F0                MOVX    @DPTR,A
0D2A         ?C0452:
                                           ; SOURCE LINE # 2590
0D2A 900000      R     MOV     DPTR,#attr
0D2D E0                MOVX    A,@DPTR
0D2E F4                CPL     A
0D2F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2591
0D30 020000      R     LJMP    ?C0447
                                           ; SOURCE LINE # 2593
0D33         ?C0446:
                                           ; SOURCE LINE # 2595
0D33 120000      R     LCALL   L?0646
0D36 7400        R     MOV     A,#HIGH ?SC_2084
0D38 F0                MOVX    @DPTR,A
0D39 A3                INC     DPTR
0D3A 7400        R     MOV     A,#LOW ?SC_2084
0D3C F0                MOVX    @DPTR,A
0D3D 900000      R     MOV     DPTR,#argv
0D40 120000      R     LCALL   L?0644
0D43 120000      E     LCALL   _stricmp
0D46 EF                MOV     A,R7
0D47 4E                ORL     A,R6
0D48 705D              JNZ     ?C0454
0D4A         ?C0455:
                                           ; SOURCE LINE # 2603
0D4A 120000      E     LCALL   RS_ready
0D4D EF                MOV     A,R7
0D4E 6003              JZ      $ + 5H
0D50 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 2606
0D53 120000      R     LCALL   L?0737
                                           ; SOURCE LINE # 2610
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 138 

0D56 FF                MOV     R7,A
0D57 7E01              MOV     R6,#01H
0D59 120000      E     LCALL   _FOsdRamSetAddress
                                           ; SOURCE LINE # 2611
0D5C 900000      R     MOV     DPTR,#attr
                                           ; SOURCE LINE # 2613
0D5F 120000      R     LCALL   L?0648
                                           ; SOURCE LINE # 2614
0D62 120000      R     LCALL   L?0692
                                           ; SOURCE LINE # 2616
0D65 E4                CLR     A
0D66 2500        E     ADD     A,regTW88+01H
0D68 120000      R     LCALL   L?0652
                                           ; SOURCE LINE # 2617
0D6B 120000      R     LCALL   L?0739
0D6E         ?C0457:
                                           ; SOURCE LINE # 2618
0D6E 900000      R     MOV     DPTR,#fdata
0D71 120000      R     LCALL   L?0721
0D74 120000      R     LCALL   L?0652
0D77 EF                MOV     A,R7
0D78 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2619
0D79 900000      R     MOV     DPTR,#fdata
                                           ; SOURCE LINE # 2620
0D7C 120000      R     LCALL   L?0697
0D7F B410EC            CJNE    A,#010H,?C0457
0D82         ?C0458:
                                           ; SOURCE LINE # 2621
0D82 120000      R     LCALL   L?0651
0D85 740D              MOV     A,#0DH
0D87 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2622
0D88 E4                CLR     A
0D89 2500        E     ADD     A,regTW88+01H
0D8B 120000      R     LCALL   L?0652
0D8E E0                MOVX    A,@DPTR
0D8F 54FE              ANL     A,#0FEH
0D91 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2624
0D92 900000      R     MOV     DPTR,#fdata
0D95 E0                MOVX    A,@DPTR
0D96 D3                SETB    C
0D97 943C              SUBB    A,#03CH
0D99 4003              JC      ?C0460
0D9B 7401              MOV     A,#01H
0D9D F0                MOVX    @DPTR,A
0D9E         ?C0460:
                                           ; SOURCE LINE # 2625
0D9E 900000      R     MOV     DPTR,#attr
0DA1 E0                MOVX    A,@DPTR
0DA2 F4                CPL     A
0DA3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2626
0DA4 020000      R     LJMP    ?C0455
                                           ; SOURCE LINE # 2628
0DA7         ?C0454:
                                           ; SOURCE LINE # 2630
0DA7 120000      R     LCALL   L?0646
0DAA 7400        R     MOV     A,#HIGH ?SC_2088
0DAC F0                MOVX    @DPTR,A
0DAD A3                INC     DPTR
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 139 

0DAE 7400        R     MOV     A,#LOW ?SC_2088
0DB0 F0                MOVX    @DPTR,A
0DB1 900000      R     MOV     DPTR,#argv
0DB4 120000      R     LCALL   L?0644
0DB7 120000      E     LCALL   _stricmp
0DBA EF                MOV     A,R7
0DBB 4E                ORL     A,R6
0DBC 6003              JZ      $ + 5H
0DBE 020000      R     LJMP    ?C0462
0DC1         ?C0463:
                                           ; SOURCE LINE # 2638
0DC1 120000      E     LCALL   RS_ready
0DC4 EF                MOV     A,R7
0DC5 6003              JZ      $ + 5H
0DC7 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 2645
0DCA 120000      R     LCALL   L?0651
0DCD E4                CLR     A
                                           ; SOURCE LINE # 2646
0DCE 120000      R     LCALL   L?0716
                                           ; SOURCE LINE # 2647
0DD1 7FE8              MOV     R7,#0E8H
0DD3 7E03              MOV     R6,#03H
0DD5 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 2648
0DD8 900000      R     MOV     DPTR,#attr
                                           ; SOURCE LINE # 2650
0DDB 120000      R     LCALL   L?0649
0DDE 740C              MOV     A,#0CH
                                           ; SOURCE LINE # 2651
0DE0 120000      R     LCALL   L?0716
                                           ; SOURCE LINE # 2653
0DE3 E4                CLR     A
0DE4 2500        E     ADD     A,regTW88+01H
0DE6 120000      R     LCALL   L?0652
0DE9 E0                MOVX    A,@DPTR
0DEA 4401              ORL     A,#01H
0DEC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2654
0DED 7FE8              MOV     R7,#0E8H
0DEF 7E03              MOV     R6,#03H
0DF1 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 2655
0DF4 E4                CLR     A
0DF5 900000      R     MOV     DPTR,#i
0DF8 F0                MOVX    @DPTR,A
0DF9         ?C0465:
                                           ; SOURCE LINE # 2656
0DF9 900000      R     MOV     DPTR,#fdata
0DFC 120000      R     LCALL   L?0721
0DFF 120000      R     LCALL   L?0652
0E02 EF                MOV     A,R7
0E03 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2657
0E04 900000      R     MOV     DPTR,#fdata
0E07 E0                MOVX    A,@DPTR
0E08 04                INC     A
0E09 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2658
0E0A 900000      R     MOV     DPTR,#OsdRamAddr+01H
0E0D E0                MOVX    A,@DPTR
0E0E 04                INC     A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 140 

0E0F F0                MOVX    @DPTR,A
0E10 7006              JNZ     ?C0555
0E12 900000      R     MOV     DPTR,#OsdRamAddr
0E15 E0                MOVX    A,@DPTR
0E16 04                INC     A
0E17 F0                MOVX    @DPTR,A
0E18         ?C0555:
                                           ; SOURCE LINE # 2659
0E18 120000      R     LCALL   L?0719
0E1B E0                MOVX    A,@DPTR
0E1C B410DA            CJNE    A,#010H,?C0465
0E1F         ?C0466:
                                           ; SOURCE LINE # 2660
0E1F 900000      R     MOV     DPTR,#OsdRamAddr+01H
0E22 E0                MOVX    A,@DPTR
0E23 04                INC     A
0E24 F0                MOVX    @DPTR,A
0E25 7006              JNZ     ?C0556
0E27 900000      R     MOV     DPTR,#OsdRamAddr
0E2A E0                MOVX    A,@DPTR
0E2B 04                INC     A
0E2C F0                MOVX    @DPTR,A
0E2D         ?C0556:
                                           ; SOURCE LINE # 2661
0E2D 120000      R     LCALL   L?0651
0E30 740D              MOV     A,#0DH
0E32 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2662
0E33 E4                CLR     A
0E34 2500        E     ADD     A,regTW88+01H
0E36 120000      R     LCALL   L?0652
0E39 E0                MOVX    A,@DPTR
0E3A 54FE              ANL     A,#0FEH
0E3C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2664
0E3D 900000      R     MOV     DPTR,#fdata
0E40 E0                MOVX    A,@DPTR
0E41 D3                SETB    C
0E42 943C              SUBB    A,#03CH
0E44 4003              JC      ?C0468
0E46 7401              MOV     A,#01H
0E48 F0                MOVX    @DPTR,A
0E49         ?C0468:
                                           ; SOURCE LINE # 2665
0E49 900000      R     MOV     DPTR,#attr
0E4C E0                MOVX    A,@DPTR
0E4D F4                CPL     A
0E4E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2666
0E4F 020000      R     LJMP    ?C0463
                                           ; SOURCE LINE # 2668
0E52         ?C0462:
                                           ; SOURCE LINE # 2670
0E52 120000      R     LCALL   L?0646
0E55 7400        R     MOV     A,#HIGH ?SC_2092
0E57 F0                MOVX    @DPTR,A
0E58 A3                INC     DPTR
0E59 7400        R     MOV     A,#LOW ?SC_2092
0E5B F0                MOVX    @DPTR,A
0E5C 900000      R     MOV     DPTR,#argv
0E5F 120000      R     LCALL   L?0644
0E62 120000      E     LCALL   _stricmp
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 141 

0E65 EF                MOV     A,R7
0E66 4E                ORL     A,R6
0E67 6003              JZ      $ + 5H
0E69 020000      R     LJMP    ?C0470
                                           ; SOURCE LINE # 2679
0E6C 2500        E     ADD     A,regTW88+01H
0E6E 120000      R     LCALL   L?0652
0E71 E0                MOVX    A,@DPTR
0E72 4401              ORL     A,#01H
                                           ; SOURCE LINE # 2680
0E74 120000      R     LCALL   L?0650
0E77 740C              MOV     A,#0CH
0E79 F0                MOVX    @DPTR,A
0E7A         ?C0471:
                                           ; SOURCE LINE # 2681
0E7A 120000      E     LCALL   RS_ready
0E7D EF                MOV     A,R7
0E7E 6003              JZ      $ + 5H
0E80 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 2684
0E83 900000      R     MOV     DPTR,#OsdRamAddr
0E86 F0                MOVX    @DPTR,A
0E87 A3                INC     DPTR
0E88 74FD              MOV     A,#0FDH
0E8A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2688
0E8B FF                MOV     R7,A
0E8C 7E00              MOV     R6,#00H
0E8E 120000      E     LCALL   _FOsdRamSetAddress
                                           ; SOURCE LINE # 2690
0E91 7F01              MOV     R7,#01H
0E93 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 2691
0E96 900000      R     MOV     DPTR,#attr
0E99 E0                MOVX    A,@DPTR
0E9A FF                MOV     R7,A
0E9B E500        E     MOV     A,regTW88+01H
0E9D 2408              ADD     A,#08H
0E9F 120000      R     LCALL   L?0652
0EA2 EF                MOV     A,R7
0EA3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2693
0EA4 900000      R     MOV     DPTR,#OsdRamAddr
0EA7 E0                MOVX    A,@DPTR
0EA8 FE                MOV     R6,A
0EA9 A3                INC     DPTR
0EAA E0                MOVX    A,@DPTR
0EAB FF                MOV     R7,A
0EAC 120000      E     LCALL   _FOsdRamSetAddress
                                           ; SOURCE LINE # 2695
0EAF E4                CLR     A
0EB0 900000      R     MOV     DPTR,#i
0EB3 F0                MOVX    @DPTR,A
0EB4         ?C0473:
                                           ; SOURCE LINE # 2696
0EB4 900000      R     MOV     DPTR,#fdata
0EB7 120000      R     LCALL   L?0721
0EBA 120000      R     LCALL   L?0652
0EBD EF                MOV     A,R7
0EBE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2697
0EBF 900000      R     MOV     DPTR,#fdata
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 142 

0EC2 E0                MOVX    A,@DPTR
0EC3 04                INC     A
0EC4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2698
0EC5 900000      R     MOV     DPTR,#OsdRamAddr+01H
0EC8 E0                MOVX    A,@DPTR
0EC9 04                INC     A
0ECA F0                MOVX    @DPTR,A
0ECB 7006              JNZ     ?C0557
0ECD 900000      R     MOV     DPTR,#OsdRamAddr
0ED0 E0                MOVX    A,@DPTR
0ED1 04                INC     A
0ED2 F0                MOVX    @DPTR,A
0ED3         ?C0557:
                                           ; SOURCE LINE # 2699
0ED3 120000      R     LCALL   L?0719
0ED6 E0                MOVX    A,@DPTR
0ED7 B410DA            CJNE    A,#010H,?C0473
0EDA         ?C0474:
                                           ; SOURCE LINE # 2700
0EDA 900000      R     MOV     DPTR,#OsdRamAddr+01H
0EDD E0                MOVX    A,@DPTR
0EDE 04                INC     A
0EDF F0                MOVX    @DPTR,A
0EE0 7006              JNZ     ?C0558
0EE2 900000      R     MOV     DPTR,#OsdRamAddr
0EE5 E0                MOVX    A,@DPTR
0EE6 04                INC     A
0EE7 F0                MOVX    @DPTR,A
0EE8         ?C0558:
                                           ; SOURCE LINE # 2702
0EE8 900000      R     MOV     DPTR,#fdata
0EEB E0                MOVX    A,@DPTR
0EEC D3                SETB    C
0EED 943C              SUBB    A,#03CH
0EEF 4003              JC      ?C0476
0EF1 7401              MOV     A,#01H
0EF3 F0                MOVX    @DPTR,A
0EF4         ?C0476:
                                           ; SOURCE LINE # 2703
0EF4 900000      R     MOV     DPTR,#attr
0EF7 E0                MOVX    A,@DPTR
0EF8 F4                CPL     A
0EF9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2704
0EFA 020000      R     LJMP    ?C0471
                                           ; SOURCE LINE # 2706
0EFD         ?C0470:
                                           ; SOURCE LINE # 2955
0EFD 120000      R     LCALL   L?0646
0F00 7400        R     MOV     A,#HIGH ?SC_2096
0F02 F0                MOVX    @DPTR,A
0F03 A3                INC     DPTR
0F04 7400        R     MOV     A,#LOW ?SC_2096
0F06 F0                MOVX    @DPTR,A
0F07 900000      R     MOV     DPTR,#argv
0F0A 120000      R     LCALL   L?0644
0F0D 120000      E     LCALL   _stricmp
0F10 EF                MOV     A,R7
0F11 4E                ORL     A,R6
0F12 704B              JNZ     ?C0478
                                           ; SOURCE LINE # 2956
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 143 

0F14 120000      R     LCALL   L?0756
0F17 7040              JNZ     ?C0479
                                           ; SOURCE LINE # 2957
0F19 120000      R     LCALL   L?0618
0F1C 700F              JNZ     ?C0480
                                           ; SOURCE LINE # 2958
0F1E D2AB              SETB    SFR_ET1
                                           ; SOURCE LINE # 2959
0F20 7F01              MOV     R7,#01H
0F22 120000      E     LCALL   _SetTouchAuto
                                           ; SOURCE LINE # 2960
0F25 7BFF              MOV     R3,#0FFH
0F27 7A00        R     MOV     R2,#HIGH ?SC_2102
0F29 7900        R     MOV     R1,#LOW ?SC_2102
0F2B         ?C0604:
                                           ; SOURCE LINE # 2961
0F2B 8026              SJMP    ?C0614
0F2D         ?C0480:
                                           ; SOURCE LINE # 2962
0F2D 120000      R     LCALL   L?0646
0F30 7400        R     MOV     A,#HIGH ?SC_2124
0F32 F0                MOVX    @DPTR,A
0F33 A3                INC     DPTR
0F34 7400        R     MOV     A,#LOW ?SC_2124
0F36 120000      R     LCALL   L?0642
0F39 120000      E     LCALL   _stricmp
0F3C EF                MOV     A,R7
0F3D 4E                ORL     A,R6
0F3E 7006              JNZ     ?C0482
                                           ; SOURCE LINE # 2963
0F40 120000      E     LCALL   PrintCalibData
                                           ; SOURCE LINE # 2964
0F43 020000      R     LJMP    ?C0193
0F46         ?C0482:
                                           ; SOURCE LINE # 2965
                                           ; SOURCE LINE # 2966
0F46 E4                CLR     A
0F47 FF                MOV     R7,A
0F48 120000      E     LCALL   _SetTouchAuto
                                           ; SOURCE LINE # 2967
0F4B C2AB              CLR     SFR_ET1
                                           ; SOURCE LINE # 2968
0F4D 7BFF              MOV     R3,#0FFH
0F4F 7A00        R     MOV     R2,#HIGH ?SC_2129
0F51 7900        R     MOV     R1,#LOW ?SC_2129
0F53         ?C0614:
0F53 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 2969
                                           ; SOURCE LINE # 2970
0F56 020000      R     LJMP    ?C0193
0F59         ?C0479:
                                           ; SOURCE LINE # 2971
                                           ; SOURCE LINE # 2972
0F59 120000      E     LCALL   GetTouch2
                                           ; SOURCE LINE # 2973
                                           ; SOURCE LINE # 2974
0F5C 020000      R     LJMP    ?C0193
0F5F         ?C0478:
                                           ; SOURCE LINE # 2975
0F5F 120000      R     LCALL   L?0646
0F62 7400        R     MOV     A,#HIGH ?SC_2152
0F64 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 144 

0F65 A3                INC     DPTR
0F66 7400        R     MOV     A,#LOW ?SC_2152
0F68 F0                MOVX    @DPTR,A
0F69 900000      R     MOV     DPTR,#argv
0F6C 120000      R     LCALL   L?0644
0F6F 120000      E     LCALL   _stricmp
0F72 EF                MOV     A,R7
0F73 4E                ORL     A,R6
0F74 701E              JNZ     ?C0486
                                           ; SOURCE LINE # 2976
0F76 C200        E     CLR     tsc_debug
                                           ; SOURCE LINE # 2977
0F78 900000      R     MOV     DPTR,#argc
0F7B E0                MOVX    A,@DPTR
0F7C B40207            CJNE    A,#02H,?C0487
                                           ; SOURCE LINE # 2978
0F7F 120000      R     LCALL   L?0638
0F82 7002              JNZ     ?C0487
                                           ; SOURCE LINE # 2979
0F84 D200        E     SETB    tsc_debug
                                           ; SOURCE LINE # 2980
0F86         ?C0487:
                                           ; SOURCE LINE # 2981
0F86 300005      E     JNB     tsc_debug,?C0489
                                           ; SOURCE LINE # 2982
0F89 C2AB              CLR     SFR_ET1
                                           ; SOURCE LINE # 2983
0F8B 020000      R     LJMP    ?C0193
0F8E         ?C0489:
                                           ; SOURCE LINE # 2984
                                           ; SOURCE LINE # 2985
0F8E 120000      E     LCALL   InitTouch
                                           ; SOURCE LINE # 2986
                                           ; SOURCE LINE # 2987
0F91 020000      R     LJMP    ?C0193
0F94         ?C0486:
                                           ; SOURCE LINE # 2988
0F94 120000      R     LCALL   L?0646
0F97 7400        R     MOV     A,#HIGH ?SC_2162
0F99 F0                MOVX    @DPTR,A
0F9A A3                INC     DPTR
0F9B 7400        R     MOV     A,#LOW ?SC_2162
0F9D F0                MOVX    @DPTR,A
0F9E 900000      R     MOV     DPTR,#argv
0FA1 120000      R     LCALL   L?0644
0FA4 120000      E     LCALL   _stricmp
0FA7 EF                MOV     A,R7
0FA8 4E                ORL     A,R6
0FA9 6003              JZ      $ + 5H
0FAB 020000      R     LJMP    ?C0492
                                           ; SOURCE LINE # 2989
0FAE 120000      R     LCALL   L?0756
0FB1 7025              JNZ     ?C0493
                                           ; SOURCE LINE # 2990
0FB3 120000      R     LCALL   L?0638
0FB6 7BFF              MOV     R3,#0FFH
0FB8 700D              JNZ     ?C0494
                                           ; SOURCE LINE # 2991
0FBA 7A00        R     MOV     R2,#HIGH ?SC_2168
0FBC 7900        R     MOV     R1,#LOW ?SC_2168
0FBE 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 2992
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 145 

0FC1 C2AB              CLR     SFR_ET1
                                           ; SOURCE LINE # 2993
0FC3 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2994
0FC5 800B              SJMP    ?C0615
0FC7         ?C0494:
                                           ; SOURCE LINE # 2995
                                           ; SOURCE LINE # 2996
0FC7 7A00        R     MOV     R2,#HIGH ?SC_2190
0FC9 7900        R     MOV     R1,#LOW ?SC_2190
0FCB 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 2997
0FCE D2AB              SETB    SFR_ET1
                                           ; SOURCE LINE # 2998
0FD0 E4                CLR     A
0FD1 FF                MOV     R7,A
0FD2         ?C0615:
0FD2 120000      E     LCALL   _SetTraceAuto
                                           ; SOURCE LINE # 2999
                                           ; SOURCE LINE # 3000
0FD5 020000      R     LJMP    ?C0193
0FD8         ?C0493:
                                           ; SOURCE LINE # 3001
                                           ; SOURCE LINE # 3007
0FD8 900000      E     MOV     DPTR,#CpuTouchChanged
0FDB E0                MOVX    A,@DPTR
0FDC 900000      R     MOV     DPTR,#temp
0FDF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3008
0FE0 900000      E     MOV     DPTR,#CpuAUX0_Changed
0FE3 E0                MOVX    A,@DPTR
0FE4 900000      R     MOV     DPTR,#atemp
0FE7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3009
0FE8 900000      E     MOV     DPTR,#CpuAUX1_Changed
0FEB E0                MOVX    A,@DPTR
0FEC 900000      R     MOV     DPTR,#atemp+01H
0FEF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3010
0FF0 900000      E     MOV     DPTR,#CpuAUX2_Changed
0FF3 E0                MOVX    A,@DPTR
0FF4 900000      R     MOV     DPTR,#atemp+02H
0FF7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3011
0FF8 020000      R     LJMP    ?C0616
0FFB         ?C0497:
                                           ; SOURCE LINE # 3012
0FFB 120000      E     LCALL   RS_ready
0FFE EF                MOV     A,R7
0FFF 6003              JZ      $ + 5H
1001 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 3013
1004 7FF4              MOV     R7,#0F4H
1006 7E01              MOV     R6,#01H
1008 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 3014
100B 300042      E     JNB     CpuTouchPressed,?C0499
                                           ; SOURCE LINE # 3015
100E 900000      R     MOV     DPTR,#temp
1011 E0                MOVX    A,@DPTR
1012 FF                MOV     R7,A
1013 900000      E     MOV     DPTR,#CpuTouchChanged
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 146 

1016 E0                MOVX    A,@DPTR
1017 6F                XRL     A,R7
1018 6036              JZ      ?C0499
                                           ; SOURCE LINE # 3016
101A 7BFF              MOV     R3,#0FFH
101C 7A00        R     MOV     R2,#HIGH ?SC_2213
101E 7900        R     MOV     R1,#LOW ?SC_2213
1020 900000      E     MOV     DPTR,#TouchX
1023 120000      R     LCALL   L?0699
1026 F0                MOVX    @DPTR,A
1027 900000      E     MOV     DPTR,#TouchY
102A E0                MOVX    A,@DPTR
102B FF                MOV     R7,A
102C A3                INC     DPTR
102D E0                MOVX    A,@DPTR
102E 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
1031 CF                XCH     A,R7
1032 F0                MOVX    @DPTR,A
1033 A3                INC     DPTR
1034 EF                MOV     A,R7
1035 F0                MOVX    @DPTR,A
1036 900000      E     MOV     DPTR,#TouchZ1
1039 E0                MOVX    A,@DPTR
103A FF                MOV     R7,A
103B A3                INC     DPTR
103C E0                MOVX    A,@DPTR
103D 900000      E     MOV     DPTR,#?_Printf?BYTE+07H
1040 CF                XCH     A,R7
1041 F0                MOVX    @DPTR,A
1042 A3                INC     DPTR
1043 EF                MOV     A,R7
1044 F0                MOVX    @DPTR,A
1045 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 3017
1048 900000      E     MOV     DPTR,#CpuTouchChanged
104B E0                MOVX    A,@DPTR
104C 900000      R     MOV     DPTR,#temp
104F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3018
                                           ; SOURCE LINE # 3019
1050         ?C0499:
                                           ; SOURCE LINE # 3020
1050 900000      E     MOV     DPTR,#CpuAUX0_Changed
1053 E0                MOVX    A,@DPTR
1054 FF                MOV     R7,A
1055 900000      R     MOV     DPTR,#atemp
1058 E0                MOVX    A,@DPTR
1059 6F                XRL     A,R7
105A 6015              JZ      ?C0501
                                           ; SOURCE LINE # 3021
105C 7A00        R     MOV     R2,#HIGH ?SC_2257
105E 7900        R     MOV     R1,#LOW ?SC_2257
1060 120000      R     LCALL   L?0673
1063 900000      E     MOV     DPTR,#CpuAUX0
1066 120000      R     LCALL   L?0681
                                           ; SOURCE LINE # 3022
1069 900000      E     MOV     DPTR,#CpuAUX0_Changed
106C E0                MOVX    A,@DPTR
106D 900000      R     MOV     DPTR,#atemp
1070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3023
1071         ?C0501:
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 147 

                                           ; SOURCE LINE # 3024
1071 900000      E     MOV     DPTR,#CpuAUX1_Changed
1074 E0                MOVX    A,@DPTR
1075 FF                MOV     R7,A
1076 900000      R     MOV     DPTR,#atemp+01H
1079 E0                MOVX    A,@DPTR
107A 6F                XRL     A,R7
107B 6015              JZ      ?C0502
                                           ; SOURCE LINE # 3025
107D 7A00        R     MOV     R2,#HIGH ?SC_2283
107F 7900        R     MOV     R1,#LOW ?SC_2283
1081 120000      R     LCALL   L?0673
1084 900000      E     MOV     DPTR,#CpuAUX1
1087 120000      R     LCALL   L?0681
                                           ; SOURCE LINE # 3026
108A 900000      E     MOV     DPTR,#CpuAUX1_Changed
108D E0                MOVX    A,@DPTR
108E 900000      R     MOV     DPTR,#atemp+01H
1091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3027
1092         ?C0502:
                                           ; SOURCE LINE # 3028
1092 900000      E     MOV     DPTR,#CpuAUX2_Changed
1095 E0                MOVX    A,@DPTR
1096 FF                MOV     R7,A
1097 900000      R     MOV     DPTR,#atemp+02H
109A E0                MOVX    A,@DPTR
109B 6F                XRL     A,R7
109C 6017              JZ      ?C0503
                                           ; SOURCE LINE # 3029
109E 7BFF              MOV     R3,#0FFH
10A0 7A00        R     MOV     R2,#HIGH ?SC_2309
10A2 7900        R     MOV     R1,#LOW ?SC_2309
10A4 120000      R     LCALL   L?0674
10A7 900000      E     MOV     DPTR,#CpuAUX2
10AA 120000      R     LCALL   L?0723
                                           ; SOURCE LINE # 3030
10AD 900000      E     MOV     DPTR,#CpuAUX2_Changed
10B0 E0                MOVX    A,@DPTR
10B1 900000      R     MOV     DPTR,#atemp+02H
10B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3031
10B5         ?C0503:
                                           ; SOURCE LINE # 3032
10B5 900000      E     MOV     DPTR,#CpuAUX3_Changed
10B8 E0                MOVX    A,@DPTR
10B9 FF                MOV     R7,A
10BA 900000      R     MOV     DPTR,#atemp+03H
10BD E0                MOVX    A,@DPTR
10BE 6F                XRL     A,R7
10BF 7003              JNZ     $ + 5H
10C1 020000      R     LJMP    ?C0497
                                           ; SOURCE LINE # 3033
10C4 7BFF              MOV     R3,#0FFH
10C6 7A00        R     MOV     R2,#HIGH ?SC_2335
10C8 7900        R     MOV     R1,#LOW ?SC_2335
10CA A3                INC     DPTR
10CB 120000      R     LCALL   L?0675
10CE 900000      E     MOV     DPTR,#CpuAUX3
10D1 120000      R     LCALL   L?0723
                                           ; SOURCE LINE # 3034
10D4         ?C0616:
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 148 

10D4 900000      E     MOV     DPTR,#CpuAUX3_Changed
10D7 E0                MOVX    A,@DPTR
10D8 900000      R     MOV     DPTR,#atemp+03H
10DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3035
                                           ; SOURCE LINE # 3036
10DC 020000      R     LJMP    ?C0497
                                           ; SOURCE LINE # 3037
                                           ; SOURCE LINE # 3038
10DF         ?C0492:
                                           ; SOURCE LINE # 3039
10DF 120000      R     LCALL   L?0646
10E2 7400        R     MOV     A,#HIGH ?SC_2361
10E4 F0                MOVX    @DPTR,A
10E5 A3                INC     DPTR
10E6 7400        R     MOV     A,#LOW ?SC_2361
10E8 F0                MOVX    @DPTR,A
10E9 900000      R     MOV     DPTR,#argv
10EC 120000      R     LCALL   L?0644
10EF 120000      E     LCALL   _stricmp
10F2 EF                MOV     A,R7
10F3 4E                ORL     A,R6
10F4 7021              JNZ     ?C0506
                                           ; SOURCE LINE # 3040
10F6 900000      E     MOV     DPTR,#CpuTouchSkipCount
10F9 F0                MOVX    @DPTR,A
10FA A3                INC     DPTR
10FB 7464              MOV     A,#064H
10FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3041
10FE 120000      R     LCALL   L?0757
1101 6003              JZ      $ + 5H
1103 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 3042
1106 120000      R     LCALL   L?0643
1109 120000      E     LCALL   _a2i
110C 900000      E     MOV     DPTR,#CpuTouchSkipCount
110F EE                MOV     A,R6
1110 F0                MOVX    @DPTR,A
1111 A3                INC     DPTR
1112 EF                MOV     A,R7
1113 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3043
                                           ; SOURCE LINE # 3044
1114 020000      R     LJMP    ?C0193
1117         ?C0506:
                                           ; SOURCE LINE # 3045
1117 120000      R     LCALL   L?0646
111A 7400        R     MOV     A,#HIGH ?SC_2368
111C F0                MOVX    @DPTR,A
111D A3                INC     DPTR
111E 7400        R     MOV     A,#LOW ?SC_2368
1120 F0                MOVX    @DPTR,A
1121 900000      R     MOV     DPTR,#argv
1124 120000      R     LCALL   L?0644
1127 120000      E     LCALL   _stricmp
112A EF                MOV     A,R7
112B 4E                ORL     A,R6
112C 700F              JNZ     ?C0509
                                           ; SOURCE LINE # 3046
112E 7BFF              MOV     R3,#0FFH
1130 7A00        R     MOV     R2,#HIGH ?SC_2374
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 149 

1132 7900        R     MOV     R1,#LOW ?SC_2374
1134 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 3047
1137 120000      E     LCALL   TouchDump
                                           ; SOURCE LINE # 3048
113A 020000      R     LJMP    ?C0193
113D         ?C0509:
                                           ; SOURCE LINE # 3051
113D 120000      R     LCALL   L?0646
1140 7400        R     MOV     A,#HIGH ?SC_2387
1142 F0                MOVX    @DPTR,A
1143 A3                INC     DPTR
1144 7400        R     MOV     A,#LOW ?SC_2387
1146 F0                MOVX    @DPTR,A
1147 900000      R     MOV     DPTR,#argv
114A 120000      R     LCALL   L?0644
114D 120000      E     LCALL   _stricmp
1150 EF                MOV     A,R7
1151 4E                ORL     A,R6
1152 7021              JNZ     ?C0511
                                           ; SOURCE LINE # 3053
1154 120000      R     LCALL   L?0757
1157 6003              JZ      $ + 5H
1159 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 3054
115C 120000      R     LCALL   L?0643
115F 120000      R     LCALL   L?0747
                                           ; SOURCE LINE # 3055
1162 D3                SETB    C
1163 9404              SUBB    A,#04H
1165 4003              JC      ?C0513
1167 7404              MOV     A,#04H
1169 F0                MOVX    @DPTR,A
116A         ?C0513:
                                           ; SOURCE LINE # 3056
116A 900000      R     MOV     DPTR,#n
116D E0                MOVX    A,@DPTR
116E FF                MOV     R7,A
116F 120000      E     LCALL   _CalibTouch
                                           ; SOURCE LINE # 3057
                                           ; SOURCE LINE # 3058
1172 020000      R     LJMP    ?C0193
1175         ?C0511:
                                           ; SOURCE LINE # 3129
1175 120000      R     LCALL   L?0646
1178 7400        R     MOV     A,#HIGH ?SC_1741
117A F0                MOVX    @DPTR,A
117B A3                INC     DPTR
117C 7400        R     MOV     A,#LOW ?SC_1741
117E F0                MOVX    @DPTR,A
117F 900000      R     MOV     DPTR,#argv
1182 120000      R     LCALL   L?0644
1185 120000      E     LCALL   _stricmp
1188 EF                MOV     A,R7
1189 4E                ORL     A,R6
118A 6003              JZ      $ + 5H
118C 020000      R     LJMP    ?C0515
                                           ; SOURCE LINE # 3139
118F 120000      R     LCALL   L?0668
1192 5009              JNC     ?C0516
                                           ; SOURCE LINE # 3140
1194 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 150 

1196 7A00        R     MOV     R2,#HIGH ?SC_2393
1198 7900        R     MOV     R1,#LOW ?SC_2393
119A         ?C0613:
                                           ; SOURCE LINE # 3141
119A 020000      R     LJMP    ?C0617
119D         ?C0516:
                                           ; SOURCE LINE # 3142
119D 120000      R     LCALL   L?0646
11A0 7400        R     MOV     A,#HIGH ?SC_1303
11A2 F0                MOVX    @DPTR,A
11A3 A3                INC     DPTR
11A4 7400        R     MOV     A,#LOW ?SC_1303
11A6 120000      R     LCALL   L?0642
11A9 120000      E     LCALL   _stricmp
11AC EF                MOV     A,R7
11AD 4E                ORL     A,R6
11AE 7006              JNZ     ?C0518
                                           ; SOURCE LINE # 3143
11B0 120000      E     LCALL   Hdmi_SystemInit_EP9351
                                           ; SOURCE LINE # 3144
11B3 020000      R     LJMP    ?C0193
11B6         ?C0518:
                                           ; SOURCE LINE # 3145
11B6 120000      R     LCALL   L?0646
11B9 7400        R     MOV     A,#HIGH ?SC_2431
11BB F0                MOVX    @DPTR,A
11BC A3                INC     DPTR
11BD 7400        R     MOV     A,#LOW ?SC_2431
11BF 120000      R     LCALL   L?0642
11C2 120000      E     LCALL   _stricmp
11C5 EF                MOV     A,R7
11C6 4E                ORL     A,R6
11C7 7006              JNZ     ?C0520
                                           ; SOURCE LINE # 3146
11C9 120000      E     LCALL   HdmiInitEp9351Chip
                                           ; SOURCE LINE # 3147
11CC 020000      R     LJMP    ?C0193
11CF         ?C0520:
                                           ; SOURCE LINE # 3148
11CF 120000      R     LCALL   L?0646
11D2 7400        R     MOV     A,#HIGH ?SC_2437
11D4 F0                MOVX    @DPTR,A
11D5 A3                INC     DPTR
11D6 7400        R     MOV     A,#LOW ?SC_2437
11D8 120000      R     LCALL   L?0642
11DB 120000      E     LCALL   _stricmp
11DE EF                MOV     A,R7
11DF 4E                ORL     A,R6
11E0 7006              JNZ     ?C0522
                                           ; SOURCE LINE # 3149
11E2 120000      E     LCALL   DBG_PrintAviInfoFrame
                                           ; SOURCE LINE # 3150
11E5 020000      R     LJMP    ?C0193
11E8         ?C0522:
                                           ; SOURCE LINE # 3151
11E8 120000      R     LCALL   L?0646
11EB 7400        R     MOV     A,#HIGH ?SC_2441
11ED F0                MOVX    @DPTR,A
11EE A3                INC     DPTR
11EF 7400        R     MOV     A,#LOW ?SC_2441
11F1 120000      R     LCALL   L?0642
11F4 120000      E     LCALL   _stricmp
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 151 

11F7 EF                MOV     A,R7
11F8 4E                ORL     A,R6
11F9 7006              JNZ     ?C0524
                                           ; SOURCE LINE # 3152
11FB 120000      E     LCALL   DBG_PrintTimingRegister
                                           ; SOURCE LINE # 3153
11FE 020000      R     LJMP    ?C0193
1201         ?C0524:
                                           ; SOURCE LINE # 3154
1201 120000      R     LCALL   L?0646
1204 7400        R     MOV     A,#HIGH ?SC_2449
1206 F0                MOVX    @DPTR,A
1207 A3                INC     DPTR
1208 7400        R     MOV     A,#LOW ?SC_2449
120A 120000      R     LCALL   L?0642
120D 120000      E     LCALL   _stricmp
1210 EF                MOV     A,R7
1211 4E                ORL     A,R6
1212 7006              JNZ     ?C0526
                                           ; SOURCE LINE # 3155
1214 120000      E     LCALL   DBG_DumpControlRegister
                                           ; SOURCE LINE # 3156
1217 020000      R     LJMP    ?C0193
121A         ?C0526:
                                           ; SOURCE LINE # 3158
121A 120000      R     LCALL   L?0646
121D 7400        R     MOV     A,#HIGH ?SC_2454
121F F0                MOVX    @DPTR,A
1220 A3                INC     DPTR
1221 7400        R     MOV     A,#LOW ?SC_2454
1223 120000      R     LCALL   L?0642
1226 120000      E     LCALL   _stricmp
1229 EF                MOV     A,R7
122A 4E                ORL     A,R6
122B 700A              JNZ     ?C0528
                                           ; SOURCE LINE # 3159
122D FF                MOV     R7,A
122E FE                MOV     R6,A
122F FD                MOV     R5,A
1230 FC                MOV     R4,A
1231 120000      E     LCALL   _HdmiDownloadEdid
                                           ; SOURCE LINE # 3160
1234 020000      R     LJMP    ?C0193
1237         ?C0528:
                                           ; SOURCE LINE # 3163
1237 120000      R     LCALL   L?0646
123A 7400        R     MOV     A,#HIGH ?SC_2461
123C F0                MOVX    @DPTR,A
123D A3                INC     DPTR
123E 7400        R     MOV     A,#LOW ?SC_2461
1240 120000      R     LCALL   L?0642
1243 120000      E     LCALL   _stricmp
1246 EF                MOV     A,R7
1247 4E                ORL     A,R6
1248 6003              JZ      $ + 5H
124A 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 3164
124D FF                MOV     R7,A
124E FE                MOV     R6,A
124F FD                MOV     R5,A
1250 FC                MOV     R4,A
1251 120000      E     LCALL   _HdmiDownloadDhcp
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 152 

                                           ; SOURCE LINE # 3165
                                           ; SOURCE LINE # 3167
1254 020000      R     LJMP    ?C0193
1257         ?C0515:
                                           ; SOURCE LINE # 3201
1257 120000      R     LCALL   L?0646
125A 7400        R     MOV     A,#HIGH ?SC_2468
125C F0                MOVX    @DPTR,A
125D A3                INC     DPTR
125E 7400        R     MOV     A,#LOW ?SC_2468
1260 F0                MOVX    @DPTR,A
1261 900000      R     MOV     DPTR,#argv
1264 120000      R     LCALL   L?0644
1267 120000      E     LCALL   _stricmp
126A EF                MOV     A,R7
126B 4E                ORL     A,R6
126C 7006              JNZ     ?C0532
                                           ; SOURCE LINE # 3203
126E 120000      E     LCALL   TestDParkGridAction
                                           ; SOURCE LINE # 3204
1271 020000      R     LJMP    ?C0193
1274         ?C0532:
                                           ; SOURCE LINE # 3206
1274 120000      R     LCALL   L?0646
1277 7400        R     MOV     A,#HIGH ?SC_2474
1279 F0                MOVX    @DPTR,A
127A A3                INC     DPTR
127B 7400        R     MOV     A,#LOW ?SC_2474
127D F0                MOVX    @DPTR,A
127E 900000      R     MOV     DPTR,#argv
1281 120000      R     LCALL   L?0644
1284 120000      E     LCALL   _stricmp
1287 EF                MOV     A,R7
1288 4E                ORL     A,R6
1289 702E              JNZ     ?C0534
                                           ; SOURCE LINE # 3210
128B 900000      R     MOV     DPTR,#argc
128E E0                MOVX    A,@DPTR
128F B40316            CJNE    A,#03H,?C0535
                                           ; SOURCE LINE # 3211
1292 120000      R     LCALL   L?0643
1295 120000      R     LCALL   L?0747
                                           ; SOURCE LINE # 3212
1298 900000      R     MOV     DPTR,#argv+06H
129B 120000      R     LCALL   L?0644
129E 120000      E     LCALL   _a2h
12A1 900000      R     MOV     DPTR,#positionY
12A4 EF                MOV     A,R7
12A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3213
12A6 8003              SJMP    ?C0536
12A8         ?C0535:
                                           ; SOURCE LINE # 3214
                                           ; SOURCE LINE # 3215
                                           ; SOURCE LINE # 3216
12A8 120000      R     LCALL   L?0767
                                           ; SOURCE LINE # 3217
12AB         ?C0536:
                                           ; SOURCE LINE # 3218
12AB 900000      R     MOV     DPTR,#positionX
12AE E0                MOVX    A,@DPTR
12AF FF                MOV     R7,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 153 

12B0 A3                INC     DPTR
12B1 E0                MOVX    A,@DPTR
12B2 FD                MOV     R5,A
12B3 120000      E     LCALL   _TestAutoDParkGridAction
                                           ; SOURCE LINE # 3219
12B6 020000      R     LJMP    ?C0193
12B9         ?C0534:
                                           ; SOURCE LINE # 3220
12B9 120000      R     LCALL   L?0646
12BC 7400        R     MOV     A,#HIGH ?SC_2483
12BE F0                MOVX    @DPTR,A
12BF A3                INC     DPTR
12C0 7400        R     MOV     A,#LOW ?SC_2483
12C2 F0                MOVX    @DPTR,A
12C3 900000      R     MOV     DPTR,#argv
12C6 120000      R     LCALL   L?0644
12C9 120000      E     LCALL   _stricmp
12CC EF                MOV     A,R7
12CD 4E                ORL     A,R6
12CE 7033              JNZ     ?C0538
                                           ; SOURCE LINE # 3224
12D0 900000      R     MOV     DPTR,#argc
12D3 E0                MOVX    A,@DPTR
12D4 B4031B            CJNE    A,#03H,?C0539
                                           ; SOURCE LINE # 3225
12D7 120000      R     LCALL   L?0643
12DA 120000      E     LCALL   _a2h
12DD 900000      R     MOV     DPTR,#positionX
12E0 EF                MOV     A,R7
12E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3226
12E2 900000      R     MOV     DPTR,#argv+06H
12E5 120000      R     LCALL   L?0644
12E8 120000      E     LCALL   _a2h
12EB 900000      R     MOV     DPTR,#positionY
12EE EF                MOV     A,R7
12EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3227
12F0 8003              SJMP    ?C0540
12F2         ?C0539:
                                           ; SOURCE LINE # 3228
                                           ; SOURCE LINE # 3229
                                           ; SOURCE LINE # 3230
12F2 120000      R     LCALL   L?0767
                                           ; SOURCE LINE # 3231
12F5         ?C0540:
                                           ; SOURCE LINE # 3232
12F5 900000      R     MOV     DPTR,#positionX
12F8 E0                MOVX    A,@DPTR
12F9 FF                MOV     R7,A
12FA A3                INC     DPTR
12FB E0                MOVX    A,@DPTR
12FC FD                MOV     R5,A
12FD 120000      E     LCALL   _TestStepDParkGridAction
                                           ; SOURCE LINE # 3233
1300 020000      R     LJMP    ?C0193
1303         ?C0538:
                                           ; SOURCE LINE # 3239
1303 120000      R     LCALL   L?0646
1306 7400        R     MOV     A,#HIGH ?SC_2492
1308 F0                MOVX    @DPTR,A
1309 A3                INC     DPTR
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 154 

130A 7400        R     MOV     A,#LOW ?SC_2492
130C F0                MOVX    @DPTR,A
130D 900000      R     MOV     DPTR,#argv
1310 120000      R     LCALL   L?0644
1313 120000      E     LCALL   _stricmp
1316 EF                MOV     A,R7
1317 4E                ORL     A,R6
1318 7BFF              MOV     R3,#0FFH
131A 6003              JZ      $ + 5H
131C 020000      R     LJMP    ?C0542
                                           ; SOURCE LINE # 3258
131F 7A00        R     MOV     R2,#HIGH ?SC_2501
1321 7900        R     MOV     R1,#LOW ?SC_2501
1323 120000      E     LCALL   _wPuts
                                           ; SOURCE LINE # 3259
1326 7DBB              MOV     R5,#0BBH
1328 7C0C              MOV     R4,#0CH
132A 7F01              MOV     R7,#01H
132C 7E00              MOV     R6,#00H
132E 120000      E     LCALL   _delay1s
                                           ; SOURCE LINE # 3270
1331 120000      E     LCALL   Dummy_HOST_func
                                           ; SOURCE LINE # 3280
1334 900000      E     MOV     DPTR,#?_WriteI2C?BYTE+05H
1337 120000      R     LCALL   L?0746
133A E4                CLR     A
133B FD                MOV     R5,A
133C FF                MOV     R7,A
133D 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 3283
1340 7F8A              MOV     R7,#08AH
1342 120000      E     LCALL   _CheckI2C
                                           ; SOURCE LINE # 3289
1345 900000      E     MOV     DPTR,#?_ReadSlowI2C?BYTE+05H
1348 120000      R     LCALL   L?0746
134B E4                CLR     A
134C FD                MOV     R5,A
134D 7F8A              MOV     R7,#08AH
134F 120000      E     LCALL   _ReadSlowI2C
                                           ; SOURCE LINE # 3290
1352 7B01              MOV     R3,#01H
1354 7A00        R     MOV     R2,#HIGH wValue
1356 7900        R     MOV     R1,#LOW wValue
1358 900000      E     MOV     DPTR,#?_WriteSlowI2C?BYTE+05H
135B E4                CLR     A
135C F0                MOVX    @DPTR,A
135D A3                INC     DPTR
135E 04                INC     A
135F F0                MOVX    @DPTR,A
1360 E4                CLR     A
1361 FD                MOV     R5,A
1362 7F8A              MOV     R7,#08AH
1364 120000      E     LCALL   _WriteSlowI2C
                                           ; SOURCE LINE # 3300
1367 E4                CLR     A
1368 FF                MOV     R7,A
1369 FE                MOV     R6,A
136A 120000      E     LCALL   _ScalerWriteXDownReg
                                           ; SOURCE LINE # 3302
136D 120000      E     LCALL   ScalerReadXDownReg
                                           ; SOURCE LINE # 3307
1370 E4                CLR     A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 155 

1371 FD                MOV     R5,A
1372 FC                MOV     R4,A
1373 FF                MOV     R7,A
1374 FE                MOV     R6,A
1375 120000      E     LCALL   _ScalerSetHScaleWithRatio
                                           ; SOURCE LINE # 3308
1378 E4                CLR     A
1379 FF                MOV     R7,A
137A FE                MOV     R6,A
137B 120000      E     LCALL   _ScalerSetHScale
                                           ; SOURCE LINE # 3309
137E E4                CLR     A
137F FF                MOV     R7,A
1380 FE                MOV     R6,A
1381 120000      E     LCALL   _ScalerWriteVScaleReg
                                           ; SOURCE LINE # 3310
1384 120000      E     LCALL   ScalerReadVScaleReg
                                           ; SOURCE LINE # 3311
1387 E4                CLR     A
1388 FD                MOV     R5,A
1389 FC                MOV     R4,A
138A FF                MOV     R7,A
138B FE                MOV     R6,A
138C 120000      E     LCALL   _ScalerSetVScaleWithRatio
                                           ; SOURCE LINE # 3312
138F E4                CLR     A
1390 FF                MOV     R7,A
1391 FE                MOV     R6,A
1392 120000      E     LCALL   _ScalerSetVScale
                                           ; SOURCE LINE # 3313
1395 E4                CLR     A
1396 FF                MOV     R7,A
1397 120000      E     LCALL   _ScalerPanoramaOnOff
                                           ; SOURCE LINE # 3314
139A E4                CLR     A
139B FD                MOV     R5,A
139C FE                MOV     R6,A
139D 120000      E     LCALL   _ScalerSetPanorama
                                           ; SOURCE LINE # 3315
13A0 E4                CLR     A
13A1 FF                MOV     R7,A
13A2 120000      E     LCALL   _ScalerWriteLineBufferDelay
                                           ; SOURCE LINE # 3316
13A5 120000      E     LCALL   ScalerReadLineBufferDelay
                                           ; SOURCE LINE # 3317
13A8 E4                CLR     A
13A9 FF                MOV     R7,A
13AA 120000      E     LCALL   _ScalerSetLineBufferSize
                                           ; SOURCE LINE # 3321
13AD E4                CLR     A
13AE FF                MOV     R7,A
13AF 120000      E     LCALL   _ScalerWriteHDEReg
                                           ; SOURCE LINE # 3322
13B2 120000      E     LCALL   ScalerReadHDEReg
                                           ; SOURCE LINE # 3323
13B5 120000      E     LCALL   ScalerCalcHDE
                                           ; SOURCE LINE # 3324
13B8 120000      E     LCALL   ScalerReadOutputWidth
                                           ; SOURCE LINE # 3328
13BB 120000      E     LCALL   ScalerReadVDEReg
                                           ; SOURCE LINE # 3329
13BE E4                CLR     A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 156 

13BF FF                MOV     R7,A
13C0 120000      E     LCALL   _ScalerWriteVDEReg
                                           ; SOURCE LINE # 3333
13C3 120000      E     LCALL   ScalerCalcVDE
                                           ; SOURCE LINE # 3338
13C6 E4                CLR     A
13C7 FF                MOV     R7,A
13C8 FE                MOV     R6,A
13C9 120000      E     LCALL   _ScalerWriteFreerunVtotal
                                           ; SOURCE LINE # 3340
13CC 120000      E     LCALL   ScalerCalcFreerunVtotal
                                           ; SOURCE LINE # 3342
13CF E4                CLR     A
13D0 FF                MOV     R7,A
13D1 FE                MOV     R6,A
13D2 120000      E     LCALL   _ScalerWriteFreerunHtotal
                                           ; SOURCE LINE # 3344
13D5 120000      E     LCALL   ScalerCalcFreerunHtotal
                                           ; SOURCE LINE # 3345
13D8 E4                CLR     A
13D9 FF                MOV     R7,A
13DA 120000      E     LCALL   _ScalerSetFreerunManual
                                           ; SOURCE LINE # 3347
13DD E4                CLR     A
13DE FD                MOV     R5,A
13DF 120000      E     LCALL   _ScalerSetFreerunAutoManual
                                           ; SOURCE LINE # 3348
13E2 120000      E     LCALL   _ScalerSetMuteAutoManual
                                           ; SOURCE LINE # 3349
13E5 E4                CLR     A
13E6 120000      E     LCALL   _ScalerSetMuteManual
                                           ; SOURCE LINE # 3350
13E9 7F01              MOV     R7,#01H
13EB 120000      E     LCALL   _ScalerSetFreerunValue
                                           ; SOURCE LINE # 3351
13EE 120000      E     LCALL   ScalerCheckPanelFreerunValue
                                           ; SOURCE LINE # 3362
13F1 E4                CLR     A
13F2 FF                MOV     R7,A
13F3 120000      E     LCALL   _MeasSetErrTolerance
                                           ; SOURCE LINE # 3363
13F6 E4                CLR     A
13F7 FF                MOV     R7,A
13F8 120000      E     LCALL   _MeasEnableChangedDetection
                                           ; SOURCE LINE # 3364
13FB 120000      E     LCALL   _MeasEnableDeMeasure
                                           ; SOURCE LINE # 3365
13FE 120000      E     LCALL   _MeasSetThreshold
                                           ; SOURCE LINE # 3370
1401 120000      E     LCALL   MeasGetVPeriod
                                           ; SOURCE LINE # 3371
1404 120000      E     LCALL   MeasGetHPeriod
                                           ; SOURCE LINE # 3372
1407 7F01              MOV     R7,#01H
1409 120000      E     LCALL   _MeasGetHTotal
                                           ; SOURCE LINE # 3374
140C 120000      E     LCALL   MeasGetHSyncRiseToFallWidth
                                           ; SOURCE LINE # 3376
140F 120000      E     LCALL   MeasGetVSyncRiseToFallWidth
                                           ; SOURCE LINE # 3377
1412 120000      E     LCALL   MeasGetVsyncRisePos
                                           ; SOURCE LINE # 3378
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 157 

1415 7B01              MOV     R3,#01H
1417 7A00        R     MOV     R2,#HIGH wTemp
1419 7900        R     MOV     R1,#LOW wTemp
141B 120000      E     LCALL   _MeasGetHActive
                                           ; SOURCE LINE # 3385
141E 7B01              MOV     R3,#01H
1420 7A00        R     MOV     R2,#HIGH wTemp
1422 7900        R     MOV     R1,#LOW wTemp
1424 120000      E     LCALL   _MeasGetVActive
                                           ; SOURCE LINE # 3388
1427 120000      E     LCALL   MeasGetVPeriod27
                                           ; SOURCE LINE # 3396
142A 120000      E     LCALL   CheckMeasure
                                           ; SOURCE LINE # 3403
142D 120000      E     LCALL   Dummy_DTV_func
                                           ; SOURCE LINE # 3406
1430 120000      E     LCALL   Dummy_HDMI_EP9351_func
                                           ; SOURCE LINE # 3412
1433 120000      E     LCALL   Dummy_FosdMenu_func
                                           ; SOURCE LINE # 3413
1436 120000      E     LCALL   Dummy_FosdInitTable_func
                                           ; SOURCE LINE # 3414
1439 120000      E     LCALL   Dummy_FosdDispInfo_func
                                           ; SOURCE LINE # 3415
143C 120000      E     LCALL   Dummy_FosdString_func
                                           ; SOURCE LINE # 3423
143F 120000      E     LCALL   Dummy_DebugMsg_func
                                           ; SOURCE LINE # 3427
1442 8007              SJMP    ?C0193
1444         ?C0542:
                                           ; SOURCE LINE # 3429
                                           ; SOURCE LINE # 3430
1444 7A00        R     MOV     R2,#HIGH ?SC_1656
1446 7900        R     MOV     R1,#LOW ?SC_1656
1448         ?C0617:
1448 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 3431
144B         ?C0193:
                                           ; SOURCE LINE # 3432
144B 120000      R     LCALL   Prompt
                                           ; SOURCE LINE # 3433
144E         ?C0191:
144E 22                RET     
144F         L?0618:
144F 900000      E     MOV     DPTR,#?_stricmp?BYTE+03H
1452 74FF              MOV     A,#0FFH
1454 F0                MOVX    @DPTR,A
1455 A3                INC     DPTR
1456 7400        R     MOV     A,#HIGH ?SC_1288
1458 F0                MOVX    @DPTR,A
1459 A3                INC     DPTR
145A 7400        R     MOV     A,#LOW ?SC_1288
145C F0                MOVX    @DPTR,A
145D 900000      R     MOV     DPTR,#argv+03H
1460 E0                MOVX    A,@DPTR
1461 FB                MOV     R3,A
1462 A3                INC     DPTR
1463 E0                MOVX    A,@DPTR
1464 FA                MOV     R2,A
1465 A3                INC     DPTR
1466 E0                MOVX    A,@DPTR
1467 F9                MOV     R1,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 158 

1468 120000      E     LCALL   _stricmp
146B EF                MOV     A,R7
146C 4E                ORL     A,R6
146D 22                RET     
146E         L?0619:
146E A3                INC     DPTR
146F F0                MOVX    @DPTR,A
1470 900000      R     MOV     DPTR,#argv
1473 E0                MOVX    A,@DPTR
1474 FB                MOV     R3,A
1475 A3                INC     DPTR
1476 E0                MOVX    A,@DPTR
1477 FA                MOV     R2,A
1478 A3                INC     DPTR
1479 E0                MOVX    A,@DPTR
147A F9                MOV     R1,A
147B 120000      E     LCALL   _stricmp
147E EF                MOV     A,R7
147F 4E                ORL     A,R6
1480 22                RET     
1481         L?0620:
1481 900000      E     MOV     DPTR,#?_stricmp?BYTE+03H
1484 74FF              MOV     A,#0FFH
1486 F0                MOVX    @DPTR,A
1487 A3                INC     DPTR
1488 7400        R     MOV     A,#HIGH ?SC_1717
148A F0                MOVX    @DPTR,A
148B A3                INC     DPTR
148C 7400        R     MOV     A,#LOW ?SC_1717
148E F0                MOVX    @DPTR,A
148F 900000      R     MOV     DPTR,#argv+03H
1492 E0                MOVX    A,@DPTR
1493 FB                MOV     R3,A
1494 A3                INC     DPTR
1495 E0                MOVX    A,@DPTR
1496 FA                MOV     R2,A
1497 A3                INC     DPTR
1498 E0                MOVX    A,@DPTR
1499 F9                MOV     R1,A
149A 120000      E     LCALL   _stricmp
149D EF                MOV     A,R7
149E 4E                ORL     A,R6
149F 22                RET     
14A0         L?0621:
14A0 A3                INC     DPTR
14A1 F0                MOVX    @DPTR,A
14A2 900000      R     MOV     DPTR,#argv
14A5 E0                MOVX    A,@DPTR
14A6 FB                MOV     R3,A
14A7 A3                INC     DPTR
14A8 E0                MOVX    A,@DPTR
14A9 FA                MOV     R2,A
14AA A3                INC     DPTR
14AB E0                MOVX    A,@DPTR
14AC F9                MOV     R1,A
14AD 120000      E     LCALL   _stricmp
14B0 EF                MOV     A,R7
14B1 4E                ORL     A,R6
14B2 22                RET     
14B3         L?0622:
14B3 900000      E     MOV     DPTR,#?_stricmp?BYTE+03H
14B6 74FF              MOV     A,#0FFH
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 159 

14B8 F0                MOVX    @DPTR,A
14B9 A3                INC     DPTR
14BA 7400        R     MOV     A,#HIGH ?SC_1722
14BC F0                MOVX    @DPTR,A
14BD A3                INC     DPTR
14BE 7400        R     MOV     A,#LOW ?SC_1722
14C0 F0                MOVX    @DPTR,A
14C1 900000      R     MOV     DPTR,#argv+03H
14C4 E0                MOVX    A,@DPTR
14C5 FB                MOV     R3,A
14C6 A3                INC     DPTR
14C7 E0                MOVX    A,@DPTR
14C8 FA                MOV     R2,A
14C9 A3                INC     DPTR
14CA E0                MOVX    A,@DPTR
14CB F9                MOV     R1,A
14CC 120000      E     LCALL   _stricmp
14CF EF                MOV     A,R7
14D0 4E                ORL     A,R6
14D1 22                RET     
14D2         L?0623:
14D2 A3                INC     DPTR
14D3 F0                MOVX    @DPTR,A
14D4 900000      R     MOV     DPTR,#argv
14D7 E0                MOVX    A,@DPTR
14D8 FB                MOV     R3,A
14D9 A3                INC     DPTR
14DA E0                MOVX    A,@DPTR
14DB FA                MOV     R2,A
14DC A3                INC     DPTR
14DD E0                MOVX    A,@DPTR
14DE F9                MOV     R1,A
14DF 120000      E     LCALL   _stricmp
14E2 EF                MOV     A,R7
14E3 4E                ORL     A,R6
14E4 22                RET     
14E5         L?0624:
14E5 900000      E     MOV     DPTR,#?_stricmp?BYTE+03H
14E8 74FF              MOV     A,#0FFH
14EA F0                MOVX    @DPTR,A
14EB A3                INC     DPTR
14EC 7400        R     MOV     A,#HIGH ?SC_1729
14EE F0                MOVX    @DPTR,A
14EF A3                INC     DPTR
14F0 7400        R     MOV     A,#LOW ?SC_1729
14F2 F0                MOVX    @DPTR,A
14F3 900000      R     MOV     DPTR,#argv+03H
14F6 E0                MOVX    A,@DPTR
14F7 FB                MOV     R3,A
14F8 A3                INC     DPTR
14F9 E0                MOVX    A,@DPTR
14FA FA                MOV     R2,A
14FB A3                INC     DPTR
14FC E0                MOVX    A,@DPTR
14FD F9                MOV     R1,A
14FE 120000      E     LCALL   _stricmp
1501 EF                MOV     A,R7
1502 4E                ORL     A,R6
1503 22                RET     
1504         L?0625:
1504 A3                INC     DPTR
1505 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 160 

1506 900000      R     MOV     DPTR,#argv
1509 E0                MOVX    A,@DPTR
150A FB                MOV     R3,A
150B A3                INC     DPTR
150C E0                MOVX    A,@DPTR
150D FA                MOV     R2,A
150E A3                INC     DPTR
150F E0                MOVX    A,@DPTR
1510 F9                MOV     R1,A
1511 120000      E     LCALL   _stricmp
1514 EF                MOV     A,R7
1515 4E                ORL     A,R6
1516 22                RET     
1517         L?0626:
1517 900000      E     MOV     DPTR,#?_stricmp?BYTE+03H
151A 74FF              MOV     A,#0FFH
151C F0                MOVX    @DPTR,A
151D A3                INC     DPTR
151E 7400        R     MOV     A,#HIGH ?SC_1734
1520 F0                MOVX    @DPTR,A
1521 A3                INC     DPTR
1522 7400        R     MOV     A,#LOW ?SC_1734
1524 F0                MOVX    @DPTR,A
1525 900000      R     MOV     DPTR,#argv+03H
1528 E0                MOVX    A,@DPTR
1529 FB                MOV     R3,A
152A A3                INC     DPTR
152B E0                MOVX    A,@DPTR
152C FA                MOV     R2,A
152D A3                INC     DPTR
152E E0                MOVX    A,@DPTR
152F F9                MOV     R1,A
1530 120000      E     LCALL   _stricmp
1533 EF                MOV     A,R7
1534 4E                ORL     A,R6
1535 22                RET     
1536         L?0627:
1536 A3                INC     DPTR
1537 F0                MOVX    @DPTR,A
1538 900000      R     MOV     DPTR,#argv
153B E0                MOVX    A,@DPTR
153C FB                MOV     R3,A
153D A3                INC     DPTR
153E E0                MOVX    A,@DPTR
153F FA                MOV     R2,A
1540 A3                INC     DPTR
1541 E0                MOVX    A,@DPTR
1542 F9                MOV     R1,A
1543 120000      E     LCALL   _stricmp
1546 EF                MOV     A,R7
1547 4E                ORL     A,R6
1548 22                RET     
1549         L?0628:
1549 900000      E     MOV     DPTR,#?_stricmp?BYTE+03H
154C 74FF              MOV     A,#0FFH
154E F0                MOVX    @DPTR,A
154F A3                INC     DPTR
1550 7400        R     MOV     A,#HIGH ?SC_1737
1552 F0                MOVX    @DPTR,A
1553 A3                INC     DPTR
1554 7400        R     MOV     A,#LOW ?SC_1737
1556 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 161 

1557 900000      R     MOV     DPTR,#argv+03H
155A E0                MOVX    A,@DPTR
155B FB                MOV     R3,A
155C A3                INC     DPTR
155D E0                MOVX    A,@DPTR
155E FA                MOV     R2,A
155F A3                INC     DPTR
1560 E0                MOVX    A,@DPTR
1561 F9                MOV     R1,A
1562 120000      E     LCALL   _stricmp
1565 EF                MOV     A,R7
1566 4E                ORL     A,R6
1567 22                RET     
1568         L?0629:
1568 A3                INC     DPTR
1569 F0                MOVX    @DPTR,A
156A 900000      R     MOV     DPTR,#argv
156D E0                MOVX    A,@DPTR
156E FB                MOV     R3,A
156F A3                INC     DPTR
1570 E0                MOVX    A,@DPTR
1571 FA                MOV     R2,A
1572 A3                INC     DPTR
1573 E0                MOVX    A,@DPTR
1574 F9                MOV     R1,A
1575 120000      E     LCALL   _stricmp
1578 EF                MOV     A,R7
1579 4E                ORL     A,R6
157A 22                RET     
157B         L?0630:
157B 900000      E     MOV     DPTR,#?_stricmp?BYTE+03H
157E 74FF              MOV     A,#0FFH
1580 F0                MOVX    @DPTR,A
1581 A3                INC     DPTR
1582 7400        R     MOV     A,#HIGH ?SC_1741
1584 F0                MOVX    @DPTR,A
1585 A3                INC     DPTR
1586 7400        R     MOV     A,#LOW ?SC_1741
1588 F0                MOVX    @DPTR,A
1589 900000      R     MOV     DPTR,#argv+03H
158C E0                MOVX    A,@DPTR
158D FB                MOV     R3,A
158E A3                INC     DPTR
158F E0                MOVX    A,@DPTR
1590 FA                MOV     R2,A
1591 A3                INC     DPTR
1592 E0                MOVX    A,@DPTR
1593 F9                MOV     R1,A
1594 120000      E     LCALL   _stricmp
1597 EF                MOV     A,R7
1598 4E                ORL     A,R6
1599 22                RET     
159A         L?0631:
159A A3                INC     DPTR
159B F0                MOVX    @DPTR,A
159C 900000      R     MOV     DPTR,#argv
159F E0                MOVX    A,@DPTR
15A0 FB                MOV     R3,A
15A1 A3                INC     DPTR
15A2 E0                MOVX    A,@DPTR
15A3 FA                MOV     R2,A
15A4 A3                INC     DPTR
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 162 

15A5 E0                MOVX    A,@DPTR
15A6 F9                MOV     R1,A
15A7 120000      E     LCALL   _stricmp
15AA EF                MOV     A,R7
15AB 4E                ORL     A,R6
15AC 22                RET     
15AD         L?0632:
15AD 900000      E     MOV     DPTR,#?_stricmp?BYTE+03H
15B0 74FF              MOV     A,#0FFH
15B2 F0                MOVX    @DPTR,A
15B3 A3                INC     DPTR
15B4 7400        R     MOV     A,#HIGH ?SC_1746
15B6 F0                MOVX    @DPTR,A
15B7 A3                INC     DPTR
15B8 7400        R     MOV     A,#LOW ?SC_1746
15BA F0                MOVX    @DPTR,A
15BB 900000      R     MOV     DPTR,#argv+03H
15BE E0                MOVX    A,@DPTR
15BF FB                MOV     R3,A
15C0 A3                INC     DPTR
15C1 E0                MOVX    A,@DPTR
15C2 FA                MOV     R2,A
15C3 A3                INC     DPTR
15C4 E0                MOVX    A,@DPTR
15C5 F9                MOV     R1,A
15C6 120000      E     LCALL   _stricmp
15C9 EF                MOV     A,R7
15CA 4E                ORL     A,R6
15CB 22                RET     
15CC         L?0633:
15CC A3                INC     DPTR
15CD F0                MOVX    @DPTR,A
15CE 900000      R     MOV     DPTR,#argv
15D1 E0                MOVX    A,@DPTR
15D2 FB                MOV     R3,A
15D3 A3                INC     DPTR
15D4 E0                MOVX    A,@DPTR
15D5 FA                MOV     R2,A
15D6 A3                INC     DPTR
15D7 E0                MOVX    A,@DPTR
15D8 F9                MOV     R1,A
15D9 120000      E     LCALL   _stricmp
15DC EF                MOV     A,R7
15DD 4E                ORL     A,R6
15DE 22                RET     
15DF         L?0634:
15DF 900000      E     MOV     DPTR,#?_stricmp?BYTE+03H
15E2 74FF              MOV     A,#0FFH
15E4 F0                MOVX    @DPTR,A
15E5 A3                INC     DPTR
15E6 7400        R     MOV     A,#HIGH ?SC_1652
15E8 F0                MOVX    @DPTR,A
15E9 A3                INC     DPTR
15EA 7400        R     MOV     A,#LOW ?SC_1652
15EC F0                MOVX    @DPTR,A
15ED 900000      R     MOV     DPTR,#argv+03H
15F0 E0                MOVX    A,@DPTR
15F1 FB                MOV     R3,A
15F2 A3                INC     DPTR
15F3 E0                MOVX    A,@DPTR
15F4 FA                MOV     R2,A
15F5 A3                INC     DPTR
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 163 

15F6 E0                MOVX    A,@DPTR
15F7 F9                MOV     R1,A
15F8 120000      E     LCALL   _stricmp
15FB EF                MOV     A,R7
15FC 4E                ORL     A,R6
15FD 22                RET     
15FE         L?0635:
15FE A3                INC     DPTR
15FF F0                MOVX    @DPTR,A
1600 900000      R     MOV     DPTR,#argv
1603 E0                MOVX    A,@DPTR
1604 FB                MOV     R3,A
1605 A3                INC     DPTR
1606 E0                MOVX    A,@DPTR
1607 FA                MOV     R2,A
1608 A3                INC     DPTR
1609 E0                MOVX    A,@DPTR
160A F9                MOV     R1,A
160B 120000      E     LCALL   _stricmp
160E EF                MOV     A,R7
160F 4E                ORL     A,R6
1610 22                RET     
1611         L?0636:
1611 900000      E     MOV     DPTR,#?_stricmp?BYTE+03H
1614 74FF              MOV     A,#0FFH
1616 F0                MOVX    @DPTR,A
1617 A3                INC     DPTR
1618 7400        R     MOV     A,#HIGH ?SC_1649
161A F0                MOVX    @DPTR,A
161B A3                INC     DPTR
161C 7400        R     MOV     A,#LOW ?SC_1649
161E F0                MOVX    @DPTR,A
161F 900000      R     MOV     DPTR,#argv+03H
1622 E0                MOVX    A,@DPTR
1623 FB                MOV     R3,A
1624 A3                INC     DPTR
1625 E0                MOVX    A,@DPTR
1626 FA                MOV     R2,A
1627 A3                INC     DPTR
1628 E0                MOVX    A,@DPTR
1629 F9                MOV     R1,A
162A 120000      E     LCALL   _stricmp
162D EF                MOV     A,R7
162E 4E                ORL     A,R6
162F 22                RET     
1630         L?0637:
1630 A3                INC     DPTR
1631 F0                MOVX    @DPTR,A
1632 900000      R     MOV     DPTR,#argv
1635 E0                MOVX    A,@DPTR
1636 FB                MOV     R3,A
1637 A3                INC     DPTR
1638 E0                MOVX    A,@DPTR
1639 FA                MOV     R2,A
163A A3                INC     DPTR
163B E0                MOVX    A,@DPTR
163C F9                MOV     R1,A
163D 120000      E     LCALL   _stricmp
1640 EF                MOV     A,R7
1641 4E                ORL     A,R6
1642 22                RET     
1643         L?0638:
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 164 

1643 900000      E     MOV     DPTR,#?_stricmp?BYTE+03H
1646 74FF              MOV     A,#0FFH
1648 F0                MOVX    @DPTR,A
1649 A3                INC     DPTR
164A 7400        R     MOV     A,#HIGH ?SC_1288
164C F0                MOVX    @DPTR,A
164D A3                INC     DPTR
164E 7400        R     MOV     A,#LOW ?SC_1288
1650 F0                MOVX    @DPTR,A
1651 900000      R     MOV     DPTR,#argv+03H
1654 E0                MOVX    A,@DPTR
1655 FB                MOV     R3,A
1656 A3                INC     DPTR
1657 E0                MOVX    A,@DPTR
1658 FA                MOV     R2,A
1659 A3                INC     DPTR
165A E0                MOVX    A,@DPTR
165B F9                MOV     R1,A
165C 120000      E     LCALL   _stricmp
165F EF                MOV     A,R7
1660 4E                ORL     A,R6
1661 22                RET     
1662         L?0639:
1662 A3                INC     DPTR
1663 F0                MOVX    @DPTR,A
1664 900000      R     MOV     DPTR,#argv
1667 E0                MOVX    A,@DPTR
1668 FB                MOV     R3,A
1669 A3                INC     DPTR
166A E0                MOVX    A,@DPTR
166B FA                MOV     R2,A
166C A3                INC     DPTR
166D E0                MOVX    A,@DPTR
166E F9                MOV     R1,A
166F 120000      E     LCALL   _stricmp
1672 EF                MOV     A,R7
1673 4E                ORL     A,R6
1674 22                RET     
1675         L?0647:
1675 E0                MOVX    A,@DPTR
1676 FF                MOV     R7,A
1677 E500        E     MOV     A,regTW88+01H
1679 2408              ADD     A,#08H
167B F582              MOV     DPL,A
167D E500        E     MOV     A,regTW88
167F 3403              ADDC    A,#03H
1681 F583              MOV     DPH,A
1683 EF                MOV     A,R7
1684 F0                MOVX    @DPTR,A
1685 E500        E     MOV     A,regTW88+01H
1687 2404              ADD     A,#04H
1689 F582              MOV     DPL,A
168B E500        E     MOV     A,regTW88
168D 3403              ADDC    A,#03H
168F F583              MOV     DPH,A
1691 740C              MOV     A,#0CH
1693 F0                MOVX    @DPTR,A
1694 900000      R     MOV     DPTR,#OsdRamAddr
1697 E0                MOVX    A,@DPTR
1698 FE                MOV     R6,A
1699 A3                INC     DPTR
169A E0                MOVX    A,@DPTR
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 165 

169B FF                MOV     R7,A
169C 120000      E     LCALL   _FOsdRamSetAddress
169F E4                CLR     A
16A0 2500        E     ADD     A,regTW88+01H
16A2 F582              MOV     DPL,A
16A4 E500        E     MOV     A,regTW88
16A6 3403              ADDC    A,#03H
16A8 F583              MOV     DPH,A
16AA 22                RET     
16AB         L?0663:
16AB E4                CLR     A
16AC 900000      R     MOV     DPTR,#i
16AF F0                MOVX    @DPTR,A
16B0 A3                INC     DPTR
16B1 E0                MOVX    A,@DPTR
16B2 5401              ANL     A,#01H
16B4 F0                MOVX    @DPTR,A
16B5 900000      R     MOV     DPTR,#i
16B8 E0                MOVX    A,@DPTR
16B9 FC                MOV     R4,A
16BA A3                INC     DPTR
16BB E0                MOVX    A,@DPTR
16BC FD                MOV     R5,A
16BD EC                MOV     A,R4
16BE A3                INC     DPTR
16BF F0                MOVX    @DPTR,A
16C0 ED                MOV     A,R5
16C1 A3                INC     DPTR
16C2 F0                MOVX    @DPTR,A
16C3 120000      R     LCALL   WaitVBlank1
16C6 22                RET     
16C7         L?0669:
16C7 F582              MOV     DPL,A
16C9 E500        E     MOV     A,regTW88
16CB 3404              ADDC    A,#04H
16CD F583              MOV     DPH,A
16CF EF                MOV     A,R7
16D0 F0                MOVX    @DPTR,A
16D1 900000      R     MOV     DPTR,#delay
16D4 E0                MOVX    A,@DPTR
16D5 FE                MOV     R6,A
16D6 A3                INC     DPTR
16D7 E0                MOVX    A,@DPTR
16D8 FF                MOV     R7,A
16D9 120000      E     LCALL   _delay1ms
16DC 22                RET     
16DD         L?0681:
16DD E0                MOVX    A,@DPTR
16DE FF                MOV     R7,A
16DF A3                INC     DPTR
16E0 E0                MOVX    A,@DPTR
16E1 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
16E4 CF                XCH     A,R7
16E5 F0                MOVX    @DPTR,A
16E6 A3                INC     DPTR
16E7 EF                MOV     A,R7
16E8 F0                MOVX    @DPTR,A
16E9 120000      E     LCALL   _Printf
16EC 22                RET     
16ED         L?0682:
16ED 7BFF              MOV     R3,#0FFH
16EF 120000      E     LCALL   _Puts
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 166 

16F2 7BFF              MOV     R3,#0FFH
16F4 22                RET     
16F5         L?0691:
16F5 900000      R     MOV     DPTR,#OsdRamAddr
16F8 04                INC     A
16F9 F0                MOVX    @DPTR,A
16FA A3                INC     DPTR
16FB 74FD              MOV     A,#0FDH
16FD F0                MOVX    @DPTR,A
16FE FF                MOV     R7,A
16FF 7E01              MOV     R6,#01H
1701 120000      E     LCALL   _FOsdRamSetAddress
1704 22                RET     
1705         L?0692:
1705 740C              MOV     A,#0CH
1707 F0                MOVX    @DPTR,A
1708 900000      R     MOV     DPTR,#OsdRamAddr
170B E0                MOVX    A,@DPTR
170C FE                MOV     R6,A
170D A3                INC     DPTR
170E E0                MOVX    A,@DPTR
170F FF                MOV     R7,A
1710 120000      E     LCALL   _FOsdRamSetAddress
1713 22                RET     
1714         L?0705:
1714 120000      E     LCALL   _a2i
1717 900000      R     MOV     DPTR,#delay
171A EE                MOV     A,R6
171B F0                MOVX    @DPTR,A
171C A3                INC     DPTR
171D EF                MOV     A,R7
171E F0                MOVX    @DPTR,A
171F 22                RET     
1720         L?0706:
1720 7BFF              MOV     R3,#0FFH
1722 120000      E     LCALL   _Puts
1725 7BFF              MOV     R3,#0FFH
1727 22                RET     
1728         L?0716:
1728 F0                MOVX    @DPTR,A
1729 900000      R     MOV     DPTR,#OsdRamAddr
172C E0                MOVX    A,@DPTR
172D FE                MOV     R6,A
172E A3                INC     DPTR
172F E0                MOVX    A,@DPTR
1730 FF                MOV     R7,A
1731 120000      E     LCALL   _FOsdRamSetAddress
1734 22                RET     
1735         L?0722:
1735 900000      R     MOV     DPTR,#i
1738 E0                MOVX    A,@DPTR
1739 FC                MOV     R4,A
173A A3                INC     DPTR
173B E0                MOVX    A,@DPTR
173C FD                MOV     R5,A
173D EC                MOV     A,R4
173E A3                INC     DPTR
173F F0                MOVX    @DPTR,A
1740 ED                MOV     A,R5
1741 A3                INC     DPTR
1742 F0                MOVX    @DPTR,A
1743 120000      R     LCALL   WaitVBlank1
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 167 

1746 900000      R     MOV     DPTR,#xpositionH
1749 E0                MOVX    A,@DPTR
174A 22                RET     
174B         L?0723:
174B E0                MOVX    A,@DPTR
174C FF                MOV     R7,A
174D A3                INC     DPTR
174E E0                MOVX    A,@DPTR
174F 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
1752 CF                XCH     A,R7
1753 F0                MOVX    @DPTR,A
1754 A3                INC     DPTR
1755 EF                MOV     A,R7
1756 F0                MOVX    @DPTR,A
1757 120000      E     LCALL   _Printf
175A 22                RET     
175B         L?0729:
175B 900000      R     MOV     DPTR,#delay
175E E0                MOVX    A,@DPTR
175F FE                MOV     R6,A
1760 A3                INC     DPTR
1761 E0                MOVX    A,@DPTR
1762 FF                MOV     R7,A
1763 120000      E     LCALL   _delay1ms
1766 22                RET     
1767         L?0747:
1767 120000      E     LCALL   _a2h
176A 900000      R     MOV     DPTR,#n
176D EF                MOV     A,R7
176E F0                MOVX    @DPTR,A
176F 22                RET     
1770         L?0763:
1770 120000      E     LCALL   _a2i
1773 900000      R     MOV     DPTR,#delay
1776 EE                MOV     A,R6
1777 F0                MOVX    @DPTR,A
1778 A3                INC     DPTR
1779 EF                MOV     A,R7
177A F0                MOVX    @DPTR,A
177B 22                RET     
177C         L?0764:
177C 120000      E     LCALL   InitWithNTSC
177F 120000      E     LCALL   FP_GpioDefault
1782 7F01              MOV     R7,#01H
1784 120000      E     LCALL   _SSPLL_PowerUp
1787 22                RET     
1788         L?0765:
1788 7BFF              MOV     R3,#0FFH
178A 120000      E     LCALL   _Puts
178D 7BFF              MOV     R3,#0FFH
178F 22                RET     
1790         L?0766:
1790 120000      E     LCALL   DCDC_StartUP
1793 E4                CLR     A
1794 FF                MOV     R7,A
1795 120000      E     LCALL   _ScalerSetMuteManual
1798 120000      E     LCALL   LedPowerUp
179B 22                RET     
             ; FUNCTION Monitor (END)

C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 168 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_TestAutoDParkGridAction . . . . . . .  EXTERN   CODE   PROC     -----  -----
getNoSignalLogoStatus. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerWriteXDownReg . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonReadI2CByte . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  MonPage. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
MeasGetVSyncRiseToFallWidth. . . . . .  EXTERN   CODE   PROC     -----  -----
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_TestStepDParkGridAction . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonDumpI2C . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ToMonIndex . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  MonPage. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  len. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  cnt. . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0004H  2
MonitorMenu. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RemoveLogo . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MeasSetErrTolerance . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Prompt . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_InitISR . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_stricmp . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Dummy_FosdString_func. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FOsdRamSetAddress . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
WaitVBlank1. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  loop . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  vdata. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_PrintfInput . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MeasGetVsyncRisePos. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CpuTouchPressed. . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
_ScalerSetMuteManual . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_WriteSlowI2CByte. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
st_animation . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  53
  active . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  current. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  speed. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  vcnt . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  srcx . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000DH  20
  srcy . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0021H  20
Dummy_FosdInitTable_func . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SspllSetFreqAndPll. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ScalerCheckPanelFreerunValue . . . . .  EXTERN   CODE   PROC     -----  -----
MonWriteI2CByte. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  MonPage. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
TouchZ1. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
Dummy_DebugMsg_func. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SpiFlashVendor . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
MonGetCommand. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  ch . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  comment. . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
  incnt. . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0001H  1
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 169 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  last_argc. . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0002H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  ch . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
menu_fitem_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  winno. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  osdram . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  zoom_h . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  zoom_v . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  BPP1Color. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  BPP3_palette . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  BPP3_color . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
menu_fitem_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  15
  winno. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  osdram . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  zoom_h . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  zoom_v . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  BPP1Color. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  BPP3_palette . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  BPP3_color . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
_ScalerSetLineBufferSize . . . . . . .  EXTERN   CODE   PROC     -----  -----
_toupper . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MonIncDecI2C. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  inc. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  MonPage. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
SFR_CACHE_EN . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009BH  1
SFR_ET1. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
SFR_ET2. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
menu_page_info_s . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  focus. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  select . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  item_start . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  item_total . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  items. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  texts. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0008H  3
CheckAndSetUnknown . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SFR_EX0. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
menu_page_info_t . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  11
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  focus. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  select . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  item_start . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  item_total . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  items. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  texts. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0008H  3
InputMain. . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
MonRdata . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0015H  1
InitTouch. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 170 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


MonitorSPIC. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RS_ready . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TouchDump. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
argc . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0016H  1
menu_sitem_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  23
  osd_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  p. . . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  align. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  image. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
  image1 . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
  image_type . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  lut. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  up . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  down . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0016H  1
StartVideoInput. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_CheckI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonWdata . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0017H  1
menu_sitem_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  23
  osd_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  p. . . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  align. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  image. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
  image1 . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
  image_type . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  lut. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  up . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  down . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0016H  1
ScalerCalcFreerunHtotal. . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SpiOsdEnable. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
echo . . . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
_InitCore. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ClockLow . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
tic01. . . . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
Dummy_FosdMenu_func. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetMonAddress . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_delay1ms. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ScalerCalcHDE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_wPuts . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DCDC_StartUP . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonString. . . . . . . . . . . . . . .  PUBLIC   XDATA  PTR      0018H  3
monstr . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    001BH  50
MonIndex . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   004DH  1
_ScalerSetMuteAutoManual . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MeasEnableChangedDetection. . . . . .  EXTERN   CODE   PROC     -----  -----
InitInputAsDefault . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
fosd_menu_item_s . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  12
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 171 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  ram. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  zoom . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  ch_space_low . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  color. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  alpha_value. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  alpha_color_index. . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  reserved9. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  reserved10 . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  reserved11 . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
CheckEEPROM. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
HdmiInitEp9351Chip . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonNewReadI2CByte. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Slave. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  MonPage. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Dummy_FosdDispInfo_func. . . . . . . .  EXTERN   CODE   PROC     -----  -----
ScalerCalcFreerunVtotal. . . . . . . .  EXTERN   CODE   PROC     -----  -----
AutoTunePhase. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SpiOsdSetDeValue . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonNewDumpI2C. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  MonPage. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  ToMonIndex . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  Slave. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
_SaveInputEE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
argv . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    004EH  36
ScalerCalcVDE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
tsc_debug. . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
_PCMODEDATA. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  han. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  van. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  vfreq. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  htotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  vtotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  hsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  vsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  offseth. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0010H  2
  offsetv. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0012H  2
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  dummy2 . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  dummy3 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0018H  1
MonHelp. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_delay1s . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CheckAndSetPC. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CheckMeasure . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetHdmiModeEE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ScalerReadLineBufferDelay. . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerWriteFreerunHtotal. . . . . . .  EXTERN   CODE   PROC     -----  -----
_HdmiDownloadEdid. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 172 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_SetTraceAuto. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonNewWriteI2CByte . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Slave. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  MonPage. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_RemoveLogoWithWait. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
AutoTuneColor. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
Dummy_HOST_func. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CheckAndSetDecoderScaler . . . . . . .  EXTERN   CODE   PROC     -----  -----
menu_image_header_s. . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  lut_loc. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  image_loc. . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  bpp. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  lut_size . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
ScalerReadVScaleReg. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ClkPllSetSelDiv . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
menu_image_header_t. . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  17
  lut_loc. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  image_loc. . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  bpp. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  lut_size . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
GetInputEE . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerSetHScale . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerSetPanorama . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonWait. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  max. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  reg. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  mask . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  result . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
_HdmiDownloadDhcp. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
struct_HDINFO. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  14
  HACTIVE. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  HFRONT . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  HBACK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  HPULSE . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  VACTIVE. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  VFRONT . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  VBACK. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  VPULSE . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  INTERLACE. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
InputSubMode . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_SSPLL_PowerUp . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerWriteFreerunVtotal. . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerWriteLineBufferDelay. . . . . .  EXTERN   CODE   PROC     -----  -----
LinkCheckAndSetInput . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CpuAUX0. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
CpuAUX1. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
_VInput_enableOutput . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 173 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_ScalerSetFreerunManual. . . . . . . .  EXTERN   CODE   PROC     -----  -----
CpuAUX2. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
_TaskSetGrid . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CpuAUX3. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
_WriteI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Hdmi_SystemInit_EP9351 . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerSetVScale . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ScalerReadHDEReg . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerWriteVScaleReg. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_RLE_HEADER. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  id . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  cp . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bmp. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
_SetTouchAuto. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
FP_GpioDefault . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MeasGetVPeriod27 . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SPIIMAGE . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  top. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  bottom . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
SFR_E2IE . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
_MeasGetHActive. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonitorMCU . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ReadI2CByte . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_McuSpiClkSelect . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MeasEnableDeMeasure . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SW_key . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0072H  1
CpuTouchSkipCount. . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
tic_task . . . . . . . . . . . . . . .  EXTERN   DATA   U_INT    -----  2
Clock27. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CpuAUX0_Changed. . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
SLIDEIMAGE . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
_WaitVBlank. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CpuAUX1_Changed. . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
GetTouch2. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MeasGetHPeriod . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonitorSPI . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CpuAUX2_Changed. . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
MonWriteBit. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  MonPage. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  mask . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  FromBit. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  ToBit. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 174 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  MonMask. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  Slave. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
InitLogo1. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonitorFOsd. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CpuAUX3_Changed. . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_ePrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
regTW88. . . . . . . . . . . . . . . .  EXTERN   DATA   PTR      -----  2
CheckAndSetBT656 . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ChangeInput . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ScalerReadVDEReg . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DBG_PrintAviInfoFrame. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CheckAndSetComponent . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TouchX . . . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
_ScalerWriteHDEReg . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CpuTouchChanged. . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
TouchY . . . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
_ClkPllSetDividerReg . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MeasGetVActive. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_VInput_gotoFreerun. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerSetHScaleWithRatio. . . . . . .  EXTERN   CODE   PROC     -----  -----
TestDParkGridAction. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_CalibTouch. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_WriteI2CByte. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ReadSlowI2C . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DebugLevel . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0073H  1
_ScalerSetFreerunAutoManual. . . . . .  EXTERN   CODE   PROC     -----  -----
FONT_SPI_INFO_s. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
image_info_s . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
MeasGetVPeriod . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
FONT_SPI_INFO_t. . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 175 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


MonitorSOsd. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
image_info_t . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
_ScalerSetFreerunValue . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MeasSetThreshold. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Dummy_HDMI_EP9351_func . . . . . . . .  EXTERN   CODE   PROC     -----  -----
PrintCalibData . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Monitor. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  xpositionH . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  xpositionL . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  delay. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  win. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  xpositionH . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  xpositionL . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  delay. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  wait . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  xpositionH . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  xpositionL . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  delay. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  wait . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  xpositionH . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  xpositionL . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  delay. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  InputMainEE. . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  start. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  OsdRamAddr . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  attr . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0003H  1
  fdata. . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0004H  1
  OsdRamAddr . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  attr . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0005H  1
  fdata. . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0006H  1
  OsdRamAddr . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  attr . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0007H  1
  fdata. . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0008H  1
  OsdRamAddr . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  attr . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0009H  1
  fdata. . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   000AH  1
  OsdRamAddr . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  attr . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   000BH  1
  fdata. . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   000CH  1
  OsdRamAddr . . . . . . . . . . . . .  STATIC   XDATA  U_INT    000DH  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  attr . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   000FH  1
  fdata. . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0010H  1
C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 176 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  OsdRamAddr . . . . . . . . . . . . .  STATIC   XDATA  U_INT    0011H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  attr . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0013H  1
  fdata. . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0014H  1
  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  atemp. . . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0003H  4
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  n. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  positionX. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  positionY. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  positionX. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  positionY. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  wTemp. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  wValue . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
Dummy_DTV_func . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LedPowerUp . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerWriteVDEReg . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerPanoramaOnOff . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
InitWithNTSC . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerSetVScaleWithRatio. . . . . . .  EXTERN   CODE   PROC     -----  -----
ScalerReadXDownReg . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RS_rx. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ClockHigh. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_RS_tx . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MeasGetHSyncRiseToFallWidth. . . . . .  EXTERN   CODE   PROC     -----  -----
_TestInitFontRam . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_WriteSlowI2C. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
access . . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
DBG_PrintTimingRegister. . . . . . . .  EXTERN   CODE   PROC     -----  -----
ScalerReadOutputWidth. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonAddress . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0074H  1
MonitorEE. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DBG_DumpControlRegister. . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Mon_tx. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_RS_ungetch. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SystemClock. . . . . . . . . . . . . .  EXTERN   DATA   U_LONG   -----  4
image_item_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  9
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  info . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  alpha. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
_MeasGetHTotal . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_TaskNoSignal_setCmd . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
image_item_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  info . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  alpha. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
_a2h . . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ReadSlowI2CByte . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_a2i . . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----

C51 COMPILER V9.00   MONITOR                                                               06/05/2014 15:34:56 PAGE 177 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   9451    ----
   CONSTANT SIZE    =   2508    ----
   XDATA SIZE       =    117      50
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
