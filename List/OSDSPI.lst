C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE OSDSPI
OBJECT MODULE PLACED IN .\Output\OSDSPI.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE OSDSPI.c LARGE OPTIMIZE(9,SPEED) REGFILE(.\Output\TW8835_REV31.ORC) BROWSE 
                    -MODDP2 DEFINE(EVB_30,EVB_31,nullFn=//) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\List\OSDSPI.lst) OBJECT(.\Output\OSDSPI.o
                    -bj)

line level    source

   1          /**
   2           * @file
   3           * OSDSPI.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *      Copyright (C) 2011~2012 Intersil Corporation
   8           * @section DESCRIPTION
   9           *      low level SpiOSD layer
  10          */
  11          //*****************************************************************************
  12          //
  13          //                                                              OSD.c
  14          //
  15          //*****************************************************************************
  16          //
  17          //
  18          #include "config.h"
  19          #include "reg.h"
  20          #include "typedefs.h"
  21          #include "TW8835.h"
  22          #include "Global.h"
  23          
  24          #include "CPU.h"
  25          #include "printf.h"
  26          #include "Util.h"
  27          
  28          #include "I2C.h"
  29          #include "spi.h"
  30          
  31          #include "SOsd.h"
  32          #include "FOsd.h"
  33          #include "SpiFlashMap.h"
  34          #include "Settings.h"
  35          
  36          #ifdef SUPPORT_SPIOSD
  37          #undef DEBUG_SPIFLASH_TEST
  38          //==========================================
  39          //win0: 0x420   animation
  40          //win1: 0x440   background. low priority
  41          //win2: 0x430
  42          //..
  43          //win8: 0x4B0   focused.    high priority
  44          //----------------------------------------
  45          XDATA BYTE SpiWinBuff[10*0x10];
  46          
  47          
  48          //TW8835 have 9 windows
  49          #ifdef SUPPORT_8BIT_CHIP_ACCESS
              code BYTE       SpiOsdWinBase[9] = { SPI_WIN0_ST, 
                              SPI_WIN1_ST, SPI_WIN2_ST, SPI_WIN3_ST, SPI_WIN4_ST,
                              SPI_WIN5_ST, SPI_WIN6_ST, SPI_WIN7_ST, SPI_WIN8_ST
                              };
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 2   

              #else
  55          code WORD       SpiOsdWinBase[9] = { SPI_WIN0_ST, 
  56                          SPI_WIN1_ST, SPI_WIN2_ST, SPI_WIN3_ST, SPI_WIN4_ST,
  57                          SPI_WIN5_ST, SPI_WIN6_ST, SPI_WIN7_ST, SPI_WIN8_ST
  58                          };
  59          #endif
  60          
  61          //=============================================================================
  62          //              OSD Window Functions
  63          //=============================================================================
  64          
  65          
  66          //=============================================================================
  67          //              OSD Window Setup
  68          //=============================================================================
  69          #define LUT_TYPE_FONT   0x00
  70          #define LUT_TYPE_LUTS   0x80
  71          #define LUT_TYPE_LUT    0xC0
  72          
  73          
  74          #define DMA_TYPE_FONT   0       //x00
  75          #define DMA_TYPE_CHIP   1       //x40
  76          #define DMA_TYPE_SPIOSD 2       //x80
  77          #define DMA_TYPE_MCU    3       //xC0
  78          
  79          
  80          #ifdef UNCALLED_SEGMENT_CODE
              #define DMA_LUTTYPE_ADDR        0x00    //slow..pls. replace your image to BYTE type
              #define DMA_LUTTYPE_BYTE        0x80
              //void SpiFlashDMA(BYTE DmaType, BYTE LutOffset, DWORD address, WORD size)
              //{...}
              #endif
  86          
  87          
  88          //-----------------------------------------------------------------------------
  89          // R40E[7:4]    OSD Linebuffer MSB
  90          #ifdef MODEL_TW8836___TEST
              void SOsdSetLineBuffSize(BYTE msb)
              {
                      WriteTW88(REG40E, (ReadTW88(REG40E) & 0x0F) | msb);
              }
              
              #endif
  97          
  98          
  99          
 100          /**
 101          * Set SpiOsd DE value
 102          *
 103          *       How to calculate DE value 
 104          *       HDE = REG(0x210[7:0])
 105          *       PCLKO = REG(0x20d[1:0]) {0,1,2,2}
 106          *       PCLKO = REG(0x20d[1:0]) {1,1,1,1}  new
 107          *       result = HDE + PCLKO - 17
 108          */
 109          void SpiOsdSetDeValue(void)
 110          {
 111   1              XDATA   WORD wTemp;
 112   1              BYTE HDE,PCLKO;
 113   1      
 114   1              WriteTW88Page(PAGE2_SCALER );
 115   1              HDE = ReadTW88(REG210 );                                // HDE
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 3   

 116   1              PCLKO = ReadTW88(REG20D) & 0x03;
 117   1              //if(PCLKO == 3)
 118   1              //      PCLKO = 2;
 119   1              PCLKO = 1;
 120   1      
 121   1              wTemp = (WORD)HDE + PCLKO - 17;
 122   1      
 123   1              WriteTW88Page(PAGE4_SOSD );
 124   1              WriteTW88(REG40E, (BYTE)(wTemp>>8) );           // write SPI OSD DE value(high nibble)
 125   1              WriteTW88(REG40F, (BYTE)wTemp );                // write SPI OSD DE value(low byte)
 126   1              dPrintf("\nSpiOsdDe:%04x",wTemp);               
 127   1      }
 128          
 129          
 130          /**
 131          * Enable SpiOsd. HW function
 132          *
 133          * MODEL_TW8835_EXTI2C
 134          *       Do not toggle MCUSPI clock. Internal MCU can not make a synch.
 135          */
 136          void SpiOsdEnable(BYTE en)
 137          {
 138   1              BYTE dat;
 139   1              WriteTW88Page(PAGE4_SOSD );
 140   1              dat = ReadTW88(REG400);
 141   1              if( en ) {
 142   2      #ifdef MODEL_TW8835_EXTI2C
                              //-----------------------------------------
                              // If System uses SPIOSD, SPIOSD do DMA to read the SPIOSD data.
                              // If FW executes DMA on the vDE area, it can couurpt the DMA.
                              // If DMA corruption is happened, FW can not recover it. 
                              //-----------------------------------------
                              WriteTW88(REG4C1, ReadTW88(REG4C1) |  0x01);            //DMA start at VBlank
              //              WriteTW88(REG4E0, ReadTW88(REG4E0) & ~0x01);            //select PCLK
              #endif
 151   2      
 152   2      #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
                      //BK120615. for test clock source
              #else
 155   2                      //SPIOSD mode use PCLK or PLL108
 156   2                      McuSpiClkSelect(MCUSPI_CLK_PCLK);                                       //select MCU/SPI Clock.
 157   2      #endif
 158   2                      WriteTW88Page(PAGE4_SOSD );
 159   2                      WriteTW88(REG400, dat | 0x04);                                          //enable SpiOSD
 160   2              }
 161   1              else {
 162   2                      WriteTW88(REG400, dat & ~0x04);                                         //disable SpiOSD
 163   2      
 164   2      #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
                      //BK120615. for test clock source
              #else
 167   2                      //PLAYMODE_USE_27MHZ
 168   2                      McuSpiClkSelect(MCUSPI_CLK_27M);                                        //select MCU/SPI Clock.
 169   2                      //BKFYI120112. If you want CKLPLL, select MCUSPI_CLK_PCLK
 170   2                      //McuSpiClkSelect(MCUSPI_CLK_PCLK);     //select MCU/SPI Clock.
 171   2      #endif
 172   2      
 173   2      #ifdef MODEL_TW8835_EXTI2C
                              WriteTW88Page(PAGE4_SOSD );
                              WriteTW88(REG4C1, ReadTW88(REG4C1) & ~0x01);            //DMA start at immediately
              //              WriteTW88(REG4E0, ReadTW88(REG4E0) |  0x01);            //select PLL108M
              #endif
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 4   

 178   2      
 179   2              }
 180   1      }
 181          
 182          #if 0 //#ifdef MODEL_TW8835_SLAVE
              BYTE SpiOsdIsOn(void)
              {
                      BYTE dat;
                      WriteTW88Page(PAGE4_SOSD );
                      dat = ReadTW88(REG400);
                      if(dat & 0x04)  return ON;
                      else                    return OFF;
              }
              #endif
 192          
 193          //==============================
 194          // Windows Finctions
 195          //==============================
 196          
 197          /**
 198          * Enable SpiOsd Window. HW function.
 199          */
 200          void SpiOsdWinHWEnable(BYTE winno, BYTE en)
 201          {
 202   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      XDATA BYTE      index;
              #else
 205   1              XDATA WORD index;
 206   1      #endif
 207   1              XDATA   BYTE dat;
 208   1      
 209   1              index = SpiOsdWinBase[winno] + SPI_OSDWIN_ENABLE;
 210   1      
 211   1              WriteTW88Page(PAGE4_SOSD );
 212   1              dat = ReadTW88(index);
 213   1              if( en ) {
 214   2                      WriteTW88(index, dat | 0x01);
 215   2              }
 216   1              else     WriteTW88(index, dat & 0xfe);
 217   1      }
 218          
 219          #ifdef MODEL_TW8836____TEST
              //REG420[1] REG440[1] REG450[1],...
              void SpiOsdWinHZoom(BYTE winno, BYTE en)
              {
              #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      XDATA BYTE      index;
              #else
                      XDATA WORD index;
              #endif
                      XDATA   BYTE dat;
              
                      index = SpiOsdWinBase[winno] + SPI_OSDWIN_HZOOM;
              
                      WriteTW88Page(PAGE4_SOSD );
                      dat = ReadTW88(index);
                      if( en ) WriteTW88(index, dat | 0x02);
                      else     WriteTW88(index, dat & ~0x02);
              }
              #endif
 238          
 239          
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 5   

 240          #if 0
              BYTE SpiOsdWinIsOn(BYTE winno)
              {
              #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      XDATA   BYTE index;
              #else
                      XDATA WORD index;
              #endif
              
                      index = SpiOsdWinBase[winno] + SPI_OSDWIN_ENABLE;
              
                      WriteTW88Page(PAGE4_SOSD );
                      if( ReadTW88(index) & 0x01 ) return ON;
                      else                                             return OFF;
              }
              #endif
 256          
 257          /**
 258          * update SpiOsdWinBuff[]
 259          */
 260          void SpiOsdWinBuffEnable(BYTE winno, BYTE en)
 261          {
 262   1              DATA BYTE XDATA *data_p;
 263   1      
 264   1              if(winno) winno++;
 265   1              data_p = &SpiWinBuff[winno << 4];
 266   1      
 267   1              if(en) *data_p |= 0x01;
 268   1              else   *data_p &= 0xfe;
 269   1      }
 270          
 271          
 272          //--------------------------
 273          /**
 274          * clear all SpiWinBuff[]
 275          */
 276          void SOsdWinBuffClean(BYTE hw)
 277          {
 278   1              BYTE i,j;
 279   1      
 280   1              if(hw) {
 281   2                      SpiOsdWinHWOffAll(1);
 282   2                      SpiOsdRLC(0,0,0);       //disable RLE
 283   2              }
 284   1      
 285   1              for(i=0; i < 10; i++) {
 286   2                      for(j=0; j < 0x0E; j++)
 287   2                              SpiWinBuff[i*16+j]=0;
 288   2              }
 289   1      }
 290          //--------------------------
 291          /**
 292          * write SpiWinBuff to HW registers
 293          *
 294          *       start address for ecah window
 295          *       WIN             0       1       2       3       4       5       6       7       8
 296          *       addr    420 440 450 460 470 480 490 4A0 4B0
 297          * @param  start: start window. between 0 to 8
 298          * @param  end:   end window. between 0 to 8
 299          */
 300          #pragma SAVE
 301          #pragma OPTIMIZE(8,SPEED)
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 6   

 302          void SOsdWinBuffWrite2Hw(BYTE start, BYTE end)
 303          {
 304   1              DATA BYTE i;
 305   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      DATA BYTE reg_i;
              #else
 308   1              DATA WORD reg_i;
 309   1      #endif
 310   1              DATA BYTE XDATA *data_p;
 311   1      
 312   1      #ifdef DEBUG_OSD
                      dPrintf("\nSOsdWinBuffWrite2Hw(%bd,%bd)",start,end);
              #endif
 315   1      
 316   1              if(start)       start++;
 317   1              if(end)         end++;
 318   1      
 319   1              //WaitVBlank(1);
 320   1              WriteTW88Page(PAGE4_SOSD );
 321   1              data_p = &SpiWinBuff[start << 4];
 322   1      
 323   1              for(i=start; i <= end; i++) {
 324   2      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                              reg_i = (i << 4) + 0x20;
              #else
 327   2                      reg_i = 0x400 | (i << 4) + 0x20;
 328   2      #endif
 329   2                      //if(*data_p & 0x01) {
 330   2                      //      dPrintf(" %bd:%bx", i-1, *data_p);
 331   2                      //}
 332   2                      //dPrintf("\nR:%bx ",reg_i);    
 333   2                      //for(j=0; j < 16; j++) {
 334   2                      //      //WriteTW88(reg_i++, *data_p++);
 335   2                      //      dPrintf("%bx ",SpiWinBuff[i*16+j]);     
 336   2                      //}
 337   2                      //dPrintf("::%bx",*data_p);     
 338   2      
 339   2                      WriteTW88(reg_i++, *data_p++);  //0
 340   2                      WriteTW88(reg_i++, *data_p++);  //1
 341   2                      WriteTW88(reg_i++, *data_p++);  //2
 342   2                      WriteTW88(reg_i++, *data_p++);  //3
 343   2                      WriteTW88(reg_i++, *data_p++);  //4
 344   2                      WriteTW88(reg_i++, *data_p++);  //5
 345   2                      WriteTW88(reg_i++, *data_p++);  //6
 346   2                      WriteTW88(reg_i++, *data_p++);  //7
 347   2                      WriteTW88(reg_i++, *data_p++);  //8
 348   2                      WriteTW88(reg_i++, *data_p++);  //9
 349   2                      WriteTW88(reg_i++, *data_p++);  //A
 350   2                      WriteTW88(reg_i++, *data_p++);  //B
 351   2                      WriteTW88(reg_i++, *data_p++);  //C
 352   2                      WriteTW88(reg_i++, *data_p++);  //D
 353   2                      WriteTW88(reg_i++, *data_p++);  //E
 354   2                      if(i) {
 355   3                              data_p++;                                               //F
 356   3                      }
 357   2                      else {
 358   3                              WriteTW88(reg_i++, *data_p++);  //0F
 359   3                              i++;
 360   3                              WriteTW88(reg_i++, *data_p++);  //10
 361   3                              WriteTW88(reg_i++, *data_p++);  //11
 362   3                              WriteTW88(reg_i++, *data_p++);  //12
 363   3                              WriteTW88(reg_i++, *data_p++);  //13
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 7   

 364   3                              WriteTW88(reg_i++, *data_p++);  //14
 365   3                              WriteTW88(reg_i++, *data_p++);  //15
 366   3                              WriteTW88(reg_i++, *data_p++);  //16
 367   3                              reg_i+=9;
 368   3                              data_p+=9;
 369   3                      }
 370   2              }
 371   1      }
 372          #pragma RESTORE
 373          
 374          
 375          #if 0
              //desc
              //      check win buff, if HW is enabled and buff is not, disable HW
              void SpiOsdWinBuffSynchEnable(void)
              {
                      BYTE winno;
                      BYTE buff;
              #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      BYTE    index;
              #else
                      WORD index;
              #endif
                      BYTE dat;
              
                      WriteTW88Page(PAGE4_SOSD );
              
                      dPrintf("\nSpiOsdWinBuffSynchEnable ");
                      for(winno=0; winno <= 8; winno++) {
                              if(winno)       buff = SpiWinBuff[(winno+1) << 4];
                              else            buff = SpiWinBuff[winno << 4];
              
                              index = SpiOsdWinBase[winno] + SPI_OSDWIN_ENABLE;
                              dat = ReadTW88(index);
              
                              if(buff != dat) {
                                      dPrintf("win%02bx %02bx->%02bx ",winno, dat, buff);
                                      WriteTW88(index, dat & 0xfe);
                              }
                      }
                      //RLE will be synch on menu, not here
              }
              #endif
 407          
 408          #ifdef UNCALLED_CODE
              void SpiOsdWinBuffOffAll(void)
              {...}
              #endif
 412          
 413          /**
 414          * turn off all SpiOsd Window.
 415          *
 416          * @see SpiOsdWinHWEnable
 417          */
 418          void SpiOsdWinHWOffAll(BYTE wait)
 419          {
 420   1              BYTE i;
 421   1              if(wait)
 422   1                      WaitVBlank(wait);
 423   1              //SpiOsdEnableRLC(OFF);         //disable RLE
 424   1              SpiOsdDisableRLC(1);
 425   1              for(i=0; i<= 8; i++)
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 8   

 426   1                      SpiOsdWinHWEnable(i, 0);
 427   1      }
 428          #ifdef UNCALLED_CODE
              void SpiOsdWinHWOff(BYTE start, BYTE end)
              {...}
              #endif
 432          
 433          /**
 434          * set image location
 435          */
 436          //WINx Image Location on SpiFlash        
 437          void SpiOsdWinImageLoc(BYTE winno, DWORD start)
 438          {       
 439   1              DATA BYTE XDATA *data_p;
 440   1      
 441   1              if(winno) winno++;
 442   1              data_p = &SpiWinBuff[winno << 4];
 443   1      
 444   1              data_p += SPI_OSDWIN_BUFFERSTART;
 445   1      
 446   1              *data_p++ =  (BYTE)(start>>16);                         //+0x07
 447   1              *data_p++ =  (BYTE)(start>>8);                          //+0x08
 448   1              *data_p++ =  (BYTE)start;                                       //+0x09
 449   1      }
 450          
 451          //win0 win1       win2 
 452          //N/A  0x44A[7:6] 0x45A[7:6].,,,
 453          /**
 454          * set image bit location
 455          */
 456          void SpiOsdWinImageLocBit(BYTE winno, BYTE start)
 457          {
 458   1              DATA BYTE XDATA *data_p;
 459   1      
 460   1              if(winno) winno++;
 461   1              data_p = &SpiWinBuff[winno << 4];
 462   1      
 463   1              data_p += SPI_OSDWIN_BUFFERSTART_BIT;
 464   1              *data_p &= 0x3F;
 465   1              *data_p |= (start << 6);
 466   1      }
 467          
 468          
 469          //WINBUFF
 470          /**
 471          * set image width
 472          */
 473          void SpiOsdWinImageSizeW(BYTE winno, WORD w)
 474          {
 475   1              DATA BYTE XDATA *data_p;
 476   1              BYTE value;
 477   1      
 478   1              data_p = &SpiWinBuff[(winno+1) << 4];   //No WIN0
 479   1              data_p += SPI_OSDWIN_DISPSIZE;
 480   1      
 481   1              value = *data_p & 0xC0;
 482   1      
 483   1              *data_p++ = (BYTE)(w>>8 | value);               //+0x0A
 484   1              *data_p++ = (BYTE)w;                                    //+0x0B
 485   1      }
 486          
 487          //WINx buff size
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 9   

 488          /**
 489          * set image width and height
 490          */
 491          void SpiOsdWinImageSizeWH (BYTE winno, WORD w, WORD h)
 492          {
 493   1              DATA BYTE XDATA *data_p;
 494   1              BYTE value;
 495   1      
 496   1              //WIN1to8 need only Width.
 497   1              if(winno) {
 498   2                      SpiOsdWinImageSizeW(winno,w);
 499   2                      return; 
 500   2              }
 501   1      
 502   1              //now only for WIN0
 503   1              data_p = SpiWinBuff;                               //Only WIN0
 504   1              data_p += SPI_OSDWIN_DISPSIZE;
 505   1      
 506   1              value = (BYTE)(h >> 8);
 507   1              value <<= 4;
 508   1              value |= (BYTE)( w>>8 );
 509   1              *data_p++ = value;              //42A
 510   1              *data_p++ = (BYTE)w;    //42B
 511   1              *data_p++ = (BYTE)h;    //42C
 512   1      }
 513          
 514          
 515          //WINx Screen(win) Pos & Size
 516          /**
 517          * set window position and size
 518          */
 519          void SpiOsdWinScreen(BYTE winno, WORD x, WORD y, WORD w, WORD h)
 520          {
 521   1              DATA BYTE XDATA *data_p;
 522   1              BYTE value;
 523   1      
 524   1              if(winno) winno++;
 525   1              data_p = &SpiWinBuff[winno << 4];
 526   1      
 527   1              data_p += SPI_OSDWIN_SCREEN;
 528   1              value = (y >> 8);
 529   1              value <<= 4;
 530   1              value |= (x >> 8);
 531   1              *data_p++ = value;              //421   441...
 532   1              *data_p++ = (BYTE)x;    //422   442...  
 533   1              *data_p++ = (BYTE)y;    //423   443...
 534   1              
 535   1              value = (h >> 8);
 536   1              value <<= 4;
 537   1              value |= (w >> 8);
 538   1              *data_p++ = value;              //424   444...
 539   1              *data_p++ = (BYTE)w;    //425   445...          
 540   1              *data_p++ = (BYTE)h;    //426   446...   
 541   1      }
 542          
 543          
 544          //=============================================================================
 545          //              Load LUT
 546          //=============================================================================
 547          //LUT offset use 5bit & 16 unit
 548          /**
 549          * set Lut Offset
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 10  

 550          */
 551          void SpiOsdWinLutOffset( BYTE winno, WORD table_offset )
 552          {
 553   1              DATA BYTE XDATA *data_p;
 554   1      
 555   1              if(winno) winno++;
 556   1              data_p = &SpiWinBuff[winno << 4];
 557   1              data_p += SPI_OSDWIN_LUT_PTR;
 558   1              if(!winno) data_p += 4;
 559   1              
 560   1              //LUT offset use 5bit & 16 unit
 561   1              *data_p = table_offset >> 4;
 562   1      }
 563          
 564                          
 565          
 566          
 567          //=============================================================================
 568          //              Pixel Width
 569          //=============================================================================
 570          //bpp
 571          //      0:4bit, 1:6bit others:8bit
 572          //
 573          /**
 574          * set pixel width
 575          */
 576          void SpiOsdWinPixelWidth(BYTE winno, BYTE bpp)
 577          {
 578   1              DATA BYTE XDATA *data_p;
 579   1              BYTE mode;
 580   1      
 581   1              if(bpp==4)      mode=0;
 582   1              else if(bpp==6) mode=1;
 583   1              else mode=2;    //7 and 8 use mode 2
 584   1      
 585   1              if(winno)       winno++;
 586   1              data_p = &SpiWinBuff[winno << 4];
 587   1      
 588   1              *data_p &= 0x3f;
 589   1              *data_p |= (mode <<6);
 590   1      }
 591          //=============================================================================
 592          //              SpiOsdWinFillColor( BYTE winno, BYTE color )
 593          //=============================================================================
 594          //color will be an offset from the LUT location that Window have. 
 595          //If window start LUT from 80, the color value means color+80 indexed color.
 596          /**
 597          * fill color
 598          */
 599          void    SpiOsdWinFillColor( BYTE winno, BYTE color )
 600          {
 601   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      BYTE    index;
              #else
 604   1              WORD index;
 605   1      #endif
 606   1      
 607   1              index = SpiOsdWinBase[winno];
 608   1              WriteTW88Page(PAGE4_SOSD );
 609   1      
 610   1              if ( color ) {
 611   2                      WriteTW88(index, (ReadTW88(index ) | 0x04));                            // en Alpha & Global
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 11  

 612   2              }
 613   1              else {
 614   2                      WriteTW88(index, (ReadTW88(index ) & 0xFB ) );                          // dis Alpha & Global
 615   2              }
 616   1              index = SpiOsdWinBase[winno] + SPI_OSDWIN_FILLCOLOR;
 617   1              if(!winno)      index += 8;
 618   1              WriteTW88(index, color );
 619   1      }
 620          
 621          //=============================================================================
 622          //              SpiOsdWinGlobalAlpha( BYTE winno, BYTE alpha )
 623          //=============================================================================
 624          //alpha: 0 to 7F
 625          /**
 626          * set global alpha
 627          */
 628          void SpiOsdWinGlobalAlpha( BYTE winno, BYTE alpha )
 629          {
 630   1              DATA BYTE XDATA *data_p;
 631   1      
 632   1              if(winno) winno++;
 633   1              data_p = &SpiWinBuff[winno << 4];
 634   1      
 635   1              *data_p &= 0xCF;
 636   1              if(alpha) *data_p |= 0x10;
 637   1      
 638   1              data_p += SPI_OSDWIN_ALPHA;
 639   1              if(!winno)      data_p += 4;
 640   1              *data_p = alpha;
 641   1      }
 642          
 643          //=============================================================================
 644          //              SpiOsdWinGlobalAlpha( BYTE winno, BYTE alpha )
 645          //=============================================================================
 646          /**
 647          * set Pixel alpha
 648          */
 649          void    SpiOsdWinPixelAlpha( BYTE winno, BYTE alpha )
 650          {
 651   1              DATA BYTE XDATA *data_p;
 652   1      
 653   1              if(winno) winno++;
 654   1              data_p = &SpiWinBuff[winno << 4];
 655   1      
 656   1              if(alpha)       *data_p |= 0x30;
 657   1              else            *data_p &= 0xCF;
 658   1      
 659   1              data_p += SPI_OSDWIN_ALPHA;
 660   1              if(!winno)      data_p += 4;
 661   1              *data_p = alpha;
 662   1      }
 663          
 664          
 665          
 666          /**
 667          * adjust Win0 priority
 668          *
 669          * NOTE:Only fow Win0
 670          */
 671          void SpiOsdWin0SetPriority(BYTE high)
 672          {
 673   1      #if 0
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 12  

                      XDATA   BYTE dat;
                      WriteTW88Page(PAGE4_SOSD );
                      dat = ReadTW88(REG420);
                      if( high ) WriteTW88(REG420, dat | 0x02);
                      else       WriteTW88(REG420, dat & 0xfd);
              #else
 680   1              DATA BYTE XDATA *data_p;
 681   1      
 682   1              data_p = &SpiWinBuff[0];
 683   1      
 684   1              if(high) *data_p |= 0x02;
 685   1              else    *data_p &= 0xfd;
 686   1      #endif
 687   1      }
 688          
 689          //=============================================================================
 690          //              Animation
 691          //=============================================================================
 692          /**
 693          * set Animation
 694          * @param mode   
 695          *       -0:display one time of the loop and then disappear
 696          *       -1:display one time of the loop and then stay at the last frame
 697          *       -2:Enable looping 
 698          *       -3:static. Show the frame pointed by (0x431 and 0x432)
 699          * @param Duration duration time of each frame (in unit of VSync)
 700          *       - 0: infinite
 701          *       - 1: One VSync period
 702          *       - max 0xFF: 255 VSync period            
 703          */
 704          void SpiOsdWin0Animation(BYTE mode, BYTE FrameH, BYTE FrameV, BYTE Duration)
 705          {
 706   1              DATA BYTE XDATA *data_p;
 707   1      
 708   1              data_p = SpiWinBuff;                            //Only WIN0
 709   1              data_p += SPI_OSDWIN_ANIMATION;
 710   1      
 711   1              *data_p++ = FrameH;
 712   1              *data_p++ = FrameV;
 713   1              *data_p++ = Duration;
 714   1      
 715   1              *data_p &= 0x3f;
 716   1              *data_p |= (mode << 6);
 717   1      }
 718          
 719          //WINx buff offset
 720          /**
 721          * set Win0 X,Y
 722          */
 723          void SpiOsdWin0ImageOffsetXY (WORD x, WORD y)
 724          {
 725   1              BYTE value;
 726   1              DATA BYTE XDATA *data_p;
 727   1      
 728   1              data_p = SpiWinBuff;                    //Only WIN0
 729   1              data_p += SPI_OSDWIN_DISPOFFSET;
 730   1      
 731   1              value  = (BYTE)(y >> 8);
 732   1              value <<=4;
 733   1              value |= (BYTE)(x >> 8);
 734   1              *data_p++ = value;
 735   1              *data_p++ = (BYTE)x;
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 13  

 736   1              *data_p++ = (BYTE)y;
 737   1      }
 738          
 739          
 740          
 741          #ifdef FUNCTION_VERIFICATION
              //no DMA
              //@param
              //      type:   
              //              1:Byte pointer - LUTS type
              //              0:Address pointer - LUT type
              void SpiOsdIoLoadLUT_ARRAY(BYTE type, WORD LutOffset, WORD size, BYTE *pData)
              {
              }
              #endif
 751          
 752          //BKTODO:Remove. You can share a Data segment bank
 753          BYTE temp_SPI_Buffer[64];       //only for SpiOsdIoLoadLUT.
 754          /**
 755          * download LUT by IO (without DMA.)
 756          *
 757          * LutOffset: 0~511(0x00~0x1FF)
 758          *
 759          * NOTE:Only for TW8832 image
 760          * @param type:  
 761          *       - 1:Byte pointer - LUTS type
 762          *       - 0:Address pointer - LUT type
 763          */
 764          void SpiOsdIoLoadLUT(BYTE type, WORD LutOffset, WORD size, DWORD spiaddr)
 765          {
 766   1              BYTE i,j,k;
 767   1              BYTE R410_data;
 768   1      #ifdef DEBUG_OSD
                      dPrintf("\nSpiOsdIoLoadLUT%s LutLoc:%d size:%d 0x%06lx", type ? "S":" ", LutOffset, size, spiaddr);
              #endif
 771   1      
 772   1              WriteTW88Page(PAGE4_SOSD );
 773   1      
 774   1              //--- SPI-OSD config
 775   1              if(type==0)     R410_data = 0xC0;                       // LUT Write Mode, En & address ptr inc.
 776   1              else            R410_data = 0xA0;                       // LUT Write Mode, En & byte ptr inc.
 777   1              if(LutOffset >> 8)
 778   1                      R410_data |= 0x04;
 779   1              
 780   1              if(type==0) {
 781   2                      //
 782   2                      //ignore size. it is always 0x400.(256*4)
 783   2                      //              
 784   2                      for(i=0; i < 4; i++) {   
 785   3                              WriteTW88(REG410, R410_data | i );      //assign byte ptr       
 786   3                              WriteTW88(REG411, (BYTE)LutOffset);     //reset address ptr.
 787   3                              for(j=0; j<(256/64);j++) {
 788   4                                      SpiFlashDmaRead2XMem(temp_SPI_Buffer,spiaddr + i*256 + j*64,64);         //BUGBUG120606 BANK issue
 789   4                                      for(k=0; k < 64; k++) {
 790   5                                              WriteTW88(REG412, temp_SPI_Buffer[k]);          //write data
 791   5                                      }
 792   4                              }
 793   3                      }
 794   2              }
 795   1              else {
 796   2                      WriteTW88(REG410, R410_data);                   //assign byte ptr. always start from 0.
 797   2                      WriteTW88(REG411, (BYTE)LutOffset);     //reset address ptr.
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 14  

 798   2      
 799   2                      for(i=0; i < (size / 64); i++ ) {       //min size is a 64(16*4)
 800   3                              SpiFlashDmaRead2XMem(temp_SPI_Buffer,spiaddr + i*64,64);
 801   3                              for(k=0; k < 64; k++) {
 802   4                                      WriteTW88(REG412, temp_SPI_Buffer[k]);          //write data
 803   4                              }
 804   3                      }
 805   2              }
 806   1      }
 807          
 808          #define SPILUTBUFF_WIN
 809          
 810          #ifdef SPILUTBUFF_WIN
 811          //------------------------
 812          //0: use flag
 813          //1: size high
 814          //2: size low
 815          //3: lut offset (LutOffset >> 6)
 816          //4: lut offset (LutOffset << 2)
 817          //5: (address>>16) 
 818          //6: (address>>8)
 819          //7: (address)
 820          //------------------------
 821          BYTE SOsdHwBuff_win[9*8];
 822          WORD SOsdHwBuff_alpha;
 823          BYTE SOsdHwBuff_rle_win;
 824          BYTE SOsdHwBuff_rle_bpp;
 825          BYTE SOsdHwBuff_rle_count;
 826          #endif
 827          
 828          /**
 829          * clear HwBuff.
 830          */
 831          void SOsdHwBuffClean(void)
 832          {
 833   1              BYTE i;
 834   1      
 835   1              SOsdHwBuff_alpha=0xffff;
 836   1              SOsdHwBuff_rle_win=0;
 837   1      
 838   1              for(i=0; i<=8; i++) {
 839   2                      //clear use flag
 840   2                      SOsdHwBuff_win[i*8]=0;          
 841   2              }
 842   1      }
 843          
 844          /**
 845          * set LUT info to HwBuff. 
 846          */
 847          void SOsdHwBuffSetLut(BYTE win, /*BYTE type,*/  WORD LutOffset, WORD size, DWORD address)
 848          {
 849   1              SOsdHwBuff_win[win*8+0] = 1;
 850   1              SOsdHwBuff_win[win*8+1] = (BYTE)(size >> 8);
 851   1              SOsdHwBuff_win[win*8+2] = (BYTE)size;
 852   1      
 853   1              SOsdHwBuff_win[win*8+3] = (BYTE)(LutOffset >> 6);
 854   1              SOsdHwBuff_win[win*8+4] = (BYTE)(LutOffset << 2);
 855   1      
 856   1              SOsdHwBuff_win[win*8+5] = (BYTE)(address>>16);
 857   1              SOsdHwBuff_win[win*8+6] = (BYTE)(address>>8) ;
 858   1              SOsdHwBuff_win[win*8+7] = (BYTE)(address) ;
 859   1      }
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 15  

 860          /**
 861          * set RLE info to HwBuff
 862          */
 863          void SOsdHwBuffSetRle(BYTE win, BYTE bpp, BYTE count)
 864          {
 865   1              SOsdHwBuff_rle_win = win;
 866   1              SOsdHwBuff_rle_bpp = bpp;
 867   1              SOsdHwBuff_rle_count = count;
 868   1      }
 869          /**
 870          * set Alpha to HwBuff
 871          */
 872          void SOsdHwBuffSetAlpha(WORD alpha_index)
 873          {
 874   1              SOsdHwBuff_alpha = alpha_index;
 875   1      }
 876          
 877          /*
 878          example: volatile & memory register access
 879          volatile BYTE XDATA mm_dev_R1CD _at_ 0xC1CD;    //use 1 XDATA BYTE
 880          //#define TW8835_R1CD   (*((unsigned char volatile xdata *) (0xc000+0x1CD)))
 881          #define TW8835_R1CD     (*((unsigned char volatile xdata *) (REG_START_ADDRESS+0x1CD) ))
 882          void Dummy_Volatile_memory_register_test(void)
 883          {
 884                  volatile BYTE mode;
 885                  volatile BYTE XDATA *p; // = (BYTE XDATA *)0xC1CD;
 886          
 887                  mode = *(volatile BYTE XDATA*)(0xC1CD);
 888          
 889                  p = (BYTE XDATA *)0xC1CD;
 890                  mode = *p;
 891          
 892                  mode = mm_dev_R1CD;
 893          
 894                  mode = TW8835_R1CD;
 895          }
 896          */
 897          
 898          /**
 899          * write H2Buff to real HW
 900          */
 901          #ifdef MODEL_TW8835_EXTI2C
              void SOsdHwBuffWrite2Hw(void)
              {
                      BYTE win;
                      DATA BYTE XDATA *data_p;
                      DATA BYTE i,j;
                      BYTE reg4c1;
              #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      DATA BYTE reg_i;
              #else
                      DATA WORD reg_i;
              #endif
                      WORD LutOffset;
              
              #ifdef DEBUG_OSD
                      dPuts("\nSOsdHwBuffWrite2Hw.....");
              #endif
              
              
                      //-----------------------------
                      // time cirtical section start
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 16  

                      //-----------------------------
              
                      //----------------------------
                      //update LUT
                      WriteTW88Page(PAGE4_SOSD );
                      WriteTW88(REG410, 0xa0 );                       // LUT Write Mode, En & byte ptr inc. DMA needs it.
                      WriteTW88(REG411, 0);                                   // LUT addr. set 0 on DMA
              
              
                      for(win=0; win <= 8; win++) {
                              //check Use flag.
                              if(SOsdHwBuff_win[win*8] == 0) 
                                      continue;
                              data_p = &SOsdHwBuff_win[win*8+1];
              
                              //Spi Flash DMA
              #ifdef FAST_SPIFLASH
                              WriteTW88(REG4C0_SPIBASE+0x04, 0x00 );  // DMA stop
              
                              WriteTW88(REG4C0_SPIBASE+0x03, 0x80 | SPICMD_x_BYTES ); //LUT,Increase, 0x0B with 5 commands, 0xeb with 
             -7 commands                   
                              WriteTW88(REG4C0_SPIBASE+0x0a, SPICMD_x_READ );                         // SPI Command=R
              #else
                              SpiFlashDmaStop();      
                              SpiFlashCmdRead(DMA_DEST_SOSD_LUT);             
              #endif
              
                              //WriteTW88(REG4C0_SPIBASE+0x1a, 0x00 ); // DMA size
                              WriteTW88(REG4C0_SPIBASE+0x08, *data_p++ );     //size0
                              WriteTW88(REG4C0_SPIBASE+0x09, *data_p++ );     //size1
                              LutOffset = *data_p;
                              LutOffset <<= 6;
              
                              WriteTW88(REG4C0_SPIBASE+0x06, *data_p++ );     //LutOffset[8:6] -> R4C6[2:0]
                              LutOffset |= (*data_p & 0x3F);
                              WriteTW88(REG4C0_SPIBASE+0x07, *data_p++ );             //LutOffset[5:0] -> R4C7[7:2] 
                              WriteTW88(REG4C0_SPIBASE+0x0b, *data_p++);              //address0
                              WriteTW88(REG4C0_SPIBASE+0x0c, *data_p++ );             //address1
                              WriteTW88(REG4C0_SPIBASE+0x0d, *data_p++ );     //address2
              
                              //==========================================
                              // time critical area start
                              //==========================================
                              reg4c1 = ReadI2CByte(TW88I2CAddress,REG4C1);
                              WriteI2CByte(TW88I2CAddress,REG4C1, reg4c1 & ~1);
              
                              shadow_r4e0 = ReadI2CByte(TW88I2CAddress,REG4E0);
                              shadow_r4e1 = ReadI2CByte(TW88I2CAddress,REG4E1);
                              WriteI2CByte(TW88I2CAddress, 0xFF, PAGE0_GENERAL);
                              WriteI2CByte(TW88I2CAddress, REG002, 0xff );                    //clear 
                              while((ReadI2CByte(TW88I2CAddress,REG002) & 0x40) ==0); //wait vblank  I2C_WAIT_VBLANK
                              WriteI2CByte(TW88I2CAddress, 0xFF, PAGE4_CLOCK);
              
                              SPI_Buffer[0] = shadow_r4e0 & 0xFE;                                             //select PCLK
                              SPI_Buffer[1] = 0x20 | 2;                                                               //divider 2
                              WriteI2C(TW88I2CAddress,REG4E0,SPI_Buffer,2);                   //same:McuSpiClkToPclk(CLKPLL_DIV_2P0)
                      
                              WriteI2CByte(TW88I2CAddress,REG4C4, 0x01);                              //DMA READ start
                              SPI_Buffer[0] = shadow_r4e0;                                                    //save the restore value
                              SPI_Buffer[1] = shadow_r4e1;                                                    //save the restore value
                              while(ReadI2CByte(TW88I2CAddress,REG4C4) & 0x01);               //SpiFlashDmaWait
                              WriteI2C(TW88I2CAddress,REG4E0,SPI_Buffer,2);                   //restore clk. same:McuSpiClkRestore 
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 17  

              
                              WriteI2CByte(TW88I2CAddress,REG4C1, reg4c1);
                              //assume page4
                              //==========================================
                              // time critical area end
                              //==========================================
                      }
              
              
                      //----------------------------
                      //update RLE & pixel alpha
              
                      WriteTW88Page(PAGE4_SOSD );
                      if(SOsdHwBuff_rle_win) {
                              WriteTW88(REG404, ReadTW88(REG404) | 0x01);
                              WriteTW88(REG405, ((SOsdHwBuff_rle_bpp==7?8:SOsdHwBuff_rle_bpp) << 4) | (SOsdHwBuff_rle_count));
                              WriteTW88(REG406, SOsdHwBuff_rle_win);
                      }
                      else {
                              WriteTW88(REG404, ReadTW88(REG404) & 0xFE);
                              WriteTW88(REG405, 0);
                              WriteTW88(REG406, 0);
                      }
              
                      if(SOsdHwBuff_alpha != 0xFFFF) {
                              WriteTW88(REG410, 0xc3 );               // LUT Write Mode, En & byte ptr inc.
                              if(SOsdHwBuff_alpha >> 8)       WriteTW88(REG410, ReadTW88(REG410) | 0x08);     //support 512 palette
                              else                                    WriteTW88(REG410, ReadTW88(REG410) & 0xF7);
                              WriteTW88(REG411, (BYTE)SOsdHwBuff_alpha );     // alpha index
                              WriteTW88(REG412, 0x7F/*value*/ );                      // alpha value
                      }
              
                      //----------------------------
                      //update WIN buffer
              
                      //note: I update only win1 to win8, not win0.
                      //      Pls. do not use win0 here.
                      //start = 1+1;
                      //end = 8+1;
                      data_p = &SpiWinBuff[ 2 /*start*/ << 4];
                      for(i=2/*start*/; i <= 9/*end*/; i++) {
              #ifdef SUPPORT_8BIT_CHIP_ACCESS
                              reg_i = (i << 4) + 0x20;
              #else
                              reg_i = 0x400 | (i << 4) + 0x20;
              #endif
                              for(j=0; j < 16; j++) {
                                      WriteTW88(reg_i++, *data_p++);  
                              }
                      }
                      //-----------------------------
                      // time cirtical section end
                      //-----------------------------
              #ifndef MODEL_TW8835_EXTI2C
              //SFR_EA = 1;
              #endif
              }
              #endif //..MODEL_TW8835_EXTI2C
1041          
1042          
1043          #ifndef MODEL_TW8835_EXTI2C
1044          void SOsdHwBuffWrite2Hw(void)
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 18  

1045          {
1046   1              BYTE win;
1047   1              DATA BYTE XDATA *data_p;
1048   1              DATA BYTE i,j;
1049   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      DATA BYTE reg_i;
              #else
1052   1              DATA WORD reg_i;
1053   1      #endif
1054   1      #ifdef DEBUG_SPIFLASH_TEST
                      BYTE B0, B;      //bugrate random. => Pls. use PCLK. 
              #endif
1057   1              WORD LutOffset;
1058   1      
1059   1      #ifdef DEBUG_OSD
                      dPuts("\nSOsdHwBuffWrite2Hw.....");
              #endif
1062   1      
1063   1              WaitVBlank(1);  
1064   1      
1065   1              //-----------------------------
1066   1              // time cirtical section start
1067   1              //-----------------------------
1068   1      #ifndef MODEL_TW8835_EXTI2C
1069   1      //SFR_EA = 0;
1070   1      #endif
1071   1              //save clock mode & select PCLK
1072   1      #if defined(MODEL_TW8836FPGA) || defined(MODEL_TW8835FPGA)
                      //BK120615. for test clock source
              #else
1075   1              McuSpiClkToPclk(CLKPLL_DIV_2P0);        //with divider 1=1.5(72MHz)     try 2
1076   1      #endif
1077   1      
1078   1      #ifdef DEBUG_SPIFLASH_TEST
                      //to fix LUT0 B0 debug.
                      WriteTW88Page(PAGE4_SOSD );
                      WriteTW88(REG410,0xa0);         //read B
                      WriteTW88(REG411,0);            //addr 0
              
                      //read twice
                      B0=ReadTW88(REG412);            
                      B0=ReadTW88(REG412);
              #endif
1088   1      
1089   1              //----------------------------
1090   1              //update LUT
1091   1              WriteTW88Page(PAGE4_SOSD );
1092   1              WriteTW88(REG410, 0xa0 );                       // LUT Write Mode, En & byte ptr inc. DMA needs it.
1093   1              WriteTW88(REG411, 0);                                   // LUT addr. set 0 on DMA
1094   1      
1095   1      
1096   1              for(win=0; win <= 8; win++) {
1097   2                      //check Use flag.
1098   2                      if(SOsdHwBuff_win[win*8] == 0) 
1099   2                              continue;
1100   2                      data_p = &SOsdHwBuff_win[win*8+1];
1101   2      
1102   2                      //Spi Flash DMA
1103   2      #ifdef FAST_SPIFLASH
                              WriteTW88(REG4C0_SPIBASE+0x04, 0x00 );  // DMA stop
              
                              WriteTW88(REG4C0_SPIBASE+0x03, 0x80 | SPICMD_x_BYTES ); //LUT,Increase, 0x0B with 5 commands, 0xeb with 
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 19  

             -7 commands                   
                              WriteTW88(REG4C0_SPIBASE+0x0a, SPICMD_x_READ );                         // SPI Command=R
              #else
1109   2                      SpiFlashDmaStop();      
1110   2                      SpiFlashCmdRead(DMA_DEST_SOSD_LUT);             
1111   2      #endif
1112   2      
1113   2                      //WriteTW88(REG4C0_SPIBASE+0x1a, 0x00 ); // DMA size
1114   2                      WriteTW88(REG4C0_SPIBASE+0x08, *data_p++ );     //size0
1115   2                      WriteTW88(REG4C0_SPIBASE+0x09, *data_p++ );     //size1
1116   2                      LutOffset = *data_p;
1117   2                      LutOffset <<= 6;
1118   2      
1119   2                      WriteTW88(REG4C0_SPIBASE+0x06, *data_p++ );     //LutOffset[8:6] -> R4C6[2:0]
1120   2                      LutOffset |= (*data_p & 0x3F);
1121   2                      WriteTW88(REG4C0_SPIBASE+0x07, *data_p++ );             //LutOffset[5:0] -> R4C7[7:2] 
1122   2                      WriteTW88(REG4C0_SPIBASE+0x0b, *data_p++);              //address0
1123   2                      WriteTW88(REG4C0_SPIBASE+0x0c, *data_p++ );             //address1
1124   2                      WriteTW88(REG4C0_SPIBASE+0x0d, *data_p++ );     //address2
1125   2      
1126   2      #ifdef MODEL_TW8835_EXTI2C
                              SpiFlashDmaStart(SPIDMA_READ, 0 /*SPIDMA_BUSYCHECK*/,__LINE__);
              #else
1129   2                      WriteTW88(REG4C0_SPIBASE+0x04, 0x01 );                  // DMA Start
1130   2                      //while(ReadTW88Page() != PAGE4_SPI);                   //trick. check DONE. BusyWait
1131   2      #endif
1132   2      
1133   2      #ifdef DEBUG_SPIFLASH_TEST
                              //readback LUT0 B0 value
                              WriteTW88(REG410,0xa0); //read B
                              WriteTW88(REG411,0);            //addr 0
                              //read twice
                              B=ReadTW88(REG412);             
                              B=ReadTW88(REG412);             
                              if(LutOffset) {
                                      if(B0 != B) {
                                              //WriteTW88(REG410, 0x80 );     //LUTADDR[8] will be same
                                              WriteTW88(REG411, 0);                   //addr 0
              //BK110809              WriteTW88(REG412, B0);  //overwrite
              //SFR_EA = 1;
              #ifdef DEBUG_OSD
                                              ePrintf("\n***BUGBUG*** win%bd %bx->%bx",win, B,B0); //--pls, use without EA
              #endif
              //SFR_EA = 0;
                                      }
                              }
                              else {
                                      B0 = B;
                              }
              #endif
1156   2              }
1157   1      
1158   1      #if defined(MODEL_TW8836FPGA) || defined(MODEL_TW8835FPGA)
                      //BK120615. for test clock source
              #else
1161   1              //restore clock mode
1162   1              McuSpiClkRestore();
1163   1      #endif
1164   1      
1165   1              //----------------------------
1166   1              //update RLE & pixel alpha
1167   1      
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 20  

1168   1              WriteTW88Page(PAGE4_SOSD );
1169   1              if(SOsdHwBuff_rle_win) {
1170   2                      WriteTW88(REG404, ReadTW88(REG404) | 0x01);
1171   2                      WriteTW88(REG405, ((SOsdHwBuff_rle_bpp==7?8:SOsdHwBuff_rle_bpp) << 4) | (SOsdHwBuff_rle_count));
1172   2                      WriteTW88(REG406, SOsdHwBuff_rle_win);
1173   2              }
1174   1              else {
1175   2                      WriteTW88(REG404, ReadTW88(REG404) & 0xFE);
1176   2                      WriteTW88(REG405, 0);
1177   2                      WriteTW88(REG406, 0);
1178   2              }
1179   1      
1180   1              if(SOsdHwBuff_alpha != 0xFFFF) {
1181   2                      WriteTW88(REG410, 0xc3 );               // LUT Write Mode, En & byte ptr inc.
1182   2                      if(SOsdHwBuff_alpha >> 8)       WriteTW88(REG410, ReadTW88(REG410) | 0x08);     //support 512 palette
1183   2                      else                                    WriteTW88(REG410, ReadTW88(REG410) & 0xF7);
1184   2                      WriteTW88(REG411, (BYTE)SOsdHwBuff_alpha );     // alpha index
1185   2                      WriteTW88(REG412, 0x7F/*value*/ );                      // alpha value
1186   2              }
1187   1      
1188   1              //----------------------------
1189   1              //update WIN buffer
1190   1      
1191   1              //note: I update only win1 to win8, not win0.
1192   1              //      Pls. do not use win0 here.
1193   1              //start = 1+1;
1194   1              //end = 8+1;
1195   1              data_p = &SpiWinBuff[ 2 /*start*/ << 4];
1196   1              for(i=2/*start*/; i <= 9/*end*/; i++) {
1197   2      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                              reg_i = (i << 4) + 0x20;
              #else
1200   2                      reg_i = 0x400 | (i << 4) + 0x20;
1201   2      #endif
1202   2                      for(j=0; j < 16; j++) {
1203   3                              WriteTW88(reg_i++, *data_p++);  
1204   3                      }
1205   2              }
1206   1              //-----------------------------
1207   1              // time cirtical section end
1208   1              //-----------------------------
1209   1      #ifndef MODEL_TW8835_EXTI2C
1210   1      //SFR_EA = 1;
1211   1      #endif
1212   1      }
1213          #endif //..MODEL_TW8835_EXTI2C
1214          
1215          
1216          
1217          /**
1218          * download LUT
1219          *
1220          * NOTE BK110330:after we support 512 palette, we donot support the address method.
1221          * We need a width and a height info. but RTL only supports a size info.
1222          * So, if you want to use the address method, use a PIO method.
1223          *
1224          * NOTE Do not add WaitVBlank() here
1225          *
1226          * @param type   
1227          *       - 1:Byte pointer - LUTS type
1228          *       - 0:Address pointer - LUT type
1229          *       if 0, use LutOffset:0, size:0x400.
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 21  

1230          * @see SpiOsdIoLoadLUT
1231          * @see McuSpiClkToPclk
1232          * @see McuSpiClkRestore
1233          * @see SpiFlashDmaStart
1234          */
1235          #ifdef MODEL_TW8835_EXTI2C
              void SpiOsdLoadLUT(BYTE winno, BYTE type, WORD LutOffset, WORD size, DWORD address)
              {
                      BYTE reg;
                      BYTE reg4c1;
                      WORD ii;
                      volatile BYTE vdata;
              
                      reg = winno;    //skip warning
              
                      if(type==0) {
                              SpiOsdIoLoadLUT(type,0,0x400,address);
                              return;
                      }       
              #ifdef DEBUG_SPI
                      dPrintf("\nSpiOsdLoadLUT%s LutLoc:0x%x size:%d 0x%06lx", type ? "S":" ", LutOffset, size, address);
              #endif
              
                      //save clock mode & select PCLK 
              #ifdef MODEL_TW8835_EXTI2C
              //BK120619 test
              #else
                      McuSpiClkToPclk(CLKPLL_DIV_2P0);        //with divider 1=1.5(72MHz)     try 2
              #endif
              
                      WriteTW88Page(PAGE4_SOSD);
              
                      //--- SPI-OSD config
                      reg = 0;        //ReadTW88(REG410);
                      if(LutOffset & 0x100) reg = 0x08;
                      reg |= 0x80;                                                                    // LUT Write Mode.
                      if(type==0)     reg |= 0x40;                                            // address ptr inc                                              
                      else            reg |= 0x20;                                            // byte ptr inc.
                      if(LutOffset > 0xff)                                                    
                              reg |= 0x08;                                                            
                      WriteTW88(REG410, reg);
                      WriteTW88(REG411, (BYTE)LutOffset );                    // LUT addr. set 0 on DMA
              
              
                      //Spi Flash DMA
              //!#ifdef FAST_SPIFLASH
              //??    WriteTW88(REG4C0_SPIBASE+0x04, 0x00 );  // DMA stop     
              
                      WriteTW88(REG4C0_SPIBASE+0x03, 0x80 | 7/*SPICMD_x_BYTES*/ ); //LUT,Increase, 0x0B with 5 commands, 0xeb w
             -ith 7 commands                   
                      WriteTW88(REG4C0_SPIBASE+0x0a, 0xEB/*SPICMD_x_READ*/ );                         // SPI Command=R
              
                      WriteTW88(REG4C0_SPIBASE+0x0b, (BYTE)(address>>16) );   // SPI Addr
                      WriteTW88(REG4C0_SPIBASE+0x0c, (BYTE)(address>>8) );
                      WriteTW88(REG4C0_SPIBASE+0x0d, (BYTE)(address) );               //////00
              
                      //d             h               addr     addr  byte
                      //0    0x00     0x000           0       0       
                      //128  0x80             0x200      80   0
                      //192  0xC0             0x300      c0   0
              
                      //if use byte ptr inc.
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 22  

                      WriteTW88(REG4C0_SPIBASE+0x06, (BYTE)(LutOffset >> 6) );        //LutOffset[8:6] -> R4C6[2:0]
                      WriteTW88(REG4C0_SPIBASE+0x07, (BYTE)(LutOffset << 2) );        //LutOffset[5:0] -> R4C7[7:2] 
                                                                                              //                                      R4C7[1:0]  start of byteptr
              
                      WriteTW88(REG4C0_SPIBASE+0x1a, 0x00 ); // DMA size
                      WriteTW88(REG4C0_SPIBASE+0x08, (BYTE)(size >> 8) );
                      WriteTW88(REG4C0_SPIBASE+0x09, (BYTE)size );
              
              
                      //==========================================
                      // time critical area start
                      //==========================================
                      reg4c1 = ReadI2CByte(TW88I2CAddress,REG4C1);
                      WriteI2CByte(TW88I2CAddress,REG4C1, reg4c1 & ~1);
              
                      shadow_r4e0 = ReadI2CByte(TW88I2CAddress,REG4E0);
                      shadow_r4e1 = ReadI2CByte(TW88I2CAddress,REG4E1);
                      WriteI2CByte(TW88I2CAddress, 0xFF, PAGE0_GENERAL);
              Printf("\nSpiOsdLoadLUT %d",__LINE__);
                      WriteI2CByte(TW88I2CAddress, REG002, 0xff );                    //clear 
                      while((ReadI2CByte(TW88I2CAddress,REG002) & 0x40) ==0); //wait vblank  I2C_WAIT_VBLANK
              PORT_DEBUG = 0;
                      WriteI2CByte(TW88I2CAddress, 0xFF, PAGE4_CLOCK);
                                                                                                                                      
                      SPI_Buffer[0] = shadow_r4e0 & 0xFE;                                             //select PCLK
                      SPI_Buffer[1] = 0x20 | 2;                                                               //divider 2
                      WriteI2C(TW88I2CAddress,REG4E0,SPI_Buffer,2);                   //same:McuSpiClkToPclk(CLKPLL_DIV_2P0)
              
              PORT_DEBUG = 1;
                      WriteI2CByte(TW88I2CAddress,REG4C4, 0x01);                              //DMA READ start
              PORT_DEBUG = 0;
                      SPI_Buffer[0] = shadow_r4e0;                                                    //save the restore value
                      SPI_Buffer[1] = shadow_r4e1;                                                    //save the restore value
                      //while(ReadI2CByte(TW88I2CAddress,REG4C4) & 0x01);             //SpiFlashDmaWait
                      for(ii=0; ii<500; ii++) {
                              vdata = ReadI2CByte(TW88I2CAddress,REG4C4);
                              if((vdata & 0x01)==0)
                                      break;
                      }
                      if(ii==500) 
                              Printf("\n=====DMA FAIL!!!"); 
                              
              PORT_DEBUG = 1;
              Printf("\nSpiOsdLoadLUT %d",__LINE__);
                      WriteI2C(TW88I2CAddress,REG4E0,SPI_Buffer,2);                   //restore clk. same:McuSpiClkRestore 
              
                      WriteI2CByte(TW88I2CAddress,REG4C1, reg4c1);
                      //assume page4
                      //==========================================
                      // time critical area end
                      //==========================================
              
              #ifdef DEBUG_SPI
                      dPrintf("\nSpiOsdLoadLUT --END");
              #endif
              
              }
              #endif //..MODEL_TW8835_EXTI2C
1349          
1350          
1351          #ifndef MODEL_TW8835_EXTI2C
1352          //=====================================
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 23  

1353          void SpiOsdLoadLUT(BYTE winno, BYTE type, WORD LutOffset, WORD size, DWORD address)
1354          {
1355   1      #ifdef DEBUG_SPIFLASH_TEST
                      volatile BYTE B0,B;
              #endif
1358   1              //BYTE win_lut_debug;
1359   1              BYTE reg;
1360   1      //      BYTE SPICMD_x_READ = 0xEB;
1361   1      //      BYTE SPICMD_x_BYTES = 0x07;
1362   1      
1363   1      
1364   1      #ifndef MODEL_TW8836
1365   1              reg = winno;    //skip warning
1366   1      #endif
1367   1      
1368   1              if(type==0) {
1369   2      #ifdef DEBUG_SPI
                              dPrintf("\nSpiOsdLoadLUT convert LutOffset:%d->0, LutSize:0x%03x->0x400",LutOffset,size);
              #endif
1372   2                      SpiOsdIoLoadLUT(type,0,0x400,address);
1373   2                      return;
1374   2              }       
1375   1      #ifdef DEBUG_SPI
                      dPrintf("\nSpiOsdLoadLUT%s LutLoc:0x%x size:%d 0x%06lx", type ? "S":" ", LutOffset, size, address);
              #endif
1378   1      
1379   1              //save clock mode & select PCLK 
1380   1      #ifdef MODEL_TW8836FPGA
              //BK120619 test
              #else
1383   1              McuSpiClkToPclk(CLKPLL_DIV_2P0);        //with divider 1=1.5(72MHz)     try 2
1384   1      #endif
1385   1      
1386   1      #ifdef DEBUG_SPIFLASH_TEST
                      //win_lut_debug = 0;
                      if(LutOffset) {
                              WriteTW88Page(PAGE4_SOSD );
                              WriteTW88(REG410,0x80/*0xa0*/); //read B
                              WriteTW88(REG411,0);            //addr 0
                              //read twice
                              B0=ReadTW88(REG412);            
                              B0=(volatile)ReadTW88(REG412);          
                              //win_lut_debug = 1;
                      }
              //EA = 0;
              //P1_3 =1;
              //P1_4 = !P1_4;
              #endif
1401   1              WriteTW88Page(PAGE4_SOSD);
1402   1      
1403   1              //--- SPI-OSD config
1404   1              reg = 0;        //ReadTW88(REG410);
1405   1              if(LutOffset & 0x100) reg = 0x08;
1406   1              reg |= 0x80;                                                                    // LUT Write Mode.
1407   1              if(type==0)     reg |= 0x40;                                            // address ptr inc                                              
1408   1              else            reg |= 0x20;                                            // byte ptr inc.
1409   1      #ifdef MODEL_TW8836
                      if(winno == 1 || winno == 2)                                    // if win1 or win2, 
                              reg |= 0x04;                                                            //      select group B LUT
              #endif
1413   1              if(LutOffset > 0xff)                                                    
1414   1                      reg |= 0x08;                                                            
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 24  

1415   1              WriteTW88(REG410, reg);
1416   1              WriteTW88(REG411, (BYTE)LutOffset );                    // LUT addr. set 0 on DMA
1417   1      
1418   1      
1419   1              //Spi Flash DMA
1420   1      #ifdef FAST_SPIFLASH
                      WriteTW88(REG4C0_SPIBASE+0x04, 0x00 );  // DMA stop     
              
                      WriteTW88(REG4C0_SPIBASE+0x03, 0x80 | SPICMD_x_BYTES ); //LUT,Increase, 0x0B with 5 commands, 0xeb with 7
             - commands                   
                      WriteTW88(REG4C0_SPIBASE+0x0a, SPICMD_x_READ );                         // SPI Command=R
              
                      WriteTW88(REG4C0_SPIBASE+0x0b, (BYTE)(address>>16) );   // SPI Addr
                      WriteTW88(REG4C0_SPIBASE+0x0c, (BYTE)(address>>8) );
                      WriteTW88(REG4C0_SPIBASE+0x0d, (BYTE)(address) );               //////00
              
                      //d             h               addr     addr  byte
                      //0    0x00     0x000           0       0       
                      //128  0x80             0x200      80   0
                      //192  0xC0             0x300      c0   0
                      if(type==0) {
                              //if use addrss ptr inc.
                              //addr_ptr = LutOffset;
                              //byte_ptr  0;
                              WriteTW88(REG4C0_SPIBASE+0x06, (BYTE)(LutOffset >> 8)); //LutOffset[8]  ->R4C6[0]
                              WriteTW88(REG4C0_SPIBASE+0x07, (BYTE)LutOffset);                        //LutOffset[7:0]->R4C7[7:0]
                              
                      }
                      else {
                              //if use byte ptr inc.
                              WriteTW88(REG4C0_SPIBASE+0x06, (BYTE)(LutOffset >> 6) );        //LutOffset[8:6] -> R4C6[2:0]
                              WriteTW88(REG4C0_SPIBASE+0x07, (BYTE)(LutOffset << 2) );        //LutOffset[5:0] -> R4C7[7:2] 
                                                                                              //                                      R4C7[1:0]  start of byteptr
                      }
              
                      WriteTW88(REG4C0_SPIBASE+0x1a, 0x00 ); // DMA size
                      WriteTW88(REG4C0_SPIBASE+0x08, (BYTE)(size >> 8) );
                      WriteTW88(REG4C0_SPIBASE+0x09, (BYTE)size );
              
              #ifdef MODEL_TW8836
                      if(winno==1 || winno==2) {
                              WriteTW88(REG410, ReadTW88(REG410) | 0x04);     //indicate GROUP_B palette table. MAX size 256.
                      }
              #endif
              
              
              #ifdef MODEL_TW8835_EXTI2C
                      SpiFlashDmaStart(SPIDMA_READ, 0 /*SPIDMA_BUSYCHECK*/, __LINE__);
              #else
                      WriteTW88(REG4C0_SPIBASE+0x04, 0x01 ); // DMA Start
              //P1_3 =0;
              //P1_4 = !P1_4;
              //      while(ReadTW88Page() != PAGE4_SPI);                     //trick. check DONE. BusyWait
              //EA = 1;
              #endif
              #else
1470   1              //================================================
1471   1              //
1472   1              //================================================
1473   1              SpiFlashDmaStop();
1474   1                      
1475   1              SpiFlashCmdRead(DMA_DEST_SOSD_LUT);
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 25  

1476   1              SpiFlashDmaFlashAddr(address);
1477   1              if(type==0)     SpiFlashDmaBuffAddr(LutOffset);         //NOTE:Need 512x4 data
1478   1              else            SpiFlashDmaBuffAddr(LutOffset<<2);
1479   1              SpiFlashDmaReadLen(size);
1480   1      //delay1ms(100);
1481   1              SpiFlashDmaStart(SPIDMA_READ,0/*SPIDMA_BUSYCHECK*/, __LINE__);  //use busycheck
1482   1      //delay1ms(100);
1483   1      
1484   1      
1485   1      
1486   1      
1487   1      #endif
1488   1      
1489   1              
1490   1      #ifdef DEBUG_SPIFLASH_TEST
                      if(LutOffset) {
                              WriteTW88Page(PAGE4_SOSD );
                              WriteTW88(REG410,0x80/*0xa0*/); //read B
                              WriteTW88(REG411,0);            //addr 0
                              //read twice
                              B=ReadTW88(REG412);             
                              B=ReadTW88(REG412);     
              
                              if(B0 != B) {
                                      WriteTW88(REG411, 0);                   //addr 0
              //BK110809                      WriteTW88(REG412, B0);  //overwrite
              #ifdef DEBUG_OSD
                                      ePrintf("\n***BUGBUG*** B0 %bx->%bx",B, B0); //--pls, use without EA
              #endif
                              }
                      }
              #endif
1508   1      
1509   1      
1510   1      #ifdef DEBUG_SPI
                      dPrintf("\nSpiOsdLoadLUT --END");
              #endif
1513   1      
1514   1              //restore clock mode
1515   1      #ifdef MODEL_TW8836FPGA
              //BK120619 test
              #else
1518   1              McuSpiClkRestore();
1519   1      #endif
1520   1      }
1521          #endif //.. MODEL_TW8835_EXTI2C
1522          
1523          
1524          
1525          //BKTODO: If you donot using alpha, disable alpha.
1526          /**
1527          * set alpha attribute
1528          */
1529          void SpiOsdPixelAlphaAttr(WORD lutloc, BYTE value)
1530          {
1531   1              WriteTW88Page(PAGE4_SOSD );
1532   1      
1533   1              //--- SPI-OSD config
1534   1              //WriteTW88(REG410, 0xc0 );             // LUT Write Mode, En & address ptr inc.
1535   1              //WriteTW88(REG410, 0xa0 );             // LUT Write Mode, En & byte ptr inc.
1536   1              WriteTW88(REG410, 0xc3 );               // LUT Write Mode, En & byte ptr inc.
1537   1              if(lutloc >> 8) WriteTW88(REG410, ReadTW88(REG410) | 0x08);     //support 512 palette
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 26  

1538   1              else            WriteTW88(REG410, ReadTW88(REG410) & 0xF7);
1539   1              WriteTW88(REG411, (BYTE)lutloc ); // LUT addr
1540   1              WriteTW88(REG412, value ); // LUT addr
1541   1      
1542   1      //      WriteTW88(REG411, 0 );                          // LUT addr
1543   1      //      WriteTW88(REG4C0_SPIBASE+0x04, 0x01 ); // DMA Start
1544   1      }
1545          
1546          
1547          
1548          //-----------------------------------
1549          // RLE functions
1550          //
1551          //-----------------------------------
1552          
1553          /**
1554          * set RLE register
1555          * @param winno win number.
1556          *               winno 0 means disable.
1557          * @param dcnt Data BPP
1558          *       - 4:4bit, 6:6bit, others:8bit
1559          * @param ccnt counter value.
1560          *       - 4:4bit,5:5bit,..15:16bit, others:16bit
1561          */
1562          void SpiOsdRLC(BYTE winno,BYTE dcnt, BYTE ccnt)
1563          {
1564   1              //7 means 8BPP with 128 color.
1565   1              if(dcnt==7)
1566   1                      dcnt++;
1567   1      
1568   1              WriteTW88Page(PAGE4_SOSD );
1569   1      #ifdef MODEL_TW8836
                      if(winno==1 || winno==2) {
                              WriteTW88(REG407, (dcnt << 4) | (ccnt));
                              WriteTW88(REG406, (ReadTW88(REG406) & 0x0F) | (winno << 4));
                      }
                      else
                      {
                              WriteTW88(REG405, (dcnt << 4) | (ccnt));
                              WriteTW88(REG404, (ReadTW88(REG404) & 0x0F) | (winno << 4));
                      }
              #else
1580   1              //TW8835
1581   1              WriteTW88(REG405, (dcnt << 4) | (ccnt));
1582   1              WriteTW88(REG406, winno);
1583   1      #endif
1584   1      }
1585          
1586          /**
1587          * reset RLC register
1588          */
1589          void SpiOsdResetRLC(BYTE winno, BYTE reset)
1590          {
1591   1      #ifndef MODEL_TW8836
1592   1              BYTE temp = winno;
1593   1      #endif
1594   1      
1595   1              WriteTW88Page(PAGE4_SOSD );
1596   1      #ifdef MODEL_TW8836
                      if(winno==1 || winno==2) {
                              if(reset)       WriteTW88(REG406, ReadTW88(REG406) | 0x02);
                              else            WriteTW88(REG406, ReadTW88(REG406) & 0xFD);
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 27  

                      }
                      else 
              #endif
1603   1              {
1604   2                      if(reset)       WriteTW88(REG404, ReadTW88(REG404) | 0x02);
1605   2                      else            WriteTW88(REG404, ReadTW88(REG404) & 0xFD);
1606   2              }
1607   1      }
1608          
1609          #if 0
              //BKFYI:Removed on TW8835.
              void SpiOsdEnableRLC(BYTE en)
              {
                      WriteTW88Page(PAGE4_SOSD );
                      if(en)          WriteTW88(REG404, ReadTW88(REG404) | 0x01);
                      else            WriteTW88(REG404, ReadTW88(REG404) & 0xFE);
              }
              #endif
1618          /**
1619          * disable RLC
1620          * 
1621          * win0 means disable
1622          */
1623          void SpiOsdDisableRLC(BYTE winno)
1624          {
1625   1      #ifdef MODEL_TW8836
                      WriteTW88Page(PAGE4_SOSD );
                      if(winno==1 || winno==2) {
                              WriteTW88(REG406, (ReadTW88(REG406) & 0x0F));
                      }
                      else
                      {
                              WriteTW88(REG404, (ReadTW88(REG404) & 0x0F));
                      }
              #else
1635   1              BYTE temp = winno;
1636   1              WriteTW88Page(PAGE4_SOSD );
1637   1              WriteTW88(REG406, 0);
1638   1      #endif
1639   1      }
1640          
1641          
1642          
1643          #endif //..SUPPORT_SPIOSD
1644          
1645          
1646          
1647          
1648          
1649          
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 28  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00D9 (BEGIN)
0000         L?0218:
0000 FF                MOV     R7,A
0001 E500        E     MOV     A,regTW88+01H
0003 2410              ADD     A,#010H
0005 F582              MOV     DPL,A
0007 E500        E     MOV     A,regTW88
0009 3404              ADDC    A,#04H
000B F583              MOV     DPH,A
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F 900000      R     MOV     DPTR,#LutOffset
0012         L?0219:
0012 A3                INC     DPTR
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015         L?0220:
0015 E500        E     MOV     A,regTW88+01H
0017 2411              ADD     A,#011H
0019         L?0221:
0019 F582              MOV     DPL,A
001B E500        E     MOV     A,regTW88
001D 3404              ADDC    A,#04H
001F F583              MOV     DPH,A
0021 22                RET     
0022         L?0222:
0022         L?0223:
0022 EF                MOV     A,R7
0023         L?0224:
0023 75F010            MOV     B,#010H
0026 A4                MUL     AB
0027 2400        R     ADD     A,#LOW SpiWinBuff
0029 F582              MOV     DPL,A
002B 7400        R     MOV     A,#HIGH SpiWinBuff
002D 35F0              ADDC    A,B
002F AF82              MOV     R7,DPL
0031 22                RET     
0032         L?0225:
0032 F583              MOV     DPH,A
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
0036 900000      R     MOV     DPTR,#address
0039         L?0226:
0039 E0                MOVX    A,@DPTR
003A FC                MOV     R4,A
003B A3                INC     DPTR
003C E0                MOVX    A,@DPTR
003D FD                MOV     R5,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FE                MOV     R6,A
0041 A3                INC     DPTR
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 22                RET     
0045         L?0227:
0045         L?0228:
0045 14                DEC     A
0046 F582              MOV     DPL,A
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 29  

0048 8C83              MOV     DPH,R4
004A EF                MOV     A,R7
004B F0                MOVX    @DPTR,A
004C 22                RET     
004D         L?0229:
004D         L?0230:
004D 14                DEC     A
004E F582              MOV     DPL,A
0050 8E83              MOV     DPH,R6
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 E500        E     MOV     A,regTW88+01H
0056 22                RET     
0057         L?0232:
0057         L?0233:
0057 EF                MOV     A,R7
0058         L?0234:
0058 F0                MOVX    @DPTR,A
0059         L?0235:
0059 0500        R     INC     data_p+01H
005B E500        R     MOV     A,data_p+01H
005D AE00        R     MOV     R6,data_p
005F 22                RET     
0060         L?0236:
0060         L?0237:
0060 A3                INC     DPTR
0061 E0                MOVX    A,@DPTR
0062         L?0238:
0062 FF                MOV     R7,A
0063 0500        R     INC     data_p+01H
0065 E500        R     MOV     A,data_p+01H
0067 AC00        R     MOV     R4,data_p
0069 22                RET     
006A         L?0239:
006A         L?0240:
006A 75F008            MOV     B,#08H
006D A4                MUL     AB
006E 2400        R     ADD     A,#LOW SOsdHwBuff_win
0070 F582              MOV     DPL,A
0072 E4                CLR     A
0073 3400        R     ADDC    A,#HIGH SOsdHwBuff_win
0075 F583              MOV     DPH,A
0077 22                RET     
0078         L?0241:
0078         L?0242:
0078 E500        E     MOV     A,regTW88+01H
007A 2F                ADD     A,R7
007B         L?0243:
007B F582              MOV     DPL,A
007D E500        E     MOV     A,regTW88
007F 3E                ADDC    A,R6
0080 F583              MOV     DPH,A
0082 22                RET     
0083         L?0244:
0083 E9                MOV     A,R1
0084         L?0245:
0084 25E0              ADD     A,ACC
0086 2400        R     ADD     A,#LOW SpiOsdWinBase
0088 F582              MOV     DPL,A
008A E4                CLR     A
008B 3400        R     ADDC    A,#HIGH SpiOsdWinBase
008D F583              MOV     DPH,A
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 30  

008F 22                RET     
0090         L?0246:
0090         L?0247:
0090 14                DEC     A
0091 F582              MOV     DPL,A
0093 8A83              MOV     DPH,R2
0095 EF                MOV     A,R7
0096 F0                MOVX    @DPTR,A
0097 22                RET     
0098         L?0248:
0098         L?0249:
0098 EC                MOV     A,R4
0099 F0                MOVX    @DPTR,A
009A A3                INC     DPTR
009B ED                MOV     A,R5
009C F0                MOVX    @DPTR,A
009D A3                INC     DPTR
009E EA                MOV     A,R2
009F F0                MOVX    @DPTR,A
00A0 A3                INC     DPTR
00A1 EB                MOV     A,R3
00A2 F0                MOVX    @DPTR,A
00A3 22                RET     
00A4         L?0250:
00A4 7400        R     MOV     A,#LOW temp_SPI_Buffer
00A6 2F                ADD     A,R7
00A7 F582              MOV     DPL,A
00A9 E4                CLR     A
00AA 3400        R     ADDC    A,#HIGH temp_SPI_Buffer
00AC         L?0251:
00AC F583              MOV     DPH,A
00AE E0                MOVX    A,@DPTR
00AF FF                MOV     R7,A
00B0 E500        E     MOV     A,regTW88+01H
00B2 22                RET     
00B3         L?0252:
00B3 E4                CLR     A
00B4 FC                MOV     R4,A
00B5 FD                MOV     R5,A
00B6 900000      R     MOV     DPTR,#spiaddr
00B9 E0                MOVX    A,@DPTR
00BA F8                MOV     R0,A
00BB A3                INC     DPTR
00BC E0                MOVX    A,@DPTR
00BD F9                MOV     R1,A
00BE A3                INC     DPTR
00BF E0                MOVX    A,@DPTR
00C0 FA                MOV     R2,A
00C1 A3                INC     DPTR
00C2 E0                MOVX    A,@DPTR
00C3 22                RET     
00C4         L?0253:
00C4 120000      E     LCALL   ?C?ULSHR
00C7         L?0254:
00C7 0500        R     INC     data_p+01H
00C9 E500        R     MOV     A,data_p+01H
00CB AC00        R     MOV     R4,data_p
00CD 22                RET     
00CE         L?0255:
00CE         L?0256:
00CE FF                MOV     R7,A
00CF E9                MOV     A,R1
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 31  

00D0 75F008            MOV     B,#08H
00D3 A4                MUL     AB
00D4 22                RET     
00D5         L?0257:
00D5 2500        E     ADD     A,regTW88+01H
00D7 F582              MOV     DPL,A
00D9 E500        E     MOV     A,regTW88
00DB 3C                ADDC    A,R4
00DC F583              MOV     DPH,A
00DE EF                MOV     A,R7
00DF F0                MOVX    @DPTR,A
00E0 22                RET     
00E1         L?0258:
00E1         L?0259:
00E1 14                DEC     A
00E2 F582              MOV     DPL,A
00E4 8C83              MOV     DPH,R4
00E6 EE                MOV     A,R6
00E7 F0                MOVX    @DPTR,A
00E8 22                RET     
00E9         L?0260:
00E9         L?0261:
00E9 E0                MOVX    A,@DPTR
00EA FC                MOV     R4,A
00EB A3                INC     DPTR
00EC E0                MOVX    A,@DPTR
00ED FD                MOV     R5,A
00EE EC                MOV     A,R4
00EF 22                RET     
00F0         L?0262:
00F0 C4                SWAP    A
00F1 33                RLC     A
00F2 33                RLC     A
00F3 54C0              ANL     A,#0C0H
00F5 FE                MOV     R6,A
00F6 EF                MOV     A,R7
00F7 4E                ORL     A,R6
00F8 F0                MOVX    @DPTR,A
00F9 22                RET     
00FA         L?0263:
00FA 2500        R     ADD     A,data_p+01H
00FC F500        R     MOV     data_p+01H,A
00FE E4                CLR     A
00FF 3500        R     ADDC    A,data_p
0101 F500        R     MOV     data_p,A
0103 22                RET     
0104         L?0264:
0104 2500        R     ADD     A,data_p+01H
0106 F500        R     MOV     data_p+01H,A
0108 E4                CLR     A
0109 3500        R     ADDC    A,data_p
010B F500        R     MOV     data_p,A
010D 22                RET     
010E         L?0265:
010E 2500        R     ADD     A,data_p+01H
0110 F500        R     MOV     data_p+01H,A
0112 E4                CLR     A
0113 3500        R     ADDC    A,data_p
0115 F500        R     MOV     data_p,A
0117 22                RET     
0118         L?0266:
0118         L?0267:
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 32  

0118 0500        R     INC     data_p+01H
011A E500        R     MOV     A,data_p+01H
011C AC00        R     MOV     R4,data_p
011E 22                RET     
011F         L?0268:
011F EF                MOV     A,R7
0120 F0                MOVX    @DPTR,A
0121 850082      R     MOV     DPL,data_p+01H
0124 850083      R     MOV     DPH,data_p
0127 E0                MOVX    A,@DPTR
0128 22                RET     
             ; FUNCTION Com00D9 (END)

             ; FUNCTION SpiOsdSetDeValue (BEGIN)
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 115
0000 E500        E     MOV     A,regTW88+01H
0002 2410              ADD     A,#010H
0004 F582              MOV     DPL,A
0006 E500        E     MOV     A,regTW88
0008 3402              ADDC    A,#02H
;---- Variable 'HDE' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 116
000A 120000      R     LCALL   L?0251
000D 240D              ADD     A,#0DH
000F F582              MOV     DPL,A
0011 E500        E     MOV     A,regTW88
0013 3402              ADDC    A,#02H
0015 F583              MOV     DPH,A
;---- Variable 'PCLKO' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 119
0017 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 121
0019 EF                MOV     A,R7
001A 2401              ADD     A,#01H
001C FF                MOV     R7,A
001D E4                CLR     A
001E 33                RLC     A
001F CF                XCH     A,R7
0020 24EF              ADD     A,#0EFH
0022 CF                XCH     A,R7
0023 34FF              ADDC    A,#0FFH
0025 900000      R     MOV     DPTR,#wTemp
0028 F0                MOVX    @DPTR,A
0029 A3                INC     DPTR
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 124
002C 900000      R     MOV     DPTR,#wTemp
002F 120000      R     LCALL   L?0260
0032 FF                MOV     R7,A
0033 E500        E     MOV     A,regTW88+01H
0035 240E              ADD     A,#0EH
0037 120000      R     LCALL   L?0221
003A EF                MOV     A,R7
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 125
003C E500        E     MOV     A,regTW88+01H
003E 240F              ADD     A,#0FH
0040 120000      R     LCALL   L?0221
0043 ED                MOV     A,R5
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 33  

0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0045 7BFF              MOV     R3,#0FFH
0047 7A00        R     MOV     R2,#HIGH ?SC_0
0049 7900        R     MOV     R1,#LOW ?SC_0
004B 900000      R     MOV     DPTR,#wTemp
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0055 CF                XCH     A,R7
0056 F0                MOVX    @DPTR,A
0057 A3                INC     DPTR
0058 EF                MOV     A,R7
0059 F0                MOVX    @DPTR,A
005A 020000      E     LJMP    _dPrintf
             ; FUNCTION SpiOsdSetDeValue (END)

             ; FUNCTION _SpiOsdEnable (BEGIN)
                                           ; SOURCE LINE # 136
;---- Variable 'en' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 140
0000 E4                CLR     A
0001 2500        E     ADD     A,regTW88+01H
0003 120000      R     LCALL   L?0221
0006 E0                MOVX    A,@DPTR
;---- Variable 'dat' assigned to Register 'R5' ----
0007 FD                MOV     R5,A
                                           ; SOURCE LINE # 141
0008 EF                MOV     A,R7
0009 6012              JZ      ?C0002
                                           ; SOURCE LINE # 156
000B 7F02              MOV     R7,#02H
000D 120000      E     LCALL   _McuSpiClkSelect
                                           ; SOURCE LINE # 159
0010 ED                MOV     A,R5
0011 4404              ORL     A,#04H
0013 FF                MOV     R7,A
0014 E4                CLR     A
0015 2500        E     ADD     A,regTW88+01H
0017 120000      R     LCALL   L?0221
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
001C 22                RET     
001D         ?C0002:
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
001D ED                MOV     A,R5
001E 54FB              ANL     A,#0FBH
0020 FF                MOV     R7,A
0021 E4                CLR     A
0022 2500        E     ADD     A,regTW88+01H
0024 120000      R     LCALL   L?0221
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
0029 E4                CLR     A
002A FF                MOV     R7,A
002B 120000      E     LCALL   _McuSpiClkSelect
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 34  

                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
002E         ?C0004:
002E 22                RET     
             ; FUNCTION _SpiOsdEnable (END)

             ; FUNCTION _SpiOsdWinHWEnable (BEGIN)
                                           ; SOURCE LINE # 200
;---- Variable 'en' assigned to Register 'R5' ----
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 209
0000 EF                MOV     A,R7
0001 120000      R     LCALL   L?0245
0004 E4                CLR     A
0005 93                MOVC    A,@A+DPTR
0006 FF                MOV     R7,A
0007 7401              MOV     A,#01H
0009 93                MOVC    A,@A+DPTR
000A 900000      R     MOV     DPTR,#index
000D CF                XCH     A,R7
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
0012 900000      R     MOV     DPTR,#index
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 2500        E     ADD     A,regTW88+01H
001B 120000      R     LCALL   L?0243
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
;---- Variable 'dat' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 213
0020 ED                MOV     A,R5
0021 6005              JZ      ?C0005
                                           ; SOURCE LINE # 214
0023 EF                MOV     A,R7
0024 4401              ORL     A,#01H
                                           ; SOURCE LINE # 215
0026 8003              SJMP    ?C0215
0028         ?C0005:
                                           ; SOURCE LINE # 216
0028 EF                MOV     A,R7
0029 54FE              ANL     A,#0FEH
002B         ?C0215:
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#index
002F E0                MOVX    A,@DPTR
0030 FC                MOV     R4,A
0031 A3                INC     DPTR
0032 E0                MOVX    A,@DPTR
0033 120000      R     LCALL   L?0257
                                           ; SOURCE LINE # 217
0036         ?C0007:
0036 22                RET     
             ; FUNCTION _SpiOsdWinHWEnable (END)

             ; FUNCTION _SpiOsdWinBuffEnable (BEGIN)
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 35  

                                           ; SOURCE LINE # 260
;---- Variable 'winno' assigned to Register 'R7' ----
;---- Variable 'en' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 264
0000 EF                MOV     A,R7
0001 6001              JZ      ?C0008
0003 0F                INC     R7
0004         ?C0008:
                                           ; SOURCE LINE # 265
0004 120000      R     LCALL   L?0222
0007 F500        R     MOV     data_p,A
0009 8F00        R     MOV     data_p+01H,R7
                                           ; SOURCE LINE # 267
000B ED                MOV     A,R5
000C 6008              JZ      ?C0009
000E 850083      R     MOV     DPH,data_p
0011 E0                MOVX    A,@DPTR
0012 4401              ORL     A,#01H
0014 F0                MOVX    @DPTR,A
0015 22                RET     
0016         ?C0009:
                                           ; SOURCE LINE # 268
0016 850082      R     MOV     DPL,data_p+01H
0019 850083      R     MOV     DPH,data_p
001C E0                MOVX    A,@DPTR
001D 54FE              ANL     A,#0FEH
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 269
0020         ?C0011:
0020 22                RET     
             ; FUNCTION _SpiOsdWinBuffEnable (END)

             ; FUNCTION _SOsdWinBuffClean (BEGIN)
                                           ; SOURCE LINE # 276
;---- Variable 'hw' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 280
0000 EF                MOV     A,R7
0001 600C              JZ      ?C0012
                                           ; SOURCE LINE # 281
0003 7F01              MOV     R7,#01H
0005 120000      R     LCALL   _SpiOsdWinHWOffAll
                                           ; SOURCE LINE # 282
0008 E4                CLR     A
0009 FB                MOV     R3,A
000A FD                MOV     R5,A
000B FF                MOV     R7,A
000C 120000      R     LCALL   _SpiOsdRLC
                                           ; SOURCE LINE # 283
000F         ?C0012:
                                           ; SOURCE LINE # 285
;---- Variable 'i' assigned to Register 'R7' ----
000F E4                CLR     A
0010 FF                MOV     R7,A
0011         ?C0013:
                                           ; SOURCE LINE # 286
;---- Variable 'j' assigned to Register 'R6' ----
0011 E4                CLR     A
0012 FE                MOV     R6,A
0013         ?C0016:
                                           ; SOURCE LINE # 287
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 36  

0013 75F010            MOV     B,#010H
0016 EF                MOV     A,R7
0017 A4                MUL     AB
0018 2E                ADD     A,R6
0019 F582              MOV     DPL,A
001B E4                CLR     A
001C 35F0              ADDC    A,B
001E F583              MOV     DPH,A
0020 E582              MOV     A,DPL
0022 2400        R     ADD     A,#LOW SpiWinBuff
0024 F582              MOV     DPL,A
0026 E583              MOV     A,DPH
0028 3400        R     ADDC    A,#HIGH SpiWinBuff
002A F583              MOV     DPH,A
002C E4                CLR     A
002D F0                MOVX    @DPTR,A
002E 0E                INC     R6
002F EE                MOV     A,R6
0030 B40EE0            CJNE    A,#0EH,?C0016
                                           ; SOURCE LINE # 288
0033         ?C0015:
0033 0F                INC     R7
0034 EF                MOV     A,R7
0035 B40AD9            CJNE    A,#0AH,?C0013
                                           ; SOURCE LINE # 289
0038         ?C0019:
0038 22                RET     
             ; FUNCTION _SOsdWinBuffClean (END)

             ; FUNCTION _SOsdWinBuffWrite2Hw (BEGIN)
                                           ; SOURCE LINE # 302
;---- Variable 'start' assigned to Register 'R4' ----
0000 AC07              MOV     R4,AR7
;---- Variable 'end' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 316
0002 EC                MOV     A,R4
0003 6001              JZ      ?C0020
0005 0C                INC     R4
0006         ?C0020:
                                           ; SOURCE LINE # 317
0006 ED                MOV     A,R5
0007 6001              JZ      ?C0021
0009 0D                INC     R5
000A         ?C0021:
                                           ; SOURCE LINE # 321
000A EC                MOV     A,R4
000B 75F010            MOV     B,#010H
000E A4                MUL     AB
000F 2400        R     ADD     A,#LOW SpiWinBuff
0011 F582              MOV     DPL,A
0013 7400        R     MOV     A,#HIGH SpiWinBuff
0015 35F0              ADDC    A,B
0017 AF82              MOV     R7,DPL
0019 F500        R     MOV     data_p,A
001B 8F00        R     MOV     data_p+01H,R7
                                           ; SOURCE LINE # 323
001D AF04              MOV     R7,AR4
001F 8F00        R     MOV     i,R7
0021         ?C0022:
0021 E500        R     MOV     A,i
0023 D3                SETB    C
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 37  

0024 9D                SUBB    A,R5
0025 4003              JC      $ + 5H
0027 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 327
002A E500        R     MOV     A,i
002C 75F010            MOV     B,#010H
002F A4                MUL     AB
0030 2420              ADD     A,#020H
0032 FF                MOV     R7,A
0033 E4                CLR     A
0034 35F0              ADDC    A,B
0036 4404              ORL     A,#04H
0038 F500        R     MOV     reg_i,A
003A 8F00        R     MOV     reg_i+01H,R7
                                           ; SOURCE LINE # 339
003C 0500        R     INC     data_p+01H
003E E500        R     MOV     A,data_p+01H
0040 AE00        R     MOV     R6,data_p
0042 7002              JNZ     ?C0132
0044 0500        R     INC     data_p
0046         ?C0132:
0046 14                DEC     A
0047 F582              MOV     DPL,A
0049 8E83              MOV     DPH,R6
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D 0500        R     INC     reg_i+01H
004F E500        R     MOV     A,reg_i+01H
0051 AA00        R     MOV     R2,reg_i
0053 7002              JNZ     ?C0133
0055 0500        R     INC     reg_i
0057         ?C0133:
0057 14                DEC     A
0058 2500        E     ADD     A,regTW88+01H
005A F582              MOV     DPL,A
005C E500        E     MOV     A,regTW88
005E 3A                ADDC    A,R2
005F F583              MOV     DPH,A
0061 EF                MOV     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 340
0063 0500        R     INC     data_p+01H
0065 E500        R     MOV     A,data_p+01H
0067 AE00        R     MOV     R6,data_p
0069 7002              JNZ     ?C0134
006B 0500        R     INC     data_p
006D         ?C0134:
006D 14                DEC     A
006E F582              MOV     DPL,A
0070 8E83              MOV     DPH,R6
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 0500        R     INC     reg_i+01H
0076 E500        R     MOV     A,reg_i+01H
0078 AA00        R     MOV     R2,reg_i
007A 7002              JNZ     ?C0135
007C 0500        R     INC     reg_i
007E         ?C0135:
007E 14                DEC     A
007F 2500        E     ADD     A,regTW88+01H
0081 F582              MOV     DPL,A
0083 E500        E     MOV     A,regTW88
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 38  

0085 3A                ADDC    A,R2
0086 F583              MOV     DPH,A
0088 EF                MOV     A,R7
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 341
008A 0500        R     INC     data_p+01H
008C E500        R     MOV     A,data_p+01H
008E AE00        R     MOV     R6,data_p
0090 7002              JNZ     ?C0136
0092 0500        R     INC     data_p
0094         ?C0136:
0094 14                DEC     A
0095 F582              MOV     DPL,A
0097 8E83              MOV     DPH,R6
0099 E0                MOVX    A,@DPTR
009A FF                MOV     R7,A
009B 0500        R     INC     reg_i+01H
009D E500        R     MOV     A,reg_i+01H
009F AA00        R     MOV     R2,reg_i
00A1 7002              JNZ     ?C0137
00A3 0500        R     INC     reg_i
00A5         ?C0137:
00A5 14                DEC     A
00A6 2500        E     ADD     A,regTW88+01H
00A8 F582              MOV     DPL,A
00AA E500        E     MOV     A,regTW88
00AC 3A                ADDC    A,R2
00AD F583              MOV     DPH,A
00AF EF                MOV     A,R7
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 342
00B1 0500        R     INC     data_p+01H
00B3 E500        R     MOV     A,data_p+01H
00B5 AE00        R     MOV     R6,data_p
00B7 7002              JNZ     ?C0138
00B9 0500        R     INC     data_p
00BB         ?C0138:
00BB 14                DEC     A
00BC F582              MOV     DPL,A
00BE 8E83              MOV     DPH,R6
00C0 E0                MOVX    A,@DPTR
00C1 FF                MOV     R7,A
00C2 0500        R     INC     reg_i+01H
00C4 E500        R     MOV     A,reg_i+01H
00C6 AA00        R     MOV     R2,reg_i
00C8 7002              JNZ     ?C0139
00CA 0500        R     INC     reg_i
00CC         ?C0139:
00CC 14                DEC     A
00CD 2500        E     ADD     A,regTW88+01H
00CF F582              MOV     DPL,A
00D1 E500        E     MOV     A,regTW88
00D3 3A                ADDC    A,R2
00D4 F583              MOV     DPH,A
00D6 EF                MOV     A,R7
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 343
00D8 0500        R     INC     data_p+01H
00DA E500        R     MOV     A,data_p+01H
00DC AE00        R     MOV     R6,data_p
00DE 7002              JNZ     ?C0140
00E0 0500        R     INC     data_p
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 39  

00E2         ?C0140:
00E2 14                DEC     A
00E3 F582              MOV     DPL,A
00E5 8E83              MOV     DPH,R6
00E7 E0                MOVX    A,@DPTR
00E8 FF                MOV     R7,A
00E9 0500        R     INC     reg_i+01H
00EB E500        R     MOV     A,reg_i+01H
00ED AA00        R     MOV     R2,reg_i
00EF 7002              JNZ     ?C0141
00F1 0500        R     INC     reg_i
00F3         ?C0141:
00F3 14                DEC     A
00F4 2500        E     ADD     A,regTW88+01H
00F6 F582              MOV     DPL,A
00F8 E500        E     MOV     A,regTW88
00FA 3A                ADDC    A,R2
00FB F583              MOV     DPH,A
00FD EF                MOV     A,R7
00FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 344
00FF 0500        R     INC     data_p+01H
0101 E500        R     MOV     A,data_p+01H
0103 AE00        R     MOV     R6,data_p
0105 7002              JNZ     ?C0142
0107 0500        R     INC     data_p
0109         ?C0142:
0109 14                DEC     A
010A F582              MOV     DPL,A
010C 8E83              MOV     DPH,R6
010E E0                MOVX    A,@DPTR
010F FF                MOV     R7,A
0110 0500        R     INC     reg_i+01H
0112 E500        R     MOV     A,reg_i+01H
0114 AA00        R     MOV     R2,reg_i
0116 7002              JNZ     ?C0143
0118 0500        R     INC     reg_i
011A         ?C0143:
011A 14                DEC     A
011B 2500        E     ADD     A,regTW88+01H
011D F582              MOV     DPL,A
011F E500        E     MOV     A,regTW88
0121 3A                ADDC    A,R2
0122 F583              MOV     DPH,A
0124 EF                MOV     A,R7
0125 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 345
0126 0500        R     INC     data_p+01H
0128 E500        R     MOV     A,data_p+01H
012A AE00        R     MOV     R6,data_p
012C 7002              JNZ     ?C0144
012E 0500        R     INC     data_p
0130         ?C0144:
0130 14                DEC     A
0131 F582              MOV     DPL,A
0133 8E83              MOV     DPH,R6
0135 E0                MOVX    A,@DPTR
0136 FF                MOV     R7,A
0137 0500        R     INC     reg_i+01H
0139 E500        R     MOV     A,reg_i+01H
013B AA00        R     MOV     R2,reg_i
013D 7002              JNZ     ?C0145
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 40  

013F 0500        R     INC     reg_i
0141         ?C0145:
0141 14                DEC     A
0142 2500        E     ADD     A,regTW88+01H
0144 F582              MOV     DPL,A
0146 E500        E     MOV     A,regTW88
0148 3A                ADDC    A,R2
0149 F583              MOV     DPH,A
014B EF                MOV     A,R7
014C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 346
014D 0500        R     INC     data_p+01H
014F E500        R     MOV     A,data_p+01H
0151 AE00        R     MOV     R6,data_p
0153 7002              JNZ     ?C0146
0155 0500        R     INC     data_p
0157         ?C0146:
0157 14                DEC     A
0158 F582              MOV     DPL,A
015A 8E83              MOV     DPH,R6
015C E0                MOVX    A,@DPTR
015D FF                MOV     R7,A
015E 0500        R     INC     reg_i+01H
0160 E500        R     MOV     A,reg_i+01H
0162 AA00        R     MOV     R2,reg_i
0164 7002              JNZ     ?C0147
0166 0500        R     INC     reg_i
0168         ?C0147:
0168 14                DEC     A
0169 2500        E     ADD     A,regTW88+01H
016B F582              MOV     DPL,A
016D E500        E     MOV     A,regTW88
016F 3A                ADDC    A,R2
0170 F583              MOV     DPH,A
0172 EF                MOV     A,R7
0173 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 347
0174 0500        R     INC     data_p+01H
0176 E500        R     MOV     A,data_p+01H
0178 AE00        R     MOV     R6,data_p
017A 7002              JNZ     ?C0148
017C 0500        R     INC     data_p
017E         ?C0148:
017E 14                DEC     A
017F F582              MOV     DPL,A
0181 8E83              MOV     DPH,R6
0183 E0                MOVX    A,@DPTR
0184 FF                MOV     R7,A
0185 0500        R     INC     reg_i+01H
0187 E500        R     MOV     A,reg_i+01H
0189 AA00        R     MOV     R2,reg_i
018B 7002              JNZ     ?C0149
018D 0500        R     INC     reg_i
018F         ?C0149:
018F 14                DEC     A
0190 2500        E     ADD     A,regTW88+01H
0192 F582              MOV     DPL,A
0194 E500        E     MOV     A,regTW88
0196 3A                ADDC    A,R2
0197 F583              MOV     DPH,A
0199 EF                MOV     A,R7
019A F0                MOVX    @DPTR,A
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 41  

                                           ; SOURCE LINE # 348
019B 0500        R     INC     data_p+01H
019D E500        R     MOV     A,data_p+01H
019F AE00        R     MOV     R6,data_p
01A1 7002              JNZ     ?C0150
01A3 0500        R     INC     data_p
01A5         ?C0150:
01A5 14                DEC     A
01A6 F582              MOV     DPL,A
01A8 8E83              MOV     DPH,R6
01AA E0                MOVX    A,@DPTR
01AB FF                MOV     R7,A
01AC 0500        R     INC     reg_i+01H
01AE E500        R     MOV     A,reg_i+01H
01B0 AA00        R     MOV     R2,reg_i
01B2 7002              JNZ     ?C0151
01B4 0500        R     INC     reg_i
01B6         ?C0151:
01B6 14                DEC     A
01B7 2500        E     ADD     A,regTW88+01H
01B9 F582              MOV     DPL,A
01BB E500        E     MOV     A,regTW88
01BD 3A                ADDC    A,R2
01BE F583              MOV     DPH,A
01C0 EF                MOV     A,R7
01C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
01C2 0500        R     INC     data_p+01H
01C4 E500        R     MOV     A,data_p+01H
01C6 AE00        R     MOV     R6,data_p
01C8 7002              JNZ     ?C0152
01CA 0500        R     INC     data_p
01CC         ?C0152:
01CC 14                DEC     A
01CD F582              MOV     DPL,A
01CF 8E83              MOV     DPH,R6
01D1 E0                MOVX    A,@DPTR
01D2 FF                MOV     R7,A
01D3 0500        R     INC     reg_i+01H
01D5 E500        R     MOV     A,reg_i+01H
01D7 AA00        R     MOV     R2,reg_i
01D9 7002              JNZ     ?C0153
01DB 0500        R     INC     reg_i
01DD         ?C0153:
01DD 14                DEC     A
01DE 2500        E     ADD     A,regTW88+01H
01E0 F582              MOV     DPL,A
01E2 E500        E     MOV     A,regTW88
01E4 3A                ADDC    A,R2
01E5 F583              MOV     DPH,A
01E7 EF                MOV     A,R7
01E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 350
01E9 0500        R     INC     data_p+01H
01EB E500        R     MOV     A,data_p+01H
01ED AE00        R     MOV     R6,data_p
01EF 7002              JNZ     ?C0154
01F1 0500        R     INC     data_p
01F3         ?C0154:
01F3 14                DEC     A
01F4 F582              MOV     DPL,A
01F6 8E83              MOV     DPH,R6
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 42  

01F8 E0                MOVX    A,@DPTR
01F9 FF                MOV     R7,A
01FA 0500        R     INC     reg_i+01H
01FC E500        R     MOV     A,reg_i+01H
01FE AA00        R     MOV     R2,reg_i
0200 7002              JNZ     ?C0155
0202 0500        R     INC     reg_i
0204         ?C0155:
0204 14                DEC     A
0205 2500        E     ADD     A,regTW88+01H
0207 F582              MOV     DPL,A
0209 E500        E     MOV     A,regTW88
020B 3A                ADDC    A,R2
020C F583              MOV     DPH,A
020E EF                MOV     A,R7
020F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 351
0210 0500        R     INC     data_p+01H
0212 E500        R     MOV     A,data_p+01H
0214 AE00        R     MOV     R6,data_p
0216 7002              JNZ     ?C0156
0218 0500        R     INC     data_p
021A         ?C0156:
021A 14                DEC     A
021B F582              MOV     DPL,A
021D 8E83              MOV     DPH,R6
021F E0                MOVX    A,@DPTR
0220 FF                MOV     R7,A
0221 0500        R     INC     reg_i+01H
0223 E500        R     MOV     A,reg_i+01H
0225 AA00        R     MOV     R2,reg_i
0227 7002              JNZ     ?C0157
0229 0500        R     INC     reg_i
022B         ?C0157:
022B 14                DEC     A
022C 2500        E     ADD     A,regTW88+01H
022E F582              MOV     DPL,A
0230 E500        E     MOV     A,regTW88
0232 3A                ADDC    A,R2
0233 F583              MOV     DPH,A
0235 EF                MOV     A,R7
0236 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
0237 0500        R     INC     data_p+01H
0239 E500        R     MOV     A,data_p+01H
023B AE00        R     MOV     R6,data_p
023D 7002              JNZ     ?C0158
023F 0500        R     INC     data_p
0241         ?C0158:
0241 14                DEC     A
0242 F582              MOV     DPL,A
0244 8E83              MOV     DPH,R6
0246 E0                MOVX    A,@DPTR
0247 FF                MOV     R7,A
0248 0500        R     INC     reg_i+01H
024A E500        R     MOV     A,reg_i+01H
024C AA00        R     MOV     R2,reg_i
024E 7002              JNZ     ?C0159
0250 0500        R     INC     reg_i
0252         ?C0159:
0252 14                DEC     A
0253 2500        E     ADD     A,regTW88+01H
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 43  

0255 F582              MOV     DPL,A
0257 E500        E     MOV     A,regTW88
0259 3A                ADDC    A,R2
025A F583              MOV     DPH,A
025C EF                MOV     A,R7
025D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 353
025E 0500        R     INC     data_p+01H
0260 E500        R     MOV     A,data_p+01H
0262 AE00        R     MOV     R6,data_p
0264 7002              JNZ     ?C0160
0266 0500        R     INC     data_p
0268         ?C0160:
0268 14                DEC     A
0269 F582              MOV     DPL,A
026B 8E83              MOV     DPH,R6
026D E0                MOVX    A,@DPTR
026E FF                MOV     R7,A
026F 0500        R     INC     reg_i+01H
0271 E500        R     MOV     A,reg_i+01H
0273 AA00        R     MOV     R2,reg_i
0275 7002              JNZ     ?C0161
0277 0500        R     INC     reg_i
0279         ?C0161:
0279 14                DEC     A
027A 2500        E     ADD     A,regTW88+01H
027C F582              MOV     DPL,A
027E E500        E     MOV     A,regTW88
0280 3A                ADDC    A,R2
0281 F583              MOV     DPH,A
0283 EF                MOV     A,R7
0284 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
0285 E500        R     MOV     A,i
0287 600B              JZ      ?C0025
                                           ; SOURCE LINE # 355
0289 0500        R     INC     data_p+01H
028B E500        R     MOV     A,data_p+01H
028D 7002              JNZ     ?C0162
028F 0500        R     INC     data_p
0291         ?C0162:
                                           ; SOURCE LINE # 356
0291 020000      R     LJMP    ?C0024
0294         ?C0025:
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
0294 0500        R     INC     data_p+01H
0296 E500        R     MOV     A,data_p+01H
0298 AE00        R     MOV     R6,data_p
029A 7002              JNZ     ?C0163
029C 0500        R     INC     data_p
029E         ?C0163:
029E 14                DEC     A
029F F582              MOV     DPL,A
02A1 8E83              MOV     DPH,R6
02A3 E0                MOVX    A,@DPTR
02A4 FF                MOV     R7,A
02A5 0500        R     INC     reg_i+01H
02A7 E500        R     MOV     A,reg_i+01H
02A9 AA00        R     MOV     R2,reg_i
02AB 7002              JNZ     ?C0164
02AD 0500        R     INC     reg_i
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 44  

02AF         ?C0164:
02AF 14                DEC     A
02B0 2500        E     ADD     A,regTW88+01H
02B2 F582              MOV     DPL,A
02B4 E500        E     MOV     A,regTW88
02B6 3A                ADDC    A,R2
02B7 F583              MOV     DPH,A
02B9 EF                MOV     A,R7
02BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
02BB 0500        R     INC     i
                                           ; SOURCE LINE # 360
02BD 0500        R     INC     data_p+01H
02BF E500        R     MOV     A,data_p+01H
02C1 AE00        R     MOV     R6,data_p
02C3 7002              JNZ     ?C0165
02C5 0500        R     INC     data_p
02C7         ?C0165:
02C7 14                DEC     A
02C8 F582              MOV     DPL,A
02CA 8E83              MOV     DPH,R6
02CC E0                MOVX    A,@DPTR
02CD FF                MOV     R7,A
02CE 0500        R     INC     reg_i+01H
02D0 E500        R     MOV     A,reg_i+01H
02D2 AA00        R     MOV     R2,reg_i
02D4 7002              JNZ     ?C0166
02D6 0500        R     INC     reg_i
02D8         ?C0166:
02D8 14                DEC     A
02D9 2500        E     ADD     A,regTW88+01H
02DB F582              MOV     DPL,A
02DD E500        E     MOV     A,regTW88
02DF 3A                ADDC    A,R2
02E0 F583              MOV     DPH,A
02E2 EF                MOV     A,R7
02E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 361
02E4 0500        R     INC     data_p+01H
02E6 E500        R     MOV     A,data_p+01H
02E8 AE00        R     MOV     R6,data_p
02EA 7002              JNZ     ?C0167
02EC 0500        R     INC     data_p
02EE         ?C0167:
02EE 14                DEC     A
02EF F582              MOV     DPL,A
02F1 8E83              MOV     DPH,R6
02F3 E0                MOVX    A,@DPTR
02F4 FF                MOV     R7,A
02F5 0500        R     INC     reg_i+01H
02F7 E500        R     MOV     A,reg_i+01H
02F9 AA00        R     MOV     R2,reg_i
02FB 7002              JNZ     ?C0168
02FD 0500        R     INC     reg_i
02FF         ?C0168:
02FF 14                DEC     A
0300 2500        E     ADD     A,regTW88+01H
0302 F582              MOV     DPL,A
0304 E500        E     MOV     A,regTW88
0306 3A                ADDC    A,R2
0307 F583              MOV     DPH,A
0309 EF                MOV     A,R7
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 45  

030A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 362
030B 0500        R     INC     data_p+01H
030D E500        R     MOV     A,data_p+01H
030F AE00        R     MOV     R6,data_p
0311 7002              JNZ     ?C0169
0313 0500        R     INC     data_p
0315         ?C0169:
0315 14                DEC     A
0316 F582              MOV     DPL,A
0318 8E83              MOV     DPH,R6
031A E0                MOVX    A,@DPTR
031B FF                MOV     R7,A
031C 0500        R     INC     reg_i+01H
031E E500        R     MOV     A,reg_i+01H
0320 AA00        R     MOV     R2,reg_i
0322 7002              JNZ     ?C0170
0324 0500        R     INC     reg_i
0326         ?C0170:
0326 14                DEC     A
0327 2500        E     ADD     A,regTW88+01H
0329 F582              MOV     DPL,A
032B E500        E     MOV     A,regTW88
032D 3A                ADDC    A,R2
032E F583              MOV     DPH,A
0330 EF                MOV     A,R7
0331 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
0332 0500        R     INC     data_p+01H
0334 E500        R     MOV     A,data_p+01H
0336 AE00        R     MOV     R6,data_p
0338 7002              JNZ     ?C0171
033A 0500        R     INC     data_p
033C         ?C0171:
033C 14                DEC     A
033D F582              MOV     DPL,A
033F 8E83              MOV     DPH,R6
0341 E0                MOVX    A,@DPTR
0342 FF                MOV     R7,A
0343 0500        R     INC     reg_i+01H
0345 E500        R     MOV     A,reg_i+01H
0347 AA00        R     MOV     R2,reg_i
0349 7002              JNZ     ?C0172
034B 0500        R     INC     reg_i
034D         ?C0172:
034D 14                DEC     A
034E 2500        E     ADD     A,regTW88+01H
0350 F582              MOV     DPL,A
0352 E500        E     MOV     A,regTW88
0354 3A                ADDC    A,R2
0355 F583              MOV     DPH,A
0357 EF                MOV     A,R7
0358 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
0359 0500        R     INC     data_p+01H
035B E500        R     MOV     A,data_p+01H
035D AE00        R     MOV     R6,data_p
035F 7002              JNZ     ?C0173
0361 0500        R     INC     data_p
0363         ?C0173:
0363 14                DEC     A
0364 F582              MOV     DPL,A
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 46  

0366 8E83              MOV     DPH,R6
0368 E0                MOVX    A,@DPTR
0369 FF                MOV     R7,A
036A 0500        R     INC     reg_i+01H
036C E500        R     MOV     A,reg_i+01H
036E AA00        R     MOV     R2,reg_i
0370 7002              JNZ     ?C0174
0372 0500        R     INC     reg_i
0374         ?C0174:
0374 14                DEC     A
0375 2500        E     ADD     A,regTW88+01H
0377 F582              MOV     DPL,A
0379 E500        E     MOV     A,regTW88
037B 3A                ADDC    A,R2
037C F583              MOV     DPH,A
037E EF                MOV     A,R7
037F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
0380 0500        R     INC     data_p+01H
0382 E500        R     MOV     A,data_p+01H
0384 AE00        R     MOV     R6,data_p
0386 7002              JNZ     ?C0175
0388 0500        R     INC     data_p
038A         ?C0175:
038A 14                DEC     A
038B F582              MOV     DPL,A
038D 8E83              MOV     DPH,R6
038F E0                MOVX    A,@DPTR
0390 FF                MOV     R7,A
0391 0500        R     INC     reg_i+01H
0393 E500        R     MOV     A,reg_i+01H
0395 AA00        R     MOV     R2,reg_i
0397 7002              JNZ     ?C0176
0399 0500        R     INC     reg_i
039B         ?C0176:
039B 14                DEC     A
039C 2500        E     ADD     A,regTW88+01H
039E F582              MOV     DPL,A
03A0 E500        E     MOV     A,regTW88
03A2 3A                ADDC    A,R2
03A3 F583              MOV     DPH,A
03A5 EF                MOV     A,R7
03A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 366
03A7 0500        R     INC     data_p+01H
03A9 E500        R     MOV     A,data_p+01H
03AB AE00        R     MOV     R6,data_p
03AD 7002              JNZ     ?C0177
03AF 0500        R     INC     data_p
03B1         ?C0177:
03B1 14                DEC     A
03B2 F582              MOV     DPL,A
03B4 8E83              MOV     DPH,R6
03B6 E0                MOVX    A,@DPTR
03B7 FF                MOV     R7,A
03B8 0500        R     INC     reg_i+01H
03BA E500        R     MOV     A,reg_i+01H
03BC AA00        R     MOV     R2,reg_i
03BE 7002              JNZ     ?C0178
03C0 0500        R     INC     reg_i
03C2         ?C0178:
03C2 14                DEC     A
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 47  

03C3 2500        E     ADD     A,regTW88+01H
03C5 F582              MOV     DPL,A
03C7 E500        E     MOV     A,regTW88
03C9 3A                ADDC    A,R2
03CA F583              MOV     DPH,A
03CC EF                MOV     A,R7
03CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
03CE 7409              MOV     A,#09H
03D0 2500        R     ADD     A,reg_i+01H
03D2 F500        R     MOV     reg_i+01H,A
03D4 E4                CLR     A
03D5 3500        R     ADDC    A,reg_i
03D7 F500        R     MOV     reg_i,A
                                           ; SOURCE LINE # 368
03D9 7409              MOV     A,#09H
03DB 2500        R     ADD     A,data_p+01H
03DD F500        R     MOV     data_p+01H,A
03DF E4                CLR     A
03E0 3500        R     ADDC    A,data_p
03E2 F500        R     MOV     data_p,A
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 370
03E4         ?C0024:
03E4 0500        R     INC     i
03E6 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 371
03E9         ?C0027:
03E9 22                RET     
             ; FUNCTION _SOsdWinBuffWrite2Hw (END)

             ; FUNCTION _SpiOsdWinHWOffAll (BEGIN)
                                           ; SOURCE LINE # 418
;---- Variable 'wait' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 419
                                           ; SOURCE LINE # 421
0000 EF                MOV     A,R7
0001 6003              JZ      ?C0028
                                           ; SOURCE LINE # 422
0003 120000      E     LCALL   _WaitVBlank
0006         ?C0028:
                                           ; SOURCE LINE # 424
0006 7F01              MOV     R7,#01H
0008 120000      R     LCALL   _SpiOsdDisableRLC
                                           ; SOURCE LINE # 425
;---- Variable 'i' assigned to Register 'R3' ----
000B E4                CLR     A
000C FB                MOV     R3,A
000D         ?C0029:
                                           ; SOURCE LINE # 426
000D AF03              MOV     R7,AR3
000F E4                CLR     A
0010 FD                MOV     R5,A
0011 120000      R     LCALL   _SpiOsdWinHWEnable
0014 0B                INC     R3
0015 EB                MOV     A,R3
0016 B409F4            CJNE    A,#09H,?C0029
                                           ; SOURCE LINE # 427
0019         ?C0032:
0019 22                RET     
             ; FUNCTION _SpiOsdWinHWOffAll (END)

C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 48  

             ; FUNCTION _SpiOsdWinImageLoc (BEGIN)
                                           ; SOURCE LINE # 437
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 441
0000 EF                MOV     A,R7
0001 6001              JZ      ?C0033
0003 0F                INC     R7
0004         ?C0033:
                                           ; SOURCE LINE # 442
0004 120000      R     LCALL   L?0222
0007 F500        R     MOV     data_p,A
0009 8F00        R     MOV     data_p+01H,R7
                                           ; SOURCE LINE # 444
000B 7407              MOV     A,#07H
000D 2500        R     ADD     A,data_p+01H
000F F500        R     MOV     data_p+01H,A
0011 E4                CLR     A
0012 3500        R     ADDC    A,data_p
0014 F500        R     MOV     data_p,A
                                           ; SOURCE LINE # 446
0016 900000      R     MOV     DPTR,#start
0019 120000      R     LCALL   L?0226
001C 7810              MOV     R0,#010H
001E 120000      R     LCALL   L?0253
0021 7002              JNZ     ?C0179
0023 0500        R     INC     data_p
0025         ?C0179:
0025 120000      R     LCALL   L?0227
                                           ; SOURCE LINE # 447
0028 900000      R     MOV     DPTR,#start
002B 120000      R     LCALL   L?0226
002E 7808              MOV     R0,#08H
0030 120000      R     LCALL   L?0253
0033 7002              JNZ     ?C0180
0035 0500        R     INC     data_p
0037         ?C0180:
0037 120000      R     LCALL   L?0227
                                           ; SOURCE LINE # 448
003A 900000      R     MOV     DPTR,#start
003D A3                INC     DPTR
003E A3                INC     DPTR
003F A3                INC     DPTR
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 120000      R     LCALL   L?0254
0045 7002              JNZ     ?C0181
0047 0500        R     INC     data_p
0049         ?C0181:
0049 120000      R     LCALL   L?0228
                                           ; SOURCE LINE # 449
004C 22                RET     
             ; FUNCTION _SpiOsdWinImageLoc (END)

             ; FUNCTION _SpiOsdWinImageLocBit (BEGIN)
                                           ; SOURCE LINE # 456
;---- Variable 'winno' assigned to Register 'R7' ----
;---- Variable 'start' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 460
0000 EF                MOV     A,R7
0001 6001              JZ      ?C0035
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 49  

0003 0F                INC     R7
0004         ?C0035:
                                           ; SOURCE LINE # 461
0004 120000      R     LCALL   L?0223
0007 F500        R     MOV     data_p,A
0009 8F00        R     MOV     data_p+01H,R7
                                           ; SOURCE LINE # 463
000B 740A              MOV     A,#0AH
000D 2500        R     ADD     A,data_p+01H
000F F500        R     MOV     data_p+01H,A
0011 E4                CLR     A
0012 3500        R     ADDC    A,data_p
0014 F500        R     MOV     data_p,A
                                           ; SOURCE LINE # 464
0016 850082      R     MOV     DPL,data_p+01H
0019 F583              MOV     DPH,A
001B E0                MOVX    A,@DPTR
001C 543F              ANL     A,#03FH
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 AE05              MOV     R6,AR5
0023 EE                MOV     A,R6
0024 120000      R     LCALL   L?0262
                                           ; SOURCE LINE # 466
0027 22                RET     
             ; FUNCTION _SpiOsdWinImageLocBit (END)

             ; FUNCTION _SpiOsdWinImageSizeW (BEGIN)
                                           ; SOURCE LINE # 473
;---- Variable 'w' assigned to Register 'R4/R5' ----
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 478
0000 EF                MOV     A,R7
0001 2401              ADD     A,#01H
0003 FF                MOV     R7,A
0004 E4                CLR     A
0005 33                RLC     A
0006 FE                MOV     R6,A
0007 EF                MOV     A,R7
0008 C4                SWAP    A
0009 F8                MOV     R0,A
000A 540F              ANL     A,#0FH
000C C8                XCH     A,R0
000D 68                XRL     A,R0
000E FF                MOV     R7,A
000F EE                MOV     A,R6
0010 C4                SWAP    A
0011 54F0              ANL     A,#0F0H
0013 48                ORL     A,R0
0014 FE                MOV     R6,A
0015 7400        R     MOV     A,#LOW SpiWinBuff
0017 2F                ADD     A,R7
0018 F582              MOV     DPL,A
001A 7400        R     MOV     A,#HIGH SpiWinBuff
001C 3E                ADDC    A,R6
001D AF82              MOV     R7,DPL
001F F500        R     MOV     data_p,A
0021 8F00        R     MOV     data_p+01H,R7
                                           ; SOURCE LINE # 479
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 50  

0023 740A              MOV     A,#0AH
0025 2500        R     ADD     A,data_p+01H
0027 F500        R     MOV     data_p+01H,A
0029 E4                CLR     A
002A 3500        R     ADDC    A,data_p
002C F500        R     MOV     data_p,A
                                           ; SOURCE LINE # 481
002E 850082      R     MOV     DPL,data_p+01H
0031 F583              MOV     DPH,A
0033 E0                MOVX    A,@DPTR
0034 54C0              ANL     A,#0C0H
;---- Variable 'value' assigned to Register 'R3' ----
0036 FB                MOV     R3,A
                                           ; SOURCE LINE # 483
0037 EC                MOV     A,R4
0038 4B                ORL     A,R3
0039 FF                MOV     R7,A
003A 0500        R     INC     data_p+01H
003C E500        R     MOV     A,data_p+01H
003E AA00        R     MOV     R2,data_p
0040 7002              JNZ     ?C0182
0042 0500        R     INC     data_p
0044         ?C0182:
0044 120000      R     LCALL   L?0246
                                           ; SOURCE LINE # 484
0047 AF05              MOV     R7,AR5
0049 0500        R     INC     data_p+01H
004B E500        R     MOV     A,data_p+01H
004D AC00        R     MOV     R4,data_p
004F 7002              JNZ     ?C0183
0051 0500        R     INC     data_p
0053         ?C0183:
0053 120000      R     LCALL   L?0228
                                           ; SOURCE LINE # 485
0056 22                RET     
             ; FUNCTION _SpiOsdWinImageSizeW (END)

             ; FUNCTION _SpiOsdWinImageSizeWH (BEGIN)
                                           ; SOURCE LINE # 491
0000 900000      R     MOV     DPTR,#w
0003 120000      R     LCALL   L?0248
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 497
0006 EF                MOV     A,R7
0007 600B              JZ      ?C0038
                                           ; SOURCE LINE # 498
0009 900000      R     MOV     DPTR,#w
000C E0                MOVX    A,@DPTR
000D FC                MOV     R4,A
000E A3                INC     DPTR
000F E0                MOVX    A,@DPTR
0010 FD                MOV     R5,A
0011 020000      R     LJMP    _SpiOsdWinImageSizeW
                                           ; SOURCE LINE # 500
0014         ?C0038:
                                           ; SOURCE LINE # 503
0014 750000      R     MOV     data_p,#HIGH SpiWinBuff
0017 750000      R     MOV     data_p+01H,#LOW SpiWinBuff
                                           ; SOURCE LINE # 504
001A 740A              MOV     A,#0AH
001C 2500        R     ADD     A,data_p+01H
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 51  

001E F500        R     MOV     data_p+01H,A
0020 E4                CLR     A
0021 3500        R     ADDC    A,data_p
0023 F500        R     MOV     data_p,A
                                           ; SOURCE LINE # 506
0025 900000      R     MOV     DPTR,#h
0028 120000      R     LCALL   L?0260
;---- Variable 'value' assigned to Register 'R3' ----
                                           ; SOURCE LINE # 507
002B C4                SWAP    A
002C 54F0              ANL     A,#0F0H
002E FB                MOV     R3,A
                                           ; SOURCE LINE # 508
002F 900000      R     MOV     DPTR,#w
0032 E0                MOVX    A,@DPTR
0033 4B                ORL     A,R3
                                           ; SOURCE LINE # 509
0034 FF                MOV     R7,A
0035 0500        R     INC     data_p+01H
0037 E500        R     MOV     A,data_p+01H
0039 AA00        R     MOV     R2,data_p
003B 7002              JNZ     ?C0184
003D 0500        R     INC     data_p
003F         ?C0184:
003F 120000      R     LCALL   L?0246
                                           ; SOURCE LINE # 510
0042 900000      R     MOV     DPTR,#w
0045 A3                INC     DPTR
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 0500        R     INC     data_p+01H
004A E500        R     MOV     A,data_p+01H
004C AA00        R     MOV     R2,data_p
004E 7002              JNZ     ?C0185
0050 0500        R     INC     data_p
0052         ?C0185:
0052 120000      R     LCALL   L?0247
                                           ; SOURCE LINE # 511
0055 AF05              MOV     R7,AR5
0057 0500        R     INC     data_p+01H
0059 E500        R     MOV     A,data_p+01H
005B AC00        R     MOV     R4,data_p
005D 7002              JNZ     ?C0186
005F 0500        R     INC     data_p
0061         ?C0186:
0061 120000      R     LCALL   L?0228
                                           ; SOURCE LINE # 512
0064         ?C0039:
0064 22                RET     
             ; FUNCTION _SpiOsdWinImageSizeWH (END)

             ; FUNCTION _SpiOsdWinScreen (BEGIN)
                                           ; SOURCE LINE # 519
0000 900000      R     MOV     DPTR,#x
0003 120000      R     LCALL   L?0248
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 520
                                           ; SOURCE LINE # 524
0006 EF                MOV     A,R7
0007 6001              JZ      ?C0040
0009 0F                INC     R7
000A         ?C0040:
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 52  

                                           ; SOURCE LINE # 525
000A 120000      R     LCALL   L?0223
000D F500        R     MOV     data_p,A
000F 8F00        R     MOV     data_p+01H,R7
                                           ; SOURCE LINE # 527
0011 0500        R     INC     data_p+01H
0013 E500        R     MOV     A,data_p+01H
0015 7002              JNZ     ?C0187
0017 0500        R     INC     data_p
0019         ?C0187:
                                           ; SOURCE LINE # 528
0019 900000      R     MOV     DPTR,#y
001C E0                MOVX    A,@DPTR
;---- Variable 'value' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 529
001D C4                SWAP    A
001E 54F0              ANL     A,#0F0H
0020 FD                MOV     R5,A
                                           ; SOURCE LINE # 530
0021 900000      R     MOV     DPTR,#x
0024 E0                MOVX    A,@DPTR
0025 4D                ORL     A,R5
0026 FD                MOV     R5,A
                                           ; SOURCE LINE # 531
0027 0500        R     INC     data_p+01H
0029 E500        R     MOV     A,data_p+01H
002B AE00        R     MOV     R6,data_p
002D 7002              JNZ     ?C0188
002F 0500        R     INC     data_p
0031         ?C0188:
0031 14                DEC     A
0032 F582              MOV     DPL,A
0034 8E83              MOV     DPH,R6
0036 ED                MOV     A,R5
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 532
0038 900000      R     MOV     DPTR,#x
003B 120000      R     LCALL   L?0236
003E 7002              JNZ     ?C0189
0040 0500        R     INC     data_p
0042         ?C0189:
0042 120000      R     LCALL   L?0228
                                           ; SOURCE LINE # 533
0045 900000      R     MOV     DPTR,#y
0048 120000      R     LCALL   L?0236
004B 7002              JNZ     ?C0190
004D 0500        R     INC     data_p
004F         ?C0190:
004F 120000      R     LCALL   L?0228
                                           ; SOURCE LINE # 535
0052 900000      R     MOV     DPTR,#h
0055 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 536
0056 C4                SWAP    A
0057 54F0              ANL     A,#0F0H
0059 FD                MOV     R5,A
                                           ; SOURCE LINE # 537
005A 900000      R     MOV     DPTR,#w
005D E0                MOVX    A,@DPTR
005E 4D                ORL     A,R5
                                           ; SOURCE LINE # 538
005F 120000      R     LCALL   L?0238
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 53  

0062 7002              JNZ     ?C0191
0064 0500        R     INC     data_p
0066         ?C0191:
0066 120000      R     LCALL   L?0228
                                           ; SOURCE LINE # 539
0069 900000      R     MOV     DPTR,#w
006C 120000      R     LCALL   L?0237
006F 7002              JNZ     ?C0192
0071 0500        R     INC     data_p
0073         ?C0192:
0073 120000      R     LCALL   L?0228
                                           ; SOURCE LINE # 540
0076 900000      R     MOV     DPTR,#h
0079 120000      R     LCALL   L?0237
007C 7002              JNZ     ?C0193
007E 0500        R     INC     data_p
0080         ?C0193:
0080 120000      R     LCALL   L?0228
                                           ; SOURCE LINE # 541
0083 22                RET     
             ; FUNCTION _SpiOsdWinScreen (END)

             ; FUNCTION _SpiOsdWinLutOffset (BEGIN)
                                           ; SOURCE LINE # 551
;---- Variable 'winno' assigned to Register 'R3' ----
0000 AB07              MOV     R3,AR7
;---- Variable 'table_offset' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 555
0002 EB                MOV     A,R3
0003 6001              JZ      ?C0042
0005 0B                INC     R3
0006         ?C0042:
                                           ; SOURCE LINE # 556
0006 EB                MOV     A,R3
0007 120000      R     LCALL   L?0224
000A F500        R     MOV     data_p,A
000C 8F00        R     MOV     data_p+01H,R7
                                           ; SOURCE LINE # 557
000E 740D              MOV     A,#0DH
0010 120000      R     LCALL   L?0263
                                           ; SOURCE LINE # 558
0013 EB                MOV     A,R3
0014 7005              JNZ     ?C0043
0016 7404              MOV     A,#04H
0018 120000      R     LCALL   L?0263
001B         ?C0043:
                                           ; SOURCE LINE # 561
001B EC                MOV     A,R4
001C C4                SWAP    A
001D F8                MOV     R0,A
001E 54F0              ANL     A,#0F0H
0020 C8                XCH     A,R0
0021 ED                MOV     A,R5
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 48                ORL     A,R0
0026 850082      R     MOV     DPL,data_p+01H
0029 850083      R     MOV     DPH,data_p
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 562
002D 22                RET     
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 54  

             ; FUNCTION _SpiOsdWinLutOffset (END)

             ; FUNCTION _SpiOsdWinPixelWidth (BEGIN)
                                           ; SOURCE LINE # 576
;---- Variable 'mode' assigned to Register 'R4' ----
;---- Variable 'winno' assigned to Register 'R7' ----
;---- Variable 'bpp' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 581
0000 ED                MOV     A,R5
0001 B40404            CJNE    A,#04H,?C0045
0004 E4                CLR     A
0005 FC                MOV     R4,A
0006 800A              SJMP    ?C0046
0008         ?C0045:
                                           ; SOURCE LINE # 582
0008 ED                MOV     A,R5
0009 B40604            CJNE    A,#06H,?C0047
000C 7C01              MOV     R4,#01H
000E 8002              SJMP    ?C0046
0010         ?C0047:
                                           ; SOURCE LINE # 583
0010 7C02              MOV     R4,#02H
0012         ?C0046:
                                           ; SOURCE LINE # 585
0012 EF                MOV     A,R7
0013 6001              JZ      ?C0049
0015 0F                INC     R7
0016         ?C0049:
                                           ; SOURCE LINE # 586
0016 120000      R     LCALL   L?0223
0019 F500        R     MOV     data_p,A
001B 8F00        R     MOV     data_p+01H,R7
                                           ; SOURCE LINE # 588
001D F583              MOV     DPH,A
001F E0                MOVX    A,@DPTR
0020 543F              ANL     A,#03FH
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 589
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 EC                MOV     A,R4
0026 120000      R     LCALL   L?0262
                                           ; SOURCE LINE # 590
0029 22                RET     
             ; FUNCTION _SpiOsdWinPixelWidth (END)

             ; FUNCTION _SpiOsdWinFillColor (BEGIN)
                                           ; SOURCE LINE # 599
;---- Variable 'winno' assigned to Register 'R1' ----
0000 A907              MOV     R1,AR7
0002 900000      R     MOV     DPTR,#color
0005 ED                MOV     A,R5
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 600
                                           ; SOURCE LINE # 607
0007 120000      R     LCALL   L?0244
000A E4                CLR     A
000B 93                MOVC    A,@A+DPTR
000C FE                MOV     R6,A
000D 7401              MOV     A,#01H
000F 93                MOVC    A,@A+DPTR
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 55  

0010 FF                MOV     R7,A
;---- Variable 'index' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 610
0011 ED                MOV     A,R5
0012 6009              JZ      ?C0051
                                           ; SOURCE LINE # 611
0014 120000      R     LCALL   L?0241
0017 E0                MOVX    A,@DPTR
0018 4404              ORL     A,#04H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 612
001B 8007              SJMP    ?C0052
001D         ?C0051:
                                           ; SOURCE LINE # 613
                                           ; SOURCE LINE # 614
001D 120000      R     LCALL   L?0241
0020 E0                MOVX    A,@DPTR
0021 54FB              ANL     A,#0FBH
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 615
0024         ?C0052:
                                           ; SOURCE LINE # 616
0024 120000      R     LCALL   L?0244
0027 7401              MOV     A,#01H
0029 93                MOVC    A,@A+DPTR
002A 240E              ADD     A,#0EH
002C FF                MOV     R7,A
002D E4                CLR     A
002E 93                MOVC    A,@A+DPTR
002F 3400              ADDC    A,#00H
0031 FE                MOV     R6,A
                                           ; SOURCE LINE # 617
0032 E9                MOV     A,R1
0033 7007              JNZ     ?C0053
0035 7408              MOV     A,#08H
0037 2F                ADD     A,R7
0038 FF                MOV     R7,A
0039 E4                CLR     A
003A 3E                ADDC    A,R6
003B FE                MOV     R6,A
003C         ?C0053:
                                           ; SOURCE LINE # 618
003C 900000      R     MOV     DPTR,#color
003F E0                MOVX    A,@DPTR
0040 FD                MOV     R5,A
0041 120000      R     LCALL   L?0242
0044 ED                MOV     A,R5
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
0046 22                RET     
             ; FUNCTION _SpiOsdWinFillColor (END)

             ; FUNCTION _SpiOsdWinGlobalAlpha (BEGIN)
                                           ; SOURCE LINE # 628
;---- Variable 'winno' assigned to Register 'R4' ----
0000 AC07              MOV     R4,AR7
;---- Variable 'alpha' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 632
0002 EC                MOV     A,R4
0003 6001              JZ      ?C0055
0005 0C                INC     R4
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 56  

0006         ?C0055:
                                           ; SOURCE LINE # 633
0006 EC                MOV     A,R4
0007 120000      R     LCALL   L?0224
000A F500        R     MOV     data_p,A
000C 8F00        R     MOV     data_p+01H,R7
                                           ; SOURCE LINE # 635
000E F583              MOV     DPH,A
0010 E0                MOVX    A,@DPTR
0011 54CF              ANL     A,#0CFH
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 636
0014 ED                MOV     A,R5
0015 6004              JZ      ?C0056
0017 E0                MOVX    A,@DPTR
0018 4410              ORL     A,#010H
001A F0                MOVX    @DPTR,A
001B         ?C0056:
                                           ; SOURCE LINE # 638
001B 740C              MOV     A,#0CH
001D 120000      R     LCALL   L?0264
                                           ; SOURCE LINE # 639
0020 EC                MOV     A,R4
0021 7005              JNZ     ?C0057
0023 7404              MOV     A,#04H
0025 120000      R     LCALL   L?0264
0028         ?C0057:
                                           ; SOURCE LINE # 640
0028 850082      R     MOV     DPL,data_p+01H
002B 850083      R     MOV     DPH,data_p
002E ED                MOV     A,R5
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 641
0030 22                RET     
             ; FUNCTION _SpiOsdWinGlobalAlpha (END)

             ; FUNCTION _SpiOsdWinPixelAlpha (BEGIN)
                                           ; SOURCE LINE # 649
;---- Variable 'winno' assigned to Register 'R4' ----
0000 AC07              MOV     R4,AR7
;---- Variable 'alpha' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 653
0002 EC                MOV     A,R4
0003 6001              JZ      ?C0059
0005 0C                INC     R4
0006         ?C0059:
                                           ; SOURCE LINE # 654
0006 EC                MOV     A,R4
0007 120000      R     LCALL   L?0224
000A F500        R     MOV     data_p,A
000C 8F00        R     MOV     data_p+01H,R7
                                           ; SOURCE LINE # 656
000E ED                MOV     A,R5
000F 6009              JZ      ?C0060
0011 850083      R     MOV     DPH,data_p
0014 E0                MOVX    A,@DPTR
0015 4430              ORL     A,#030H
0017 F0                MOVX    @DPTR,A
0018 800A              SJMP    ?C0061
001A         ?C0060:
                                           ; SOURCE LINE # 657
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 57  

001A 850082      R     MOV     DPL,data_p+01H
001D 850083      R     MOV     DPH,data_p
0020 E0                MOVX    A,@DPTR
0021 54CF              ANL     A,#0CFH
0023 F0                MOVX    @DPTR,A
0024         ?C0061:
                                           ; SOURCE LINE # 659
0024 740C              MOV     A,#0CH
0026 120000      R     LCALL   L?0265
                                           ; SOURCE LINE # 660
0029 EC                MOV     A,R4
002A 7005              JNZ     ?C0062
002C 7404              MOV     A,#04H
002E 120000      R     LCALL   L?0265
0031         ?C0062:
                                           ; SOURCE LINE # 661
0031 850082      R     MOV     DPL,data_p+01H
0034 850083      R     MOV     DPH,data_p
0037 ED                MOV     A,R5
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 662
0039 22                RET     
             ; FUNCTION _SpiOsdWinPixelAlpha (END)

             ; FUNCTION _SpiOsdWin0SetPriority (BEGIN)
                                           ; SOURCE LINE # 671
;---- Variable 'high' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 682
0000 750000      R     MOV     data_p,#HIGH SpiWinBuff
0003 750000      R     MOV     data_p+01H,#LOW SpiWinBuff
                                           ; SOURCE LINE # 684
0006 EF                MOV     A,R7
0007 600B              JZ      ?C0064
0009 850082      R     MOV     DPL,data_p+01H
000C 850083      R     MOV     DPH,data_p
000F E0                MOVX    A,@DPTR
0010 4402              ORL     A,#02H
0012 F0                MOVX    @DPTR,A
0013 22                RET     
0014         ?C0064:
                                           ; SOURCE LINE # 685
0014 850082      R     MOV     DPL,data_p+01H
0017 850083      R     MOV     DPH,data_p
001A E0                MOVX    A,@DPTR
001B 54FD              ANL     A,#0FDH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 687
001E         ?C0066:
001E 22                RET     
             ; FUNCTION _SpiOsdWin0SetPriority (END)

             ; FUNCTION _SpiOsdWin0Animation (BEGIN)
                                           ; SOURCE LINE # 704
;---- Variable 'mode' assigned to Register 'R7' ----
;---- Variable 'FrameV' assigned to Register 'R3' ----
;---- Variable 'FrameH' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 705
                                           ; SOURCE LINE # 708
0000 750000      R     MOV     data_p,#HIGH SpiWinBuff
0003 750000      R     MOV     data_p+01H,#LOW SpiWinBuff
                                           ; SOURCE LINE # 709
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 58  

0006 7412              MOV     A,#012H
0008 2500        R     ADD     A,data_p+01H
000A F500        R     MOV     data_p+01H,A
000C E4                CLR     A
000D 3500        R     ADDC    A,data_p
000F F500        R     MOV     data_p,A
                                           ; SOURCE LINE # 711
0011 AE05              MOV     R6,AR5
0013 120000      R     LCALL   L?0266
0016 7002              JNZ     ?C0194
0018 0500        R     INC     data_p
001A         ?C0194:
001A 120000      R     LCALL   L?0258
                                           ; SOURCE LINE # 712
001D AE03              MOV     R6,AR3
001F 120000      R     LCALL   L?0266
0022 7002              JNZ     ?C0195
0024 0500        R     INC     data_p
0026         ?C0195:
0026 120000      R     LCALL   L?0258
                                           ; SOURCE LINE # 713
0029 900000      R     MOV     DPTR,#Duration
002C E0                MOVX    A,@DPTR
002D FE                MOV     R6,A
002E 120000      R     LCALL   L?0267
0031 7002              JNZ     ?C0196
0033 0500        R     INC     data_p
0035         ?C0196:
0035 120000      R     LCALL   L?0259
                                           ; SOURCE LINE # 715
0038 850082      R     MOV     DPL,data_p+01H
003B 850083      R     MOV     DPH,data_p
003E E0                MOVX    A,@DPTR
003F 543F              ANL     A,#03FH
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 716
0042 E0                MOVX    A,@DPTR
0043 FE                MOV     R6,A
0044 EF                MOV     A,R7
0045 C4                SWAP    A
0046 33                RLC     A
0047 33                RLC     A
0048 54C0              ANL     A,#0C0H
004A FF                MOV     R7,A
004B EE                MOV     A,R6
004C 4F                ORL     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 717
004E 22                RET     
             ; FUNCTION _SpiOsdWin0Animation (END)

             ; FUNCTION _SpiOsdWin0ImageOffsetXY (BEGIN)
                                           ; SOURCE LINE # 723
0000 900000      R     MOV     DPTR,#x
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
;---- Variable 'y' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 724
                                           ; SOURCE LINE # 728
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 59  

0008 750000      R     MOV     data_p,#HIGH SpiWinBuff
000B 750000      R     MOV     data_p+01H,#LOW SpiWinBuff
                                           ; SOURCE LINE # 729
000E 740D              MOV     A,#0DH
0010 2500        R     ADD     A,data_p+01H
0012 F500        R     MOV     data_p+01H,A
0014 E4                CLR     A
0015 3500        R     ADDC    A,data_p
0017 F500        R     MOV     data_p,A
                                           ; SOURCE LINE # 731
0019 EC                MOV     A,R4
;---- Variable 'value' assigned to Register 'R3' ----
                                           ; SOURCE LINE # 732
001A C4                SWAP    A
001B 54F0              ANL     A,#0F0H
001D FB                MOV     R3,A
                                           ; SOURCE LINE # 733
001E 900000      R     MOV     DPTR,#x
0021 E0                MOVX    A,@DPTR
0022 4B                ORL     A,R3
                                           ; SOURCE LINE # 734
0023 FF                MOV     R7,A
0024 0500        R     INC     data_p+01H
0026 E500        R     MOV     A,data_p+01H
0028 AA00        R     MOV     R2,data_p
002A 7002              JNZ     ?C0197
002C 0500        R     INC     data_p
002E         ?C0197:
002E 120000      R     LCALL   L?0247
                                           ; SOURCE LINE # 735
0031 900000      R     MOV     DPTR,#x
0034 A3                INC     DPTR
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 0500        R     INC     data_p+01H
0039 E500        R     MOV     A,data_p+01H
003B AA00        R     MOV     R2,data_p
003D 7002              JNZ     ?C0198
003F 0500        R     INC     data_p
0041         ?C0198:
0041 120000      R     LCALL   L?0247
                                           ; SOURCE LINE # 736
0044 AF05              MOV     R7,AR5
0046 0500        R     INC     data_p+01H
0048 E500        R     MOV     A,data_p+01H
004A AC00        R     MOV     R4,data_p
004C 7002              JNZ     ?C0199
004E 0500        R     INC     data_p
0050         ?C0199:
0050 120000      R     LCALL   L?0228
                                           ; SOURCE LINE # 737
0053 22                RET     
             ; FUNCTION _SpiOsdWin0ImageOffsetXY (END)

             ; FUNCTION _SpiOsdIoLoadLUT (BEGIN)
                                           ; SOURCE LINE # 764
0000 900000      R     MOV     DPTR,#LutOffset
0003 120000      R     LCALL   L?0249
;---- Variable 'type' assigned to Register 'R1' ----
0006 A907              MOV     R1,AR7
                                           ; SOURCE LINE # 765
                                           ; SOURCE LINE # 775
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 60  

0008 E9                MOV     A,R1
0009 900000      R     MOV     DPTR,#R410_data
000C 7005              JNZ     ?C0069
000E 74C0              MOV     A,#0C0H
0010 F0                MOVX    @DPTR,A
0011 8003              SJMP    ?C0070
0013         ?C0069:
                                           ; SOURCE LINE # 776
0013 74A0              MOV     A,#0A0H
0015 F0                MOVX    @DPTR,A
0016         ?C0070:
                                           ; SOURCE LINE # 777
0016 900000      R     MOV     DPTR,#LutOffset
0019 E0                MOVX    A,@DPTR
001A 6007              JZ      ?C0071
                                           ; SOURCE LINE # 778
001C 900000      R     MOV     DPTR,#R410_data
001F E0                MOVX    A,@DPTR
0020 4404              ORL     A,#04H
0022 F0                MOVX    @DPTR,A
0023         ?C0071:
                                           ; SOURCE LINE # 780
0023 E9                MOV     A,R1
0024 6003              JZ      $ + 5H
0026 020000      R     LJMP    ?C0072
                                           ; SOURCE LINE # 784
0029 900000      R     MOV     DPTR,#i
002C F0                MOVX    @DPTR,A
002D         ?C0073:
002D 900000      R     MOV     DPTR,#i
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 C3                CLR     C
0033 9404              SUBB    A,#04H
0035 4003              JC      $ + 5H
0037 020000      R     LJMP    ?C0089
                                           ; SOURCE LINE # 785
003A 900000      R     MOV     DPTR,#R410_data
003D E0                MOVX    A,@DPTR
003E 4F                ORL     A,R7
                                           ; SOURCE LINE # 786
003F 120000      R     LCALL   L?0218
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 787
0044 E4                CLR     A
0045 900000      R     MOV     DPTR,#j
0048 F0                MOVX    @DPTR,A
0049         ?C0076:
                                           ; SOURCE LINE # 788
0049 900000      R     MOV     DPTR,#i
004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
004E 120000      R     LCALL   L?0252
0051 2400              ADD     A,#00H
0053 FF                MOV     R7,A
0054 EA                MOV     A,R2
0055 3E                ADDC    A,R6
0056 FE                MOV     R6,A
0057 ED                MOV     A,R5
0058 39                ADDC    A,R1
0059 FD                MOV     R5,A
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 61  

005A EC                MOV     A,R4
005B 38                ADDC    A,R0
005C FC                MOV     R4,A
005D A804              MOV     R0,AR4
005F A905              MOV     R1,AR5
0061 AA06              MOV     R2,AR6
0063 AB07              MOV     R3,AR7
0065 900000      R     MOV     DPTR,#j
0068 E0                MOVX    A,@DPTR
0069 75F040            MOV     B,#040H
006C A4                MUL     AB
006D FF                MOV     R7,A
006E E4                CLR     A
006F FC                MOV     R4,A
0070 FD                MOV     R5,A
0071 EB                MOV     A,R3
                                           ; SOURCE LINE # 789
0072 120000      R     LCALL   L?0231
0075         ?C0079:
0075 900000      R     MOV     DPTR,#k
0078 E0                MOVX    A,@DPTR
0079 FF                MOV     R7,A
007A C3                CLR     C
007B 9440              SUBB    A,#040H
007D 5012              JNC     ?C0078
                                           ; SOURCE LINE # 790
007F 120000      R     LCALL   L?0250
0082 2412              ADD     A,#012H
0084 120000      R     LCALL   L?0221
0087 EF                MOV     A,R7
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 791
0089 900000      R     MOV     DPTR,#k
008C E0                MOVX    A,@DPTR
008D 04                INC     A
008E F0                MOVX    @DPTR,A
008F 80E4              SJMP    ?C0079
                                           ; SOURCE LINE # 792
0091         ?C0078:
0091 900000      R     MOV     DPTR,#j
0094 E0                MOVX    A,@DPTR
0095 04                INC     A
0096 F0                MOVX    @DPTR,A
0097 E0                MOVX    A,@DPTR
0098 C3                CLR     C
0099 9404              SUBB    A,#04H
009B 40AC              JC      ?C0076
                                           ; SOURCE LINE # 793
009D         ?C0075:
009D 900000      R     MOV     DPTR,#i
00A0 E0                MOVX    A,@DPTR
00A1 04                INC     A
00A2 F0                MOVX    @DPTR,A
00A3 020000      R     LJMP    ?C0073
                                           ; SOURCE LINE # 794
00A6         ?C0072:
                                           ; SOURCE LINE # 795
                                           ; SOURCE LINE # 796
00A6 900000      R     MOV     DPTR,#R410_data
00A9 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 797
00AA 120000      R     LCALL   L?0218
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 62  

00AD EF                MOV     A,R7
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 799
00AF E4                CLR     A
00B0 900000      R     MOV     DPTR,#i
00B3 F0                MOVX    @DPTR,A
00B4         ?C0083:
00B4 900000      R     MOV     DPTR,#size
00B7 E0                MOVX    A,@DPTR
00B8 FE                MOV     R6,A
00B9 A3                INC     DPTR
00BA E0                MOVX    A,@DPTR
00BB 7806              MOV     R0,#06H
00BD         ?C0200:
00BD CE                XCH     A,R6
00BE C3                CLR     C
00BF 13                RRC     A
00C0 CE                XCH     A,R6
00C1 13                RRC     A
00C2 D8F9              DJNZ    R0,?C0200
00C4 FF                MOV     R7,A
00C5 900000      R     MOV     DPTR,#i
00C8 E0                MOVX    A,@DPTR
00C9 FD                MOV     R5,A
00CA C3                CLR     C
00CB 9F                SUBB    A,R7
00CC E4                CLR     A
00CD 9E                SUBB    A,R6
00CE 5031              JNC     ?C0089
                                           ; SOURCE LINE # 800
00D0 ED                MOV     A,R5
00D1 75F040            MOV     B,#040H
00D4 A4                MUL     AB
00D5 FF                MOV     R7,A
00D6 120000      R     LCALL   L?0252
                                           ; SOURCE LINE # 801
00D9 120000      R     LCALL   L?0231
00DC         ?C0086:
00DC 900000      R     MOV     DPTR,#k
00DF E0                MOVX    A,@DPTR
00E0 FF                MOV     R7,A
00E1 C3                CLR     C
00E2 9440              SUBB    A,#040H
00E4 5012              JNC     ?C0085
                                           ; SOURCE LINE # 802
00E6 120000      R     LCALL   L?0250
00E9 2412              ADD     A,#012H
00EB 120000      R     LCALL   L?0221
00EE EF                MOV     A,R7
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 803
00F0 900000      R     MOV     DPTR,#k
00F3 E0                MOVX    A,@DPTR
00F4 04                INC     A
00F5 F0                MOVX    @DPTR,A
00F6 80E4              SJMP    ?C0086
                                           ; SOURCE LINE # 804
00F8         ?C0085:
00F8 900000      R     MOV     DPTR,#i
00FB E0                MOVX    A,@DPTR
00FC 04                INC     A
00FD F0                MOVX    @DPTR,A
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 63  

00FE 020000      R     LJMP    ?C0083
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 806
0101         ?C0089:
0101 22                RET     
0102         L?0231:
0102 2F                ADD     A,R7
0103 FF                MOV     R7,A
0104 EA                MOV     A,R2
0105 35F0              ADDC    A,B
0107 FE                MOV     R6,A
0108 ED                MOV     A,R5
0109 39                ADDC    A,R1
010A FD                MOV     R5,A
010B EC                MOV     A,R4
010C 38                ADDC    A,R0
010D FC                MOV     R4,A
010E 7B01              MOV     R3,#01H
0110 7A00        R     MOV     R2,#HIGH temp_SPI_Buffer
0112 7900        R     MOV     R1,#LOW temp_SPI_Buffer
0114 900000      E     MOV     DPTR,#?_SpiFlashDmaRead2XMem?BYTE+07H
0117 E4                CLR     A
0118 F0                MOVX    @DPTR,A
0119 A3                INC     DPTR
011A 7440              MOV     A,#040H
011C F0                MOVX    @DPTR,A
011D 120000      E     LCALL   _SpiFlashDmaRead2XMem
0120 E4                CLR     A
0121 900000      R     MOV     DPTR,#k
0124 F0                MOVX    @DPTR,A
0125 22                RET     
             ; FUNCTION _SpiOsdIoLoadLUT (END)

             ; FUNCTION SOsdHwBuffClean (BEGIN)
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
                                           ; SOURCE LINE # 835
0000 74FF              MOV     A,#0FFH
0002 900000      R     MOV     DPTR,#SOsdHwBuff_alpha
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 836
0008 E4                CLR     A
0009 900000      R     MOV     DPTR,#SOsdHwBuff_rle_win
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 838
;---- Variable 'i' assigned to Register 'R7' ----
000D FF                MOV     R7,A
000E         ?C0090:
                                           ; SOURCE LINE # 840
000E EF                MOV     A,R7
000F 120000      R     LCALL   L?0239
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 841
0014 0F                INC     R7
0015 EF                MOV     A,R7
0016 B409F5            CJNE    A,#09H,?C0090
                                           ; SOURCE LINE # 842
0019         ?C0093:
0019 22                RET     
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 64  

             ; FUNCTION SOsdHwBuffClean (END)

             ; FUNCTION _SOsdHwBuffSetLut (BEGIN)
                                           ; SOURCE LINE # 847
;---- Variable 'win' assigned to Register 'R1' ----
0000 A907              MOV     R1,AR7
;---- Variable 'size' assigned to Register 'R2/R3' ----
;---- Variable 'LutOffset' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 849
0002 E9                MOV     A,R1
0003 120000      R     LCALL   L?0239
0006 7401              MOV     A,#01H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 850
0009 EA                MOV     A,R2
000A 120000      R     LCALL   L?0255
000D 2400        R     ADD     A,#LOW SOsdHwBuff_win+01H
000F F582              MOV     DPL,A
0011 E4                CLR     A
0012 3400        R     ADDC    A,#HIGH SOsdHwBuff_win+01H
0014 F583              MOV     DPH,A
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 851
0018 E9                MOV     A,R1
0019 75F008            MOV     B,#08H
001C A4                MUL     AB
001D 2400        R     ADD     A,#LOW SOsdHwBuff_win+02H
001F F582              MOV     DPL,A
0021 E4                CLR     A
0022 3400        R     ADDC    A,#HIGH SOsdHwBuff_win+02H
0024 F583              MOV     DPH,A
0026 EB                MOV     A,R3
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 853
0028 ED                MOV     A,R5
0029 AE04              MOV     R6,AR4
002B 7806              MOV     R0,#06H
002D         ?C0201:
002D CE                XCH     A,R6
002E C3                CLR     C
002F 13                RRC     A
0030 CE                XCH     A,R6
0031 13                RRC     A
0032 D8F9              DJNZ    R0,?C0201
0034 120000      R     LCALL   L?0255
0037 2400        R     ADD     A,#LOW SOsdHwBuff_win+03H
0039 F582              MOV     DPL,A
003B E4                CLR     A
003C 3400        R     ADDC    A,#HIGH SOsdHwBuff_win+03H
003E F583              MOV     DPH,A
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 854
0042 AE04              MOV     R6,AR4
0044 ED                MOV     A,R5
0045 7802              MOV     R0,#02H
0047         ?C0202:
0047 C3                CLR     C
0048 33                RLC     A
0049 CE                XCH     A,R6
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 65  

004A 33                RLC     A
004B CE                XCH     A,R6
004C D8F9              DJNZ    R0,?C0202
004E 120000      R     LCALL   L?0256
0051 2400        R     ADD     A,#LOW SOsdHwBuff_win+04H
0053 F582              MOV     DPL,A
0055 E4                CLR     A
0056 3400        R     ADDC    A,#HIGH SOsdHwBuff_win+04H
                                           ; SOURCE LINE # 856
0058 120000      R     LCALL   L?0225
005B 7810              MOV     R0,#010H
005D 120000      E     LCALL   ?C?ULSHR
0060 E9                MOV     A,R1
0061 75F008            MOV     B,#08H
0064 A4                MUL     AB
0065 2400        R     ADD     A,#LOW SOsdHwBuff_win+05H
0067 F582              MOV     DPL,A
0069 E4                CLR     A
006A 3400        R     ADDC    A,#HIGH SOsdHwBuff_win+05H
                                           ; SOURCE LINE # 857
006C 120000      R     LCALL   L?0225
006F 7808              MOV     R0,#08H
0071 120000      E     LCALL   ?C?ULSHR
0074 E9                MOV     A,R1
0075 75F008            MOV     B,#08H
0078 A4                MUL     AB
0079 2400        R     ADD     A,#LOW SOsdHwBuff_win+06H
007B F582              MOV     DPL,A
007D E4                CLR     A
007E 3400        R     ADDC    A,#HIGH SOsdHwBuff_win+06H
0080 F583              MOV     DPH,A
0082 EF                MOV     A,R7
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 858
0084 900000      R     MOV     DPTR,#address
0087 A3                INC     DPTR
0088 A3                INC     DPTR
0089 A3                INC     DPTR
008A E0                MOVX    A,@DPTR
008B 120000      R     LCALL   L?0256
008E 2400        R     ADD     A,#LOW SOsdHwBuff_win+07H
0090 F582              MOV     DPL,A
0092 E4                CLR     A
0093 3400        R     ADDC    A,#HIGH SOsdHwBuff_win+07H
0095 F583              MOV     DPH,A
0097 EF                MOV     A,R7
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 859
0099 22                RET     
             ; FUNCTION _SOsdHwBuffSetLut (END)

             ; FUNCTION _SOsdHwBuffSetRle (BEGIN)
                                           ; SOURCE LINE # 863
;---- Variable 'win' assigned to Register 'R7' ----
;---- Variable 'count' assigned to Register 'R3' ----
;---- Variable 'bpp' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 864
                                           ; SOURCE LINE # 865
0000 900000      R     MOV     DPTR,#SOsdHwBuff_rle_win
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 866
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 66  

0005 900000      R     MOV     DPTR,#SOsdHwBuff_rle_bpp
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 867
000A 900000      R     MOV     DPTR,#SOsdHwBuff_rle_count
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 868
000F 22                RET     
             ; FUNCTION _SOsdHwBuffSetRle (END)

             ; FUNCTION _SOsdHwBuffSetAlpha (BEGIN)
                                           ; SOURCE LINE # 872
;---- Variable 'alpha_index' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 874
0000 900000      R     MOV     DPTR,#SOsdHwBuff_alpha
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 875
0008 22                RET     
             ; FUNCTION _SOsdHwBuffSetAlpha (END)

             ; FUNCTION SOsdHwBuffWrite2Hw (BEGIN)
                                           ; SOURCE LINE # 1044
                                           ; SOURCE LINE # 1045
                                           ; SOURCE LINE # 1063
0000 7F01              MOV     R7,#01H
0002 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 1075
0005 7F02              MOV     R7,#02H
0007 120000      E     LCALL   _McuSpiClkToPclk
                                           ; SOURCE LINE # 1092
000A E500        E     MOV     A,regTW88+01H
000C 2410              ADD     A,#010H
000E 120000      R     LCALL   L?0221
0011 74A0              MOV     A,#0A0H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1093
0014 120000      R     LCALL   L?0220
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1096
;---- Variable 'win' assigned to Register 'R5' ----
0019 FD                MOV     R5,A
001A         ?C0097:
                                           ; SOURCE LINE # 1098
001A ED                MOV     A,R5
001B 120000      R     LCALL   L?0240
001E E0                MOVX    A,@DPTR
001F 7003              JNZ     $ + 5H
0021 020000      R     LJMP    ?C0099
                                           ; SOURCE LINE # 1099
0024         ?C0100:
                                           ; SOURCE LINE # 1100
0024 ED                MOV     A,R5
0025 75F008            MOV     B,#08H
0028 A4                MUL     AB
0029 2400        R     ADD     A,#LOW SOsdHwBuff_win+01H
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 67  

002B F582              MOV     DPL,A
002D E4                CLR     A
002E 3400        R     ADDC    A,#HIGH SOsdHwBuff_win+01H
0030 AF82              MOV     R7,DPL
0032 F500        R     MOV     data_p,A
0034 8F00        R     MOV     data_p+01H,R7
                                           ; SOURCE LINE # 1109
0036 120000      E     LCALL   SpiFlashDmaStop
                                           ; SOURCE LINE # 1110
0039 7F02              MOV     R7,#02H
003B 120000      E     LCALL   _SpiFlashCmdRead
                                           ; SOURCE LINE # 1114
003E 120000      R     LCALL   L?0235
0041 7002              JNZ     ?C0203
0043 0500        R     INC     data_p
0045         ?C0203:
0045 120000      R     LCALL   L?0229
0048 24C8              ADD     A,#0C8H
004A 120000      R     LCALL   L?0221
                                           ; SOURCE LINE # 1115
004D 120000      R     LCALL   L?0232
0050 7002              JNZ     ?C0204
0052 0500        R     INC     data_p
0054         ?C0204:
0054 120000      R     LCALL   L?0229
0057 24C9              ADD     A,#0C9H
0059 120000      R     LCALL   L?0221
                                           ; SOURCE LINE # 1116
005C 120000      R     LCALL   L?0268
005F FF                MOV     R7,A
0060 900000      R     MOV     DPTR,#LutOffset
0063 E4                CLR     A
0064 F0                MOVX    @DPTR,A
0065 A3                INC     DPTR
0066 EF                MOV     A,R7
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1117
0068 900000      R     MOV     DPTR,#LutOffset
006B E0                MOVX    A,@DPTR
006C FE                MOV     R6,A
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F 7806              MOV     R0,#06H
0071         ?C0205:
0071 C3                CLR     C
0072 33                RLC     A
0073 CE                XCH     A,R6
0074 33                RLC     A
0075 CE                XCH     A,R6
0076 D8F9              DJNZ    R0,?C0205
0078 F0                MOVX    @DPTR,A
0079 EE                MOV     A,R6
007A 900000      R     MOV     DPTR,#LutOffset
                                           ; SOURCE LINE # 1119
007D 120000      R     LCALL   L?0234
0080 7002              JNZ     ?C0206
0082 0500        R     INC     data_p
0084         ?C0206:
0084 120000      R     LCALL   L?0230
0087 24C6              ADD     A,#0C6H
0089 120000      R     LCALL   L?0221
                                           ; SOURCE LINE # 1120
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 68  

008C 120000      R     LCALL   L?0268
008F 543F              ANL     A,#03FH
0091 FF                MOV     R7,A
0092 900000      R     MOV     DPTR,#LutOffset
0095 E0                MOVX    A,@DPTR
0096 F0                MOVX    @DPTR,A
0097 A3                INC     DPTR
0098 E0                MOVX    A,@DPTR
0099 4F                ORL     A,R7
                                           ; SOURCE LINE # 1121
009A 120000      R     LCALL   L?0234
009D 7002              JNZ     ?C0207
009F 0500        R     INC     data_p
00A1         ?C0207:
00A1 120000      R     LCALL   L?0230
00A4 24C7              ADD     A,#0C7H
00A6 120000      R     LCALL   L?0221
                                           ; SOURCE LINE # 1122
00A9 120000      R     LCALL   L?0232
00AC 7002              JNZ     ?C0208
00AE 0500        R     INC     data_p
00B0         ?C0208:
00B0 120000      R     LCALL   L?0230
00B3 24CB              ADD     A,#0CBH
00B5 120000      R     LCALL   L?0221
                                           ; SOURCE LINE # 1123
00B8 120000      R     LCALL   L?0233
00BB 7002              JNZ     ?C0209
00BD 0500        R     INC     data_p
00BF         ?C0209:
00BF 120000      R     LCALL   L?0230
00C2 24CC              ADD     A,#0CCH
00C4 120000      R     LCALL   L?0221
                                           ; SOURCE LINE # 1124
00C7 120000      R     LCALL   L?0233
00CA 7002              JNZ     ?C0210
00CC 0500        R     INC     data_p
00CE         ?C0210:
00CE 120000      R     LCALL   L?0230
00D1 24CD              ADD     A,#0CDH
00D3 120000      R     LCALL   L?0221
00D6 EF                MOV     A,R7
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1129
00D8 E500        E     MOV     A,regTW88+01H
00DA 24C4              ADD     A,#0C4H
00DC 120000      R     LCALL   L?0221
00DF 7401              MOV     A,#01H
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1156
00E2         ?C0099:
00E2 0D                INC     R5
00E3 ED                MOV     A,R5
00E4 6409              XRL     A,#09H
00E6 6003              JZ      $ + 5H
00E8 020000      R     LJMP    ?C0097
00EB         ?C0098:
                                           ; SOURCE LINE # 1162
00EB 120000      E     LCALL   McuSpiClkRestore
                                           ; SOURCE LINE # 1169
00EE 900000      R     MOV     DPTR,#SOsdHwBuff_rle_win
00F1 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 69  

00F2 FF                MOV     R7,A
00F3 6036              JZ      ?C0101
                                           ; SOURCE LINE # 1170
00F5 E500        E     MOV     A,regTW88+01H
00F7 2404              ADD     A,#04H
00F9 120000      R     LCALL   L?0221
00FC E0                MOVX    A,@DPTR
00FD 4401              ORL     A,#01H
00FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1171
0100 900000      R     MOV     DPTR,#SOsdHwBuff_rle_bpp
0103 E0                MOVX    A,@DPTR
0104 FE                MOV     R6,A
0105 B40704            CJNE    A,#07H,?C0102
0108 7E08              MOV     R6,#08H
010A 8000              SJMP    ?C0103
010C         ?C0102:
010C         ?C0103:
010C EE                MOV     A,R6
010D C4                SWAP    A
010E 54F0              ANL     A,#0F0H
0110 FE                MOV     R6,A
0111 900000      R     MOV     DPTR,#SOsdHwBuff_rle_count
0114 E0                MOVX    A,@DPTR
0115 4E                ORL     A,R6
0116 FE                MOV     R6,A
0117 E500        E     MOV     A,regTW88+01H
0119 2405              ADD     A,#05H
011B 120000      R     LCALL   L?0221
011E EE                MOV     A,R6
011F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1172
0120 E500        E     MOV     A,regTW88+01H
0122 2406              ADD     A,#06H
0124 120000      R     LCALL   L?0221
0127 EF                MOV     A,R7
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1173
0129 801D              SJMP    ?C0104
012B         ?C0101:
                                           ; SOURCE LINE # 1174
                                           ; SOURCE LINE # 1175
012B E500        E     MOV     A,regTW88+01H
012D 2404              ADD     A,#04H
012F 120000      R     LCALL   L?0221
0132 E0                MOVX    A,@DPTR
0133 54FE              ANL     A,#0FEH
0135 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1176
0136 E500        E     MOV     A,regTW88+01H
0138 2405              ADD     A,#05H
013A 120000      R     LCALL   L?0221
013D E4                CLR     A
013E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1177
013F E500        E     MOV     A,regTW88+01H
0141 2406              ADD     A,#06H
0143 120000      R     LCALL   L?0221
0146 E4                CLR     A
0147 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1178
0148         ?C0104:
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 70  

                                           ; SOURCE LINE # 1180
0148 900000      R     MOV     DPTR,#SOsdHwBuff_alpha
014B E0                MOVX    A,@DPTR
014C FE                MOV     R6,A
014D A3                INC     DPTR
014E E0                MOVX    A,@DPTR
014F F4                CPL     A
0150 7002              JNZ     ?C0211
0152 EE                MOV     A,R6
0153 F4                CPL     A
0154         ?C0211:
0154 6037              JZ      ?C0105
                                           ; SOURCE LINE # 1181
0156 E500        E     MOV     A,regTW88+01H
0158 2410              ADD     A,#010H
015A 120000      R     LCALL   L?0221
015D 74C3              MOV     A,#0C3H
015F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1182
0160 EE                MOV     A,R6
0161 600D              JZ      ?C0106
0163 E500        E     MOV     A,regTW88+01H
0165 2410              ADD     A,#010H
0167 120000      R     LCALL   L?0221
016A E0                MOVX    A,@DPTR
016B 4408              ORL     A,#08H
016D F0                MOVX    @DPTR,A
016E 800B              SJMP    ?C0107
0170         ?C0106:
                                           ; SOURCE LINE # 1183
0170 E500        E     MOV     A,regTW88+01H
0172 2410              ADD     A,#010H
0174 120000      R     LCALL   L?0221
0177 E0                MOVX    A,@DPTR
0178 54F7              ANL     A,#0F7H
017A F0                MOVX    @DPTR,A
017B         ?C0107:
                                           ; SOURCE LINE # 1184
017B 900000      R     MOV     DPTR,#SOsdHwBuff_alpha
017E 120000      R     LCALL   L?0219
0181 EF                MOV     A,R7
0182 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1185
0183 E500        E     MOV     A,regTW88+01H
0185 2412              ADD     A,#012H
0187 120000      R     LCALL   L?0221
018A 747F              MOV     A,#07FH
018C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1186
018D         ?C0105:
                                           ; SOURCE LINE # 1195
018D 750000      R     MOV     data_p,#HIGH SpiWinBuff+020H
0190 750000      R     MOV     data_p+01H,#LOW SpiWinBuff+020H
                                           ; SOURCE LINE # 1196
0193 750002      R     MOV     i,#02H
0196         ?C0108:
                                           ; SOURCE LINE # 1200
0196 E500        R     MOV     A,i
0198 75F010            MOV     B,#010H
019B A4                MUL     AB
019C 2420              ADD     A,#020H
019E FF                MOV     R7,A
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 71  

019F E4                CLR     A
01A0 35F0              ADDC    A,B
01A2 4404              ORL     A,#04H
01A4 F500        R     MOV     reg_i,A
01A6 8F00        R     MOV     reg_i+01H,R7
                                           ; SOURCE LINE # 1202
01A8 E4                CLR     A
01A9 F500        R     MOV     j,A
01AB         ?C0111:
                                           ; SOURCE LINE # 1203
01AB 120000      R     LCALL   L?0235
01AE 7002              JNZ     ?C0212
01B0 0500        R     INC     data_p
01B2         ?C0212:
01B2 14                DEC     A
01B3 F582              MOV     DPL,A
01B5 8E83              MOV     DPH,R6
01B7 E0                MOVX    A,@DPTR
01B8 FF                MOV     R7,A
01B9 0500        R     INC     reg_i+01H
01BB E500        R     MOV     A,reg_i+01H
01BD AC00        R     MOV     R4,reg_i
01BF 7002              JNZ     ?C0213
01C1 0500        R     INC     reg_i
01C3         ?C0213:
01C3 14                DEC     A
01C4 120000      R     LCALL   L?0257
                                           ; SOURCE LINE # 1204
01C7 0500        R     INC     j
01C9 E500        R     MOV     A,j
01CB B410DD            CJNE    A,#010H,?C0111
                                           ; SOURCE LINE # 1205
01CE         ?C0110:
01CE 0500        R     INC     i
01D0 E500        R     MOV     A,i
01D2 B40AC1            CJNE    A,#0AH,?C0108
                                           ; SOURCE LINE # 1212
01D5         ?C0114:
01D5 22                RET     
             ; FUNCTION SOsdHwBuffWrite2Hw (END)

             ; FUNCTION _SpiOsdLoadLUT (BEGIN)
                                           ; SOURCE LINE # 1353
0000 900000      R     MOV     DPTR,#LutOffset
0003 EA                MOV     A,R2
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
;---- Variable 'winno' assigned to Register 'R7' ----
0008 900000      R     MOV     DPTR,#type
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1354
                                           ; SOURCE LINE # 1365
000D 900000      R     MOV     DPTR,#reg
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1368
0012 ED                MOV     A,R5
0013 701B              JNZ     ?C0115
                                           ; SOURCE LINE # 1372
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 72  

0015 900000      R     MOV     DPTR,#address
0018 120000      R     LCALL   L?0226
001B 900000      R     MOV     DPTR,#?_SpiOsdIoLoadLUT?BYTE+05H
001E 120000      E     LCALL   ?C?LSTXDATA
0021 900000      R     MOV     DPTR,#type
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 7B00              MOV     R3,#00H
0028 7A04              MOV     R2,#04H
002A E4                CLR     A
002B FD                MOV     R5,A
002C FC                MOV     R4,A
002D 020000      R     LJMP    _SpiOsdIoLoadLUT
                                           ; SOURCE LINE # 1374
0030         ?C0115:
                                           ; SOURCE LINE # 1383
0030 7F02              MOV     R7,#02H
0032 120000      E     LCALL   _McuSpiClkToPclk
                                           ; SOURCE LINE # 1404
0035 E4                CLR     A
0036 900000      R     MOV     DPTR,#reg
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1405
003A 900000      R     MOV     DPTR,#LutOffset
003D 120000      R     LCALL   L?0261
0040 30E006            JNB     ACC.0,?C0117
0043 900000      R     MOV     DPTR,#reg
0046 7408              MOV     A,#08H
0048 F0                MOVX    @DPTR,A
0049         ?C0117:
                                           ; SOURCE LINE # 1406
0049 900000      R     MOV     DPTR,#reg
004C E0                MOVX    A,@DPTR
004D 4480              ORL     A,#080H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1407
0050 900000      R     MOV     DPTR,#type
0053 E0                MOVX    A,@DPTR
0054 900000      R     MOV     DPTR,#reg
0057 7006              JNZ     ?C0118
0059 E0                MOVX    A,@DPTR
005A 4440              ORL     A,#040H
005C F0                MOVX    @DPTR,A
005D 8004              SJMP    ?C0119
005F         ?C0118:
                                           ; SOURCE LINE # 1408
005F E0                MOVX    A,@DPTR
0060 4420              ORL     A,#020H
0062 F0                MOVX    @DPTR,A
0063         ?C0119:
                                           ; SOURCE LINE # 1413
0063 D3                SETB    C
0064 ED                MOV     A,R5
0065 94FF              SUBB    A,#0FFH
0067 EC                MOV     A,R4
0068 9400              SUBB    A,#00H
006A 4007              JC      ?C0120
                                           ; SOURCE LINE # 1414
006C 900000      R     MOV     DPTR,#reg
006F E0                MOVX    A,@DPTR
0070 4408              ORL     A,#08H
0072 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 73  

0073         ?C0120:
                                           ; SOURCE LINE # 1415
0073 900000      R     MOV     DPTR,#reg
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 E500        E     MOV     A,regTW88+01H
007A 2410              ADD     A,#010H
007C 120000      R     LCALL   L?0221
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1416
0081 900000      R     MOV     DPTR,#LutOffset
0084 120000      R     LCALL   L?0219
0087 EF                MOV     A,R7
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1473
0089 120000      E     LCALL   SpiFlashDmaStop
                                           ; SOURCE LINE # 1475
008C 7F02              MOV     R7,#02H
008E 120000      E     LCALL   _SpiFlashCmdRead
                                           ; SOURCE LINE # 1476
0091 900000      R     MOV     DPTR,#address
0094 120000      R     LCALL   L?0226
0097 120000      E     LCALL   _SpiFlashDmaFlashAddr
                                           ; SOURCE LINE # 1477
009A 900000      R     MOV     DPTR,#type
009D E0                MOVX    A,@DPTR
009E 7007              JNZ     ?C0121
00A0 A3                INC     DPTR
00A1 E0                MOVX    A,@DPTR
00A2 FE                MOV     R6,A
00A3 A3                INC     DPTR
00A4 E0                MOVX    A,@DPTR
00A5 8010              SJMP    ?C0216
00A7         ?C0121:
                                           ; SOURCE LINE # 1478
00A7 900000      R     MOV     DPTR,#LutOffset
00AA E0                MOVX    A,@DPTR
00AB FE                MOV     R6,A
00AC A3                INC     DPTR
00AD E0                MOVX    A,@DPTR
00AE 7802              MOV     R0,#02H
00B0         ?C0214:
00B0 C3                CLR     C
00B1 33                RLC     A
00B2 CE                XCH     A,R6
00B3 33                RLC     A
00B4 CE                XCH     A,R6
00B5 D8F9              DJNZ    R0,?C0214
00B7         ?C0216:
00B7 FF                MOV     R7,A
00B8 120000      E     LCALL   _SpiFlashDmaBuffAddr
00BB         ?C0122:
                                           ; SOURCE LINE # 1479
00BB 900000      R     MOV     DPTR,#size
00BE E0                MOVX    A,@DPTR
00BF FE                MOV     R6,A
00C0 A3                INC     DPTR
00C1 E0                MOVX    A,@DPTR
00C2 FF                MOV     R7,A
00C3 E4                CLR     A
00C4 FC                MOV     R4,A
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 74  

00C5 FD                MOV     R5,A
00C6 120000      E     LCALL   _SpiFlashDmaReadLen
                                           ; SOURCE LINE # 1481
00C9 7BC9              MOV     R3,#0C9H
00CB 7A05              MOV     R2,#05H
00CD E4                CLR     A
00CE FD                MOV     R5,A
00CF FF                MOV     R7,A
00D0 120000      E     LCALL   _SpiFlashDmaStart
                                           ; SOURCE LINE # 1518
00D3 120000      E     LCALL   McuSpiClkRestore
                                           ; SOURCE LINE # 1520
00D6         ?C0116:
00D6 22                RET     
             ; FUNCTION _SpiOsdLoadLUT (END)

             ; FUNCTION _SpiOsdPixelAlphaAttr (BEGIN)
                                           ; SOURCE LINE # 1529
;---- Variable 'lutloc' assigned to Register 'R2/R3' ----
0000 AB07              MOV     R3,AR7
0002 AA06              MOV     R2,AR6
;---- Variable 'value' assigned to Register 'R1' ----
0004 A905              MOV     R1,AR5
                                           ; SOURCE LINE # 1530
                                           ; SOURCE LINE # 1536
0006 E500        E     MOV     A,regTW88+01H
0008 2410              ADD     A,#010H
000A 120000      R     LCALL   L?0221
000D 74C3              MOV     A,#0C3H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1537
0010 EA                MOV     A,R2
0011 600D              JZ      ?C0123
0013 E500        E     MOV     A,regTW88+01H
0015 2410              ADD     A,#010H
0017 120000      R     LCALL   L?0221
001A E0                MOVX    A,@DPTR
001B 4408              ORL     A,#08H
001D F0                MOVX    @DPTR,A
001E 800B              SJMP    ?C0124
0020         ?C0123:
                                           ; SOURCE LINE # 1538
0020 E500        E     MOV     A,regTW88+01H
0022 2410              ADD     A,#010H
0024 120000      R     LCALL   L?0221
0027 E0                MOVX    A,@DPTR
0028 54F7              ANL     A,#0F7H
002A F0                MOVX    @DPTR,A
002B         ?C0124:
                                           ; SOURCE LINE # 1539
002B 120000      R     LCALL   L?0220
002E EB                MOV     A,R3
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1540
0030 E500        E     MOV     A,regTW88+01H
0032 2412              ADD     A,#012H
0034 120000      R     LCALL   L?0221
0037 E9                MOV     A,R1
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1544
0039 22                RET     
             ; FUNCTION _SpiOsdPixelAlphaAttr (END)
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 75  


             ; FUNCTION _SpiOsdRLC (BEGIN)
                                           ; SOURCE LINE # 1562
;---- Variable 'dcnt' assigned to Register 'R5' ----
;---- Variable 'ccnt' assigned to Register 'R3' ----
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1563
                                           ; SOURCE LINE # 1565
0000 ED                MOV     A,R5
0001 B40701            CJNE    A,#07H,?C0126
                                           ; SOURCE LINE # 1566
0004 0D                INC     R5
0005         ?C0126:
                                           ; SOURCE LINE # 1581
0005 AE05              MOV     R6,AR5
0007 EE                MOV     A,R6
0008 C4                SWAP    A
0009 54F0              ANL     A,#0F0H
000B 4B                ORL     A,R3
000C FE                MOV     R6,A
000D E500        E     MOV     A,regTW88+01H
000F 2405              ADD     A,#05H
0011 120000      R     LCALL   L?0221
0014 EE                MOV     A,R6
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1582
0016 E500        E     MOV     A,regTW88+01H
0018 2406              ADD     A,#06H
001A 120000      R     LCALL   L?0221
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1584
001F 22                RET     
             ; FUNCTION _SpiOsdRLC (END)

             ; FUNCTION _SpiOsdResetRLC (BEGIN)
                                           ; SOURCE LINE # 1589
;---- Variable 'reset' assigned to Register 'R5' ----
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1590
                                           ; SOURCE LINE # 1592
0000 900000      R     MOV     DPTR,#temp
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1603
                                           ; SOURCE LINE # 1604
0005 ED                MOV     A,R5
0006 600C              JZ      ?C0128
0008 E500        E     MOV     A,regTW88+01H
000A 2404              ADD     A,#04H
000C 120000      R     LCALL   L?0221
000F E0                MOVX    A,@DPTR
0010 4402              ORL     A,#02H
0012 F0                MOVX    @DPTR,A
0013 22                RET     
0014         ?C0128:
                                           ; SOURCE LINE # 1605
0014 E500        E     MOV     A,regTW88+01H
0016 2404              ADD     A,#04H
0018 120000      R     LCALL   L?0221
001B E0                MOVX    A,@DPTR
001C 54FD              ANL     A,#0FDH
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 76  

001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1606
                                           ; SOURCE LINE # 1607
001F         ?C0130:
001F 22                RET     
             ; FUNCTION _SpiOsdResetRLC (END)

             ; FUNCTION _SpiOsdDisableRLC (BEGIN)
                                           ; SOURCE LINE # 1623
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1624
                                           ; SOURCE LINE # 1635
0000 900000      R     MOV     DPTR,#temp
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1637
0005 E500        E     MOV     A,regTW88+01H
0007 2406              ADD     A,#06H
0009 120000      R     LCALL   L?0221
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1639
000E 22                RET     
             ; FUNCTION _SpiOsdDisableRLC (END)

C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 77  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
SpiOsdWinBase. . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    000FH  18
_SpiOsdIoLoadLUT . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  type . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  LutOffset. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  spiaddr. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0005H  4
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0009H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
  k. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000BH  1
  R410_data. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000CH  1
SOsdHwBuff_rle_bpp . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
_SpiOsdWinImageLoc . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  start. . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0001H  4
  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
st_animation . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  53
  active . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  current. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  speed. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  vcnt . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  srcx . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000DH  20
  srcy . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0021H  20
_SpiOsdWinPixelWidth . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  bpp. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
  mode . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
_SpiOsdWinFillColor. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  color. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  index. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_SOsdHwBuffSetRle. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  win. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  bpp. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  count. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
SOsdHwBuff_rle_win . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0001H  1
_SOsdWinBuffClean. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  hw . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  j. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
_SpiOsdEnable. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  en . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
RLE2_HEADER. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  id . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  op_bmpbits . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  rledata_cnt. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  LUT_format . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 78  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  LUT_colors . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
_SpiFlashDmaFlashAddr. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SOsdHwBuffSetLut. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  win. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  LutOffset. . . . . . . . . . . . . .  AUTO     DATA   U_INT    0004H  2
  size . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
  address. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0005H  4
SOsdHwBuffClean. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_SpiOsdWinLutOffset. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  table_offset . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
SOsdHwBuff_alpha . . . . . . . . . . .  PUBLIC   XDATA  U_INT    0002H  2
_SpiOsdWinImageSizeWH. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  w. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  h. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
_SpiOsdWinImageLocBit. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
SpiOsdSetDeValue . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  wTemp. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  HDE. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  PCLKO. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
_SOsdWinBuffWrite2Hw . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  end. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  reg_i. . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0001H  2
  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0003H  2
_SpiFlashCmdRead . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_PCMODEDATA. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  han. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  van. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  vfreq. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  htotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  vtotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  hsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  vsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  offseth. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0010H  2
  offsetv. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0012H  2
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  dummy2 . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  dummy3 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0018H  1
_SpiFlashDmaBuffAddr . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SpiOsdRLC . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 79  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  dcnt . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  ccnt . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
_SpiOsdWin0ImageOffsetXY . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  x. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  y. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_SpiOsdResetRLC. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  reset. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_McuSpiClkToPclk . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SOsdHwBuffWrite2Hw . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  win. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  reg_i. . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0004H  2
  LutOffset. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
temp_SPI_Buffer. . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0004H  64
_SpiOsdWinGlobalAlpha. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  alpha. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
_SpiFlashDmaStart. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SpiOsdWin0SetPriority . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  high . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
_SpiOsdLoadLUT . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  type . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  LutOffset. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  address. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0006H  4
  reg. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
_RLE_HEADER. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  id . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  cp . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bmp. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
SPIIMAGE . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  top. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  bottom . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
_SpiFlashDmaReadLen. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_McuSpiClkSelect . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SpiOsdWinBuffEnable . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  en . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 80  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
SLIDEIMAGE . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
_SOsdHwBuffSetAlpha. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  alpha_index. . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_WaitVBlank. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
McuSpiClkRestore . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dPrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SpiFlashDmaStop. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
regTW88. . . . . . . . . . . . . . . .  EXTERN   DATA   PTR      -----  2
_SpiOsdWin0Animation . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  FrameH . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  FrameV . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  Duration . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
_SpiOsdWinHWOffAll . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  wait . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
_SpiFlashDmaRead2XMem. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MY_SLIDEIMAGE. . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  10
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  lut_size . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0006H  4
_SpiOsdWinImageSizeW . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  w. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
SpiWinBuff . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0044H  160
_SpiOsdPixelAlphaAttr. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  lutloc . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
FONT_SPI_INFO_s. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
FONT_SPI_INFO_t. . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
C51 COMPILER V9.00   OSDSPI                                                                05/31/2013 20:18:35 PAGE 81  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
_SpiOsdWinScreen . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  x. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  y. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  w. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0005H  2
  h. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
SOsdHwBuff_win . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    00E4H  72
_SpiOsdDisableRLC. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_SpiOsdWinHWEnable . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  en . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SOsdHwBuff_rle_count . . . . . . . . .  PUBLIC   XDATA  U_CHAR   012CH  1
_SpiOsdWinPixelAlpha . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  alpha. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  data_p . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
MY_RLE_INFO. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  5
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3828    ----
   CONSTANT SIZE    =     33    ----
   XDATA SIZE       =    301      66
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      37
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
