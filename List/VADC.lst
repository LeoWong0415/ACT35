C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE VADC
OBJECT MODULE PLACED IN .\Output\VADC.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE VADC.c LARGE OPTIMIZE(9,SPEED) REGFILE(.\Output\TW8835_REV31.ORC) BROWSE MO
                    -DDP2 DEFINE(EVB_30,EVB_31,nullFn=//) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\List\VADC.lst) OBJECT(.\Output\VADC.obj)

line level    source

   1          /**
   2           * @file
   3           * VADC.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *      Copyright (C) 2011~2012 Intersil Corporation
   8           * @section DESCRIPTION
   9           *      Video HighSpeed ADC module for aRGB 
  10           *
  11           *  VADC means Video ADC. we also call it as aRGB.
  12           *  VADC consist of "SYNC Processor" + "LLPLL" + "ADC".
  13           *  Component & PC inputs use VADC module.      
  14           ******************************************************************************
  15           */
  16          
  17          //-------------------------------------------------------------------
  18          // global function
  19          //      CheckAndSetComponent
  20          //      CheckAndSetPC
  21          //      VAdcSetDefault
  22          //-------------------------------------------------------------------
  23          #include "Config.h"
  24          #include "reg.h"
  25          #include "typedefs.h"
  26          #include "TW8835.h"
  27          
  28          #include "Printf.h"
  29          #include "Monitor.h"
  30          #include "I2C.h"
  31          #include "CPU.h"
  32          #include "Scaler.h"
  33          
  34          #include "InputCtrl.h"
  35          
  36          #include "measure.h"
  37          #include "PC_modes.h"
  38                  
  39          #include "vadc.h"
  40          #include "eeprom.h"
  41          #include "settings.h"
  42          
  43          #ifdef SUPPORT_COMPONENT
  44          #include "data\DataComponent.inc"
  45          #endif
  46          
  47          
  48          #ifdef DEBUG_PC_COLOR
              #define pcPrintf        dPrintf
              #else 
  51          #define pcPrintf        nullFn
  52          #endif
  53          
  54          XDATA   BYTE    InputVAdcMode;
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 2   

  55          
  56          #ifdef MODEL_TW8835FPGA
              //AD9888 & AD9883 60Hz table
              CODE BYTE AD9888_table[20][12] = {
              /*idx   VGA  SVGA  XGA  SXGA  480i  576i  480p  576p  1080i 720p  1080p */
              {0x01, 0x31, 0x41, 0x53, 0x69, 0x35, 0x35, 0x35, 0x35, 0x89, 0x67, 0x89},       //PLL_HIGH
              {0x02, 0xF0, 0xF0, 0xF0, 0x70, 0x90, 0xF0, 0x90, 0xF0, 0x70, 0x10, 0x70},       //PLL_LOW
              {0x03, 0x10, 0x28, 0x60, 0x98, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40},       //VCO & Charge Pump Current
              //{0x03, 0x48, 0x48, 0x50, 0x98, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40},     //VCO & Charge Pump Current
              {0x04, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},       //Phase
              {0x05, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08},       //same
              {0x06, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14},       //same
              {0x07, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20},       //same
              {0x08, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},       //same
              {0x09, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},       //same
              {0x0A, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},       //same
              {0x0B, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},       //same
              {0x0C, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},       //same
              {0x0D, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},       //same
              {0x0E, 0x42, 0x42, 0x42, 0x42, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb},       //sync control
              {0x0F, 0x6A, 0x4A, 0x6A, 0x6A, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02},       //sync control
              {0x10, 0x88, 0x88, 0x88, 0x88, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e},       //SOG, Red clamp, Blue clamp
              {0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20},       //same
              {0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},       //same
              {0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},       //same
              {0x15, 0x46, 0x46, 0x46, 0x46, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e} 
              };
              
              //AD9888 & AD9883 60Hz table
              CODE BYTE AD9883_table[20][12] = {
              /*idx   VGA  SVGA  XGA  SXGA  480i  576i  480p  576p  1080i 720p  1080p */
              {0x01, 0x31, 0x41, 0x53, 0x69, 0x35, 0x35, 0x35, 0x35, 0x89, 0x67, 0x89},       //PLL_HIGH
              {0x02, 0xF0, 0xF0, 0xF0, 0x70, 0x90, 0xF0, 0x90, 0xF0, 0x70, 0x10, 0x70},       //PLL_LOW
              {0x03, 0x10, 0x28, 0x60, 0x98, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40},       //VCO & Charge Pump Current
              {0x04, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},       //Phase
              {0x05, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08},       //same
              {0x06, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14},       //same
              {0x07, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20},       //same
              {0x08, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},       //same
              {0x09, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},       //same
              {0x0A, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},       //same
              {0x0B, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},       //same
              {0x0C, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},       //same
              {0x0D, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},       //same
              {0x0E, 0x42, 0x42, 0x42, 0x42, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f},       //sync control
              {0x0F, 0x6A, 0x4A, 0x6A, 0x6A, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02},       //sync control
              {0x10, 0x88, 0x88, 0x88, 0x88, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e},       //SOG, Red clamp, Blue clamp
              {0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20},       //same
              {0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},       //same
              {0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},       //same
              {0x15, 0x46, 0x46, 0x46, 0x46, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e} 
              };
              void SetExtVAdcI2C(BYTE addr, BYTE mode)
              {
                      BYTE i;
                      
                      dPrintf("\nSetExtVAdcI2C addr:%bx mode:%bd",addr,mode);
                      if(addr != 0x98 && addr != 0x9a)
                              return;
                      if(mode>10)
                              return;
              
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 3   

                      if(addr==0x98) {
                              for(i=0; i < 20; i++) {
                                      WriteI2CByte(addr, AD9888_table[i][0],AD9888_table[i][mode+1]);
                              }
                      }
                      if(addr==0x9a) {
                              for(i=0; i < 20; i++) {
                                      WriteI2CByte(addr, AD9883_table[i][0],AD9883_table[i][mode+1]);
                              }
                      }
                      delay1ms(100);
              }
              #endif
 130          
 131          //---------------------------------------
 132          //R1C2[5:4] - VCO range
 133          //                              0 = 5  ~ 27MHz
 134          //                              1 = 10 ~ 54MHz
 135          //                              2 = 20 ~ 108MHz
 136          //                              3 = 40 ~ 216MHz
 137          //R1C2[2:0] - Charge pump
 138          //                              0 = 1.5uA
 139          //                              1 = 2.5uA
 140          //                              2 = 5.0uA
 141          //                              3 = 10uA
 142          //                              4 = 20uA
 143          //                              5 = 40uA
 144          //                              6 = 80uA
 145          //                              7 = 160uA
 146          //----------------------------------------
 147          
 148          #ifdef UNCALLED_SEGMENT
              //-----------------------------------------------------------------------------
              //parmeter
              //      _IPF: Input PixelClock = Htotal*Vtotal*Hz
              //
              //
              //BYTE SetVCORange(DWORD _IPF)
              //
              //need pixel clock & POST divider value.
              //
              //pixel clock = Htotal * Vtotal * Freq
              //HFreq = Vtotal * Freq
              //pixel clock = Htotal * HFreq
              //
              //-----------------------------------------------------------------------------
              //==>LLPLLSetVcoRange
              BYTE VAdcSetVcoRange(DWORD _IPF)
              {
                      BYTE VCO_CURR, value, chged=0;
                      WORD val;
                      
                      val = _IPF / 1000000L;
              
                      dPrintf("\nVAdcSetVcoRange _IPF:%lx val:%dMHz",_IPF,val);  
                                                                                                              //   +------BUG
                                                                                                              //    ??pump value              
                      if     ( val < 15 )             VCO_CURR = 0x01;        // 00 000
                      else if( val < 34 )             VCO_CURR = 0x01;        // 00 000
                      else if( val < 45 )             VCO_CURR = 0x11;        // 01 000
                      else if( val < 63 )             VCO_CURR = 0x11;        // 01 000
                      else if( val < 70 )             VCO_CURR = 0x21;        // 10 000
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 4   

                      else if( val < 80 )             VCO_CURR = 0x21;        // 10 000
                      else if( val <100 )             VCO_CURR = 0x21;        // 10 000
                      else if( val <110 )             VCO_CURR = 0x21;        // 10 000
                      else                                    VCO_CURR = 0x31;        // 11 000
                      VCO_CURR |= 0xC0;       //POST div 1
                      
                      WriteTW88Page(PAGE1_VADC);
                      value = ReadTW88(REG1C2);
                      if( VCO_CURR != value) {
                              chged = 1;
                              dPrintf(" R1C2:%bx->%bx", value, VCO_CURR );
                              WriteTW88(REG1C2, VCO_CURR);                    // VADC_VCOCURR
                              delay1ms(1);                                    // time to stabilize
                      }
              
              
              //      #ifdef DEBUG_PC_MEAS
              //      dPrintf("\r\nSetVCO=%02bx, changed=%bd", VCO_CURR, chged );
              //      #endif
                      return chged;
              }
              #endif
 201          
 202          
 203          #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC)
 204          //-----------------------------------------------------------------------------
 205          /**
 206          * Read aRGB(VAdc) InputStauts
 207          *
 208          *       register
 209          *       R1C1    LLPLL Input Detection Register
 210          *       R1C1[7] - VSync input polarity 
 211          *       R1C1[6] - HSync input polarity
 212          *       R1C1[5] - VSYNC pulse detection status. 1=detected
 213          *       R1C1[4] - HSYNC pulse detection status. 1=detected
 214          *       R1C1[3] - Composite Sync detection status       
 215          *       R1C1[2:0] Input source format detection in case of composite sync.
 216          *                               0:480i  1:576i  3:480p  3:576p
 217          *                               4:1080i 5:720p  6:1080p 7:fail
 218          */
 219          BYTE VAdcGetInputStatus(void)
 220          {
 221   1              BYTE value;
 222   1              WriteTW88Page(PAGE1_VADC);
 223   1              value = ReadTW88(REG1C1);
 224   1              return value;
 225   1      }
 226          #endif
 227          
 228          #if defined(SUPPORT_PC)
 229          //-----------------------------------------------------------------------------
 230          /**
 231          * Read HSync&VSync input polarity status register.
 232          *
 233          * And, Set LLPLL input polarity & VSYNC output polarity.
 234          *
 235          *       Read R1C1[6] and set R1C0[2]
 236          *       Read R1C1[7] and set R1CC[1]
 237          *
 238          *       PC uses VAdcSetPolarity(0) and Component uses VAdcSetPolarity(1).
 239          *
 240          * register
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 5   

 241          *       R1C0[2] - LLPLL input polarity. Need Negative. CA_PAS need a normal
 242          *       R1C1[6] - HSync input polarity
 243          *       R1C1[7] - VSync input polarity 
 244          *       R1CC[1] - VSYNC output polarity. Need Positive
 245          
 246          * ==>ARGBSetPolarity
 247          * othername PolarityAdjust
 248          *
 249          * @param
 250          *       fUseCAPAS.      If "1", R1C0[2] always use 0.
 251          *                               component use fUseCAPAS=1. 
 252          *
 253          */
 254          void VAdcSetPolarity(BYTE fUseCAPAS)
 255          {
 256   1              BYTE r1c1;
 257   1      
 258   1              WriteTW88Page(PAGE1_VADC );
 259   1              r1c1 = ReadTW88(REG1C1);
 260   1              if(fUseCAPAS) {
 261   2                      //CA_PAS need a normal
 262   2                      WriteTW88(REG1C0, ReadTW88(REG1C0) & ~0x04);
 263   2                      WriteTW88(REG1CC, ReadTW88(REG1CC) & ~0x02);    //if active high, no inv.
 264   2              }
 265   1              else {
 266   2                      //check HS_POL.         Make LLPLL input polarity Negative
 267   2                      if(r1c1 & 0x40) WriteTW88(REG1C0, ReadTW88(REG1C0) | 0x04);             //if active high, invert. make negative
 268   2                      else                    WriteTW88(REG1C0, ReadTW88(REG1C0) & ~0x04);    //if active low, normal. keep negative
 269   2                      //check VS_POL.         Make VS output polarity Positive
 270   2                      if(r1c1 & 0x80) WriteTW88(REG1CC, ReadTW88(REG1CC) & ~0x02);    //if active high, normal.
 271   2                      else                    WriteTW88(REG1CC, ReadTW88(REG1CC) | 0x02);             //if active low, inv
 272   2              }
 273   1      }
 274          #endif
 275          
 276          #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC)
 277          #define LLPLL_POST_8            0x00
 278          #define LLPLL_POST_4            0x40
 279          #define LLPLL_POST_2            0x80
 280          #define LLPLL_POST_1            0xC0 //*
 281          #define LLPLL_VCO_40TO216       0x30 //*
 282          #define LLPLL_PUMP_5            0x02 //*
 283          //-----------------------------------------------------------------------------
 284          /**
 285          * Set LLPLL Control
 286          *
 287          *       register
 288          *       R1C2[7:6]       PLL post divider
 289          *       R1C2[5:4]       VCO range select
 290          *       R1C2[2:0]       Charge pump current
 291          */
 292          void VAdcSetLLPLLControl(BYTE value)
 293          {
 294   1              WriteTW88Page(PAGE1_VADC );
 295   1              WriteTW88(REG1C2, value);
 296   1      }
 297          #endif
 298          
 299          
 300          //-----------------------------------------------------------------------------
 301          // LLPLL Divider
 302          //-----------------------------------------------------------------------------
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 6   

 303          #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC)
 304          //-----------------------------------------------------------------------------
 305          /**
 306          * Write LLPLL divider
 307          *
 308          * other name: SetCoarse(WORD i)
 309          *
 310          *       register
 311          *               R1C3[3:0]R1C4[7:0] - LLPLL Divider. PLL feedback divider. A 12-bit register 
 312          * @param        value: PLL value. Use (Htotal-1)
 313          * @param        fInit:  init flag
 314          */
 315          void VAdcLLPLLSetDivider(WORD value, BYTE fInit)
 316          {
 317   1              volatile BYTE mode;
 318   1      
 319   1              WriteTW88Page(PAGE1_VADC );
 320   1              Write2TW88(REG1C3,REG1C4, value);
 321   1              if(fInit) {     
 322   2                      WriteTW88(REG1CD, ReadTW88(REG1CD) | 0x01);             // PLL init
 323   2                      //wait
 324   2                      do {
 325   3                              mode = TW8835_R1CD;
 326   3                      } while(mode & 0x01);
 327   2              }
 328   1      #ifdef MODEL_TW8835FPGA
                      WriteI2CByte(0x98, 1, value>>4);
                      WriteI2CByte(0x98, 2, value<<4);
              #endif
 332   1      }
 333          #endif
 334          
 335          #if defined(SUPPORT_PC)
 336          //-----------------------------------------------------------------------------
 337          /**
 338          * Read LLPLL divider value
 339          *
 340          * other name: GetCoarse(void)
 341          */
 342          WORD VAdcLLPLLGetDivider(void)
 343          {
 344   1              WORD value;
 345   1      
 346   1              WriteTW88Page(PAGE1_VADC);
 347   1              Read2TW88(REG1C3,REG1C4,value);
 348   1              return value & 0x0FFF;
 349   1      }
 350          #endif
 351          
 352          //-----------------------------------------------------------------------------
 353          // LLPLL Clock PHASE
 354          //-----------------------------------------------------------------------------
 355          #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC)
 356          //-----------------------------------------------------------------------------
 357          /**
 358          * set Phase value
 359          *
 360          *       register
 361          *       R1C5[4:0]
 362          * @param value: Phase value
 363          * @param fInit: init flag
 364          */
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 7   

 365          void VAdcSetPhase(BYTE value, BYTE fInit)
 366          {
 367   1              volatile BYTE mode;
 368   1      
 369   1              WriteTW88Page(PAGE1_VADC);
 370   1              WriteTW88(REG1C5, value&0x1f);
 371   1      #ifdef MODEL_TW8835FPGA
                      WriteI2CByte(0x98, 4, value<<3);
              #endif
 374   1              if(fInit) {
 375   2                      WriteTW88(REG1CD, ReadTW88(REG1CD) | 0x01);     // PLL init
 376   2                      //wait
 377   2                      do {
 378   3                              mode = TW8835_R1CD;
 379   3                      } while(mode & 0x01);
 380   2              }
 381   1      }
 382          #endif
 383          #if defined(SUPPORT_PC)
 384          //-----------------------------------------------------------------------------
 385          /**
 386          * get Phase value
 387          */
 388          //-----------------------------------------------------------------------------
 389          BYTE VAdcGetPhase(void)
 390          {
 391   1              WriteTW88Page(PAGE1_VADC);
 392   1              return ReadTW88(REG1C5) & 0x1f;         //VADC_PHASE
 393   1      }
 394          #endif
 395          
 396          
 397          
 398          //-----------------------------------------------------------------------------
 399          // LLPLL Filter BandWidth
 400          //---------------------------
 401          //register
 402          //      R1C6[2:0]       R1C6 default: 0x20.
 403          //-----------------------------------------------------------------------------
 404          /**
 405          * set filter bankwidth
 406          */
 407          void VAdcSetFilterBandwidth(BYTE value, WORD delay)
 408          {
 409   1              if(delay)
 410   1                      delay1ms(delay);
 411   1              WriteTW88Page(PAGE1_VADC);
 412   1              WriteTW88(REG1C6, (ReadTW88(REG1C6) & 0xF8) | value);
 413   1      }
 414          
 415          
 416          //-----------------------------------------------------------------------------
 417          //desc: check input
 418          //@param
 419          //      type    0:YPbPr, 1:PC
 420          //              YPbPr   Use CompositeSync(CSYNC) with clamping & Slicing
 421          //              PC              Use a seperate HSYNC & VSYNC PIN
 422          //
 423          //for YPbPr
 424          //      0x1C0[7:6]      = 0             default
 425          //      0x1C0[3] = 0            Select Clamping output(not HSYNC)
 426          //      0x1C0[4] = 1            Select CS_PAS
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 8   

 427          //
 428          //for PC(aRGB)
 429          //preprocess
 430          //      0x1C0[3] = 1    Select HSYNC
 431          //      0x1C0[4] = 0    Select HSYNC(or Slice, Not a CS_PAS)
 432          //      
 433          //detect
 434          //      0x1C1[6]        Detected HSYNC polarity
 435          //      0x1C1[4]        HSYNC detect status
 436          //postprocess
 437          //      0x1C0[2]        PLL reference input polarity    
 438          //
 439          //return
 440          //      0: fail
 441          //      else: R1C1 value                
 442          #ifdef UNCALLED_SEGMENT
              BYTE VAdcCheckInput(BYTE type)
              {
              //      BYTE value;
                      volatile BYTE rvalue;
                      BYTE check;
                      BYTE i;
              
                      ePrintf("\nVAdcCheckInput(%bx) %s",type,type ? "PC": "YPbPr" );
              
                      WriteTW88Page(PAGE1_VADC );
              
              //      //power up PLL, SOG,....
              //      value = 0x40;                                                                           // powerup PLL
              //      if(type==0)     value |= 0x80;                                                  // powerup SOG
              //      WriteTW88(REG1CB, (ReadTW88(REG1CB) & 0x1F) | value );  // keep SOG Slicer threshold & coast
                              
                      if(type==0) check = 0x08;       //check CompositeSynch
                      else            check = 0x30;   //check HSynch & VSynch
              
                      //(YPbPr need more then 370ms, PC need 200ms). max 500ms wait
                      for(i=0; i < 50; i++) {
                              rvalue = TW8835_R1C1;
                              dPrintf(" %02bx",rvalue);
              
                              if((rvalue & check) == check) {
                                      ePrintf("->success:%bd",i);
                                      return rvalue;  
                              }
                              delay1ms(10);
                      }
                      ePrintf("->fail");
              
              //      WriteTW88(REG1CB, ReadTW88(REG1CB) & 0x1F);     //PowerDown
              
                      return 0;       //No detect             
              }
              #endif
 480          
 481          
 482          //-----------------------------------------------------------------------------
 483          //only for test
 484          //-----------------------------------------------------------------------------
 485          #ifdef UNCALLED_SEGMENT
              BYTE VAdcDoubleCheckInput(BYTE detected)
              {
                      BYTE i, count;
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 9   

                      BYTE rvalue;
                      BYTE old = detected;
              
                      ePrintf("\nVAdcDoubleCheckInput");
                      count=0;
              
                      WriteTW88Page(PAGE1_VADC );
                      for(i=0; i < 200; i++) {
                              rvalue = ReadTW88(REG1C1 );
                              if(rvalue == old) count++;
                              else {
                                      dPrintf(" %02bx@%bd", rvalue, i);
                                      old = rvalue;
                                      count=0;
                              }
                              if(count >= 30) {
                                      ePrintf("->success");
                                      return rvalue;
                              }
                              delay1ms(10);
                      }
                      ePrintf("->fail");
                      return 0;
              }
              #endif
 514          
 515          
 516          //0x1C1 - LLPLL Input Detection Register 
 517          
 518          
 519          
 520          #ifdef UNCALLED_SEGMENT
              #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC)
              //-----------------------------------------------------------------------------
              //power down SOG,PLL,Coast
              //register
              //      R1CB[7] SOG power down. 1=Powerup
              //      R1CB[6] PLL power down. 1=Powerup
              //      R1CB[5] PLL coast function. 1=Enable
              //-----------------------------------------------------------------------------
              void VAdcSetPowerDown(void)
              {
                      WriteTW88Page(PAGE1_VADC );
                      WriteTW88(REG1CB, (ReadTW88(REG1CB) & 0x1F));   
              }
              #endif
              #endif
 536          
 537          //-----------------------------------------------------------------------------
 538          //register
 539          //      R1CB[4:0]  SOG Slicer Threshold Register
 540          //-----------------------------------------------------------------------------
 541          #ifdef UNCALLED_SEGMENT
              void VADcSetSOGThreshold(BYTE value)
              {
                      WriteTW88Page(PAGE1_VADC );
                      WriteTW88(REG1CB, ReadTW88(REG1CB) & ~0x1F | value);    
              }
              #endif
 548          
 549          //-----------------------------------------------------------------------------
 550          //gain control
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 10  

 551          //R1D0[2]R1D1[7:0]      Y/G channel gain
 552          //R1D0[1]R1D2[7:0]      C/B channel gain
 553          //R1D0[0]R1D3[7:0]      V/R channel gain
 554          //-----------------------------------------------------------------------------
 555          #ifdef SUPPORT_PC
 556          void VAdcSetChannelGainReg(WORD GainG,WORD GainB,WORD GainR)
 557          {
 558   1              WriteTW88Page(PAGE1_VADC );
 559   1              WriteTW88(REG1D1, GainG );
 560   1              WriteTW88(REG1D2, GainB );
 561   1              WriteTW88(REG1D3, GainR );
 562   1              WriteTW88(REG1D0, (GainR >> 8)+ ((GainB >> 7) & 2) + ((GainG >> 6) & 4 ));
 563   1      }
 564          WORD VAdcReadGChannelGainReg(void)
 565          {
 566   1              WORD wTemp;
 567   1              WriteTW88Page(PAGE1_VADC );
 568   1              wTemp = ReadTW88(REG1D0) & 0x04;
 569   1              wTemp <<= 6;
 570   1              wTemp |= ReadTW88(REG1D1);
 571   1              return wTemp;
 572   1      }
 573          WORD VAdcReadBChannelGainReg(void)
 574          {
 575   1              WORD wTemp;
 576   1              WriteTW88Page(PAGE1_VADC );
 577   1              wTemp = ReadTW88(REG1D0) & 0x02;
 578   1              wTemp <<= 7;
 579   1              wTemp |= ReadTW88(REG1D2);
 580   1              return wTemp;
 581   1      }
 582          WORD VAdcReadRChannelGainReg(void)
 583          {
 584   1              WORD wTemp;
 585   1              WriteTW88Page(PAGE1_VADC );
 586   1              wTemp = ReadTW88(REG1D0) & 0x01;
 587   1              wTemp <<= 8;
 588   1              wTemp |= ReadTW88(REG1D3);
 589   1              return wTemp;
 590   1      }
 591          #endif
 592          
 593          //-----------------------------------------------------------------------------
 594          //register
 595          //      R1D4[7:0]
 596          //-----------------------------------------------------------------------------
 597          #if 0
              void VAdcSetClampMode(BYTE value)
              {
                      WriteTW88Page(PAGE1_VADC );
                      WriteTW88(REG1D4, value );
              }
              #endif
 604          
 605          //-----------------------------------------------------------------------------
 606          //register
 607          //      R1D4[5]
 608          //-----------------------------------------------------------------------------
 609          #ifdef SUPPORT_COMPONENT
 610          /**
 611          * set clamp mode and HSync Edge
 612          */
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 11  

 613          void VAdcSetClampModeHSyncEdge(BYTE fOn)
 614          {
 615   1              WriteTW88Page(PAGE1_VADC );
 616   1              if(fOn) WriteTW88(REG1D4, ReadTW88(REG1D4) | 0x20 );
 617   1              else    WriteTW88(REG1D4, ReadTW88(REG1D4) & ~0x20 );
 618   1      }
 619          #endif
 620          
 621          //-----------------------------------------------------------------------------
 622          //register
 623          //      R1D7[7:0]
 624          //-----------------------------------------------------------------------------
 625          #ifdef SUPPORT_COMPONENT
 626          /**
 627          * set clamp position
 628          */
 629          void VAdcSetClampPosition(BYTE value)
 630          {
 631   1              WriteTW88Page(PAGE1_VADC );
 632   1              WriteTW88(REG1D7, value );      // ADC clamp position from HSync edge by TABLE ClampPos[]
 633   1      }
 634          #endif
 635          
 636          //-----------------------------------------------------------------------------
 637          //register
 638          //      R1E6[5] PGA control     0=low speed operation. 1=high speed operation
 639          //-----------------------------------------------------------------------------
 640          #ifdef UNCALLED_SEGMENT
              /**
              * set PGA control
              */
              void VAdcSetPGAControl(BYTE fHigh)
              {
                      WriteTW88Page(PAGE1_VADC );
                      if(fHigh)       WriteTW88(REG1E6, ReadTW88(REG1E6) | 0x20);             //HighSpeed
                      else            WriteTW88(REG1E6, ReadTW88(REG1E6) & ~0x20);    //LowSpeed
              }
              #endif
 651          
 652          //===================================================================
 653          //
 654          //===================================================================
 655          //-----------------------------------------------------------------------------
 656          /**
 657          * set default VAdc for PC & Component.
 658          *
 659          * If input is not PC or Component, powerdown VAdc.
 660          *       R1C0[]  10
 661          *       R1C2[]  d2
 662          *       * R1C6  20
 663          *       R1CB[]
 664          *       R1CC[]
 665          *       R1D4[]  00      20
 666          *       R1D6[]  10      10
 667          *       R1D7[]          00
 668          *       R1DA[]  80      01
 669          *       R1DB[]  80      01
 670          *       R1E6[]  00  20          PGA high
 671          * external
 672          *  InputMain
 673          * @todo pls, remove or refind. it is too big.
 674          */
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 12  

 675          
 676          void VAdcSetDefaultFor(void)
 677          {
 678   1      #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC)
 679   1              BYTE rvalue;
 680   1      #endif
 681   1              //dPrintf("\nVAdcSetDefaultFor()");
 682   1      
 683   1              WriteTW88Page(PAGE1_VADC );
 684   1              if ( InputMain == INPUT_COMP ) {
 685   2      #ifdef SUPPORT_COMPONENT
 686   2                      WriteTW88(REG1C0,0x10); // mode for SOG slicer
 687   2                      WriteTW88(REG1C2,0xD2); // ==> VCO Charge pump          POST:1. VCO:10~54MHz Pump:5uA
 688   2                      WriteTW88(REG1C6,0x20); // PLL loop control
 689   2                      WriteTW88(REG1C9,0x00); // Pre-coast = 0
 690   2                      WriteTW88(REG1CA,0x00); // Post-coast = 0
 691   2                      WriteTW88(REG1CB,0xD6); // Power up PLL, SOG
 692   2      #ifdef MODEL_TW8835FPGA
                              WriteTW88(REG1CC,(ReadTW88(REG1CC) & 0xE0) | 0x0B);     //1CC[3:2]=10b. HS Pin.1CC[1]=1. VSYNC inversion, 1C
             -C[0]=1. HSYNC inversion
              #else
 695   2                      WriteTW88(REG1CC,0x00); // ==> Sync selection
 696   2      #endif
 697   2      
 698   2                      WriteTW88(REG1D0,0x00); // ADC gain
 699   2                      WriteTW88(REG1D1,0xF0); // 
 700   2                      WriteTW88(REG1D2,0xF0); // 
 701   2                      WriteTW88(REG1D3,0xF0); // 
 702   2      
 703   2                      WriteTW88(REG1D4,0x20); // clamp mode
 704   2                      WriteTW88(REG1D5,0x00); // clamp start
 705   2                      WriteTW88(REG1D6,0x10); // clamp stop
 706   2                      WriteTW88(REG1D7,0x00); // clamp pos.
 707   2                      WriteTW88(REG1D9,0x02); // clamp Y level
 708   2                      WriteTW88(REG1DA,0x80); // clamp U level
 709   2                      WriteTW88(REG1DB,0x80); // clamp V level
 710   2                      WriteTW88(REG1DC,0x10); // HS width
 711   2      
 712   2                      WriteTW88(REG1E2,0x59); //***
 713   2                      WriteTW88(REG1E3,0x37); //***
 714   2                      WriteTW88(REG1E4,0x55); //***
 715   2                      WriteTW88(REG1E5,0x55); //***
 716   2      
 717   2                      WriteTW88(REG1E6,0x20); // PGA high speed
 718   2      
 719   2      #ifdef MODEL_TW8835FPGA
                              SetExtVAdcI2C(0x98, 4);  //AD9888..default480i
              #endif
 722   2                      //set default divider(856-1. for 480i or 480p) & phase. 
 723   2                      VAdcLLPLLSetDivider(0x035A, 1);
 724   2                      //rvalue=GetPhaseEE(EE_YUVDATA_START+0);
 725   2                      //if(rvalue==0xff)
 726   2                              rvalue=0;
 727   2                      VAdcSetPhase(rvalue, 0);
 728   2      #endif
 729   2              }
 730   1              else if ( InputMain == INPUT_PC ) {
 731   2      #ifdef SUPPORT_PC
 732   2                      WriteTW88(REG1C0,0x08); // mode for HV sync
 733   2                      WriteTW88(REG1C2,0xD2); // ==> VCO Charge pump          POST:1. VCO:10~54MHz Pump:5uA
 734   2                      WriteTW88(REG1C6,0x20); // PLL loop control
 735   2                      WriteTW88(REG1C9,0x00); // Pre-coast = 0
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 13  

 736   2                      WriteTW88(REG1CA,0x00); // Post-coast = 0
 737   2                      WriteTW88(REG1CB,0x56); // Power up PLL
 738   2      #ifdef MODEL_TW8835FPGA
                              WriteTW88(REG1CC,(ReadTW88(REG1CC) & 0xE0) | 0x18);     ////1CC[4]:1  VSYNC: input pin. 1CC[3:2]=10b.
              #else
 741   2                      WriteTW88(REG1CC,0x12); // ==> Sync selection
 742   2      #endif
 743   2      
 744   2                      WriteTW88(REG1D0,0x00); // ADC gain
 745   2                      WriteTW88(REG1D1,0xF0); // 
 746   2                      WriteTW88(REG1D2,0xF0); // 
 747   2                      WriteTW88(REG1D3,0xF0); // 
 748   2      
 749   2                      WriteTW88(REG1D4,0x20); // clamp mode
 750   2                      WriteTW88(REG1D5,0x00); // clamp start
 751   2                      WriteTW88(REG1D6,0x10); // clamp stop
 752   2                      WriteTW88(REG1D7,0x00); // clamp pos.
 753   2                      WriteTW88(REG1D9,0x02); // clamp G/Y level
 754   2                      WriteTW88(REG1DA,0x01); // clamp B/U level
 755   2                      WriteTW88(REG1DB,0x01); // clamp R/V level
 756   2                      WriteTW88(REG1DC,0x10); // HS width
 757   2      
 758   2                      WriteTW88(REG1E2,0x59); //***
 759   2                      WriteTW88(REG1E3,0x37); //***
 760   2      #ifdef CHIP_MANUAL_TEST
                              WriteTW88(REG1E4,0x53); //***
              #else
 763   2                      WriteTW88(REG1E4,0x55); //***
 764   2      #endif
 765   2                      WriteTW88(REG1E5,0x55); //***
 766   2      
 767   2                      WriteTW88(REG1E6,0x20); // PGA high speed
 768   2      
 769   2      #ifdef MODEL_TW8835FPGA
                              SetExtVAdcI2C(0x98, 0);          //AD9888..default VGA
              #endif
 772   2                      //set default divider(1056, for SVGA) & phase. 
 773   2                      VAdcLLPLLSetDivider(0x0420, 1); 
 774   2                      rvalue=GetPhaseEE(5);   //SVGA.
 775   2                      if(rvalue==0xff)
 776   2                              rvalue=0;
 777   2                      VAdcSetPhase(rvalue, 0); //VGA
 778   2      #endif
 779   2              }
 780   1              else {
 781   2                      //power down SOG,PLL,Coast
 782   2                      //same as VAdcSetPowerDown();   
 783   2                      WriteTW88(REG1CB, (ReadTW88(REG1CB) & 0x1F));
 784   2                      LLPLLSetClockSource(1);                 //select 27MHz. R1C0[0]
 785   2              }       
 786   1      }
 787          
 788          
 789          
 790          
 791          //-----------------------------------------------------------------------------
 792          //R1D0
 793          //R1D1 Y channel gain
 794          //R1D2 C channel gain
 795          //R1D3 V channel gain
 796          //read RGB max value from meas and adjust color gain value on VAdc.
 797          //-----------------------------------------------------------------------------
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 14  

 798          
 799          #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC)
 800          //-----------------------------------------------------------------------------
 801          //extern BYTE WaitStableLLPLL(WORD delay);
 802          //BYTE VAdcSetupLLPLL(WORD divider, /*BYTE ctrl,*/ BYTE fInit, BYTE delay)
 803          //-----------------------------------------------------------------------------
 804          /**
 805          * update LLPLL divider
 806          *
 807          */
 808          BYTE VAdcLLPLLUpdateDivider(WORD divider, /*BYTE ctrl,*/ BYTE fInit, BYTE delay)
 809          {
 810   1              BYTE ret;
 811   1              
 812   1              ret = ERR_SUCCESS;
 813   1              
 814   1              VAdcSetFilterBandwidth(0, 0);
 815   1      
 816   1      //      //LLPLL Control.
 817   1      //      VAdcSetLLPLLControl(ctrl);
 818   1      
 819   1              VAdcLLPLLSetDivider(divider, fInit);
 820   1              if(fInit) {
 821   2                      if(WaitStableLLPLL(delay))
 822   2                              ret = ERR_FAIL;
 823   2              }
 824   1              VAdcSetFilterBandwidth(7, 0);   //restore
 825   1              
 826   1              return ret;
 827   1      }
 828          #endif
 829          
 830          
 831          #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC)
 832          //-----------------------------------------------------------------------------
 833          /**
 834          * wait stable LLPLL input.
 835          *
 836          * @return
 837          *       0:success. ERR_SUCCESS.
 838          *       1:fail. ERR_FAIL
 839          */
 840          BYTE    WaitStableLLPLL(WORD delay)
 841          {
 842   1              DECLARE_LOCAL_page
 843   1              BYTE    i;
 844   1              WORD    HActive, HActiveOld, HStart;
 845   1              BYTE    PolOld;
 846   1              volatile BYTE   Pol;
 847   1      
 848   1              ReadTW88Page(page);
 849   1      
 850   1              if(delay)
 851   1                      delay1ms(delay);
 852   1      
 853   1              dPrintf("\nWaitStableLLPLL: ");
 854   1              for(i=0; i < 128; i++) {        //max loop
 855   2                      if(MeasStartMeasure()) {
 856   3                              dPrintf("fail measure");
 857   3                              WriteTW88Page(page );
 858   3                              return ERR_FAIL;
 859   3                      }
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 15  

 860   2                      HActive = MeasGetHActive( &HStart );    //h_active_start h_active_perios
 861   2                      Pol = VAdcGetInputStatus();
 862   2                      if(i==0) {
 863   3                              //skip.
 864   3                      }
 865   2                      else if((HActive==HActiveOld) && (Pol == PolOld)) {
 866   3                              dPrintf("%bd times, HS: %d, HActive: %d InputStatus:0x%bx", i, HStart, HActive, Pol);
 867   3                              WriteTW88Page(page );
 868   3                              return ERR_SUCCESS;
 869   3                      }
 870   2                      HActiveOld = HActive;
 871   2                      PolOld = Pol;
 872   2              }
 873   1              dPrintf("fail max loop");
 874   1              WriteTW88Page(page );
 875   1              return ERR_FAIL;
 876   1      }
 877          #endif
 878          
 879          
 880          #if defined(SUPPORT_PC)
 881          //-----------------------------------------------------------------------------
 882          /**
 883          * find PC input mode
 884          *
 885          * @return
 886          *       0: fail
 887          *       else: success.
 888          *                 index number of PC Mode Data Table.
 889          */
 890          BYTE FindInputModePC(WORD *vt /*BYTE fDTV*/)
 891          {
 892   1              WORD    vtotal;
 893   1              BYTE    vfreq, i;
 894   1      
 895   1              //
 896   1              // get a vertical frequency and  a vertical total scan lines.
 897   1              //
 898   1              //BKFYI. We donot have a PLL value yet that depend on the mode.
 899   1              //so, we are using 27MHz register.
 900   1              vfreq = MeasGetVFreq();
 901   1              vfreq = MeasRoundDownVFreqValue(vfreq);
 902   1      
 903   1              vtotal = MeasGetVPeriod();      //Vertical Period Registers
 904   1              *vt = vtotal;
 905   1      
 906   1              //
 907   1              //Search PC mode.
 908   1              //
 909   1              for ( i=1; i<(sizeof_PCMDATA() / sizeof(struct _PCMODEDATA)); i++ ) {
 910   2                      if ( PCMDATA[i].support == 0 ) continue;
 911   2                      if ( PCMDATA[i].support==3 /* && fDTV==0 */) continue;
 912   2                      if ( PCMDATA[i].vfreq == vfreq ) {                      //check vfreq
 913   3                              //dPrintf("\ni=%bd", i);
 914   3                              if(( PCMDATA[i].vtotal == vtotal )              //check vtotal 
 915   3                              || ( PCMDATA[i].vtotal == (vtotal+1) ) 
 916   3                              || ( PCMDATA[i].vtotal == (vtotal-1) )
 917   3                              || ( PCMDATA[i].vtotal == (vtotal+2) ) 
 918   3                              || ( PCMDATA[i].vtotal == (vtotal-2) ) ){
 919   4                                      //dPrintf(" ==>FOUND vtotal:%d, %dx%d@%bdHz", vtotal, PCMDATA[i].han, PCMDATA[i].van, vfreq);
 920   4                                      dPrintf("\nFindInputModePC FOUND mode=%bd vtotal:%d, %dx%d@%bdHz", 
 921   4                                              i, vtotal, PCMDATA[i].han, PCMDATA[i].van, vfreq);
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 16  

 922   4                                      //dPrintf("\nFindInputModePC return mode:%bd",i);
 923   4                                      return (i);
 924   4                              }
 925   3                      }
 926   2              }
 927   1      
 928   1              ePuts( "\nCurrent Input resolution IS Not Supported." );
 929   1              ePrintf(" V total: %d, V freq: %bd", vtotal, vfreq );
 930   1              return (0);                                                     // not support
 931   1      }
 932          #endif
 933          
 934          //-----------------------------------------------------------------------------
 935          // component video table
 936          //-----------------------------------------------------------------------------
 937          
 938                                                                  //       1      2       3      4      5      6      7      8      9     10
 939                                                                  //      480i,  576i,   480p, 576p,1080i50,1080i60,720p50,720p60,1080p5,1080p6
 940          //scaled
 941          code    WORD    YUVDividerPLL[] = { 858,   864,   858,   864,   2460,  2200,  1980,  1650,  2640,  2200 };              //to
             -tal horizontal pixels
 942          code    WORD    YUVVtotal[]     = { 262,   312,   525,   625,   562,   562,   750,   750,   1124,  1124 };              //to
             -tal vertical scan line
 943          #if 1 //scaled
 944          code    BYTE    YUVClampPos[]   = { 128,   128,   64,    58,    40,    32,    38,    38,    14,    14 };                //clam
             -p position offset. R1D7. 
 945          #else
              code    BYTE    YUVClampPos[]   = { 140,   140,   52,    58,    24,    32,    38,    38,    14,    14 };                //clam
             -p position offset. R1D7.
              #endif
 948          
 949          code    WORD    YUVCropH[]      = { 720,   720,   720,   720,   1920,  1920,  1280,  1280,  1920,  1920 };              // h
             -orizontal resolution
 950          code    WORD    YUVCropV[]      = { 240,   288,   480,   576,   540,   540,   720,   720,   1080,  1080 };              // v
             -ertical resolution
 951          #if 1
 952          code    WORD    YUVDisplayH[]   = { 700,   700,   700,   700,   1880,  1880,  1260,  1260,  1880,  1880 };              // r
             -educed. R042[3:0]R046[7:0] for overscan
 953          code    WORD    YUVDisplayV[]   = { 230,   278,   460,   556,   520,   520,   696,   696,   1040,  1040 };              // r
             -educed R042[6:4]R044[7:0] for overscan
 954          #else
              //same as YUVCropH and YUVCropV
              code    WORD    YUVDisplayH[]   = { 720,   720,   720,   720,   1920,  1920,  1280,  1280,  1920,  1920 };              // R
             -042[3:0]R046[7:0] for overscan
              code    WORD    YUVDisplayV[]   = { 240,   288,   480,   576,   540,   540,   720,   720,   1080,  1080 };              // R
             -042[6:4]R044[7:0] for overscan
              #endif
 959          
 960          #if 1
 961          code    WORD    YUVStartH[]     = { 112,   126,   114,   123,   230,   233,   293,   293,   233,   233 };               // 0x
             -040[7:6],0x045 InputCrop
 962          code    WORD    YUVStartV[]     = { 1,     1,     2,     2,     2,     2,     2,     2,     2,     2 };                 // 0x0
             -43 InputCrop
 963          #else
              code    WORD    YUVStartH[]     = { 121-16,131-16,121-16,131-16,235-16,235-16,299-16,299-16,   235-16,235-16 }; 
             -        // 0x040[7:6],0x045 InputCrop
              code    WORD    YUVStartV[]     = { 1,     1,     2,     2,     2,     2,     2,     2,     2,     2 };                 // 0x0
             -43 InputCrop
              #endif
 967          
 968          #if 1
 969          code    BYTE    YUVOffsetH[]    = { 5,     4,     10,    6,     40,    40,    20,    20,    30,    30 };
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 17  

 970          code    BYTE    YUVOffsetV[]    = { 48,    48,    48,    48,    28,    26,    24,    25,    26,    26 };                // use
             - as V-DE 0x215        
 971          #else
              code    BYTE    YUVOffsetH[]    = { 5,     4,     10,    6,     40,    40,    20,    20,    30,    30 };
              code    BYTE    YUVOffsetV[]    = { 42,    40,    40,    38,    20,    20,    18,    18,    10,    10 };                // use
             - as V-DE 0x215        
              #endif
 975          code    BYTE    YUVScaleVoff[]  = { 128,   128,   0,     0,     128,   128,   0,     0,     0,     0 };
 976          
 977          #if 1
 978          code    WORD    MYStartH[]      = { 121,   131,   121,   131,235-44, 235-44,299-40,     299-40, 235-44,235-44 };                //
             - 0x040[7:6],0x045 InputCrop
 979          code    WORD    MYStartV[]      = { 19,   21,           38,   44,       20,             20,   25,       25,     41,     41 };   
 980          #else
              
              code    BYTE  YUV_VDE_NOSCALE[] = { 21,    24,    40,    46,    22,    22,    27,    27,    22,    22 };                // 
             -use as V-DE 0x215     
              
              
              code    WORD    MYStartH[]      = { 121,   131,   121,   131,235-44,   235-44,  299-40,  299-40,        235-44, 235-44 
             -};                // 0x040[7:6],0x045 InputCrop
              code    WORD    MYStartV[]      = { 19,   21,   38,   44,       20,     20,  25, 25,    41, 41 };       
              #endif
 988          
 989          
 990          
 991          #if defined(SUPPORT_COMPONENT)
 992          //-----------------------------------------------------------------------------
 993          /**
 994          * find component input mode
 995          *
 996          * @return
 997          *       0: fail.
 998          *       other:success. component mode+1 value.
 999          * @todo
1000          *       Current code can not have a return value 0.
1001          */
1002          BYTE FindInputModeCOMP( void )
1003          {
1004   1              DWORD   vperiod;
1005   1              WORD    vtotal;
1006   1              BYTE    vfreq, i;
1007   1      
1008   1              //
1009   1              // get a vertical frequency and  a vertical total scan lines.
1010   1              //
1011   1              //BKFYI. We donot have a PLL value yet that depend on the mode.
1012   1              //so, we are using 27MHz register.
1013   1              vfreq = MeasGetVFreq();
1014   1      
1015   1              if ( vfreq < 55 ) vfreq = 50;
1016   1              else  vfreq = 60;
1017   1      
1018   1              vtotal = MeasGetVPeriod();      //Vertical Period Registers
1019   1              i = 0;
1020   1      
1021   1              dPrintf( "\nYUV: VPeriod:%ld, VFreq: %bdHz, VTotal: %d", vperiod, vfreq, vtotal );
1022   1              if ( vfreq == 50 ) {
1023   2                      if ( vtotal < 320 )                     i = 2;  // 576i  = 625 for 2, 312.5
1024   2                      else if ( vtotal < 590 )        i = 5;  // 1080i50A
1025   2                      else if ( vtotal < 630 )        i = 4;  // 576P=625     or 1080i50B = sync=5      // vblank length different 576P=45, 1
             -080i=21
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 18  

1026   2                                                                                              // can check with even/odd measure
1027   2                      else if ( vtotal < 800 )        i = 7;  // 720P = 750
1028   2                      else                                            i = 9;  // 1080P = 1250 total from set-top box
1029   2              }
1030   1              else {
1031   2                      if ( vtotal < 300 )                     i = 1;  // 480i = 525 for 2, 262.5
1032   2                      else if ( vtotal < 540 )        i = 3;  // 480P = 525
1033   2                      else if ( vtotal < 600 )        i = 6;  // 1080i
1034   2                      else if ( vtotal < 800 )        i = 8;  // 720P = 750
1035   2                      else                                            i = 10; // 1080P
1036   2              }
1037   1      
1038   1              return (i);                                                     // not support
1039   1      }
1040          #endif
1041          
1042          
1043          
1044          #ifdef SUPPORT_PC
1045          //-----------------------------------------------------------------------------
1046          /**
1047          * set inputcrop for PC
1048          *
1049          * output
1050          *       RGB_HSTART
1051          */
1052          static void PCSetInputCrop( BYTE mode )
1053          {
1054   1              BYTE    offset, HPol, VPol;
1055   1              WORD    hstart, vstart;
1056   1              WORD    Meas_HPulse,Meas_VPulse;
1057   1      
1058   1              //r041[0] r040[4]
1059   1              WriteTW88Page(PAGE0_INPUT );
1060   1              offset = ReadTW88(REG041) & 1;  //?RGB
1061   1              offset *= 2;
1062   1              offset += 2;
1063   1              offset += ((ReadTW88(REG040)&0x10) >> 4 );      //implicit DE
1064   1      
1065   1              HPol = (ReadTW88(REG041) >> 2) & 1;
1066   1              VPol = (ReadTW88(REG041) >> 3) & 1;
1067   1      
1068   1              dPrintf("\nPCSetInputCrop offset:%bd, HPol: %bd, VPol: %bd", offset, HPol, VPol );
1069   1      
1070   1              //read sync width
1071   1              Meas_HPulse = MeasGetHSyncRiseToFallWidth();
1072   1              Meas_VPulse = MeasGetVSyncRiseToFallWidth();
1073   1              dPrintf("\n\tHPulse: %d, VPulse: %d", Meas_HPulse, Meas_VPulse );
1074   1      
1075   1              hstart = MeasHStart + offset - (Meas_HPulse*HPol);
1076   1              vstart = MeasVStart - (Meas_VPulse*VPol);
1077   1              RGB_HSTART = hstart;
1078   1      
1079   1              //adjust EEPROM. 0..100. base 50. reversed value.
1080   1              hstart += 50;
1081   1              hstart -= GetHActiveEE(mode); //PcBasePosH;
1082   1      
1083   1              dPrintf("\n\tModified HS: %d, VS: %d", hstart, vstart );
1084   1              dPrintf("\n\tHLen: %d, VLen: %d", MeasHLen, MeasVLen );
1085   1      
1086   1              //InputSetCrop(hstart, vstart, MeasHLen, MeasVLen);
1087   1              InputSetCrop(hstart, 1, MeasHLen, 0x7FE);
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 19  

1088   1      }
1089          #endif //#ifdef SUPPORT_PC
1090          
1091          #if defined(SUPPORT_COMPONENT)
1092          //-----------------------------------------------------------------------------
1093          /**
1094          * set component output value
1095          *
1096          */
1097          static void YUVSetOutput(BYTE mode)
1098          {
1099   1              BYTE HDE;
1100   1              WORD temp16;
1101   1      
1102   1              //ScalerWriteOutputWidth(PANEL_H+1);
1103   1              //ScalerWriteOutputHeight(PANEL_V);
1104   1      
1105   1              ScalerSetHScale(YUVDisplayH[mode]);
1106   1              ScalerSetVScale(YUVDisplayV[mode]);
1107   1      
1108   1              HDE = ScalerReadLineBufferDelay() + 32;
1109   1              dPrintf("\nH-DE start = %bd", HDE);
1110   1              ScalerWriteHDEReg(HDE);
1111   1              ScalerWriteVDEReg(YUVOffsetV[mode]);
1112   1      
1113   1              //===== Free Run settings ==========
1114   1              temp16=ScalerCalcFreerunHtotal();
1115   1              ScalerWriteFreerunHtotal(temp16);
1116   1      
1117   1              temp16 = ScalerCalcFreerunVtotal();
1118   1              ScalerWriteFreerunVtotal(temp16);
1119   1      
1120   1              ScalerSetFreerunAutoManual(ON,OFF);
1121   1              ScalerSetMuteAutoManual(ON,OFF);
1122   1      }
1123          #endif
1124          
1125          #ifdef SUPPORT_PC
1126          //-----------------------------------------------------------------------------
1127          /**
1128          * set PC output value
1129          *
1130          * extern
1131          *       MeasHLen
1132          *       MeasVLen
1133          */
1134          static void PCSetOutput( BYTE mode )
1135          {
1136   1              BYTE HDE;
1137   1              WORD temp16;
1138   1      
1139   1              dPuts("\nPCSetOutput");
1140   1      
1141   1              ScalerSetHScale(MeasHLen);
1142   1              ScalerSetVScale(MeasVLen);
1143   1      
1144   1              //=============HDE=====================
1145   1              HDE = ScalerCalcHDE();
1146   1              dPrintf("\n\tH-DE start = %bd", HDE);
1147   1              ScalerWriteHDEReg(HDE); //BKFYI. Scaler ouput width : 801
1148   1      
1149   1              //=============VDE=====================
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 20  

1150   1              temp16 = ScalerCalcVDE();
1151   1              dPrintf("\n\tV-DE start = %d", temp16);
1152   1              RGB_VDE = temp16;
1153   1              //use EEPROM
1154   1              temp16 += GetVBackPorchEE(mode);
1155   1              temp16 -= 50;
1156   1              dPrintf("=> %d", temp16);
1157   1              ScalerWriteVDEReg((BYTE)temp16);
1158   1      
1159   1              //================= H Free Run settings ===================================
1160   1              temp16=ScalerCalcFreerunHtotal();
1161   1              dPrintf("\n\tFree Run Htotal: 0x%x", temp16);
1162   1              ScalerWriteFreerunHtotal(temp16);
1163   1      
1164   1              //================= V Free Run settings ===================================
1165   1              temp16=ScalerCalcFreerunVtotal();
1166   1              dPrintf("\n\tFree Run Vtotal: 0x%x", temp16);
1167   1              ScalerWriteFreerunVtotal(temp16);
1168   1      
1169   1              //================= FreerunAutoManual, MuteAutoManual =====================
1170   1              ScalerSetFreerunAutoManual(ON,OFF);
1171   1              ScalerSetMuteAutoManual(ON,0x02);       //use skip on Manual.
1172   1      }
1173          #endif
1174          
1175          #ifdef SUPPORT_PC
1176          //-----------------------------------------------------------------------------
1177          /** 
1178          * check PC mode
1179          *
1180          * @return
1181          *       0:fail
1182          *       other: pc mode value
1183          */
1184          static BYTE PCCheckMode(void)
1185          {
1186   1              BYTE i, mode;
1187   1              WORD VTotal;    //dummy
1188   1      
1189   1              for(i=0; i < 10; i++) {
1190   2                      if(MeasStartMeasure())
1191   2                              return 0;
1192   2      
1193   2                      mode = FindInputModePC(&VTotal);        // find input mode from Vfreq and VPeriod
1194   2                      if(mode) {
1195   3                              dPrintf("\nPCCheckMode ret:%bd",mode);
1196   3                              return mode;
1197   3                      }
1198   2              }
1199   1      
1200   1              return 0;
1201   1      }
1202          #endif
1203          
1204          #if defined(SUPPORT_PC) || defined(SUPPORT_DVI) || defined(SUPPORT_HDMI_EP9351)|| defined(SUPPORT_HDMI_SiI
             -RX)
1205          //-----------------------------------------------------------------------------
1206          /** 
1207          * adjust the pixel clock
1208          *
1209          * oldname: void PCLKAdjust( BYTE mode )
1210          *
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 21  

1211          * INPUT_PC
1212          *       use mode.
1213          *
1214          * INPUT_DVI
1215          *       skip divider & mode.
1216          *
1217          * INPUT_HDMI
1218          *       use divider.
1219          */
1220          void AdjustPixelClk(WORD digital_divider, BYTE mode )
1221          {
1222   1              DWORD   PCLK, PCLK1, PCLK2;
1223   1              BYTE    i, PCLKO;
1224   1              WORD    HDown, HPeriod, Divider, VPN, VScale, HActive, H_DE;
1225   1              DWORD   VPeriod, VFreq;
1226   1      
1227   1      
1228   1              PCLK = SspllGetPPF(0);
1229   1              //      FPCLK1 calculation
1230   1              //      FREQ = REG(0x0f8[3:0],0x0f9[7:0],0x0fa[7:0])                                                                                                                            
1231   1              //      POST = REG(0x0fd[7:6])
1232   1              //      Hperiod = REG(0x524[7:0],0x525[7:0])
1233   1              //      Divider = REG(0x1c3[3:0],0x1c4[7:0]) ;;InFreq = (Divider+1) * (27000000 * FREQ / ((2^15)*(2^POST))) / 
             -Hperiod
1234   1              //      Hdown = REG(0x20a[3:0],0x209[7:0])
1235   1              //      PCLKO = REG(0x20d[1:0]) {1,1,2,3}
1236   1              //      PCLKx = REG(0x20d[1:0]) {1,2,3,4}
1237   1              //      result = ((Divider+1) * (27000000 * FREQ / ((2^15)*(2^POST))) / Hperiod) * (1024 / Hdown) * (PCLKx / P
             -CLKO)
1238   1              //      result = ((Divider+1) * FPCLK / Hperiod) * (1024 / Hdown) * (PCLKx / PCLKO)
1239   1      
1240   1              HDown=ScalerReadXDownReg();
1241   1              HPeriod = MeasGetHPeriod();
1242   1              VPeriod = MeasGetVPeriod27();
1243   1              VFreq = 27000000L / VPeriod;
1244   1      #if defined(SUPPORT_PC)
1245   1              if(InputMain==INPUT_PC /*|| InputMain==INPUT_COMP*/) {
1246   2                      Divider = VAdcLLPLLGetDivider() + 1;
1247   2                      //Divider = PCMDATA[ mode ].htotal - 1 +1;
1248   2              }
1249   1              else 
1250   1      #endif
1251   1              {
1252   2                      //DTV input(DVI,HDMI)
1253   2                      //if DVI ??. No Component
1254   2                      if(InputMain==INPUT_DVI) {
1255   3                              Divider = MeasGetDviDivider();
1256   3                      }
1257   2                      else {
1258   3                              //HDMI
1259   3                              Divider = digital_divider; //DVI_Divider;
1260   3                      }
1261   2              }
1262   1      
1263   1              VPN = MeasGetVPeriod();
1264   1              VScale = ScalerReadVScaleReg();
1265   1      
1266   1              H_DE = ScalerReadHDEReg();
1267   1              HActive = ScalerReadOutputWidth();
1268   1              //      FPCLK2 calculation
1269   1              //      PCLKx = REG(0x20d[1:0]) {1,2,3,4}
1270   1              //      VPN    = REG(0x522[7:0],0x523[7:0])
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 22  

1271   1              //      Vscale = REG(0x206[7:0],0x205[7:0]) ;;Vtotal = VPN / (Vscale / 8192)
1272   1              //      H_DE   = REG(0x210[7:0])
1273   1              //      Hactive= REG(0x212[3:0],0x211[7:0]) ;;Htotal = H_DE + Hactive + 10
1274   1              //      Vperiod = REG(0x543[7:0],0x544[7:0],0x545[7:0]) ;;Vfreq = 27000000 / Vperiod
1275   1              //      result = (H_DE + Hactive + 1) * (VPN / (Vscale / 8192)) * (27000000 / Vperiod) * PCLKx
1276   1      
1277   1              dPrintf("\nPCLK:%ld, Divider: %d, HPeriod: %d, HDown: %d", PCLK, Divider, HPeriod, HDown);
1278   1              if(InputMain==INPUT_PC) {
1279   2                      for ( i=2; i<=4; i++ ) {
1280   3                              //PCLK1 = (DWORD)(((Divider+1) * PCLK / HPeriod) * (1024 / HDown) * i ) / (i-1);
1281   3                              /*
1282   3                              PCLK1 = PCLK / HPeriod;
1283   3                              dPrintf("\n PCLK1 = PCLK / HPeriod :: %ld", PCLK1 );
1284   3                              PCLK1 *= (Divider+1);
1285   3                              dPrintf("\n PCLK1 *= (Divider+1) :: %ld", PCLK1 );
1286   3                              PCLK1 /= HDown;
1287   3                              dPrintf("\n PCLK1 /= HDown :: %ld", PCLK1 );
1288   3                              PCLK1 *= 1024;
1289   3                              dPrintf("\n PCLK1 *= 1024 :: %ld", PCLK1 );
1290   3                              PCLK1 = (PCLK1 * i) / (i-1);
1291   3                              */
1292   3                              PCLK1 = ((((Divider+1) * VFreq * VPN ) / HDown) * 1024 * i ) / (i-1);
1293   3                              PCLK2 = (DWORD)( H_DE + HActive + 1 ) * ( VPN * 8192L* VFreq * i / VScale ) ;
1294   3                              dPrintf("\n[%bd] - PCLK1: %ld, PCLK2: %ld", i, PCLK1, PCLK2);
1295   3                              if ( i == 2 ) {
1296   4                                      PCLKO = 2;
1297   4                                      if ( PCLK1 > PCLK2 ) {
1298   5                                              PCLK = PCLK1;
1299   5                                      }
1300   4                                      else {
1301   5                                              PCLK = PCLK2;
1302   5                                      }
1303   4                              }
1304   3                              else {
1305   4                                      if ( PCLK1 > PCLK2 ) {
1306   5                                              if ( PCLK > PCLK1 )     {
1307   6                                                      PCLK = PCLK1;
1308   6                                                      PCLKO = i;
1309   6                                              }
1310   5                                      }
1311   4                                      else {
1312   5                                              if ( PCLK > PCLK2 )     {
1313   6                                                      PCLK = PCLK2;
1314   6                                                      PCLKO = i;
1315   6                                              }
1316   5                                      }
1317   4                              }
1318   3                      }
1319   2                      PclkoSetDiv(PCLKO-1);
1320   2      #ifdef  CHIP_MANUAL_TEST
                                      PclkSetPolarity(0);     //normal
              #else
1323   2                      if(mode>=5 && mode <= 8)        //640x480@60 
1324   2                              PclkSetPolarity(0);     //normal
1325   2                      else
1326   2                              PclkSetPolarity(1);     //invert
1327   2      #endif
1328   2      
1329   2      
1330   2                      dPrintf("\nMinimum PCLK is %ld at PCLKO: %bd", PCLK, PCLKO );
1331   2                      PCLK = PCLK + 4000000L;
1332   2                      dPrintf("\nAdd 2MHz to PCLK is %ld", PCLK );
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 23  

1333   2              
1334   2                      i = SspllGetPost(0);
1335   2                      PCLK = SspllFREQ2FPLL(PCLK, i);
1336   2      
1337   2              }
1338   1              else {
1339   2                      //DVI & HDMI
1340   2                      i = 3;
1341   2                      {
1342   3                              PCLK1 = ((((Divider+1) * VFreq * VPN ) / HDown) * 1024 * i ) / (i-1);
1343   3                              PCLK2 = (DWORD)( H_DE + HActive + 1 ) * ( VPN * 8192L* VFreq * i / VScale ) ;
1344   3                              dPrintf("\n[%bd] - PCLK1: %ld, PCLK2: %ld", i, PCLK1, PCLK2);
1345   3                              if ( PCLK1 > PCLK2 ) {
1346   4                                      PCLK = PCLK1;
1347   4                              }
1348   3                              else {
1349   4                                      PCLK = PCLK2;
1350   4                              }
1351   3                              PCLK += 5000000L;
1352   3                              if ( PCLK < 108000000L )        
1353   3                                      PCLK = 108000000L;
1354   3                              else if ( PCLK > 120000000L )
1355   3                                      PCLK = 120000000L;
1356   3                      }
1357   2                      dPrintf("\nFound PCLK is %ld", PCLK, PCLKO );
1358   2                      WriteTW88Page(0 );
1359   2                      if ( PCLK == 108000000L )
1360   2                              PCLK = 0x20000L;
1361   2                      else {
1362   3                              i = SspllGetPost(0);
1363   3                              PCLK = SspllFREQ2FPLL(PCLK, i);
1364   3                      }
1365   2              }
1366   1      
1367   1      
1368   1              SspllSetFreqReg(PCLK);  
1369   1      
1370   1              //WriteTW88Page(page );
1371   1      }
1372          #endif
1373          
1374          
1375          #ifdef SUPPORT_COMPONENT
1376          //-----------------------------------------------------------------------------
1377          /**
1378          * convert the component mode to HW mode.
1379          *
1380          * SW and HW use a defferent mode value.
1381          * ISR will check the HW mode value to check the SYNC change.
1382          */
1383          static BYTE ConvertComponentMode2HW(BYTE mode)
1384          {
1385   1              BYTE new_mode;
1386   1              switch(mode) {
1387   2              case 0: new_mode = mode;        break;  //480i
1388   2              case 1: new_mode = mode;        break;  //576i
1389   2              case 2: new_mode = mode;        break;  //480p
1390   2              case 3: new_mode = mode;        break;  //576p
1391   2              case 4: new_mode = 4;           break;  //1080i25->1080i
1392   2              case 5: new_mode = 4;           break;  //1080i30->1080i
1393   2              case 6: new_mode = 5;           break;  //720p50->720p
1394   2              case 7: new_mode = 5;           break;  //720p60->720p
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 24  

1395   2              case 8: new_mode = 6;           break;  //1080p50->1080p
1396   2              case 9: new_mode = 6;           break;  //1080p60->1080p
1397   2              default: new_mode = 7;          break;  //UNKNOWN->non of above
1398   2              }
1399   1              return new_mode;
1400   1      }
1401          #endif
1402          
1403          #define MEAS_YPBPR_MODE_480I            0
1404          #define MEAS_YPBPR_MODE_576I            1
1405          #define MEAS_YPBPR_MODE_480P            2
1406          #define MEAS_YPBPR_MODE_576P            3
1407          #define MEAS_YPBPR_MODE_1080I25         4
1408          #define MEAS_YPBPR_MODE_1080I30         5
1409          #define MEAS_YPBPR_MODE_720P50          6
1410          #define MEAS_YPBPR_MODE_720P60          7
1411          #define MEAS_YPBPR_MODE_1080P50         8
1412          #define MEAS_YPBPR_MODE_1080P60         9
1413          
1414          
1415          
1416          #ifdef SUPPORT_COMPONENT
1417          //-----------------------------------------------------------------------------
1418          /**
1419          * check and set the componnent
1420          *
1421          * oldname: BYTE CheckAndSetYPBPR( void )
1422          * @return
1423          *       success :ERR_SUCCESS
1424          *       fail    :ERR_FAIL
1425          */
1426          BYTE CheckAndSetComponent( void )
1427          {
1428   1              BYTE    i,j;
1429   1              BYTE    mode, modeNew;
1430   1              BYTE ret;
1431   1              WORD temp16;
1432   1              DWORD temp32;
1433   1              DECLARE_LOCAL_page
1434   1              ReadTW88Page(page);
1435   1      
1436   1              InputVAdcMode = 0;              //BK111012
1437   1      
1438   1              for(i=0; i < 10; i++) {
1439   2                      for(j=0; j < 10; j++) {
1440   3                              if(MeasStartMeasure()) {
1441   4                                      WriteTW88Page(page );
1442   4                                      return ERR_FAIL;
1443   4                              }
1444   3                              // find input mode from Vfreq and VPeriod
1445   3                              mode = FindInputModeCOMP();     
1446   3                              if(mode)
1447   3                                      break;
1448   3                      }       
1449   2                      if(mode==0) {
1450   3                              WriteTW88Page(page );
1451   3                              return ERR_FAIL;
1452   3                      }
1453   2      #ifdef MODEL_TW8835FPGA
                              SetExtVAdcI2C(0x98, mode + 4 -1);  //I did not adjust mode yet. So need a minus.
              #endif
1456   2      
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 25  

1457   2                      VAdcSetLLPLLControl(0xF2);      // POST[7:6]= 3 -> div 1, VCO: 40~216, Charge Pump: 5uA
1458   2                      ret = VAdcLLPLLUpdateDivider(YUVDividerPLL[ mode-1 ] - 1, 1, 0 );
1459   2                      if(ret==ERR_FAIL) {
1460   3                              WriteTW88Page(page );
1461   3                              return ERR_FAIL;
1462   3                      }               
1463   2      
1464   2                      //BKFYI.VAdcLLPLLUpdateDivider(, 1,) has a MeasStartMeasure().
1465   2      
1466   2                      // find input mode and compare it is same or not
1467   2                      modeNew = FindInputModeCOMP();  
1468   2                      if(mode==modeNew)
1469   2                              break;
1470   2              }
1471   1              //if mode!=modeNew, just use mode..
1472   1      
1473   1              dPrintf("\nFind YUV mode: %bd", mode );
1474   1              //now adjust mode.
1475   1              mode--;
1476   1              InputVAdcMode = mode + EE_YUVDATA_START;
1477   1              InputSubMode = ConvertComponentMode2HW(mode);
1478   1      
1479   1      
1480   1              switch(mode) {
1481   2              case 0: I2CDeviceInitialize(DataInit_Component_Init480i_step1, 0);      break;
1482   2              case 1: I2CDeviceInitialize(DataInit_Component_Init576i_step1, 0);      break;
1483   2              case 2: I2CDeviceInitialize(DataInit_Component_Init480p_step1, 0);      break;
1484   2              case 3: I2CDeviceInitialize(DataInit_Component_Init576p_step1, 0);      break;
1485   2              case 4: //we can't distinglish H28 and H31. Please select one.
1486   2                              I2CDeviceInitialize(DataInit_Component_Init1080i25_H28_step1, 0);       break;
1487   2                              //I2CDeviceInitialize(DataInit_Component_Init1080i25_H31_step1, 0);     break;
1488   2              case 5: I2CDeviceInitialize(DataInit_Component_Init1080i30_step1, 0);           break;
1489   2              case 6: I2CDeviceInitialize(DataInit_Component_Init720p50_step1, 0);            break;
1490   2              case 7: I2CDeviceInitialize(DataInit_Component_Init720p60_step1, 0);            break;
1491   2              case 8: I2CDeviceInitialize(DataInit_Component_Init1080p50_H56_step1, 0);       break;
1492   2              case 9: I2CDeviceInitialize(DataInit_Component_Init1080p60_step1, 0);           break;
1493   2              default:
1494   2                      break;
1495   2              }
1496   1      
1497   1              VAdcSetClampModeHSyncEdge(ON);                                  //R1D4[5]
1498   1              VAdcSetClampPosition(YUVClampPos[mode]);
1499   1      
1500   1              MeasSetErrTolerance(4);                                                 //tolerance set to 32
1501   1              MeasEnableChangedDetection(ON);                                 // set EN. Changed Detection
1502   1      
1503   1              //check VPulse & adjust polarity
1504   1              temp16 = MeasGetVSyncRiseToFallWidth();
1505   1              if(temp16 > YUVDisplayV[mode]) {
1506   2                      dPrintf("\nVSyncWidth:%d", temp16);
1507   2                      WriteTW88Page(PAGE1_VADC );             
1508   2                      WriteTW88(REG1CC, ReadTW88(REG1CC) | 0x02);     
1509   2      
1510   2                      MeasStartMeasure();
1511   2                      temp16 = MeasGetVSyncRiseToFallWidth();
1512   2                      dPrintf("=>%d", temp16);                
1513   2              }
1514   1      
1515   1              //BKFYI: Component use a big value for Vertical Height. 0x700 + ((0xFF - YUVStartV[mode]))
1516   1              InputSetCrop(YUVStartH[mode], YUVStartV[mode], YUVDisplayH[mode], 0x700 + ((0xFF - YUVStartV[mode])));
1517   1      
1518   1              YUVSetOutput(mode);
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 26  

1519   1      
1520   1              SspllSetFreqReg(0x20000);       //108MHz. Where is a POST value ?
1521   1              YUV_PrepareInfoString(mode);
1522   1      
1523   1              //
1524   1              //check HStart
1525   1              MeasStartMeasure();
1526   1              temp16 = MeasGetHActive2();
1527   1              dPrintf("\n**measure:%d",temp16);
1528   1              if(mode < 4) { //SDTV or EDTV
1529   2              }
1530   1              else {                  //HDTV
1531   2                      temp16 = MYStartH[mode] + temp16;
1532   2              }
1533   1              temp16 -=16;    //HWidth
1534   1              temp16 += 3;
1535   1              temp16 += ((YUVCropH[mode] - YUVDisplayH[mode]) / 2);
1536   1              dPrintf("\n**HStart:%d suggest:%d",YUVStartH[mode],temp16);     
1537   1      
1538   1              //
1539   1              //check VDE
1540   1              if(mode < 4) { //SDTV or EDTV
1541   2                      temp16 = MeasGetVActive2();
1542   2                      dPrintf("\n**measure:%d",temp16);
1543   2                      //temp16 += 0.5;
1544   2                      temp16 -= MeasGetVSyncRiseToFallWidth();  //if use faling.
1545   2                      temp16 += ((YUVCropV[mode] - YUVDisplayV[mode]) / 2);
1546   2                      temp32 = temp16;
1547   2                      temp32 *= PANEL_V;
1548   2                      temp32 /= YUVDisplayV[mode];
1549   2                      dPrintf("\n**VDE:%bd suggest:%d",YUVOffsetV[mode],(WORD)temp32);
1550   2                              
1551   2                      temp16 = MeasGetVActive2();
1552   2                      temp16 += 1;    //NOTE
1553   2                      temp16 -= MeasGetVSyncRiseToFallWidth(); //if use faling.
1554   2                      temp16 += ((YUVCropV[mode] - YUVDisplayV[mode]) / 2);
1555   2                      temp32 = temp16;
1556   2                      temp32 *= PANEL_V;
1557   2                      temp32 /= YUVDisplayV[mode];
1558   2                      dPrintf("~%d",(WORD)temp32);
1559   2              }
1560   1              else {                  //HDTV
1561   2                      temp16 = MYStartV[mode];
1562   2                      //temp16 += 0.5;
1563   2                      temp16 -= MeasGetVSyncRiseToFallWidth();
1564   2                      temp16 += ((YUVCropV[mode] - YUVDisplayV[mode]) / 2);
1565   2                      temp32 = temp16;
1566   2                      temp32 *= PANEL_V;
1567   2                      temp32 /= YUVDisplayV[mode];
1568   2                      dPrintf("\n**VDE:%bd suggest:%d",YUVOffsetV[mode],(WORD)temp32);        
1569   2                      temp16 = MYStartV[mode];
1570   2                      temp16 += 1;    //NOTE
1571   2                      temp16 -= MeasGetVSyncRiseToFallWidth();
1572   2                      temp16 += ((YUVCropV[mode] - YUVDisplayV[mode]) / 2);
1573   2                      temp32 = temp16;
1574   2                      temp32 *= PANEL_V;
1575   2                      temp32 /= YUVDisplayV[mode];
1576   2                      dPrintf("~%d",(WORD)temp32);    
1577   2              }
1578   1              
1579   1      
1580   1              if(mode==0 || mode==1) //480i,  576i
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 27  

1581   1                      InputSetFieldPolarity(0);
1582   1              else
1583   1                      InputSetFieldPolarity(1);
1584   1      
1585   1              WriteTW88Page(page );
1586   1              return ERR_SUCCESS;
1587   1      }
1588          #endif
1589          
1590          
1591          #undef CHECK_USEDTIME
1592          #ifdef SUPPORT_PC
1593          //-----------------------------------------------------------------------------
1594          /**
1595          * check and set the PC
1596          *
1597          * calls from ChangePC and Interrupt Handler
1598          * @return
1599          *       0:ERR_SUCCESS
1600          *       1:ERR_FAIL
1601          * @see ChangePC
1602          * @see CheckAndSetInput
1603          * @see NoSignalTask
1604          */
1605          BYTE CheckAndSetPC(void)
1606          {
1607   1              BYTE mode,new_mode;
1608   1      
1609   1      #ifdef CHECK_USEDTIME
                      DWORD UsedTime;
              #endif
1612   1              BYTE value;
1613   1              BYTE value1;
1614   1              WORD new_VTotal;
1615   1              WORD wTemp;
1616   1              BYTE ret;
1617   1              DECLARE_LOCAL_page
1618   1      
1619   1      
1620   1              ReadTW88Page(page);
1621   1      #ifdef CHECK_USEDTIME
                      UsedTime = SystemClock;
              #endif
1624   1              InputVAdcMode = 0;              //BK111012
1625   1              InputSubMode = InputVAdcMode;
1626   1      
1627   1              do {
1628   2                      mode = PCCheckMode();
1629   2                      if(mode==0) {
1630   3                              WriteTW88Page(page );
1631   3                              return ERR_FAIL;
1632   3                      }
1633   2      
1634   2      #ifdef MODEL_TW8835FPGA
                              if(mode==5)                                             SetExtVAdcI2C(0x98, 0);         //VGA@60
                              else if(mode==10)                               SetExtVAdcI2C(0x98, 1);         //SVGA@60
                              else if(mode==18)                               SetExtVAdcI2C(0x98, 2);         //XGA@60
                              else if(mode==43 || mode==44)   SetExtVAdcI2C(0x98, 3);         //SXGA 1400x1050@60
              #endif
1640   2      
1641   2                      //
1642   2                      //set LLPLL     & wait
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 28  

1643   2                      //
1644   2                      //BK110927
1645   2                      //BK110928 assume LoopGain:2.
1646   2                      //LLPLL divider:PCMDATA[ mode ].htotal - 1
1647   2                      //ControlValue, 0xF2.  POST[7:6]= 3 -> div 1, VCO: 40~216, Charge Pump: 5uA
1648   2                      //LLPLL init: ON
1649   2                      //Wait delay for WaitStableLLPLL: 40ms
1650   2                      //LLPLL Control.
1651   2                      VAdcSetLLPLLControl(0xF2);      // POST[7:6]= 3 -> div 1, VCO: 40~216, Charge Pump: 5uA
1652   2                      ret = VAdcLLPLLUpdateDivider(PCMDATA[ mode ].htotal - 1, 1, 40 );
1653   2                      if(ret==ERR_FAIL) {
1654   3                              WriteTW88Page(page );
1655   3                              return ERR_FAIL;
1656   3                      }
1657   2      
1658   2                      VAdcSetPolarity(0);
1659   2      
1660   2                      //check Phase EEPROM.
1661   2                      value = GetPhaseEE(mode);
1662   2                      if(value!=0xFF) {
1663   3                              dPrintf("\nuse Phase 0x%bx",value);
1664   3                              value1=VAdcGetPhase();
1665   3                              if(value != value1) {
1666   4                                      dPrintf("  update from 0x%bx",value1);
1667   4                                      VAdcSetPhase(value, 0); //BKTODO? Why it does not have a init ?
1668   4                                      if(WaitStableLLPLL(0)) {
1669   5                                              WriteTW88Page(page );
1670   5                                              return ERR_FAIL;
1671   5                                      }
1672   4                              }
1673   3                              else {
1674   4                                      WaitStableLLPLL(0); //BK110830
1675   4                                      MeasCheckVPulse();
1676   4                              }
1677   3                      }
1678   2                      else 
1679   2                      {
1680   3                              AutoTunePhase();
1681   3                              value=VAdcGetPhase();
1682   3                              dPrintf("\ncalculate Phase %bx",value);
1683   3                              SavePhaseEE(mode,value);
1684   3      
1685   3                              if(WaitStableLLPLL(0)) {
1686   4                                      WriteTW88Page(page );
1687   4                                      return ERR_FAIL;
1688   4                              }
1689   3                      }
1690   2                      //adjust polarity again and update all measured value
1691   2                      VAdcSetPolarity(0);
1692   2                      MeasStartMeasure();
1693   2      
1694   2                      //use measured value.  
1695   2                      MeasVLen = MeasGetVActive( &MeasVStart );                               //v_active_start v_active_perios
1696   2                      MeasHLen = MeasGetHActive( &MeasHStart );                               //h_active_start h_active_perios
1697   2      
1698   2                      dPrintf("\nMeasure Value Start %dx%d Len %dx%d", MeasHStart,MeasVStart, MeasHLen,MeasVLen);
1699   2      
1700   2                      if ( MeasVLen < PCMDATA[ mode ].van ) {                 // use table
1701   3                              MeasVStart = PCMDATA[mode].vstart;
1702   3                              MeasVLen = PCMDATA[mode].van;
1703   3                              dPrintf("->VS:%d VLen:%d",MeasVStart,MeasVLen);
1704   3                      }
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 29  

1705   2                      if ( MeasHLen < PCMDATA[ mode ].han ) {                 // use table
1706   3                              MeasHStart = PCMDATA[mode].hstart;
1707   3                              MeasHLen = PCMDATA[mode].han;
1708   3                              dPrintf("->HS:%d HLen:%d",MeasHStart,MeasHLen);
1709   3                      }
1710   2      
1711   2                      PCSetInputCrop(mode);
1712   2                      PCSetOutput(mode);
1713   2      
1714   2                      new_mode = FindInputModePC(&new_VTotal);
1715   2              } while(mode != new_mode);
1716   1      
1717   1              InputVAdcMode = mode;
1718   1              InputSubMode = InputVAdcMode;
1719   1      
1720   1              //EE
1721   1              //PCLKAdjust();
1722   1              AdjustPixelClk(0, mode); //BK120117 need a divider value
1723   1      
1724   1              //adjust PCPixelClock here.
1725   1              //If R1C4[], measure block use a wrong value.
1726   1              wTemp = PCMDATA[ mode ].htotal - 1;
1727   1              dPrintf("\nPixelClk %d",wTemp);
1728   1              wTemp += GetPixelClkEE(mode);   //0..100. default:50
1729   1              wTemp -= 50;
1730   1              dPrintf("->%d EEPROM:%bd",wTemp,GetPixelClkEE(mode));
1731   1      
1732   1              VAdcLLPLLUpdateDivider(wTemp, OFF, 0);  //without init. Do you need VAdcSetLLPLLControl(0xF2) ?
1733   1              
1734   1              MeasSetErrTolerance(4);                                         //tolerance set to 32
1735   1              MeasEnableChangedDetection(ON);                         //set EN. Changed Detection
1736   1              
1737   1              PC_PrepareInfoString(mode);
1738   1      
1739   1      #ifdef CHECK_USEDTIME
                      UsedTime = SystemClock - UsedTime;
                      Printf("\nUsedTime:%ld.%ldsec", UsedTime/100, UsedTime%100 );
              #endif
1743   1                              
1744   1              WriteTW88Page(page );
1745   1      
1746   1              return ERR_SUCCESS;
1747   1      }
1748          #endif
1749          
1750          //=============================================================================
1751          //setup menu interface
1752          //=============================================================================
1753          #ifdef SUPPORT_PC
1754          //-----------------------------------------------------------------------------
1755          void PCRestoreH(void)
1756          {
1757   1              WORD hstart;
1758   1              hstart = RGB_HSTART;
1759   1      
1760   1              if(InputVAdcMode==0) {
1761   2                      //?Freerun mode
1762   2                      return;
1763   2              }
1764   1              //adjust EEPROM. 0..100. base 50. reversed value.
1765   1              hstart += 50;
1766   1              hstart -= GetHActiveEE(InputVAdcMode); //PcBasePosH;
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 30  

1767   1              InputSetHStart(hstart);
1768   1      }
1769          //-----------------------------------------------------------------------------
1770          void PCRestoreV(void)
1771          {
1772   1              WORD temp16;
1773   1              temp16 = RGB_VDE;
1774   1              dPrintf("\n\tV-DE start = %d", temp16);
1775   1      
1776   1              if(InputVAdcMode==0) {
1777   2                      //?Freerun mode
1778   2                      return;
1779   2              }
1780   1      
1781   1              temp16 += GetVBackPorchEE(InputVAdcMode);
1782   1              temp16 -= 50;
1783   1              dPrintf("=> %d", temp16);
1784   1              ScalerWriteVDEReg((BYTE)temp16);
1785   1      }
1786          //-----------------------------------------------------------------------------
1787          void PCResetCurrEEPROMMode(void)
1788          {
1789   1              BYTE temp;
1790   1              temp = GetPixelClkEE(InputVAdcMode);
1791   1              if(temp!=50)
1792   1                      SavePixelClkEE(InputVAdcMode,50);
1793   1              temp = GetPhaseEE(InputVAdcMode);
1794   1              if(temp != 0xFF)        //NOTE. CheckAndSetPC1 will update it.
1795   1                      SavePhaseEE(InputVAdcMode,0xFF);        
1796   1              temp = GetHActiveEE(InputVAdcMode);
1797   1              if(temp!=50)
1798   1                      SaveHActiveEE(InputVAdcMode,50);
1799   1              temp = GetVBackPorchEE(InputVAdcMode);
1800   1              if(temp!=50)
1801   1                      SaveVBackPorchEE(InputVAdcMode,50);     
1802   1      }
1803          #endif
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 31  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00DD (BEGIN)
0000         L?0222:
0000 F0                MOVX    @DPTR,A
0001 E500        E     MOV     A,regTW88+01H
0003 24D0              ADD     A,#0D0H
0005 F582              MOV     DPL,A
0007 E500        E     MOV     A,regTW88
0009 3401              ADDC    A,#01H
000B F583              MOV     DPH,A
000D E4                CLR     A
000E F0                MOVX    @DPTR,A
000F E500        E     MOV     A,regTW88+01H
0011 24D1              ADD     A,#0D1H
0013 F582              MOV     DPL,A
0015 E500        E     MOV     A,regTW88
0017 3401              ADDC    A,#01H
0019 F583              MOV     DPH,A
001B 74F0              MOV     A,#0F0H
001D F0                MOVX    @DPTR,A
001E E500        E     MOV     A,regTW88+01H
0020 24D2              ADD     A,#0D2H
0022 F582              MOV     DPL,A
0024 E500        E     MOV     A,regTW88
0026 3401              ADDC    A,#01H
0028 F583              MOV     DPH,A
002A 74F0              MOV     A,#0F0H
002C F0                MOVX    @DPTR,A
002D E500        E     MOV     A,regTW88+01H
002F 24D3              ADD     A,#0D3H
0031 F582              MOV     DPL,A
0033 E500        E     MOV     A,regTW88
0035 3401              ADDC    A,#01H
0037 F583              MOV     DPH,A
0039 74F0              MOV     A,#0F0H
003B F0                MOVX    @DPTR,A
003C E500        E     MOV     A,regTW88+01H
003E 24D4              ADD     A,#0D4H
0040 F582              MOV     DPL,A
0042 E500        E     MOV     A,regTW88
0044 3401              ADDC    A,#01H
0046 F583              MOV     DPH,A
0048 7420              MOV     A,#020H
004A F0                MOVX    @DPTR,A
004B E500        E     MOV     A,regTW88+01H
004D 24D5              ADD     A,#0D5H
004F F582              MOV     DPL,A
0051 E500        E     MOV     A,regTW88
0053 3401              ADDC    A,#01H
0055 F583              MOV     DPH,A
0057 E4                CLR     A
0058 F0                MOVX    @DPTR,A
0059 E500        E     MOV     A,regTW88+01H
005B 24D6              ADD     A,#0D6H
005D F582              MOV     DPL,A
005F E500        E     MOV     A,regTW88
0061 3401              ADDC    A,#01H
0063 F583              MOV     DPH,A
0065 7410              MOV     A,#010H
0067 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 32  

0068 E500        E     MOV     A,regTW88+01H
006A 24D7              ADD     A,#0D7H
006C F582              MOV     DPL,A
006E E500        E     MOV     A,regTW88
0070 3401              ADDC    A,#01H
0072 F583              MOV     DPH,A
0074 E4                CLR     A
0075 F0                MOVX    @DPTR,A
0076 E500        E     MOV     A,regTW88+01H
0078 24D9              ADD     A,#0D9H
007A F582              MOV     DPL,A
007C E500        E     MOV     A,regTW88
007E 3401              ADDC    A,#01H
0080 F583              MOV     DPH,A
0082 7402              MOV     A,#02H
0084 F0                MOVX    @DPTR,A
0085 E500        E     MOV     A,regTW88+01H
0087 24DA              ADD     A,#0DAH
0089         L?0223:
0089 F582              MOV     DPL,A
008B E500        E     MOV     A,regTW88
008D 3401              ADDC    A,#01H
008F F583              MOV     DPH,A
0091 22                RET     
0092         L?0224:
0092         L?0225:
0092 C3                CLR     C
0093 900000      R     MOV     DPTR,#temp16+01H
0096 E0                MOVX    A,@DPTR
0097 9F                SUBB    A,R7
0098 F0                MOVX    @DPTR,A
0099 900000      R     MOV     DPTR,#temp16
009C E0                MOVX    A,@DPTR
009D 9E                SUBB    A,R6
009E F0                MOVX    @DPTR,A
009F 900000      R     MOV     DPTR,#mode
00A2 E0                MOVX    A,@DPTR
00A3 FF                MOV     R7,A
00A4 25E0              ADD     A,ACC
00A6 2400        R     ADD     A,#LOW YUVDisplayV
00A8 F582              MOV     DPL,A
00AA E4                CLR     A
00AB 3400        R     ADDC    A,#HIGH YUVDisplayV
00AD F583              MOV     DPH,A
00AF E4                CLR     A
00B0 93                MOVC    A,@A+DPTR
00B1 FC                MOV     R4,A
00B2 7401              MOV     A,#01H
00B4 93                MOVC    A,@A+DPTR
00B5 FD                MOV     R5,A
00B6 EF                MOV     A,R7
00B7 25E0              ADD     A,ACC
00B9 2400        R     ADD     A,#LOW YUVCropV
00BB F582              MOV     DPL,A
00BD E4                CLR     A
00BE 3400        R     ADDC    A,#HIGH YUVCropV
00C0 F583              MOV     DPH,A
00C2 C3                CLR     C
00C3 7401              MOV     A,#01H
00C5 93                MOVC    A,@A+DPTR
00C6 9D                SUBB    A,R5
00C7 FF                MOV     R7,A
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 33  

00C8 E4                CLR     A
00C9 93                MOVC    A,@A+DPTR
00CA 9C                SUBB    A,R4
00CB C3                CLR     C
00CC 13                RRC     A
00CD FE                MOV     R6,A
00CE EF                MOV     A,R7
00CF 13                RRC     A
00D0 FF                MOV     R7,A
00D1 900000      R     MOV     DPTR,#temp16+01H
00D4 E0                MOVX    A,@DPTR
00D5 2F                ADD     A,R7
00D6 F0                MOVX    @DPTR,A
00D7 900000      R     MOV     DPTR,#temp16
00DA E0                MOVX    A,@DPTR
00DB 3E                ADDC    A,R6
00DC F0                MOVX    @DPTR,A
00DD E0                MOVX    A,@DPTR
00DE FE                MOV     R6,A
00DF A3                INC     DPTR
00E0 E0                MOVX    A,@DPTR
00E1 FF                MOV     R7,A
00E2 E4                CLR     A
00E3 FC                MOV     R4,A
00E4 FD                MOV     R5,A
00E5 A3                INC     DPTR
00E6 120000      E     LCALL   ?C?LSTXDATA
00E9 900000      R     MOV     DPTR,#temp32
00EC E0                MOVX    A,@DPTR
00ED FC                MOV     R4,A
00EE A3                INC     DPTR
00EF E0                MOVX    A,@DPTR
00F0 FD                MOV     R5,A
00F1 A3                INC     DPTR
00F2 E0                MOVX    A,@DPTR
00F3 FE                MOV     R6,A
00F4 A3                INC     DPTR
00F5 E0                MOVX    A,@DPTR
00F6 FF                MOV     R7,A
00F7 E4                CLR     A
00F8 7BE0              MOV     R3,#0E0H
00FA 7A01              MOV     R2,#01H
00FC F9                MOV     R1,A
00FD F8                MOV     R0,A
00FE 120000      E     LCALL   ?C?LMUL
0101 900000      R     MOV     DPTR,#temp32
0104 120000      E     LCALL   ?C?LSTXDATA
0107 900000      R     MOV     DPTR,#temp32
010A         L?0226:
010A E0                MOVX    A,@DPTR
010B FC                MOV     R4,A
010C A3                INC     DPTR
010D E0                MOVX    A,@DPTR
010E FD                MOV     R5,A
010F A3                INC     DPTR
0110 E0                MOVX    A,@DPTR
0111 FE                MOV     R6,A
0112 A3                INC     DPTR
0113 E0                MOVX    A,@DPTR
0114 FF                MOV     R7,A
0115 22                RET     
0116         L?0227:
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 34  

0116 120000      E     LCALL   ?C?ULDIV
0119 900000      R     MOV     DPTR,#PCLK1
011C 120000      E     LCALL   ?C?LSTXDATA
011F 900000      R     MOV     DPTR,#VPN
0122 E0                MOVX    A,@DPTR
0123 FE                MOV     R6,A
0124 A3                INC     DPTR
0125 E0                MOVX    A,@DPTR
0126 FF                MOV     R7,A
0127 E4                CLR     A
0128 FC                MOV     R4,A
0129 FD                MOV     R5,A
012A FB                MOV     R3,A
012B 7A20              MOV     R2,#020H
012D F9                MOV     R1,A
012E F8                MOV     R0,A
012F 120000      E     LCALL   ?C?LMUL
0132         L?0228:
0132 900000      R     MOV     DPTR,#VFreq
0135         L?0229:
0135 E0                MOVX    A,@DPTR
0136 F8                MOV     R0,A
0137 A3                INC     DPTR
0138 E0                MOVX    A,@DPTR
0139 F9                MOV     R1,A
013A A3                INC     DPTR
013B E0                MOVX    A,@DPTR
013C FA                MOV     R2,A
013D A3                INC     DPTR
013E E0                MOVX    A,@DPTR
013F FB                MOV     R3,A
0140 22                RET     
0141         L?0230:
0141 E0                MOVX    A,@DPTR
0142 34FF              ADDC    A,#0FFH
0144 F0                MOVX    @DPTR,A
0145 7BFF              MOV     R3,#0FFH
0147 7A00        R     MOV     R2,#HIGH ?SC_453
0149 7900        R     MOV     R1,#LOW ?SC_453
014B         L?0231:
014B E0                MOVX    A,@DPTR
014C FF                MOV     R7,A
014D A3                INC     DPTR
014E E0                MOVX    A,@DPTR
014F         L?0232:
014F CF                XCH     A,R7
0150         L?0233:
0150 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0153 F0                MOVX    @DPTR,A
0154 A3                INC     DPTR
0155 EF                MOV     A,R7
0156 F0                MOVX    @DPTR,A
0157 22                RET     
0158         L?0234:
0158         L?0235:
0158 900000      R     MOV     DPTR,#mode
015B         L?0236:
015B E0                MOVX    A,@DPTR
015C 25E0              ADD     A,ACC
015E 2400        R     ADD     A,#LOW YUVDisplayV
0160 F582              MOV     DPL,A
0162 E4                CLR     A
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 35  

0163 3400        R     ADDC    A,#HIGH YUVDisplayV
0165         L?0237:
0165 F583              MOV     DPH,A
0167 E4                CLR     A
0168 93                MOVC    A,@A+DPTR
0169 FE                MOV     R6,A
016A 7401              MOV     A,#01H
016C 93                MOVC    A,@A+DPTR
016D 22                RET     
016E         L?0238:
016E 120000      E     LCALL   ?C?ULDIV
0171 E4                CLR     A
0172 FB                MOV     R3,A
0173 7A04              MOV     R2,#04H
0175 F9                MOV     R1,A
0176 F8                MOV     R0,A
0177         L?0239:
0177 120000      E     LCALL   ?C?LMUL
017A 900000      R     MOV     DPTR,#i
017D         L?0240:
017D A804              MOV     R0,AR4
017F A905              MOV     R1,AR5
0181 AA06              MOV     R2,AR6
0183 AB07              MOV     R3,AR7
0185 E0                MOVX    A,@DPTR
0186 22                RET     
0187         L?0242:
0187         L?0243:
0187 900000      R     MOV     DPTR,#temp16
018A         L?0244:
018A EE                MOV     A,R6
018B         L?0245:
018B F0                MOVX    @DPTR,A
018C A3                INC     DPTR
018D EF                MOV     A,R7
018E F0                MOVX    @DPTR,A
018F 7BFF              MOV     R3,#0FFH
0191 22                RET     
0192         L?0246:
0192 120000      E     LCALL   ?C?ULDIV
0195 A804              MOV     R0,AR4
0197 A905              MOV     R1,AR5
0199 AA06              MOV     R2,AR6
019B AB07              MOV     R3,AR7
019D 900000      R     MOV     DPTR,#HActive
01A0 E0                MOVX    A,@DPTR
01A1 FE                MOV     R6,A
01A2 A3                INC     DPTR
01A3 E0                MOVX    A,@DPTR
01A4 FF                MOV     R7,A
01A5 900000      R     MOV     DPTR,#H_DE+01H
01A8 E0                MOVX    A,@DPTR
01A9 2F                ADD     A,R7
01AA FF                MOV     R7,A
01AB 900000      R     MOV     DPTR,#H_DE
01AE E0                MOVX    A,@DPTR
01AF 3E                ADDC    A,R6
01B0 CF                XCH     A,R7
01B1 2401              ADD     A,#01H
01B3 CF                XCH     A,R7
01B4 3400              ADDC    A,#00H
01B6 FE                MOV     R6,A
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 36  

01B7 E4                CLR     A
01B8 FC                MOV     R4,A
01B9 FD                MOV     R5,A
01BA 120000      E     LCALL   ?C?LMUL
01BD 900000      R     MOV     DPTR,#PCLK2
01C0 120000      E     LCALL   ?C?LSTXDATA
01C3 7BFF              MOV     R3,#0FFH
01C5 7A00        R     MOV     R2,#HIGH ?SC_575
01C7 7900        R     MOV     R1,#LOW ?SC_575
01C9 22                RET     
01CA         L?0247:
01CA         L?0248:
01CA E0                MOVX    A,@DPTR
01CB FD                MOV     R5,A
01CC A3                INC     DPTR
01CD E0                MOVX    A,@DPTR
01CE 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
01D1         L?0249:
01D1 CD                XCH     A,R5
01D2 F0                MOVX    @DPTR,A
01D3 A3                INC     DPTR
01D4 ED                MOV     A,R5
01D5 F0                MOVX    @DPTR,A
01D6 A3                INC     DPTR
01D7 EE                MOV     A,R6
01D8 F0                MOVX    @DPTR,A
01D9 A3                INC     DPTR
01DA EF                MOV     A,R7
01DB F0                MOVX    @DPTR,A
01DC 22                RET     
01DD         L?0250:
01DD 900000      R     MOV     DPTR,#mode
01E0 E0                MOVX    A,@DPTR
01E1 75F019            MOV     B,#019H
01E4 A4                MUL     AB
01E5 2400        E     ADD     A,#LOW PCMDATA+06H
01E7 F582              MOV     DPL,A
01E9 E5F0              MOV     A,B
01EB 3400        E     ADDC    A,#HIGH PCMDATA+06H
01ED         L?0251:
01ED F583              MOV     DPH,A
01EF 7401              MOV     A,#01H
01F1 93                MOVC    A,@A+DPTR
01F2 24FF              ADD     A,#0FFH
01F4 FF                MOV     R7,A
01F5 E4                CLR     A
01F6 93                MOVC    A,@A+DPTR
01F7 34FF              ADDC    A,#0FFH
01F9 FE                MOV     R6,A
01FA 22                RET     
01FB         L?0252:
01FB 7A00        R     MOV     R2,#HIGH ?SC_435
01FD 7900        R     MOV     R1,#LOW ?SC_435
01FF         L?0253:
01FF 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0202 EE                MOV     A,R6
0203 F0                MOVX    @DPTR,A
0204 A3                INC     DPTR
0205 EF                MOV     A,R7
0206 F0                MOVX    @DPTR,A
0207 22                RET     
0208         L?0254:
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 37  

0208 900000      R     MOV     DPTR,#mode
020B E0                MOVX    A,@DPTR
020C 25E0              ADD     A,ACC
020E 2400        R     ADD     A,#LOW MYStartV
0210 F582              MOV     DPL,A
0212 E4                CLR     A
0213 3400        R     ADDC    A,#HIGH MYStartV
0215 F583              MOV     DPH,A
0217 E4                CLR     A
0218 93                MOVC    A,@A+DPTR
0219 FF                MOV     R7,A
021A 7401              MOV     A,#01H
021C 93                MOVC    A,@A+DPTR
021D CF                XCH     A,R7
021E         L?0255:
021E 900000      R     MOV     DPTR,#temp16
0221 F0                MOVX    @DPTR,A
0222 A3                INC     DPTR
0223 EF                MOV     A,R7
0224 F0                MOVX    @DPTR,A
0225 22                RET     
0226         L?0256:
0226 900000      R     MOV     DPTR,#HDown
0229         L?0257:
0229 E0                MOVX    A,@DPTR
022A FE                MOV     R6,A
022B A3                INC     DPTR
022C E0                MOVX    A,@DPTR
022D         L?0258:
022D FB                MOV     R3,A
022E AA06              MOV     R2,AR6
0230 E4                CLR     A
0231 F9                MOV     R1,A
0232 F8                MOV     R0,A
0233 22                RET     
0234         L?0259:
0234 34FF              ADDC    A,#0FFH
0236 FE                MOV     R6,A
0237 900000      R     MOV     DPTR,#i
023A E0                MOVX    A,@DPTR
023B 75F019            MOV     B,#019H
023E         L?0260:
023E A4                MUL     AB
023F 2400        E     ADD     A,#LOW PCMDATA+08H
0241 F582              MOV     DPL,A
0243 E5F0              MOV     A,B
0245 3400        E     ADDC    A,#HIGH PCMDATA+08H
0247 22                RET     
0248         L?0261:
0248 120000      E     LCALL   ?C?LMUL
024B A804              MOV     R0,AR4
024D A905              MOV     R1,AR5
024F AA06              MOV     R2,AR6
0251 AB07              MOV     R3,AR7
0253 900000      R     MOV     DPTR,#VPN
0256 E0                MOVX    A,@DPTR
0257 FE                MOV     R6,A
0258 A3                INC     DPTR
0259 E0                MOVX    A,@DPTR
025A FF                MOV     R7,A
025B E4                CLR     A
025C FC                MOV     R4,A
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 38  

025D FD                MOV     R5,A
025E 020000      E     LJMP    ?C?LMUL
0261         L?0262:
0261 FD                MOV     R5,A
0262 E4                CLR     A
0263 3C                ADDC    A,R4
0264 FC                MOV     R4,A
0265         L?0263:
0265 900000      R     MOV     DPTR,#PCLK
0268 020000      E     LJMP    ?C?LSTXDATA
026B         L?0264:
026B         L?0265:
026B E0                MOVX    A,@DPTR
026C FF                MOV     R7,A
026D A3                INC     DPTR
026E E0                MOVX    A,@DPTR
026F 900000      E     MOV     DPTR,#?_dPrintf?BYTE+05H
0272 CF                XCH     A,R7
0273 F0                MOVX    @DPTR,A
0274 A3                INC     DPTR
0275 EF                MOV     A,R7
0276 F0                MOVX    @DPTR,A
0277 22                RET     
0278         L?0266:
0278 F0                MOVX    @DPTR,A
0279 E500        E     MOV     A,regTW88+01H
027B 2441              ADD     A,#041H
027D         L?0267:
027D F582              MOV     DPL,A
027F E4                CLR     A
0280 3500        E     ADDC    A,regTW88
0282 F583              MOV     DPH,A
0284 E0                MOVX    A,@DPTR
0285 22                RET     
0286         L?0268:
0286         L?0269:
0286 FF                MOV     R7,A
0287 E4                CLR     A
0288 FC                MOV     R4,A
0289 FD                MOV     R5,A
028A FE                MOV     R6,A
028B 020000      E     LJMP    ?C?LMUL
028E         L?0270:
028E         L?0271:
028E 900000      R     MOV     DPTR,#mode
0291 E0                MOVX    A,@DPTR
0292 75F019            MOV     B,#019H
0295 A4                MUL     AB
0296 22                RET     
0297         L?0272:
0297 900000      R     MOV     DPTR,#Divider+01H
029A E0                MOVX    A,@DPTR
029B 2401              ADD     A,#01H
029D FF                MOV     R7,A
029E 900000      R     MOV     DPTR,#Divider
02A1 E0                MOVX    A,@DPTR
02A2 3400              ADDC    A,#00H
02A4 FE                MOV     R6,A
02A5 E4                CLR     A
02A6 FC                MOV     R4,A
02A7 FD                MOV     R5,A
02A8 22                RET     
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 39  

02A9         L?0274:
02A9 900000      R     MOV     DPTR,#i
02AC E0                MOVX    A,@DPTR
02AD 24FF              ADD     A,#0FFH
02AF FF                MOV     R7,A
02B0 E4                CLR     A
02B1 34FF              ADDC    A,#0FFH
02B3 AB07              MOV     R3,AR7
02B5 FA                MOV     R2,A
02B6 E4                CLR     A
02B7 F9                MOV     R1,A
02B8 F8                MOV     R0,A
02B9 22                RET     
02BA         L?0275:
02BA         L?0276:
02BA F583              MOV     DPH,A
02BC E4                CLR     A
02BD 93                MOVC    A,@A+DPTR
02BE FC                MOV     R4,A
02BF 7401              MOV     A,#01H
02C1 93                MOVC    A,@A+DPTR
02C2 FD                MOV     R5,A
02C3 22                RET     
02C4         L?0277:
02C4         L?0278:
02C4 25E0              ADD     A,ACC
02C6 2400        R     ADD     A,#LOW YUVDisplayH
02C8 F582              MOV     DPL,A
02CA E4                CLR     A
02CB 3400        R     ADDC    A,#HIGH YUVDisplayH
02CD 22                RET     
02CE         L?0279:
02CE         L?0280:
02CE F583              MOV     DPH,A
02D0 E4                CLR     A
02D1 93                MOVC    A,@A+DPTR
02D2 FF                MOV     R7,A
02D3 7401              MOV     A,#01H
02D5 93                MOVC    A,@A+DPTR
02D6 22                RET     
02D7         L?0281:
02D7 EF                MOV     A,R7
02D8 33                RLC     A
02D9 95E0              SUBB    A,ACC
02DB FE                MOV     R6,A
02DC E0                MOVX    A,@DPTR
02DD 2F                ADD     A,R7
02DE F0                MOVX    @DPTR,A
02DF 22                RET     
02E0         L?0282:
02E0         L?0283:
02E0 E0                MOVX    A,@DPTR
02E1 3E                ADDC    A,R6
02E2 F0                MOVX    @DPTR,A
02E3 A3                INC     DPTR
02E4 E0                MOVX    A,@DPTR
02E5 24CE              ADD     A,#0CEH
02E7 F0                MOVX    @DPTR,A
02E8 22                RET     
02E9         L?0284:
02E9 900000      R     MOV     DPTR,#PCLK
02EC E0                MOVX    A,@DPTR
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 40  

02ED FC                MOV     R4,A
02EE A3                INC     DPTR
02EF E0                MOVX    A,@DPTR
02F0 FD                MOV     R5,A
02F1 A3                INC     DPTR
02F2 E0                MOVX    A,@DPTR
02F3 FE                MOV     R6,A
02F4 A3                INC     DPTR
02F5 E0                MOVX    A,@DPTR
02F6 22                RET     
02F7         L?0285:
02F7 FF                MOV     R7,A
02F8 900000      R     MOV     DPTR,#temp16+01H
02FB E0                MOVX    A,@DPTR
02FC 2F                ADD     A,R7
02FD F0                MOVX    @DPTR,A
02FE 900000      R     MOV     DPTR,#temp16
0301 E0                MOVX    A,@DPTR
0302 3E                ADDC    A,R6
0303 F0                MOVX    @DPTR,A
0304 22                RET     
0305         L?0286:
0305 E0                MOVX    A,@DPTR
0306 FF                MOV     R7,A
0307 A3                INC     DPTR
0308 E0                MOVX    A,@DPTR
0309 900000      E     MOV     DPTR,#?_dPrintf?BYTE+09H
030C CF                XCH     A,R7
030D F0                MOVX    @DPTR,A
030E A3                INC     DPTR
030F EF                MOV     A,R7
0310 F0                MOVX    @DPTR,A
0311 22                RET     
0312         L?0289:
0312 FF                MOV     R7,A
0313 7E00              MOV     R6,#00H
0315 E0                MOVX    A,@DPTR
0316 FC                MOV     R4,A
0317 A3                INC     DPTR
0318 E0                MOVX    A,@DPTR
0319 FD                MOV     R5,A
031A 020000      E     LJMP    ?C?IMUL
031D         L?0290:
031D         L?0291:
031D E0                MOVX    A,@DPTR
031E 04                INC     A
031F F0                MOVX    @DPTR,A
0320 E0                MOVX    A,@DPTR
0321 C3                CLR     C
0322 940A              SUBB    A,#0AH
0324 22                RET     
0325         L?0292:
0325 7F00              MOV     R7,#00H
0327 7EF3              MOV     R6,#0F3H
0329 7D6F              MOV     R5,#06FH
032B 7C06              MOV     R4,#06H
032D 900000      R     MOV     DPTR,#PCLK
0330 22                RET     
0331         L?0293:
0331         L?0294:
0331 900000      R     MOV     DPTR,#temp
0334 EF                MOV     A,R7
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 41  

0335 F0                MOVX    @DPTR,A
0336 6432              XRL     A,#032H
0338 22                RET     
0339         L?0295:
0339         L?0296:
0339 900000      R     MOV     DPTR,#InputVAdcMode
033C E0                MOVX    A,@DPTR
033D FF                MOV     R7,A
033E 7D32              MOV     R5,#032H
0340 22                RET     
0341         L?0299:
0341 C3                CLR     C
0342 EF                MOV     A,R7
0343 9420              SUBB    A,#020H
0345 EE                MOV     A,R6
0346 9403              SUBB    A,#03H
0348 900000      R     MOV     DPTR,#i
034B 22                RET     
034C         L?0301:
034C CF                XCH     A,R7
034D F0                MOVX    @DPTR,A
034E A3                INC     DPTR
034F EF                MOV     A,R7
0350 F0                MOVX    @DPTR,A
0351 900000      R     MOV     DPTR,#vfreq
0354 E0                MOVX    A,@DPTR
0355 22                RET     
0356         L?0302:
0356         L?0303:
0356 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0359 020000      E     LJMP    ?C?LSTXDATA
035C         L?0304:
035C 900000      R     MOV     DPTR,#vtotal
035F E0                MOVX    A,@DPTR
0360 FE                MOV     R6,A
0361 A3                INC     DPTR
0362 E0                MOVX    A,@DPTR
0363 FF                MOV     R7,A
0364 C3                CLR     C
0365 22                RET     
0366         L?0305:
0366 EF                MOV     A,R7
0367 33                RLC     A
0368 95E0              SUBB    A,ACC
036A FE                MOV     R6,A
036B C3                CLR     C
036C E0                MOVX    A,@DPTR
036D 9F                SUBB    A,R7
036E FF                MOV     R7,A
036F 22                RET     
0370         L?0306:
0370 900000      E     MOV     DPTR,#?_dPrintf?BYTE+04H
0373 120000      E     LCALL   ?C?LSTXDATA
0376 900000      R     MOV     DPTR,#PCLK2
0379 22                RET     
037A         L?0307:
037A         L?0308:
037A 900000      R     MOV     DPTR,#mode
037D E0                MOVX    A,@DPTR
037E 25E0              ADD     A,ACC
0380 22                RET     
             ; FUNCTION Com00DD (END)
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 42  


             ; FUNCTION VAdcGetInputStatus (BEGIN)
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 223
0000 E500        E     MOV     A,regTW88+01H
0002 24C1              ADD     A,#0C1H
0004 120000      R     LCALL   L?0223
0007 E0                MOVX    A,@DPTR
0008 FF                MOV     R7,A
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 225
0009         ?C0001:
0009 22                RET     
             ; FUNCTION VAdcGetInputStatus (END)

             ; FUNCTION _VAdcSetPolarity (BEGIN)
                                           ; SOURCE LINE # 254
;---- Variable 'fUseCAPAS' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 259
0000 E500        E     MOV     A,regTW88+01H
0002 24C1              ADD     A,#0C1H
0004 120000      R     LCALL   L?0223
0007 E0                MOVX    A,@DPTR
0008 FE                MOV     R6,A
;---- Variable 'r1c1' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 260
0009 EF                MOV     A,R7
000A 600D              JZ      ?C0002
                                           ; SOURCE LINE # 262
000C E500        E     MOV     A,regTW88+01H
000E 24C0              ADD     A,#0C0H
0010 120000      R     LCALL   L?0223
0013 E0                MOVX    A,@DPTR
0014 54FB              ANL     A,#0FBH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 264
0017 8020              SJMP    ?C0200
0019         ?C0002:
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 267
0019 EE                MOV     A,R6
001A 30E60D            JNB     ACC.6,?C0004
001D E500        E     MOV     A,regTW88+01H
001F 24C0              ADD     A,#0C0H
0021 120000      R     LCALL   L?0223
0024 E0                MOVX    A,@DPTR
0025 4404              ORL     A,#04H
0027 F0                MOVX    @DPTR,A
0028 800B              SJMP    ?C0005
002A         ?C0004:
                                           ; SOURCE LINE # 268
002A E500        E     MOV     A,regTW88+01H
002C 24C0              ADD     A,#0C0H
002E 120000      R     LCALL   L?0223
0031 E0                MOVX    A,@DPTR
0032 54FB              ANL     A,#0FBH
0034 F0                MOVX    @DPTR,A
0035         ?C0005:
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 43  

                                           ; SOURCE LINE # 270
0035 EE                MOV     A,R6
0036 30E70C            JNB     ACC.7,?C0006
0039         ?C0200:
0039 E500        E     MOV     A,regTW88+01H
003B 24CC              ADD     A,#0CCH
003D 120000      R     LCALL   L?0223
0040 E0                MOVX    A,@DPTR
0041 54FD              ANL     A,#0FDH
0043 F0                MOVX    @DPTR,A
0044 22                RET     
0045         ?C0006:
                                           ; SOURCE LINE # 271
0045 E500        E     MOV     A,regTW88+01H
0047 24CC              ADD     A,#0CCH
0049 120000      R     LCALL   L?0223
004C E0                MOVX    A,@DPTR
004D 4402              ORL     A,#02H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
0050         ?C0008:
0050 22                RET     
             ; FUNCTION _VAdcSetPolarity (END)

             ; FUNCTION _VAdcSetLLPLLControl (BEGIN)
                                           ; SOURCE LINE # 292
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 295
0000 E500        E     MOV     A,regTW88+01H
0002 24C2              ADD     A,#0C2H
0004 120000      R     LCALL   L?0223
0007 EF                MOV     A,R7
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
0009 22                RET     
             ; FUNCTION _VAdcSetLLPLLControl (END)

             ; FUNCTION _VAdcLLPLLSetDivider (BEGIN)
                                           ; SOURCE LINE # 315
;---- Variable 'value' assigned to Register 'R2/R3' ----
0000 AB07              MOV     R3,AR7
0002 AA06              MOV     R2,AR6
;---- Variable 'fInit' assigned to Register 'R1' ----
0004 A905              MOV     R1,AR5
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 320
0006 EA                MOV     A,R2
0007 FF                MOV     R7,A
0008 E500        E     MOV     A,regTW88+01H
000A 24C3              ADD     A,#0C3H
000C 120000      R     LCALL   L?0223
000F EF                MOV     A,R7
0010 F0                MOVX    @DPTR,A
0011 E500        E     MOV     A,regTW88+01H
0013 24C4              ADD     A,#0C4H
0015 120000      R     LCALL   L?0223
0018 EB                MOV     A,R3
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 321
001A E9                MOV     A,R1
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 44  

001B 6017              JZ      ?C0014
                                           ; SOURCE LINE # 322
001D E500        E     MOV     A,regTW88+01H
001F 24CD              ADD     A,#0CDH
0021 120000      R     LCALL   L?0223
0024 E0                MOVX    A,@DPTR
0025 4401              ORL     A,#01H
0027 F0                MOVX    @DPTR,A
0028         ?C0013:
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
0028 90C1CD            MOV     DPTR,#0C1CDH
002B E0                MOVX    A,@DPTR
002C 900000      R     MOV     DPTR,#mode
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
0030 E0                MOVX    A,@DPTR
0031 20E0F4            JB      ACC.0,?C0013
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 332
0034         ?C0014:
0034 22                RET     
             ; FUNCTION _VAdcLLPLLSetDivider (END)

             ; FUNCTION VAdcLLPLLGetDivider (BEGIN)
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 347
0000 E500        E     MOV     A,regTW88+01H
0002 24C3              ADD     A,#0C3H
0004 120000      R     LCALL   L?0223
0007 E0                MOVX    A,@DPTR
;---- Variable 'value' assigned to Register 'R6/R7' ----
0008 FE                MOV     R6,A
0009 E500        E     MOV     A,regTW88+01H
000B 24C4              ADD     A,#0C4H
000D 120000      R     LCALL   L?0223
0010 E0                MOVX    A,@DPTR
0011 FD                MOV     R5,A
0012 ED                MOV     A,R5
0013 FF                MOV     R7,A
                                           ; SOURCE LINE # 348
0014 EE                MOV     A,R6
0015 540F              ANL     A,#0FH
0017 FE                MOV     R6,A
                                           ; SOURCE LINE # 349
0018         ?C0015:
0018 22                RET     
             ; FUNCTION VAdcLLPLLGetDivider (END)

             ; FUNCTION _VAdcSetPhase (BEGIN)
                                           ; SOURCE LINE # 365
;---- Variable 'fInit' assigned to Register 'R5' ----
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 370
0000 EF                MOV     A,R7
0001 541F              ANL     A,#01FH
0003 FF                MOV     R7,A
0004 E500        E     MOV     A,regTW88+01H
0006 24C5              ADD     A,#0C5H
0008 120000      R     LCALL   L?0223
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 45  

000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
000D ED                MOV     A,R5
000E 6017              JZ      ?C0020
                                           ; SOURCE LINE # 375
0010 E500        E     MOV     A,regTW88+01H
0012 24CD              ADD     A,#0CDH
0014 120000      R     LCALL   L?0223
0017 E0                MOVX    A,@DPTR
0018 4401              ORL     A,#01H
001A F0                MOVX    @DPTR,A
001B         ?C0019:
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
001B 90C1CD            MOV     DPTR,#0C1CDH
001E E0                MOVX    A,@DPTR
001F 900000      R     MOV     DPTR,#mode
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
0023 E0                MOVX    A,@DPTR
0024 20E0F4            JB      ACC.0,?C0019
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
0027         ?C0020:
0027 22                RET     
             ; FUNCTION _VAdcSetPhase (END)

             ; FUNCTION VAdcGetPhase (BEGIN)
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 392
0000 E500        E     MOV     A,regTW88+01H
0002 24C5              ADD     A,#0C5H
0004 120000      R     LCALL   L?0223
0007 E0                MOVX    A,@DPTR
0008 541F              ANL     A,#01FH
000A FF                MOV     R7,A
                                           ; SOURCE LINE # 393
000B         ?C0021:
000B 22                RET     
             ; FUNCTION VAdcGetPhase (END)

             ; FUNCTION _VAdcSetFilterBandwidth (BEGIN)
                                           ; SOURCE LINE # 407
;---- Variable 'delay' assigned to Register 'R4/R5' ----
;---- Variable 'value' assigned to Register 'R3' ----
0000 AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
0002 ED                MOV     A,R5
0003 4C                ORL     A,R4
0004 6007              JZ      ?C0022
                                           ; SOURCE LINE # 410
0006 AE04              MOV     R6,AR4
0008 AF05              MOV     R7,AR5
000A 120000      E     LCALL   _delay1ms
000D         ?C0022:
                                           ; SOURCE LINE # 412
000D E500        E     MOV     A,regTW88+01H
000F 24C6              ADD     A,#0C6H
0011 120000      R     LCALL   L?0223
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 46  

0014 E0                MOVX    A,@DPTR
0015 54F8              ANL     A,#0F8H
0017 4B                ORL     A,R3
0018 FF                MOV     R7,A
0019 E500        E     MOV     A,regTW88+01H
001B 24C6              ADD     A,#0C6H
001D 120000      R     LCALL   L?0223
0020 EF                MOV     A,R7
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 413
0022 22                RET     
             ; FUNCTION _VAdcSetFilterBandwidth (END)

             ; FUNCTION _VAdcSetChannelGainReg (BEGIN)
                                           ; SOURCE LINE # 556
0000 900000      R     MOV     DPTR,#GainB
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#GainG
000B EE                MOV     A,R6
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
;---- Variable 'GainR' assigned to Register 'R2/R3' ----
                                           ; SOURCE LINE # 557
                                           ; SOURCE LINE # 559
0010 E500        E     MOV     A,regTW88+01H
0012 24D1              ADD     A,#0D1H
0014 120000      R     LCALL   L?0223
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 560
0019 900000      R     MOV     DPTR,#GainB
001C A3                INC     DPTR
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F E500        E     MOV     A,regTW88+01H
0021 24D2              ADD     A,#0D2H
0023 120000      R     LCALL   L?0223
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 561
0028 E500        E     MOV     A,regTW88+01H
002A 24D3              ADD     A,#0D3H
002C 120000      R     LCALL   L?0223
002F EB                MOV     A,R3
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 562
0031 900000      R     MOV     DPTR,#GainB
0034 E0                MOVX    A,@DPTR
0035 FE                MOV     R6,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 7807              MOV     R0,#07H
003A         ?C0184:
003A CE                XCH     A,R6
003B C3                CLR     C
003C 13                RRC     A
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 47  

003D CE                XCH     A,R6
003E 13                RRC     A
003F D8F9              DJNZ    R0,?C0184
0041 5402              ANL     A,#02H
0043 FD                MOV     R5,A
0044 EA                MOV     A,R2
0045 2D                ADD     A,R5
0046 FD                MOV     R5,A
0047 900000      R     MOV     DPTR,#GainG
004A E0                MOVX    A,@DPTR
004B FE                MOV     R6,A
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E 7806              MOV     R0,#06H
0050         ?C0185:
0050 CE                XCH     A,R6
0051 C3                CLR     C
0052 13                RRC     A
0053 CE                XCH     A,R6
0054 13                RRC     A
0055 D8F9              DJNZ    R0,?C0185
0057 5404              ANL     A,#04H
0059 2D                ADD     A,R5
005A FF                MOV     R7,A
005B E500        E     MOV     A,regTW88+01H
005D 24D0              ADD     A,#0D0H
005F 120000      R     LCALL   L?0223
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 563
0064 22                RET     
             ; FUNCTION _VAdcSetChannelGainReg (END)

             ; FUNCTION VAdcReadGChannelGainReg (BEGIN)
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 568
0000 E500        E     MOV     A,regTW88+01H
0002 24D0              ADD     A,#0D0H
0004 120000      R     LCALL   L?0223
0007 E0                MOVX    A,@DPTR
0008 5404              ANL     A,#04H
000A FF                MOV     R7,A
000B 7E00              MOV     R6,#00H
;---- Variable 'wTemp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 569
000D 7806              MOV     R0,#06H
000F         ?C0186:
000F C3                CLR     C
0010 33                RLC     A
0011 CE                XCH     A,R6
0012 33                RLC     A
0013 CE                XCH     A,R6
0014 D8F9              DJNZ    R0,?C0186
0016 FF                MOV     R7,A
                                           ; SOURCE LINE # 570
0017 E500        E     MOV     A,regTW88+01H
0019 24D1              ADD     A,#0D1H
001B 120000      R     LCALL   L?0223
001E E0                MOVX    A,@DPTR
001F FD                MOV     R5,A
0020 EF                MOV     A,R7
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 48  

0021 4D                ORL     A,R5
0022 FF                MOV     R7,A
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 572
0023         ?C0025:
0023 22                RET     
             ; FUNCTION VAdcReadGChannelGainReg (END)

             ; FUNCTION VAdcReadBChannelGainReg (BEGIN)
                                           ; SOURCE LINE # 573
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 577
0000 E500        E     MOV     A,regTW88+01H
0002 24D0              ADD     A,#0D0H
0004 120000      R     LCALL   L?0223
0007 E0                MOVX    A,@DPTR
0008 5402              ANL     A,#02H
000A FF                MOV     R7,A
000B 7E00              MOV     R6,#00H
;---- Variable 'wTemp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 578
000D 7807              MOV     R0,#07H
000F         ?C0187:
000F C3                CLR     C
0010 33                RLC     A
0011 CE                XCH     A,R6
0012 33                RLC     A
0013 CE                XCH     A,R6
0014 D8F9              DJNZ    R0,?C0187
0016 FF                MOV     R7,A
                                           ; SOURCE LINE # 579
0017 E500        E     MOV     A,regTW88+01H
0019 24D2              ADD     A,#0D2H
001B 120000      R     LCALL   L?0223
001E E0                MOVX    A,@DPTR
001F FD                MOV     R5,A
0020 EF                MOV     A,R7
0021 4D                ORL     A,R5
0022 FF                MOV     R7,A
                                           ; SOURCE LINE # 580
                                           ; SOURCE LINE # 581
0023         ?C0026:
0023 22                RET     
             ; FUNCTION VAdcReadBChannelGainReg (END)

             ; FUNCTION VAdcReadRChannelGainReg (BEGIN)
                                           ; SOURCE LINE # 582
                                           ; SOURCE LINE # 583
                                           ; SOURCE LINE # 586
0000 E500        E     MOV     A,regTW88+01H
0002 24D0              ADD     A,#0D0H
0004 120000      R     LCALL   L?0223
0007 E0                MOVX    A,@DPTR
0008 5401              ANL     A,#01H
;---- Variable 'wTemp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 587
000A FE                MOV     R6,A
                                           ; SOURCE LINE # 588
000B E500        E     MOV     A,regTW88+01H
000D 24D3              ADD     A,#0D3H
000F 120000      R     LCALL   L?0223
0012 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 49  

0013 FD                MOV     R5,A
0014 ED                MOV     A,R5
0015 FF                MOV     R7,A
                                           ; SOURCE LINE # 589
                                           ; SOURCE LINE # 590
0016         ?C0027:
0016 22                RET     
             ; FUNCTION VAdcReadRChannelGainReg (END)

             ; FUNCTION _VAdcSetClampModeHSyncEdge (BEGIN)
                                           ; SOURCE LINE # 613
;---- Variable 'fOn' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 616
0000 EF                MOV     A,R7
0001 600C              JZ      ?C0028
0003 E500        E     MOV     A,regTW88+01H
0005 24D4              ADD     A,#0D4H
0007 120000      R     LCALL   L?0223
000A E0                MOVX    A,@DPTR
000B 4420              ORL     A,#020H
000D F0                MOVX    @DPTR,A
000E 22                RET     
000F         ?C0028:
                                           ; SOURCE LINE # 617
000F E500        E     MOV     A,regTW88+01H
0011 24D4              ADD     A,#0D4H
0013 120000      R     LCALL   L?0223
0016 E0                MOVX    A,@DPTR
0017 54DF              ANL     A,#0DFH
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 618
001A         ?C0030:
001A 22                RET     
             ; FUNCTION _VAdcSetClampModeHSyncEdge (END)

             ; FUNCTION _VAdcSetClampPosition (BEGIN)
                                           ; SOURCE LINE # 629
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 630
                                           ; SOURCE LINE # 632
0000 E500        E     MOV     A,regTW88+01H
0002 24D7              ADD     A,#0D7H
0004 120000      R     LCALL   L?0223
0007 EF                MOV     A,R7
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 633
0009 22                RET     
             ; FUNCTION _VAdcSetClampPosition (END)

             ; FUNCTION VAdcSetDefaultFor (BEGIN)
                                           ; SOURCE LINE # 676
;---- Variable 'rvalue' assigned to Register 'R4' ----
                                           ; SOURCE LINE # 677
                                           ; SOURCE LINE # 684
0000 900000      E     MOV     DPTR,#InputMain
0003 E0                MOVX    A,@DPTR
0004 6402              XRL     A,#02H
0006 6003              JZ      $ + 5H
0008 020000      R     LJMP    ?C0032
                                           ; SOURCE LINE # 686
000B E500        E     MOV     A,regTW88+01H
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 50  

000D 24C0              ADD     A,#0C0H
000F 120000      R     LCALL   L?0223
0012 7410              MOV     A,#010H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 687
0015 E500        E     MOV     A,regTW88+01H
0017 24C2              ADD     A,#0C2H
0019 120000      R     LCALL   L?0223
001C 74D2              MOV     A,#0D2H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 688
001F E500        E     MOV     A,regTW88+01H
0021 24C6              ADD     A,#0C6H
0023 120000      R     LCALL   L?0223
0026 7420              MOV     A,#020H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 689
0029 E500        E     MOV     A,regTW88+01H
002B 24C9              ADD     A,#0C9H
002D 120000      R     LCALL   L?0223
0030 E4                CLR     A
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 690
0032 E500        E     MOV     A,regTW88+01H
0034 24CA              ADD     A,#0CAH
0036 120000      R     LCALL   L?0223
0039 E4                CLR     A
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 691
003B E500        E     MOV     A,regTW88+01H
003D 24CB              ADD     A,#0CBH
003F 120000      R     LCALL   L?0223
0042 74D6              MOV     A,#0D6H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 695
0045 E500        E     MOV     A,regTW88+01H
0047 24CC              ADD     A,#0CCH
0049 120000      R     LCALL   L?0223
004C E4                CLR     A
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 699
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 701
                                           ; SOURCE LINE # 703
                                           ; SOURCE LINE # 704
                                           ; SOURCE LINE # 705
                                           ; SOURCE LINE # 706
                                           ; SOURCE LINE # 707
                                           ; SOURCE LINE # 708
004D 120000      R     LCALL   L?0222
0050 7480              MOV     A,#080H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 709
0053 E500        E     MOV     A,regTW88+01H
0055 24DB              ADD     A,#0DBH
0057 120000      R     LCALL   L?0223
005A 7480              MOV     A,#080H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 710
005D E500        E     MOV     A,regTW88+01H
005F 24DC              ADD     A,#0DCH
0061 120000      R     LCALL   L?0223
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 51  

0064 7410              MOV     A,#010H
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 712
0067 E500        E     MOV     A,regTW88+01H
0069 24E2              ADD     A,#0E2H
006B 120000      R     LCALL   L?0223
006E 7459              MOV     A,#059H
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 713
0071 E500        E     MOV     A,regTW88+01H
0073 24E3              ADD     A,#0E3H
0075 120000      R     LCALL   L?0223
0078 7437              MOV     A,#037H
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 714
007B E500        E     MOV     A,regTW88+01H
007D 24E4              ADD     A,#0E4H
007F 120000      R     LCALL   L?0223
0082 7455              MOV     A,#055H
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 715
0085 E500        E     MOV     A,regTW88+01H
0087 24E5              ADD     A,#0E5H
0089 120000      R     LCALL   L?0223
008C 7455              MOV     A,#055H
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 717
008F E500        E     MOV     A,regTW88+01H
0091 24E6              ADD     A,#0E6H
0093 120000      R     LCALL   L?0223
0096 7420              MOV     A,#020H
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 723
0099 7D01              MOV     R5,#01H
009B 7F5A              MOV     R7,#05AH
009D 7E03              MOV     R6,#03H
009F 120000      R     LCALL   _VAdcLLPLLSetDivider
                                           ; SOURCE LINE # 726
00A2 E4                CLR     A
00A3 FC                MOV     R4,A
                                           ; SOURCE LINE # 727
00A4 FF                MOV     R7,A
00A5 1D                DEC     R5
                                           ; SOURCE LINE # 729
00A6 020000      R     LJMP    ?C0201
00A9         ?C0032:
                                           ; SOURCE LINE # 730
00A9 900000      E     MOV     DPTR,#InputMain
00AC E0                MOVX    A,@DPTR
00AD 6403              XRL     A,#03H
00AF 6003              JZ      $ + 5H
00B1 020000      R     LJMP    ?C0034
                                           ; SOURCE LINE # 732
00B4 E500        E     MOV     A,regTW88+01H
00B6 24C0              ADD     A,#0C0H
00B8 120000      R     LCALL   L?0223
00BB 7408              MOV     A,#08H
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 733
00BE E500        E     MOV     A,regTW88+01H
00C0 24C2              ADD     A,#0C2H
00C2 120000      R     LCALL   L?0223
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 52  

00C5 74D2              MOV     A,#0D2H
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 734
00C8 E500        E     MOV     A,regTW88+01H
00CA 24C6              ADD     A,#0C6H
00CC 120000      R     LCALL   L?0223
00CF 7420              MOV     A,#020H
00D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 735
00D2 E500        E     MOV     A,regTW88+01H
00D4 24C9              ADD     A,#0C9H
00D6 120000      R     LCALL   L?0223
00D9 E4                CLR     A
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 736
00DB E500        E     MOV     A,regTW88+01H
00DD 24CA              ADD     A,#0CAH
00DF 120000      R     LCALL   L?0223
00E2 E4                CLR     A
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 737
00E4 E500        E     MOV     A,regTW88+01H
00E6 24CB              ADD     A,#0CBH
00E8 120000      R     LCALL   L?0223
00EB 7456              MOV     A,#056H
00ED F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 741
00EE E500        E     MOV     A,regTW88+01H
00F0 24CC              ADD     A,#0CCH
00F2 120000      R     LCALL   L?0223
00F5 7412              MOV     A,#012H
                                           ; SOURCE LINE # 744
                                           ; SOURCE LINE # 745
                                           ; SOURCE LINE # 746
                                           ; SOURCE LINE # 747
                                           ; SOURCE LINE # 749
                                           ; SOURCE LINE # 750
                                           ; SOURCE LINE # 751
                                           ; SOURCE LINE # 752
                                           ; SOURCE LINE # 753
                                           ; SOURCE LINE # 754
00F7 120000      R     LCALL   L?0222
00FA 7401              MOV     A,#01H
00FC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 755
00FD E500        E     MOV     A,regTW88+01H
00FF 24DB              ADD     A,#0DBH
0101 120000      R     LCALL   L?0223
0104 7401              MOV     A,#01H
0106 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 756
0107 E500        E     MOV     A,regTW88+01H
0109 24DC              ADD     A,#0DCH
010B 120000      R     LCALL   L?0223
010E 7410              MOV     A,#010H
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 758
0111 E500        E     MOV     A,regTW88+01H
0113 24E2              ADD     A,#0E2H
0115 120000      R     LCALL   L?0223
0118 7459              MOV     A,#059H
011A F0                MOVX    @DPTR,A
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 53  

                                           ; SOURCE LINE # 759
011B E500        E     MOV     A,regTW88+01H
011D 24E3              ADD     A,#0E3H
011F 120000      R     LCALL   L?0223
0122 7437              MOV     A,#037H
0124 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 763
0125 E500        E     MOV     A,regTW88+01H
0127 24E4              ADD     A,#0E4H
0129 120000      R     LCALL   L?0223
012C 7455              MOV     A,#055H
012E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 765
012F E500        E     MOV     A,regTW88+01H
0131 24E5              ADD     A,#0E5H
0133 120000      R     LCALL   L?0223
0136 7455              MOV     A,#055H
0138 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 767
0139 E500        E     MOV     A,regTW88+01H
013B 24E6              ADD     A,#0E6H
013D 120000      R     LCALL   L?0223
0140 7420              MOV     A,#020H
0142 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
0143 7D01              MOV     R5,#01H
0145 FF                MOV     R7,A
0146 7E04              MOV     R6,#04H
0148 120000      R     LCALL   _VAdcLLPLLSetDivider
                                           ; SOURCE LINE # 774
014B 7F05              MOV     R7,#05H
014D 120000      E     LCALL   _GetPhaseEE
0150 AC07              MOV     R4,AR7
                                           ; SOURCE LINE # 775
0152 EC                MOV     A,R4
0153 B4FF02            CJNE    A,#0FFH,?C0035
                                           ; SOURCE LINE # 776
0156 E4                CLR     A
0157 FC                MOV     R4,A
0158         ?C0035:
                                           ; SOURCE LINE # 777
0158 AF04              MOV     R7,AR4
015A E4                CLR     A
015B FD                MOV     R5,A
015C         ?C0201:
015C 020000      R     LJMP    _VAdcSetPhase
                                           ; SOURCE LINE # 779
015F         ?C0034:
                                           ; SOURCE LINE # 780
                                           ; SOURCE LINE # 783
015F E500        E     MOV     A,regTW88+01H
0161 24CB              ADD     A,#0CBH
0163 120000      R     LCALL   L?0223
0166 E0                MOVX    A,@DPTR
0167 541F              ANL     A,#01FH
0169 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 784
016A 7F01              MOV     R7,#01H
016C 120000      E     LCALL   _LLPLLSetClockSource
                                           ; SOURCE LINE # 785
                                           ; SOURCE LINE # 786
016F         ?C0037:
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 54  

016F 22                RET     
             ; FUNCTION VAdcSetDefaultFor (END)

             ; FUNCTION _VAdcLLPLLUpdateDivider (BEGIN)
                                           ; SOURCE LINE # 808
0000 900000      R     MOV     DPTR,#divider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 809
                                           ; SOURCE LINE # 812
000E E4                CLR     A
000F A3                INC     DPTR
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 814
0011 FD                MOV     R5,A
0012 FC                MOV     R4,A
0013 FF                MOV     R7,A
0014 120000      R     LCALL   _VAdcSetFilterBandwidth
                                           ; SOURCE LINE # 819
0017 900000      R     MOV     DPTR,#divider
001A E0                MOVX    A,@DPTR
001B FE                MOV     R6,A
001C A3                INC     DPTR
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F A3                INC     DPTR
0020 E0                MOVX    A,@DPTR
0021 FD                MOV     R5,A
0022 120000      R     LCALL   _VAdcLLPLLSetDivider
                                           ; SOURCE LINE # 820
0025 900000      R     MOV     DPTR,#fInit
0028 E0                MOVX    A,@DPTR
0029 6011              JZ      ?C0038
                                           ; SOURCE LINE # 821
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 7E00              MOV     R6,#00H
0030 120000      R     LCALL   _WaitStableLLPLL
0033 EF                MOV     A,R7
0034 6006              JZ      ?C0038
                                           ; SOURCE LINE # 822
0036 900000      R     MOV     DPTR,#ret
0039 7401              MOV     A,#01H
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 823
003C         ?C0038:
                                           ; SOURCE LINE # 824
003C E4                CLR     A
003D FD                MOV     R5,A
003E FC                MOV     R4,A
003F 7F07              MOV     R7,#07H
0041 120000      R     LCALL   _VAdcSetFilterBandwidth
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 55  

                                           ; SOURCE LINE # 826
0044 900000      R     MOV     DPTR,#ret
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
                                           ; SOURCE LINE # 827
0049         ?C0040:
0049 22                RET     
             ; FUNCTION _VAdcLLPLLUpdateDivider (END)

             ; FUNCTION _WaitStableLLPLL (BEGIN)
                                           ; SOURCE LINE # 840
;---- Variable 'delay' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 841
                                           ; SOURCE LINE # 850
0000 EF                MOV     A,R7
0001 4E                ORL     A,R6
0002 6003              JZ      ?C0041
                                           ; SOURCE LINE # 851
0004 120000      E     LCALL   _delay1ms
0007         ?C0041:
                                           ; SOURCE LINE # 853
0007 7BFF              MOV     R3,#0FFH
0009 7A00        R     MOV     R2,#HIGH ?SC_0
000B 7900        R     MOV     R1,#LOW ?SC_0
000D 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 854
0010 E4                CLR     A
0011 900000      R     MOV     DPTR,#i
0014 F0                MOVX    @DPTR,A
0015         ?C0042:
                                           ; SOURCE LINE # 855
0015 120000      E     LCALL   MeasStartMeasure
0018 EF                MOV     A,R7
0019 6009              JZ      ?C0045
                                           ; SOURCE LINE # 856
001B 7BFF              MOV     R3,#0FFH
001D 7A00        R     MOV     R2,#HIGH ?SC_19
001F 7900        R     MOV     R1,#LOW ?SC_19
                                           ; SOURCE LINE # 858
0021 020000      R     LJMP    ?C0202
                                           ; SOURCE LINE # 859
0024         ?C0045:
                                           ; SOURCE LINE # 860
0024 7B01              MOV     R3,#01H
0026 7A00        R     MOV     R2,#HIGH HStart
0028 7900        R     MOV     R1,#LOW HStart
002A 120000      E     LCALL   _MeasGetHActive
002D 900000      R     MOV     DPTR,#HActive
0030 EE                MOV     A,R6
0031 F0                MOVX    @DPTR,A
0032 A3                INC     DPTR
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 861
0035 120000      R     LCALL   VAdcGetInputStatus
0038 900000      R     MOV     DPTR,#Pol
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 862
003D 900000      R     MOV     DPTR,#i
0040 E0                MOVX    A,@DPTR
0041 6052              JZ      ?C0048
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 56  

                                           ; SOURCE LINE # 864
0043         ?C0047:
                                           ; SOURCE LINE # 865
0043 900000      R     MOV     DPTR,#HActiveOld
0046 E0                MOVX    A,@DPTR
0047 FE                MOV     R6,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B 900000      R     MOV     DPTR,#HActive
004E E0                MOVX    A,@DPTR
004F FC                MOV     R4,A
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FD                MOV     R5,A
0053 6F                XRL     A,R7
0054 7002              JNZ     ?C0188
0056 EC                MOV     A,R4
0057 6E                XRL     A,R6
0058         ?C0188:
0058 703B              JNZ     ?C0048
005A 900000      R     MOV     DPTR,#PolOld
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 B50731            CJNE    A,AR7,?C0048
                                           ; SOURCE LINE # 866
0064 7BFF              MOV     R3,#0FFH
0066 7A00        R     MOV     R2,#HIGH ?SC_32
0068 7900        R     MOV     R1,#LOW ?SC_32
006A 900000      R     MOV     DPTR,#i
006D E0                MOVX    A,@DPTR
006E 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0071 F0                MOVX    @DPTR,A
0072 900000      R     MOV     DPTR,#HStart
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 A3                INC     DPTR
0078 E0                MOVX    A,@DPTR
0079 900000      E     MOV     DPTR,#?_dPrintf?BYTE+04H
007C CF                XCH     A,R7
007D F0                MOVX    @DPTR,A
007E A3                INC     DPTR
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
0081 A3                INC     DPTR
0082 EC                MOV     A,R4
0083 F0                MOVX    @DPTR,A
0084 A3                INC     DPTR
0085 ED                MOV     A,R5
0086 F0                MOVX    @DPTR,A
0087 900000      R     MOV     DPTR,#Pol
008A E0                MOVX    A,@DPTR
008B 900000      E     MOV     DPTR,#?_dPrintf?BYTE+08H
008E F0                MOVX    @DPTR,A
008F 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 868
0092 7F00              MOV     R7,#00H
0094 22                RET     
                                           ; SOURCE LINE # 869
0095         ?C0048:
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 57  

                                           ; SOURCE LINE # 870
0095 900000      R     MOV     DPTR,#HActive
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
009A A3                INC     DPTR
009B E0                MOVX    A,@DPTR
009C A3                INC     DPTR
009D CF                XCH     A,R7
009E F0                MOVX    @DPTR,A
009F A3                INC     DPTR
00A0 EF                MOV     A,R7
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 871
00A2 900000      R     MOV     DPTR,#Pol
00A5 E0                MOVX    A,@DPTR
00A6 900000      R     MOV     DPTR,#PolOld
00A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 872
00AA 900000      R     MOV     DPTR,#i
00AD E0                MOVX    A,@DPTR
00AE 04                INC     A
00AF F0                MOVX    @DPTR,A
00B0 E0                MOVX    A,@DPTR
00B1 C3                CLR     C
00B2 9480              SUBB    A,#080H
00B4 5003              JNC     $ + 5H
00B6 020000      R     LJMP    ?C0042
00B9         ?C0043:
                                           ; SOURCE LINE # 873
00B9 7BFF              MOV     R3,#0FFH
00BB 7A00        R     MOV     R2,#HIGH ?SC_81
00BD 7900        R     MOV     R1,#LOW ?SC_81
00BF         ?C0202:
00BF 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 875
00C2 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 876
00C4         ?C0046:
00C4 22                RET     
             ; FUNCTION _WaitStableLLPLL (END)

             ; FUNCTION _FindInputModePC (BEGIN)
                                           ; SOURCE LINE # 890
0000 900000      R     MOV     DPTR,#vt
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 900
000B 120000      E     LCALL   MeasGetVFreq
000E 900000      R     MOV     DPTR,#vfreq
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 901
0013 120000      E     LCALL   _MeasRoundDownVFreqValue
0016 900000      R     MOV     DPTR,#vfreq
0019 EF                MOV     A,R7
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 58  

001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 903
001B 120000      E     LCALL   MeasGetVPeriod
001E 900000      R     MOV     DPTR,#vtotal
0021 EE                MOV     A,R6
0022 F0                MOVX    @DPTR,A
0023 A3                INC     DPTR
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 904
0026 900000      R     MOV     DPTR,#vt
0029 E0                MOVX    A,@DPTR
002A FB                MOV     R3,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FA                MOV     R2,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 F9                MOV     R1,A
0031 EE                MOV     A,R6
0032 8FF0              MOV     B,R7
0034 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 909
0037 900000      R     MOV     DPTR,#i
003A 7401              MOV     A,#01H
003C F0                MOVX    @DPTR,A
003D         ?C0050:
003D 120000      E     LCALL   sizeof_PCMDATA
0040 E4                CLR     A
0041 7B19              MOV     R3,#019H
0043 FA                MOV     R2,A
0044 F9                MOV     R1,A
0045 F8                MOV     R0,A
0046 120000      E     LCALL   ?C?ULDIV
0049 900000      R     MOV     DPTR,#i
004C 120000      R     LCALL   L?0240
004F FF                MOV     R7,A
0050 E4                CLR     A
0051 FC                MOV     R4,A
0052 FD                MOV     R5,A
0053 FE                MOV     R6,A
0054 D3                SETB    C
0055 120000      E     LCALL   ?C?ULCMP
0058 5003              JNC     $ + 5H
005A 020000      R     LJMP    ?C0051
                                           ; SOURCE LINE # 910
005D 900000      R     MOV     DPTR,#i
0060 E0                MOVX    A,@DPTR
0061 75F019            MOV     B,#019H
0064 A4                MUL     AB
0065 2400        E     ADD     A,#LOW PCMDATA
0067 F582              MOV     DPL,A
0069 E5F0              MOV     A,B
006B 3400        E     ADDC    A,#HIGH PCMDATA
006D F583              MOV     DPH,A
006F E4                CLR     A
0070 93                MOVC    A,@A+DPTR
0071 FF                MOV     R7,A
0072 7003              JNZ     $ + 5H
0074 020000      R     LJMP    ?C0052
0077         ?C0053:
                                           ; SOURCE LINE # 911
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 59  

0077 EF                MOV     A,R7
0078 6403              XRL     A,#03H
007A 7003              JNZ     $ + 5H
007C 020000      R     LJMP    ?C0052
007F         ?C0054:
                                           ; SOURCE LINE # 912
007F 900000      R     MOV     DPTR,#i
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 75F019            MOV     B,#019H
0087 A4                MUL     AB
0088 2400        E     ADD     A,#LOW PCMDATA+05H
008A F582              MOV     DPL,A
008C E5F0              MOV     A,B
008E 3400        E     ADDC    A,#HIGH PCMDATA+05H
0090 F583              MOV     DPH,A
0092 E4                CLR     A
0093 93                MOVC    A,@A+DPTR
0094 FE                MOV     R6,A
0095 900000      R     MOV     DPTR,#vfreq
0098 E0                MOVX    A,@DPTR
0099 FD                MOV     R5,A
009A EE                MOV     A,R6
009B 6D                XRL     A,R5
009C 6003              JZ      $ + 5H
009E 020000      R     LJMP    ?C0052
                                           ; SOURCE LINE # 914
00A1 75F019            MOV     B,#019H
00A4 EF                MOV     A,R7
00A5 120000      R     LCALL   L?0260
00A8 120000      R     LCALL   L?0237
00AB FF                MOV     R7,A
00AC 900000      R     MOV     DPTR,#vtotal
00AF E0                MOVX    A,@DPTR
00B0 FC                MOV     R4,A
00B1 A3                INC     DPTR
00B2 E0                MOVX    A,@DPTR
00B3 FD                MOV     R5,A
00B4 EF                MOV     A,R7
00B5 6D                XRL     A,R5
00B6 7002              JNZ     ?C0189
00B8 EE                MOV     A,R6
00B9 6C                XRL     A,R4
00BA         ?C0189:
00BA 6050              JZ      ?C0057
00BC ED                MOV     A,R5
00BD 2401              ADD     A,#01H
00BF FB                MOV     R3,A
00C0 E4                CLR     A
00C1 3C                ADDC    A,R4
00C2 FA                MOV     R2,A
00C3 EF                MOV     A,R7
00C4 6B                XRL     A,R3
00C5 7002              JNZ     ?C0190
00C7 EE                MOV     A,R6
00C8 6A                XRL     A,R2
00C9         ?C0190:
00C9 6041              JZ      ?C0057
00CB ED                MOV     A,R5
00CC 24FF              ADD     A,#0FFH
00CE FF                MOV     R7,A
00CF EC                MOV     A,R4
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 60  

00D0 120000      R     LCALL   L?0259
00D3 120000      R     LCALL   L?0275
00D6 6F                XRL     A,R7
00D7 7002              JNZ     ?C0191
00D9 EC                MOV     A,R4
00DA 6E                XRL     A,R6
00DB         ?C0191:
00DB 602F              JZ      ?C0057
00DD 900000      R     MOV     DPTR,#vtotal+01H
00E0 E0                MOVX    A,@DPTR
00E1 2402              ADD     A,#02H
00E3 FF                MOV     R7,A
00E4 900000      R     MOV     DPTR,#vtotal
00E7 E0                MOVX    A,@DPTR
00E8 3400              ADDC    A,#00H
00EA FE                MOV     R6,A
00EB ED                MOV     A,R5
00EC 6F                XRL     A,R7
00ED 7002              JNZ     ?C0192
00EF EC                MOV     A,R4
00F0 6E                XRL     A,R6
00F1         ?C0192:
00F1 6019              JZ      ?C0057
00F3 A3                INC     DPTR
00F4 E0                MOVX    A,@DPTR
00F5 24FE              ADD     A,#0FEH
00F7 FF                MOV     R7,A
00F8 900000      R     MOV     DPTR,#vtotal
00FB E0                MOVX    A,@DPTR
00FC 120000      R     LCALL   L?0259
00FF F583              MOV     DPH,A
0101 7401              MOV     A,#01H
0103 93                MOVC    A,@A+DPTR
0104 6F                XRL     A,R7
0105 7003              JNZ     ?C0193
0107 E4                CLR     A
0108 93                MOVC    A,@A+DPTR
0109 6E                XRL     A,R6
010A         ?C0193:
010A 705C              JNZ     ?C0052
010C         ?C0057:
                                           ; SOURCE LINE # 918
                                           ; SOURCE LINE # 920
010C 7BFF              MOV     R3,#0FFH
010E 7A00        R     MOV     R2,#HIGH ?SC_95
0110 7900        R     MOV     R1,#LOW ?SC_95
0112 900000      R     MOV     DPTR,#i
0115 E0                MOVX    A,@DPTR
0116 FF                MOV     R7,A
0117 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
011A F0                MOVX    @DPTR,A
011B 900000      R     MOV     DPTR,#vtotal
011E E0                MOVX    A,@DPTR
011F FD                MOV     R5,A
0120 A3                INC     DPTR
0121 E0                MOVX    A,@DPTR
0122 900000      E     MOV     DPTR,#?_dPrintf?BYTE+04H
0125 CD                XCH     A,R5
0126 F0                MOVX    @DPTR,A
0127 A3                INC     DPTR
0128 ED                MOV     A,R5
0129 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 61  

012A 75F019            MOV     B,#019H
012D EF                MOV     A,R7
012E A4                MUL     AB
012F 2400        E     ADD     A,#LOW PCMDATA+01H
0131 F582              MOV     DPL,A
0133 E5F0              MOV     A,B
0135 3400        E     ADDC    A,#HIGH PCMDATA+01H
0137 120000      R     LCALL   L?0279
013A 900000      E     MOV     DPTR,#?_dPrintf?BYTE+06H
013D CF                XCH     A,R7
013E F0                MOVX    @DPTR,A
013F A3                INC     DPTR
0140 EF                MOV     A,R7
0141 F0                MOVX    @DPTR,A
0142 900000      R     MOV     DPTR,#i
0145 E0                MOVX    A,@DPTR
0146 75F019            MOV     B,#019H
0149 A4                MUL     AB
014A 2400        E     ADD     A,#LOW PCMDATA+03H
014C F582              MOV     DPL,A
014E E5F0              MOV     A,B
0150 3400        E     ADDC    A,#HIGH PCMDATA+03H
0152 120000      R     LCALL   L?0279
0155 900000      E     MOV     DPTR,#?_dPrintf?BYTE+08H
0158 120000      R     LCALL   L?0301
015B 900000      E     MOV     DPTR,#?_dPrintf?BYTE+0AH
015E F0                MOVX    @DPTR,A
015F 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 923
0162 900000      R     MOV     DPTR,#i
0165 E0                MOVX    A,@DPTR
0166 FF                MOV     R7,A
0167 22                RET     
                                           ; SOURCE LINE # 924
                                           ; SOURCE LINE # 925
                                           ; SOURCE LINE # 926
0168         ?C0052:
0168 900000      R     MOV     DPTR,#i
016B E0                MOVX    A,@DPTR
016C 04                INC     A
016D F0                MOVX    @DPTR,A
016E 020000      R     LJMP    ?C0050
0171         ?C0051:
                                           ; SOURCE LINE # 928
0171 7BFF              MOV     R3,#0FFH
0173 7A00        R     MOV     R2,#HIGH ?SC_150
0175 7900        R     MOV     R1,#LOW ?SC_150
0177 120000      E     LCALL   _ePuts
                                           ; SOURCE LINE # 929
017A 7BFF              MOV     R3,#0FFH
017C 7A00        R     MOV     R2,#HIGH ?SC_194
017E 7900        R     MOV     R1,#LOW ?SC_194
0180 900000      R     MOV     DPTR,#vtotal
0183 E0                MOVX    A,@DPTR
0184 FF                MOV     R7,A
0185 A3                INC     DPTR
0186 E0                MOVX    A,@DPTR
0187 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
018A 120000      R     LCALL   L?0301
018D 900000      E     MOV     DPTR,#?_ePrintf?BYTE+05H
0190 F0                MOVX    @DPTR,A
0191 120000      E     LCALL   _ePrintf
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 62  

                                           ; SOURCE LINE # 930
0194 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 931
0196         ?C0058:
0196 22                RET     
             ; FUNCTION _FindInputModePC (END)

             ; FUNCTION FindInputModeCOMP (BEGIN)
                                           ; SOURCE LINE # 1002
                                           ; SOURCE LINE # 1003
                                           ; SOURCE LINE # 1013
0000 120000      E     LCALL   MeasGetVFreq
0003 900000      R     MOV     DPTR,#vfreq
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1015
0008 C3                CLR     C
0009 9437              SUBB    A,#037H
000B 5005              JNC     ?C0059
000D 7432              MOV     A,#032H
000F F0                MOVX    @DPTR,A
0010 8006              SJMP    ?C0060
0012         ?C0059:
                                           ; SOURCE LINE # 1016
0012 900000      R     MOV     DPTR,#vfreq
0015 743C              MOV     A,#03CH
0017 F0                MOVX    @DPTR,A
0018         ?C0060:
                                           ; SOURCE LINE # 1018
0018 120000      E     LCALL   MeasGetVPeriod
001B 900000      R     MOV     DPTR,#vtotal
001E EE                MOV     A,R6
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1019
0023 E4                CLR     A
0024 900000      R     MOV     DPTR,#i
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1021
0028 7BFF              MOV     R3,#0FFH
002A 7A00        R     MOV     R2,#HIGH ?SC_220
002C 7900        R     MOV     R1,#LOW ?SC_220
002E 900000      R     MOV     DPTR,#vperiod
0031 120000      R     LCALL   L?0226
0034 120000      R     LCALL   L?0302
0037 900000      R     MOV     DPTR,#vfreq
003A E0                MOVX    A,@DPTR
003B 900000      E     MOV     DPTR,#?_dPrintf?BYTE+07H
003E F0                MOVX    @DPTR,A
003F 900000      R     MOV     DPTR,#vtotal
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 900000      E     MOV     DPTR,#?_dPrintf?BYTE+08H
0049 CF                XCH     A,R7
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 63  

004E 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1022
0051 900000      R     MOV     DPTR,#vfreq
0054 E0                MOVX    A,@DPTR
0055 6432              XRL     A,#032H
0057 7044              JNZ     ?C0061
                                           ; SOURCE LINE # 1023
0059 120000      R     LCALL   L?0304
005C 9440              SUBB    A,#040H
005E EE                MOV     A,R6
005F 9401              SUBB    A,#01H
0061 5009              JNC     ?C0062
0063 900000      R     MOV     DPTR,#i
0066 7402              MOV     A,#02H
0068 F0                MOVX    @DPTR,A
0069 020000      R     LJMP    ?C0070
006C         ?C0062:
                                           ; SOURCE LINE # 1024
006C C3                CLR     C
006D EF                MOV     A,R7
006E 944E              SUBB    A,#04EH
0070 EE                MOV     A,R6
0071 9402              SUBB    A,#02H
0073 5008              JNC     ?C0064
0075 900000      R     MOV     DPTR,#i
0078 7405              MOV     A,#05H
007A F0                MOVX    @DPTR,A
007B 8061              SJMP    ?C0070
007D         ?C0064:
                                           ; SOURCE LINE # 1025
007D C3                CLR     C
007E EF                MOV     A,R7
007F 9476              SUBB    A,#076H
0081 EE                MOV     A,R6
0082 9402              SUBB    A,#02H
0084 5008              JNC     ?C0066
0086 900000      R     MOV     DPTR,#i
0089 7404              MOV     A,#04H
008B F0                MOVX    @DPTR,A
008C 8050              SJMP    ?C0070
008E         ?C0066:
                                           ; SOURCE LINE # 1027
008E 120000      R     LCALL   L?0299
0091 5005              JNC     ?C0068
0093 7407              MOV     A,#07H
0095 F0                MOVX    @DPTR,A
0096 8046              SJMP    ?C0070
0098         ?C0068:
                                           ; SOURCE LINE # 1028
0098 7409              MOV     A,#09H
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1029
009B 8041              SJMP    ?C0070
009D         ?C0061:
                                           ; SOURCE LINE # 1030
                                           ; SOURCE LINE # 1031
009D 120000      R     LCALL   L?0304
00A0 942C              SUBB    A,#02CH
00A2 EE                MOV     A,R6
00A3 9401              SUBB    A,#01H
00A5 5008              JNC     ?C0071
00A7 900000      R     MOV     DPTR,#i
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 64  

00AA 7401              MOV     A,#01H
00AC F0                MOVX    @DPTR,A
00AD 802F              SJMP    ?C0070
00AF         ?C0071:
                                           ; SOURCE LINE # 1032
00AF C3                CLR     C
00B0 EF                MOV     A,R7
00B1 941C              SUBB    A,#01CH
00B3 EE                MOV     A,R6
00B4 9402              SUBB    A,#02H
00B6 5008              JNC     ?C0073
00B8 900000      R     MOV     DPTR,#i
00BB 7403              MOV     A,#03H
00BD F0                MOVX    @DPTR,A
00BE 801E              SJMP    ?C0070
00C0         ?C0073:
                                           ; SOURCE LINE # 1033
00C0 C3                CLR     C
00C1 EF                MOV     A,R7
00C2 9458              SUBB    A,#058H
00C4 EE                MOV     A,R6
00C5 9402              SUBB    A,#02H
00C7 5008              JNC     ?C0075
00C9 900000      R     MOV     DPTR,#i
00CC 7406              MOV     A,#06H
00CE F0                MOVX    @DPTR,A
00CF 800D              SJMP    ?C0070
00D1         ?C0075:
                                           ; SOURCE LINE # 1034
00D1 120000      R     LCALL   L?0299
00D4 5005              JNC     ?C0077
00D6 7408              MOV     A,#08H
00D8 F0                MOVX    @DPTR,A
00D9 8003              SJMP    ?C0070
00DB         ?C0077:
                                           ; SOURCE LINE # 1035
00DB 740A              MOV     A,#0AH
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1036
00DE         ?C0070:
                                           ; SOURCE LINE # 1038
00DE 900000      R     MOV     DPTR,#i
00E1 E0                MOVX    A,@DPTR
00E2 FF                MOV     R7,A
                                           ; SOURCE LINE # 1039
00E3         ?C0079:
00E3 22                RET     
             ; FUNCTION FindInputModeCOMP (END)

             ; FUNCTION _PCSetInputCrop (BEGIN)
                                           ; SOURCE LINE # 1052
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
                                           ; SOURCE LINE # 1053
                                           ; SOURCE LINE # 1060
0004 120000      R     LCALL   L?0266
0007 FF                MOV     R7,A
0008 5401              ANL     A,#01H
000A 900000      R     MOV     DPTR,#offset
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1061
000E 25E0              ADD     A,ACC
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 65  

0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1062
0011 E0                MOVX    A,@DPTR
0012 2402              ADD     A,#02H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1063
0015 E500        E     MOV     A,regTW88+01H
0017 2440              ADD     A,#040H
0019 120000      R     LCALL   L?0267
001C 5410              ANL     A,#010H
001E C4                SWAP    A
001F 540F              ANL     A,#0FH
0021 FE                MOV     R6,A
0022 900000      R     MOV     DPTR,#offset
0025 E0                MOVX    A,@DPTR
0026 2E                ADD     A,R6
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1065
0028 EF                MOV     A,R7
0029 13                RRC     A
002A 13                RRC     A
002B 5401              ANL     A,#01H
002D FF                MOV     R7,A
002E A3                INC     DPTR
                                           ; SOURCE LINE # 1066
002F 120000      R     LCALL   L?0266
0032 13                RRC     A
0033 13                RRC     A
0034 13                RRC     A
0035 5401              ANL     A,#01H
0037 FE                MOV     R6,A
0038 900000      R     MOV     DPTR,#VPol
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1068
003C 7BFF              MOV     R3,#0FFH
003E 7A00        R     MOV     R2,#HIGH ?SC_264
0040 7900        R     MOV     R1,#LOW ?SC_264
0042 900000      R     MOV     DPTR,#offset
0045 E0                MOVX    A,@DPTR
0046 120000      R     LCALL   L?0233
0049 A3                INC     DPTR
004A EE                MOV     A,R6
004B F0                MOVX    @DPTR,A
004C 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1071
004F 120000      E     LCALL   MeasGetHSyncRiseToFallWidth
0052 900000      R     MOV     DPTR,#Meas_HPulse
0055 EE                MOV     A,R6
0056 F0                MOVX    @DPTR,A
0057 A3                INC     DPTR
0058 EF                MOV     A,R7
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1072
005A 120000      E     LCALL   MeasGetVSyncRiseToFallWidth
005D 900000      R     MOV     DPTR,#Meas_VPulse
                                           ; SOURCE LINE # 1073
0060 120000      R     LCALL   L?0244
0063 7A00        R     MOV     R2,#HIGH ?SC_313
0065 7900        R     MOV     R1,#LOW ?SC_313
0067 900000      R     MOV     DPTR,#Meas_HPulse
006A 120000      R     LCALL   L?0247
006D 120000      E     LCALL   _dPrintf
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 66  

                                           ; SOURCE LINE # 1075
0070 900000      R     MOV     DPTR,#HPol
0073 E0                MOVX    A,@DPTR
0074 900000      R     MOV     DPTR,#Meas_HPulse
0077 120000      R     LCALL   L?0289
007A 900000      R     MOV     DPTR,#offset
007D E0                MOVX    A,@DPTR
007E FD                MOV     R5,A
007F 900000      E     MOV     DPTR,#MeasHStart+01H
0082 E0                MOVX    A,@DPTR
0083 2D                ADD     A,R5
0084 FD                MOV     R5,A
0085 900000      E     MOV     DPTR,#MeasHStart
0088 E0                MOVX    A,@DPTR
0089 3400              ADDC    A,#00H
008B CD                XCH     A,R5
008C C3                CLR     C
008D 9F                SUBB    A,R7
008E FF                MOV     R7,A
008F ED                MOV     A,R5
0090 9E                SUBB    A,R6
0091 900000      R     MOV     DPTR,#hstart
0094 F0                MOVX    @DPTR,A
0095 FA                MOV     R2,A
0096 A3                INC     DPTR
0097 EF                MOV     A,R7
0098 F0                MOVX    @DPTR,A
0099 FB                MOV     R3,A
                                           ; SOURCE LINE # 1076
009A 900000      R     MOV     DPTR,#VPol
009D E0                MOVX    A,@DPTR
009E 900000      R     MOV     DPTR,#Meas_VPulse
00A1 120000      R     LCALL   L?0289
00A4 C3                CLR     C
00A5 900000      E     MOV     DPTR,#MeasVStart+01H
00A8 E0                MOVX    A,@DPTR
00A9 9F                SUBB    A,R7
00AA FF                MOV     R7,A
00AB 900000      E     MOV     DPTR,#MeasVStart
00AE E0                MOVX    A,@DPTR
00AF 9E                SUBB    A,R6
00B0 900000      R     MOV     DPTR,#vstart
00B3 F0                MOVX    @DPTR,A
00B4 A3                INC     DPTR
00B5 EF                MOV     A,R7
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1077
00B7 900000      E     MOV     DPTR,#RGB_HSTART
00BA EA                MOV     A,R2
00BB F0                MOVX    @DPTR,A
00BC A3                INC     DPTR
00BD EB                MOV     A,R3
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1080
00BF 900000      R     MOV     DPTR,#hstart+01H
00C2 E0                MOVX    A,@DPTR
00C3 2432              ADD     A,#032H
00C5 F0                MOVX    @DPTR,A
00C6 900000      R     MOV     DPTR,#hstart
00C9 E0                MOVX    A,@DPTR
00CA 3400              ADDC    A,#00H
00CC F0                MOVX    @DPTR,A
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 67  

                                           ; SOURCE LINE # 1081
00CD 900000      R     MOV     DPTR,#mode
00D0 E0                MOVX    A,@DPTR
00D1 FF                MOV     R7,A
00D2 120000      E     LCALL   _GetHActiveEE
00D5 900000      R     MOV     DPTR,#hstart+01H
00D8 120000      R     LCALL   L?0305
00DB 900000      R     MOV     DPTR,#hstart
00DE E0                MOVX    A,@DPTR
00DF 9E                SUBB    A,R6
00E0 FE                MOV     R6,A
                                           ; SOURCE LINE # 1083
00E1 120000      R     LCALL   L?0245
00E4 7A00        R     MOV     R2,#HIGH ?SC_338
00E6 7900        R     MOV     R1,#LOW ?SC_338
00E8 EE                MOV     A,R6
00E9 120000      R     LCALL   L?0233
00EC 900000      R     MOV     DPTR,#vstart
00EF 120000      R     LCALL   L?0264
00F2 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1084
00F5 7BFF              MOV     R3,#0FFH
00F7 7A00        R     MOV     R2,#HIGH ?SC_364
00F9 7900        R     MOV     R1,#LOW ?SC_364
00FB 900000      E     MOV     DPTR,#MeasHLen
00FE 120000      R     LCALL   L?0231
0101 900000      E     MOV     DPTR,#MeasVLen
0104 120000      R     LCALL   L?0264
0107 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1087
010A 900000      R     MOV     DPTR,#hstart
010D E0                MOVX    A,@DPTR
010E FE                MOV     R6,A
010F A3                INC     DPTR
0110 E0                MOVX    A,@DPTR
0111 FF                MOV     R7,A
0112 900000      E     MOV     DPTR,#MeasHLen
0115 E0                MOVX    A,@DPTR
0116 FA                MOV     R2,A
0117 A3                INC     DPTR
0118 E0                MOVX    A,@DPTR
0119 FB                MOV     R3,A
011A 900000      E     MOV     DPTR,#?_InputSetCrop?BYTE+06H
011D 7407              MOV     A,#07H
011F F0                MOVX    @DPTR,A
0120 A3                INC     DPTR
0121 74FE              MOV     A,#0FEH
0123 F0                MOVX    @DPTR,A
0124 7D01              MOV     R5,#01H
0126 7C00              MOV     R4,#00H
0128 020000      E     LJMP    _InputSetCrop
             ; FUNCTION _PCSetInputCrop (END)

             ; FUNCTION _YUVSetOutput (BEGIN)
                                           ; SOURCE LINE # 1097
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1098
                                           ; SOURCE LINE # 1105
0005 120000      R     LCALL   L?0277
0008 120000      R     LCALL   L?0237
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 68  

000B FF                MOV     R7,A
000C 120000      E     LCALL   _ScalerSetHScale
                                           ; SOURCE LINE # 1106
000F 900000      R     MOV     DPTR,#mode
0012 120000      R     LCALL   L?0236
0015 FF                MOV     R7,A
0016 120000      E     LCALL   _ScalerSetVScale
                                           ; SOURCE LINE # 1108
0019 120000      E     LCALL   ScalerReadLineBufferDelay
001C EF                MOV     A,R7
001D 2420              ADD     A,#020H
001F 900000      R     MOV     DPTR,#HDE
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1109
0023 7BFF              MOV     R3,#0FFH
0025 7A00        R     MOV     R2,#HIGH ?SC_385
0027 7900        R     MOV     R1,#LOW ?SC_385
0029 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
002C F0                MOVX    @DPTR,A
002D 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1110
0030 900000      R     MOV     DPTR,#HDE
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 120000      E     LCALL   _ScalerWriteHDEReg
                                           ; SOURCE LINE # 1111
0038 900000      R     MOV     DPTR,#mode
003B E0                MOVX    A,@DPTR
003C 900000      R     MOV     DPTR,#YUVOffsetV
003F 93                MOVC    A,@A+DPTR
0040 FF                MOV     R7,A
0041 120000      E     LCALL   _ScalerWriteVDEReg
                                           ; SOURCE LINE # 1114
0044 120000      E     LCALL   ScalerCalcFreerunHtotal
;---- Variable 'temp16' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1115
0047 120000      E     LCALL   _ScalerWriteFreerunHtotal
                                           ; SOURCE LINE # 1117
004A 120000      E     LCALL   ScalerCalcFreerunVtotal
                                           ; SOURCE LINE # 1118
004D 120000      E     LCALL   _ScalerWriteFreerunVtotal
                                           ; SOURCE LINE # 1120
0050 E4                CLR     A
0051 FD                MOV     R5,A
0052 7F01              MOV     R7,#01H
0054 120000      E     LCALL   _ScalerSetFreerunAutoManual
                                           ; SOURCE LINE # 1121
0057 020000      E     LJMP    _ScalerSetMuteAutoManual
             ; FUNCTION _YUVSetOutput (END)

             ; FUNCTION _PCSetOutput (BEGIN)
                                           ; SOURCE LINE # 1134
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1135
                                           ; SOURCE LINE # 1139
0005 7BFF              MOV     R3,#0FFH
0007 7A00        R     MOV     R2,#HIGH ?SC_403
0009 7900        R     MOV     R1,#LOW ?SC_403
000B 120000      E     LCALL   _dPuts
                                           ; SOURCE LINE # 1141
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 69  

000E 900000      E     MOV     DPTR,#MeasHLen
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 120000      E     LCALL   _ScalerSetHScale
                                           ; SOURCE LINE # 1142
0019 900000      E     MOV     DPTR,#MeasVLen
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 120000      E     LCALL   _ScalerSetVScale
                                           ; SOURCE LINE # 1145
0024 120000      E     LCALL   ScalerCalcHDE
0027 900000      R     MOV     DPTR,#HDE
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1146
002C 7BFF              MOV     R3,#0FFH
002E 7A00        R     MOV     R2,#HIGH ?SC_416
0030 7900        R     MOV     R1,#LOW ?SC_416
0032 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0035 F0                MOVX    @DPTR,A
0036 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1147
0039 900000      R     MOV     DPTR,#HDE
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E 120000      E     LCALL   _ScalerWriteHDEReg
                                           ; SOURCE LINE # 1150
0041 120000      E     LCALL   ScalerCalcVDE
                                           ; SOURCE LINE # 1151
0044 120000      R     LCALL   L?0242
0047 120000      R     LCALL   L?0252
                                           ; SOURCE LINE # 1152
004A 120000      R     LCALL   L?0287
004D A3                INC     DPTR
004E E0                MOVX    A,@DPTR
004F 900000      E     MOV     DPTR,#RGB_VDE
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1154
0053 900000      R     MOV     DPTR,#mode
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 120000      E     LCALL   _GetVBackPorchEE
005B 900000      R     MOV     DPTR,#temp16+01H
005E 120000      R     LCALL   L?0281
0061 900000      R     MOV     DPTR,#temp16
                                           ; SOURCE LINE # 1155
0064 120000      R     LCALL   L?0282
0067 900000      R     MOV     DPTR,#temp16
                                           ; SOURCE LINE # 1156
006A 120000      R     LCALL   L?0230
                                           ; SOURCE LINE # 1157
006D 120000      R     LCALL   L?0287
0070 A3                INC     DPTR
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 120000      E     LCALL   _ScalerWriteVDEReg
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 70  

                                           ; SOURCE LINE # 1160
0076 120000      E     LCALL   ScalerCalcFreerunHtotal
                                           ; SOURCE LINE # 1161
0079 120000      R     LCALL   L?0242
007C 7A00        R     MOV     R2,#HIGH ?SC_459
007E 7900        R     MOV     R1,#LOW ?SC_459
0080 120000      R     LCALL   L?0253
                                           ; SOURCE LINE # 1162
0083 120000      R     LCALL   L?0297
0086 120000      E     LCALL   _ScalerWriteFreerunHtotal
                                           ; SOURCE LINE # 1165
0089 120000      E     LCALL   ScalerCalcFreerunVtotal
                                           ; SOURCE LINE # 1166
008C 120000      R     LCALL   L?0243
008F 7A00        R     MOV     R2,#HIGH ?SC_483
0091 7900        R     MOV     R1,#LOW ?SC_483
0093 120000      R     LCALL   L?0253
                                           ; SOURCE LINE # 1167
0096 120000      R     LCALL   L?0297
0099 120000      E     LCALL   _ScalerWriteFreerunVtotal
                                           ; SOURCE LINE # 1170
009C E4                CLR     A
009D FD                MOV     R5,A
009E 7F01              MOV     R7,#01H
00A0 120000      E     LCALL   _ScalerSetFreerunAutoManual
                                           ; SOURCE LINE # 1171
00A3 7D02              MOV     R5,#02H
00A5 020000      E     LJMP    _ScalerSetMuteAutoManual
                                           ; SOURCE LINE # 1172
00A8         L?0287:
00A8 120000      E     LCALL   _dPrintf
00AB 900000      R     MOV     DPTR,#temp16
00AE 22                RET     
00AF         L?0297:
00AF 120000      E     LCALL   _dPrintf
00B2 900000      R     MOV     DPTR,#temp16
00B5 E0                MOVX    A,@DPTR
00B6 FE                MOV     R6,A
00B7 A3                INC     DPTR
00B8 E0                MOVX    A,@DPTR
00B9 FF                MOV     R7,A
00BA 22                RET     
             ; FUNCTION _PCSetOutput (END)

             ; FUNCTION PCCheckMode (BEGIN)
                                           ; SOURCE LINE # 1184
                                           ; SOURCE LINE # 1185
                                           ; SOURCE LINE # 1189
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#i
0004 F0                MOVX    @DPTR,A
0005         ?C0083:
                                           ; SOURCE LINE # 1190
0005 120000      E     LCALL   MeasStartMeasure
0008 EF                MOV     A,R7
0009 6003              JZ      ?C0086
                                           ; SOURCE LINE # 1191
000B 7F00              MOV     R7,#00H
000D 22                RET     
000E         ?C0086:
                                           ; SOURCE LINE # 1193
000E 7B01              MOV     R3,#01H
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 71  

0010 7A00        R     MOV     R2,#HIGH VTotal
0012 7900        R     MOV     R1,#LOW VTotal
0014 120000      R     LCALL   _FindInputModePC
0017 900000      R     MOV     DPTR,#mode
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1194
001C 6014              JZ      ?C0085
                                           ; SOURCE LINE # 1195
001E 7BFF              MOV     R3,#0FFH
0020 7A00        R     MOV     R2,#HIGH ?SC_507
0022 7900        R     MOV     R1,#LOW ?SC_507
0024 E0                MOVX    A,@DPTR
0025 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0028 F0                MOVX    @DPTR,A
0029 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1196
002C 900000      R     MOV     DPTR,#mode
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 22                RET     
                                           ; SOURCE LINE # 1197
                                           ; SOURCE LINE # 1198
0032         ?C0085:
0032 900000      R     MOV     DPTR,#i
0035 120000      R     LCALL   L?0290
0038 40CB              JC      ?C0083
003A         ?C0084:
                                           ; SOURCE LINE # 1200
003A 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1201
003C         ?C0087:
003C 22                RET     
             ; FUNCTION PCCheckMode (END)

             ; FUNCTION _AdjustPixelClk (BEGIN)
                                           ; SOURCE LINE # 1220
0000 900000      R     MOV     DPTR,#digital_divider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1221
                                           ; SOURCE LINE # 1228
000B E4                CLR     A
000C FF                MOV     R7,A
000D 120000      E     LCALL   _SspllGetPPF
0010 120000      R     LCALL   L?0263
                                           ; SOURCE LINE # 1240
0013 120000      E     LCALL   ScalerReadXDownReg
0016 900000      R     MOV     DPTR,#HDown
0019 EE                MOV     A,R6
001A F0                MOVX    @DPTR,A
001B A3                INC     DPTR
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1241
001E 120000      E     LCALL   MeasGetHPeriod
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 72  

0021 900000      R     MOV     DPTR,#HPeriod
0024 EE                MOV     A,R6
0025 F0                MOVX    @DPTR,A
0026 A3                INC     DPTR
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1242
0029 120000      E     LCALL   MeasGetVPeriod27
;---- Variable 'VPeriod' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 1243
002C AB07              MOV     R3,AR7
002E AA06              MOV     R2,AR6
0030 A905              MOV     R1,AR5
0032 A804              MOV     R0,AR4
0034 7FC0              MOV     R7,#0C0H
0036 7EFC              MOV     R6,#0FCH
0038 7D9B              MOV     R5,#09BH
003A 7C01              MOV     R4,#01H
003C 120000      E     LCALL   ?C?ULDIV
003F 900000      R     MOV     DPTR,#VFreq
0042 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1245
0045 900000      E     MOV     DPTR,#InputMain
0048 E0                MOVX    A,@DPTR
0049 FC                MOV     R4,A
004A B4030E            CJNE    A,#03H,?C0089
                                           ; SOURCE LINE # 1246
004D 120000      R     LCALL   VAdcLLPLLGetDivider
0050 EF                MOV     A,R7
0051 2401              ADD     A,#01H
0053 FF                MOV     R7,A
0054 E4                CLR     A
0055 3E                ADDC    A,R6
0056 900000      R     MOV     DPTR,#Divider
                                           ; SOURCE LINE # 1248
0059 8018              SJMP    ?C0206
005B         ?C0089:
                                           ; SOURCE LINE # 1251
                                           ; SOURCE LINE # 1254
005B EC                MOV     A,R4
005C B40409            CJNE    A,#04H,?C0091
                                           ; SOURCE LINE # 1255
005F 120000      E     LCALL   MeasGetDviDivider
0062 900000      R     MOV     DPTR,#Divider
0065 EE                MOV     A,R6
                                           ; SOURCE LINE # 1256
0066 800B              SJMP    ?C0203
0068         ?C0091:
                                           ; SOURCE LINE # 1257
                                           ; SOURCE LINE # 1259
0068 900000      R     MOV     DPTR,#digital_divider
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F 900000      R     MOV     DPTR,#Divider
0072 CF                XCH     A,R7
0073         ?C0203:
0073         ?C0206:
0073 F0                MOVX    @DPTR,A
0074 A3                INC     DPTR
0075 EF                MOV     A,R7
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 73  

0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1260
                                           ; SOURCE LINE # 1261
0077         ?C0090:
                                           ; SOURCE LINE # 1263
0077 120000      E     LCALL   MeasGetVPeriod
007A 900000      R     MOV     DPTR,#VPN
007D EE                MOV     A,R6
007E F0                MOVX    @DPTR,A
007F A3                INC     DPTR
0080 EF                MOV     A,R7
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1264
0082 120000      E     LCALL   ScalerReadVScaleReg
0085 900000      R     MOV     DPTR,#VScale
0088 EE                MOV     A,R6
0089 F0                MOVX    @DPTR,A
008A A3                INC     DPTR
008B EF                MOV     A,R7
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1266
008D 120000      E     LCALL   ScalerReadHDEReg
0090 900000      R     MOV     DPTR,#H_DE
0093 E4                CLR     A
0094 F0                MOVX    @DPTR,A
0095 A3                INC     DPTR
0096 EF                MOV     A,R7
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1267
0098 120000      E     LCALL   ScalerReadOutputWidth
009B 900000      R     MOV     DPTR,#HActive
                                           ; SOURCE LINE # 1277
009E 120000      R     LCALL   L?0244
00A1 7A00        R     MOV     R2,#HIGH ?SC_528
00A3 7900        R     MOV     R1,#LOW ?SC_528
00A5 900000      R     MOV     DPTR,#PCLK
00A8 120000      R     LCALL   L?0226
00AB 120000      R     LCALL   L?0302
00AE 900000      R     MOV     DPTR,#Divider
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 900000      E     MOV     DPTR,#?_dPrintf?BYTE+07H
00B8 CF                XCH     A,R7
00B9 F0                MOVX    @DPTR,A
00BA A3                INC     DPTR
00BB EF                MOV     A,R7
00BC F0                MOVX    @DPTR,A
00BD 900000      R     MOV     DPTR,#HPeriod
00C0 120000      R     LCALL   L?0286
00C3 900000      R     MOV     DPTR,#HDown
00C6 E0                MOVX    A,@DPTR
00C7 FF                MOV     R7,A
00C8 A3                INC     DPTR
00C9 E0                MOVX    A,@DPTR
00CA 900000      E     MOV     DPTR,#?_dPrintf?BYTE+0BH
00CD CF                XCH     A,R7
00CE F0                MOVX    @DPTR,A
00CF A3                INC     DPTR
00D0 EF                MOV     A,R7
00D1 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 74  

00D2 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1278
00D5 900000      E     MOV     DPTR,#InputMain
00D8 E0                MOVX    A,@DPTR
00D9 6403              XRL     A,#03H
00DB 6003              JZ      $ + 5H
00DD 020000      R     LJMP    ?C0093
                                           ; SOURCE LINE # 1279
00E0 900000      R     MOV     DPTR,#i
00E3 7402              MOV     A,#02H
00E5 F0                MOVX    @DPTR,A
00E6         ?C0094:
                                           ; SOURCE LINE # 1292
00E6 120000      R     LCALL   L?0272
00E9 120000      R     LCALL   L?0228
00EC 120000      R     LCALL   L?0261
00EF C006              PUSH    AR6
00F1 C007              PUSH    AR7
00F3 120000      R     LCALL   L?0256
00F6 D007              POP     AR7
00F8 D006              POP     AR6
00FA 120000      R     LCALL   L?0238
00FD 120000      R     LCALL   L?0268
0100 C006              PUSH    AR6
0102 C007              PUSH    AR7
0104 120000      R     LCALL   L?0274
0107 D007              POP     AR7
0109 D006              POP     AR6
                                           ; SOURCE LINE # 1293
010B 120000      R     LCALL   L?0227
010E 120000      R     LCALL   L?0239
0111 120000      R     LCALL   L?0268
0114 C006              PUSH    AR6
0116 C007              PUSH    AR7
0118 900000      R     MOV     DPTR,#VScale
011B 120000      R     LCALL   L?0257
011E D007              POP     AR7
0120 D006              POP     AR6
                                           ; SOURCE LINE # 1294
0122 120000      R     LCALL   L?0246
0125 900000      R     MOV     DPTR,#i
0128 E0                MOVX    A,@DPTR
0129 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
012C F0                MOVX    @DPTR,A
012D 900000      R     MOV     DPTR,#PCLK1
0130 120000      R     LCALL   L?0226
0133 120000      R     LCALL   L?0306
0136 120000      R     LCALL   L?0226
0139 120000      R     LCALL   L?0288
                                           ; SOURCE LINE # 1295
013C 900000      R     MOV     DPTR,#i
013F E0                MOVX    A,@DPTR
0140 B40227            CJNE    A,#02H,?C0097
                                           ; SOURCE LINE # 1296
0143 A3                INC     DPTR
0144 7402              MOV     A,#02H
0146 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1297
0147 900000      R     MOV     DPTR,#PCLK2
014A 120000      R     LCALL   L?0226
014D 900000      R     MOV     DPTR,#PCLK1
0150 120000      R     LCALL   L?0229
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 75  

0153 D3                SETB    C
0154 120000      E     LCALL   ?C?ULCMP
0157 4005              JC      ?C0098
                                           ; SOURCE LINE # 1298
0159 900000      R     MOV     DPTR,#PCLK1
                                           ; SOURCE LINE # 1299
015C 8003              SJMP    ?C0204
015E         ?C0098:
                                           ; SOURCE LINE # 1300
                                           ; SOURCE LINE # 1301
015E 900000      R     MOV     DPTR,#PCLK2
0161         ?C0204:
0161 120000      R     LCALL   L?0226
0164 120000      R     LCALL   L?0263
                                           ; SOURCE LINE # 1302
                                           ; SOURCE LINE # 1303
0167 020000      R     LJMP    ?C0096
016A         ?C0097:
                                           ; SOURCE LINE # 1304
                                           ; SOURCE LINE # 1305
016A 900000      R     MOV     DPTR,#PCLK2
016D 120000      R     LCALL   L?0226
0170 900000      R     MOV     DPTR,#PCLK1
0173 120000      R     LCALL   L?0229
0176 D3                SETB    C
0177 120000      E     LCALL   ?C?ULCMP
017A 4017              JC      ?C0101
                                           ; SOURCE LINE # 1306
017C 900000      R     MOV     DPTR,#PCLK1
017F 120000      R     LCALL   L?0226
0182 900000      R     MOV     DPTR,#PCLK
0185 120000      R     LCALL   L?0229
0188 D3                SETB    C
0189 120000      E     LCALL   ?C?ULCMP
018C 4026              JC      ?C0096
                                           ; SOURCE LINE # 1307
018E 900000      R     MOV     DPTR,#PCLK1
                                           ; SOURCE LINE # 1308
                                           ; SOURCE LINE # 1309
                                           ; SOURCE LINE # 1310
0191 8015              SJMP    ?C0207
0193         ?C0101:
                                           ; SOURCE LINE # 1311
                                           ; SOURCE LINE # 1312
0193 900000      R     MOV     DPTR,#PCLK2
0196 120000      R     LCALL   L?0226
0199 900000      R     MOV     DPTR,#PCLK
019C 120000      R     LCALL   L?0229
019F D3                SETB    C
01A0 120000      E     LCALL   ?C?ULCMP
01A3 400F              JC      ?C0096
                                           ; SOURCE LINE # 1313
01A5 900000      R     MOV     DPTR,#PCLK2
01A8         ?C0207:
01A8 120000      R     LCALL   L?0226
01AB 120000      R     LCALL   L?0263
                                           ; SOURCE LINE # 1314
01AE 900000      R     MOV     DPTR,#i
01B1 E0                MOVX    A,@DPTR
01B2 A3                INC     DPTR
01B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1315
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 76  

                                           ; SOURCE LINE # 1316
                                           ; SOURCE LINE # 1317
                                           ; SOURCE LINE # 1318
01B4         ?C0096:
01B4 900000      R     MOV     DPTR,#i
01B7 E0                MOVX    A,@DPTR
01B8 04                INC     A
01B9 F0                MOVX    @DPTR,A
01BA E0                MOVX    A,@DPTR
01BB D3                SETB    C
01BC 9404              SUBB    A,#04H
01BE 5003              JNC     $ + 5H
01C0 020000      R     LJMP    ?C0094
01C3         ?C0095:
                                           ; SOURCE LINE # 1319
01C3 900000      R     MOV     DPTR,#PCLKO
01C6 E0                MOVX    A,@DPTR
01C7 14                DEC     A
01C8 FF                MOV     R7,A
01C9 120000      E     LCALL   _PclkoSetDiv
                                           ; SOURCE LINE # 1323
01CC 900000      R     MOV     DPTR,#mode
01CF E0                MOVX    A,@DPTR
01D0 FF                MOV     R7,A
01D1 C3                CLR     C
01D2 9405              SUBB    A,#05H
01D4 400A              JC      ?C0105
01D6 EF                MOV     A,R7
01D7 D3                SETB    C
01D8 9408              SUBB    A,#08H
01DA 5004              JNC     ?C0105
                                           ; SOURCE LINE # 1324
01DC E4                CLR     A
01DD FF                MOV     R7,A
01DE 8002              SJMP    ?C0208
01E0         ?C0105:
                                           ; SOURCE LINE # 1326
01E0 7F01              MOV     R7,#01H
01E2         ?C0208:
01E2 120000      E     LCALL   _PclkSetPolarity
01E5         ?C0106:
                                           ; SOURCE LINE # 1330
01E5 7BFF              MOV     R3,#0FFH
01E7 7A00        R     MOV     R2,#HIGH ?SC_607
01E9 7900        R     MOV     R1,#LOW ?SC_607
01EB 900000      R     MOV     DPTR,#PCLK
01EE 120000      R     LCALL   L?0226
01F1 120000      R     LCALL   L?0273
                                           ; SOURCE LINE # 1331
01F4 120000      R     LCALL   L?0284
01F7 2400              ADD     A,#00H
01F9 FF                MOV     R7,A
01FA EE                MOV     A,R6
01FB 3409              ADDC    A,#09H
01FD FE                MOV     R6,A
01FE ED                MOV     A,R5
01FF 343D              ADDC    A,#03DH
0201 120000      R     LCALL   L?0262
                                           ; SOURCE LINE # 1332
0204 7BFF              MOV     R3,#0FFH
0206 7A00        R     MOV     R2,#HIGH ?SC_642
0208 7900        R     MOV     R1,#LOW ?SC_642
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 77  

020A 900000      R     MOV     DPTR,#PCLK
020D 120000      R     LCALL   L?0226
0210 120000      R     LCALL   L?0303
0213 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1334
                                           ; SOURCE LINE # 1335
                                           ; SOURCE LINE # 1337
0216 020000      R     LJMP    ?C0209
0219         ?C0093:
                                           ; SOURCE LINE # 1338
                                           ; SOURCE LINE # 1340
0219 900000      R     MOV     DPTR,#i
021C 7403              MOV     A,#03H
021E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1341
                                           ; SOURCE LINE # 1342
021F 120000      R     LCALL   L?0272
0222 120000      R     LCALL   L?0228
0225 120000      R     LCALL   L?0261
0228 C006              PUSH    AR6
022A C007              PUSH    AR7
022C 120000      R     LCALL   L?0256
022F D007              POP     AR7
0231 D006              POP     AR6
0233 120000      R     LCALL   L?0238
0236 120000      R     LCALL   L?0269
0239 C006              PUSH    AR6
023B C007              PUSH    AR7
023D 120000      R     LCALL   L?0274
0240 D007              POP     AR7
0242 D006              POP     AR6
                                           ; SOURCE LINE # 1343
0244 120000      R     LCALL   L?0227
0247 120000      R     LCALL   L?0239
024A 120000      R     LCALL   L?0269
024D C006              PUSH    AR6
024F C007              PUSH    AR7
0251 900000      R     MOV     DPTR,#VScale
0254 120000      R     LCALL   L?0257
0257 D007              POP     AR7
0259 D006              POP     AR6
                                           ; SOURCE LINE # 1344
025B 120000      R     LCALL   L?0246
025E 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0261 7403              MOV     A,#03H
0263 F0                MOVX    @DPTR,A
0264 900000      R     MOV     DPTR,#PCLK1
0267 120000      R     LCALL   L?0226
026A 120000      R     LCALL   L?0306
026D 120000      R     LCALL   L?0226
0270 120000      R     LCALL   L?0288
                                           ; SOURCE LINE # 1345
0273 900000      R     MOV     DPTR,#PCLK2
0276 120000      R     LCALL   L?0226
0279 900000      R     MOV     DPTR,#PCLK1
027C 120000      R     LCALL   L?0229
027F D3                SETB    C
0280 120000      E     LCALL   ?C?ULCMP
0283 4005              JC      ?C0108
                                           ; SOURCE LINE # 1346
0285 900000      R     MOV     DPTR,#PCLK1
                                           ; SOURCE LINE # 1347
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 78  

0288 8003              SJMP    ?C0205
028A         ?C0108:
                                           ; SOURCE LINE # 1348
                                           ; SOURCE LINE # 1349
028A 900000      R     MOV     DPTR,#PCLK2
028D         ?C0205:
028D 120000      R     LCALL   L?0226
0290 120000      R     LCALL   L?0263
                                           ; SOURCE LINE # 1350
0293         ?C0109:
                                           ; SOURCE LINE # 1351
0293 120000      R     LCALL   L?0284
0296 2440              ADD     A,#040H
0298 FF                MOV     R7,A
0299 EE                MOV     A,R6
029A 344B              ADDC    A,#04BH
029C FE                MOV     R6,A
029D ED                MOV     A,R5
029E 344C              ADDC    A,#04CH
02A0 120000      R     LCALL   L?0262
                                           ; SOURCE LINE # 1352
02A3 120000      R     LCALL   L?0292
02A6 120000      R     LCALL   L?0229
02A9 C3                CLR     C
02AA 120000      E     LCALL   ?C?ULCMP
02AD 500C              JNC     ?C0110
                                           ; SOURCE LINE # 1353
02AF 900000      R     MOV     DPTR,#PCLK
02B2 120000      E     LCALL   ?C?LSTKXDATA
02B5 06                DB      06H
02B6 6F                DB      06FH
02B7 F3                DB      0F3H
02B8 00                DB      00H
02B9 801E              SJMP    ?C0111
02BB         ?C0110:
                                           ; SOURCE LINE # 1354
02BB 7F00              MOV     R7,#00H
02BD 7E0E              MOV     R6,#0EH
02BF 7D27              MOV     R5,#027H
02C1 7C07              MOV     R4,#07H
02C3 900000      R     MOV     DPTR,#PCLK
02C6 120000      R     LCALL   L?0229
02C9 D3                SETB    C
02CA 120000      E     LCALL   ?C?ULCMP
02CD 400A              JC      ?C0111
                                           ; SOURCE LINE # 1355
02CF 900000      R     MOV     DPTR,#PCLK
02D2 120000      E     LCALL   ?C?LSTKXDATA
02D5 07                DB      07H
02D6 27                DB      027H
02D7 0E                DB      0EH
02D8 00                DB      00H
02D9         ?C0111:
                                           ; SOURCE LINE # 1356
                                           ; SOURCE LINE # 1357
02D9 7BFF              MOV     R3,#0FFH
02DB 7A00        R     MOV     R2,#HIGH ?SC_667
02DD 7900        R     MOV     R1,#LOW ?SC_667
02DF 900000      R     MOV     DPTR,#PCLK
02E2 120000      R     LCALL   L?0226
02E5 120000      R     LCALL   L?0273
                                           ; SOURCE LINE # 1359
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 79  

02E8 120000      R     LCALL   L?0292
02EB 120000      R     LCALL   L?0229
02EE C3                CLR     C
02EF 120000      E     LCALL   ?C?ULCMP
02F2 700C              JNZ     ?C0113
                                           ; SOURCE LINE # 1360
02F4 900000      R     MOV     DPTR,#PCLK
02F7 120000      E     LCALL   ?C?LSTKXDATA
02FA 00                DB      00H
02FB 02                DB      02H
02FC 00                DB      00H
02FD 00                DB      00H
02FE 801C              SJMP    ?C0107
0300         ?C0113:
                                           ; SOURCE LINE # 1361
                                           ; SOURCE LINE # 1362
0300         ?C0209:
0300 E4                CLR     A
0301 FF                MOV     R7,A
0302 120000      E     LCALL   _SspllGetPost
0305 900000      R     MOV     DPTR,#i
0308 EF                MOV     A,R7
0309 F0                MOVX    @DPTR,A
030A FB                MOV     R3,A
                                           ; SOURCE LINE # 1363
030B 900000      R     MOV     DPTR,#PCLK
030E 120000      R     LCALL   L?0226
0311 900000      E     MOV     DPTR,#?_SspllFREQ2FPLL?BYTE+04H
0314 EB                MOV     A,R3
0315 F0                MOVX    @DPTR,A
0316 120000      E     LCALL   _SspllFREQ2FPLL
0319 120000      R     LCALL   L?0263
                                           ; SOURCE LINE # 1364
                                           ; SOURCE LINE # 1365
031C         ?C0107:
                                           ; SOURCE LINE # 1368
031C 900000      R     MOV     DPTR,#PCLK
031F 120000      R     LCALL   L?0226
0322 020000      E     LJMP    _SspllSetFreqReg
                                           ; SOURCE LINE # 1371
0325         L?0273:
0325 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0328 120000      E     LCALL   ?C?LSTXDATA
032B 900000      R     MOV     DPTR,#PCLKO
032E E0                MOVX    A,@DPTR
032F 900000      E     MOV     DPTR,#?_dPrintf?BYTE+07H
0332 F0                MOVX    @DPTR,A
0333 120000      E     LCALL   _dPrintf
0336 22                RET     
0337         L?0288:
0337 900000      E     MOV     DPTR,#?_dPrintf?BYTE+08H
033A 120000      E     LCALL   ?C?LSTXDATA
033D 120000      E     LCALL   _dPrintf
0340 22                RET     
             ; FUNCTION _AdjustPixelClk (END)

             ; FUNCTION _ConvertComponentMode2HW (BEGIN)
                                           ; SOURCE LINE # 1383
;---- Variable 'new_mode' assigned to Register 'R6' ----
;---- Variable 'mode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1384
                                           ; SOURCE LINE # 1386
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 80  

0000 EF                MOV     A,R7
0001 B40A00            CJNE    A,#0AH,?C0194
0004         ?C0194:
0004 5049              JNC     ?C0127
0006 900000      R     MOV     DPTR,#?C0195
0009 F8                MOV     R0,A
000A 28                ADD     A,R0
000B 28                ADD     A,R0
000C 73                JMP     @A+DPTR
000D         ?C0195:
000D 020000      R     LJMP    ?C0117
0010 020000      R     LJMP    ?C0118
0013 020000      R     LJMP    ?C0119
0016 020000      R     LJMP    ?C0120
0019 020000      R     LJMP    ?C0121
001C 020000      R     LJMP    ?C0122
001F 020000      R     LJMP    ?C0123
0022 020000      R     LJMP    ?C0124
0025 020000      R     LJMP    ?C0125
0028 020000      R     LJMP    ?C0125
                                           ; SOURCE LINE # 1387
002B         ?C0117:
002B AE07              MOV     R6,AR7
002D 8022              SJMP    ?C0116
                                           ; SOURCE LINE # 1388
002F         ?C0118:
002F AE07              MOV     R6,AR7
0031 801E              SJMP    ?C0116
                                           ; SOURCE LINE # 1389
0033         ?C0119:
0033 AE07              MOV     R6,AR7
0035 801A              SJMP    ?C0116
                                           ; SOURCE LINE # 1390
0037         ?C0120:
0037 AE07              MOV     R6,AR7
0039 8016              SJMP    ?C0116
                                           ; SOURCE LINE # 1391
003B         ?C0121:
003B 7E04              MOV     R6,#04H
003D 8012              SJMP    ?C0116
                                           ; SOURCE LINE # 1392
003F         ?C0122:
003F 7E04              MOV     R6,#04H
0041 800E              SJMP    ?C0116
                                           ; SOURCE LINE # 1393
0043         ?C0123:
0043 7E05              MOV     R6,#05H
0045 800A              SJMP    ?C0116
                                           ; SOURCE LINE # 1394
0047         ?C0124:
0047 7E05              MOV     R6,#05H
0049 8006              SJMP    ?C0116
                                           ; SOURCE LINE # 1395
004B         ?C0125:
004B 7E06              MOV     R6,#06H
004D 8002              SJMP    ?C0116
                                           ; SOURCE LINE # 1396
                                           ; SOURCE LINE # 1397
004F         ?C0127:
004F 7E07              MOV     R6,#07H
                                           ; SOURCE LINE # 1398
0051         ?C0116:
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 81  

                                           ; SOURCE LINE # 1399
0051 AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 1400
0053         ?C0128:
0053 22                RET     
             ; FUNCTION _ConvertComponentMode2HW (END)

             ; FUNCTION CheckAndSetComponent (BEGIN)
                                           ; SOURCE LINE # 1426
                                           ; SOURCE LINE # 1427
                                           ; SOURCE LINE # 1436
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#InputVAdcMode
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1438
0005 900000      R     MOV     DPTR,#i
0008 F0                MOVX    @DPTR,A
0009         ?C0129:
                                           ; SOURCE LINE # 1439
0009 E4                CLR     A
000A 900000      R     MOV     DPTR,#j
000D F0                MOVX    @DPTR,A
000E         ?C0132:
                                           ; SOURCE LINE # 1440
000E 120000      E     LCALL   MeasStartMeasure
0011 EF                MOV     A,R7
0012 6003              JZ      ?C0135
                                           ; SOURCE LINE # 1442
0014 7F01              MOV     R7,#01H
0016 22                RET     
                                           ; SOURCE LINE # 1443
0017         ?C0135:
                                           ; SOURCE LINE # 1445
0017 120000      R     LCALL   FindInputModeCOMP
001A 900000      R     MOV     DPTR,#mode
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1446
001F 7008              JNZ     ?C0133
                                           ; SOURCE LINE # 1447
0021         ?C0137:
                                           ; SOURCE LINE # 1448
0021         ?C0134:
0021 900000      R     MOV     DPTR,#j
0024 120000      R     LCALL   L?0290
0027 40E5              JC      ?C0132
0029         ?C0133:
                                           ; SOURCE LINE # 1449
0029 900000      R     MOV     DPTR,#mode
002C E0                MOVX    A,@DPTR
002D 7003              JNZ     ?C0138
                                           ; SOURCE LINE # 1451
002F 7F01              MOV     R7,#01H
0031 22                RET     
                                           ; SOURCE LINE # 1452
0032         ?C0138:
                                           ; SOURCE LINE # 1457
0032 7FF2              MOV     R7,#0F2H
0034 120000      R     LCALL   _VAdcSetLLPLLControl
                                           ; SOURCE LINE # 1458
0037 120000      R     LCALL   L?0307
003A 2400        R     ADD     A,#LOW YUVDividerPLL+0FFFEH
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 82  

003C F582              MOV     DPL,A
003E E4                CLR     A
003F 3400        R     ADDC    A,#HIGH YUVDividerPLL+0FFFEH
0041 120000      R     LCALL   L?0251
0044 E4                CLR     A
0045 FB                MOV     R3,A
0046 7D01              MOV     R5,#01H
0048 120000      R     LCALL   _VAdcLLPLLUpdateDivider
;---- Variable 'ret' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1459
004B EF                MOV     A,R7
004C B40103            CJNE    A,#01H,?C0139
                                           ; SOURCE LINE # 1461
004F 7F01              MOV     R7,#01H
0051 22                RET     
                                           ; SOURCE LINE # 1462
0052         ?C0139:
                                           ; SOURCE LINE # 1467
0052 120000      R     LCALL   FindInputModeCOMP
;---- Variable 'modeNew' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1468
0055 900000      R     MOV     DPTR,#mode
0058 E0                MOVX    A,@DPTR
0059 6F                XRL     A,R7
005A 6008              JZ      ?C0130
                                           ; SOURCE LINE # 1469
005C         ?C0140:
                                           ; SOURCE LINE # 1470
005C         ?C0131:
005C 900000      R     MOV     DPTR,#i
005F 120000      R     LCALL   L?0291
0062 40A5              JC      ?C0129
0064         ?C0130:
                                           ; SOURCE LINE # 1473
0064 7BFF              MOV     R3,#0FFH
0066 7A00        R     MOV     R2,#HIGH ?SC_686
0068 7900        R     MOV     R1,#LOW ?SC_686
006A 900000      R     MOV     DPTR,#mode
006D E0                MOVX    A,@DPTR
006E 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1475
0072 120000      R     LCALL   L?0298
0075 14                DEC     A
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1476
0077 E0                MOVX    A,@DPTR
0078 FE                MOV     R6,A
0079 2432              ADD     A,#032H
007B 900000      R     MOV     DPTR,#InputVAdcMode
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1477
007F AF06              MOV     R7,AR6
0081 120000      R     LCALL   _ConvertComponentMode2HW
0084 900000      E     MOV     DPTR,#InputSubMode
0087 EF                MOV     A,R7
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1480
0089 900000      R     MOV     DPTR,#mode
008C E0                MOVX    A,@DPTR
008D B40A00            CJNE    A,#0AH,?C0196
0090         ?C0196:
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 83  

0090 5078              JNC     ?C0141
0092 900000      R     MOV     DPTR,#?C0197
0095 F8                MOV     R0,A
0096 28                ADD     A,R0
0097 28                ADD     A,R0
0098 73                JMP     @A+DPTR
0099         ?C0197:
0099 020000      R     LJMP    ?C0142
009C 020000      R     LJMP    ?C0143
009F 020000      R     LJMP    ?C0144
00A2 020000      R     LJMP    ?C0145
00A5 020000      R     LJMP    ?C0146
00A8 020000      R     LJMP    ?C0147
00AB 020000      R     LJMP    ?C0148
00AE 020000      R     LJMP    ?C0149
00B1 020000      R     LJMP    ?C0150
00B4 020000      R     LJMP    ?C0151
                                           ; SOURCE LINE # 1481
00B7         ?C0142:
00B7 7BFF              MOV     R3,#0FFH
00B9 7A00        R     MOV     R2,#HIGH DataInit_Component_Init480i_step1
00BB 7900        R     MOV     R1,#LOW DataInit_Component_Init480i_step1
00BD 8046              SJMP    ?C0218
                                           ; SOURCE LINE # 1482
00BF         ?C0143:
00BF 7BFF              MOV     R3,#0FFH
00C1 7A00        R     MOV     R2,#HIGH DataInit_Component_Init576i_step1
00C3 7900        R     MOV     R1,#LOW DataInit_Component_Init576i_step1
00C5         ?C0210:
00C5 803E              SJMP    ?C0218
                                           ; SOURCE LINE # 1483
00C7         ?C0144:
00C7 7BFF              MOV     R3,#0FFH
00C9 7A00        R     MOV     R2,#HIGH DataInit_Component_Init480p_step1
00CB 7900        R     MOV     R1,#LOW DataInit_Component_Init480p_step1
00CD         ?C0211:
00CD 8036              SJMP    ?C0218
                                           ; SOURCE LINE # 1484
00CF         ?C0145:
00CF 7BFF              MOV     R3,#0FFH
00D1 7A00        R     MOV     R2,#HIGH DataInit_Component_Init576p_step1
00D3 7900        R     MOV     R1,#LOW DataInit_Component_Init576p_step1
00D5         ?C0212:
00D5 802E              SJMP    ?C0218
                                           ; SOURCE LINE # 1485
00D7         ?C0146:
                                           ; SOURCE LINE # 1486
00D7 7BFF              MOV     R3,#0FFH
00D9 7A00        R     MOV     R2,#HIGH DataInit_Component_Init1080i25_H28_step1
00DB 7900        R     MOV     R1,#LOW DataInit_Component_Init1080i25_H28_step1
00DD         ?C0213:
00DD 8026              SJMP    ?C0218
                                           ; SOURCE LINE # 1488
00DF         ?C0147:
00DF 7BFF              MOV     R3,#0FFH
00E1 7A00        R     MOV     R2,#HIGH DataInit_Component_Init1080i30_step1
00E3 7900        R     MOV     R1,#LOW DataInit_Component_Init1080i30_step1
00E5         ?C0214:
00E5 801E              SJMP    ?C0218
                                           ; SOURCE LINE # 1489
00E7         ?C0148:
00E7 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 84  

00E9 7A00        R     MOV     R2,#HIGH DataInit_Component_Init720p50_step1
00EB 7900        R     MOV     R1,#LOW DataInit_Component_Init720p50_step1
00ED         ?C0215:
00ED 8016              SJMP    ?C0218
                                           ; SOURCE LINE # 1490
00EF         ?C0149:
00EF 7BFF              MOV     R3,#0FFH
00F1 7A00        R     MOV     R2,#HIGH DataInit_Component_Init720p60_step1
00F3 7900        R     MOV     R1,#LOW DataInit_Component_Init720p60_step1
00F5         ?C0216:
00F5 800E              SJMP    ?C0218
                                           ; SOURCE LINE # 1491
00F7         ?C0150:
00F7 7BFF              MOV     R3,#0FFH
00F9 7A00        R     MOV     R2,#HIGH DataInit_Component_Init1080p50_H56_step1
00FB 7900        R     MOV     R1,#LOW DataInit_Component_Init1080p50_H56_step1
00FD         ?C0217:
00FD 8006              SJMP    ?C0218
                                           ; SOURCE LINE # 1492
00FF         ?C0151:
00FF 7BFF              MOV     R3,#0FFH
0101 7A00        R     MOV     R2,#HIGH DataInit_Component_Init1080p60_step1
0103 7900        R     MOV     R1,#LOW DataInit_Component_Init1080p60_step1
0105         ?C0218:
0105 E4                CLR     A
0106 FD                MOV     R5,A
0107 120000      E     LCALL   _I2CDeviceInitialize
                                           ; SOURCE LINE # 1493
                                           ; SOURCE LINE # 1494
                                           ; SOURCE LINE # 1495
010A         ?C0141:
                                           ; SOURCE LINE # 1497
010A 7F01              MOV     R7,#01H
010C 120000      R     LCALL   _VAdcSetClampModeHSyncEdge
                                           ; SOURCE LINE # 1498
010F 900000      R     MOV     DPTR,#mode
0112 E0                MOVX    A,@DPTR
0113 900000      R     MOV     DPTR,#YUVClampPos
0116 93                MOVC    A,@A+DPTR
0117 FF                MOV     R7,A
0118 120000      R     LCALL   _VAdcSetClampPosition
                                           ; SOURCE LINE # 1500
011B 7F04              MOV     R7,#04H
011D 120000      E     LCALL   _MeasSetErrTolerance
                                           ; SOURCE LINE # 1501
0120 7F01              MOV     R7,#01H
0122 120000      E     LCALL   _MeasEnableChangedDetection
                                           ; SOURCE LINE # 1504
0125 120000      E     LCALL   MeasGetVSyncRiseToFallWidth
0128 EE                MOV     A,R6
0129 120000      R     LCALL   L?0255
                                           ; SOURCE LINE # 1505
012C 120000      R     LCALL   L?0307
012F 2400        R     ADD     A,#LOW YUVDisplayV
0131 F582              MOV     DPL,A
0133 E4                CLR     A
0134 3400        R     ADDC    A,#HIGH YUVDisplayV
0136 F583              MOV     DPH,A
0138 C3                CLR     C
0139 7401              MOV     A,#01H
013B 93                MOVC    A,@A+DPTR
013C 9F                SUBB    A,R7
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 85  

013D E4                CLR     A
013E 93                MOVC    A,@A+DPTR
013F 9E                SUBB    A,R6
0140 5030              JNC     ?C0153
                                           ; SOURCE LINE # 1506
0142 7BFF              MOV     R3,#0FFH
0144 7A00        R     MOV     R2,#HIGH ?SC_706
0146 7900        R     MOV     R1,#LOW ?SC_706
0148 900000      R     MOV     DPTR,#temp16
014B 120000      R     LCALL   L?0231
014E 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1508
0151 E500        E     MOV     A,regTW88+01H
0153 24CC              ADD     A,#0CCH
0155 120000      R     LCALL   L?0223
0158 E0                MOVX    A,@DPTR
0159 4402              ORL     A,#02H
015B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1510
015C 120000      E     LCALL   MeasStartMeasure
                                           ; SOURCE LINE # 1511
015F 120000      E     LCALL   MeasGetVSyncRiseToFallWidth
0162 900000      R     MOV     DPTR,#temp16
                                           ; SOURCE LINE # 1512
0165 120000      R     LCALL   L?0244
0168 7A00        R     MOV     R2,#HIGH ?SC_721
016A 7900        R     MOV     R1,#LOW ?SC_721
016C 120000      R     LCALL   L?0253
016F 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1513
0172         ?C0153:
                                           ; SOURCE LINE # 1516
0172 900000      R     MOV     DPTR,#mode
0175 E0                MOVX    A,@DPTR
0176 FD                MOV     R5,A
0177 25E0              ADD     A,ACC
0179 2400        R     ADD     A,#LOW YUVStartH
017B F582              MOV     DPL,A
017D E4                CLR     A
017E 3400        R     ADDC    A,#HIGH YUVStartH
0180 120000      R     LCALL   L?0237
0183 FF                MOV     R7,A
0184 C006              PUSH    AR6
0186 C007              PUSH    AR7
0188 ED                MOV     A,R5
0189 25E0              ADD     A,ACC
018B 2400        R     ADD     A,#LOW YUVStartV
018D F582              MOV     DPL,A
018F E4                CLR     A
0190 3400        R     ADDC    A,#HIGH YUVStartV
0192 120000      R     LCALL   L?0275
0195 900000      R     MOV     DPTR,#mode
0198 E0                MOVX    A,@DPTR
0199 120000      R     LCALL   L?0277
019C F583              MOV     DPH,A
019E E4                CLR     A
019F 93                MOVC    A,@A+DPTR
01A0 FA                MOV     R2,A
01A1 7401              MOV     A,#01H
01A3 93                MOVC    A,@A+DPTR
01A4 FB                MOV     R3,A
01A5 C3                CLR     C
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 86  

01A6 E4                CLR     A
01A7 9D                SUBB    A,R5
01A8 FF                MOV     R7,A
01A9 E4                CLR     A
01AA 9C                SUBB    A,R4
01AB FE                MOV     R6,A
01AC EF                MOV     A,R7
01AD 24FF              ADD     A,#0FFH
01AF FF                MOV     R7,A
01B0 EE                MOV     A,R6
01B1 3407              ADDC    A,#07H
01B3 900000      E     MOV     DPTR,#?_InputSetCrop?BYTE+06H
01B6 F0                MOVX    @DPTR,A
01B7 A3                INC     DPTR
01B8 EF                MOV     A,R7
01B9 F0                MOVX    @DPTR,A
01BA D007              POP     AR7
01BC D006              POP     AR6
01BE 120000      E     LCALL   _InputSetCrop
                                           ; SOURCE LINE # 1518
01C1 900000      R     MOV     DPTR,#mode
01C4 E0                MOVX    A,@DPTR
01C5 FF                MOV     R7,A
01C6 120000      R     LCALL   _YUVSetOutput
                                           ; SOURCE LINE # 1520
01C9 7F00              MOV     R7,#00H
01CB 7E00              MOV     R6,#00H
01CD 7D02              MOV     R5,#02H
01CF 7C00              MOV     R4,#00H
01D1 120000      E     LCALL   _SspllSetFreqReg
                                           ; SOURCE LINE # 1521
01D4 900000      R     MOV     DPTR,#mode
01D7 E0                MOVX    A,@DPTR
01D8 FF                MOV     R7,A
01D9 120000      E     LCALL   _YUV_PrepareInfoString
                                           ; SOURCE LINE # 1525
01DC 120000      E     LCALL   MeasStartMeasure
                                           ; SOURCE LINE # 1526
01DF 120000      E     LCALL   MeasGetHActive2
01E2 900000      R     MOV     DPTR,#temp16
                                           ; SOURCE LINE # 1527
01E5 120000      R     LCALL   L?0244
01E8 7A00        R     MOV     R2,#HIGH ?SC_726
01EA 7900        R     MOV     R1,#LOW ?SC_726
01EC 120000      R     LCALL   L?0253
                                           ; SOURCE LINE # 1528
01EF 120000      R     LCALL   L?0298
01F2 FF                MOV     R7,A
01F3 C3                CLR     C
01F4 9404              SUBB    A,#04H
01F6 4010              JC      ?C0155
                                           ; SOURCE LINE # 1529
01F8         ?C0154:
                                           ; SOURCE LINE # 1530
                                           ; SOURCE LINE # 1531
01F8 EF                MOV     A,R7
01F9 25E0              ADD     A,ACC
01FB 2400        R     ADD     A,#LOW MYStartH
01FD F582              MOV     DPL,A
01FF E4                CLR     A
0200 3400        R     ADDC    A,#HIGH MYStartH
0202 120000      R     LCALL   L?0237
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 87  

0205 120000      R     LCALL   L?0285
                                           ; SOURCE LINE # 1532
0208         ?C0155:
                                           ; SOURCE LINE # 1533
0208 900000      R     MOV     DPTR,#temp16+01H
020B E0                MOVX    A,@DPTR
020C 24F0              ADD     A,#0F0H
020E F0                MOVX    @DPTR,A
020F 900000      R     MOV     DPTR,#temp16
0212 E0                MOVX    A,@DPTR
0213 34FF              ADDC    A,#0FFH
0215 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1534
0216 A3                INC     DPTR
0217 E0                MOVX    A,@DPTR
0218 2403              ADD     A,#03H
021A F0                MOVX    @DPTR,A
021B 900000      R     MOV     DPTR,#temp16
021E E0                MOVX    A,@DPTR
021F 3400              ADDC    A,#00H
0221 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1535
0222 900000      R     MOV     DPTR,#mode
0225 E0                MOVX    A,@DPTR
0226 FF                MOV     R7,A
0227 120000      R     LCALL   L?0278
022A 120000      R     LCALL   L?0276
022D EF                MOV     A,R7
022E 25E0              ADD     A,ACC
0230 2400        R     ADD     A,#LOW YUVCropH
0232 F582              MOV     DPL,A
0234 E4                CLR     A
0235 3400        R     ADDC    A,#HIGH YUVCropH
0237 F583              MOV     DPH,A
0239 C3                CLR     C
023A 7401              MOV     A,#01H
023C 93                MOVC    A,@A+DPTR
023D 9D                SUBB    A,R5
023E FF                MOV     R7,A
023F E4                CLR     A
0240 93                MOVC    A,@A+DPTR
0241 9C                SUBB    A,R4
0242 C3                CLR     C
0243 13                RRC     A
0244 FE                MOV     R6,A
0245 EF                MOV     A,R7
0246 13                RRC     A
0247 120000      R     LCALL   L?0285
                                           ; SOURCE LINE # 1536
024A 7BFF              MOV     R3,#0FFH
024C 7A00        R     MOV     R2,#HIGH ?SC_740
024E 7900        R     MOV     R1,#LOW ?SC_740
0250 120000      R     LCALL   L?0308
0253 2400        R     ADD     A,#LOW YUVStartH
0255 F582              MOV     DPL,A
0257 E4                CLR     A
0258 3400        R     ADDC    A,#HIGH YUVStartH
025A 120000      R     LCALL   L?0280
025D 120000      R     LCALL   L?0232
0260 900000      R     MOV     DPTR,#temp16
0263 120000      R     LCALL   L?0265
0266 120000      E     LCALL   _dPrintf
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 88  

                                           ; SOURCE LINE # 1540
0269 900000      R     MOV     DPTR,#mode
026C E0                MOVX    A,@DPTR
026D C3                CLR     C
026E 9404              SUBB    A,#04H
0270 5046              JNC     ?C0156
                                           ; SOURCE LINE # 1541
0272 120000      E     LCALL   MeasGetVActive2
0275 900000      R     MOV     DPTR,#temp16
                                           ; SOURCE LINE # 1542
0278 120000      R     LCALL   L?0244
027B 7A00        R     MOV     R2,#HIGH ?SC_726
027D 7900        R     MOV     R1,#LOW ?SC_726
027F 900000      R     MOV     DPTR,#temp16
0282 120000      R     LCALL   L?0231
0285 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1544
0288 120000      E     LCALL   MeasGetVSyncRiseToFallWidth
                                           ; SOURCE LINE # 1545
                                           ; SOURCE LINE # 1546
                                           ; SOURCE LINE # 1547
                                           ; SOURCE LINE # 1548
028B 120000      R     LCALL   L?0224
028E C006              PUSH    AR6
0290 C007              PUSH    AR7
0292 120000      R     LCALL   L?0234
0295 120000      R     LCALL   L?0258
0298 D007              POP     AR7
029A D006              POP     AR6
                                           ; SOURCE LINE # 1549
029C 120000      R     LCALL   L?0241
                                           ; SOURCE LINE # 1551
029F 120000      E     LCALL   MeasGetVActive2
02A2 900000      R     MOV     DPTR,#temp16
02A5 EE                MOV     A,R6
02A6 F0                MOVX    @DPTR,A
02A7 A3                INC     DPTR
02A8 EF                MOV     A,R7
02A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1552
02AA E0                MOVX    A,@DPTR
02AB 04                INC     A
02AC F0                MOVX    @DPTR,A
02AD 7006              JNZ     ?C0198
02AF 900000      R     MOV     DPTR,#temp16
02B2 E0                MOVX    A,@DPTR
02B3 04                INC     A
02B4 F0                MOVX    @DPTR,A
02B5         ?C0198:
                                           ; SOURCE LINE # 1553
                                           ; SOURCE LINE # 1554
                                           ; SOURCE LINE # 1555
                                           ; SOURCE LINE # 1556
                                           ; SOURCE LINE # 1557
                                           ; SOURCE LINE # 1558
                                           ; SOURCE LINE # 1559
02B5 020000      R     LJMP    ?C0219
02B8         ?C0156:
                                           ; SOURCE LINE # 1560
                                           ; SOURCE LINE # 1561
02B8 120000      R     LCALL   L?0254
                                           ; SOURCE LINE # 1563
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 89  

02BB 120000      E     LCALL   MeasGetVSyncRiseToFallWidth
                                           ; SOURCE LINE # 1564
                                           ; SOURCE LINE # 1565
                                           ; SOURCE LINE # 1566
                                           ; SOURCE LINE # 1567
02BE 120000      R     LCALL   L?0224
02C1 C006              PUSH    AR6
02C3 C007              PUSH    AR7
02C5 120000      R     LCALL   L?0234
02C8 120000      R     LCALL   L?0258
02CB D007              POP     AR7
02CD D006              POP     AR6
                                           ; SOURCE LINE # 1568
02CF 120000      R     LCALL   L?0241
                                           ; SOURCE LINE # 1569
02D2 120000      R     LCALL   L?0254
                                           ; SOURCE LINE # 1570
02D5 E0                MOVX    A,@DPTR
02D6 04                INC     A
02D7 F0                MOVX    @DPTR,A
02D8 7006              JNZ     ?C0199
02DA 900000      R     MOV     DPTR,#temp16
02DD E0                MOVX    A,@DPTR
02DE 04                INC     A
02DF F0                MOVX    @DPTR,A
02E0         ?C0199:
                                           ; SOURCE LINE # 1571
02E0         ?C0219:
02E0 120000      E     LCALL   MeasGetVSyncRiseToFallWidth
                                           ; SOURCE LINE # 1572
                                           ; SOURCE LINE # 1573
                                           ; SOURCE LINE # 1574
                                           ; SOURCE LINE # 1575
02E3 120000      R     LCALL   L?0225
02E6 C006              PUSH    AR6
02E8 C007              PUSH    AR7
02EA 120000      R     LCALL   L?0235
02ED 120000      R     LCALL   L?0258
02F0 D007              POP     AR7
02F2 D006              POP     AR6
02F4 120000      E     LCALL   ?C?ULDIV
02F7 900000      R     MOV     DPTR,#temp32
02FA 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1576
02FD 7BFF              MOV     R3,#0FFH
02FF 7A00        R     MOV     R2,#HIGH ?SC_786
0301 7900        R     MOV     R1,#LOW ?SC_786
0303 900000      R     MOV     DPTR,#temp32
0306 A3                INC     DPTR
0307 A3                INC     DPTR
0308 120000      R     LCALL   L?0231
030B 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1577
030E         ?C0157:
                                           ; SOURCE LINE # 1580
030E 900000      R     MOV     DPTR,#mode
0311 E0                MOVX    A,@DPTR
0312 6003              JZ      ?C0159
0314 B40104            CJNE    A,#01H,?C0158
0317         ?C0159:
                                           ; SOURCE LINE # 1581
0317 E4                CLR     A
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 90  

0318 FF                MOV     R7,A
0319 8002              SJMP    ?C0220
031B         ?C0158:
                                           ; SOURCE LINE # 1583
031B 7F01              MOV     R7,#01H
031D         ?C0220:
031D 120000      E     LCALL   _InputSetFieldPolarity
0320         ?C0160:
                                           ; SOURCE LINE # 1586
0320 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1587
0322         ?C0136:
0322 22                RET     
0323         L?0241:
0323 120000      E     LCALL   ?C?ULDIV
0326 900000      R     MOV     DPTR,#temp32
0329 120000      E     LCALL   ?C?LSTXDATA
032C 7BFF              MOV     R3,#0FFH
032E 7A00        R     MOV     R2,#HIGH ?SC_764
0330 7900        R     MOV     R1,#LOW ?SC_764
0332 900000      R     MOV     DPTR,#mode
0335 E0                MOVX    A,@DPTR
0336 900000      R     MOV     DPTR,#YUVOffsetV
0339 93                MOVC    A,@A+DPTR
033A 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
033D F0                MOVX    @DPTR,A
033E 900000      R     MOV     DPTR,#temp32
0341 A3                INC     DPTR
0342 A3                INC     DPTR
0343 E0                MOVX    A,@DPTR
0344 FF                MOV     R7,A
0345 A3                INC     DPTR
0346 E0                MOVX    A,@DPTR
0347 900000      E     MOV     DPTR,#?_dPrintf?BYTE+04H
034A CF                XCH     A,R7
034B F0                MOVX    @DPTR,A
034C A3                INC     DPTR
034D EF                MOV     A,R7
034E F0                MOVX    @DPTR,A
034F 120000      E     LCALL   _dPrintf
0352 22                RET     
0353         L?0298:
0353 120000      E     LCALL   _dPrintf
0356 900000      R     MOV     DPTR,#mode
0359 E0                MOVX    A,@DPTR
035A 22                RET     
             ; FUNCTION CheckAndSetComponent (END)

             ; FUNCTION CheckAndSetPC (BEGIN)
                                           ; SOURCE LINE # 1605
                                           ; SOURCE LINE # 1606
                                           ; SOURCE LINE # 1624
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#InputVAdcMode
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1625
0005 900000      E     MOV     DPTR,#InputSubMode
0008 F0                MOVX    @DPTR,A
0009         ?C0163:
                                           ; SOURCE LINE # 1627
                                           ; SOURCE LINE # 1628
0009 120000      R     LCALL   PCCheckMode
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 91  

000C 900000      R     MOV     DPTR,#mode
000F EF                MOV     A,R7
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1629
0011 7003              JNZ     ?C0164
                                           ; SOURCE LINE # 1631
0013 7F01              MOV     R7,#01H
0015 22                RET     
                                           ; SOURCE LINE # 1632
0016         ?C0164:
                                           ; SOURCE LINE # 1651
0016 7FF2              MOV     R7,#0F2H
0018 120000      R     LCALL   _VAdcSetLLPLLControl
                                           ; SOURCE LINE # 1652
001B 120000      R     LCALL   L?0250
001E 7B28              MOV     R3,#028H
0020 7D01              MOV     R5,#01H
0022 120000      R     LCALL   _VAdcLLPLLUpdateDivider
;---- Variable 'ret' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1653
0025 EF                MOV     A,R7
0026 B40103            CJNE    A,#01H,?C0166
                                           ; SOURCE LINE # 1655
0029 7F01              MOV     R7,#01H
002B 22                RET     
                                           ; SOURCE LINE # 1656
002C         ?C0166:
                                           ; SOURCE LINE # 1658
002C E4                CLR     A
002D FF                MOV     R7,A
002E 120000      R     LCALL   _VAdcSetPolarity
                                           ; SOURCE LINE # 1661
0031 900000      R     MOV     DPTR,#mode
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 120000      E     LCALL   _GetPhaseEE
0039 900000      R     MOV     DPTR,#value
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1662
003E F4                CPL     A
003F 603D              JZ      ?C0167
                                           ; SOURCE LINE # 1663
0041 7BFF              MOV     R3,#0FFH
0043 7A00        R     MOV     R2,#HIGH ?SC_790
0045 7900        R     MOV     R1,#LOW ?SC_790
0047 E0                MOVX    A,@DPTR
0048 120000      R     LCALL   L?0300
                                           ; SOURCE LINE # 1664
004B 120000      R     LCALL   VAdcGetPhase
;---- Variable 'value1' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1665
004E 900000      R     MOV     DPTR,#value
0051 E0                MOVX    A,@DPTR
0052 6F                XRL     A,R7
0053 6021              JZ      ?C0168
                                           ; SOURCE LINE # 1666
0055 7BFF              MOV     R3,#0FFH
0057 7A00        R     MOV     R2,#HIGH ?SC_807
0059 7900        R     MOV     R1,#LOW ?SC_807
005B 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
005E EF                MOV     A,R7
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 92  

005F F0                MOVX    @DPTR,A
0060 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1667
0063 900000      R     MOV     DPTR,#value
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 E4                CLR     A
0069 FD                MOV     R5,A
006A 120000      R     LCALL   _VAdcSetPhase
                                           ; SOURCE LINE # 1668
006D 120000      R     LCALL   L?0309
0070 EF                MOV     A,R7
0071 6036              JZ      ?C0171
                                           ; SOURCE LINE # 1670
0073 7F01              MOV     R7,#01H
0075 22                RET     
                                           ; SOURCE LINE # 1671
                                           ; SOURCE LINE # 1672
0076         ?C0168:
                                           ; SOURCE LINE # 1673
                                           ; SOURCE LINE # 1674
0076 120000      R     LCALL   L?0309
                                           ; SOURCE LINE # 1675
0079 120000      E     LCALL   MeasCheckVPulse
                                           ; SOURCE LINE # 1676
                                           ; SOURCE LINE # 1677
007C 802B              SJMP    ?C0171
007E         ?C0167:
                                           ; SOURCE LINE # 1679
                                           ; SOURCE LINE # 1680
007E 120000      E     LCALL   AutoTunePhase
                                           ; SOURCE LINE # 1681
0081 120000      R     LCALL   VAdcGetPhase
0084 900000      R     MOV     DPTR,#value
0087 EF                MOV     A,R7
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1682
0089 7BFF              MOV     R3,#0FFH
008B 7A00        R     MOV     R2,#HIGH ?SC_827
008D 7900        R     MOV     R1,#LOW ?SC_827
008F 120000      R     LCALL   L?0300
                                           ; SOURCE LINE # 1683
0092 900000      R     MOV     DPTR,#mode
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
0097 A3                INC     DPTR
0098 E0                MOVX    A,@DPTR
0099 FD                MOV     R5,A
009A 120000      E     LCALL   _SavePhaseEE
                                           ; SOURCE LINE # 1685
009D E4                CLR     A
009E FF                MOV     R7,A
009F FE                MOV     R6,A
00A0 120000      R     LCALL   _WaitStableLLPLL
00A3 EF                MOV     A,R7
00A4 6003              JZ      ?C0171
                                           ; SOURCE LINE # 1687
00A6 7F01              MOV     R7,#01H
00A8 22                RET     
                                           ; SOURCE LINE # 1688
                                           ; SOURCE LINE # 1689
00A9         ?C0171:
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 93  

                                           ; SOURCE LINE # 1691
00A9 E4                CLR     A
00AA FF                MOV     R7,A
00AB 120000      R     LCALL   _VAdcSetPolarity
                                           ; SOURCE LINE # 1692
00AE 120000      E     LCALL   MeasStartMeasure
                                           ; SOURCE LINE # 1695
00B1 7B01              MOV     R3,#01H
00B3 7A00        E     MOV     R2,#HIGH MeasVStart
00B5 7900        E     MOV     R1,#LOW MeasVStart
00B7 120000      E     LCALL   _MeasGetVActive
00BA 900000      E     MOV     DPTR,#MeasVLen
00BD EE                MOV     A,R6
00BE F0                MOVX    @DPTR,A
00BF A3                INC     DPTR
00C0 EF                MOV     A,R7
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1696
00C2 7B01              MOV     R3,#01H
00C4 7A00        E     MOV     R2,#HIGH MeasHStart
00C6 7900        E     MOV     R1,#LOW MeasHStart
00C8 120000      E     LCALL   _MeasGetHActive
00CB 900000      E     MOV     DPTR,#MeasHLen
                                           ; SOURCE LINE # 1698
00CE 120000      R     LCALL   L?0244
00D1 7A00        R     MOV     R2,#HIGH ?SC_848
00D3 7900        R     MOV     R1,#LOW ?SC_848
00D5 900000      E     MOV     DPTR,#MeasHStart
00D8 E0                MOVX    A,@DPTR
00D9 FD                MOV     R5,A
00DA A3                INC     DPTR
00DB E0                MOVX    A,@DPTR
00DC 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
00DF CD                XCH     A,R5
00E0 F0                MOVX    @DPTR,A
00E1 A3                INC     DPTR
00E2 ED                MOV     A,R5
00E3 F0                MOVX    @DPTR,A
00E4 900000      E     MOV     DPTR,#MeasVStart
00E7 E0                MOVX    A,@DPTR
00E8 FD                MOV     R5,A
00E9 A3                INC     DPTR
00EA E0                MOVX    A,@DPTR
00EB 900000      E     MOV     DPTR,#?_dPrintf?BYTE+05H
00EE 120000      R     LCALL   L?0249
00F1 900000      E     MOV     DPTR,#MeasVLen
00F4 120000      R     LCALL   L?0286
00F7 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1700
00FA 120000      R     LCALL   L?0270
00FD 2400        E     ADD     A,#LOW PCMDATA+03H
00FF F582              MOV     DPL,A
0101 E5F0              MOV     A,B
0103 3400        E     ADDC    A,#HIGH PCMDATA+03H
0105 120000      R     LCALL   L?0237
0108 FF                MOV     R7,A
0109 C3                CLR     C
010A 900000      E     MOV     DPTR,#MeasVLen+01H
010D E0                MOVX    A,@DPTR
010E 9F                SUBB    A,R7
010F 900000      E     MOV     DPTR,#MeasVLen
0112 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 94  

0113 9E                SUBB    A,R6
0114 502E              JNC     ?C0173
                                           ; SOURCE LINE # 1701
0116 120000      R     LCALL   L?0270
0119 2400        E     ADD     A,#LOW PCMDATA+0EH
011B F582              MOV     DPL,A
011D E5F0              MOV     A,B
011F 3400        E     ADDC    A,#HIGH PCMDATA+0EH
0121 F583              MOV     DPH,A
0123 E4                CLR     A
0124 93                MOVC    A,@A+DPTR
0125 FD                MOV     R5,A
0126 7401              MOV     A,#01H
0128 93                MOVC    A,@A+DPTR
0129 900000      E     MOV     DPTR,#MeasVStart
012C CD                XCH     A,R5
012D F0                MOVX    @DPTR,A
012E A3                INC     DPTR
012F ED                MOV     A,R5
0130 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1702
0131 900000      E     MOV     DPTR,#MeasVLen
                                           ; SOURCE LINE # 1703
0134 120000      R     LCALL   L?0244
0137 7A00        R     MOV     R2,#HIGH ?SC_885
0139 7900        R     MOV     R1,#LOW ?SC_885
013B 900000      E     MOV     DPTR,#MeasVStart
013E 120000      R     LCALL   L?0247
0141 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1704
0144         ?C0173:
                                           ; SOURCE LINE # 1705
0144 120000      R     LCALL   L?0271
0147 2400        E     ADD     A,#LOW PCMDATA+01H
0149 F582              MOV     DPL,A
014B E5F0              MOV     A,B
014D 3400        E     ADDC    A,#HIGH PCMDATA+01H
014F 120000      R     LCALL   L?0237
0152 FF                MOV     R7,A
0153 C3                CLR     C
0154 900000      E     MOV     DPTR,#MeasHLen+01H
0157 E0                MOVX    A,@DPTR
0158 9F                SUBB    A,R7
0159 900000      E     MOV     DPTR,#MeasHLen
015C E0                MOVX    A,@DPTR
015D 9E                SUBB    A,R6
015E 502E              JNC     ?C0174
                                           ; SOURCE LINE # 1706
0160 120000      R     LCALL   L?0271
0163 2400        E     ADD     A,#LOW PCMDATA+0CH
0165 F582              MOV     DPL,A
0167 E5F0              MOV     A,B
0169 3400        E     ADDC    A,#HIGH PCMDATA+0CH
016B F583              MOV     DPH,A
016D E4                CLR     A
016E 93                MOVC    A,@A+DPTR
016F FD                MOV     R5,A
0170 7401              MOV     A,#01H
0172 93                MOVC    A,@A+DPTR
0173 900000      E     MOV     DPTR,#MeasHStart
0176 CD                XCH     A,R5
0177 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 95  

0178 A3                INC     DPTR
0179 ED                MOV     A,R5
017A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1707
017B 900000      E     MOV     DPTR,#MeasHLen
                                           ; SOURCE LINE # 1708
017E 120000      R     LCALL   L?0244
0181 7A00        R     MOV     R2,#HIGH ?SC_901
0183 7900        R     MOV     R1,#LOW ?SC_901
0185 900000      E     MOV     DPTR,#MeasHStart
0188 120000      R     LCALL   L?0248
018B 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1709
018E         ?C0174:
                                           ; SOURCE LINE # 1711
018E 900000      R     MOV     DPTR,#mode
0191 E0                MOVX    A,@DPTR
0192 FF                MOV     R7,A
0193 120000      R     LCALL   _PCSetInputCrop
                                           ; SOURCE LINE # 1712
0196 900000      R     MOV     DPTR,#mode
0199 E0                MOVX    A,@DPTR
019A FF                MOV     R7,A
019B 120000      R     LCALL   _PCSetOutput
                                           ; SOURCE LINE # 1714
019E 7B01              MOV     R3,#01H
01A0 7A00        R     MOV     R2,#HIGH new_VTotal
01A2 7900        R     MOV     R1,#LOW new_VTotal
01A4 120000      R     LCALL   _FindInputModePC
;---- Variable 'new_mode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1715
01A7 900000      R     MOV     DPTR,#mode
01AA E0                MOVX    A,@DPTR
01AB 6F                XRL     A,R7
01AC 6003              JZ      $ + 5H
01AE 020000      R     LJMP    ?C0163
                                           ; SOURCE LINE # 1717
01B1 E0                MOVX    A,@DPTR
01B2 FD                MOV     R5,A
01B3 900000      R     MOV     DPTR,#InputVAdcMode
01B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1718
01B7 900000      E     MOV     DPTR,#InputSubMode
01BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1722
01BB E4                CLR     A
01BC FF                MOV     R7,A
01BD FE                MOV     R6,A
01BE 120000      R     LCALL   _AdjustPixelClk
                                           ; SOURCE LINE # 1726
01C1 120000      R     LCALL   L?0250
01C4 900000      R     MOV     DPTR,#wTemp
                                           ; SOURCE LINE # 1727
01C7 120000      R     LCALL   L?0245
01CA 7A00        R     MOV     R2,#HIGH ?SC_917
01CC 7900        R     MOV     R1,#LOW ?SC_917
01CE 120000      R     LCALL   L?0253
01D1 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1728
01D4 900000      R     MOV     DPTR,#mode
01D7 E0                MOVX    A,@DPTR
01D8 FF                MOV     R7,A
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 96  

01D9 120000      E     LCALL   _GetPixelClkEE
01DC 900000      R     MOV     DPTR,#wTemp+01H
01DF 120000      R     LCALL   L?0281
01E2 900000      R     MOV     DPTR,#wTemp
                                           ; SOURCE LINE # 1729
01E5 120000      R     LCALL   L?0282
01E8 900000      R     MOV     DPTR,#wTemp
01EB E0                MOVX    A,@DPTR
01EC 34FF              ADDC    A,#0FFH
01EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1730
01EF 900000      R     MOV     DPTR,#mode
01F2 E0                MOVX    A,@DPTR
01F3 FF                MOV     R7,A
01F4 120000      E     LCALL   _GetPixelClkEE
01F7 900000      E     MOV     DPTR,#?_dPrintf?BYTE+05H
01FA EF                MOV     A,R7
01FB F0                MOVX    @DPTR,A
01FC 7BFF              MOV     R3,#0FFH
01FE 7A00        R     MOV     R2,#HIGH ?SC_930
0200 7900        R     MOV     R1,#LOW ?SC_930
0202 900000      R     MOV     DPTR,#wTemp
0205 120000      R     LCALL   L?0231
0208 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1732
020B 900000      R     MOV     DPTR,#wTemp
020E E0                MOVX    A,@DPTR
020F FE                MOV     R6,A
0210 A3                INC     DPTR
0211 E0                MOVX    A,@DPTR
0212 FF                MOV     R7,A
0213 E4                CLR     A
0214 FB                MOV     R3,A
0215 FD                MOV     R5,A
0216 120000      R     LCALL   _VAdcLLPLLUpdateDivider
                                           ; SOURCE LINE # 1734
0219 7F04              MOV     R7,#04H
021B 120000      E     LCALL   _MeasSetErrTolerance
                                           ; SOURCE LINE # 1735
021E 7F01              MOV     R7,#01H
0220 120000      E     LCALL   _MeasEnableChangedDetection
                                           ; SOURCE LINE # 1737
0223 900000      R     MOV     DPTR,#mode
0226 E0                MOVX    A,@DPTR
0227 FF                MOV     R7,A
0228 120000      E     LCALL   _PC_PrepareInfoString
                                           ; SOURCE LINE # 1746
022B 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1747
022D         ?C0165:
022D 22                RET     
022E         L?0300:
022E 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0231 F0                MOVX    @DPTR,A
0232 120000      E     LCALL   _dPrintf
0235 22                RET     
0236         L?0309:
0236 E4                CLR     A
0237 FF                MOV     R7,A
0238 FE                MOV     R6,A
0239 120000      R     LCALL   _WaitStableLLPLL
023C 22                RET     
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 97  

             ; FUNCTION CheckAndSetPC (END)

             ; FUNCTION PCRestoreH (BEGIN)
                                           ; SOURCE LINE # 1755
                                           ; SOURCE LINE # 1756
                                           ; SOURCE LINE # 1758
0000 900000      E     MOV     DPTR,#RGB_HSTART
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 900000      R     MOV     DPTR,#hstart
000A CF                XCH     A,R7
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1760
000F 900000      R     MOV     DPTR,#InputVAdcMode
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 6024              JZ      ?C0176
                                           ; SOURCE LINE # 1763
0016         ?C0175:
                                           ; SOURCE LINE # 1765
0016 900000      R     MOV     DPTR,#hstart+01H
0019 E0                MOVX    A,@DPTR
001A 2432              ADD     A,#032H
001C F0                MOVX    @DPTR,A
001D 900000      R     MOV     DPTR,#hstart
0020 E0                MOVX    A,@DPTR
0021 3400              ADDC    A,#00H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1766
0024 120000      E     LCALL   _GetHActiveEE
0027 900000      R     MOV     DPTR,#hstart+01H
002A 120000      R     LCALL   L?0305
002D 900000      R     MOV     DPTR,#hstart
0030 E0                MOVX    A,@DPTR
0031 9E                SUBB    A,R6
0032 FE                MOV     R6,A
0033 F0                MOVX    @DPTR,A
0034 A3                INC     DPTR
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1767
0037 120000      E     LCALL   _InputSetHStart
                                           ; SOURCE LINE # 1768
003A         ?C0176:
003A 22                RET     
             ; FUNCTION PCRestoreH (END)

             ; FUNCTION PCRestoreV (BEGIN)
                                           ; SOURCE LINE # 1770
                                           ; SOURCE LINE # 1771
                                           ; SOURCE LINE # 1773
0000 900000      E     MOV     DPTR,#RGB_VDE
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 7E00              MOV     R6,#00H
0007 900000      R     MOV     DPTR,#temp16
                                           ; SOURCE LINE # 1774
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 98  

000A 120000      R     LCALL   L?0244
000D 120000      R     LCALL   L?0252
0010 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1776
0013 900000      R     MOV     DPTR,#InputVAdcMode
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 6026              JZ      ?C0178
                                           ; SOURCE LINE # 1779
001A         ?C0177:
                                           ; SOURCE LINE # 1781
001A 120000      E     LCALL   _GetVBackPorchEE
001D EF                MOV     A,R7
001E 33                RLC     A
001F 95E0              SUBB    A,ACC
0021 FE                MOV     R6,A
0022 900000      R     MOV     DPTR,#temp16+01H
0025 E0                MOVX    A,@DPTR
0026 2F                ADD     A,R7
0027 F0                MOVX    @DPTR,A
0028 900000      R     MOV     DPTR,#temp16
                                           ; SOURCE LINE # 1782
002B 120000      R     LCALL   L?0283
002E 900000      R     MOV     DPTR,#temp16
                                           ; SOURCE LINE # 1783
0031 120000      R     LCALL   L?0230
0034 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1784
0037 900000      R     MOV     DPTR,#temp16
003A A3                INC     DPTR
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D 120000      E     LCALL   _ScalerWriteVDEReg
                                           ; SOURCE LINE # 1785
0040         ?C0178:
0040 22                RET     
             ; FUNCTION PCRestoreV (END)

             ; FUNCTION PCResetCurrEEPROMMode (BEGIN)
                                           ; SOURCE LINE # 1787
                                           ; SOURCE LINE # 1788
                                           ; SOURCE LINE # 1790
0000 900000      R     MOV     DPTR,#InputVAdcMode
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 120000      E     LCALL   _GetPixelClkEE
                                           ; SOURCE LINE # 1791
0008 120000      R     LCALL   L?0293
000B 6006              JZ      ?C0179
                                           ; SOURCE LINE # 1792
000D 120000      R     LCALL   L?0295
0010 120000      E     LCALL   _SavePixelClkEE
0013         ?C0179:
                                           ; SOURCE LINE # 1793
0013 900000      R     MOV     DPTR,#InputVAdcMode
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 120000      E     LCALL   _GetPhaseEE
001B 900000      R     MOV     DPTR,#temp
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1794
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 99  

0020 F4                CPL     A
0021 600A              JZ      ?C0180
                                           ; SOURCE LINE # 1795
0023 900000      R     MOV     DPTR,#InputVAdcMode
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 7DFF              MOV     R5,#0FFH
002A 120000      E     LCALL   _SavePhaseEE
002D         ?C0180:
                                           ; SOURCE LINE # 1796
002D 900000      R     MOV     DPTR,#InputVAdcMode
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 120000      E     LCALL   _GetHActiveEE
                                           ; SOURCE LINE # 1797
0035 120000      R     LCALL   L?0293
0038 6006              JZ      ?C0181
                                           ; SOURCE LINE # 1798
003A 120000      R     LCALL   L?0295
003D 120000      E     LCALL   _SaveHActiveEE
0040         ?C0181:
                                           ; SOURCE LINE # 1799
0040 900000      R     MOV     DPTR,#InputVAdcMode
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 120000      E     LCALL   _GetVBackPorchEE
                                           ; SOURCE LINE # 1800
0048 120000      R     LCALL   L?0294
004B 6006              JZ      ?C0183
                                           ; SOURCE LINE # 1801
004D 120000      R     LCALL   L?0296
0050 120000      E     LCALL   _SaveVBackPorchEE
                                           ; SOURCE LINE # 1802
0053         ?C0183:
0053 22                RET     
             ; FUNCTION PCResetCurrEEPROMMode (END)

C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 100 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


MeasVLen . . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
MYStartH . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    061CH  20
DataInit_Component_Init576i_step1. . .  PUBLIC   CODE   ARRAY    04E2H  38
VAdcSetDefaultFor. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  rvalue . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
VAdcReadBChannelGainReg. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  wTemp. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
MeasGetVSyncRiseToFallWidth. . . . . .  EXTERN   CODE   PROC     -----  -----
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
DataInit_Component_Init480p_step1. . .  PUBLIC   CODE   ARRAY    0508H  38
_VAdcSetPhase. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  fInit. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  mode . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
YUVVtotal. . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0568H  20
_InputSetFieldPolarity . . . . . . . .  EXTERN   CODE   PROC     -----  -----
YUVScaleVoff . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0612H  10
MeasGetHActive2. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MeasSetErrTolerance . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VAdcReadGChannelGainReg. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  wTemp. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
DataInit_Component_Init576p_step1. . .  PUBLIC   CODE   ARRAY    04BCH  38
DataInit_Component_Init1080i30_step1 .  PUBLIC   CODE   ARRAY    03FEH  38
PCResetCurrEEPROMMode. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
MYStartV . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0630H  20
_SavePhaseEE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_AdjustPixelClk. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  digital_divider. . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  mode . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  PCLK . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0003H  4
  PCLK1. . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0007H  4
  PCLK2. . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   000BH  4
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000FH  1
  PCLKO. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0010H  1
  HDown. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0011H  2
  HPeriod. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0013H  2
  Divider. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0015H  2
  VPN. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0017H  2
  VScale . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0019H  2
  HActive. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    001BH  2
  H_DE . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    001DH  2
  VPeriod. . . . . . . . . . . . . . .  * REG *  DATA   U_LONG   0004H  4
  VFreq. . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   001FH  4
VAdcReadRChannelGainReg. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  wTemp. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
MeasGetVFreq . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dPuts . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MeasGetVActive2. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ePuts . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_PclkSetPolarity . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_VAdcSetFilterBandwidth. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  delay. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
RGB_HSTART . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
_LLPLLSetClockSource . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DataInit_Component_Init1080p60_step1 .  PUBLIC   CODE   ARRAY    03B2H  38
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 101 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_VAdcLLPLLUpdateDivider. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  divider. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  fInit. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  delay. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
_MeasRoundDownVFreqValue . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SspllGetPPF . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
InputMain. . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
MeasGetDviDivider. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RGB_VDE. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_InputSetHStart. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DataInit_Component_Init1080i25_H31_step1PUBLIC   CODE   ARRAY    044AH  38
VAdcGetInputStatus . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_GetPhaseEE. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ScalerCalcFreerunHtotal. . . . . . . .  EXTERN   CODE   PROC     -----  -----
DataInit_Component_Init1080i25_H28_step1PUBLIC   CODE   ARRAY    0424H  38
_SspllFREQ2FPLL. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_delay1ms. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ScalerCalcHDE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
YUVDisplayH. . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    05AEH  20
_MeasEnableChangedDetection. . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerSetMuteAutoManual . . . . . . .  EXTERN   CODE   PROC     -----  -----
YUVClampPos. . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    057CH  10
DataInit_Component_Init1080p50_H56_step1PUBLIC   CODE   ARRAY    03D8H  38
_I2CDeviceInitialize . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
AutoTunePhase. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ScalerCalcFreerunVtotal. . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FindInputModePC . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vt . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  vtotal . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  vfreq. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
ScalerCalcVDE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_PCMODEDATA. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  han. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  van. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  vfreq. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  htotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  vtotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  hsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  vsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  offseth. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0010H  2
  offsetv. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0012H  2
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  dummy2 . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  dummy3 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0018H  1
YUVDisplayV. . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    05C2H  20
CheckAndSetPC. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  new_mode . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  value. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 102 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  value1 . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  new_VTotal . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  wTemp. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
YUVOffsetH . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    05FEH  10
ScalerReadLineBufferDelay. . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerWriteFreerunHtotal. . . . . . .  EXTERN   CODE   PROC     -----  -----
YUVDividerPLL. . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0554H  20
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_SavePixelClkEE. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ScalerReadVScaleReg. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerSetHScale . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_YUV_PrepareInfoString . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SaveHActiveEE . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
PCRestoreH . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  hstart . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
YUVOffsetV . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0608H  10
InputSubMode . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_ScalerWriteFreerunVtotal. . . . . . .  EXTERN   CODE   PROC     -----  -----
_YUVSetOutput. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  HDE. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  temp16 . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
MeasCheckVPulse. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_GetPixelClkEE . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerSetVScale . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_PclkoSetDiv . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ScalerReadHDEReg . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
FindInputModeCOMP. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vperiod. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
  vtotal . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  vfreq. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
VAdcLLPLLGetDivider. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_PC_PrepareInfoString. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MeasGetVPeriod27 . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SPIIMAGE . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  top. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  bottom . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
PCRestoreV . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  temp16 . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
_MeasGetHActive. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_GetHActiveEE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_PCSetOutput . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  HDE. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  temp16 . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
_InputSetCrop. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SLIDEIMAGE . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 103 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
_VAdcSetClampPosition. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
MeasGetHPeriod . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dPrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SspllGetPost. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ePrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
regTW88. . . . . . . . . . . . . . . .  EXTERN   DATA   PTR      -----  2
_VAdcLLPLLSetDivider . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
  fInit. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  mode . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
CheckAndSetComponent . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  mode . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  modeNew. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  temp16 . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  temp32 . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0005H  4
YUVStartH. . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    05D6H  20
_ScalerWriteHDEReg . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MeasGetVActive. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MeasHStart . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
YUVCropH . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0586H  20
DataInit_Component_Init720p50_step1. .  PUBLIC   CODE   ARRAY    0496H  38
DataInit_Component_Init720p60_step1. .  PUBLIC   CODE   ARRAY    0470H  38
_SaveVBackPorchEE. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_VAdcSetClampModeHSyncEdge . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fOn. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_ScalerSetFreerunAutoManual. . . . . .  EXTERN   CODE   PROC     -----  -----
_VAdcSetPolarity . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fUseCAPAS. . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  r1c1 . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
MeasGetVPeriod . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_PCSetInputCrop. . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  offset . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  HPol . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  VPol . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  hstart . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  vstart . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  Meas_HPulse. . . . . . . . . . . . .  AUTO     XDATA  U_INT    0008H  2
  Meas_VPulse. . . . . . . . . . . . .  AUTO     XDATA  U_INT    000AH  2
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
YUVStartV. . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    05EAH  20
_ScalerWriteVDEReg . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_VAdcSetChannelGainReg . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  GainG. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  GainB. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  GainR. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
_SspllSetFreqReg . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.00   VADC                                                                  06/05/2014 15:34:49 PAGE 104 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


MeasVStart . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
ScalerReadXDownReg . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
sizeof_PCMDATA . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MeasStartMeasure . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MeasHLen . . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
YUVCropV . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    059AH  20
MeasGetHSyncRiseToFallWidth. . . . . .  EXTERN   CODE   PROC     -----  -----
_GetVBackPorchEE . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VAdcGetPhase . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ScalerReadOutputWidth. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_VAdcSetLLPLLControl . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_WaitStableLLPLL . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  delay. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  HActive. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  HActiveOld . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  HStart . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0005H  2
  PolOld . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  Pol. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
_ConvertComponentMode2HW . . . . . . .  STATIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  new_mode . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
DataInit_Component_Init480i_step1. . .  PUBLIC   CODE   ARRAY    052EH  38
InputVAdcMode. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
PCCheckMode. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  mode . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  VTotal . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
PCMDATA. . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5864    ----
   CONSTANT SIZE    =   1604    ----
   XDATA SIZE       =      1     112
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
