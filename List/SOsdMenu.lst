C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SOSDMENU
OBJECT MODULE PLACED IN .\Output\SOsdMenu.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE SOsdMenu.c LARGE OPTIMIZE(9,SPEED) REGFILE(.\Output\TW8835_REV31.ORC) BROWS
                    -E MODDP2 DEFINE(EVB_30,EVB_31,nullFn=//) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\List\SOsdMenu.lst) OBJECT(.\Output\SOsd
                    -Menu.obj)

line level    source

   1          /**
   2           * @file
   3           * SOsdMenu.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *      Copyright (C) 2011~2012 Intersil Corporation
   8           * @section DESCRIPTION
   9           *      SpiOsd Menu routines
  10           * TW8835 have 2KB XDATA, we have to move the static table datas to CODE segment.
  11           *      code segment size: 0x10000 64KB.
  12           *      xdata segment size: 0x0800 2KB.
  13          */
  14          //*****************************************************************************
  15          //
  16          //                                                                      TW8835 MENU-E.c
  17          //
  18          //*****************************************************************************
  19          //         
  20          //
  21          
  22          #include "config.h"
  23          #include "reg.h"
  24          #include "typedefs.h"
  25          #include "TW8835.h"
  26          
  27          #include "Global.h"
  28          #include "CPU.h"
  29          #include "printf.h"
  30          #include "util.h"
  31          
  32          #include "I2C.h"
  33          #include "spi.h"
  34          
  35          #include "main.h"
  36          #include "SOsd.h"
  37          #include "FOsd.h"
  38          #include "InputCtrl.h"
  39          #include "OutputCtrl.h"
  40          
  41          #include "SpiFlashMap.h"
  42          #include "SOsdMenu.h"
  43          #include "eeprom.h"
  44          #include "ImageCtrl.h"
  45          #include "Settings.h"
  46          #include "Demo.h"
  47          
  48          #include "Remo.h"
  49          #include "TouchKey.h"
  50          
  51          #include "measure.h"
  52          #include "vadc.h"
  53          #include "PC_modes.h"
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 2   

  54          #include "scaler.h"
  55          
  56          
  57          #ifdef SUPPORT_SPIOSD
  58          //=============================
  59          // define
  60          //=============================
  61          
  62          #ifdef DEBUG_MENU
                      #define MenuPrintf      Printf
                      #define MenuPuts        Puts    
                      #define eMenuPrintf     ePrintf
                      #define eMenuPuts       ePuts   
                      #define wMenuPrintf     wPrintf
                      #define wMenuPuts       wPuts   
                      #define dMenuPrintf     dPrintf
                      #define dMenuPuts       dPuts   
              #else
  72                  #define MenuPrintf      nullFn
  73                  #define MenuPuts        nullFn  
  74                  #define eMenuPrintf     nullFn
  75                  #define eMenuPuts       nullFn  
  76                  #define wMenuPrintf     nullFn
  77                  #define wMenuPuts       nullFn  
  78                  #define dMenuPrintf     nullFn
  79                  #define dMenuPuts       nullFn  
  80          #endif
  81          
  82          
  83          //if we are using MREL, The first 0x10 bytes are a image info.
  84          //we need to skip 0x10 size to access the LUT & image.
  85          #define MRLE_INFO_SIZE          0x10
  86          
  87          //=============================
  88          // external
  89          //=============================
  90          //extern WORD   TouchSkipCount;
  91          
  92          //=============================
  93          //global vaiable
  94          //=============================
  95          //------------------------------------------
  96          // 
  97          //------------------------------------------
  98          BYTE menu_on = 0;
  99          BYTE UseSOsdHwBuff;
 100          BYTE osd_lang;
 101          
 102          //------------------------------------------
 103          // 
 104          //------------------------------------------
 105          menu_page_info_t *curr_menu;
 106          BYTE menu_level=0;
 107          menu_page_info_t *menu_level_stack[4];          //max menu depth
 108          BYTE menu_lock_scroll = 0;
 109          BYTE curr_menu_focus;
 110          BYTE cancel_recover_value;
 111          
 112          //------------------------------------------
 113          // string buffer
 114          //------------------------------------------
 115          BYTE menu_str_buff[5];
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 3   

 116          
 117          //------------------------------------------
 118          // touch
 119          //------------------------------------------
 120          int last_touch_x;       //for slide bar & position pox dialog.
 121          int last_touch_y;
 122          
 123          //------------------------------------------
 124          // slider
 125          //------------------------------------------
 126          image_item_info_t *slide_title_img;
 127          BYTE curr_slide_value;
 128          BYTE last_slide3_value[3];
 129          BYTE curr_slide3_value[3];
 130          void (*SaveSlideValue)(BYTE val);
 131          WORD (*GetSlideValue)(void);
 132          WORD (*VarySlideValue)(BYTE val);
 133          WORD (*SetSlideValue)(BYTE val);
 134          
 135          void (*SaveSlide3Value)(BYTE index,BYTE val);
 136          WORD (*GetSlide3Value)(BYTE index);
 137          WORD (*VarySlide3Value)(BYTE index, BYTE val);
 138          WORD (*SetSlide3Value)(BYTE index, BYTE val);
 139          
 140          //------------------------------------------
 141          //image header
 142          //
 143          // menu uses header_table.
 144          // FW reads MREL header area to rle_header and convert it to header_table.
 145          // or, FW converts image->info to header_table.
 146          //------------------------------------------
 147          menu_image_header_t header_table;
 148          struct RLE2_HEADER rle_header;
 149          
 150          //------------------------------------------
 151          // For BANK
 152          //------------------------------------------
 153          BYTE MenuInputMain; 
 154          BYTE MenuNoSignal;
 155          
 156          //--------------------------
 157          //local prototypes
 158          //--------------------------
 159          #if 1
 160          void MenuDrawSlideNeedleImageXY(BYTE index, BYTE value, BYTE item_red);
 161          void MenuDrawSlideCurrValue(BYTE index, short value);
 162          void MenuUpdateSlideNeedleByPosition(int x /*, int y*/);
 163          
 164          void proc_slider_left(void);
 165          void proc_slider_right(void);
 166          void proc_slider3_left(void);
 167          void proc_slider3_right(void);
 168          void proc_slider_digit(void);
 169          #endif
 170          
 171          
 172          //-------------------------------------
 173          // MENU Draw Images
 174          //-------------------------------------
 175          #ifdef DEBUG_MENU
              void PrintCurrMenu(void)
              {
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 4   

                      dMenuPrintf("\nMENU ");
                      if     (curr_menu == &menu_main_page)                   { dMenuPrintf("main_page");                             }
                      else if(curr_menu == &menu_demo_page)                   { dMenuPrintf("demo_page");                                     }
                      else if(curr_menu == &menu_input_page)                  { dMenuPrintf("input_page");                            }
                      else if(curr_menu == &menu_system_page)                 { dMenuPrintf("system_page");                           }
                      else if(curr_menu == &menu_touch_page)                  { dMenuPrintf("touch_page");                            }
                      else if(curr_menu == &menu_yuv_list_page)               { dMenuPrintf("yuv_list_page");                         }
                      else if(curr_menu == &menu_rgb_list_page)               { dMenuPrintf("rgb_list_page");                         }
                      else if(curr_menu == &menu_apc_list_page)               { dMenuPrintf("apc_list_page");                         }
                      else if(curr_menu == &menu_hdmi_list_page)              { dMenuPrintf("hdmi_list_page");                        }
              //      else if(curr_menu == &menu_hdmipc_list_page)    { dMenuPrintf("hdmipc_list_page");                      }
                      else if(curr_menu == &menu_display_page)                { dMenuPrintf("display_page");                          }
                      else if(curr_menu == &menu_osd_page)                    { dMenuPrintf("osd_page");                                      }
              //      else if(curr_menu == &menu_dvi_mode_page)               { dMenuPrintf("dvi_mode_page");                         }
                      else if(curr_menu == &menu_hdmi_mode_page)              { dMenuPrintf("hdmi_mode_page");                        }
                      else if(curr_menu == &menu_autoadj_page)                { dMenuPrintf("autoadj_page");                          }
                      else if(curr_menu == &menu_autocolor_page)              { dMenuPrintf("autocolor_page");                        }
                      else if(curr_menu == &menu_slider_page)                 { dMenuPrintf("slider_page");                           }
                      else if(curr_menu == &menu_slider3_page)                { dMenuPrintf("slider3_page");                          }
                      else if(curr_menu == &menu_aspect_page)                 { dMenuPrintf("aspect_page");                           }
                      else if(curr_menu == &menu_position_page)               { dMenuPrintf("position_page");                         }
                      else if(curr_menu == &menu_mirror_page)                 { dMenuPrintf("mirror_page");                           }
                      else if(curr_menu == &menu_restore_page)                { dMenuPrintf("restore_page");                          }
                      else if(curr_menu == &menu_sys_info_page)               { dMenuPrintf("sys_info_page");                         }
                      else                                                                                    { dMenuPrintf("unknown page");                          }
              }
              #endif
 205          
 206          
 207          //void PrintCurrItem(BYTE item,struct RLE2_HEADER *rle_header)
 208          
 209          //desc:convert info to header. 
 210          //              header_table is a global.
 211          void info_to_header(image_info_t *info)
 212          {
 213   1              menu_image_header_t *header;
 214   1              header = &header_table;
 215   1      
 216   1              //data from spiflash 
 217   1              header->lut_type = info->lut_type;
 218   1              header->bpp = info->rle >> 4;
 219   1              header->rle = info->rle & 0x0F;
 220   1              header->dx = info->dx;
 221   1              header->dy = info->dy;
 222   1              header->lut_size = 0x004 << header->bpp;
 223   1      }
 224          //desc: convert rel2 to header
 225          //              header_table is a global        
 226          void rle2_to_header(struct RLE2_HEADER *rle_header)
 227          {
 228   1              menu_image_header_t *header;
 229   1              WORD colors;
 230   1              BYTE bpp;
 231   1      
 232   1              header = &header_table;
 233   1      
 234   1              header->lut_type = rle_header->LUT_format & 0x01;
 235   1              colors = (WORD)rle_header->LUT_colors+1; //word
 236   1              for(bpp=0; bpp < 9 ;) {
 237   2                      if(colors & 0x01)
 238   2                              break;
 239   2                      colors >>= 1;
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 5   

 240   2                      bpp++;
 241   2              }
 242   1              header->bpp = bpp;
 243   1              header->rle = rle_header->rledata_cnt & 0x0F;
 244   1              header->dx = rle_header->w;
 245   1              header->dy = rle_header->h;
 246   1              header->lut_size = 0x004 << bpp;
 247   1      }
 248          
 249          #ifdef DEBUG_MENU
              //desc: print current item infomation
              void PrintCurrItem(BYTE item,menu_image_header_t *header)
              {
                      menu_sitem_info_t *menu_item;
                      struct image_item_info_s *image;
              
                      menu_item = &curr_menu->items[item];
                      image = menu_item->image;
              
                      dMenuPrintf("\n");
                      dMenuPrintf(" item:%bd focus:%bd ",item, curr_menu->focus);
                      dMenuPrintf(" %dx%d",menu_item->x, menu_item->y);
                      dMenuPrintf(" align:%02bx",menu_item->align);
                      dMenuPrintf(" win:%02bx",menu_item->win);
                      dMenuPrintf(" lut:%x",menu_item->lut);
                      
                      dMenuPrintf("\n");
                      dMenuPrintf(" image");
                      dMenuPrintf(" type:%bx",image->type);
                      dMenuPrintf(" loc:%06lx",image->loc);
              
                      dMenuPrintf(" bpp%bd", header->bpp);
                      dMenuPrintf(" rle%bd", header->rle);
                      dMenuPrintf(" %dx%d", header->dx, header->dy);
                      dMenuPrintf(" alpha:%2bx",image->alpha);
                      dMenuPrintf(" lut%s size:%d*4",header->lut_type? "s": " ", header->lut_size >> 2);
              }
              #endif
 278          
 279          //=========================
 280          // stack
 281          //=========================
 282          //-------------------------------------
 283          // MENU LEVEL (Parent & Child)
 284          //-------------------------------------
 285          //----------------------------
 286          //desc: push/pop menu 
 287          //      use menu_level_stack[] to move the parent and child menu.
 288          //
 289          void push_menu_stack_level(void)
 290          {
 291   1              menu_level_stack[menu_level] = curr_menu; 
 292   1              menu_level++;
 293   1              menu_lock_scroll = 0;   //clear. If menu was a scroll, I want to scroll the menu.
 294   1      }
 295          void pop_menu_stack_level(void)
 296          {
 297   1              //MenuPrintf("\npop_menu_stack_level menu_level:%bd",menu_level); 
 298   1              menu_level--;
 299   1          curr_menu = menu_level_stack[menu_level];
 300   1              menu_lock_scroll = 0;   //clear
 301   1      }
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 6   

 302          //desc: get menu level.
 303          //      To solve the Bank issue.
 304          BYTE MenuGetLevel(void)
 305          {
 306   1              return menu_level+menu_on;
 307   1      }
 308          
 309          //=========================
 310          // Header
 311          //=========================
 312          
 313          BYTE MenuReadRleHeader(DWORD spi_loc,struct RLE2_HEADER *header)
 314          {
 315   1              WORD wTemp;
 316   1              DWORD dTemp;
 317   1              BYTE i, *ptr;   
 318   1      
 319   1      //      dMenuPrintf("\nMenuReadRleHeader:%06lx:",spi_loc);
 320   1              dPrintf("\nMenuReadRleHeader:%06lx:",spi_loc);
 321   1              dPrintf("\n     *header:%lx",(BYTE *)header);
 322   1              dPrintf("\n     (WORD)header:%x",(WORD)header);
 323   1      
 324   1              WaitVBlank(1);
 325   1      
 326   1              SpiFlashDmaRead2XMem((BYTE *)header, spi_loc, sizeof(struct RLE2_HEADER));
 327   1              
 328   1              ptr = (BYTE *)header;
 329   1              for(i=0; i < sizeof(struct RLE2_HEADER); i++) {
 330   2                      //dMenuPrintf("%02bx ",*ptr++);
 331   2                      dPrintf("%02bx ",*ptr++);
 332   2              }
 333   1              if(header->id[0]!='I' || header->id[1]!='T') {
 334   2                      //wMenuPuts(" MenuReadRleHeader fail");
 335   2                      dPrintf(" MenuReadRleHeader fail");
 336   2                      return 1;       //fail
 337   2              }
 338   1              //swap
 339   1              wTemp = header->w;
 340   1              header->w = (wTemp >> 8 | wTemp << 8);
 341   1      
 342   1              wTemp = header->h;
 343   1              header->h = (wTemp >> 8 | wTemp << 8);
 344   1      
 345   1              dTemp=header->size;
 346   1              header->size = dTemp & 0x000000FF;
 347   1              header->size <<= 8; dTemp >>= 8;
 348   1              header->size |= dTemp & 0x000000FF;
 349   1              header->size <<= 8; dTemp >>= 8;
 350   1              header->size |= dTemp & 0x000000FF;
 351   1              header->size <<= 8; dTemp >>= 8;
 352   1              header->size |= dTemp & 0x000000FF;
 353   1      
 354   1      //      dMenuPrintf("\nloc:%06lx", spi_loc);
 355   1      //      dMenuPrintf(" op:%02bx",header->op_bmpbits); 
 356   1      //      dMenuPrintf(" rle:%02bx",header->rledata_cnt);
 357   1      //      dMenuPrintf(" wh:%dx%d",header->w, header->h);
 358   1      //      dMenuPrintf(" size:%lx", header->size);
 359   1      //      dMenuPrintf(" LUT format:%bx color:%bx", header->LUT_format,header->LUT_colors);
 360   1      //      dMenuPrintf(" dummy %bx %bx",header->dummy0, header->dummy1);
 361   1              dPrintf("\nloc:%06lx", spi_loc);
 362   1              dPrintf(" op:%02bx",header->op_bmpbits); 
 363   1              dPrintf(" rle:%02bx",header->rledata_cnt);
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 7   

 364   1              dPrintf(" wh:%dx%d",header->w, header->h);
 365   1              dPrintf(" size:%lx", header->size);
 366   1              dPrintf(" LUT format:%bx color:%bx", header->LUT_format,header->LUT_colors);
 367   1              dPrintf(" dummy %bx %bx",header->dummy0, header->dummy1);
 368   1      
 369   1              return 0;
 370   1      }
 371          
 372          
 373          //desc: update header_table
 374          void MenuPrepareImageHeader(struct image_item_info_s *image)
 375          {
 376   1              menu_image_header_t *header = &header_table;
 377   1      
 378   1              if(image->type==IMAGE_ITEM_TYPE_1) {
 379   2                      //if we are using MREL, we need to skip 0x10 size.  
 380   2                      MenuReadRleHeader(image->loc,&rle_header);
 381   2                      rle2_to_header(&rle_header);
 382   2                      header->lut_loc = image->loc + MRLE_INFO_SIZE;
 383   2                      header->image_loc = image->loc + header->lut_size + MRLE_INFO_SIZE;
 384   2              }
 385   1              else if(image->type==IMAGE_ITEM_TYPE_2){
 386   2                      //if we are using MREL, we need to skip 0x10 size.  
 387   2                      info_to_header(image->info);
 388   2                      header->lut_loc = image->loc;
 389   2                      header->image_loc = image->loc + header->lut_size;
 390   2                      header->lut_loc += MRLE_INFO_SIZE;
 391   2                      header->image_loc += MRLE_INFO_SIZE;
 392   2              }
 393   1              else {
 394   2                      //old stype
 395   2                      info_to_header(image->info);
 396   2                      header->lut_loc = image->loc;
 397   2                      header->image_loc = image->loc + header->lut_size;
 398   2              }
 399   1      }
 400          
 401          //=========================
 402          // Init & TEST
 403          //=========================
 404          #define WIN_LOGO 1
 405          BYTE NoSignalLogoShow;
 406          void InitLogo1(void)
 407          {
 408   1              //--------------------------
 409   1              struct image_item_info_s *image;
 410   1              menu_image_header_t *header = &header_table;
 411   1              WORD lut_loc;
 412   1              BYTE FreeRunManual;
 413   1      
 414   1              eMenuPrintf("\nInitLog1");
 415   1              NoSignalLogoShow = 1;
 416   1      
 417   1              //check scaler FreeRun
 418   1              WriteTW88Page(PAGE2_SCALER );
 419   1              FreeRunManual = ReadTW88(REG21C);
 420   1              //if ( FreeRunManual & 0x04 )
 421   1                      ScalerSetFreerunManual(OFF);
 422   1      
 423   1              SOsdWinBuffClean(0);
 424   1      
 425   1              //init DE
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 8   

 426   1              SpiOsdSetDeValue();
 427   1              SpiOsdWinHWOffAll(0); //without wait
 428   1      
 429   1              SpiOsdEnable(ON);
 430   1      
 431   1              image = &img_logo;
 432   1              lut_loc = 0x000;
 433   1              //lut_size = 0x004 << (image->rle >> 4);
 434   1      
 435   1              //prepare header
 436   1              MenuPrepareImageHeader(image);  //update header_table
 437   1      //Printf("\nInitLogo1====");
 438   1      //Printf("\n    lut_loc:%lx",header->lut_loc);
 439   1      //Printf("\n    image_loc:%lx",header->image_loc);
 440   1      //Printf("\n    lut_type:%bx bpp:%bx rle:%bx",header->lut_type,header->bpp,header->rle);
 441   1      //Printf("\n    %dx%d",header->dx,header->dy);
 442   1      //Printf("\n    lut_size:%x",header->lut_size);
 443   1      
 444   1              SpiOsdWinImageLoc(WIN_LOGO, header->image_loc); 
 445   1              SpiOsdWinImageSizeWH( WIN_LOGO, header->dx, header->dy );
 446   1              SpiOsdWinScreen( WIN_LOGO, 0/*sx*/, 0/*sy*/, header->dx, header->dy );
 447   1              if(WIN_LOGO==0) {
 448   2                      SpiOsdWin0ImageOffsetXY( 0, 0 );
 449   2                      SpiOsdWin0Animation( 1, 0, 0, 0);
 450   2              }
 451   1              SpiOsdWinPixelAlpha( WIN_LOGO, ON );
 452   1              SpiOsdWinGlobalAlpha( WIN_LOGO, 0);                                                     ////////
 453   1              SpiOsdWinPixelWidth(WIN_LOGO, header->bpp);
 454   1              SpiOsdWinLutOffset(WIN_LOGO, 0 /* menu_item->osd_s.lut */);
 455   1      
 456   1              SpiOsdWinBuffEnable( WIN_LOGO, ON );
 457   1              //SpiOsdWinBuffEnable( WIN_LOGO, OFF );
 458   1      
 459   1              //write to HW
 460   1              WaitVBlank(1);
 461   1              if(header->rle) {       //need RLE ?
 462   2                      //SpiOsdEnableRLC(ON);
 463   2                      SpiOsdRLC( WIN_LOGO, header->bpp,header->rle);
 464   2              }       
 465   1              else {
 466   2                      //BK110203
 467   2                      //We using RLE only on the background.
 468   2                      //if(item == 0) 
 469   2                      {
 470   3                              //SpiOsdEnableRLC(OFF);         //disable RLE
 471   3                              //SpiOsdEnableRLC is not enough. So, assign win0
 472   3                              //SpiOsdRLC( 0,0,0); //BK110217
 473   3                              SpiOsdDisableRLC(1);
 474   3                      }
 475   2              }
 476   1              //update HW
 477   1              SOsdWinBuffWrite2Hw(WIN_LOGO, WIN_LOGO);
 478   1              //Load Palette
 479   1              SpiOsdLoadLUT(WIN_LOGO, header->lut_type, lut_loc, header->lut_size, header->lut_loc);
 480   1      
 481   1              //pixel alpha blending. after load Palette
 482   1              if(image->alpha != 0xFF) {
 483   2                      SpiOsdPixelAlphaAttr(lut_loc+image->alpha, 0x7F);
 484   2              }
 485   1              // finish draw
 486   1      }
 487          
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 9   

 488          void RemoveLogoWithWait(BYTE fPowerUpBoot)
 489          {
 490   1              BYTE i;
 491   1              volatile BYTE human_input;
 492   1      
 493   1              eMenuPrintf("\nRemoveLogo2(%bx)",fPowerUpBoot);
 494   1              NoSignalLogoShow = 0;
 495   1      
 496   1              //wait & dimmer
 497   1              if(fPowerUpBoot) {
 498   2                      for ( i=0; i<128; i++ ) {
 499   3                              human_input = CheckHumanInputs(1);
 500   3                              if (human_input && human_input!= HINPUT_TSC  ) break;
 501   3                              delay1ms(10);
 502   3                      }
 503   2                      if ( i != 128 ) {
 504   3                              wMenuPuts("\nLogo Stop by interrupt");
 505   3                              goto END_END;
 506   3                      }
 507   2              
 508   2                      for ( i=0; i < 128; i++ ) {
 509   3                              SpiOsdWinGlobalAlpha(WIN_LOGO, i);
 510   3                              WaitVBlank(1);  //it needs
 511   3                              SOsdWinBuffWrite2Hw(WIN_LOGO, WIN_LOGO);
 512   3                              delay1ms(10);
 513   3                              human_input = CheckHumanInputs(1);
 514   3                              if (human_input && human_input!= HINPUT_TSC  ) 
 515   3                                      break;
 516   3                      }
 517   2                      if ( i != 128 ) {
 518   3                              wMenuPuts("\nLogo Stop by interrupt");
 519   3                      }
 520   2              }
 521   1      END_END:        
 522   1              WaitVBlank(1);
 523   1              SpiOsdWinBuffEnable( WIN_LOGO, OFF ); //disable window.
 524   1              SpiOsdEnable(OFF);
 525   1      }
 526          void RemoveLogo(void)
 527          {
 528   1              eMenuPrintf("\nRemoveLogo()");
 529   1              Printf("\nRemoveLogo()");
 530   1              NoSignalLogoShow = 0;
 531   1      
 532   1              WaitVBlank(1);
 533   1              SpiOsdWinBuffEnable( WIN_LOGO, OFF ); //disable window.
 534   1              SpiOsdEnable(OFF);
 535   1      }
 536          
 537          BYTE getNoSignalLogoStatus(void)
 538          {
 539   1              return NoSignalLogoShow;
 540   1      }
 541          
 542          
 543          //description
 544          //      init FontOSD Window.
 545          //      I will use 3BPP for digit.
 546          void MenuFontOsdItemInit(BYTE item, BYTE f1BPP_ALPHA)
 547          {
 548   1              BYTE winno;
 549   1              BYTE palette;
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 10  

 550   1              menu_sitem_info_t *menu_item;
 551   1      
 552   1              menu_fitem_info_t *text_info;
 553   1      
 554   1              menu_item = &curr_menu->items[0];
 555   1              text_info = curr_menu->texts;
 556   1      
 557   1              text_info += item;         //??working on Keil->Good
 558   1      
 559   1              winno = text_info->winno;
 560   1              palette = text_info->BPP3_palette;
 561   1      
 562   1      
 563   1              dMenuPrintf("\n");
 564   1              dMenuPrintf(" winno:%02bx",winno);
 565   1              dMenuPrintf(" palette:%02bx",palette);
 566   1              dMenuPrintf(" osdram:%d",text_info->osdram);
 567   1      
 568   1              //FOsdWinInit(winno);
 569   1      
 570   1              FOsdWinEnable(winno,OFF);       // WINn disable
 571   1      
 572   1      #if 1
 573   1              //assuem page3
 574   1              //pre fix
 575   1              WriteTW88(REG304, ReadTW88(REG304) & 0xDF);             //default: lower 256 char.              
 576   1              WriteTW88(REG304, ReadTW88(REG304) & 0xFE);             //OsdRam access mode
 577   1              
 578   1              FOsdWinMulticolor(winno,1);
 579   1      #endif
 580   1      
 581   1              
 582   1              FOsdWinScreenXY(winno,menu_item->x + text_info->x, menu_item->y + text_info->y);                
 583   1              FOsdWinScreenWH(winno, text_info->w, text_info->h);
 584   1              FOsdWinZoom(winno, text_info->zoom_h, text_info->zoom_v);
 585   1              //3BPP
 586   1              FOsdWinSetBpp3Alpha(winno,palette);     //use BPP3_alpha_lut_offset[].
 587   1              FOsdSetPaletteColor(palette, text_info->BPP3_color, 8, 0);
 588   1              FOsdWinSetOsdRamStartAddr(winno, text_info->osdram);
 589   1      
 590   1      #if 0
                      //assume page3
                      //post fix
                      WriteTW88(REG304, ReadTW88(REG304) & 0xDF);             //default: lower 256 char.              
                      WriteTW88(REG304, ReadTW88(REG304) & 0xFE);             //OsdRam access mode
                      
                      FOsdWinMulticolor(winno,1);
              #endif
 598   1      
 599   1              if(f1BPP_ALPHA) {
 600   2                      FOsdWinAlphaPixel(winno, text_info->BPP1Color >> 4, 15);
 601   2              }
 602   1      
 603   1              FOsdWinEnable(winno,ON);        //WINn enable
 604   1      
 605   1              //WriteTW88Page(PAGE3_FOSD );
 606   1              //WriteTW88(REG310, ReadTW88(REG310) | 0x40 ); // temp - enable MultiBPP on Win1
 607   1      }
 608          
 609          #if 1
 610          void MenuFontOsdItemInitNew(BYTE item_start, BYTE item_end)
 611          {
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 11  

 612   1              BYTE winno;
 613   1              BYTE palette;
 614   1              menu_sitem_info_t *menu_item;
 615   1              menu_fitem_info_t *text_info;
 616   1              BYTE item;
 617   1              BYTE value;
 618   1              //BYTE high_byte,low_byte;
 619   1      
 620   1              menu_item = &curr_menu->items[0];
 621   1      
 622   1              for(item=item_start; item <= item_end; item++) {
 623   2                      text_info = curr_menu->texts;
 624   2                      text_info += item;         //??working on Keil->Good
 625   2      
 626   2                      winno = text_info->winno;
 627   2                      palette = text_info->BPP3_palette;
 628   2      
 629   2              
 630   2                      dMenuPrintf("\n");
 631   2                      dMenuPrintf(" winno:%02bx",winno);
 632   2                      dMenuPrintf(" palette:%02bx",palette);
 633   2                      dMenuPrintf(" osdram:%d",text_info->osdram);
 634   2      
 635   2                      FOsdWinEnable(winno,OFF);       // WINn disable
 636   2      
 637   2                      WriteTW88Page(PAGE3_FOSD);
 638   2                      value = ReadTW88(REG304);
 639   2                      WriteTW88(REG304, value & 0xDE);        //lower 256 char, OsdRam access mode.
 640   2      
 641   2                      FOsdWinMulticolor(winno,1);
 642   2      
 643   2                      FOsdWinScreenXY(winno, menu_item->x + text_info->x,     menu_item->y + text_info->y);
 644   2                      FOsdWinScreenWH(winno,  text_info->w, text_info->h);
 645   2                      FOsdWinZoom(winno, text_info->zoom_h, text_info->zoom_v);
 646   2      
 647   2                      //3BPP
 648   2                      FOsdWinSetBpp3Alpha(winno,palette);     //use BPP3_alpha_lut_offset[].
 649   2      
 650   2                      //high_byte = (BYTE)(text_info->BPP3_color >> 8);
 651   2                      //low_byte = (BYTE)text_info->BPP3_color;
 652   2                      //WriteTW88Page(PAGE3_FOSD );
 653   2                      //for(i=0; i < 8; i++) {
 654   2                      //      //FOsdSetPaletteColor(palette+i, text_info->BPP3_color, 0);     //test color. Lime              
 655   2                      //      WriteTW88(REG30C, (ReadTW88(REG30C) & 0xC0) | (palette+i)); 
 656   2                      //      WriteTW88(REG30D, high_byte);
 657   2                      //      WriteTW88(REG30E, low_byte);
 658   2                      //}
 659   2                      FOsdSetPaletteColor(palette, text_info->BPP3_color, 8, 0);
 660   2                      FOsdWinSetOsdRamStartAddr(winno, text_info->osdram);
 661   2      
 662   2                      FOsdWinEnable(winno,ON);        //WINn enable
 663   2              }
 664   1      }
 665          #endif
 666          
 667          
 668          //please move to test_xxx.c
 669          //-------------------------
 670          // test routines
 671          void TestMainMenuImage(BYTE type)
 672          {
 673   1              //see MenuDrawCurrImage
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 12  

 674   1              WORD sx,sy;
 675   1              //menu_sitem_info_t *menu_item;
 676   1              struct image_item_info_s *image;
 677   1              menu_image_header_t *header = &header_table;
 678   1              BYTE sosd_win;
 679   1              //WORD lut_size;
 680   1      
 681   1              switch(type) {
 682   2              case 2:         image = &img_main_test2;        break;
 683   2              case 3:         image = &img_main_test3;        break;
 684   2              default:        image = &img_main_test1;        break;
 685   2              }
 686   1      
 687   1              sx = 0;
 688   1              sy = 0;
 689   1              sosd_win = 1;
 690   1      //      lut_size = 0x004 << (image->rle >> 4);
 691   1              //prepare header
 692   1              MenuPrepareImageHeader(image);
 693   1      
 694   1              SpiOsdWinImageLoc( sosd_win, header->image_loc);
 695   1              SpiOsdWinImageSizeWH( sosd_win, header->dx, header->dy );
 696   1              if(sosd_win==0)
 697   1                      SpiOsdWin0ImageOffsetXY( 0, 0 );
 698   1              SpiOsdWinScreen( sosd_win, sx, sy, header->dx, header->dy );
 699   1              if(sosd_win==0)
 700   1                      SpiOsdWin0Animation( 1, 0, 0, 0);
 701   1              SpiOsdWinPixelAlpha( sosd_win, ON );
 702   1              SpiOsdWinPixelWidth(sosd_win, header->bpp);
 703   1              SpiOsdWinLutOffset(sosd_win, 0 /*menu_item->osd_s.lut*/);
 704   1      
 705   1      
 706   1              SpiOsdWinBuffEnable( sosd_win, ON );
 707   1      
 708   1              //write to HW
 709   1              WaitVBlank(1);
 710   1              if(header->rle) {       //need RLE ?
 711   2                      //SpiOsdEnableRLC(ON);
 712   2                      SpiOsdRLC( sosd_win, header->bpp, header->rle);
 713   2              }
 714   1              SOsdWinBuffWrite2Hw(1,1 /*menu_item->osd_s.win, menu_item->osd_s.win*/);
 715   1              SpiOsdLoadLUT(sosd_win, header->lut_type, 0 /*menu_item->osd_s.lut*/, header->lut_size, header->lut_loc);
 716   1      
 717   1      
 718   1              //pixel alpha ???
 719   1              if(image->alpha != 0xFF) {
 720   2                      SpiOsdPixelAlphaAttr(0 /*menu_item->osd_s.lut*/ +image->alpha, 0x7F);
 721   2              }
 722   1      }
 723          
 724          
 725          
 726          //=========================
 727          // DRAW
 728          //=========================
 729          #ifdef UNCALLED_SEGMENT_CODE
              void MenuDrawCurrValue(BYTE itemno, WORD value)
              {
                      BYTE temp_byte = itemno;
                      BYTE temp_word = value;
              }
              void MenuDrawCurrString(BYTE itemno, BYTE *str)
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 13  

              {
                      BYTE temp_byte = itemno;
                      BYTE *temp_pbyte = str;
              }
              #endif
 741          
 742          //desc: draw the selected item. It can be background image, focused image,...
 743          //use curr_menu.menu_info[item]
 744          //tip: we need a osdlang.
 745          void MenuDrawCurrImage(BYTE use1, BYTE item)
 746          {
 747   1              WORD sx,sy;
 748   1              menu_sitem_info_t *menu_item;
 749   1              struct image_item_info_s *image;
 750   1              BYTE sosd_win;
 751   1              menu_image_header_t *header = &header_table;
 752   1      
 753   1              menu_item = &curr_menu->items[item];
 754   1              if(use1) {
 755   2                      image = menu_item->image1;
 756   2                      if(image==NULL) {
 757   3                              eMenuPrintf("\nimage%bd NULL @ item:%bd",use1,item); 
 758   3                              return;
 759   3                      }
 760   2              }
 761   1              else {
 762   2                      image = menu_item->image;
 763   2                      if(image==NULL) {
 764   3                              eMenuPrintf("\nimage%bd NULL @ item:%bd",use1,item); 
 765   3                              return;
 766   3                      }
 767   2              }
 768   1              if(curr_menu == &menu_slider_page || curr_menu == &menu_slider3_page) {
 769   2                      if(item == 1) {
 770   3                              //slide title
 771   3                              image = slide_title_img;
 772   3                      }
 773   2              }
 774   1              //prepare header
 775   1              MenuPrepareImageHeader(image);
 776   1      
 777   1              //debug info
 778   1      #ifdef DEBUG_MENU
                      PrintCurrMenu();
                      PrintCurrItem(item, header);
              #endif
 782   1      
 783   1              sx = menu_item->x;
 784   1              sy = menu_item->y;
 785   1              sosd_win = menu_item->win;   
 786   1      
 787   1              //adjust sx,sy
 788   1              if(menu_item->align != ALIGN_TOPLEFT) {
 789   2                      //please adjust new sx,sy
 790   2              }
 791   1      
 792   1              //fill out sosd_buff
 793   1              SpiOsdWinImageLoc( sosd_win, header->image_loc); 
 794   1              SpiOsdWinImageSizeWH( sosd_win, header->dx, header->dy );
 795   1              SpiOsdWinScreen( sosd_win, sx, sy, header->dx, header->dy );
 796   1              if(sosd_win==0) {
 797   2                      SpiOsdWin0ImageOffsetXY( 0, 0 );
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 14  

 798   2                      SpiOsdWin0Animation( 1, 0, 0, 0);
 799   2              }
 800   1              if(image->alpha != 0xFF)
 801   1                      SpiOsdWinPixelAlpha( sosd_win, ON );
 802   1              else {
 803   2                      SpiOsdWinGlobalAlpha( sosd_win, 0 /*EE_Read(EEP_OSD_TRANSPARENCY)*/);
 804   2              }
 805   1              SpiOsdWinPixelWidth(sosd_win, header->bpp);
 806   1              SpiOsdWinLutOffset(sosd_win,menu_item->lut);
 807   1      
 808   1              SpiOsdWinBuffEnable( sosd_win, ON );
 809   1              //
 810   1              //write to HW
 811   1              //
 812   1              if(UseSOsdHwBuff) {
 813   2                      if(header->rle)
 814   2                              SOsdHwBuffSetRle(sosd_win,header->bpp,header->rle);
 815   2                      SOsdHwBuffSetLut(sosd_win, /*header->lut_type,*/ menu_item->lut, header->lut_size, header->lut_loc);
 816   2              
 817   2                      //pixel alpha blending. after load Palette
 818   2                      if(image->alpha != 0xFF)
 819   2                              SOsdHwBuffSetAlpha(menu_item->lut+image->alpha);
 820   2              }
 821   1              else {
 822   2                      //WaitVBlank(1);
 823   2                      if(header->rle) {       //need RLE ?
 824   3                              //SpiOsdEnableRLC(ON);
 825   3                              SpiOsdRLC( sosd_win, header->bpp,header->rle);
 826   3                      }       
 827   2                      else {
 828   3                              //We using RLE only on the background.
 829   3                              if(item == 0) {
 830   4                                      //SpiOsdEnableRLC(OFF);         //disable RLE
 831   4                                      //SpiOsdEnableRLC is not enough. So, assign win0
 832   4                                      //SpiOsdRLC( 0,0,0); //BK110217
 833   4                                      SpiOsdDisableRLC(1);
 834   4                              }
 835   3                      }
 836   2                      WaitVBlank(1);
 837   2              
 838   2                      //Load Palette
 839   2                      SpiOsdLoadLUT(sosd_win, header->lut_type, menu_item->lut, header->lut_size, header->lut_loc);
 840   2              
 841   2                      //WaitVBlank(1);
 842   2                      //update HW
 843   2                      SOsdWinBuffWrite2Hw(menu_item->win, menu_item->win);
 844   2              
 845   2                      //pixel alpha blending. after load Palette
 846   2                      if(image->alpha != 0xFF) {
 847   3                              SpiOsdPixelAlphaAttr(menu_item->lut+image->alpha, 0x7F);
 848   3                      }
 849   2              }
 850   1      }
 851          
 852          #define SCROLL_SPEED_Y  2
 853          #define SCROLL_SPEED_X  4
 854          //FYI:I will call MenuDrawCurrImage(0,0) first. So We don't need to worry about RLE window.
 855          void MenuDrawScrollImage(BYTE item, BYTE direction)
 856          {
 857   1              WORD    i;
 858   1              DWORD   start_byte;
 859   1              BYTE    start_bit;
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 15  

 860   1              menu_sitem_info_t *menu_item;
 861   1              struct image_item_info_s *image;
 862   1              BYTE sosd_win;
 863   1              menu_image_header_t *header = &header_table;
 864   1      
 865   1      
 866   1              menu_item = &curr_menu->items[item];
 867   1              image = menu_item->image;
 868   1      
 869   1              //prepare header
 870   1              MenuPrepareImageHeader(image);
 871   1      
 872   1              //if it is a RLE, maybe this will not working....
 873   1              //I will draw it with Fixed image.
 874   1              if(header->rle) { 
 875   2                      wMenuPuts("\nWarning:Scroll with RLE.\n"); 
 876   2                      MenuDrawCurrImage(0,item);
 877   2                      return; 
 878   2              }
 879   1      
 880   1              sosd_win = menu_item->win;
 881   1      
 882   1              //load LUT first
 883   1              WaitVBlank(1);
 884   1              SpiOsdLoadLUT(sosd_win, header->lut_type, menu_item->lut, header->lut_size, header->lut_loc);   
 885   1              if(image->alpha != 0xFF) {       //pixel alpha ???
 886   2                      SpiOsdPixelAlphaAttr(menu_item->lut+image->alpha, 0x7F);
 887   2              }
 888   1      
 889   1              SpiOsdWinBuffEnable( sosd_win, ON );
 890   1              SpiOsdWinPixelAlpha( sosd_win, ON );
 891   1              SpiOsdWinPixelWidth(sosd_win, header->bpp);
 892   1              SpiOsdWinLutOffset(sosd_win,menu_item->lut);
 893   1              if(sosd_win==0) {
 894   2                      SpiOsdWin0ImageOffsetXY( 0, 0 );
 895   2                      SpiOsdWin0Animation( 1, 0, 0, 0);
 896   2              }
 897   1      
 898   1              if(direction==NAVI_KEY_DOWN) {          
 899   2                      for(i=1; i <= header->dy; i++) {
 900   3                              start_byte = (header->dy - i) * header->dx;
 901   3                              start_bit = 0;
 902   3                              if(start_byte) {
 903   4                                      if(header->bpp == 6) {
 904   5                                              start_byte = start_byte * 6;
 905   5                                              start_bit = start_byte % 8;
 906   5                                              start_bit >>= 1;
 907   5                                              start_byte = start_byte / 8;    
 908   5                                      }
 909   4                                      else if(header->bpp == 4) {
 910   5                                              start_byte = start_byte * 4;
 911   5                                              start_bit = start_byte % 8;
 912   5                                              start_bit >>= 1;
 913   5                                              start_byte = start_byte / 8;    
 914   5                                      }
 915   4                              }
 916   3      
 917   3                              SpiOsdWinImageLoc(sosd_win, header->image_loc + start_byte);
 918   3                              SpiOsdWinImageLocBit(sosd_win, start_bit);
 919   3                              SpiOsdWinScreen(sosd_win, 0,0, header->dx, i);
 920   3                              SpiOsdWinImageSizeWH(sosd_win, header->dx, i);     //if not SOSD_WIN0, you can move up.
 921   3                              //?delay
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 16  

 922   3                              WaitVBlank(1);
 923   3                              SOsdWinBuffWrite2Hw(menu_item->win, menu_item->win);
 924   3                              //speed up
 925   3                              if( (i+SCROLL_SPEED_Y) >= header->dy) {
 926   4                                      //stop it
 927   4                                      if(i !=  header->dy ) {
 928   5                                              i = header->dy - 1;
 929   5                                      }
 930   4                                      // next will be increased with 1.
 931   4                              }
 932   3                              else {
 933   4                                      i += SCROLL_SPEED_Y;    
 934   4                                      // next will be increased with 1.
 935   4                              }
 936   3                      }
 937   2              }
 938   1              else if(direction==NAVI_KEY_RIGHT)
 939   1              {
 940   2                      SpiOsdWinImageSizeWH(sosd_win, header->dx, header->dy);
 941   2      
 942   2                      for(i=1; i <= header->dx; i++) {
 943   3                              start_byte = header->dx - i;
 944   3                              start_bit = 0;
 945   3                              if(start_byte) {
 946   4                                      if(header->bpp==6) {
 947   5                                              start_byte = start_byte * 6;
 948   5                                              start_bit = start_byte % 8;
 949   5                                              start_bit >>= 1;
 950   5                                              start_byte = start_byte / 8;
 951   5                                      }
 952   4                                      else if(header->bpp==4) {
 953   5                                              start_byte = start_byte * 4;
 954   5                                              start_bit = start_byte % 8;
 955   5                                              start_bit >>= 1;
 956   5                                              start_byte = start_byte / 8;    
 957   5                                      }
 958   4                              }
 959   3                              SpiOsdWinImageLoc(sosd_win, header->image_loc + start_byte);
 960   3                              SpiOsdWinImageLocBit(sosd_win, start_bit);
 961   3                              SpiOsdWinScreen(sosd_win, 0,0, i, header->dy);
 962   3                              //delay
 963   3                              WaitVBlank(1);
 964   3                              SOsdWinBuffWrite2Hw(menu_item->win, menu_item->win);
 965   3      
 966   3                              //speed up
 967   3                              if( (i+SCROLL_SPEED_X) >= header->dx) {
 968   4                                      //stop it
 969   4                                      if(i !=  header->dx ) {
 970   5                                              i = header->dx - 1;
 971   5                                      }
 972   4                                      // next will be increased with 1.
 973   4                              }
 974   3                              else {
 975   4                                      i += SCROLL_SPEED_X;    
 976   4                                      // next will be increased with 1.
 977   4                              }
 978   3                      }
 979   2              }
 980   1              else {
 981   2                      //right to left and bottom to top is not implemented.
 982   2                      //It is more easy then left2right, top2bottom.
 983   2                      MenuDrawCurrImage(0,item);
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 17  

 984   2              }
 985   1      }
 986          //desc: turn of curr_menu->focus
 987          void MenuTurnOffCurrImage(BYTE item)
 988          {
 989   1              menu_sitem_info_t *menu_item;
 990   1              BYTE sosd_win;
 991   1      
 992   1              menu_item = &curr_menu->items[item];
 993   1              sosd_win = menu_item->win;
 994   1              WaitVBlank(1);
 995   1              SpiOsdWinHWEnable(sosd_win, OFF);
 996   1      }
 997          
 998          void MenuDrawDeactivatedItemImage(BYTE sosd_win, BYTE item)
 999          {
1000   1      BYTE temp =  sosd_win;
1001   1      BYTE test = item;
1002   1              //fill out with half transparent window or use deactivated image.
1003   1      }
1004          
1005          #ifdef UNCALLED_SEGMENT_CODE
              void FontOsdWinPuts2(struct menu_sitem_info_s *item_info, BYTE *str)
              {...}
              #endif
1009          
1010          
1011          
1012          void MenuFontOsdItemString(BYTE index, BYTE *str)
1013          {
1014   1              BYTE n_char;
1015   1              BYTE palette;
1016   1      
1017   1              menu_fitem_info_t *text_info = curr_menu->texts;
1018   1              text_info += index;
1019   1      
1020   1              //string use BPP1
1021   1              palette = text_info->BPP1Color;
1022   1              FOsdRamSetAddrAttr(text_info->osdram,text_info->BPP1Color);
1023   1              //assume page3
1024   1              n_char=0;
1025   1              while(*str) {
1026   2                      WriteTW88(REG307, *str++);
1027   2                      n_char++;
1028   2              }
1029   1      
1030   1              //adjust FontOSD width.
1031   1              FOsdWinScreenWH(text_info->winno, n_char,1);
1032   1      }
1033          
1034          
1035          //merged background
1036          void proc_menu_bg(void)
1037          {
1038   1              BYTE curr_menu_type;
1039   1              curr_menu_type = curr_menu->type & 0x0F;
1040   1      
1041   1              CpuTouchSkipCount = 1*500*2;    //0.5 sec
1042   1      
1043   1              UseSOsdHwBuff = 1;
1044   1              SOsdHwBuffClean();
1045   1              SOsdWinBuffClean(0);
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 18  

1046   1      
1047   1              MenuDrawCurrImage(0,0);                                                                 //draw background
1048   1              if(curr_menu_type==MENU_TYPE_LIST 
1049   1              || curr_menu_type==MENU_TYPE_SCRLDN) {
1050   2                      //update HW and clear UseSOsdHwBuff mode.
1051   2                      SOsdHwBuffWrite2Hw();
1052   2                      UseSOsdHwBuff = 0;
1053   2      
1054   2                      if(menu_lock_scroll==0) {
1055   3                              if(curr_menu_type == MENU_TYPE_LIST)
1056   3                                      MenuDrawScrollImage(1, NAVI_KEY_RIGHT);         //left side
1057   3                              else if(curr_menu_type == MENU_TYPE_SCRLDN)
1058   3                                      MenuDrawScrollImage(1, NAVI_KEY_DOWN);          //top topdown moving
1059   3                              else {
1060   4                                      dMenuPrintf("\ninvalid curr_menu->type:%bx",curr_menu->type);
1061   4                                      MenuDrawCurrImage(0,1);
1062   4                              }
1063   3                              menu_lock_scroll=1;
1064   3                      }
1065   2                      else
1066   2                              MenuDrawCurrImage(0,1);
1067   2      
1068   2              }
1069   1              MenuDrawCurrImage(0,curr_menu->focus);                  //draw focused item
1070   1      
1071   1              if(curr_menu->type & MENU_TYPE_NOTE )                   //draw selected note symbol(bar or point)
1072   1                      MenuDrawCurrImage(0,curr_menu->select+curr_menu->item_total);   //select
1073   1      
1074   1              if(UseSOsdHwBuff) {
1075   2                      SOsdHwBuffWrite2Hw();
1076   2                      UseSOsdHwBuff = 0;
1077   2              }
1078   1      }
1079          
1080          
1081          //=========================
1082          // KEY & TOUCH
1083          //=========================
1084          BYTE MenuKeyInput_slider_page(BYTE key)
1085          {
1086   1              switch(key) {
1087   2              case NAVI_KEY_ENTER:
1088   2                      break;
1089   2              case NAVI_KEY_UP:
1090   2                      curr_menu->focus = curr_menu->items[curr_menu->focus].up;
1091   2                      curr_menu->items[0].p(); //redraw all proc_slider3_bg()
1092   2                      key = NAVI_KEY_NONE; //eat key
1093   2                      break;
1094   2              case NAVI_KEY_DOWN:
1095   2                      curr_menu->focus = curr_menu->items[curr_menu->focus].down;
1096   2                      curr_menu->items[0].p();  //redraw all  proc_slider3_bg()
1097   2                      key = NAVI_KEY_NONE; //eat key
1098   2                      break;
1099   2              case NAVI_KEY_LEFT:
1100   2                      if(curr_menu->focus == MENU_SLIDER_BAR_INPUT_RED) {
1101   3                              proc_slider_left();
1102   3                              key = NAVI_KEY_NONE; //eat key
1103   3                      }
1104   2                      break;
1105   2              case NAVI_KEY_RIGHT:
1106   2                      if(curr_menu->focus == MENU_SLIDER_BAR_INPUT_RED) {
1107   3                              proc_slider_right();
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 19  

1108   3                              key = NAVI_KEY_NONE; //eat key
1109   3                      }
1110   2                      break;
1111   2              default:
1112   2                      // do nothing.
1113   2                      break;
1114   2              }
1115   1              return key;
1116   1      }
1117          
1118          BYTE MenuKeyInput_slider3_page(BYTE key)
1119          {
1120   1              switch(key) {
1121   2              case NAVI_KEY_ENTER:
1122   2                      break;
1123   2              case NAVI_KEY_UP:
1124   2                      curr_menu->focus = curr_menu->items[curr_menu->focus].up;
1125   2                      if(curr_menu->focus >= curr_menu->item_start)
1126   2                              curr_menu->select = curr_menu->focus;
1127   2                      curr_menu->items[0].p(); //redraw all proc_slider3_bg()
1128   2                      key = NAVI_KEY_NONE; //eat key
1129   2                      break;
1130   2              case NAVI_KEY_DOWN:
1131   2                      curr_menu->focus = curr_menu->items[curr_menu->focus].down;
1132   2                      if(curr_menu->focus >= curr_menu->item_start)
1133   2                              curr_menu->select = curr_menu->focus;
1134   2                      curr_menu->items[0].p();  //redraw all  proc_slider3_bg()
1135   2                      key = NAVI_KEY_NONE; //eat key
1136   2                      break;
1137   2              case NAVI_KEY_LEFT:
1138   2                      if(curr_menu->focus == SLIDE3_1 || curr_menu->focus == SLIDE3_2 || curr_menu->focus == SLIDE3_3) {
1139   3                              proc_slider3_left();
1140   3                              key = NAVI_KEY_NONE; //eat key
1141   3                      }
1142   2                      break;
1143   2              case NAVI_KEY_RIGHT:
1144   2                      if(curr_menu->focus == SLIDE3_1 || curr_menu->focus == SLIDE3_2 || curr_menu->focus == SLIDE3_3) {
1145   3                              proc_slider3_right();
1146   3                              key = NAVI_KEY_NONE; //eat key
1147   3                      }
1148   2                      break;
1149   2              default:
1150   2                      // do nothing.
1151   2                      break;
1152   2              }
1153   1              return key;
1154   1      }
1155          
1156          BYTE MenuKeyInput_main_page(BYTE key)
1157          {
1158   1              BYTE new;
1159   1      
1160   1              switch(key) {
1161   2              case NAVI_KEY_ENTER:
1162   2                      break;
1163   2              case NAVI_KEY_UP:
1164   2                      if(curr_menu->focus < curr_menu->item_start) {
1165   3                              //NAVI to item
1166   3                              MenuTurnOffCurrImage(curr_menu->focus);
1167   3                              curr_menu->focus = curr_menu->select;
1168   3                              MenuDrawCurrImage(0,curr_menu->focus);
1169   3                              key = NAVI_KEY_NONE; //eat key                  
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 20  

1170   3                      }
1171   2                      else {
1172   3                              //item to NAVI or item to item
1173   3                              new = curr_menu->items[curr_menu->focus].up;
1174   3                              if(new >=  curr_menu->item_start)
1175   3                                      curr_menu->select = new;        
1176   3                      }
1177   2                      break;
1178   2      
1179   2              case NAVI_KEY_DOWN:
1180   2                      if(curr_menu->focus < curr_menu->item_start) {
1181   3                              //NAVI to item
1182   3                              MenuTurnOffCurrImage(curr_menu->focus);
1183   3                              curr_menu->focus = curr_menu->select;
1184   3                              MenuDrawCurrImage(0,curr_menu->focus);
1185   3                              key = NAVI_KEY_NONE; //eat key                  
1186   3                      }
1187   2                      else {
1188   3                              //item to NAVI
1189   3                              new = curr_menu->items[curr_menu->focus].down;
1190   3                              if(new >=  curr_menu->item_start)
1191   3                                      curr_menu->select = new;        
1192   3                      }
1193   2                      break;
1194   2      
1195   2              case NAVI_KEY_LEFT:
1196   2                      if(curr_menu->focus >= curr_menu->item_start) {
1197   3                              curr_menu->select = curr_menu->items[curr_menu->focus].left;
1198   3                      }
1199   2                      break;
1200   2              case NAVI_KEY_RIGHT:
1201   2                      if(curr_menu->focus >= curr_menu->item_start) {
1202   3                              curr_menu->select = curr_menu->items[curr_menu->focus].right;
1203   3                      }
1204   2                      break;
1205   2              default:
1206   2                      // do nothing.
1207   2                      break;
1208   2              }
1209   1              return key;
1210   1      }
1211          
1212          
1213          BYTE MenuKeyInput_input_page(BYTE key)
1214          {
1215   1              switch(key) {
1216   2              case NAVI_KEY_ENTER:
1217   2                      break;
1218   2              case NAVI_KEY_UP:
1219   2                      MenuTurnOffCurrImage(curr_menu->focus);
1220   2                      if(curr_menu->focus < curr_menu->item_start) {
1221   3                              //NAVI to item
1222   3                              curr_menu->focus = curr_menu->select;                   
1223   3                      }
1224   2                      else {
1225   3                              //item to NAVI
1226   3                              curr_menu->focus = curr_menu->items[curr_menu->focus].up;
1227   3                              if(curr_menu->type & MENU_TYPE_NOTE )
1228   3                                      MenuDrawCurrImage(0,curr_menu->select+curr_menu->item_total);
1229   3                      }
1230   2                      MenuDrawCurrImage(0,curr_menu->focus);
1231   2                      key = NAVI_KEY_NONE; //eat key
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 21  

1232   2                      break;
1233   2      
1234   2              case NAVI_KEY_DOWN:
1235   2                      MenuTurnOffCurrImage(curr_menu->focus);
1236   2                      if(curr_menu->focus < curr_menu->item_start) {
1237   3                              //NAVI to item
1238   3                              curr_menu->focus = curr_menu->select;                   
1239   3                      }
1240   2                      else {
1241   3                              //item to NAVI
1242   3                              curr_menu->focus = curr_menu->items[curr_menu->focus].down;
1243   3                              if(curr_menu->type & MENU_TYPE_NOTE )
1244   3                                      MenuDrawCurrImage(0,curr_menu->select+curr_menu->item_total);   //select
1245   3                      }
1246   2                      MenuDrawCurrImage(0,curr_menu->focus);
1247   2                      key = NAVI_KEY_NONE; //eat key
1248   2                      break;
1249   2      
1250   2              case NAVI_KEY_LEFT:
1251   2                      break;
1252   2              case NAVI_KEY_RIGHT:
1253   2                      break;
1254   2              default:
1255   2                      // do nothing.
1256   2                      break;
1257   2              }
1258   1              return key;
1259   1      }
1260          
1261          BYTE MenuKeyInput_position_page(BYTE key)
1262          {
1263   1      #ifdef SUPPORT_PC
1264   1              BYTE digit;
1265   1      #endif
1266   1      
1267   1              switch(key) {
1268   2              case NAVI_KEY_ENTER:
1269   2                      break;
1270   2              case NAVI_KEY_UP:
1271   2      #ifdef SUPPORT_PC
1272   2                      if(curr_menu->focus == MENU_POSITION_INPUT_RED) {
1273   3                              //adjust active area box
1274   3                              digit = GetRGBPosV();
1275   3                              if(digit<100)
1276   3                                      SetRGBPosV(++digit);
1277   3                              proc_position_V_digit();
1278   3                              key = NAVI_KEY_NONE; //eat key
1279   3                      }
1280   2      #endif
1281   2                      break;
1282   2              case NAVI_KEY_DOWN:
1283   2      #ifdef SUPPORT_PC
1284   2                      if(curr_menu->focus == MENU_POSITION_INPUT_RED) {
1285   3                              //adjust active area box
1286   3                              digit = GetRGBPosV();
1287   3                              if(digit)
1288   3                                      SetRGBPosV( --digit);
1289   3                              proc_position_V_digit();
1290   3                              key = NAVI_KEY_NONE; //eat key
1291   3                      }
1292   2      #endif
1293   2                      break;
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 22  

1294   2              case NAVI_KEY_LEFT:
1295   2      #ifdef SUPPORT_PC
1296   2                      if(curr_menu->focus == MENU_POSITION_INPUT_RED) {
1297   3                              //adjust active area box
1298   3                              digit = GetRGBPosH();
1299   3                              if(digit)
1300   3                                      SetRGBPosH(--digit);
1301   3                              proc_position_H_digit();
1302   3                              key = NAVI_KEY_NONE; //eat key
1303   3                      }
1304   2      #endif
1305   2                      break;
1306   2              case NAVI_KEY_RIGHT:
1307   2      #ifdef SUPPORT_PC
1308   2                      if(curr_menu->focus == MENU_POSITION_INPUT_RED) {
1309   3                              //adjust active area box
1310   3                              digit = GetRGBPosH();
1311   3                              if(digit<100)
1312   3                                      SetRGBPosH(++digit);
1313   3                              proc_position_H_digit();
1314   3                              key = NAVI_KEY_NONE; //eat key
1315   3                      }
1316   2      #endif
1317   2                      break;
1318   2              default:
1319   2                      // do nothing.
1320   2                      break;
1321   2              }
1322   1              return key;
1323   1      }
1324          
1325          
1326          //description
1327          //
1328          void MenuKeyInput(BYTE key)
1329          {
1330   1      #ifdef DEBUG_MENU
                      switch(key) {
                      case NAVI_KEY_ENTER:    dMenuPrintf("\nNAVI_KEY_ENTER");        break;
                      case NAVI_KEY_UP:               dMenuPrintf("\nNAVI_KEY_UP");           break;
                      case NAVI_KEY_DOWN:     dMenuPrintf("\nNAVI_KEY_DOWN");         break;
                      case NAVI_KEY_LEFT:     dMenuPrintf("\nNAVI_KEY_LEFT");         break;
                      case NAVI_KEY_RIGHT:    dMenuPrintf("\nNAVI_KEY_RIGHT");        break;
                      default:                                dMenuPrintf("\nNAVI_KEY_knonwn:%02bx",key);     break;
                      }
              #endif
1340   1      
1341   1              //
1342   1              //special
1343   1              // eat the key or return the same key.
1344   1              if(curr_menu==&menu_slider_page)
1345   1                      key = MenuKeyInput_slider_page(key);
1346   1              else if(curr_menu==&menu_slider3_page)
1347   1                      key =MenuKeyInput_slider3_page(key);
1348   1              else if(curr_menu==&menu_position_page)
1349   1                      key = MenuKeyInput_position_page(key);
1350   1              else if(curr_menu==&menu_input_page || curr_menu==&menu_system_page)
1351   1                      key = MenuKeyInput_input_page(key);
1352   1              else if(curr_menu==&menu_main_page) {
1353   2                      key = MenuKeyInput_main_page(key);
1354   2              }
1355   1      
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 23  

1356   1      
1357   1              switch(key) {
1358   2              case NAVI_KEY_ENTER:
1359   2                      curr_menu->items[curr_menu->focus].p();
1360   2                      //NOTE:DO NOT USE curr_menu, it will be updated.
1361   2                      break;
1362   2              case NAVI_KEY_UP:
1363   2                      MenuTurnOffCurrImage(curr_menu->focus);
1364   2                      curr_menu->focus = curr_menu->items[curr_menu->focus].up;
1365   2                      MenuDrawCurrImage(0,curr_menu->focus);
1366   2                      break;
1367   2              case NAVI_KEY_DOWN:
1368   2                      MenuTurnOffCurrImage(curr_menu->focus);
1369   2                      curr_menu->focus = curr_menu->items[curr_menu->focus].down;
1370   2                      MenuDrawCurrImage(0,curr_menu->focus);
1371   2                      break;
1372   2              case NAVI_KEY_LEFT:
1373   2                      MenuTurnOffCurrImage(curr_menu->focus);
1374   2                      curr_menu->focus = curr_menu->items[curr_menu->focus].left;
1375   2                      MenuDrawCurrImage(0,curr_menu->focus);
1376   2                      break;
1377   2              case NAVI_KEY_RIGHT:
1378   2                      //dMenuPrintf("\nfocus:%d->",(WORD)curr_menu->focus);
1379   2                      MenuTurnOffCurrImage(curr_menu->focus);
1380   2                      curr_menu->focus = curr_menu->items[curr_menu->focus].right;
1381   2                      //dMenuPrintf("%d",(WORD)curr_menu->focus);
1382   2                      MenuDrawCurrImage(0,curr_menu->focus);
1383   2                      break;
1384   2              default:
1385   2                      // do nothing.
1386   2                      break;
1387   2              }
1388   1      
1389   1              //if deactivated item, passthru.
1390   1              //BKTODO: Do you have Only one deactivated item ?
1391   1              //NOTE: curr_menu.item can not be 0 on key input mode.
1392   1              //if(redraw) {
1393   1              //      //curr_menu->items[0].p();
1394   1              //      MenuDrawCurrImage(0,curr_menu->focus);
1395   1              //}
1396   1      }
1397          //description
1398          //      check input and return the selected item number
1399          //return:
1400          //      0: failed
1401          //      other: selected item number
1402          #ifdef SUPPORT_TOUCH
1403          BYTE MenuCheckItemPosition(int x, int y)
1404          {
1405   1              struct image_item_info_s *image;
1406   1              menu_image_header_t *header = &header_table;
1407   1              BYTE i;
1408   1              BYTE max;
1409   1      
1410   1              dMenuPrintf("\nMenuCheckItemPosition(%d,%d)",x,y);
1411   1      
1412   1              max = curr_menu->item_start + curr_menu->item_total;
1413   1              if(curr_menu->type & MENU_TYPE_NOTE)
1414   1                      max += curr_menu->item_total;
1415   1      
1416   1              //dMenuPrintf("\n??item_start:%bd item_total:%bd",curr_menu->item_start,curr_menu->item_total  );
1417   1              for(i=0; i < max; i++) {
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 24  

1418   2                      if(curr_menu->items[i].osd_type == TYPE_FOSD) continue;         //skip for FOSD
1419   2                      if(curr_menu->items[i].osd_type == TYPE_BG) continue;           //skip for Background
1420   2                      if(curr_menu->items[i].osd_type == TYPE_MBG) continue;          //skip for Moving SOSD Background
1421   2                      if(curr_menu->items[i].osd_type == TYPE_SLIDE) {
1422   3                              if( x >= (curr_menu->items[0].x + curr_menu->items[i].x) 
1423   3                              &&  x <= (curr_menu->items[0].x + curr_menu->items[i+1].x)
1424   3                              &&  y >= (curr_menu->items[0].y + curr_menu->items[i].y) 
1425   3                              &&  y <= (curr_menu->items[0].y + curr_menu->items[i+1].y)) {
1426   4                                      return i+1;
1427   4                              }
1428   3                              i++;
1429   3                              continue;               //need special
1430   3                      }
1431   2                      //
1432   2                      //normal item
1433   2                      //
1434   2                      //dMenuPrintf("\n**%bx %dx%d", i,curr_menu->items[i].x,curr_menu->items[i].y );
1435   2                      if(curr_menu->items[i].x <= x && curr_menu->items[i].y <= y) {
1436   3                              image = curr_menu->items[i].image;
1437   3                              if(image==NULL)
1438   3                                      image = curr_menu->items[i].image1;
1439   3                              if(image==NULL) {
1440   4                                      eMenuPrintf("\nNULL image @%bd",i);
1441   4                                      continue;
1442   4                              }
1443   3      
1444   3                              //MenuPrintf("\n%bd:",i);
1445   3                              MenuPrepareImageHeader(image);
1446   3      
1447   3                              //dMenuPrintf(" %dx%d", header->dx, header->dy );
1448   3                              if( (curr_menu->items[i].x+header->dx) > x && (curr_menu->items[i].y + header->dy) > y) {
1449   4                                      //found selected item.
1450   4                                      //dMenuPrintf("\n%bd ",i,curr_menu->items[i].x,curr_menu->items[i].y, 
1451   4                                      return i;
1452   4                              }
1453   3                      }
1454   2              }       
1455   1              return 0xFF;    //no. failed.
1456   1      }
1457          #endif
1458          
1459          
1460          //description
1461          //      call MenuCheckItemPosition and executed the selected item.
1462          #ifdef SUPPORT_TOUCH
1463          void MenuCheckTouchInput(BYTE TscStatus, int x,int y)
1464          {
1465   1              BYTE ret;
1466   1              BYTE index;
1467   1      
1468   1              ret =  MenuCheckItemPosition(x,y);
1469   1      
1470   1              if(ret == 0xFF) {
1471   2                      //if we lost a focus.....do something.
1472   2                      //TscStatus == TOUCHCLICK || TscStatus == TOUCHDOUBLECLICK
1473   2      
1474   2                      //curr_menu->focus = curr_menu_focus;
1475   2                      if(MenuIsSlideMode()) {
1476   3                              if(curr_menu==&menu_slider_page) {
1477   4                                      if(curr_menu->focus==MENU_SLIDER_LEFT 
1478   4                                      || curr_menu->focus==MENU_SLIDER_RIGHT
1479   4                                      || curr_menu->focus==MENU_SLIDER_BAR_OK
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 25  

1480   4                                      || curr_menu->focus==MENU_SLIDER_BAR_CANCEL
1481   4                                      ) {
1482   5                                              MenuTurnOffCurrImage(curr_menu->focus);
1483   5                                              curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
1484   5                                              MenuDrawSlideNeedleImageXY(0, curr_slide_value, 1/*MENU_SLIDER_BAR_INPUT_RED*/);
1485   5                                      }
1486   4                                      return;
1487   4                              }
1488   3                              else if(curr_menu==&menu_slider3_page) {
1489   4                                      if(curr_menu->focus==SLIDE3_LEFT 
1490   4                                      || curr_menu->focus==SLIDE3_RIGHT
1491   4                                      || curr_menu->focus==SLIDE3_OK
1492   4                                      || curr_menu->focus==SLIDE3_CANCEL
1493   4                                      ) {
1494   5                                              MenuTurnOffCurrImage(curr_menu->focus);
1495   5                                              curr_menu->focus = curr_menu->select;
1496   5      
1497   5                                              if(curr_menu->focus == SLIDE3_1)                index = 0;
1498   5                                              else if(curr_menu->focus == SLIDE3_2)   index = 1;
1499   5                                              else if(curr_menu->focus == SLIDE3_3)   index = 2;
1500   5                                              else                                                                    index = 0;
1501   5      
1502   5                                              MenuDrawSlideNeedleImageXY(index, curr_slide3_value[index], 1/*MENU_SLIDER_BAR_INPUT_RED*/);
1503   5                                      }
1504   4                                      return;
1505   4                              }
1506   3                      }
1507   2                      MenuDrawCurrImage(0, curr_menu->focus);
1508   2      
1509   2                      return;
1510   2              }
1511   1              //dMenuPrintf("\n****MenuCheckItemPosition ret %bx", ret);
1512   1      
1513   1              if(TscStatus==TOUCHPRESS || TscStatus >= TOUCHMOVE) {
1514   2                      //just draw the focused item, do not make an action.
1515   2                      //if it is a left/right on slide, I need a long press
1516   2                      curr_menu_focus = curr_menu->focus;
1517   2      
1518   2                      curr_menu->focus = ret; //only focus, not select
1519   2      
1520   2                      if(MenuIsSlideMode()) {
1521   3                              if(curr_menu==&menu_slider_page) {
1522   4                                      //only for slide bar
1523   4                                      if(ret == MENU_SLIDER_BAR_INPUT_GRAY || ret == MENU_SLIDER_BAR_INPUT_RED) {
1524   5                                              curr_menu->select = curr_menu->focus = ret;      
1525   5                                              MenuUpdateSlideNeedleByPosition(x/*,y*/);
1526   5                                              MenuDrawSlideNeedleImageXY(0,curr_slide_value, 1/*MENU_SLIDER_BAR_INPUT_RED*/);
1527   5                                              MenuDrawSlideCurrValue(0, (short)curr_slide_value);
1528   5                                              //dMenuPrintf("\n MenuCheckTouchInput end4");
1529   5                                              return;
1530   5                                      }
1531   4                                      else {
1532   5                                              MenuDrawCurrImage(1, curr_menu->focus);
1533   5                                              //dMenuPrintf("\n MenuCheckTouchInput end5");
1534   5                                              return; 
1535   5                                      }
1536   4                              }
1537   3                              else if(curr_menu==&menu_slider3_page) {
1538   4                                      if(ret >= curr_menu->item_start && ret < (curr_menu->item_start+3*2)) {
1539   5                                              curr_menu->select = curr_menu->focus = ret;      
1540   5                                              MenuUpdateSlideNeedleByPosition(x/*,y*/);
1541   5                                              curr_menu->items[0].p();
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 26  

1542   5                                              //dMenuPrintf("\n MenuCheckTouchInput end4");
1543   5                                              return;
1544   5                                      }
1545   4                                      else {
1546   5                                              MenuDrawCurrImage(1, curr_menu->focus);
1547   5                                      }
1548   4                              }
1549   3                              return;
1550   3                      }
1551   2      
1552   2                      MenuDrawCurrImage(1, curr_menu->focus);
1553   2                      //dMenuPrintf("\n MenuCheckTouchInput end1");
1554   2                      return;
1555   2              }
1556   1              if(TscStatus==TOUCHCLICK || TscStatus==TOUCHDOUBLECLICK || TscStatus==TOUCHLONGCLICK) {
1557   2                      //make an action.
1558   2      
1559   2                      if(MenuIsSlideMode()) {
1560   3                              if(curr_menu==&menu_slider_page) {
1561   4                                      if(ret == MENU_SLIDER_BAR_INPUT_GRAY || ret == MENU_SLIDER_BAR_INPUT_RED) {
1562   5                                              curr_menu->select = curr_menu->focus = ret;      
1563   5                                              MenuUpdateSlideNeedleByPosition(x/*,y*/);
1564   5                                              MenuDrawSlideNeedleImageXY(0,curr_slide_value, 1/*MENU_SLIDER_BAR_INPUT_RED*/);
1565   5                                              MenuDrawSlideCurrValue(0, (short)curr_slide_value);
1566   5                                              //dMenuPrintf("\n MenuCheckTouchInput end3");
1567   5                                              return;
1568   5                                      }
1569   4                              }
1570   3                              else if(curr_menu==&menu_slider3_page) {
1571   4                                      if(ret >= curr_menu->item_start && ret < (curr_menu->item_start+3*2)) {
1572   5                                              curr_menu->select = curr_menu->focus = ret;      
1573   5                                              MenuUpdateSlideNeedleByPosition(x/*,y*/);
1574   5                                              curr_menu->items[0].p();
1575   5                                              //dMenuPrintf("\n MenuCheckTouchInput end3");
1576   5                                              return;
1577   5                                      }
1578   4                              }
1579   3                      }
1580   2      
1581   2                      //curr_menu_focus = curr_menu->focus;
1582   2                      curr_menu->focus = ret;  //only focus, not select. action will decide select.
1583   2                      //MenuDrawCurrImage(1, curr_menu->focus);
1584   2                      curr_menu->items[ret].p();
1585   2                      //SetTouchStatus(0);  //BK110601
1586   2                      dMenuPrintf("\n MenuCheckTouchInput end2");
1587   2      
1588   2                      return;
1589   2              }
1590   1              eMenuPrintf("\nMenuCheckTouchInput TscStatus:%bx fail",TscStatus);
1591   1              //if(ret) 
1592   1              {
1593   2                      last_touch_x = x;       //save last position for ProgressBar & Radio Tuner
1594   2                      last_touch_y = y;
1595   2                      //execute
1596   2                      curr_menu_focus = curr_menu->focus;
1597   2                      curr_menu->focus = ret;
1598   2                      curr_menu->items[ret].p();
1599   2      
1600   2                      //SetTouchStatus(0);  //BK110601
1601   2                      //dMenuPrintf("\n MenuCheckTouchInput end3");
1602   2              }
1603   1      }
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 27  

1604          #endif
1605          
1606          
1607          //=========================
1608          // NAVI ICON
1609          //=========================
1610          //------------------------
1611          // common icons
1612          
1613          
1614          //move main_page->demo_page
1615          void proc_demo_icon(void)
1616          {
1617   1              push_menu_stack_level();
1618   1              curr_menu = &menu_demo_page;
1619   1              curr_menu->focus = curr_menu->item_start;
1620   1              curr_menu->items[0].p();
1621   1      }
1622          void proc_exit_icon(void)
1623          {
1624   1              //disable all enabled windows
1625   1              //call MenuEnd routine
1626   1              MenuEnd();
1627   1      }
1628          void proc_return_icon(void)
1629          {
1630   1      
1631   1              FOsdWinOffAll();
1632   1      
1633   1              pop_menu_stack_level();
1634   1              curr_menu->items[0].p();  //redraw parent
1635   1      }
1636          
1637          void proc_home_icon(void)
1638          {
1639   1              //call main menu
1640   1              menu_level=1;
1641   1              proc_return_icon();
1642   1      }
1643          
1644          //=========================
1645          // SLIDE DIALOG
1646          //=========================
1647          //-------------------------------------
1648          // slide popup MENU
1649          //-------------------------------------
1650          
1651          void InitSlideCtrl(image_item_info_t *title_img, void *pGet, void *pVary, void *pSet, void *pSave)
1652          {
1653   1              UseSOsdHwBuff = 0;
1654   1              SOsdWinBuffClean(1);
1655   1      
1656   1              slide_title_img = title_img;
1657   1              GetSlideValue = pGet;
1658   1              VarySlideValue = pVary;
1659   1              SetSlideValue = pSet;
1660   1              SaveSlideValue = pSave;
1661   1      
1662   1              last_slide3_value[0] = curr_slide_value = GetSlideValue();
1663   1      }
1664          void InitSlide3Ctrl(image_item_info_t *title_img, void *pGet, void *pVary, void *pSet, void *pSave)
1665          {
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 28  

1666   1              UseSOsdHwBuff = 0;
1667   1              SOsdWinBuffClean(1);
1668   1      
1669   1              slide_title_img = title_img;
1670   1              GetSlide3Value = pGet;
1671   1              VarySlide3Value = pVary;
1672   1              SetSlide3Value = pSet;
1673   1              SaveSlide3Value = pSave;
1674   1      
1675   1              last_slide3_value[0] = curr_slide3_value[0] = GetSlide3Value(0);
1676   1              last_slide3_value[1] = curr_slide3_value[1] = GetSlide3Value(1);
1677   1              last_slide3_value[2] = curr_slide3_value[2] = GetSlide3Value(2);
1678   1      }
1679          
1680          //I need other menu info. I will just update X,Y
1681          //@param:
1682          //      value: 0 ~ 100
1683          //      item:  0:gray 1:focused         //2:gray, 3:red 
1684          //item 0: background image
1685          //item 1: title
1686          //item 2: gray
1687          //item 3: red(focused)
1688          //..
1689          void MenuDrawSlideNeedleImageXY(BYTE index, BYTE value, BYTE item)      
1690          {
1691   1              WORD sx,sy;
1692   1              menu_sitem_info_t *menu_item;
1693   1              struct image_item_info_s *image;
1694   1              menu_image_header_t *header = &header_table;
1695   1              BYTE sosd_win;
1696   1      //      WORD lut_size;
1697   1              BYTE rate = 100;
1698   1              WORD position;
1699   1              WORD barsize;
1700   1      
1701   1              dMenuPrintf("\nMenuDrawSlideNeedleImageXY(index:%d value:%d, %s)",(WORD)index, (WORD)value, item ? "RED":
             -"GRAY");
1702   1      
1703   1              //get window start
1704   1              menu_item = &curr_menu->items[0];
1705   1              //image = menu_item->osd_s.image;
1706   1              sx = menu_item->x;
1707   1              sy = menu_item->y;
1708   1      
1709   1              //get bar end position
1710   1              menu_item = &curr_menu->items[curr_menu->item_start+1+index*2];
1711   1              //image = menu_item->osd_s.image;
1712   1              barsize = menu_item->x;
1713   1              
1714   1              //get niddle start
1715   1              menu_item = &curr_menu->items[curr_menu->item_start+index*2];
1716   1              //image = menu_item->osd_s.image;
1717   1              sx += menu_item->x;
1718   1              sy += menu_item->y;
1719   1      
1720   1              //calculate barsize
1721   1              barsize -= menu_item->x;
1722   1      
1723   1              //get bar position
1724   1              position = (WORD)(((DWORD)value * 100 / rate)*  barsize / 100);
1725   1              //update sx
1726   1              sx += position;
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 29  

1727   1              
1728   1              //which one, gray of red(focused)
1729   1              menu_item = &curr_menu->items[curr_menu->item_start+index*2+item];
1730   1              image = menu_item->image;
1731   1      
1732   1      
1733   1              sosd_win = menu_item->win;
1734   1              //4bpp:0x040, 6bpp:0x100, 8bpp:0x400
1735   1      //      lut_size = 0x004 << (image->rle >> 4);
1736   1      
1737   1              //adjust sx,sy
1738   1              if(menu_item->align == ALIGN_TOPMIDDLE) {
1739   2                      sx -= SLIDER_NIDDLE_HALF_WIDTH;
1740   2              }
1741   1      
1742   1              //prepare header
1743   1              MenuPrepareImageHeader(image);
1744   1      
1745   1              //fill out sosd_buff
1746   1              //if we are using MREL, we need to skip 0x10 size.
1747   1              SpiOsdWinImageLoc( sosd_win, header->image_loc); 
1748   1              SpiOsdWinImageSizeWH( sosd_win, header->dx, header->dy );
1749   1              SpiOsdWinScreen( sosd_win, sx, sy, header->dx, header->dy );
1750   1              if(sosd_win==0) {
1751   2                      SpiOsdWin0ImageOffsetXY( 0, 0 );
1752   2                      SpiOsdWin0Animation( 1, 0, 0, 0);
1753   2              }
1754   1      //      SpiOsdWinPixelAlpha( sosd_win, ON );
1755   1              if(image->alpha != 0xFF)
1756   1                      SpiOsdWinPixelAlpha( sosd_win, ON );
1757   1              else {
1758   2                      if(slide_title_img == &img_slide_trans) {
1759   3                              SpiOsdWinGlobalAlpha( sosd_win, OsdGetTrans());
1760   3                              //only for test....
1761   3                              SpiOsdWinGlobalAlpha( 1, OsdGetTrans());        //bg
1762   3                              SpiOsdWinGlobalAlpha( 2, OsdGetTrans());        //title
1763   3                              SOsdWinBuffWrite2Hw(1,2);
1764   3                      }
1765   2                      else
1766   2                              SpiOsdWinGlobalAlpha( sosd_win, 0 /*EE_Read(EEP_OSD_TRANSPARENCY)*/);
1767   2              }
1768   1              SpiOsdWinPixelWidth(sosd_win, header->bpp);
1769   1              SpiOsdWinLutOffset(sosd_win,menu_item->lut);
1770   1      
1771   1              SpiOsdWinBuffEnable( sosd_win, ON );
1772   1      
1773   1              //write to HW
1774   1              WaitVBlank(1);
1775   1      
1776   1              if(header->rle) {       //need RLE ?
1777   2                      //SpiOsdEnableRLC(ON);
1778   2                      SpiOsdRLC( sosd_win, header->bpp, header->rle);
1779   2              }       
1780   1              else {
1781   2                      //BK110203
1782   2                      //We using RLE only on the background.
1783   2                      if(item == 0)
1784   2                              //SpiOsdEnableRLC(OFF);         //disable RLE
1785   2                              SpiOsdDisableRLC(1);
1786   2              }
1787   1              //update HW
1788   1              SOsdWinBuffWrite2Hw(menu_item->win, menu_item->win);
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 30  

1789   1              //Load Palette
1790   1              SpiOsdLoadLUT(sosd_win, header->lut_type, menu_item->lut, header->lut_size, header->lut_loc);
1791   1      
1792   1              //pixel alpha blending. after load Palette
1793   1              if(image->alpha != 0xFF) {
1794   2                      SpiOsdPixelAlphaAttr(menu_item->lut+image->alpha, 0x7F);
1795   2              }
1796   1      
1797   1      }
1798          
1799          #ifdef SUPPORT_TOUCH
1800          void MenuUpdateSlideNeedleByPosition(int x /*, int y*/)
1801          {
1802   1              WORD sx,sy;
1803   1              menu_sitem_info_t *menu_item;
1804   1              struct image_item_info_s *image;
1805   1              menu_image_header_t *header = &header_table;
1806   1              //BYTE sosd_win;
1807   1      
1808   1              WORD position;
1809   1              WORD barsize;
1810   1              BYTE value;
1811   1              BYTE index;
1812   1              BYTE rate = 100;
1813   1      
1814   1              //index
1815   1              if(curr_menu==&menu_slider_page)
1816   1                      index = 0;
1817   1              else /*if(curr_menu==&menu_slider3_page) */{
1818   2                      if(curr_menu->focus == SLIDE3_1)                index = 0;
1819   2                      else if(curr_menu->focus == SLIDE3_2)   index = 1;
1820   2                      else if(curr_menu->focus == SLIDE3_3)   index = 2;
1821   2                      else                                                                    index = 0; //BUG
1822   2              }
1823   1      
1824   1              //get window start
1825   1              menu_item = &curr_menu->items[0];
1826   1              //image = menu_item->osd_s.image;
1827   1              sx = menu_item->x;
1828   1              sy = menu_item->y;
1829   1              position = x - sx;
1830   1      
1831   1              //get bar end position
1832   1              menu_item = &curr_menu->items[curr_menu->item_start+1+index*2];
1833   1              //image = menu_item->osd_s.image;
1834   1              barsize = menu_item->x;
1835   1              
1836   1              //get niddle start
1837   1              menu_item = &curr_menu->items[curr_menu->item_start+index*2];
1838   1              image = menu_item->image;
1839   1              sx += menu_item->x;
1840   1              sy += menu_item->y;
1841   1              position -= menu_item->x;
1842   1      
1843   1              //calculate barsize
1844   1              barsize -= menu_item->x;
1845   1      
1846   1              //position = x - curr_menu->items[0].x - curr_menu->items[curr_menu->focus].x;          
1847   1      
1848   1              dMenuPrintf("\nx:%d->position:%d barsize:%d", x, position, barsize);
1849   1      
1850   1      
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 31  

1851   1              value = ((DWORD)position * 100 / barsize) /* *(rate / 100) */;
1852   1              dMenuPrintf("\nMenuUpdateSlideNeedleByPosition value:%bd",value);
1853   1      
1854   1              if(curr_menu==&menu_slider_page) {
1855   2                      curr_slide_value = value;
1856   2                      curr_slide_value=SetSlideValue(curr_slide_value);
1857   2      
1858   2      
1859   2      //img_slide_sharp
1860   2      //      InitSlideCtrl(&img_slide_sharp, &ImgAdjGetSharpness,&ImgAdjSetSharpness,&ImgAdjChangeSharpness);
1861   2      
1862   2      
1863   2                      dMenuPrintf("->%bd", curr_slide_value);
1864   2              }
1865   1              else /*if(curr_menu==&menu_slider3_page) */{
1866   2                      curr_slide3_value[index] = value;
1867   2                      curr_slide3_value[index]=SetSlide3Value(index, curr_slide3_value[index]);
1868   2                      dMenuPrintf("->%bd", curr_slide3_value[index]);
1869   2              }
1870   1      }
1871          #endif
1872          
1873          //code struct menu_fitem_info_s menu_slider_text_items[] = {
1874          //      { 0,0,  270,62, 3,1, 0,0                },
1875          //};
1876          //      { 0,0,          265,52,         3,1, 0,0,       0xF0,    0x10,  0xF800  },      //R, or F81F:Magenta
1877          //      { 1,3*3,        265,102,        3,1, 0,0,       0xF0,    0x18,  0x07E0  },      //G
1878          //      { 2,6*3,        265,152,        3,1, 0,0,       0xF0,    0x20,  0x001F  },      //B, or 07FF:Cyan 
1879          
1880          void MenuDrawSlideCurrValue(BYTE index, short value)
1881          {
1882   1              //struct menu_fitem_info_s *text_info; // =  &menu_slider_text_items[0];
1883   1              BYTE n_char;
1884   1              BYTE palette;
1885   1              BYTE *str;
1886   1              BYTE font;
1887   1              BYTE start=0;
1888   1      
1889   1              //code struct menu_fitem_info_s
1890   1      
1891   1              menu_fitem_info_t *text_info = curr_menu->texts;
1892   1              text_info += index;
1893   1      
1894   1              //we need a window & start of OSDRAM
1895   1      
1896   1              n_char = TWitoa(value, menu_str_buff);
1897   1              str = menu_str_buff;
1898   1                                                              
1899   1              //FontOsdWinPuts2();
1900   1              if(IsDigit(*str)==0) {
1901   2                      //first one can be minus
1902   2                      palette = text_info->BPP1Color;
1903   2                      FOsdRamSetAddrAttr(text_info->osdram,text_info->BPP1Color);
1904   2                      //assume page3
1905   2                      WriteTW88(REG307, *str);
1906   2                      str++;
1907   2                      start++;
1908   2              }
1909   1      
1910   1              palette = text_info->BPP3_palette;
1911   1              dMenuPrintf("\nwin:%bx osdram:%d,palette:x%02bx n_char:%02bx",text_info->winno, text_info->osdram, palett
             -e, n_char);
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 32  

1912   1              dMenuPrintf("  str:%s",str);
1913   1              FOsdRamSetAddrAttr(text_info->osdram+start,palette >> 2);
1914   1              while(*str) {
1915   2                      font = *str++;
1916   2                      font -= 0x30;
1917   2                      WriteTW88(REG307, font * 3 + BPP3DIGIT_START);
1918   2              }
1919   1              //adjust FontOSD width.
1920   1              FOsdWinScreenWH(text_info->winno, n_char,1);
1921   1      }
1922          
1923          
1924          
1925          void proc_slider_bg(void)
1926          {
1927   1              menu_sitem_info_t *menu_item;
1928   1              BYTE sosd_win;
1929   1      
1930   1      //      curr_menu->focus = MENU_SLIDER_BAR_INPUT;       //start from slide input
1931   1      //      curr_menu->focus = MENU_SLIDER_BAR_OK; //test
1932   1              //draw current value
1933   1              //draw background image.
1934   1              MenuDrawCurrImage(0,0); //background
1935   1              MenuDrawCurrImage(0,1);   //slide title. Note:MenuDrawCurrImage will takecare the exception case.
1936   1      
1937   1              if(curr_menu->focus == MENU_SLIDER_BAR_INPUT_RED) {
1938   2                      MenuDrawSlideNeedleImageXY(0,curr_slide_value, 1/*MENU_SLIDER_BAR_INPUT_RED*/);
1939   2                      //MenuTurnOffCurrImage(curr_menu->focus-1);     //disable GRAY window. BK110516
1940   2                      menu_item = &curr_menu->items[curr_menu->focus-1];  //gray niddle
1941   2                      sosd_win = menu_item->win;
1942   2                      SpiOsdWinBuffEnable( sosd_win, OFF );
1943   2                      SpiOsdWinHWEnable(sosd_win, OFF);
1944   2              }
1945   1              else {
1946   2                      MenuDrawSlideNeedleImageXY(0,curr_slide_value, 0/*MENU_SLIDER_BAR_INPUT_GRAY*/);
1947   2                      MenuDrawCurrImage(0,curr_menu->focus);
1948   2              }
1949   1      
1950   1              //MenuDrawCurrValue(0, GetSlideValue()); //item#, value
1951   1      
1952   1              //read current value & update bar position.
1953   1      
1954   1              MenuFontOsdItemInit(0, OFF);
1955   1              MenuDrawSlideCurrValue(0, (short)curr_slide_value);
1956   1      }
1957          
1958          void proc_slider3_bg(void)
1959          {
1960   1              BYTE index;
1961   1              BYTE i;
1962   1              menu_sitem_info_t *menu_item;
1963   1              BYTE sosd_win;
1964   1      
1965   1              if(curr_menu->focus == SLIDE3_1)                index = 0;
1966   1              else if(curr_menu->focus == SLIDE3_2)   index = 1;
1967   1              else if(curr_menu->focus == SLIDE3_3)   index = 2;
1968   1              else                                                                    index = 3; //NOTE:No Focused. It can be OK or Cancel
1969   1      
1970   1              UseSOsdHwBuff = 1;
1971   1              SOsdHwBuffClean();
1972   1              SOsdWinBuffClean(0);
1973   1      
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 33  

1974   1              MenuDrawCurrImage(0,0);         //background
1975   1              MenuDrawCurrImage(0,1);         //slide title. Note:MenuDrawCurrImage will takecare the exception case.
1976   1      
1977   1              for(i=0; i < 3; i++) {
1978   2                      if(     index == i) {
1979   3                              MenuDrawSlideNeedleImageXY(i,curr_slide3_value[i], 1/*MENU_SLIDER_BAR_INPUT_RED*/);
1980   3      
1981   3                              //if gray niddle is active, deactivate it.
1982   3                              menu_item = &curr_menu->items[curr_menu->item_start+index*2];  //gray niddle
1983   3                              sosd_win = menu_item->win;
1984   3                              SpiOsdWinBuffEnable( sosd_win, OFF );
1985   3                              SpiOsdWinHWEnable(sosd_win, OFF);
1986   3                      }
1987   2                      else {
1988   3                              MenuDrawSlideNeedleImageXY(i,curr_slide3_value[i], 0);
1989   3                      }
1990   2      
1991   2      //              MenuFontOsdItemInit(i, OFF);
1992   2      //              MenuDrawSlideCurrValue(i, (short)curr_slide3_value[i]);
1993   2              }
1994   1              if(index==3) {
1995   2                      MenuDrawCurrImage(0,curr_menu->focus);
1996   2              }
1997   1      
1998   1              if(UseSOsdHwBuff) {
1999   2                      SOsdHwBuffWrite2Hw();
2000   2                      UseSOsdHwBuff = 0;
2001   2              }
2002   1              //Update FOsd
2003   1              MenuFontOsdItemInitNew(0,2);
2004   1              for(i=0; i < 3; i++) {
2005   2                      MenuDrawSlideCurrValue(i, (short)curr_slide3_value[i]);
2006   2                      //MenuFontOsdItemInit(i, OFF);
2007   2              }
2008   1      #if 0
                      //debug
                      FOsdWinEnable(3 /*winno*/,ON);  //WINn enable
                      FOsdRamSetAddrAttr(0x10,text_info->BPP1Color);
                      for(i=0; i < 64; i++) {
                              WriteTW88(REG307, *str);        
                      }
              #endif
2016   1      }
2017          
2018          void proc_slider_ctrl(void)
2019          {
2020   1              BYTE index;
2021   1              if(curr_menu==&menu_slider_page) {
2022   2                      if(curr_menu->focus == MENU_SLIDER_BAR_INPUT_RED)
2023   2                              MenuDrawSlideNeedleImageXY(0,curr_slide_value, 0/*MENU_SLIDER_BAR_INPUT_GRAY*/);
2024   2              }
2025   1              else {
2026   2                      if(curr_menu->focus == SLIDE3_1)                index = 0;
2027   2                      else if(curr_menu->focus == SLIDE3_2)   index = 1;
2028   2                      else if(curr_menu->focus == SLIDE3_3)   index = 2;
2029   2                      else index = 3;
2030   2                      
2031   2                      if(index != 3)
2032   2                              MenuDrawSlideNeedleImageXY(index,curr_slide3_value[index], 0);
2033   2              }
2034   1      
2035   1              //move to OK
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 34  

2036   1              if(curr_menu==&menu_slider3_page)       curr_menu->focus = SLIDE3_OK;
2037   1              else                                                            curr_menu->focus = MENU_SLIDER_BAR_OK;
2038   1              MenuDrawCurrImage(0,curr_menu->focus);
2039   1      }
2040          void proc_slider_ok(void)
2041          {
2042   1              WaitVBlank(1);                  //??
2043   1              SpiOsdEnable(OFF);              //??
2044   1      
2045   1              if(slide_title_img==&img_slide_clock) {
2046   2                      //VAdcLLPLLSetDivider(,1);
2047   2                      WriteTW88Page(0x00);
2048   2                      WriteTW88(REG003, 0xF8);        //enable ISR.
2049   2                      VAdcSetFilterBandwidth(7, 0);
2050   2              }
2051   1              else if(slide_title_img==&img_slide_phase) {
2052   2                      VAdcSetFilterBandwidth(7, 0);
2053   2              }
2054   1      
2055   1      
2056   1              //update current value to EE
2057   1              if(curr_menu==&menu_slider3_page) {
2058   2                      SaveSlide3Value(0,curr_slide3_value[0]);
2059   2                      SaveSlide3Value(1,curr_slide3_value[1]);
2060   2                      SaveSlide3Value(2,curr_slide3_value[2]);   //BK110222. Bugfix
2061   2              }
2062   1              else
2063   1                      SaveSlideValue(curr_slide_value);
2064   1              
2065   1              SpiOsdEnable(ON);               //??BY110818 Why it need ?
2066   1      
2067   1              //turn off FontOSD
2068   1              FOsdWinOffAll();
2069   1              if(curr_menu==&menu_slider3_page)
2070   1                      //recover 8~15 palette color
2071   1                      FOsdSetDefPaletteColor(0);
2072   1      
2073   1              pop_menu_stack_level();
2074   1      
2075   1              //redraw parent bg 
2076   1              curr_menu->items[0].p();                
2077   1      }
2078          void proc_slider_undo(void)
2079          {
2080   1              //recover last saved value
2081   1              if(curr_menu==&menu_slider3_page) {
2082   2                      SetSlide3Value(0,last_slide3_value[0]);
2083   2                      SetSlide3Value(1,last_slide3_value[1]);
2084   2                      SetSlide3Value(2,last_slide3_value[2]);
2085   2              }
2086   1              else {
2087   2                      dMenuPrintf("\nproc_slider_undo restore to %bd",last_slide3_value[0]);
2088   2                      SetSlideValue(last_slide3_value[0]);
2089   2              }
2090   1      
2091   1              if(slide_title_img==&img_slide_clock) {
2092   2                      WriteTW88Page(0x00);
2093   2                      WriteTW88(REG003, 0xF8);        //enable ISR.
2094   2                      VAdcSetFilterBandwidth(7, 0);
2095   2                      //VAdcLLPLLSetDivider(,1);
2096   2              }
2097   1              else if(slide_title_img==&img_slide_phase) {
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 35  

2098   2                      VAdcSetFilterBandwidth(7, 0);
2099   2              }
2100   1      
2101   1              //turn off FontOSD
2102   1              FOsdWinOffAll();
2103   1              if(curr_menu==&menu_slider3_page)
2104   1                      //recover 8~15 palette color
2105   1                      FOsdSetDefPaletteColor(0);
2106   1      
2107   1              pop_menu_stack_level(); 
2108   1              //redraw parent bg 
2109   1              curr_menu->items[0].p();                
2110   1      }
2111          void proc_slider_left(void)
2112          {
2113   1              dMenuPrintf("\nproc_slider_left curr_slide_value:%bd", curr_slide_value);
2114   1      
2115   1              //
2116   1              //special
2117   1              //
2118   1      #if 0
                      if(     GetSlideValue == GetVAdcClock) {
                              //decrease one
                              //use real value 0..0xFFF(0..4095)
              
                              //curr_slide_value--;
                              //curr_slide_value=SetSlideValue(curr_slide_value);
                              //dMenuPrintf("->%d", curr_slide_value);
                              //redraw
                              //MenuDrawCurrImage(0,0);       //curr_menu->items[0].p();      //draw current value
                              //MenuDrawCurrValue(0, GetSlideValue()); //item#, value
                              //do not change needle...
                              //WORD size===>MenuDrawSlideCurrValue(0, curr_slide_value);
                              return;
                      }
              #endif
2134   1              if(curr_slide_value){
2135   2                      curr_slide_value--;
2136   2                      curr_slide_value=VarySlideValue(curr_slide_value);
2137   2                      dMenuPrintf("->%bd", curr_slide_value);
2138   2                      //redraw
2139   2                      //MenuDrawCurrImage(0,0);       //curr_menu->items[0].p();      //draw current value
2140   2                      //MenuDrawCurrValue(0, GetSlideValue()); //item#, value
2141   2                      MenuDrawSlideNeedleImageXY(0, curr_slide_value, 1/*MENU_SLIDER_BAR_INPUT_RED*/);
2142   2                      MenuDrawSlideCurrValue(0, (short)curr_slide_value);
2143   2              }
2144   1      }
2145          
2146          void proc_slider3_left(void)
2147          {
2148   1              BYTE index;
2149   1      
2150   1              if(curr_menu->focus == SLIDE3_1)                index = 0;
2151   1              else if(curr_menu->focus == SLIDE3_2)   index = 1;
2152   1              else if(curr_menu->focus == SLIDE3_3)   index = 2;
2153   1              else                                                                    index = 0;
2154   1      
2155   1              dMenuPrintf("\nproc_slider_left curr_slide_value:%bd", curr_slide3_value[index]);
2156   1              if(curr_slide3_value[index]){
2157   2                      curr_slide3_value[index]--;
2158   2                      curr_slide3_value[index]=VarySlide3Value(index, curr_slide3_value[index]);
2159   2                      dMenuPrintf("->%bd", curr_slide3_value[index]);
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 36  

2160   2                      //redraw
2161   2                      MenuDrawSlideNeedleImageXY(index, curr_slide3_value[index], 1); //index,value,red(or focused)
2162   2                      MenuDrawSlideCurrValue(index, (short)curr_slide3_value[index]);                 //index,value
2163   2              }
2164   1      }
2165          void proc_slider_left_tsc(void)
2166          {
2167   1              if(curr_menu==&menu_slider3_page) {
2168   2                      //remove pressed icon
2169   2                      MenuTurnOffCurrImage(curr_menu->focus);
2170   2      
2171   2                      curr_menu->focus = curr_menu->select;
2172   2      
2173   2                      proc_slider3_left();
2174   2              }
2175   1              else {
2176   2                      //remove pressed icon
2177   2                      MenuTurnOffCurrImage(curr_menu->focus);
2178   2      
2179   2                      curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
2180   2      
2181   2                      proc_slider_left();
2182   2              }
2183   1      }       
2184          
2185          
2186          void proc_slider_right(void)
2187          {
2188   1              dMenuPrintf("\nproc_slider_right curr_slide_value:%bd", curr_slide_value);
2189   1      
2190   1              //
2191   1              //special
2192   1              //
2193   1      #if 0
                      if(     GetSlideValue == GetVAdcClock) {
                              //increase one
                              //use real value 0..0xFFF(0..4095)
                              return;
                      }
              #endif
2200   1      
2201   1              if(curr_slide_value < 100){
2202   2                      curr_slide_value++;
2203   2                      curr_slide_value=VarySlideValue(curr_slide_value);
2204   2                      dMenuPrintf("->%bd", curr_slide_value);
2205   2                      //redraw
2206   2                      MenuDrawSlideNeedleImageXY(0, curr_slide_value, 1/*MENU_SLIDER_BAR_INPUT_RED*/);
2207   2                      MenuDrawSlideCurrValue(0, (short)curr_slide_value);
2208   2              }
2209   1      }
2210          void proc_slider3_right(void)
2211          {
2212   1              BYTE index;
2213   1      
2214   1              if(curr_menu->focus == SLIDE3_1)                index = 0;
2215   1              else if(curr_menu->focus == SLIDE3_2)   index = 1;
2216   1              else if(curr_menu->focus == SLIDE3_3)   index = 2;
2217   1              else                                                                    return; //index = 0;
2218   1      
2219   1              if(curr_slide3_value[index] < 100){
2220   2                      curr_slide3_value[index]++;
2221   2                      curr_slide3_value[index]=VarySlide3Value(index, curr_slide3_value[index]);
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 37  

2222   2                      dMenuPrintf("->%bd", curr_slide3_value[index]);
2223   2                      //redraw
2224   2                      MenuDrawSlideNeedleImageXY(index, curr_slide3_value[index], 1/*MENU_SLIDER_BAR_INPUT_RED*/);
2225   2                      MenuDrawSlideCurrValue(index, (short)curr_slide3_value[index]);
2226   2              }
2227   1      }
2228          void proc_slider_right_tsc(void)
2229          {
2230   1              if(curr_menu==&menu_slider3_page) {
2231   2                      //remove pressed icon
2232   2                      MenuTurnOffCurrImage(curr_menu->focus);
2233   2      
2234   2                      curr_menu->focus = curr_menu->select;
2235   2      
2236   2                      proc_slider3_right();
2237   2              }
2238   1              else {
2239   2                      //remove pressed icon
2240   2                      MenuTurnOffCurrImage(curr_menu->focus);
2241   2      
2242   2                      curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
2243   2      
2244   2                      proc_slider_right();
2245   2              }
2246   1      }
2247          
2248          #ifdef UNCALLED_SEGMENT_CODE
              void proc_slider_digit(void)
              {
              //      proc_draw_digit(curr_slide_value);
                      struct menu_sitem_info_s *item_info;
                      BYTE n_char;
              
                      n_char = TWitoa((BYTE)curr_slide_value, menu_str_buff);
              
                      item_info = &curr_menu->items[MENU_SLIDER_BAR_DIGIT];
              
                      FontOsdWinPuts2(item_info, menu_str_buff);      
              }
              #endif
2262          
2263          //need a continus touch input
2264          //return
2265          //      0:No
2266          //      1:Slide
2267          //      3: Slider3
2268          #ifdef SUPPORT_TOUCH
2269          BYTE MenuIsSlideMode(void)
2270          {
2271   1              if(curr_menu==&menu_slider3_page) {
2272   2                      return 3;
2273   2              }
2274   1              if(curr_menu==&menu_slider_page) {
2275   2                      return 1;
2276   2              }
2277   1      
2278   1              return 0;
2279   1      }
2280          #endif
2281          
2282          //=========================
2283          // POSITION DIALOG
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 38  

2284          //=========================
2285          //----------------------
2286          //manu->input->setting with RGB/HDMI->display->position
2287          //----------------------
2288          //-------------------------------------
2289          // position popup MENU
2290          //-------------------------------------
2291          
2292          void proc_position_bg(void)
2293          {
2294   1      #if     1 //BK110512
2295   1              proc_menu_bg();
2296   1      #else
                      //draw current value
                      //draw background image.
                      MenuDrawCurrImage(0,0);                                 //draw background image.
                      if(curr_menu->focus != MENU_POSITION_INPUT_RED)         //2
                              MenuDrawCurrImage(0,MENU_POSITION_INPUT_GRAY);   //1
                      MenuDrawCurrImage(0,curr_menu->focus);  //draw focused item
              #endif
2304   1              //read current value & update bar position.
2305   1              MenuFontOsdItemInit(0, OFF);
2306   1              MenuFontOsdItemInit(1, OFF);
2307   1              proc_position_H_digit();
2308   1              proc_position_V_digit();
2309   1      }
2310          void proc_position_box(void)
2311          {
2312   1              //move focus to OK
2313   1              curr_menu->select = curr_menu->focus = MENU_POSITION_OK;
2314   1              //redraw OK with focused.       
2315   1              MenuDrawCurrImage(0,0);
2316   1              MenuDrawCurrImage(0,MENU_POSITION_INPUT_GRAY);   //1
2317   1              MenuDrawCurrImage(0,curr_menu->focus);  
2318   1      }
2319          void proc_position_ok(void) 
2320          {
2321   1              //read base & update eeprom to 50.
2322   1              //save to EEPROM
2323   1      #if defined(SUPPORT_PC)
2324   1              ChangeRGBPosH();
2325   1              ChangeRGBPosV();
2326   1      #endif
2327   1              //GetRGBPosBase();
2328   1              //PcEepromUseHwValue(OFF,OFF,ON);
2329   1      
2330   1              //turn off FontOSD
2331   1              FOsdWinOffAll();
2332   1      
2333   1              pop_menu_stack_level();
2334   1              //redraw parent bg 
2335   1              curr_menu->items[0].p();                
2336   1      }
2337          void proc_position_undo(void) 
2338          {
2339   1      //      BYTE value;
2340   1              //restore previous value
2341   1              //readback value freom EEPROM and do not update base.
2342   1      //      PcEepromSetEffect(OFF,OFF,ON);
2343   1      #ifdef SUPPORT_PC
2344   1              PCRestoreH();
2345   1              PCRestoreV();
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 39  

2346   1      #endif
2347   1              //turn off FontOSD
2348   1              FOsdWinOffAll();
2349   1      
2350   1              pop_menu_stack_level();
2351   1              //redraw parent bg 
2352   1              curr_menu->items[0].p();                
2353   1      }
2354          
2355          //BKFYI: If user type ENTER(or select BOX), curr_menu->select will be MENU_POSITION_OK.
2356          // If user press the left/right on the OK/CANCE, 
2357          // still curr_menu->select is not a MENU_POSITION_INPUT_RED. So it should be work.
2358          // Currently, we do not support to move back from OK/CANCEL to the position box.
2359          void proc_position_tsc(BYTE key)
2360          {
2361   1              MenuTurnOffCurrImage(curr_menu->focus);
2362   1              curr_menu->focus = MENU_POSITION_INPUT_RED;
2363   1              if(curr_menu->select != MENU_POSITION_INPUT_RED) {
2364   2                      MenuTurnOffCurrImage(MENU_POSITION_INPUT_GRAY);
2365   2                      curr_menu->select = MENU_POSITION_INPUT_RED;                    
2366   2                      MenuDrawCurrImage(0,curr_menu->focus);
2367   2              }
2368   1              MenuKeyInput_position_page(key);
2369   1      }
2370          
2371          void proc_position_left_tsc(void)
2372          {
2373   1              proc_position_tsc(NAVI_KEY_LEFT);
2374   1      }
2375          void proc_position_right_tsc(void)
2376          {
2377   1              proc_position_tsc(NAVI_KEY_RIGHT);
2378   1      }
2379          void proc_position_up_tsc(void)
2380          {
2381   1              proc_position_tsc(NAVI_KEY_UP);
2382   1      }
2383          void proc_position_down_tsc(void)
2384          {
2385   1              proc_position_tsc(NAVI_KEY_DOWN);
2386   1      }
2387          
2388          void proc_position_H_digit(void) 
2389          {
2390   1              BYTE value;
2391   1      #ifdef SUPPORT_PC
2392   1              value = GetRGBPosH();
2393   1      #endif
2394   1              dMenuPrintf("\nproc_position_H_digit %bd",value);
2395   1              MenuDrawSlideCurrValue(0, (short)value);        
2396   1      //test
2397   1      //      short value;
2398   1      //      value=-99;
2399   1      //      dMenuPrintf("\nproc_position_H_digit %d",value);
2400   1      //      MenuDrawSlideCurrValue(0, value);       
2401   1      }
2402          void proc_position_V_digit(void) 
2403          {
2404   1      #ifdef SUPPORT_PC
2405   1              BYTE value;
2406   1              value = GetRGBPosV();
2407   1              dMenuPrintf("\nproc_position_V_digit %bd",value);
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 40  

2408   1              MenuDrawSlideCurrValue(1, (short)value);
2409   1      #endif
2410   1      //      short value;
2411   1      //      value = -2;
2412   1      //      dMenuPrintf("\nproc_position_V_digit %d",value);
2413   1      //      MenuDrawSlideCurrValue(1, value);
2414   1      }
2415          
2416          
2417          //=========================
2418          // DIALOG 
2419          //=========================
2420          
2421          //----------------------
2422          // main->input->adc->display->autoadj MENU
2423          //----------------------
2424          //-------------------------------------
2425          // autoadj popup MENU
2426          //-------------------------------------
2427          void proc_autoadj_bg(void) 
2428          {
2429   1      #if     1 //BK110512
2430   1              proc_menu_bg();
2431   1      #else
                      MenuDrawCurrImage(0,0);                                 //draw background image.
                      MenuDrawCurrImage(0,curr_menu->focus);  //draw focused item
              #endif
2435   1      }
2436          void proc_autoadj_ok(void) 
2437          {
2438   1      #ifdef SUPPORT_PC
2439   1              //reset eeprom for curr mode
2440   1              PCResetCurrEEPROMMode();  //I need a mode
2441   1      #endif
2442   1              //draw wait icon
2443   1              curr_menu->focus = MENU_AUTOADJ_WAIT;
2444   1              curr_menu->items[MENU_AUTOADJ_WAIT].p();
2445   1      
2446   1      #ifdef SUPPORT_PC
2447   1              //autoadjust
2448   1              CheckAndSetPC();
2449   1      #endif
2450   1      
2451   1              //remove wait icon
2452   1              WaitVBlank(1);
2453   1              SpiOsdWinHWEnable(SOSD_WIN0, OFF);
2454   1      
2455   1              //return to parent
2456   1              pop_menu_stack_level();
2457   1              //redraw parent bg 
2458   1              curr_menu->items[0].p();                
2459   1      }
2460          void proc_autoadj_cancel(void) 
2461          {
2462   1              pop_menu_stack_level();
2463   1              //redraw parent bg 
2464   1              curr_menu->items[0].p();                
2465   1      }
2466          
2467          void proc_autocolor_bg(void) 
2468          {
2469   1              proc_menu_bg();
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 41  

2470   1      }
2471          void proc_autocolor_ok(void) 
2472          {
2473   1              //draw wait icon
2474   1              curr_menu->focus = MENU_AUTOADJ_WAIT;
2475   1              curr_menu->items[MENU_AUTOADJ_WAIT].p();
2476   1      
2477   1      #if defined(SUPPORT_PC)
2478   1              //aoutocolor
2479   1              AutoTuneColor();
2480   1      #endif
2481   1      
2482   1              //remove wait icon
2483   1              WaitVBlank(1);
2484   1              SpiOsdWinHWEnable(SOSD_WIN0, OFF);
2485   1      
2486   1      
2487   1              //return to parent
2488   1              pop_menu_stack_level();
2489   1              //redraw parent bg 
2490   1              curr_menu->items[0].p();                
2491   1      }
2492          void proc_autocolor_cancel(void) 
2493          {
2494   1              pop_menu_stack_level();
2495   1              //redraw parent bg 
2496   1              curr_menu->items[0].p();                
2497   1      }
2498          
2499          //----------------------
2500          // main->system->restore MENU
2501          //----------------------
2502          //-------------------------------------
2503          // restore popup MENU
2504          //-------------------------------------
2505          void proc_restore_bg(void) 
2506          {
2507   1              proc_menu_bg();
2508   1      }
2509          //restore all default value
2510          void proc_restore_ok(void) 
2511          {
2512   1              BYTE value;
2513   1      
2514   1              //read InputMain
2515   1              MenuInputMain = GetInputMain();
2516   1      
2517   1              //MenuPrintf("\nEE initialize........");
2518   1              ClearBasicEE();
2519   1              //SaveDebugLevelEE(0);
2520   1              //SaveFWRevEE( FWVER );
2521   1              //EE_PrintCurrInfo();
2522   1      
2523   1              //keep video source.
2524   1              SaveInputEE( MenuInputMain );
2525   1      
2526   1              //change HW.
2527   1              //------------------------
2528   1              // setup eeprom effect
2529   1              //------------------------
2530   1              SetImage(MenuInputMain);
2531   1      
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 42  

2532   1              SetAspectHW(GetAspectModeEE());
2533   1              value = EE_Read(EEP_FLIP);
2534   1              if(value) {
2535   2                      WriteTW88Page(PAGE2_SCALER);
2536   2                  WriteTW88(REG201, ReadTW88(REG201) | 0x80);
2537   2              }
2538   1              OsdSetTime(EE_Read(EEP_OSD_TIMEOUT));
2539   1              OsdSetTransRate(EE_Read(EEP_OSD_TRANSPARENCY));
2540   1              BackLightSetRate(EE_Read(EEP_BACKLIGHT));
2541   1      #ifdef SUPPORT_TOUCH
2542   1              ReadCalibDataFromEE();
2543   1      #endif
2544   1      
2545   1              pop_menu_stack_level();
2546   1              //redraw parent bg 
2547   1              curr_menu->items[0].p();                
2548   1      }
2549          void proc_restore_undo(void) 
2550          {
2551   1              pop_menu_stack_level();
2552   1              //redraw parent bg 
2553   1              curr_menu->items[0].p();                
2554   1      }
2555          
2556          //----------------------
2557          // main->system->sys_info MENU
2558          //----------------------
2559          //-------------------------------------
2560          // info popup MENU
2561          //-------------------------------------
2562          
2563          void proc_info_bg(void) 
2564          {
2565   1      #if     1 //BK110512
2566   1              proc_menu_bg();
2567   1      #else
                      MenuDrawCurrImage(0,0);                                 //draw background image.
                      MenuDrawCurrImage(0,curr_menu->focus);  //draw focused item
                      //display current info
              #endif
2572   1      
2573   1              //GetDviModeEE();
2574   1      
2575   1      }
2576          void proc_info_ok(void) 
2577          {
2578   1              //remove FOsd
2579   1              FOsdWinOffAll();
2580   1      
2581   1              pop_menu_stack_level();
2582   1              //redraw parent bg with focus 
2583   1              curr_menu->items[0].p();                
2584   1      }
2585          
2586          //----------------------
2587          // main->system->more->flip MENU
2588          //----------------------
2589          //-------------------------------------
2590          // flip popup MENU
2591          //-------------------------------------
2592          
2593          void proc_flip_bg(void) 
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 43  

2594          {
2595   1              proc_menu_bg();
2596   1      }
2597          void proc_flip_ok(void) 
2598          {
2599   1              BYTE value;
2600   1              //flip
2601   1              WriteTW88Page(PAGE2_SCALER);
2602   1              value=ReadTW88(REG201);
2603   1              if(value & 0x80) {
2604   2                      WriteTW88(REG201, value & 0x7F);
2605   2                      EE_Write(EEP_FLIP, 0);
2606   2              }
2607   1              else {
2608   2                  WriteTW88(REG201, value | 0x80);
2609   2                      EE_Write(EEP_FLIP, 1);
2610   2              }
2611   1              pop_menu_stack_level();
2612   1              //redraw parent bg 
2613   1              curr_menu->items[0].p();                
2614   1      }
2615          void proc_flip_undo(void) 
2616          {
2617   1              pop_menu_stack_level();
2618   1              //redraw parent bg 
2619   1              curr_menu->items[0].p();                
2620   1      }
2621          
2622          
2623          void proc_disp_resolution_bg(void)
2624          {
2625   1              proc_menu_bg();
2626   1      }
2627          void proc_disp_resolution_ok(void)
2628          {
2629   1              //remove FOsd
2630   1              FOsdWinOffAll();
2631   1      
2632   1              pop_menu_stack_level();
2633   1              //redraw parent bg with focus 
2634   1              curr_menu->items[0].p();                
2635   1      }
2636          
2637          
2638          //=========================
2639          // NOTE DIALOG
2640          //=========================
2641          
2642          void proc_dvi_mode_bg(void)      
2643          {
2644   1              proc_menu_bg();
2645   1      }
2646          void proc_dvi_mode_24bit(void)   
2647          {
2648   1              curr_menu->select = MENU_DVI_MODE_24BIT;
2649   1              curr_menu->focus = MENU_DVI_MODE_OK;    
2650   1              curr_menu->items[0].p();
2651   1      }
2652          void proc_dvi_mode_16bit(void)   
2653          {
2654   1              curr_menu->select = MENU_DVI_MODE_16BIT;
2655   1              curr_menu->focus = MENU_DVI_MODE_OK;    
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 44  

2656   1              curr_menu->items[0].p();
2657   1      }
2658          void proc_dvi_mode_ok(void)      
2659          {
2660   1              SaveDviModeEE(curr_menu->select==MENU_DVI_MODE_24BIT ? 0 : 1);
2661   1              proc_return_icon();
2662   1      }
2663          void proc_dvi_mode_cancel(void)  
2664          {
2665   1              proc_return_icon();
2666   1      }
2667          
2668          void proc_hdmi_mode_bg(void)     
2669          {
2670   1              proc_menu_bg();
2671   1      }
2672          void proc_hdmi_mode_pc(void)     
2673          {       
2674   1              curr_menu->select = MENU_HDMI_MODE_PC;
2675   1              curr_menu->focus = MENU_DVI_MODE_OK;    
2676   1              SetImage(INPUT_HDMIPC);
2677   1              curr_menu->items[0].p();
2678   1      }
2679          void proc_hdmi_mode_tv(void)     
2680          {
2681   1              curr_menu->select = MENU_HDMI_MODE_TV;
2682   1              curr_menu->focus = MENU_DVI_MODE_OK;    
2683   1              SetImage(INPUT_HDMITV);
2684   1              curr_menu->items[0].p();
2685   1      }
2686          void proc_hdmi_mode_ok(void)     
2687          {
2688   1              BYTE hdmi_mode;
2689   1              
2690   1              hdmi_mode = curr_menu->select==MENU_HDMI_MODE_PC ? 0 : 1;
2691   1              if(GetHdmiModeEE() != hdmi_mode)
2692   1                      SaveHdmiModeEE(hdmi_mode);
2693   1              if(cancel_recover_value != curr_menu->select) {
2694   2                      if(curr_menu->select == MENU_HDMI_MODE_PC) 
2695   2                              MenuInputMain = INPUT_HDMIPC;
2696   2                      else
2697   2                              MenuInputMain = INPUT_HDMITV;
2698   2                      SetInputMain(MenuInputMain);
2699   2                      SaveInputEE(MenuInputMain);
2700   2              }
2701   1              proc_return_icon();
2702   1      }
2703          void proc_hdmi_mode_cancel(void)         
2704          {
2705   1              //recover
2706   1              curr_menu->items[cancel_recover_value].p();
2707   1      
2708   1              proc_return_icon();
2709   1      }
2710          
2711          //----------------------
2712          // main->system->more->aspect MENU
2713          //----------------------
2714          //-------------------------------------
2715          // aspect popup MENU
2716          //-------------------------------------
2717          
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 45  

2718          void proc_aspect_bg(void) 
2719          {
2720   1              proc_menu_bg();
2721   1      }
2722          void proc_aspect_normal(void) 
2723          {
2724   1              curr_menu->focus = MENU_ASPECT_OK;
2725   1              curr_menu->select = MENU_ASPECT_NORMAL;
2726   1              //MenuDrawCurrImage(0,0);
2727   1              //proc_menu_bg();
2728   1              MenuDrawCurrImage(0,curr_menu->focus);
2729   1              MenuDrawCurrImage(0,curr_menu->select+curr_menu->item_total);   //select
2730   1      
2731   1              SetAspectHW(curr_menu->select - curr_menu->item_start);
2732   1      }
2733          void proc_aspect_zoom(void) 
2734          {
2735   1              curr_menu->focus = MENU_ASPECT_OK;
2736   1              curr_menu->select = MENU_ASPECT_ZOOM;
2737   1              //MenuDrawCurrImage(0,0);
2738   1              //proc_menu_bg();
2739   1              MenuDrawCurrImage(0,curr_menu->focus);
2740   1              MenuDrawCurrImage(0,curr_menu->select+curr_menu->item_total);   //select
2741   1      
2742   1              SetAspectHW(curr_menu->select - curr_menu->item_start);
2743   1      }
2744          void proc_aspect_full(void) 
2745          {
2746   1              curr_menu->focus = MENU_ASPECT_OK;
2747   1              curr_menu->select = MENU_ASPECT_FULL;
2748   1              //MenuDrawCurrImage(0,0);
2749   1              //proc_menu_bg();
2750   1              MenuDrawCurrImage(0,curr_menu->focus);
2751   1              MenuDrawCurrImage(0,curr_menu->select+curr_menu->item_total);   //select
2752   1              //BKTODO110516. Change HW
2753   1              SetAspectHW(curr_menu->select - curr_menu->item_start);
2754   1      }
2755          void proc_aspect_pano(void) 
2756          {
2757   1              curr_menu->focus = MENU_ASPECT_OK;
2758   1              curr_menu->select = MENU_ASPECT_PANO;
2759   1              //MenuDrawCurrImage(0,0);
2760   1              //proc_menu_bg();
2761   1              MenuDrawCurrImage(0,curr_menu->focus);
2762   1              MenuDrawCurrImage(0,curr_menu->select+curr_menu->item_total);   //select
2763   1              //BKTODO110516. Change HW
2764   1              SetAspectHW(curr_menu->select - curr_menu->item_start);
2765   1      }
2766          void proc_aspect_ok(void) 
2767          {
2768   1              if(cancel_recover_value != curr_menu->select) {
2769   2                      //save to EE.
2770   2                      SaveAspectModeEE(curr_menu->select-curr_menu->item_start);
2771   2      
2772   2                      MenuInputMain = GetInputMain();
2773   2      
2774   2                      //change input
2775   2                      SetInputMain(0xff);     //InputMain = 0xff;                     // start with saved input
2776   2                      SpiOsdEnable(OFF);
2777   2      
2778   2                      switch(MenuInputMain) {
2779   3                      case INPUT_CVBS:        ChangeCVBS();           break;
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 46  

2780   3                      case INPUT_SVIDEO:      ChangeSVIDEO();         break;
2781   3      #ifdef SUPPORT_COMPONENT
2782   3                      case INPUT_COMP:        ChangeCOMPONENT();      break;
2783   3      #endif
2784   3      #ifdef SUPPORT_PC
2785   3                      case INPUT_PC:          ChangePC();                     break;
2786   3      #endif
2787   3      #ifdef SUPPORT_DVI
                              case INPUT_DVI:         ChangeDVI();            break;
              #endif
2790   3                      case INPUT_HDMIPC:      
2791   3                      case INPUT_HDMITV:      ChangeHDMI();           break;
2792   3      #ifdef SUPPORT_BT656
2793   3                      case INPUT_BT656:       ChangeBT656();          break;
2794   3      #endif
2795   3                      }               
2796   2                      //??SpiOsdSetDeValue();
2797   2                      //??FOsdSetDeValue();
2798   2              
2799   2                      SpiOsdEnable(ON);
2800   2              }
2801   1              pop_menu_stack_level();
2802   1              //redraw parent bg 
2803   1              curr_menu->items[0].p();                
2804   1      }
2805          void proc_aspect_cancel(void) 
2806          {
2807   1              //recover
2808   1              curr_menu->items[cancel_recover_value].p();
2809   1      
2810   1              pop_menu_stack_level();
2811   1              //redraw parent bg 
2812   1              curr_menu->items[0].p();                
2813   1      }
2814          
2815          //=========================
2816          // LIST MENU
2817          //=========================
2818          void proc_menu_list_return(void)
2819          {
2820   1              if(curr_menu==&menu_slider_page || curr_menu==&menu_slider3_page) {
2821   2                      proc_slider_undo();
2822   2              }
2823   1              else if(curr_menu==&menu_position_page) {
2824   2                      proc_position_undo();
2825   2              }
2826   1              else if(curr_menu==&menu_autoadj_page) {
2827   2                      proc_autoadj_cancel();
2828   2              }
2829   1              else if(curr_menu==&menu_autocolor_page) {
2830   2                      proc_autocolor_cancel();
2831   2              }
2832   1              else if(curr_menu==&menu_sys_info_page) {
2833   2                      proc_info_ok();
2834   2              }
2835   1              else if(curr_menu==&menu_disp_resolution_page) {
2836   2                      proc_disp_resolution_ok();
2837   2              }
2838   1              else {
2839   2                      proc_return_icon();
2840   2              }
2841   1      }
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 47  

2842          
2843          
2844          //=====================================
2845          // YUV List PAGE
2846          //
2847          // path:main->input->set
2848          //=====================================
2849          
2850          //----------------------
2851          // internal decoder image Select MENU
2852          //----------------------
2853          
2854          void proc_yuv_list_bg(void)
2855          {       
2856   1              proc_menu_bg();
2857   1      }
2858          
2859          void proc_yuv_list_bright(void)
2860          {
2861   1              push_menu_stack_level();
2862   1              
2863   1              curr_menu = &menu_slider_page;
2864   1              curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
2865   1              curr_menu->select = MENU_SLIDER_BAR_INPUT_RED;
2866   1              InitSlideCtrl(&img_slide_bright, 
2867   1                      &ImgAdjGetBrightnessY,
2868   1                      &ImgAdjSetBrightnessY,
2869   1                      &ImgAdjSetBrightnessY,
2870   1                      &ImgAdjChangeBrightnessY);
2871   1      
2872   1              curr_menu->items[0].p();
2873   1      }
2874          void proc_yuv_list_contrast(void)
2875          {
2876   1              push_menu_stack_level();
2877   1                      
2878   1              curr_menu = &menu_slider_page;
2879   1              curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
2880   1              curr_menu->select = MENU_SLIDER_BAR_INPUT_RED;
2881   1              InitSlideCtrl(&img_slide_contrast, 
2882   1                      &ImgAdjGetContrastY,
2883   1                      &ImgAdjSetContrastY,
2884   1                      &ImgAdjSetContrastY,
2885   1                      &ImgAdjChangeContrastY);
2886   1      
2887   1              curr_menu->items[0].p();
2888   1      }       
2889          void proc_yuv_list_hue(void)            
2890          {
2891   1              push_menu_stack_level();
2892   1              
2893   1              curr_menu = &menu_slider_page;
2894   1              curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
2895   1              InitSlideCtrl(&img_slide_hue, 
2896   1                      &ImgAdjGetHUE,
2897   1                      &ImgAdjVaryHUE,
2898   1                      &ImgAdjSetHUE,
2899   1                      &ImgAdjChangeHUE);
2900   1              curr_menu->items[0].p();
2901   1      }
2902          
2903          void proc_yuv_list_saturate(void)       
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 48  

2904          {
2905   1              push_menu_stack_level();
2906   1              
2907   1              curr_menu = &menu_slider_page;
2908   1              curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
2909   1              InitSlideCtrl(&img_slide_saturate, 
2910   1                      &ImgAdjGetSaturation,
2911   1                      &ImgAdjSetSaturation,
2912   1                      &ImgAdjSetSaturation,
2913   1                      &ImgAdjChangeSaturation);
2914   1      
2915   1              curr_menu->items[0].p();
2916   1      }
2917          void proc_yuv_list_sharp(void)
2918          {
2919   1              push_menu_stack_level();
2920   1              
2921   1              curr_menu = &menu_slider_page;
2922   1              curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
2923   1              InitSlideCtrl(&img_slide_sharp, 
2924   1                      &ImgAdjGetSharpness,
2925   1                      &ImgAdjSetSharpness,
2926   1                      &ImgAdjSetSharpness,
2927   1                      &ImgAdjChangeSharpness);
2928   1      
2929   1              curr_menu->items[0].p();
2930   1      }
2931          
2932          //=====================================
2933          // RGB List PAGE
2934          //
2935          // path:main->input->set
2936          //=====================================
2937          
2938          void proc_rgb_list_bg(void) 
2939          {
2940   1              proc_menu_bg();
2941   1      }
2942          
2943          void proc_rgb_list_bright(void) 
2944          {
2945   1              push_menu_stack_level();
2946   1      
2947   1              curr_menu = &menu_slider_page;
2948   1              curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
2949   1              curr_menu->select = MENU_SLIDER_BAR_INPUT_RED;
2950   1              InitSlideCtrl(&img_slide_bright,
2951   1                      &ImgAdjGetBrightnessY,
2952   1                      &ImgAdjSetBrightnessY,
2953   1                      &ImgAdjSetBrightnessY,
2954   1                      &ImgAdjChangeBrightnessY);
2955   1              curr_menu->items[0].p();
2956   1      }
2957          void proc_rgb_list_contrast(void) 
2958          {
2959   1              push_menu_stack_level();
2960   1              
2961   1              curr_menu = &menu_slider_page;
2962   1              curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
2963   1              curr_menu->select = MENU_SLIDER_BAR_INPUT_RED;
2964   1              InitSlideCtrl(&img_slide_contrast, 
2965   1                      &ImgAdjGetContrastY,
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 49  

2966   1                      &ImgAdjSetContrastY,
2967   1                      &ImgAdjSetContrastY,
2968   1                      &ImgAdjChangeContrastY);
2969   1              curr_menu->items[0].p();
2970   1      }
2971          void proc_rgb_list_color(void)
2972          {
2973   1              push_menu_stack_level();
2974   1      
2975   1              curr_menu = &menu_slider3_page;
2976   1              curr_menu->select = curr_menu->focus = SLIDE3_1;
2977   1              InitSlide3Ctrl(&img_slide_rgb, 
2978   1                      &ImgAdjGetContrastRGB,
2979   1                      &ImgAdjSetContrastRGB,
2980   1                      &ImgAdjSetContrastRGB,
2981   1                      &ImgAdjChangeContrastRGB);
2982   1              curr_menu->items[0].p();
2983   1      }
2984          
2985          //=====================================
2986          // AnalogPC List PAGE
2987          //
2988          // path:main->input->set
2989          //=====================================
2990          //----------------------
2991          // main->input->image(ADC) MENU
2992          //----------------------
2993          
2994          //----------------------
2995          // ADC image Select MENU
2996          //----------------------
2997          
2998          void proc_apc_list_bg(void) 
2999          {
3000   1              proc_menu_bg();
3001   1      }
3002          
3003          void proc_apc_list_bright(void) 
3004          {
3005   1              push_menu_stack_level();
3006   1                      
3007   1              curr_menu = &menu_slider_page;
3008   1              curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
3009   1              InitSlideCtrl(&img_slide_bright, 
3010   1                      &ImgAdjGetBrightnessY,
3011   1                      &ImgAdjSetBrightnessY,
3012   1                      &ImgAdjSetBrightnessY,
3013   1                      &ImgAdjChangeBrightnessY);
3014   1      
3015   1              curr_menu->items[0].p();
3016   1      }
3017          void proc_apc_list_contrast(void) 
3018          {
3019   1              push_menu_stack_level();
3020   1              
3021   1              curr_menu = &menu_slider_page;
3022   1              curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
3023   1              InitSlideCtrl(&img_slide_contrast, 
3024   1                      &ImgAdjGetContrastY,
3025   1                      &ImgAdjSetContrastY,
3026   1                      &ImgAdjSetContrastY,
3027   1                      &ImgAdjChangeContrastY);
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 50  

3028   1      
3029   1              curr_menu->items[0].p();
3030   1      }
3031          
3032          void proc_apc_list_color(void) 
3033          {
3034   1              push_menu_stack_level();
3035   1      
3036   1              curr_menu = &menu_slider3_page;
3037   1              curr_menu->select = curr_menu->focus = SLIDE3_1;
3038   1              InitSlide3Ctrl(&img_slide_rgb, 
3039   1                      &ImgAdjGetContrastRGB,
3040   1                      &ImgAdjSetContrastRGB,
3041   1                      &ImgAdjSetContrastRGB,
3042   1                      &ImgAdjChangeContrastRGB);
3043   1      
3044   1              curr_menu->items[0].p();
3045   1      }
3046          
3047          void proc_apc_list_position(void) 
3048          {
3049   1              push_menu_stack_level();
3050   1              
3051   1              curr_menu = &menu_position_page;
3052   1              curr_menu->select = curr_menu->focus = MENU_POSITION_INPUT_RED;
3053   1      
3054   1              curr_menu->items[0].p();
3055   1      }               
3056          void proc_apc_list_phase(void) 
3057          {
3058   1              push_menu_stack_level();
3059   1              VAdcSetFilterBandwidth(0, 0);
3060   1              
3061   1              curr_menu = &menu_slider_page;
3062   1              curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
3063   1      #if defined(SUPPORT_PC)
3064   1              InitSlideCtrl(&img_slide_phase,
3065   1                      &GetVAdcPhase,
3066   1                      &VaryVAdcPhase,
3067   1                      &SetVAdcPhase,
3068   1                      &ChangeVAdcPhase);
3069   1      #endif
3070   1              curr_menu->items[0].p();
3071   1      }
3072                          
3073          void proc_apc_list_clock(void) 
3074          {
3075   1              push_menu_stack_level();
3076   1              
3077   1              WriteTW88Page(0x00);
3078   1              WriteTW88(REG003, 0xFE);        //disable ISR.
3079   1              VAdcSetFilterBandwidth(0, 0);
3080   1      
3081   1      
3082   1              curr_menu = &menu_slider_page;
3083   1              curr_menu->select = curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
3084   1      #if defined(SUPPORT_PC) //defined(SUPPORT_DVI) || 
3085   1              InitSlideCtrl(&img_slide_clock, 
3086   1                      &GetVAdcClock,
3087   1                      &SetVAdcClock,
3088   1                      &SetVAdcClock,
3089   1                      &ChangeVAdcClock);
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 51  

3090   1      #endif
3091   1              curr_menu->items[0].p();
3092   1      }               
3093          
3094          //update PixelClock,Phase,Position
3095          void proc_apc_list_autoadj(void) 
3096          {
3097   1              push_menu_stack_level();
3098   1      
3099   1              curr_menu = &menu_autoadj_page;
3100   1              curr_menu->focus = MENU_AUTOADJ_OK;                     //move to OK
3101   1              curr_menu->items[0].p();
3102   1      }
3103                                  
3104          void proc_apc_list_autocolor(void) 
3105          {
3106   1              push_menu_stack_level();
3107   1      
3108   1              curr_menu = &menu_autocolor_page;
3109   1              curr_menu->focus = MENU_AUTOCOLOR_OK;           //move to OK
3110   1              curr_menu->items[0].p();
3111   1      }                       
3112          
3113          
3114          //=====================================
3115          // HDMI List PAGE
3116          //
3117          // path:main->input->set
3118          //=====================================
3119          void proc_hdmi_list_bg(void) 
3120          {
3121   1              proc_menu_bg();
3122   1      }
3123          void proc_hdmi_list_mode(void)
3124          {
3125   1              push_menu_stack_level();
3126   1      
3127   1              curr_menu = &menu_hdmi_mode_page;
3128   1              curr_menu->focus = curr_menu->item_start+(MenuInputMain-INPUT_HDMIPC); //GetHdmiModeEE();
3129   1              curr_menu->select = curr_menu->focus;
3130   1              cancel_recover_value = curr_menu->select;
3131   1              curr_menu->items[0].p();
3132   1      }
3133          void proc_hdmi_list_setting(void)
3134          {
3135   1              push_menu_stack_level();
3136   1      
3137   1              //if(GetHdmiModeEE()==0)        curr_menu = &menu_rgb_list_page;
3138   1              //else                                  curr_menu = &menu_yuv_list_page;
3139   1              if(MenuInputMain==INPUT_HDMIPC) curr_menu = &menu_rgb_list_page;
3140   1              else                                                    curr_menu = &menu_yuv_list_page;
3141   1      
3142   1              curr_menu->focus = curr_menu->item_start;                                       //start from ...
3143   1              
3144   1              curr_menu->items[0].p();                                // call new background draw routine
3145   1      }
3146          
3147          
3148          #if 0
              void proc_hdmipc_list_bg(void) 
              {
                      proc_menu_bg();
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 52  

              }
              void proc_hdmipc_list_bright(void)
              {
                      push_menu_stack_level();
              
                      curr_menu = &menu_slider3_page;
                      curr_menu->select = curr_menu->focus = SLIDE3_1;
                      InitSlide3Ctrl(&img_slide_bright, 
                              &ImgAdjGetBrightnessRGB,
                              &ImgAdjSetBrightnessRGB,
                              &ImgAdjChangeBrightnessRGB);
                      curr_menu->items[0].p();
              }
              void proc_hdmipc_list_contrast(void)
              {
                      push_menu_stack_level();
              
                      curr_menu = &menu_slider3_page;
                      curr_menu->select = curr_menu->focus = SLIDE3_1;
                      InitSlide3Ctrl(&img_slide_contrast, 
                              &ImgAdjGetContrastRGB,
                              &ImgAdjSetContrastRGB,
                              &ImgAdjChangeContrastRGB);
                      curr_menu->items[0].p();
              }
              
              void proc_hdmipc_list_phase(void)
              {
                      push_menu_stack_level();
                      
                      curr_menu = &menu_slider_page;
                      curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
                      curr_menu->select = MENU_SLIDER_BAR_INPUT_RED;
                      InitSlideCtrl(&img_slide_phase,
                              &GetHdmiPhase,
                              &SetHdmiPhase,
                              &ChangeHdmiPhase);
              
                      curr_menu->items[0].p();
              }
              #endif
3193          
3194          //----------------------
3195          // main->system->more->OSD MENU
3196          //----------------------
3197          //-------------------------------------
3198          // osd MENU
3199          //-------------------------------------
3200          
3201          void proc_osd_bg(void) 
3202          {
3203   1              proc_menu_bg();
3204   1      }
3205          //void proc_osd_lang(void) {}
3206          
3207          void proc_osd_time(void) 
3208          {
3209   1              push_menu_stack_level();
3210   1      
3211   1              curr_menu = &menu_slider_page;
3212   1              curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
3213   1              curr_menu->select = MENU_SLIDER_BAR_INPUT_RED;
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 53  

3214   1              //ref:menu_value_timeout = EE_Read(EEP_OSD_TIMEOUT);
3215   1              //BKTODO: Need callback functions
3216   1              InitSlideCtrl(&img_slide_timer, &OsdGetTime,&OsdVaryTime,&OsdSetTime,&OsdChangeTime); //BKTODO
3217   1      
3218   1              curr_menu->items[0].p();                
3219   1      }
3220          void proc_osd_trans(void) 
3221          {
3222   1              push_menu_stack_level();
3223   1      
3224   1              curr_menu = &menu_slider_page;
3225   1              curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
3226   1              curr_menu->select = MENU_SLIDER_BAR_INPUT_RED;
3227   1      
3228   1              //ref:menu_value_transparency = EE_Read(EEP_OSD_TRANSPARENCY);
3229   1              //BKTODO: Need callback functions
3230   1      
3231   1      
3232   1              OsdSetTransRate(EE_Read(EEP_OSD_TRANSPARENCY));
3233   1              InitSlideCtrl(&img_slide_trans, &OsdGetTransRate,&OsdSetTransRate,&OsdSetTransRate,&OsdChangeTransRate);        
             -  //BKTODO: init slide control
3234   1      
3235   1              curr_menu->items[0].p();                
3236   1      }
3237          
3238          
3239          
3240          
3241           
3242          //=========================
3243          // PAGE MENU
3244          //=========================
3245          //=====================================
3246          // MAIN PAGE
3247          //=====================================
3248          //-------------------------------------
3249          // main MENU
3250          //-------------------------------------
3251          //desc: called from MenuStart()
3252          //      draw background image, focus 1 intem if not use USE_TOUCH
3253          //  use curr_menu.item
3254          void proc_main_bg(void)
3255          {       
3256   1              proc_menu_bg();
3257   1      }
3258          
3259          //move main_page->input page
3260          void proc_main_input(void)
3261          {
3262   1              push_menu_stack_level();                //save current menu page
3263   1              curr_menu = &menu_input_page;   //move to main->input
3264   1      
3265   1              MenuInputMain = GetInputMain();
3266   1              switch(MenuInputMain) {
3267   2              case INPUT_CVBS:                curr_menu->focus = MENU_SRC_CVBS;               break;
3268   2              case INPUT_SVIDEO:              curr_menu->focus = MENU_SRC_SVIDEO;             break;
3269   2              case INPUT_COMP:                curr_menu->focus = MENU_SRC_YPBPR;              break;
3270   2              case INPUT_PC:                  curr_menu->focus = MENU_SRC_PC;                 break;
3271   2      #ifdef SUPPORT_DVI
                      case INPUT_DVI:                 curr_menu->focus = MENU_SRC_DVI;                break;
              #endif
3274   2              case INPUT_HDMIPC:              
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 54  

3275   2              case INPUT_HDMITV:              curr_menu->focus = MENU_SRC_HDMI;               break;
3276   2              case INPUT_BT656:               curr_menu->focus = MENU_SRC_BT656;              break;
3277   2              default:                                curr_menu->focus = MENU_SRC_CVBS;               break;
3278   2              }
3279   1              curr_menu->select = curr_menu->focus;
3280   1      
3281   1              curr_menu->items[0].p();                //draw background, select focus and draw the focused item.
3282   1      }
3283          //move main_page->audio_page
3284          void proc_main_audio(void)
3285          {
3286   1              push_menu_stack_level();
3287   1              curr_menu = &menu_audio_page;
3288   1              curr_menu->focus = MENU_AUDIO_RETURN;
3289   1              curr_menu->items[0].p();
3290   1      }
3291          //move main_page->system_page
3292          void proc_main_system(void)
3293          {
3294   1              push_menu_stack_level();                //save current menu page
3295   1              curr_menu = &menu_system_page;  //move to main->system
3296   1      
3297   1              curr_menu->focus = MENU_SYSTEM_DISPLAY; //start at display first
3298   1              curr_menu->select = curr_menu->focus;
3299   1              curr_menu->items[0].p();                //draw background and focused item
3300   1      }
3301          //move main_page->gps_page
3302          void proc_main_gps(void)
3303          {
3304   1              push_menu_stack_level();
3305   1              curr_menu = &menu_gps_page;
3306   1              curr_menu->focus = MENU_GPS_RETURN;
3307   1              curr_menu->items[0].p();
3308   1      }
3309          //move main_page->phone_page
3310          void proc_main_phone(void)
3311          {
3312   1              push_menu_stack_level();
3313   1              curr_menu = &menu_phone_page;
3314   1              curr_menu->focus = MENU_PHONE_RETURN;
3315   1              curr_menu->items[0].p();
3316   1      }
3317          //move main_page->carinfo_page
3318          void proc_main_info(void)
3319          {
3320   1              push_menu_stack_level();
3321   1              curr_menu = &menu_carinfo_page;
3322   1              curr_menu->focus = MENU_CARINFO_RETURN;
3323   1              curr_menu->items[0].p();
3324   1      }
3325          
3326          
3327          //=====================================
3328          // Video INPUT PAGE
3329          //
3330          // path:main->input
3331          //=====================================
3332          
3333          //----------------------
3334          // video input background 
3335          //----------------------
3336          void proc_input_bg(void)
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 55  

3337          {
3338   1      #if 0
                      BYTE hdmi_not_detected; //BKTODO
                      hdmi_not_detected = 1;
              //      curr_menu->deactivated = 0;
              #endif
3343   1      
3344   1              proc_menu_bg();
3345   1      
3346   1      #if 0
                      //if I have a deactived item
                      if(hdmi_not_detected) {
                              //let curr_menu know it.
                              //BKTODO: You have to clear when you update curr_menu.
                              curr_menu->deactivated = MENU_SRC_HDMI;
                              //draw deactivated screen
                              MenuDrawDeactivatedItemImage(SOSD_WIN7, MENU_SRC_HDMI);
                      }
              #endif
3356   1      }
3357          //select cvbs
3358          void proc_input_cvbs(void)
3359          {
3360   1              MenuInputMain = GetInputMain();
3361   1              if(MenuInputMain != INPUT_CVBS) {
3362   2      
3363   2                      //change input
3364   2                      SpiOsdEnable(OFF);      //-->27M
3365   2              
3366   2                      //change input & update EE & Set Image.
3367   2                      MenuNoSignal=ChangeCVBS();      //-->27M
3368   2              
3369   2                      //??SpiOsdSetDeValue();
3370   2                      //??FOsdSetDeValue();
3371   2              
3372   2                      SpiOsdEnable(ON);       //-->108M
3373   2              }
3374   1              //draw the select Note.
3375   1              curr_menu->select = curr_menu->focus;
3376   1              MenuDrawCurrImage(0,curr_menu->select+curr_menu->item_total);
3377   1      
3378   1              //move to return.
3379   1              //curr_menu->focus = MENU_SRC_RETURN;
3380   1              MenuDrawCurrImage(0,curr_menu->focus);
3381   1      }
3382          //select svideo
3383          void proc_input_svideo(void)
3384          {
3385   1              MenuInputMain = GetInputMain();
3386   1              if(MenuInputMain != INPUT_SVIDEO) {
3387   2      
3388   2                      //change input
3389   2                      SpiOsdEnable(OFF);
3390   2              
3391   2                      //change input & update EE & Set Image.
3392   2                      MenuNoSignal=ChangeSVIDEO();
3393   2              
3394   2                      //??SpiOsdSetDeValue();
3395   2                      //??FOsdSetDeValue();
3396   2              
3397   2                      SpiOsdEnable(ON);
3398   2              }
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 56  

3399   1              //draw the select Note.
3400   1              curr_menu->select = curr_menu->focus;
3401   1              MenuDrawCurrImage(0,curr_menu->select+curr_menu->item_total);
3402   1      
3403   1              //curr_menu->focus = MENU_SRC_RETURN;
3404   1              MenuDrawCurrImage(0,curr_menu->focus);
3405   1      }
3406          //select component
3407          void proc_input_ypbpr(void)
3408          {
3409   1              MenuInputMain = GetInputMain();
3410   1              if(MenuInputMain != INPUT_COMP) {
3411   2      
3412   2                      //change input
3413   2                      SpiOsdEnable(OFF);
3414   2              
3415   2      #ifdef SUPPORT_COMPONENT
3416   2                      //change input & update EE & Set Image.
3417   2                      MenuNoSignal=ChangeCOMPONENT();
3418   2      #else
                              MenuNoSignal=2;
              #endif
3421   2              
3422   2                      //??SpiOsdSetDeValue();
3423   2                      //??FOsdSetDeValue();
3424   2              
3425   2                      SpiOsdEnable(ON);
3426   2              }
3427   1              //draw the select Note
3428   1              curr_menu->select = curr_menu->focus;
3429   1              MenuDrawCurrImage(0,curr_menu->select+curr_menu->item_total);
3430   1      
3431   1              //curr_menu->focus = MENU_SRC_RETURN;
3432   1              MenuDrawCurrImage(0,curr_menu->focus);
3433   1      }
3434          //select pc
3435          void proc_input_pc(void)
3436          {
3437   1              MenuInputMain = GetInputMain();
3438   1              if(MenuInputMain != INPUT_PC) {
3439   2      
3440   2                      //change input
3441   2                      SpiOsdEnable(OFF);
3442   2              
3443   2      #ifdef SUPPORT_PC
3444   2                      //change input & update EE & Set Image.
3445   2                      MenuNoSignal=ChangePC();
3446   2      #else
                              MenuNoSignal= 2;                
              #endif  
3449   2                      //??SpiOsdSetDeValue();
3450   2                      //??FOsdSetDeValue();
3451   2              
3452   2                      SpiOsdEnable(ON);
3453   2              }
3454   1              //draw the select Note
3455   1              curr_menu->select = curr_menu->focus;
3456   1              MenuDrawCurrImage(0,curr_menu->select+curr_menu->item_total);
3457   1      
3458   1              //curr_menu->focus = MENU_SRC_RETURN;
3459   1              MenuDrawCurrImage(0,curr_menu->focus);
3460   1      }
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 57  

3461          //select dvi
3462          #ifdef SUPPORT_DVI
              void proc_input_dvi(void)
              {
                      MenuInputMain = GetInputMain();
                      if(MenuInputMain != INPUT_DVI) {
              
                              //change input
                              SpiOsdEnable(OFF);
                      
                              //change input & update EE & Set Image.
                              MenuNoSignal=ChangeDVI();
                      
                              //??SpiOsdSetDeValue();
                              //??FOsdSetDeValue();
                      
                              SpiOsdEnable(ON);
                      }
                      //draw the select Note
                      curr_menu->select = curr_menu->focus;
                      MenuDrawCurrImage(0,curr_menu->select+curr_menu->item_total);
              
                      //curr_menu->focus = MENU_SRC_RETURN;
                      MenuDrawCurrImage(0,curr_menu->focus);
              }
              #endif
3487          //select hdmi
3488          void proc_input_hdmi(void)
3489          {
3490   1              MenuInputMain = GetInputMain();
3491   1              if(MenuInputMain != INPUT_HDMIPC && MenuInputMain != INPUT_HDMITV) {
3492   2      
3493   2                      //change input
3494   2      
3495   2                      SpiOsdEnable(OFF);
3496   2              
3497   2                      //change input & update EE & Set Image.
3498   2                      MenuNoSignal=ChangeHDMI();
3499   2              
3500   2                      //??SpiOsdSetDeValue();
3501   2                      //??FOsdSetDeValue();
3502   2              
3503   2                      SpiOsdEnable(ON);
3504   2              }
3505   1              //draw the select Note
3506   1              curr_menu->select = curr_menu->focus;
3507   1              MenuDrawCurrImage(0,curr_menu->select+curr_menu->item_total);
3508   1      
3509   1              //curr_menu->focus = MENU_SRC_RETURN;
3510   1              MenuDrawCurrImage(0,curr_menu->focus);
3511   1      }
3512          //select BT656(ExternalCVBS)
3513          void proc_input_bt656(void)
3514          {
3515   1      #ifdef SUPPORT_BT656
3516   1              MenuInputMain = GetInputMain();
3517   1              if(MenuInputMain != INPUT_BT656) {
3518   2                      //change input
3519   2                      SpiOsdEnable(OFF);
3520   2              
3521   2                      //BKTODO110511
3522   2                      //DVI 8BIT mode
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 58  

3523   2                      MenuNoSignal=ChangeBT656();
3524   2              
3525   2                      //??SpiOsdSetDeValue();
3526   2                      //??FOsdSetDeValue();
3527   2              
3528   2                      SpiOsdEnable(ON);
3529   2              }
3530   1              //draw the select Note
3531   1              curr_menu->select = curr_menu->focus;
3532   1              MenuDrawCurrImage(0,curr_menu->select+curr_menu->item_total);
3533   1      
3534   1              //curr_menu->focus = MENU_SRC_RETURN;
3535   1              MenuDrawCurrImage(0,curr_menu->focus);
3536   1      #endif
3537   1      }
3538          
3539          //move to YUV(decoder)/aPC(pc)/RGB(dvi) image setting
3540          void proc_input_setting(void)
3541          {
3542   1              push_menu_stack_level();
3543   1      
3544   1              MenuInputMain = GetInputMain();
3545   1              if(MenuInputMain==INPUT_PC)
3546   1                      curr_menu = &menu_apc_list_page;        //PC ( Analog RGB )
3547   1              else if(MenuInputMain==INPUT_DVI)
3548   1                      curr_menu = &menu_rgb_list_page;        //DVI
3549   1              else if(MenuInputMain==INPUT_HDMIPC || MenuInputMain==INPUT_HDMITV) 
3550   1                      curr_menu = &menu_hdmi_list_page;       //HDMI
3551   1              else 
3552   1                      curr_menu = &menu_yuv_list_page;        //CVBS & SVideo & YPBPR & BT656
3553   1      
3554   1              curr_menu->focus = curr_menu->item_start;                                       //start from ...
3555   1              
3556   1              curr_menu->items[0].p();                                // call new background draw routine
3557   1      }
3558          
3559          //=====================================
3560          // AUDIO PAGE
3561          //
3562          // path:main->audio
3563          //=====================================
3564          //----------------------
3565          // audio page background
3566          //----------------------
3567          void proc_audio_bg(void) 
3568          {
3569   1              proc_menu_bg();
3570   1      }
3571          
3572          //=====================================
3573          // SYSTEM PAGE
3574          //
3575          // path:main->system
3576          //=====================================
3577          //----------------------
3578          // system page background
3579          //----------------------
3580          void proc_system_bg(void)
3581          {
3582   1              BYTE touch_not_detected;  //BKTODO
3583   1              touch_not_detected = 1;
3584   1      
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 59  

3585   1              proc_menu_bg();
3586   1      
3587   1      //      curr_menu->deactivated = 0;
3588   1              if(touch_not_detected) {
3589   2                      //let curr_menu know it.
3590   2                      //BKTODO: You have to clear when you update curr_menu.
3591   2      //              curr_menu->deactivated = MENU_SETTING_TOUCH;
3592   2                      //draw deactivated screen
3593   2                      MenuDrawDeactivatedItemImage(SOSD_WIN7, MENU_SYSTEM_TOUCH);
3594   2              }
3595   1      }
3596                  
3597          void proc_system_touch(void)
3598          {
3599   1      //ET1 = 0;
3600   1              curr_menu->select = MENU_SYSTEM_TOUCH;
3601   1              push_menu_stack_level();
3602   1      
3603   1              //curr_menu.info = menu_touch_calibrate_page;
3604   1              curr_menu = &menu_touch_page;
3605   1              curr_menu->focus = curr_menu->item_start;
3606   1              curr_menu->items[0].p();
3607   1      //ET1 = 1;
3608   1      }
3609          
3610          void proc_system_display(void)
3611          {
3612   1              curr_menu->select = MENU_SYSTEM_DISPLAY;
3613   1              push_menu_stack_level();
3614   1      
3615   1              curr_menu = &menu_display_page;
3616   1              curr_menu->focus = curr_menu->item_start;
3617   1              curr_menu->items[0].p();
3618   1      }       
3619          void proc_system_btooth(void)
3620          {
3621   1              curr_menu->select = MENU_SYSTEM_BTOOTH;
3622   1              push_menu_stack_level();
3623   1      
3624   1              //we don't have btooth page, let's use phone page
3625   1              curr_menu = &menu_phone_page;
3626   1              curr_menu->focus = MENU_PHONE_RETURN;
3627   1              curr_menu->items[0].p();
3628   1      }       
3629          void proc_system_restore(void)
3630          {
3631   1              curr_menu->select = MENU_SYSTEM_RESTORE;
3632   1              push_menu_stack_level();
3633   1      
3634   1              curr_menu = &menu_restore_page;
3635   1              curr_menu->focus = MENU_RESTORE_OK;
3636   1              curr_menu->items[0].p();
3637   1      }
3638          void proc_system_info(void)
3639          {
3640   1              BYTE str_buff[10];
3641   1      
3642   1              curr_menu->select = MENU_SYSTEM_SYSINFO;
3643   1              push_menu_stack_level();
3644   1      
3645   1              curr_menu = &menu_sys_info_page;
3646   1              curr_menu->focus = MENU_SYS_INFO_OK;
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 60  

3647   1              curr_menu->items[0].p();
3648   1      
3649   1              //BKTODO110811
3650   1              MenuFontOsdItemInit(0, ON);             //1BPP ALPHA ON
3651   1              MenuFontOsdItemInit(1, ON);             //1BPP ALPHA ON
3652   1      #ifdef EVB_31
3653   1              MenuFontOsdItemString(0,"3.1");
3654   1      #elif defined(EVB_30)
                      MenuFontOsdItemString(0,"3.0");
              #elif defined(EVB_21)
                      MenuFontOsdItemString(0,"2.1");
              #elif defined(EVB_20)
                      MenuFontOsdItemString(0,"2.0");
              #else
                      MenuFontOsdItemString(0,"1.0");
              #endif
3663   1              TWhtos((BYTE)(FWVER>>8),str_buff);
3664   1              TWstrcat(str_buff,".");
3665   1              TWhtos((BYTE)FWVER,menu_str_buff);
3666   1              TWstrcat(str_buff,menu_str_buff);
3667   1              MenuFontOsdItemString(1,str_buff);
3668   1      }
3669          
3670          #ifdef SUPPORT_TOUCH
3671          BYTE MenuIsSystemPage(void)
3672          {
3673   1              if(curr_menu == &menu_system_page)      return 1;
3674   1              return 0;
3675   1      }
3676          #endif
3677          
3678          //=====================================
3679          // GPS PAGE
3680          //
3681          // path:main->gps
3682          //=====================================
3683          //----------------------
3684          // GPS page background
3685          //----------------------
3686          void proc_gps_bg(void) 
3687          {
3688   1              proc_menu_bg();
3689   1      }
3690          
3691          //=====================================
3692          // PHONE PAGE
3693          //
3694          // path:main->PHONE
3695          //=====================================
3696          //----------------------
3697          // PHONE page background
3698          //----------------------
3699          BYTE phone_start;
3700          void proc_phone_digit(BYTE ch, BYTE fCursor);
3701          void proc_phone_cursor(BYTE start);
3702          void proc_phone_string(BYTE *str);
3703          void proc_phone_bg(void) 
3704          {
3705   1              BYTE i,j;
3706   1              menu_fitem_info_t *text_info = curr_menu->texts;
3707   1      
3708   1              proc_menu_bg();
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 61  

3709   1              MenuFontOsdItemInit(0, OFF);    //for FOSD WIN0
3710   1              MenuFontOsdItemInit(1, OFF);    //for FOSD WIN1
3711   1      
3712   1              proc_phone_string(" ");
3713   1              phone_start = 0;
3714   1              for(i=0; i < text_info->h; i++)
3715   1                      for(j=0; j < text_info->w; j++)
3716   1                              proc_phone_digit(0x20,0);
3717   1              phone_start = 0;
3718   1              proc_phone_cursor(phone_start);
3719   1      }
3720          void proc_phone_return(void)
3721          {
3722   1              //turn off FontOSD
3723   1              FOsdWinOffAll();
3724   1              proc_return_icon();
3725   1      }
3726          
3727          void proc_phone_cursor(BYTE start)
3728          {
3729   1              BYTE ch;
3730   1              menu_fitem_info_t *text_info = curr_menu->texts;
3731   1      
3732   1              ch = 0x5F;      //"_"
3733   1              FOsdBlinkOnOff(ON);
3734   1              FOsdRamSetAddrAttr(text_info->osdram+start,text_info->BPP1Color);
3735   1              WriteTW88(REG307, ch);
3736   1              FOsdBlinkOnOff(OFF);
3737   1      }
3738          
3739          void proc_phone_digit(BYTE ch, BYTE fCursor)
3740          {
3741   1              BYTE palette;
3742   1              menu_fitem_info_t *text_info = curr_menu->texts;
3743   1              //text_info += index;
3744   1      
3745   1      
3746   1              if(IsDigit(ch)) {
3747   2                      palette = text_info->BPP3_palette;
3748   2                      FOsdRamSetAddrAttr(text_info->osdram+phone_start,palette >> 2);
3749   2                      WriteTW88(REG307, (ch-0x30) * 3 + BPP3DIGIT_START);
3750   2                      phone_start++;  
3751   2              }
3752   1              else {
3753   2                      palette = text_info->BPP1Color;
3754   2                      if(ch==0x0B) {  //backspace
3755   3                              ch = 0x20;      //space
3756   3                              FOsdRamSetAddrAttr(text_info->osdram+phone_start,text_info->BPP1Color); //remove cursor
3757   3                              WriteTW88(REG307, ch);
3758   3                              if(phone_start)
3759   3                                      phone_start--;
3760   3                              FOsdRamSetAddrAttr(text_info->osdram+phone_start,text_info->BPP1Color); //remove char
3761   3                              WriteTW88(REG307, ch);
3762   3                      }
3763   2                      else {
3764   3                              FOsdRamSetAddrAttr(text_info->osdram+phone_start,text_info->BPP1Color);
3765   3                              WriteTW88(REG307, ch);
3766   3                              phone_start++;  
3767   3                      }
3768   2              }
3769   1              if(fCursor)
3770   1                      proc_phone_cursor(phone_start);
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 62  

3771   1      
3772   1      
3773   1              if(phone_start >= 30)
3774   1                      phone_start = 30;
3775   1      
3776   1      }
3777          void proc_phone_string(BYTE *str)
3778          {
3779   1              BYTE palette;
3780   1              BYTE i,index;
3781   1      
3782   1              menu_fitem_info_t *text_info = curr_menu->texts;
3783   1              text_info++;    //FOSD WIN1
3784   1              
3785   1              palette = text_info->BPP1Color;
3786   1              FOsdRamSetAddrAttr(text_info->osdram,text_info->BPP1Color);
3787   1              index=0;
3788   1              while(*str) {
3789   2                      WriteTW88(REG307, *str);
3790   2                      str++;
3791   2                      index++;
3792   2              }
3793   1              for(i=index; i < text_info->w; i++)
3794   1                      WriteTW88(REG307, 0);   //space
3795   1      }
3796          
3797          
3798          void proc_phone_1(void) 
3799          {
3800   1              proc_phone_digit('1',1);
3801   1              MenuDrawCurrImage(0, curr_menu->focus); 
3802   1      }
3803          void proc_phone_2(void) 
3804          {
3805   1              proc_phone_digit('2',1);
3806   1              MenuDrawCurrImage(0, curr_menu->focus); 
3807   1      }
3808          void proc_phone_3(void) 
3809          {
3810   1              proc_phone_digit('3',1);
3811   1              MenuDrawCurrImage(0, curr_menu->focus); 
3812   1      }
3813          void proc_phone_4(void) 
3814          {
3815   1              proc_phone_digit('4',1);
3816   1              MenuDrawCurrImage(0, curr_menu->focus); 
3817   1      }
3818          void proc_phone_5(void) 
3819          {
3820   1              proc_phone_digit('5',1);
3821   1              MenuDrawCurrImage(0, curr_menu->focus); 
3822   1      }
3823          void proc_phone_6(void) 
3824          {
3825   1              proc_phone_digit('6',1);
3826   1              MenuDrawCurrImage(0, curr_menu->focus); 
3827   1      }
3828          void proc_phone_7(void) 
3829          {
3830   1              proc_phone_digit('7',1);
3831   1              MenuDrawCurrImage(0, curr_menu->focus); 
3832   1      }
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 63  

3833          void proc_phone_8(void) 
3834          {
3835   1              proc_phone_digit('8',1);
3836   1              MenuDrawCurrImage(0, curr_menu->focus); 
3837   1      }
3838          void proc_phone_9(void) 
3839          {
3840   1              proc_phone_digit('9',1);
3841   1              MenuDrawCurrImage(0, curr_menu->focus); 
3842   1      }
3843          void proc_phone_star(void) 
3844          {
3845   1              proc_phone_digit('*',1);
3846   1              MenuDrawCurrImage(0, curr_menu->focus); 
3847   1      }
3848          void proc_phone_0(void) 
3849          {
3850   1              proc_phone_digit('0',1);
3851   1              MenuDrawCurrImage(0, curr_menu->focus); 
3852   1      }
3853          void proc_phone_sharp(void) 
3854          {
3855   1              proc_phone_digit('#',1);
3856   1              MenuDrawCurrImage(0, curr_menu->focus); 
3857   1      }
3858          void proc_phone_dial(void) 
3859          {
3860   1              proc_phone_string("Dialing");
3861   1              MenuDrawCurrImage(0, curr_menu->focus); 
3862   1      }
3863          void proc_phone_up(void) 
3864          {
3865   1              proc_phone_string("up");
3866   1              MenuDrawCurrImage(0, curr_menu->focus); 
3867   1      }
3868          void proc_phone_down(void) 
3869          {
3870   1              proc_phone_string("down");
3871   1              MenuDrawCurrImage(0, curr_menu->focus); 
3872   1      }
3873          void proc_phone_check(void) 
3874          {
3875   1              proc_phone_digit(0x0B,1);       //backspace
3876   1              MenuDrawCurrImage(0, curr_menu->focus); 
3877   1      }
3878          void proc_phone_left(void) 
3879          {
3880   1              proc_phone_string("left");
3881   1              MenuDrawCurrImage(0, curr_menu->focus); 
3882   1      }
3883          void proc_phone_right(void) 
3884          {
3885   1              proc_phone_string("right");
3886   1              MenuDrawCurrImage(0, curr_menu->focus); 
3887   1      }
3888          void proc_phone_help(void) 
3889          {
3890   1              proc_phone_string("help");
3891   1              MenuDrawCurrImage(0, curr_menu->focus); 
3892   1      }
3893          void proc_phone_dir(void) 
3894          {
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 64  

3895   1              proc_phone_string("Directory");
3896   1              MenuDrawCurrImage(0, curr_menu->focus); 
3897   1      }
3898          void proc_phone_set(void) 
3899          {
3900   1              proc_phone_string("Settings");
3901   1              MenuDrawCurrImage(0, curr_menu->focus); 
3902   1      }
3903          void proc_phone_msg(void) 
3904          {
3905   1              proc_phone_string("Messages");
3906   1              MenuDrawCurrImage(0, curr_menu->focus); 
3907   1      }
3908          void proc_phone_menu(void) 
3909          {
3910   1              proc_phone_string("Menu");
3911   1              MenuDrawCurrImage(0, curr_menu->focus); 
3912   1      }
3913          
3914          
3915          //=====================================
3916          // CARINFO PAGE
3917          //
3918          // path:main->carinfo
3919          //=====================================
3920          //----------------------
3921          // carinfo page background
3922          //----------------------
3923          void proc_carinfo_bg(void) 
3924          {
3925   1              proc_menu_bg();
3926   1      }
3927          
3928          //=====================================
3929          // DEMO PAGE
3930          //
3931          // path:main->demo
3932          //=====================================
3933          
3934          //DEMO page background
3935          void proc_demo_bg(void) 
3936          {
3937   1              proc_menu_bg();
3938   1      }
3939          
3940          void proc_grid_demo_start(void) 
3941          {
3942   1              WaitVBlank(1);
3943   1              SpiOsdWinHWEnable(SOSD_WIN_ICON, OFF); //remove the pressed icon. only WIN8
3944   1      
3945   1              //redraw setting again. I don't have a Animation menu.
3946   1              MenuEnd();      
3947   1      
3948   1              MovingGridInit();
3949   1      
3950   1              MovingGridTask_init();
3951   1      
3952   1              //block touch 
3953   1              CpuTouchSkipCount = 1*500*2;    //0.5 sec
3954   1      }
3955          
3956          #if 0
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 65  

              void proc_pigeon_demo_start(void)
              {
                      WaitVBlank(1);
                      MenuEnd();
                      PigeonDemo();           
              }
              #endif
3964          
3965          void proc_rose_demo_start(void)
3966          {
3967   1              WaitVBlank(1);
3968   1              MenuEnd();      
3969   1      
3970   1              SpiOsdWinHWOffAll(1);
3971   1      
3972   1              RoseDemo();
3973   1      
3974   1              //block touch 
3975   1              CpuTouchSkipCount = 1*500*2;    //0.5 sec
3976   1      }
3977          extern void DumpFontOsdPalette(void);
3978          void proc_test1_demo_start(void)
3979          {
3980   1              WaitVBlank(1);
3981   1              MenuEnd();      
3982   1      
3983   1              DumpFontOsdPalette();
3984   1      }
3985          
3986          //=========================
3987          // WAIT
3988          //=========================
3989          
3990          //WaitIcon(ON/OFF)
3991          void proc_wait_menu_start(void)
3992          {
3993   1              menu_sitem_info_t *menu_item;
3994   1              struct image_item_info_s *image;
3995   1              menu_image_header_t *header = &header_table;
3996   1              BYTE item;
3997   1      
3998   1              item = curr_menu->focus;
3999   1              menu_item = &curr_menu->items[item];
4000   1              image = &img_wait;      //menu_item->image;
4001   1      
4002   1              SpiOsdEnable(ON);
4003   1      
4004   1              SOsdWinBuffClean(0);            //ClearSpiOsdWinBuffer();
4005   1      
4006   1              //prepare header
4007   1              MenuPrepareImageHeader(image);
4008   1      
4009   1              SpiOsdWinImageLoc( SOSD_WIN0, header->image_loc );
4010   1              SpiOsdWinImageSizeWH( SOSD_WIN0, header->dx, header->dy );
4011   1              SpiOsdWinScreen( SOSD_WIN0, 400 - (header->dx / 2), 240 - (header->dy /2), header->dx, header->dy );
4012   1              SpiOsdWin0ImageOffsetXY( 0,0 );
4013   1              SpiOsdWin0Animation( 2/*3*/, 0, 9, 3);
4014   1              SpiOsdWin0SetPriority(ON);
4015   1      
4016   1              //SpiOsdWinGlobalAlpha( 0, 0 );
4017   1              SpiOsdWinPixelAlpha( SOSD_WIN0, ON );
4018   1              SpiOsdWinPixelWidth(SOSD_WIN0, header->bpp);
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 66  

4019   1              SpiOsdWinLutOffset(SOSD_WIN0,menu_item->lut);
4020   1      
4021   1              SpiOsdWinBuffEnable( SOSD_WIN0, ON );
4022   1              dMenuPuts("\nFinished wait icon window init");
4023   1      
4024   1              WaitVBlank(1);
4025   1              SpiOsdLoadLUT(SOSD_WIN0, header->lut_type, menu_item->lut, header->lut_size, header->lut_loc);
4026   1              SOsdWinBuffWrite2Hw(SOSD_WIN0, SOSD_WIN0);
4027   1              SpiOsdPixelAlphaAttr(menu_item->lut+image->alpha, 0x7F);
4028   1              dMenuPuts("\nFinished Wait");
4029   1      }
4030          
4031          void proc_wait_demo_start(void)
4032          {
4033   1              WaitVBlank(1); //BUG110725
4034   1              MenuEnd();
4035   1              proc_wait_menu_start();
4036   1      }
4037          
4038          //=====================================
4039          // Touch PAGE
4040          //
4041          // path:main->system->touch
4042          //=====================================
4043          
4044          //----------------------
4045          // main->system->touch MENU
4046          //----------------------
4047          //void UpdateTouchCalibXY(BYTE index,WORD x, WORD y);
4048          
4049          void proc_touch_bg(void)
4050          {
4051   1              proc_menu_bg();
4052   1      }
4053          void proc_touch_bg_end(void)
4054          {
4055   1              pop_menu_stack_level(); 
4056   1              curr_menu->items[0].p();  //redraw parent
4057   1      }
4058          //void proc_touch_bg_end(void)
4059          //{
4060          //      proc_menu_bg();
4061          //}
4062          void proc_touch_button1(void) 
4063          {
4064   1      //      ET1 = 0;
4065   1      //      UpdateTouchCalibXY(0,x,y);
4066   1      
4067   1              curr_menu->focus++;
4068   1              proc_menu_bg();
4069   1      //      ET1 = 1;
4070   1      }
4071          void proc_touch_button2(void) 
4072          {
4073   1      //      ET1 = 0;
4074   1              curr_menu->focus++;
4075   1              proc_menu_bg();
4076   1      //      ET1 = 1;
4077   1      }
4078          void proc_touch_button3(void)
4079          {
4080   1      //      ET1 = 0;
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 67  

4081   1              curr_menu->focus++;
4082   1              proc_menu_bg();
4083   1      //      ET1 = 1;
4084   1      }
4085          
4086          void proc_touch_button4(void)
4087          {
4088   1      //      ET1 = 0;
4089   1              curr_menu->focus++;
4090   1              proc_menu_bg();
4091   1      //      ET1 = 1;
4092   1      }
4093          void proc_touch_button5(void) 
4094          {
4095   1              UseSOsdHwBuff = 1;
4096   1              SOsdHwBuffClean();
4097   1              SOsdWinBuffClean(0);
4098   1      //      ET1 = 0;
4099   1      //      pop_menu_stack_level(); 
4100   1      //      curr_menu->items[0].p();  //redraw parent
4101   1      //      ET1 = 1;
4102   1              //draw item1
4103   1              MenuDrawCurrImage(0,1); //normal, background_end
4104   1              //focus to OK
4105   1              curr_menu->focus = MENU_TOUCH_OK;
4106   1              MenuDrawCurrImage(0,curr_menu->focus);                  //draw focused item
4107   1      
4108   1              if(UseSOsdHwBuff) {
4109   2                      SOsdHwBuffWrite2Hw();
4110   2                      UseSOsdHwBuff = 0;
4111   2              }
4112   1      
4113   1      }
4114          #ifdef SUPPORT_TOUCH
4115          void proc_touch_calib_end(void)
4116          {
4117   1              //if(menu_level==0) {
4118   1              //      MenuEnd();
4119   1              //      return;
4120   1              //}
4121   1              
4122   1              pop_menu_stack_level(); 
4123   1              curr_menu->items[0].p();  //redraw parent
4124   1      }
4125          #endif
4126          
4127          void proc_touch_ok(void)
4128          {
4129   1      #ifdef SUPPORT_TOUCH
4130   1      //      ET1 = 0;
4131   1      
4132   1              //save value to EEPROM
4133   1              //for(i=0; i < 5; i++) {
4134   1              //      w = TouchGetCalibedX(i);
4135   1              //      WriteEEPROM();
4136   1              //      w = TouchGetCalibedY(i);
4137   1              //      WriteEEPROM();
4138   1              //
4139   1              //}
4140   1              SaveCalibDataToEE(1);
4141   1      
4142   1      //      UpdateTouchCalibXY(0,x,y);
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 68  

4143   1      //      UpdateTouchCalibXY(1,x,y);
4144   1      //      UpdateTouchCalibXY(2,1,1 /*x,y*/);
4145   1      //      UpdateTouchCalibXY(3,x,y);
4146   1      //      UpdateTouchCalibXY(4,x,y);
4147   1              proc_touch_calib_end();
4148   1      //      ET1 = 1;
4149   1      #endif
4150   1      }
4151          void proc_touch_cancel(void)
4152          {
4153   1      #ifdef SUPPORT_TOUCH
4154   1      //      BYTE i;
4155   1      //      ET1 = 0;
4156   1              //readback calib value from EEPROM
4157   1              //for(i=0; i < 5; i++) {
4158   1              //      x = ReadEEPROM();
4159   1              //      y = ReadEEPROM();
4160   1              //      TouchSetCalibedXY(i, x,y);
4161   1              //}
4162   1              //ReadCalibDataFromEE();
4163   1      
4164   1              proc_touch_calib_end();
4165   1      //      ET1 = 1;
4166   1      #endif
4167   1      }
4168          
4169          #ifdef SUPPORT_TOUCH
4170          BYTE MenuIsTouchCalibMode(void)
4171          {
4172   1              if(curr_menu == &menu_touch_page) {
4173   2                      if(curr_menu->focus >= curr_menu->item_start && curr_menu->focus < (curr_menu->item_start+5))
4174   2                              return (curr_menu->focus - curr_menu->item_start +1);
4175   2      
4176   2              }
4177   1              return 0;
4178   1      }
4179          #endif
4180          
4181          #ifdef SUPPORT_TOUCH
4182          void MenuTouchCalibStart(void)
4183          {
4184   1              //MenuStart();
4185   1              
4186   1              SaveCalibDataToEE(0);   //use default
4187   1      
4188   1      
4189   1              push_menu_stack_level();
4190   1              curr_menu = &menu_touch_page;
4191   1              curr_menu->focus = curr_menu->item_start;
4192   1              curr_menu->select = curr_menu->focus;
4193   1      
4194   1              //call bg proc
4195   1              curr_menu->items[0].p();
4196   1      }
4197          #endif
4198          
4199          //=====================================
4200          // Display PAGE
4201          //
4202          // path:main->system->display
4203          //=====================================
4204          //----------------------
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 69  

4205          // main->system->more MENU
4206          //----------------------
4207          
4208          void proc_display_bg(void) 
4209          {
4210   1              proc_menu_bg();
4211   1      }
4212          void proc_display_aspect(void) 
4213          {
4214   1              push_menu_stack_level();
4215   1      
4216   1              curr_menu = &menu_aspect_page;
4217   1              curr_menu->focus = MENU_ASPECT_NORMAL+GetAspectModeEE();
4218   1              curr_menu->select = curr_menu->focus;
4219   1              cancel_recover_value = curr_menu->select;
4220   1              curr_menu->items[0].p();
4221   1      }
4222          
4223          void proc_display_osd(void) 
4224          {
4225   1              push_menu_stack_level();
4226   1      
4227   1              curr_menu = &menu_osd_page;
4228   1              curr_menu->focus = curr_menu->item_start;
4229   1              curr_menu->items[0].p();
4230   1      }
4231          void proc_display_flip(void) 
4232          {
4233   1              push_menu_stack_level();
4234   1      
4235   1              curr_menu = &menu_mirror_page;
4236   1              curr_menu->focus = MENU_FLIP_OK;
4237   1              curr_menu->items[0].p();
4238   1      }
4239          void proc_display_backlight(void) 
4240          {
4241   1              push_menu_stack_level();
4242   1      
4243   1              curr_menu = &menu_slider_page;
4244   1              curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
4245   1              curr_menu->select = MENU_SLIDER_BAR_INPUT_RED;
4246   1              //BKTODO: Need callback functions
4247   1              InitSlideCtrl(&img_slide_backlight, 
4248   1                      &BackLightGetRate,
4249   1                      &BackLightSetRate,
4250   1                      &BackLightSetRate,
4251   1                      &BackLightChangeRate);
4252   1      
4253   1              curr_menu->items[0].p();                
4254   1      }
4255          
4256          //NEW110623 BKTODO110623
4257          void proc_display_resolution(void) 
4258          {
4259   1      //      WORD wValue;
4260   1              BYTE str_buff[10];
4261   1      
4262   1              push_menu_stack_level();
4263   1      
4264   1              //BK110811
4265   1              //+---------------------------------------+
4266   1              //|               Resolution                      |
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 70  

4267   1              //|                                                                               |
4268   1              //|                INPUT     OUTPUT               |
4269   1              //| Horizontal :   720       800          |
4270   1              //|   Vertical :   480           480              |
4271   1              //|  Frequency :   60                                     |
4272   1              //|                                                                               |
4273   1              //|                OK                                     |
4274   1              //+---------------------------------------+
4275   1              //or
4276   1              //+---------------------------+
4277   1              //|         Resolution            |
4278   1              //|                                                       |
4279   1              //| input :  720x480              |
4280   1              //| panel :  800x480          |
4281   1              //|                                                       |
4282   1              //|         OK                            |
4283   1              //+---------------------------+
4284   1      
4285   1      #if 0 //BK110811
                      curr_menu = &menu_slider_page;
                      curr_menu->focus = MENU_SLIDER_BAR_INPUT_RED;
                      curr_menu->select = MENU_SLIDER_BAR_INPUT_RED;
                      //BKTODO: Need callback functions
                      InitSlideCtrl(&img_slide_backlight, 
                              &BackLightGetRate,
                              &BackLightSetRate,
                              &BackLightSetRate,
                              &BackLightChangeRate);
              #endif
4296   1              curr_menu = &menu_disp_resolution_page;
4297   1              curr_menu->focus = MENU_DISP_RESOLUTION_OK;
4298   1      
4299   1              curr_menu->items[0].p();
4300   1              //BKTODO110811
4301   1              
4302   1              MenuFontOsdItemInit(0, ON);     //1BPP ALPHA ON
4303   1              MenuFontOsdItemInit(1, ON);     //1BPP ALPHA ON
4304   1      
4305   1              //add alpha here
4306   1              //FOsdWinAlphaPixel(0,1,15);
4307   1              //FOsdWinAlphaPixel(1,1,15);
4308   1      
4309   1              WriteTW88Page(PAGE2_SCALER);
4310   1              if(ReadTW88(REG21C) & 0x04) {
4311   2                      //freerun manual, means no signal
4312   2                      MenuFontOsdItemString(0,"N/A");
4313   2              }
4314   1              else {
4315   2                      //BK110811 BKTODO----
4316   2      #if 0
                              wValue=InputGetHLen();
                              TWitoa(wValue,str_buff);
                              TWstrcat(str_buff,"x");
                              wValue=InputGetVLen();
                              TWitoa(wValue,menu_str_buff);
                              TWstrcat(str_buff,menu_str_buff);
                              MenuFontOsdItemString(0,str_buff);
              #else
4325   2                      MenuFontOsdItemString(0,FOsdMsgBuff);
4326   2                      //FOsdCopyMsgBuff2Osdram(ON);
4327   2      #endif
4328   2              }
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 71  

4329   1              TWitoa(PANEL_H,str_buff);
4330   1              TWstrcat(str_buff,"x");
4331   1              TWitoa(PANEL_V,menu_str_buff);
4332   1              TWstrcat(str_buff,menu_str_buff);
4333   1              MenuFontOsdItemString(1,str_buff);
4334   1                      
4335   1      }
4336          
4337          
4338          
4339          //----------------------
4340          // main->system->more->OSD->language MENU
4341          //----------------------
4342          //-------------------------------------
4343          // language popup MENU
4344          //-------------------------------------
4345          
4346          //void proc_lang_bg(void) {}
4347          //void proc_lang_eng(void) {}
4348          //void proc_lang_kor(void) {}
4349          //void proc_lang_jpn(void) {}
4350          //void proc_lang_chn(void) {}
4351          //void proc_lang_ok(void) {}
4352          
4353          
4354          
4355          
4356          //audio--------------
4357          /*
4358          one popup ok   - win 8
4359          one popup bg   - win 7
4360          one focus          - win 6
4361          one source         - win 5
4362          one tunner         - win 4
4363          one progress   - win 3
4364          one volume         - win 2
4365          one bg             - win 1
4366          one animation  - win 0
4367          
4368          fosd0           - title,artist...
4369          fosd1           - progress
4370          fosd2           - tunner
4371          
4372          //gps-------------------
4373          one bg
4374          one map with full transparent
4375          one campus
4376          one focus
4377          
4378          
4379          //phone-------------------
4380          one bg
4381          one focus
4382          one volume
4383          */
4384          
4385          
4386          
4387          //=========================
4388          // START / END
4389          //=========================
4390          
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 72  

4391          
4392          //-----------------------
4393          //description
4394          //      Menu Start
4395          void MenuStart(void)
4396          {
4397   1              dMenuPrintf("\nMenuStart");
4398   1              menu_on = 1;
4399   1              menu_lock_scroll = 0;
4400   1              UseSOsdHwBuff = 0;
4401   1      
4402   1              //turn off NoSignal Task if it was ON
4403   1              if(TaskNoSignal_getCmd() != TASK_CMD_DONE) {
4404   2                      //turn off NoSignal Task
4405   2                      TaskNoSignal_setCmd(TASK_CMD_DONE); 
4406   2              }
4407   1              //turn off Logo if it was ON
4408   1              if(NoSignalLogoShow)
4409   1                      RemoveLogo(); 
4410   1      
4411   1              //clean SOsdWinBuff[].
4412   1              SOsdWinBuffClean(0);
4413   1      
4414   1              //init SpiOSD/FontOSD DE.
4415   1              SpiOsdSetDeValue();
4416   1              FOsdSetDeValue();
4417   1      
4418   1              //disable all FontOsd/SpiOsd HW Windows
4419   1              SpiOsdWinHWOffAll(0);   //without wait
4420   1      
4421   1              //download font set & init Multi-BPP location
4422   1              FontOsdInit();
4423   1      
4424   1              //init Global variables
4425   1              menu_level = 0;
4426   1      
4427   1              //init SOSD_WIN0 here
4428   1      
4429   1      
4430   1              //Read EE values
4431   1              //example:
4432   1              //      MenuInputMain = GetInputMain(); //do not use, InputMain = GetInputEE(); in menu.c
4433   1              //      menu_value_osd_language = EE_Read(EEP_OSDLANG);
4434   1              //      menu_value_timeout = EE_Read(EEP_OSD_TIMEOUT);
4435   1              //      menu_value_transparency = EE_Read(EEP_OSD_TRANSPARENCY);
4436   1      
4437   1              osd_lang = 0;   //read OSDLANG  //BKTODO:USE EE
4438   1      
4439   1              //init SOSD
4440   1              SpiOsdEnable(ON);
4441   1              SpiOsdResetRLC(1, 0);
4442   1              SpiOsdWinImageLocBit(1,0);
4443   1              SpiOsdWinLutOffset( 1, 0 /*SOSD_WIN_BG,  WINBG_LUTLOC*/ );  //old: SpiOsdLoadLUT_ptr
4444   1              SpiOsdWinFillColor( 1, 0 );
4445   1      
4446   1              //init FOSD
4447   1      
4448   1              //link menu_main_info
4449   1              curr_menu = &menu_main_page;
4450   1              curr_menu->focus = MENU_MAIN_VIDEO;
4451   1              curr_menu->select = curr_menu->focus;
4452   1      
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 73  

4453   1              //call bg proc
4454   1              curr_menu->items[0].p();
4455   1      }
4456          
4457          //-----------------------
4458          //description
4459          //      Menu End
4460          void MenuEnd(void)
4461          {
4462   1              BYTE value;
4463   1              //
4464   1              //byebye
4465   1              //
4466   1              MenuPrintf("\nMenuEnd()");
4467   1      
4468   1              SpiOsdWinHWOffAll(1);   //with VB       
4469   1              SpiOsdEnable(OFF);
4470   1              FOsdWinOffAll();        
4471   1      #ifdef USE_SFLASH_EEPROM
4472   1              //update all changed EEPROM value
4473   1      #endif
4474   1      
4475   1      #ifdef USE_SFLASH_EEPROM
4476   1              //clean EEPROM.
4477   1              EE_CleanBlocks();
4478   1      #endif
4479   1      
4480   1              menu_on = 0;
4481   1              menu_level = 0;
4482   1      
4483   1              MenuInputMain = GetInputMain();
4484   1      
4485   1      
4486   1              FontOsdInit(); //need it for Task message.
4487   1              FOsdSetDeValue();
4488   1      
4489   1              //prepare video info
4490   1      
4491   1      
4492   1              //turn On NoSignal Task if it is NoSignal
4493   1              //Pls, link with Task_Enable
4494   1              WriteTW88Page(PAGE0_GENERAL);
4495   1              value = ReadTW88(REG004);
4496   1              if(value & 0x01) {              //BKTODO110714 if outofrange,...
4497   2                      FOsdIndexMsgPrint(FOSD_STR2_NOSIGNAL);
4498   2                      TaskNoSignal_setCmd(TASK_CMD_WAIT_VIDEO);
4499   2      
4500   2      #ifdef NOSIGNAL_LOGO
4501   2                      InitLogo1();
4502   2      #endif
4503   2              }
4504   1              else {
4505   2                      if(MenuInputMain==INPUT_PC) {
4506   3                              //if()  it is a out of range
4507   3                              //      FOsdIndexMsgPrint(FOSD_STR3_OUTRANGE);
4508   3                      }
4509   2              }
4510   1      
4511   1              //recover output active position.
4512   1              WriteTW88Page(PAGE2_SCALER);
4513   1              WriteTW88(REG201, ReadTW88(REG201) & 0xFD);
4514   1      
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 74  

4515   1      #if 1 //BK110707
4516   1              //do not change it here.
4517   1      #else
                      //turn ON ISR.
                      WriteTW88Page(PAGE0_GENERAL );
                      switch(MenuInputMain) {
                      case INPUT_CVBS:
                      case INPUT_SVIDEO:
                      case INPUT_COMP:
                              WriteTW88(REG003, 0xFC );       // enable VDLOSS, SW
                              break;
                      case INPUT_PC:
                      case INPUT_DVI:
                      case INPUT_HDMIPC:
                      case INPUT_HDMITV:
                      case INPUT_BT656:
                              WriteTW88(REG003, 0xF8 );       // enable HSyncVSync, VDLOSS, SW
                              break;
                      default:
                              WriteTW88(REG003, 0xFC );       // enable VDLOSS, SW
                              break;
                      }       
              #endif
4538   1      }
4539          
4540          
4541          //reset menu_level & menu_on.
4542          //caller has to clear SOSD
4543          #ifdef SUPPORT_RCD
              void MenuQuitMenu(void)
              {
                      menu_level=0;
                      menu_on=0;
              }
              #endif
4550          
4551          
4552          
4553          //==================================
4554          // test routine
4555          //==================================
4556          BYTE nStartPosX;
4557          BYTE nStartPosY;
4558          BYTE nCarIndex=0;
4559          BYTE nMoving=0;
4560          #define WIN_GRID_IMG            1
4561          #define _BLOCK_OFFSET           0x3B100L
4562          #define _IMG_OFFSET                     0xF00
4563          #define _CNT_MAX                        62
4564          #define TEST_GRID_LUT_LEN               0x040L
4565          #define TEST_GRID_START                 0x800000        //from 8MByte. use 16MByte(128MBit) SPIFLASH
4566          
4567          #define TEST_GRID_H                     760
4568          #define TEST_GRID_V                     480
4569          
4570          DWORD lGridStartAddr;
4571          DWORD lOffsetStart;
4572          
4573          FAR CONST BYTE test_grid_rle[5][_CNT_MAX] = {
4574          //###################################################################################################
4575          
4576                  //01. Velfire/Alphard
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 75  

4577                  //RLC 00,       01,   02,   03,   04,   05,   06,   07,   08,   09,
4578                  {       0x4c, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC00 - 09
4579                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC10 - 19
4580                          0x4a, 0x4a,     0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,         //RLC20 - 29
4581                          0x49, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC30 - 39
4582                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC40 - 49
4583                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC50 - 59
4584                          0x4a, 0x4a},                                                                                                    //RLC60 - 61
4585          
4586                  //02. Prius-alpha
4587                  //RLC 00,       01,   02,   03,   04,   05,   06,   07,   08,   09,
4588                  {       0x4b, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC00 - 09
4589                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC10 - 19
4590                          0x4a, 0x4a,     0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,         //RLC20 - 29
4591                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC30 - 39
4592                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC40 - 49
4593                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC50 - 59
4594                          0x4a, 0x4a},                                                                                                    //RLC60 - 61
4595          
4596                  //03. Prius
4597                  //RLC 00,       01,   02,   03,   04,   05,   06,   07,   08,   09,
4598                  {       0x4b, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC00 - 09
4599                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC10 - 19
4600                          0x4a, 0x4a,     0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,         //RLC20 - 29
4601                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC30 - 39
4602                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC40 - 49
4603                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC50 - 59
4604                          0x4a, 0x4a},                                                                                                    //RLC60 - 61
4605          
4606                  //04. Delica
4607                  //RLC 00,       01,   02,   03,   04,   05,   06,   07,   08,   09,
4608                  {       0x4b, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC00 - 09
4609                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC10 - 19
4610                          0x4a, 0x4a,     0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,         //RLC20 - 29
4611                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC30 - 39
4612                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC40 - 49
4613                          0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC50 - 59
4614                          0x4a, 0x4a},                                                                                                    //RLC60 - 61
4615          
4616                  //xx. Test modes...
4617                  //RLC 00,       01,   02,   03,   04,   05,   06,   07,   08,   09,
4618                  {       0x4b, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,             //RLC00 - 09
4619                          0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,             //RLC10 - 19
4620                          0x49, 0x49,     0x49, 0x49, 0x49, 0x49, 0x4a, 0x4a, 0x4a, 0x4a,         //RLC20 - 29
4621                          0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,             //RLC30 - 39
4622                          0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,             //RLC40 - 49
4623                          0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4a, 0x4a, 0x4a, 0x4a,             //RLC50 - 59
4624                          0x4a, 0x49},                                                                                                    //RLC60 - 61
4625          };
4626          
4627          
4628          
4629          void DParkGridAction(BYTE n)
4630          {
4631   1              DWORD   offset;
4632   1              BYTE rle_byte;
4633   1              DECLARE_LOCAL_page;
4634   1      
4635   1              ReadTW88Page(page);
4636   1      
4637   1              offset = (_IMG_OFFSET * (DWORD)n) + lOffsetStart;
4638   1              rle_byte = test_grid_rle[nCarIndex][n];
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 76  

4639   1      
4640   1      
4641   1      
4642   1              SpiOsdWinImageLoc( WIN_GRID_IMG, offset );
4643   1              SpiOsdWinImageSizeWH(WIN_GRID_IMG, TEST_GRID_H, TEST_GRID_V );
4644   1              SpiOsdWinScreen( WIN_GRID_IMG, nStartPosX, nStartPosY , TEST_GRID_H, TEST_GRID_V ); //noisy on bottom are
             -a when nStartPosY has a 5.
4645   1              //SpiOsdWinScreen( WIN_GRID_IMG, nStartPosX, nStartPosY , TEST_GRID_H, TEST_GRID_V - nStartPosY ); //fix 
             -the noise issue.
4646   1              SpiOsdWinPixelAlpha( WIN_GRID_IMG, ON );
4647   1              SpiOsdWinPixelWidth(WIN_GRID_IMG,rle_byte >> 4);        //all 4BPP.
4648   1              SpiOsdWinLutOffset(WIN_GRID_IMG,0);             //all 0
4649   1              SpiOsdWinBuffEnable( WIN_GRID_IMG, ON );
4650   1      
4651   1      
4652   1      
4653   1              WaitVBlank(1);
4654   1      //PORT_DEBUG=0;
4655   1              SpiOsdRLC( WIN_GRID_IMG, rle_byte >> 4, rle_byte & 0x0F);
4656   1              SpiOsdLoadLUT(WIN_GRID_IMG, 1, 0, TEST_GRID_LUT_LEN, lGridStartAddr); //Load Palette : type, LUT offset, 
             -size, address
4657   1              SOsdWinBuffWrite2Hw(WIN_GRID_IMG, WIN_GRID_IMG);
4658   1              WriteTW88Page( PAGE4_SOSD );
4659   1              WriteTW88( REG410, 0xc3 );              // LUT Write Mode, En & byte ptr inc.
4660   1              //assume LUT is under 256
4661   1              //addr                                                  data
4662   1              WriteTW88(REG411, 0x00);                        WriteTW88(REG412, 0x7F);
4663   1              /*WriteTW88(REG411, 0x01);*/            WriteTW88(REG412, 0x3F);
4664   1              /*WriteTW88(REG411, 0x02);*/            WriteTW88(REG412, 0x3F);
4665   1              /*WriteTW88(REG411, 0x03);*/            WriteTW88(REG412, 0x3F);
4666   1              /*WriteTW88(REG411, 0x04);*/            WriteTW88(REG412, 0x3F);
4667   1              /*WriteTW88(REG411, 0x05);*/            WriteTW88(REG412, 0x3F);
4668   1              /*WriteTW88(REG411, 0x06);*/            WriteTW88(REG412, 0x3F);
4669   1              /*WriteTW88(REG411, 0x07);*/            WriteTW88(REG412, 0x3F);
4670   1              /*WriteTW88(REG411, 0x08);*/            WriteTW88(REG412, 0x3F);
4671   1              /*WriteTW88(REG411, 0x09);*/            WriteTW88(REG412, 0x3F);
4672   1              /*WriteTW88(REG411, 0x0a);*/            WriteTW88(REG412, 0x3F);
4673   1              /*WriteTW88(REG411, 0x0b);*/            WriteTW88(REG412, 0x3F);
4674   1              /*WriteTW88(REG411, 0x0c);*/            WriteTW88(REG412, 0x3F);
4675   1              /*WriteTW88(REG411, 0x0d);*/            WriteTW88(REG412, 0x3F);
4676   1              /*WriteTW88(REG411, 0x0e);*/            WriteTW88(REG412, 0x3F);
4677   1              /*WriteTW88(REG411, 0x0f);*/            WriteTW88(REG412, 0x3F);
4678   1      //PORT_DEBUG=1;
4679   1              dPuts("\nFinished LUT GRID DMA");
4680   1              WriteTW88Page(page);    
4681   1      }
4682          
4683          void TestDParkGridAction(void)
4684          {
4685   1              BYTE n;
4686   1              DECLARE_LOCAL_page;
4687   1      
4688   1              ReadTW88Page(page);
4689   1              
4690   1              SOsdWinBuffClean(0);
4691   1              //init DE
4692   1              SpiOsdSetDeValue();
4693   1              SpiOsdWinHWOffAll(0); //without wait
4694   1              SpiOsdEnable(ON);
4695   1      
4696   1      
4697   1              nStartPosX = 0;
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 77  

4698   1              nStartPosY = 0;
4699   1              while(!RS_ready()) {                    
4700   2                      for(nCarIndex=0; nCarIndex < 4; nCarIndex++) {
4701   3      
4702   3                              lGridStartAddr = TEST_GRID_START+ _BLOCK_OFFSET * nCarIndex;
4703   3                              lOffsetStart = lGridStartAddr + TEST_GRID_LUT_LEN;
4704   3      
4705   3                              for(n=0; n < _CNT_MAX; n++) {
4706   4                                      DParkGridAction(n);
4707   4                                      if(n) delay1ms(100);
4708   4                                      else  delay1ms(500);
4709   4      
4710   4                              }
4711   3                      }
4712   2                      nStartPosX += 50;
4713   2                      nStartPosX %= 400;
4714   2                      nStartPosY += 50;
4715   2                      nStartPosY %= 240;
4716   2              }
4717   1      
4718   1      
4719   1      
4720   1              WaitVBlank(1);
4721   1              SpiOsdWinBuffEnable( WIN_GRID_IMG, OFF ); //disable window.
4722   1              SpiOsdEnable(OFF);
4723   1              WriteTW88Page(page);    
4724   1      }
4725          
4726          void TestAutoDParkGridAction(BYTE positionX, BYTE positionY)
4727          {
4728   1              BYTE n;
4729   1              DECLARE_LOCAL_page
4730   1              //BYTE ch;
4731   1      
4732   1              ReadTW88Page(page);
4733   1              
4734   1              SOsdWinBuffClean(0);
4735   1              //init DE
4736   1              SpiOsdSetDeValue();
4737   1              SpiOsdWinHWOffAll(0); //without wait
4738   1              SpiOsdEnable(ON);
4739   1      
4740   1              nStartPosX = positionX;
4741   1              nStartPosY = positionY;
4742   1      
4743   1              //Printf("\nto quit, press 'q'");
4744   1              while(!RS_ready()) {
4745   2                      for(nCarIndex=0; nCarIndex < 4; nCarIndex++) {
4746   3      
4747   3                              lGridStartAddr = TEST_GRID_START+ _BLOCK_OFFSET * nCarIndex;
4748   3                              lOffsetStart = lGridStartAddr + TEST_GRID_LUT_LEN;
4749   3      
4750   3                              for(n=0; n < 58 /*_CNT_MAX*/; n++) {
4751   4                                      //while(!RS_ready());
4752   4                                      //ch = RS_rx();
4753   4                                      //if(ch=='q') 
4754   4                                      //      break;
4755   4                                      DParkGridAction(n);
4756   4                              }
4757   3                              
4758   3                      }
4759   2                      //if(ch=='q')
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 78  

4760   2                      //      break;
4761   2              }
4762   1              RS_rx();        //clear
4763   1              WaitVBlank(1);
4764   1              SpiOsdWinBuffEnable( WIN_GRID_IMG, OFF ); //disable window.
4765   1              SpiOsdEnable(OFF);
4766   1              WriteTW88Page(page);    
4767   1      }
4768          void TestStepDParkGridAction(BYTE positionX, BYTE positionY)
4769          {
4770   1              DECLARE_LOCAL_page
4771   1      
4772   1              ReadTW88Page(page);
4773   1              
4774   1              SOsdWinBuffClean(0);
4775   1              //init DE
4776   1              SpiOsdSetDeValue();
4777   1              SpiOsdWinHWOffAll(0); //without wait
4778   1              SpiOsdEnable(ON);
4779   1      
4780   1              nStartPosX = positionX;
4781   1              nStartPosY = positionY;
4782   1      
4783   1              lGridStartAddr = TEST_GRID_START+ _BLOCK_OFFSET * nCarIndex;
4784   1              lOffsetStart = lGridStartAddr + TEST_GRID_LUT_LEN;
4785   1              Printf("\nCar:%bd, move:%bd", nCarIndex, nMoving);
4786   1              DParkGridAction(nMoving);
4787   1              nMoving++;
4788   1              if(nMoving==58) {
4789   2                      nMoving=0;
4790   2                      nCarIndex++;
4791   2                      if(nCarIndex==5)
4792   2                              nCarIndex=0;
4793   2              }
4794   1              if(nMoving==1 &&  nCarIndex==4) {
4795   2                      nCarIndex = 0;
4796   2                      nMoving = 0;
4797   2              }
4798   1      }
4799          #endif //..SUPPORT_SPIOSD
4800          
4801          
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 79  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com02DA (BEGIN)
0000         L?0731:
0000 75F017            MOV     B,#017H
0003 A4                MUL     AB
0004 FF                MOV     R7,A
0005 AEF0              MOV     R6,B
0007 900005            MOV     DPTR,#05H
000A 120000      E     LCALL   ?C?PLDOPTR
000D 900013            MOV     DPTR,#013H
0010         L?0732:
0010 E9                MOV     A,R1
0011 2F                ADD     A,R7
0012 F9                MOV     R1,A
0013 EA                MOV     A,R2
0014 3E                ADDC    A,R6
0015 FA                MOV     R2,A
0016         L?0733:
0016 120000      E     LCALL   ?C?CLDOPTR
0019         L?0734:
0019 FF                MOV     R7,A
001A         L?0735:
001A 900000      R     MOV     DPTR,#curr_menu
001D         L?0736:
001D E0                MOVX    A,@DPTR
001E FB                MOV     R3,A
001F         L?0737:
001F A3                INC     DPTR
0020 E0                MOVX    A,@DPTR
0021 FA                MOV     R2,A
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 F9                MOV     R1,A
0025 22                RET     
0026         L?0738:
0026 120000      R     LCALL   push_menu_stack_level
0029 7A00        E     MOV     R2,#HIGH menu_phone_page
002B 7900        E     MOV     R1,#LOW menu_phone_page
002D         L?0739:
002D 7B01              MOV     R3,#01H
002F         L?0740:
002F 900000      R     MOV     DPTR,#curr_menu
0032 EB                MOV     A,R3
0033 F0                MOVX    @DPTR,A
0034 A3                INC     DPTR
0035 EA                MOV     A,R2
0036 F0                MOVX    @DPTR,A
0037 A3                INC     DPTR
0038 E9                MOV     A,R1
0039 F0                MOVX    @DPTR,A
003A         L?0741:
003A 7401              MOV     A,#01H
003C         L?0742:
003C 900001            MOV     DPTR,#01H
003F         L?0743:
003F 120000      E     LCALL   ?C?CSTOPTR
0042         L?0744:
0042 900005            MOV     DPTR,#05H
0045 120000      E     LCALL   ?C?PLDOPTR
0048         L?0745:
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 80  

0048 900001            MOV     DPTR,#01H
004B 020000      E     LJMP    ?C?PLDOPTR
004E         L?0746:
004E F0                MOVX    @DPTR,A
004F E500        E     MOV     A,regTW88+01H
0051 2412              ADD     A,#012H
0053 F582              MOV     DPL,A
0055 E500        E     MOV     A,regTW88
0057 3404              ADDC    A,#04H
0059 F583              MOV     DPH,A
005B 743F              MOV     A,#03FH
005D F0                MOVX    @DPTR,A
005E E500        E     MOV     A,regTW88+01H
0060 2412              ADD     A,#012H
0062 F582              MOV     DPL,A
0064 E500        E     MOV     A,regTW88
0066 3404              ADDC    A,#04H
0068 F583              MOV     DPH,A
006A 743F              MOV     A,#03FH
006C F0                MOVX    @DPTR,A
006D E500        E     MOV     A,regTW88+01H
006F 2412              ADD     A,#012H
0071 F582              MOV     DPL,A
0073 E500        E     MOV     A,regTW88
0075 3404              ADDC    A,#04H
0077 F583              MOV     DPH,A
0079 743F              MOV     A,#03FH
007B F0                MOVX    @DPTR,A
007C E500        E     MOV     A,regTW88+01H
007E 2412              ADD     A,#012H
0080 F582              MOV     DPL,A
0082 E500        E     MOV     A,regTW88
0084 3404              ADDC    A,#04H
0086 F583              MOV     DPH,A
0088 743F              MOV     A,#03FH
008A F0                MOVX    @DPTR,A
008B E500        E     MOV     A,regTW88+01H
008D 2412              ADD     A,#012H
008F F582              MOV     DPL,A
0091 E500        E     MOV     A,regTW88
0093 3404              ADDC    A,#04H
0095 F583              MOV     DPH,A
0097 743F              MOV     A,#03FH
0099 F0                MOVX    @DPTR,A
009A E500        E     MOV     A,regTW88+01H
009C 2412              ADD     A,#012H
009E F582              MOV     DPL,A
00A0 E500        E     MOV     A,regTW88
00A2 3404              ADDC    A,#04H
00A4 F583              MOV     DPH,A
00A6 743F              MOV     A,#03FH
00A8 F0                MOVX    @DPTR,A
00A9 E500        E     MOV     A,regTW88+01H
00AB 2412              ADD     A,#012H
00AD F582              MOV     DPL,A
00AF E500        E     MOV     A,regTW88
00B1 3404              ADDC    A,#04H
00B3 F583              MOV     DPH,A
00B5 743F              MOV     A,#03FH
00B7 F0                MOVX    @DPTR,A
00B8 22                RET     
00B9         L?0747:
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 81  

00B9         L?0748:
00B9 120000      R     LCALL   push_menu_stack_level
00BC         L?0749:
00BC 7A00        E     MOV     R2,#HIGH menu_slider_page
00BE 7900        E     MOV     R1,#LOW menu_slider_page
00C0         L?0750:
00C0 7B01              MOV     R3,#01H
00C2         L?0751:
00C2 EB                MOV     A,R3
00C3         L?0752:
00C3 900000      R     MOV     DPTR,#curr_menu
00C6         L?0753:
00C6 F0                MOVX    @DPTR,A
00C7 A3                INC     DPTR
00C8 EA                MOV     A,R2
00C9 F0                MOVX    @DPTR,A
00CA A3                INC     DPTR
00CB E9                MOV     A,R1
00CC F0                MOVX    @DPTR,A
00CD 22                RET     
00CE         L?0754:
00CE 900002            MOV     DPTR,#02H
00D1         L?0755:
00D1 120000      E     LCALL   ?C?CLDOPTR
00D4         L?0756:
00D4 900001            MOV     DPTR,#01H
00D7         L?0757:
00D7 120000      E     LCALL   ?C?CSTOPTR
00DA         L?0758:
00DA 900001            MOV     DPTR,#01H
00DD 020000      E     LJMP    ?C?CLDOPTR
00E0         L?0759:
00E0 900000      R     MOV     DPTR,#curr_menu
00E3 A3                INC     DPTR
00E4 A3                INC     DPTR
00E5         L?0760:
00E5 EE                MOV     A,R6
00E6         L?0761:
00E6 75F017            MOV     B,#017H
00E9 A4                MUL     AB
00EA FF                MOV     R7,A
00EB AEF0              MOV     R6,B
00ED         L?0762:
00ED 900005            MOV     DPTR,#05H
00F0 120000      E     LCALL   ?C?PLDOPTR
00F3 E9                MOV     A,R1
00F4 2F                ADD     A,R7
00F5 F9                MOV     R1,A
00F6 EA                MOV     A,R2
00F7 3E                ADDC    A,R6
00F8 FA                MOV     R2,A
00F9 22                RET     
00FA         L?0763:
00FA         L?0764:
00FA 900002            MOV     DPTR,#02H
00FD 120000      E     LCALL   ?C?CSTOPTR
0100         L?0765:
0100 900004            MOV     DPTR,#04H
0103         L?0766:
0103 120000      E     LCALL   ?C?CLDOPTR
0106 FF                MOV     R7,A
0107         L?0767:
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 82  

0107 900002            MOV     DPTR,#02H
010A 020000      E     LJMP    ?C?CLDOPTR
010D         L?0768:
010D         L?0769:
010D E4                CLR     A
010E FC                MOV     R4,A
010F FD                MOV     R5,A
0110 FE                MOV     R6,A
0111 FB                MOV     R3,A
0112 7AB1              MOV     R2,#0B1H
0114 7903              MOV     R1,#03H
0116 F8                MOV     R0,A
0117 120000      E     LCALL   ?C?LMUL
011A E4                CLR     A
011B 2F                ADD     A,R7
011C FF                MOV     R7,A
011D E4                CLR     A
011E 3E                ADDC    A,R6
011F FE                MOV     R6,A
0120 ED                MOV     A,R5
0121 3480              ADDC    A,#080H
0123 FD                MOV     R5,A
0124 E4                CLR     A
0125 3C                ADDC    A,R4
0126 FC                MOV     R4,A
0127 900000      R     MOV     DPTR,#lGridStartAddr
012A 120000      E     LCALL   ?C?LSTXDATA
012D         L?0770:
012D 900000      R     MOV     DPTR,#lGridStartAddr
0130         L?0771:
0130 E0                MOVX    A,@DPTR
0131 FC                MOV     R4,A
0132 A3                INC     DPTR
0133 E0                MOVX    A,@DPTR
0134 FD                MOV     R5,A
0135 A3                INC     DPTR
0136 E0                MOVX    A,@DPTR
0137 FE                MOV     R6,A
0138 A3                INC     DPTR
0139 E0                MOVX    A,@DPTR
013A 22                RET     
013B         L?0772:
013B         L?0773:
013B 900001            MOV     DPTR,#01H
013E 7405              MOV     A,#05H
0140 120000      E     LCALL   ?C?CSTOPTR
0143 900002            MOV     DPTR,#02H
0146         L?0774:
0146 7405              MOV     A,#05H
0148 120000      E     LCALL   ?C?CSTOPTR
014B         L?0775:
014B 900000      R     MOV     DPTR,#?_InitSlideCtrl?BYTE+03H
014E 74FF              MOV     A,#0FFH
0150 F0                MOVX    @DPTR,A
0151 A3                INC     DPTR
0152 22                RET     
0153         L?0776:
0153 A3                INC     DPTR
0154         L?0777:
0154 F0                MOVX    @DPTR,A
0155 E9                MOV     A,R1
0156         L?0778:
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 83  

0156 A3                INC     DPTR
0157         L?0779:
0157 F0                MOVX    @DPTR,A
0158 A3                INC     DPTR
0159 74FF              MOV     A,#0FFH
015B F0                MOVX    @DPTR,A
015C A3                INC     DPTR
015D 22                RET     
015E         L?0780:
015E         L?0781:
015E 900005            MOV     DPTR,#05H
0161 120000      E     LCALL   ?C?PLDOPTR
0164         L?0782:
0164 900000      R     MOV     DPTR,#i
0167         L?0783:
0167 E0                MOVX    A,@DPTR
0168         L?0784:
0168 75F017            MOV     B,#017H
016B A4                MUL     AB
016C 29                ADD     A,R1
016D F9                MOV     R1,A
016E EA                MOV     A,R2
016F 35F0              ADDC    A,B
0171 FA                MOV     R2,A
0172 22                RET     
0173         L?0785:
0173         L?0786:
0173 90000F            MOV     DPTR,#0FH
0176 120000      E     LCALL   ?C?ILDOPTR
0179 FF                MOV     R7,A
017A 900000      E     MOV     DPTR,#?_SpiOsdLoadLUT?BYTE+04H
017D E5F0              MOV     A,B
017F F0                MOVX    @DPTR,A
0180 A3                INC     DPTR
0181 EF                MOV     A,R7
0182 F0                MOVX    @DPTR,A
0183 120000      E     LCALL   ?C?LLDPTR0
0186 900000      E     MOV     DPTR,#?_SpiOsdLoadLUT?BYTE+06H
0189         L?0787:
0189 AC00              MOV     R4,AR0
018B AD01              MOV     R5,AR1
018D AE02              MOV     R6,AR2
018F AF03              MOV     R7,AR3
0191 020000      E     LJMP    ?C?LSTXDATA
0194         L?0788:
0194         L?0789:
0194 900000      R     MOV     DPTR,#index
0197         L?0790:
0197 E0                MOVX    A,@DPTR
0198 FF                MOV     R7,A
0199         L?0791:
0199 2400        R     ADD     A,#LOW curr_slide3_value
019B         L?0792:
019B F582              MOV     DPL,A
019D E4                CLR     A
019E 3400        R     ADDC    A,#HIGH curr_slide3_value
01A0 F583              MOV     DPH,A
01A2 22                RET     
01A3         L?0793:
01A3         L?0794:
01A3 E0                MOVX    A,@DPTR
01A4 900000      R     MOV     DPTR,#_SetSlide3Value
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 84  

01A7         L?0795:
01A7 FD                MOV     R5,A
01A8         L?0796:
01A8 A3                INC     DPTR
01A9 E0                MOVX    A,@DPTR
01AA FA                MOV     R2,A
01AB A3                INC     DPTR
01AC E0                MOVX    A,@DPTR
01AD F582              MOV     DPL,A
01AF 8A83              MOV     DPH,R2
01B1 22                RET     
01B2         L?0797:
01B2 900000      R     MOV     DPTR,#ch
01B5         L?0798:
01B5 E0                MOVX    A,@DPTR
01B6         L?0799:
01B6 FF                MOV     R7,A
01B7         L?0800:
01B7 E500        E     MOV     A,regTW88+01H
01B9 2407              ADD     A,#07H
01BB         L?0801:
01BB F582              MOV     DPL,A
01BD E500        E     MOV     A,regTW88
01BF 3403              ADDC    A,#03H
01C1 F583              MOV     DPH,A
01C3 22                RET     
01C4         L?0802:
01C4         L?0803:
01C4 90000B            MOV     DPTR,#0BH
01C7 120000      E     LCALL   ?C?ILDOPTR
01CA FD                MOV     R5,A
01CB ACF0              MOV     R4,B
01CD         L?0804:
01CD 90000D            MOV     DPTR,#0DH
01D0 020000      E     LJMP    ?C?ILDOPTR
01D3         L?0805:
01D3 900001            MOV     DPTR,#01H
01D6 EF                MOV     A,R7
01D7 120000      E     LCALL   ?C?CSTOPTR
01DA         L?0806:
01DA 900003            MOV     DPTR,#03H
01DD 020000      E     LJMP    ?C?CLDOPTR
01E0         L?0807:
01E0 7403              MOV     A,#03H
01E2         L?0808:
01E2 900001            MOV     DPTR,#01H
01E5 120000      E     LCALL   ?C?CSTOPTR
01E8         L?0809:
01E8 900005            MOV     DPTR,#05H
01EB 020000      E     LJMP    ?C?PLDOPTR
01EE         L?0810:
01EE         L?0811:
01EE A3                INC     DPTR
01EF         L?0812:
01EF 7401              MOV     A,#01H
01F1 F0                MOVX    @DPTR,A
01F2 A3                INC     DPTR
01F3 7400        R     MOV     A,#HIGH header_table
01F5 F0                MOVX    @DPTR,A
01F6 A3                INC     DPTR
01F7 7400        R     MOV     A,#LOW header_table
01F9 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 85  

01FA 22                RET     
01FB         L?0813:
01FB         L?0814:
01FB FF                MOV     R7,A
01FC 7808              MOV     R0,#08H
01FE 120000      E     LCALL   ?C?ULSHR
0201 900000      R     MOV     DPTR,#dTemp
0204 120000      E     LCALL   ?C?LSTXDATA
0207         L?0815:
0207 900000      R     MOV     DPTR,#header
020A E0                MOVX    A,@DPTR
020B FB                MOV     R3,A
020C A3                INC     DPTR
020D E0                MOVX    A,@DPTR
020E FA                MOV     R2,A
020F A3                INC     DPTR
0210 E0                MOVX    A,@DPTR
0211         L?0816:
0211 2408              ADD     A,#08H
0213 F9                MOV     R1,A
0214 E4                CLR     A
0215 3A                ADDC    A,R2
0216 FA                MOV     R2,A
0217 22                RET     
0218         L?0817:
0218 900004            MOV     DPTR,#04H
021B 120000      E     LCALL   ?C?LLDOPTR
021E 900000      R     MOV     DPTR,#start_byte
0221         L?0818:
0221 E0                MOVX    A,@DPTR
0222 F8                MOV     R0,A
0223 A3                INC     DPTR
0224         L?0819:
0224 E0                MOVX    A,@DPTR
0225 F9                MOV     R1,A
0226 A3                INC     DPTR
0227 E0                MOVX    A,@DPTR
0228 FA                MOV     R2,A
0229 A3                INC     DPTR
022A E0                MOVX    A,@DPTR
022B 22                RET     
022C         L?0820:
022C         L?0821:
022C 900004            MOV     DPTR,#04H
022F         L?0822:
022F 120000      E     LCALL   ?C?ILDOPTR
0232 FF                MOV     R7,A
0233 AEF0              MOV     R6,B
0235 22                RET     
0236         L?0823:
0236 900002            MOV     DPTR,#02H
0239 120000      E     LCALL   ?C?CSTOPTR
023C         L?0824:
023C 7401              MOV     A,#01H
023E         L?0825:
023E 900001            MOV     DPTR,#01H
0241 020000      E     LJMP    ?C?CSTOPTR
0244         L?0826:
0244         L?0827:
0244 EB                MOV     A,R3
0245 8A83              MOV     DPH,R2
0247 8982              MOV     DPL,R1
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 86  

0249 7B01              MOV     R3,#01H
024B 22                RET     
024C         L?0828:
024C         L?0829:
024C 90000B            MOV     DPTR,#0BH
024F 120000      E     LCALL   ?C?ILDOPTR
0252 900000      E     MOV     DPTR,#?_SpiOsdWinScreen?BYTE+05H
0255         L?0830:
0255 FD                MOV     R5,A
0256         L?0831:
0256 E5F0              MOV     A,B
0258 F0                MOVX    @DPTR,A
0259 A3                INC     DPTR
025A ED                MOV     A,R5
025B F0                MOVX    @DPTR,A
025C 22                RET     
025D         L?0832:
025D         L?0833:
025D EB                MOV     A,R3
025E 8A83              MOV     DPH,R2
0260 8982              MOV     DPL,R1
0262 6401              XRL     A,#01H
0264 22                RET     
0265         L?0834:
0265         L?0835:
0265 900001            MOV     DPTR,#01H
0268 120000      E     LCALL   ?C?ILDOPTR
026B FF                MOV     R7,A
026C 900000      R     MOV     DPTR,#phone_start
026F E0                MOVX    A,@DPTR
0270         L?0836:
0270 2F                ADD     A,R7
0271 FF                MOV     R7,A
0272 E4                CLR     A
0273 35F0              ADDC    A,B
0275 FE                MOV     R6,A
0276         L?0837:
0276 90000B            MOV     DPTR,#0BH
0279 020000      E     LJMP    ?C?CLDOPTR
027C         L?0838:
027C 90000B            MOV     DPTR,#0BH
027F 120000      E     LCALL   ?C?ILDOPTR
0282 900000      E     MOV     DPTR,#?_SpiOsdWinScreen?BYTE+05H
0285         L?0839:
0285 FF                MOV     R7,A
0286         L?0840:
0286 E5F0              MOV     A,B
0288 F0                MOVX    @DPTR,A
0289 A3                INC     DPTR
028A EF                MOV     A,R7
028B F0                MOVX    @DPTR,A
028C 22                RET     
028D         L?0841:
028D 900007            MOV     DPTR,#07H
0290 120000      E     LCALL   ?C?CLDOPTR
0293 FD                MOV     R5,A
0294         L?0842:
0294 900008            MOV     DPTR,#08H
0297 020000      E     LJMP    ?C?CLDOPTR
029A         L?0843:
029A 900000      R     MOV     DPTR,#sosd_win
029D         L?0844:
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 87  

029D E0                MOVX    A,@DPTR
029E FF                MOV     R7,A
029F         L?0845:
029F 900009            MOV     DPTR,#09H
02A2 020000      E     LJMP    ?C?CLDOPTR
02A5         L?0846:
02A5         L?0847:
02A5 900001            MOV     DPTR,#01H
02A8 7405              MOV     A,#05H
02AA 120000      E     LCALL   ?C?CSTOPTR
02AD         L?0848:
02AD 7405              MOV     A,#05H
02AF         L?0849:
02AF 900002            MOV     DPTR,#02H
02B2 020000      E     LJMP    ?C?CSTOPTR
02B5         L?0850:
02B5         L?0851:
02B5 900004            MOV     DPTR,#04H
02B8 120000      E     LCALL   ?C?LLDOPTR0
02BB 900000      E     MOV     DPTR,#?_SpiOsdWinImageLoc?BYTE+01H
02BE         L?0852:
02BE AC00              MOV     R4,AR0
02C0 AD01              MOV     R5,AR1
02C2 AE02              MOV     R6,AR2
02C4 AF03              MOV     R7,AR3
02C6 020000      E     LJMP    ?C?LSTXDATA
02C9         L?0853:
02C9 A3                INC     DPTR
02CA         L?0854:
02CA F0                MOVX    @DPTR,A
02CB F9                MOV     R1,A
02CC A3                INC     DPTR
02CD 74FF              MOV     A,#0FFH
02CF F0                MOVX    @DPTR,A
02D0 A3                INC     DPTR
02D1 22                RET     
02D2         L?0855:
02D2 120000      E     LCALL   ?C?LLDPTR
02D5         L?0856:
02D5 EF                MOV     A,R7
02D6 2410              ADD     A,#010H
02D8         L?0857:
02D8 FF                MOV     R7,A
02D9 E4                CLR     A
02DA 3E                ADDC    A,R6
02DB FE                MOV     R6,A
02DC E4                CLR     A
02DD 3D                ADDC    A,R5
02DE FD                MOV     R5,A
02DF E4                CLR     A
02E0 3C                ADDC    A,R4
02E1 22                RET     
02E2         L?0858:
02E2 FF                MOV     R7,A
02E3         L?0859:
02E3 E500        E     MOV     A,regTW88+01H
02E5 2401              ADD     A,#01H
02E7         L?0860:
02E7 F582              MOV     DPL,A
02E9 E500        E     MOV     A,regTW88
02EB 3402              ADDC    A,#02H
02ED F583              MOV     DPH,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 88  

02EF 22                RET     
02F0         L?0861:
02F0         L?0862:
02F0 900011            MOV     DPTR,#011H
02F3         L?0863:
02F3 120000      E     LCALL   ?C?ILDOPTR
02F6 FD                MOV     R5,A
02F7 ACF0              MOV     R4,B
02F9 22                RET     
02FA         L?0865:
02FA         L?0866:
02FA 900004            MOV     DPTR,#04H
02FD 020000      E     LJMP    ?C?ILDOPTR
0300         L?0867:
0300 5407              ANL     A,#07H
0302 FF                MOV     R7,A
0303 A3                INC     DPTR
0304 EF                MOV     A,R7
0305 F0                MOVX    @DPTR,A
0306 E0                MOVX    A,@DPTR
0307 C3                CLR     C
0308 13                RRC     A
0309 F0                MOVX    @DPTR,A
030A 900000      R     MOV     DPTR,#start_byte
030D A3                INC     DPTR
030E A3                INC     DPTR
030F A3                INC     DPTR
0310 E0                MOVX    A,@DPTR
0311 FF                MOV     R7,A
0312 E4                CLR     A
0313 7B08              MOV     R3,#08H
0315 FA                MOV     R2,A
0316 F9                MOV     R1,A
0317 F8                MOV     R0,A
0318 120000      E     LCALL   ?C?ULDIV
031B         L?0868:
031B 900000      R     MOV     DPTR,#start_byte
031E 020000      E     LJMP    ?C?LSTXDATA
0321         L?0869:
0321         L?0870:
0321 120000      E     LCALL   ?C?LLDPTR0
0324 900000      R     MOV     DPTR,#dTemp
0327 A3                INC     DPTR
0328 A3                INC     DPTR
0329 A3                INC     DPTR
032A E0                MOVX    A,@DPTR
032B FF                MOV     R7,A
032C EB                MOV     A,R3
032D 4F                ORL     A,R7
032E FF                MOV     R7,A
032F EA                MOV     A,R2
0330 FE                MOV     R6,A
0331 E9                MOV     A,R1
0332 FD                MOV     R5,A
0333 E8                MOV     A,R0
0334 FC                MOV     R4,A
0335 22                RET     
0336         L?0871:
0336 2F                ADD     A,R7
0337 FF                MOV     R7,A
0338 E5F0              MOV     A,B
033A 3E                ADDC    A,R6
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 89  

033B FE                MOV     R6,A
033C         L?0872:
033C E0                MOVX    A,@DPTR
033D FC                MOV     R4,A
033E A3                INC     DPTR
033F E0                MOVX    A,@DPTR
0340 C3                CLR     C
0341 9F                SUBB    A,R7
0342 EC                MOV     A,R4
0343 22                RET     
0344         L?0873:
0344 2401              ADD     A,#01H
0346 FD                MOV     R5,A
0347 E4                CLR     A
0348 33                RLC     A
0349 FC                MOV     R4,A
034A         L?0874:
034A E0                MOVX    A,@DPTR
034B 75F002            MOV     B,#02H
034E A4                MUL     AB
034F 2D                ADD     A,R5
0350 FF                MOV     R7,A
0351 22                RET     
0352         L?0876:
0352 EF                MOV     A,R7
0353 75F00F            MOV     B,#0FH
0356 A4                MUL     AB
0357 FF                MOV     R7,A
0358         L?0877:
0358 E5F0              MOV     A,B
035A 8FF0              MOV     B,R7
035C 020000      E     LJMP    ?C?IILDX
035F         L?0878:
035F         L?0879:
035F 900001            MOV     DPTR,#01H
0362 120000      E     LCALL   ?C?LLDOPTR0
0365 EF                MOV     A,R7
0366 2B                ADD     A,R3
0367 FF                MOV     R7,A
0368 EE                MOV     A,R6
0369 3A                ADDC    A,R2
036A FE                MOV     R6,A
036B ED                MOV     A,R5
036C 39                ADDC    A,R1
036D FD                MOV     R5,A
036E EC                MOV     A,R4
036F 38                ADDC    A,R0
0370 22                RET     
0371         L?0880:
0371         L?0881:
0371 900006            MOV     DPTR,#06H
0374 020000      E     LJMP    ?C?ILDOPTR
0377         L?0882:
0377         L?0883:
0377 900010            MOV     DPTR,#010H
037A 020000      E     LJMP    ?C?CLDOPTR
037D         L?0884:
037D         L?0885:
037D 7C00              MOV     R4,#00H
037F         L?0886:
037F 900000      R     MOV     DPTR,#curr_slide_value
0382 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 90  

0383 FD                MOV     R5,A
0384 E4                CLR     A
0385 FF                MOV     R7,A
0386 22                RET     
0387         L?0887:
0387         L?0888:
0387 7405              MOV     A,#05H
0389         L?0889:
0389 900001            MOV     DPTR,#01H
038C 020000      E     LJMP    ?C?CSTOPTR
038F         L?0890:
038F EF                MOV     A,R7
0390 2406              ADD     A,#06H
0392         L?0891:
0392 FD                MOV     R5,A
0393 E4                CLR     A
0394 33                RLC     A
0395 FC                MOV     R4,A
0396 EE                MOV     A,R6
0397 C3                CLR     C
0398 9D                SUBB    A,R5
0399 EC                MOV     A,R4
039A 6480              XRL     A,#080H
039C F8                MOV     R0,A
039D 7480              MOV     A,#080H
039F 98                SUBB    A,R0
03A0 22                RET     
03A1         L?0892:
03A1         L?0893:
03A1 900011            MOV     DPTR,#011H
03A4 020000      E     LJMP    ?C?ILDOPTR
03A7         L?0894:
03A7 900000      R     MOV     DPTR,#image
03AA         L?0895:
03AA E0                MOVX    A,@DPTR
03AB FB                MOV     R3,A
03AC A3                INC     DPTR
03AD E0                MOVX    A,@DPTR
03AE FA                MOV     R2,A
03AF A3                INC     DPTR
03B0 E0                MOVX    A,@DPTR
03B1 22                RET     
03B2         L?0896:
03B2 7404              MOV     A,#04H
03B4         L?0897:
03B4 900002            MOV     DPTR,#02H
03B7 020000      E     LJMP    ?C?CSTOPTR
03BA         L?0898:
03BA 120000      R     LCALL   push_menu_stack_level
03BD         L?0899:
03BD 900000      R     MOV     DPTR,#curr_menu
03C0 7401              MOV     A,#01H
03C2 F0                MOVX    @DPTR,A
03C3 A3                INC     DPTR
03C4 22                RET     
03C5         L?0900:
03C5         L?0901:
03C5 A3                INC     DPTR
03C6 E4                CLR     A
03C7 75F001            MOV     B,#01H
03CA 120000      E     LCALL   ?C?ILDIX
03CD A9F0              MOV     R1,B
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 91  

03CF FA                MOV     R2,A
03D0 020000      E     LJMP    ?C?CLDPTR
03D3         L?0902:
03D3         L?0903:
03D3 120000      E     LCALL   ?C?LLDPTR
03D6 7808              MOV     R0,#08H
03D8 120000      E     LCALL   ?C?LSHL
03DB 120000      E     LCALL   ?C?LSTPTR
03DE 900000      R     MOV     DPTR,#dTemp
03E1 22                RET     
03E2         L?0904:
03E2 FD                MOV     R5,A
03E3         L?0905:
03E3 90000A            MOV     DPTR,#0AH
03E6 020000      E     LJMP    ?C?CLDOPTR
03E9         L?0907:
03E9         L?0908:
03E9 900008            MOV     DPTR,#08H
03EC 020000      E     LJMP    ?C?PLDOPTR
03EF         L?0909:
03EF         L?0910:
03EF 900000      R     MOV     DPTR,#MenuNoSignal
03F2 EF                MOV     A,R7
03F3 F0                MOVX    @DPTR,A
03F4 7F01              MOV     R7,#01H
03F6 22                RET     
03F7         L?0911:
03F7 E500        E     MOV     A,regTW88+01H
03F9 2412              ADD     A,#012H
03FB         L?0912:
03FB F582              MOV     DPL,A
03FD E500        E     MOV     A,regTW88
03FF 3404              ADDC    A,#04H
0401 F583              MOV     DPH,A
0403 22                RET     
0404         L?0913:
0404 FF                MOV     R7,A
0405 F0                MOVX    @DPTR,A
0406         L?0914:
0406 90000C            MOV     DPTR,#0CH
0409 020000      E     LJMP    ?C?CLDOPTR
040C         L?0915:
040C         L?0916:
040C EB                MOV     A,R3
040D 8A83              MOV     DPH,R2
040F 8982              MOV     DPL,R1
0411 7BFF              MOV     R3,#0FFH
0413 22                RET     
0414         L?0917:
0414 90000B            MOV     DPTR,#0BH
0417         L?0918:
0417 E5F0              MOV     A,B
0419 8FF0              MOV     B,R7
041B 020000      E     LJMP    ?C?ISTOPTR
041E         L?0919:
041E         L?0920:
041E EC                MOV     A,R4
041F 35F0              ADDC    A,B
0421         L?0921:
0421 FE                MOV     R6,A
0422 7D17              MOV     R5,#017H
0424 020000      E     LJMP    ?C?IMUL
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 92  

0427         L?0922:
0427         L?0923:
0427 900001            MOV     DPTR,#01H
042A 7401              MOV     A,#01H
042C 020000      E     LJMP    ?C?CILDOPTR
042F         L?0925:
042F         L?0926:
042F 900000      E     MOV     DPTR,#CpuTouchSkipCount
0432 7403              MOV     A,#03H
0434 F0                MOVX    @DPTR,A
0435 A3                INC     DPTR
0436 74E8              MOV     A,#0E8H
0438 F0                MOVX    @DPTR,A
0439 22                RET     
043A         L?0927:
043A E5F0              MOV     A,B
043C 3C                ADDC    A,R4
043D         L?0928:
043D FE                MOV     R6,A
043E 7C00              MOV     R4,#00H
0440 7D17              MOV     R5,#017H
0442 020000      E     LJMP    ?C?IMUL
0445         L?0929:
0445         L?0930:
0445 900009            MOV     DPTR,#09H
0448 020000      E     LJMP    ?C?PLDOPTR
044B         L?0931:
044B         L?0932:
044B E0                MOVX    A,@DPTR
044C FC                MOV     R4,A
044D A3                INC     DPTR
044E E0                MOVX    A,@DPTR
044F FD                MOV     R5,A
0450 C3                CLR     C
0451 EF                MOV     A,R7
0452 9D                SUBB    A,R5
0453 FF                MOV     R7,A
0454 22                RET     
0455         L?0933:
0455         L?0934:
0455 850082      E     MOV     DPL,regTW88+01H
0458 850083      E     MOV     DPH,regTW88
045B A3                INC     DPTR
045C A3                INC     DPTR
045D A3                INC     DPTR
045E 22                RET     
045F         L?0935:
045F 900002            MOV     DPTR,#02H
0462 020000      E     LJMP    ?C?CSTOPTR
0465         L?0936:
0465 E0                MOVX    A,@DPTR
0466 75F003            MOV     B,#03H
0469 A4                MUL     AB
046A 2400        R     ADD     A,#LOW menu_level_stack
046C F582              MOV     DPL,A
046E E4                CLR     A
046F 3400        R     ADDC    A,#HIGH menu_level_stack
0471 F583              MOV     DPH,A
0473 22                RET     
0474         L?0937:
0474 EF                MOV     A,R7
0475 24FF              ADD     A,#0FFH
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 93  

0477 FF                MOV     R7,A
0478 EE                MOV     A,R6
0479 34FF              ADDC    A,#0FFH
047B 900000      R     MOV     DPTR,#i
047E F0                MOVX    @DPTR,A
047F A3                INC     DPTR
0480 EF                MOV     A,R7
0481 F0                MOVX    @DPTR,A
0482 22                RET     
0483         L?0938:
0483 FF                MOV     R7,A
0484 E0                MOVX    A,@DPTR
0485         L?0939:
0485 2F                ADD     A,R7
0486 FF                MOV     R7,A
0487 E4                CLR     A
0488 35F0              ADDC    A,B
048A FE                MOV     R6,A
048B 22                RET     
048C         L?0940:
048C 7403              MOV     A,#03H
048E         L?0941:
048E 900001            MOV     DPTR,#01H
0491 020000      E     LJMP    ?C?CSTOPTR
0494         L?0942:
0494 A3                INC     DPTR
0495 F0                MOVX    @DPTR,A
0496         L?0943:
0496 7B01              MOV     R3,#01H
0498 7A00        R     MOV     R2,#HIGH str_buff
049A 7900        R     MOV     R1,#LOW str_buff
049C 22                RET     
049D         L?0944:
049D         L?0945:
049D 900000      R     MOV     DPTR,#winno
04A0 E0                MOVX    A,@DPTR
04A1 FF                MOV     R7,A
04A2 900000      R     MOV     DPTR,#text_info
04A5 22                RET     
04A6         L?0946:
04A6         L?0947:
04A6 900000      R     MOV     DPTR,#winno
04A9 E0                MOVX    A,@DPTR
04AA FF                MOV     R7,A
04AB 900000      R     MOV     DPTR,#text_info
04AE 22                RET     
04AF         L?0948:
04AF         L?0949:
04AF 900000      R     MOV     DPTR,#sosd_win
04B2 E0                MOVX    A,@DPTR
04B3 FF                MOV     R7,A
04B4 900000      R     MOV     DPTR,#header
04B7 22                RET     
04B8         L?0950:
04B8         L?0951:
04B8 E4                CLR     A
04B9 900000      E     MOV     DPTR,#?_SpiOsdWin0Animation?BYTE+03H
04BC F0                MOVX    @DPTR,A
04BD FB                MOV     R3,A
04BE 7F01              MOV     R7,#01H
04C0 22                RET     
04C1         L?0952:
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 94  

04C1         L?0953:
04C1 2F                ADD     A,R7
04C2 FD                MOV     R5,A
04C3 E4                CLR     A
04C4 35F0              ADDC    A,B
04C6 AF05              MOV     R7,AR5
04C8 FE                MOV     R6,A
04C9 22                RET     
04CA         L?0954:
04CA FD                MOV     R5,A
04CB         L?0955:
04CB 900000      R     MOV     DPTR,#i
04CE E0                MOVX    A,@DPTR
04CF 3400              ADDC    A,#00H
04D1 22                RET     
04D2         L?0956:
04D2         L?0957:
04D2 900000      R     MOV     DPTR,#sosd_win
04D5 E0                MOVX    A,@DPTR
04D6 FF                MOV     R7,A
04D7 900000      R     MOV     DPTR,#header
04DA 22                RET     
04DB         L?0958:
04DB         L?0959:
04DB 120000      E     LCALL   ?C?ICALL2
04DE 900000      R     MOV     DPTR,#curr_slide_value
04E1 EF                MOV     A,R7
04E2 F0                MOVX    @DPTR,A
04E3 22                RET     
04E4         L?0960:
04E4 A3                INC     DPTR
04E5         L?0961:
04E5 F0                MOVX    @DPTR,A
04E6 7BFF              MOV     R3,#0FFH
04E8 7A00        E     MOV     R2,#HIGH img_slide_bright
04EA 7900        E     MOV     R1,#LOW img_slide_bright
04EC 22                RET     
04ED         L?0962:
04ED A3                INC     DPTR
04EE         L?0963:
04EE F0                MOVX    @DPTR,A
04EF 7BFF              MOV     R3,#0FFH
04F1 7A00        E     MOV     R2,#HIGH img_slide_contrast
04F3 7900        E     MOV     R1,#LOW img_slide_contrast
04F5 22                RET     
04F6         L?0964:
04F6         L?0965:
04F6 900001            MOV     DPTR,#01H
04F9 020000      E     LJMP    ?C?LLDOPTR
04FC         L?0966:
04FC         L?0967:
04FC 120000      E     LCALL   ?C?LSTPTR
04FF 900000      R     MOV     DPTR,#header
0502 22                RET     
0503         L?0968:
0503 120000      E     LCALL   ?C?LLDPTR
0506         L?0969:
0506 900000      E     MOV     DPTR,#?_SpiOsdLoadLUT?BYTE+06H
0509 020000      E     LJMP    ?C?LSTXDATA
050C         L?0970:
050C         L?0971:
050C 7A00        E     MOV     R2,#HIGH menu_slider3_page
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 95  

050E 7900        E     MOV     R1,#LOW menu_slider3_page
0510 6401              XRL     A,#01H
0512 22                RET     
0513         L?0972:
0513 2F                ADD     A,R7
0514 FF                MOV     R7,A
0515 E5F0              MOV     A,B
0517 3E                ADDC    A,R6
0518 FE                MOV     R6,A
0519 A3                INC     DPTR
051A E0                MOVX    A,@DPTR
051B D3                SETB    C
051C 9F                SUBB    A,R7
051D EC                MOV     A,R4
051E 9E                SUBB    A,R6
051F 22                RET     
0520         L?0973:
0520 900000      R     MOV     DPTR,#sx+01H
0523 E0                MOVX    A,@DPTR
0524 2F                ADD     A,R7
0525 F0                MOVX    @DPTR,A
0526 900000      R     MOV     DPTR,#sx
0529 E0                MOVX    A,@DPTR
052A 3E                ADDC    A,R6
052B F0                MOVX    @DPTR,A
052C 22                RET     
052D         L?0974:
052D         L?0975:
052D 7B01              MOV     R3,#01H
052F 7A00        R     MOV     R2,#HIGH menu_str_buff
0531 7900        R     MOV     R1,#LOW menu_str_buff
0533 22                RET     
0534         L?0976:
0534 FF                MOV     R7,A
0535 E5F0              MOV     A,B
0537         L?0977:
0537 C3                CLR     C
0538 13                RRC     A
0539 FE                MOV     R6,A
053A EF                MOV     A,R7
053B 13                RRC     A
053C FF                MOV     R7,A
053D 22                RET     
053E         L?0978:
053E         L?0979:
053E EF                MOV     A,R7
053F 120000      E     LCALL   ?C?CSTOPTR
0542 900000      R     MOV     DPTR,#info
0545 22                RET     
0546         L?0980:
0546         L?0981:
0546 900000      R     MOV     DPTR,#image
0549 74FF              MOV     A,#0FFH
054B F0                MOVX    @DPTR,A
054C A3                INC     DPTR
054D 22                RET     
054E         L?0982:
054E 900002            MOV     DPTR,#02H
0551 120000      E     LCALL   ?C?CSTOPTR
0554 120000      R     LCALL   push_menu_stack_level
0557 7B01              MOV     R3,#01H
0559 22                RET     
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 96  

055A         L?0983:
055A         L?0984:
055A FC                MOV     R4,A
055B 900000      R     MOV     DPTR,#lOffsetStart
055E 020000      E     LJMP    ?C?LSTXDATA
0561         L?0987:
0561 EF                MOV     A,R7
0562         L?0988:
0562 120000      E     LCALL   ?C?CSTOPTR
0565 900000      R     MOV     DPTR,#rle_header
0568 22                RET     
0569         L?0989:
0569 FD                MOV     R5,A
056A ACF0              MOV     R4,B
056C E4                CLR     A
056D 900000      E     MOV     DPTR,#?_FOsdSetPaletteColor?BYTE+04H
0570 F0                MOVX    @DPTR,A
0571 7B08              MOV     R3,#08H
0573 22                RET     
0574         L?0990:
0574 90000F            MOV     DPTR,#0FH
0577 120000      E     LCALL   ?C?ILDOPTR
057A FF                MOV     R7,A
057B 900000      E     MOV     DPTR,#?_SpiOsdLoadLUT?BYTE+04H
057E 22                RET     
057F         L?0991:
057F D3                SETB    C
0580 900000      R     MOV     DPTR,#i+01H
0583 E0                MOVX    A,@DPTR
0584 9F                SUBB    A,R7
0585 900000      R     MOV     DPTR,#i
0588 E0                MOVX    A,@DPTR
0589 22                RET     
058A         L?0992:
058A F0                MOVX    @DPTR,A
058B         L?0993:
058B 900001            MOV     DPTR,#01H
058E 020000      E     LJMP    ?C?ILDOPTR
0591         L?0995:
0591 120000      E     LCALL   ?C?CLDOPTR
0594 900000      E     MOV     DPTR,#?_dPrintf?BYTE+04H
0597 F0                MOVX    @DPTR,A
0598 7BFF              MOV     R3,#0FFH
059A 22                RET     
059B         L?0996:
059B         L?0997:
059B E4                CLR     A
059C FC                MOV     R4,A
059D FD                MOV     R5,A
059E 900000      R     MOV     DPTR,#image
05A1 22                RET     
05A2         L?0998:
05A2 FB                MOV     R3,A
05A3 E0                MOVX    A,@DPTR
05A4 FC                MOV     R4,A
05A5 A3                INC     DPTR
05A6 E0                MOVX    A,@DPTR
05A7 FD                MOV     R5,A
05A8 22                RET     
05A9         L?0999:
05A9         L?1000:
05A9 900000      R     MOV     DPTR,#sosd_win
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 97  

05AC E0                MOVX    A,@DPTR
05AD FF                MOV     R7,A
05AE A3                INC     DPTR
05AF 22                RET     
05B0         L?1001:
05B0         L?1002:
05B0 900000      R     MOV     DPTR,#sosd_win
05B3 E0                MOVX    A,@DPTR
05B4 FF                MOV     R7,A
05B5 A3                INC     DPTR
05B6 22                RET     
05B7         L?1003:
05B7 900000      R     MOV     DPTR,#start_byte
05BA A3                INC     DPTR
05BB A3                INC     DPTR
05BC A3                INC     DPTR
05BD E4                CLR     A
05BE 7B06              MOV     R3,#06H
05C0 22                RET     
05C1         L?1004:
05C1         L?1005:
05C1 900000      R     MOV     DPTR,#UseSOsdHwBuff
05C4 7401              MOV     A,#01H
05C6 F0                MOVX    @DPTR,A
05C7 22                RET     
05C8         L?1006:
05C8 A804              MOV     R0,AR4
05CA A905              MOV     R1,AR5
05CC AA06              MOV     R2,AR6
05CE AB07              MOV     R3,AR7
05D0 E0                MOVX    A,@DPTR
05D1 22                RET     
05D2         L?1007:
05D2 900046            MOV     DPTR,#046H
05D5 120000      E     LCALL   ?C?PLDOPTR
05D8 020000      E     LJMP    ?C?ICALL
05DB         L?1008:
05DB 120000      R     LCALL   push_menu_stack_level
05DE 7B01              MOV     R3,#01H
05E0 7A00        E     MOV     R2,#HIGH menu_slider3_page
05E2 7900        E     MOV     R1,#LOW menu_slider3_page
05E4 22                RET     
05E5         L?1009:
05E5 120000      R     LCALL   push_menu_stack_level
05E8 7B01              MOV     R3,#01H
05EA 7A00        E     MOV     R2,#HIGH menu_touch_page
05EC 7900        E     MOV     R1,#LOW menu_touch_page
05EE 22                RET     
05EF         L?1010:
05EF         L?1011:
05EF 900000      R     MOV     DPTR,#nCarIndex
05F2 E0                MOVX    A,@DPTR
05F3 04                INC     A
05F4 F0                MOVX    @DPTR,A
05F5 22                RET     
             ; FUNCTION Com02DA (END)

             ; FUNCTION _info_to_header (BEGIN)
                                           ; SOURCE LINE # 211
0000 900000      R     MOV     DPTR,#info
0003 EB                MOV     A,R3
0004 120000      R     LCALL   L?0753
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 98  

                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 214
0007 120000      R     LCALL   L?0810
                                           ; SOURCE LINE # 217
000A 900000      R     MOV     DPTR,#info
000D 120000      R     LCALL   L?0736
0010 120000      E     LCALL   ?C?CLDPTR
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#header
0017 120000      R     LCALL   L?0736
001A 900008            MOV     DPTR,#08H
                                           ; SOURCE LINE # 218
001D 120000      R     LCALL   L?0978
0020 120000      R     LCALL   L?0736
0023 120000      R     LCALL   L?0758
0026 C4                SWAP    A
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 900000      R     MOV     DPTR,#header
002D 120000      R     LCALL   L?0736
0030 900009            MOV     DPTR,#09H
                                           ; SOURCE LINE # 219
0033 120000      R     LCALL   L?0978
0036 120000      R     LCALL   L?0736
0039 120000      R     LCALL   L?0758
003C 540F              ANL     A,#0FH
003E FF                MOV     R7,A
003F 900000      R     MOV     DPTR,#header
0042 120000      R     LCALL   L?0736
0045 90000A            MOV     DPTR,#0AH
                                           ; SOURCE LINE # 220
0048 120000      R     LCALL   L?0979
004B 120000      R     LCALL   L?0736
004E 900002            MOV     DPTR,#02H
0051 120000      E     LCALL   ?C?ILDOPTR
0054 FF                MOV     R7,A
0055 900000      R     MOV     DPTR,#header
0058 120000      R     LCALL   L?0736
005B 120000      R     LCALL   L?0917
                                           ; SOURCE LINE # 221
005E 900000      R     MOV     DPTR,#info
0061 120000      R     LCALL   L?0736
0064 120000      R     LCALL   L?0865
0067 FF                MOV     R7,A
0068 900000      R     MOV     DPTR,#header
006B 120000      R     LCALL   L?0736
006E 90000D            MOV     DPTR,#0DH
0071 120000      R     LCALL   L?0918
                                           ; SOURCE LINE # 222
0074 120000      R     LCALL   L?0845
0077 FF                MOV     R7,A
0078 7404              MOV     A,#04H
007A 7E00              MOV     R6,#00H
007C A807              MOV     R0,AR7
007E 08                INC     R0
007F 8005              SJMP    ?C0628
0081         ?C0627:
0081 C3                CLR     C
0082 33                RLC     A
0083 CE                XCH     A,R6
0084 33                RLC     A
0085 CE                XCH     A,R6
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 99  

0086         ?C0628:
0086 D8F9              DJNZ    R0,?C0627
0088 FF                MOV     R7,A
0089 90000F            MOV     DPTR,#0FH
008C EE                MOV     A,R6
008D 8FF0              MOV     B,R7
008F 020000      E     LJMP    ?C?ISTOPTR
             ; FUNCTION _info_to_header (END)

             ; FUNCTION _rle2_to_header (BEGIN)
                                           ; SOURCE LINE # 226
0000 900000      R     MOV     DPTR,#rle_header
0003 EB                MOV     A,R3
0004 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 232
0007 120000      R     LCALL   L?0810
                                           ; SOURCE LINE # 234
000A 900000      R     MOV     DPTR,#rle_header
000D 120000      R     LCALL   L?0736
0010 120000      R     LCALL   L?0914
0013 5401              ANL     A,#01H
0015 FF                MOV     R7,A
0016 900000      R     MOV     DPTR,#header
0019 120000      R     LCALL   L?0736
001C 900008            MOV     DPTR,#08H
                                           ; SOURCE LINE # 235
001F 120000      R     LCALL   L?0987
0022 120000      R     LCALL   L?0736
0025 90000D            MOV     DPTR,#0DH
0028 120000      E     LCALL   ?C?CLDOPTR
002B 2401              ADD     A,#01H
002D FF                MOV     R7,A
002E E4                CLR     A
002F 33                RLC     A
0030 FE                MOV     R6,A
;---- Variable 'colors' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 236
;---- Variable 'bpp' assigned to Register 'R5' ----
0031 E4                CLR     A
0032 FD                MOV     R5,A
0033         ?C0002:
                                           ; SOURCE LINE # 237
0033 EF                MOV     A,R7
0034 20E009            JB      ACC.0,?C0003
                                           ; SOURCE LINE # 238
0037         ?C0004:
                                           ; SOURCE LINE # 239
0037 EE                MOV     A,R6
0038 120000      R     LCALL   L?0977
                                           ; SOURCE LINE # 240
003B 0D                INC     R5
                                           ; SOURCE LINE # 241
003C ED                MOV     A,R5
003D B409F3            CJNE    A,#09H,?C0002
0040         ?C0003:
                                           ; SOURCE LINE # 242
0040 900000      R     MOV     DPTR,#header
0043 120000      R     LCALL   L?0736
0046 900009            MOV     DPTR,#09H
0049 ED                MOV     A,R5
                                           ; SOURCE LINE # 243
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 100 

004A 120000      R     LCALL   L?0988
004D 120000      R     LCALL   L?0736
0050 120000      R     LCALL   L?0806
0053 540F              ANL     A,#0FH
0055 FF                MOV     R7,A
0056 900000      R     MOV     DPTR,#header
0059 120000      R     LCALL   L?0736
005C 90000A            MOV     DPTR,#0AH
                                           ; SOURCE LINE # 244
005F 120000      R     LCALL   L?0987
0062 120000      R     LCALL   L?0736
0065 120000      R     LCALL   L?0865
0068 FF                MOV     R7,A
0069 900000      R     MOV     DPTR,#header
006C 120000      R     LCALL   L?0736
006F 120000      R     LCALL   L?0917
                                           ; SOURCE LINE # 245
0072 900000      R     MOV     DPTR,#rle_header
0075 120000      R     LCALL   L?0736
0078 120000      R     LCALL   L?0880
007B FF                MOV     R7,A
007C 900000      R     MOV     DPTR,#header
007F 120000      R     LCALL   L?0736
0082 90000D            MOV     DPTR,#0DH
0085 120000      R     LCALL   L?0918
                                           ; SOURCE LINE # 246
0088 AF05              MOV     R7,AR5
008A 7404              MOV     A,#04H
008C 7E00              MOV     R6,#00H
008E A807              MOV     R0,AR7
0090 08                INC     R0
0091 8005              SJMP    ?C0630
0093         ?C0629:
0093 C3                CLR     C
0094 33                RLC     A
0095 CE                XCH     A,R6
0096 33                RLC     A
0097 CE                XCH     A,R6
0098         ?C0630:
0098 D8F9              DJNZ    R0,?C0629
009A FF                MOV     R7,A
009B 90000F            MOV     DPTR,#0FH
009E EE                MOV     A,R6
009F 8FF0              MOV     B,R7
00A1 020000      E     LJMP    ?C?ISTOPTR
             ; FUNCTION _rle2_to_header (END)

             ; FUNCTION push_menu_stack_level (BEGIN)
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
0000 120000      R     LCALL   L?0735
0003 900000      R     MOV     DPTR,#menu_level
0006 120000      R     LCALL   L?0936
0009 EB                MOV     A,R3
000A 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 292
000D 900000      R     MOV     DPTR,#menu_level
0010 E0                MOVX    A,@DPTR
0011 04                INC     A
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 293
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 101 

0013 E4                CLR     A
0014 900000      R     MOV     DPTR,#menu_lock_scroll
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
0018 22                RET     
             ; FUNCTION push_menu_stack_level (END)

             ; FUNCTION pop_menu_stack_level (BEGIN)
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 298
0000 900000      R     MOV     DPTR,#menu_level
0003 E0                MOVX    A,@DPTR
0004 14                DEC     A
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
0006 120000      R     LCALL   L?0936
0009 120000      R     LCALL   L?0819
000C C9                XCH     A,R1
000D 120000      R     LCALL   L?0752
                                           ; SOURCE LINE # 300
0010 E4                CLR     A
0011 900000      R     MOV     DPTR,#menu_lock_scroll
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 301
0015 22                RET     
             ; FUNCTION pop_menu_stack_level (END)

             ; FUNCTION MenuGetLevel (BEGIN)
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 306
0000 900000      R     MOV     DPTR,#menu_on
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#menu_level
0008 E0                MOVX    A,@DPTR
0009 2F                ADD     A,R7
000A FF                MOV     R7,A
                                           ; SOURCE LINE # 307
000B         ?C0008:
000B 22                RET     
             ; FUNCTION MenuGetLevel (END)

             ; FUNCTION _MenuReadRleHeader (BEGIN)
                                           ; SOURCE LINE # 313
0000 900000      R     MOV     DPTR,#spi_loc
0003 120000      E     LCALL   ?C?LSTXDATA
0006 900000      R     MOV     DPTR,#header
0009 EB                MOV     A,R3
000A 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 320
000D 7BFF              MOV     R3,#0FFH
000F 7A00        R     MOV     R2,#HIGH ?SC_0
0011 7900        R     MOV     R1,#LOW ?SC_0
0013 900000      R     MOV     DPTR,#spi_loc
0016 120000      R     LCALL   L?0771
                                           ; SOURCE LINE # 321
0019 120000      R     LCALL   L?0906
001C 120000      R     LCALL   L?0819
001F 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 102 

0022 C9                XCH     A,R1
0023 120000      R     LCALL   L?0753
0026 7A00        R     MOV     R2,#HIGH ?SC_26
0028 7900        R     MOV     R1,#LOW ?SC_26
                                           ; SOURCE LINE # 322
002A 120000      R     LCALL   L?0875
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FA                MOV     R2,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0036 EA                MOV     A,R2
0037 F0                MOVX    @DPTR,A
0038 A3                INC     DPTR
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
003B 7BFF              MOV     R3,#0FFH
003D 7A00        R     MOV     R2,#HIGH ?SC_40
003F 7900        R     MOV     R1,#LOW ?SC_40
0041 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 324
0044 7F01              MOV     R7,#01H
0046 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 326
0049 900000      R     MOV     DPTR,#header
004C 120000      R     LCALL   L?0736
004F 900000      R     MOV     DPTR,#spi_loc
0052 120000      R     LCALL   L?0771
0055 FF                MOV     R7,A
0056 900000      E     MOV     DPTR,#?_SpiFlashDmaRead2XMem?BYTE+07H
0059 E4                CLR     A
005A F0                MOVX    @DPTR,A
005B A3                INC     DPTR
005C 7410              MOV     A,#010H
005E F0                MOVX    @DPTR,A
005F 120000      E     LCALL   _SpiFlashDmaRead2XMem
                                           ; SOURCE LINE # 328
0062 900000      R     MOV     DPTR,#header
0065 120000      R     LCALL   L?0819
0068 900000      R     MOV     DPTR,#ptr
006B C9                XCH     A,R1
006C 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 329
006F E4                CLR     A
0070 900000      R     MOV     DPTR,#i
0073 F0                MOVX    @DPTR,A
0074         ?C0009:
                                           ; SOURCE LINE # 331
0074 900000      R     MOV     DPTR,#ptr
0077 E0                MOVX    A,@DPTR
0078 FB                MOV     R3,A
0079 120000      R     LCALL   L?0900
007C 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
007F F0                MOVX    @DPTR,A
0080 7BFF              MOV     R3,#0FFH
0082 7A00        R     MOV     R2,#HIGH ?SC_58
0084 7900        R     MOV     R1,#LOW ?SC_58
0086 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 332
0089 900000      R     MOV     DPTR,#i
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 103 

008C E0                MOVX    A,@DPTR
008D 04                INC     A
008E F0                MOVX    @DPTR,A
008F E0                MOVX    A,@DPTR
0090 C3                CLR     C
0091 9410              SUBB    A,#010H
0093 40DF              JC      ?C0009
0095         ?C0010:
                                           ; SOURCE LINE # 333
0095 900000      R     MOV     DPTR,#header
0098 120000      R     LCALL   L?0736
009B 120000      E     LCALL   ?C?CLDPTR
009E B44907            CJNE    A,#049H,?C0013
00A1 120000      R     LCALL   L?0758
00A4 6454              XRL     A,#054H
00A6 600C              JZ      ?C0012
00A8         ?C0013:
                                           ; SOURCE LINE # 335
00A8 7BFF              MOV     R3,#0FFH
00AA 7A00        R     MOV     R2,#HIGH ?SC_65
00AC 7900        R     MOV     R1,#LOW ?SC_65
00AE 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 336
00B1 7F01              MOV     R7,#01H
00B3 22                RET     
                                           ; SOURCE LINE # 337
00B4         ?C0012:
                                           ; SOURCE LINE # 339
00B4 900000      R     MOV     DPTR,#header
00B7 120000      R     LCALL   L?0736
00BA 120000      R     LCALL   L?0866
;---- Variable 'wTemp' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 340
00BD FA                MOV     R2,A
00BE EA                MOV     A,R2
00BF FE                MOV     R6,A
00C0 900000      R     MOV     DPTR,#header
00C3 A3                INC     DPTR
00C4 E0                MOVX    A,@DPTR
00C5 FA                MOV     R2,A
00C6 900004            MOV     DPTR,#04H
00C9 EE                MOV     A,R6
00CA 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 342
00CD 900000      R     MOV     DPTR,#header
00D0 120000      R     LCALL   L?0736
00D3 900006            MOV     DPTR,#06H
00D6 120000      R     LCALL   L?0863
                                           ; SOURCE LINE # 343
00D9 FA                MOV     R2,A
00DA EC                MOV     A,R4
00DB FF                MOV     R7,A
00DC EA                MOV     A,R2
00DD FE                MOV     R6,A
00DE 900000      R     MOV     DPTR,#header
00E1 A3                INC     DPTR
00E2 E0                MOVX    A,@DPTR
00E3 FA                MOV     R2,A
00E4 900006            MOV     DPTR,#06H
00E7 EE                MOV     A,R6
00E8 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 345
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 104 

00EB 900008            MOV     DPTR,#08H
00EE 120000      E     LCALL   ?C?LLDOPTR
00F1 900000      R     MOV     DPTR,#dTemp
00F4 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 346
00F7 900000      R     MOV     DPTR,#dTemp
00FA A3                INC     DPTR
00FB A3                INC     DPTR
00FC A3                INC     DPTR
00FD E0                MOVX    A,@DPTR
00FE FF                MOV     R7,A
00FF E4                CLR     A
0100 FE                MOV     R6,A
0101 FD                MOV     R5,A
0102 FC                MOV     R4,A
0103 900008            MOV     DPTR,#08H
0106 120000      E     LCALL   ?C?LSTOPTR
                                           ; SOURCE LINE # 347
0109 E9                MOV     A,R1
010A 120000      R     LCALL   L?0816
010D 120000      R     LCALL   L?0902
0110 120000      R     LCALL   L?0771
                                           ; SOURCE LINE # 348
0113 120000      R     LCALL   L?0813
0116 C003              PUSH    AR3
0118 C002              PUSH    AR2
011A C001              PUSH    AR1
011C 120000      R     LCALL   L?0869
011F D001              POP     AR1
0121 D002              POP     AR2
0123 D003              POP     AR3
0125 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 349
0128 120000      R     LCALL   L?0815
012B 120000      R     LCALL   L?0902
012E 120000      R     LCALL   L?0771
                                           ; SOURCE LINE # 350
0131 120000      R     LCALL   L?0813
0134 C003              PUSH    AR3
0136 C002              PUSH    AR2
0138 C001              PUSH    AR1
013A 120000      R     LCALL   L?0869
013D D001              POP     AR1
013F D002              POP     AR2
0141 D003              POP     AR3
0143 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 351
0146 120000      R     LCALL   L?0815
0149 120000      R     LCALL   L?0903
014C 120000      R     LCALL   L?0771
                                           ; SOURCE LINE # 352
014F 120000      R     LCALL   L?0814
0152 C003              PUSH    AR3
0154 C002              PUSH    AR2
0156 C001              PUSH    AR1
0158 120000      R     LCALL   L?0870
015B D001              POP     AR1
015D D002              POP     AR2
015F D003              POP     AR3
0161 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 361
0164 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 105 

0166 7A00        R     MOV     R2,#HIGH ?SC_89
0168 7900        R     MOV     R1,#LOW ?SC_89
016A 900000      R     MOV     DPTR,#spi_loc
016D 120000      R     LCALL   L?0771
                                           ; SOURCE LINE # 362
0170 120000      R     LCALL   L?0906
0173 120000      R     LCALL   L?0736
0176 120000      R     LCALL   L?0767
0179 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
017C F0                MOVX    @DPTR,A
017D 7A00        R     MOV     R2,#HIGH ?SC_100
017F 7900        R     MOV     R1,#LOW ?SC_100
                                           ; SOURCE LINE # 363
0181 120000      R     LCALL   L?0875
0184 120000      R     LCALL   L?0736
0187 120000      R     LCALL   L?0806
018A 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
018D F0                MOVX    @DPTR,A
018E 7A00        R     MOV     R2,#HIGH ?SC_110
0190 7900        R     MOV     R1,#LOW ?SC_110
                                           ; SOURCE LINE # 364
0192 120000      R     LCALL   L?0924
0195 120000      R     LCALL   L?0736
0198 120000      R     LCALL   L?0866
019B 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
019E 120000      R     LCALL   L?0839
01A1 120000      R     LCALL   L?0880
01A4 FF                MOV     R7,A
01A5 900000      E     MOV     DPTR,#?_dPrintf?BYTE+05H
01A8 120000      R     LCALL   L?0840
01AB 7A00        R     MOV     R2,#HIGH ?SC_121
01AD 7900        R     MOV     R1,#LOW ?SC_121
                                           ; SOURCE LINE # 365
01AF 120000      R     LCALL   L?0924
01B2 120000      R     LCALL   L?0736
01B5 900008            MOV     DPTR,#08H
01B8 120000      E     LCALL   ?C?LLDOPTR
01BB 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
01BE 120000      E     LCALL   ?C?LSTXDATA
01C1 7BFF              MOV     R3,#0FFH
01C3 7A00        R     MOV     R2,#HIGH ?SC_131
01C5 7900        R     MOV     R1,#LOW ?SC_131
01C7 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 366
01CA 900000      R     MOV     DPTR,#header
01CD 120000      R     LCALL   L?0736
01D0 120000      R     LCALL   L?0914
01D3 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
01D6 F0                MOVX    @DPTR,A
01D7 90000D            MOV     DPTR,#0DH
01DA 120000      R     LCALL   L?0995
01DD 7A00        R     MOV     R2,#HIGH ?SC_141
01DF 7900        R     MOV     R1,#LOW ?SC_141
01E1 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 367
01E4 900000      R     MOV     DPTR,#header
01E7 120000      R     LCALL   L?0736
01EA 90000E            MOV     DPTR,#0EH
01ED 120000      E     LCALL   ?C?CLDOPTR
01F0 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
01F3 F0                MOVX    @DPTR,A
01F4 90000F            MOV     DPTR,#0FH
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 106 

01F7 120000      R     LCALL   L?0995
01FA 7A00        R     MOV     R2,#HIGH ?SC_167
01FC 7900        R     MOV     R1,#LOW ?SC_167
01FE 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 369
0201 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 370
0203         ?C0014:
0203 22                RET     
0204         L?0875:
0204 7BFF              MOV     R3,#0FFH
0206 120000      E     LCALL   _dPrintf
0209 900000      R     MOV     DPTR,#header
020C 22                RET     
020D         L?0906:
020D FF                MOV     R7,A
020E 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0211 120000      E     LCALL   ?C?LSTXDATA
0214 120000      E     LCALL   _dPrintf
0217 900000      R     MOV     DPTR,#header
021A 22                RET     
021B         L?0924:
021B 7BFF              MOV     R3,#0FFH
021D 120000      E     LCALL   _dPrintf
0220 900000      R     MOV     DPTR,#header
0223 22                RET     
             ; FUNCTION _MenuReadRleHeader (END)

             ; FUNCTION _MenuPrepareImageHeader (BEGIN)
                                           ; SOURCE LINE # 374
0000 900000      R     MOV     DPTR,#image
0003 EB                MOV     A,R3
0004 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
0007 120000      R     LCALL   L?0811
                                           ; SOURCE LINE # 378
000A 900000      R     MOV     DPTR,#image
000D 120000      R     LCALL   L?0736
0010 120000      E     LCALL   ?C?CLDPTR
0013 6401              XRL     A,#01H
0015 7044              JNZ     ?C0015
                                           ; SOURCE LINE # 380
0017 120000      R     LCALL   L?0964
001A 7B01              MOV     R3,#01H
001C 7A00        R     MOV     R2,#HIGH rle_header
001E 7900        R     MOV     R1,#LOW rle_header
0020 120000      R     LCALL   _MenuReadRleHeader
                                           ; SOURCE LINE # 381
0023 7B01              MOV     R3,#01H
0025 7A00        R     MOV     R2,#HIGH rle_header
0027 7900        R     MOV     R1,#LOW rle_header
0029 120000      R     LCALL   _rle2_to_header
                                           ; SOURCE LINE # 382
002C 900000      R     MOV     DPTR,#image
002F 120000      R     LCALL   L?0736
0032 120000      R     LCALL   L?0964
0035 120000      R     LCALL   L?0856
0038 FC                MOV     R4,A
0039 900000      R     MOV     DPTR,#header
003C 120000      R     LCALL   L?0736
                                           ; SOURCE LINE # 383
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 107 

003F 120000      R     LCALL   L?0966
0042 120000      R     LCALL   L?0736
0045 90000F            MOV     DPTR,#0FH
0048 120000      R     LCALL   L?0822
004B 120000      R     LCALL   L?0996
004E 120000      R     LCALL   L?0736
0051 120000      R     LCALL   L?0878
0054 FC                MOV     R4,A
0055 120000      R     LCALL   L?0856
                                           ; SOURCE LINE # 384
0058 020000      R     LJMP    ?C0683
005B         ?C0015:
                                           ; SOURCE LINE # 385
005B 900000      R     MOV     DPTR,#image
005E 120000      R     LCALL   L?0736
0061 120000      E     LCALL   ?C?CLDPTR
0064 6402              XRL     A,#02H
0066 900000      R     MOV     DPTR,#image
0069 7051              JNZ     ?C0017
                                           ; SOURCE LINE # 387
006B A3                INC     DPTR
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E 120000      R     LCALL   L?0809
0071 120000      R     LCALL   _info_to_header
                                           ; SOURCE LINE # 388
0074 900000      R     MOV     DPTR,#image
0077 120000      R     LCALL   L?0736
007A 120000      R     LCALL   L?0965
007D 900000      R     MOV     DPTR,#header
0080 120000      R     LCALL   L?0736
                                           ; SOURCE LINE # 389
0083 120000      R     LCALL   L?0966
0086 120000      R     LCALL   L?0736
0089 90000F            MOV     DPTR,#0FH
008C 120000      R     LCALL   L?0822
008F 120000      R     LCALL   L?0996
0092 120000      R     LCALL   L?0736
0095 120000      R     LCALL   L?0878
0098 FC                MOV     R4,A
0099 900000      R     MOV     DPTR,#header
009C 120000      R     LCALL   L?0736
009F 900004            MOV     DPTR,#04H
00A2 120000      E     LCALL   ?C?LSTOPTR
                                           ; SOURCE LINE # 390
00A5 120000      R     LCALL   L?0855
00A8 FC                MOV     R4,A
                                           ; SOURCE LINE # 391
00A9 120000      R     LCALL   L?0967
00AC 120000      R     LCALL   L?0895
00AF 2404              ADD     A,#04H
00B1 F9                MOV     R1,A
00B2 E4                CLR     A
00B3 3A                ADDC    A,R2
00B4 FA                MOV     R2,A
00B5 120000      R     LCALL   L?0855
00B8 FC                MOV     R4,A
00B9 020000      E     LJMP    ?C?LSTPTR
                                           ; SOURCE LINE # 392
00BC         ?C0017:
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 395
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 108 

00BC 120000      R     LCALL   L?0736
00BF 120000      R     LCALL   L?0809
00C2 120000      R     LCALL   _info_to_header
                                           ; SOURCE LINE # 396
00C5 900000      R     MOV     DPTR,#image
00C8 120000      R     LCALL   L?0736
00CB 120000      R     LCALL   L?0965
00CE 900000      R     MOV     DPTR,#header
00D1 120000      R     LCALL   L?0736
                                           ; SOURCE LINE # 397
00D4 120000      R     LCALL   L?0967
00D7 120000      R     LCALL   L?0736
00DA 90000F            MOV     DPTR,#0FH
00DD 120000      R     LCALL   L?0822
00E0 120000      R     LCALL   L?0997
00E3 120000      R     LCALL   L?0736
00E6 120000      R     LCALL   L?0879
00E9         ?C0683:
00E9 FC                MOV     R4,A
00EA 900000      R     MOV     DPTR,#header
00ED 120000      R     LCALL   L?0736
00F0 900004            MOV     DPTR,#04H
00F3 120000      E     LCALL   ?C?LSTOPTR
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
00F6         ?C0019:
00F6 22                RET     
             ; FUNCTION _MenuPrepareImageHeader (END)

             ; FUNCTION InitLogo1 (BEGIN)
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 410
0000 900000      R     MOV     DPTR,#header
0003 120000      R     LCALL   L?0812
                                           ; SOURCE LINE # 415
0006 900000      R     MOV     DPTR,#NoSignalLogoShow
0009 7401              MOV     A,#01H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
000C E500        E     MOV     A,regTW88+01H
000E 241C              ADD     A,#01CH
0010 120000      R     LCALL   L?0860
0013 E0                MOVX    A,@DPTR
0014 900000      R     MOV     DPTR,#FreeRunManual
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 421
0018 E4                CLR     A
0019 FF                MOV     R7,A
001A 120000      E     LCALL   _ScalerSetFreerunManual
                                           ; SOURCE LINE # 423
001D E4                CLR     A
001E 120000      E     LCALL   _SOsdWinBuffClean
                                           ; SOURCE LINE # 426
0021 120000      E     LCALL   SpiOsdSetDeValue
                                           ; SOURCE LINE # 427
0024 E4                CLR     A
0025 FF                MOV     R7,A
0026 120000      E     LCALL   _SpiOsdWinHWOffAll
                                           ; SOURCE LINE # 429
0029 7F01              MOV     R7,#01H
002B 120000      E     LCALL   _SpiOsdEnable
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 109 

                                           ; SOURCE LINE # 431
002E 900000      R     MOV     DPTR,#image
0031 74FF              MOV     A,#0FFH
0033 F0                MOVX    @DPTR,A
0034 A3                INC     DPTR
0035 7400        E     MOV     A,#HIGH img_logo
0037 F0                MOVX    @DPTR,A
0038 A3                INC     DPTR
0039 7400        E     MOV     A,#LOW img_logo
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
003C E4                CLR     A
003D 900000      R     MOV     DPTR,#lut_loc
0040 F0                MOVX    @DPTR,A
0041 A3                INC     DPTR
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 436
0043 900000      R     MOV     DPTR,#image
0046 120000      R     LCALL   L?0736
0049 120000      R     LCALL   _MenuPrepareImageHeader
                                           ; SOURCE LINE # 444
004C 900000      R     MOV     DPTR,#header
004F 120000      R     LCALL   L?0736
0052 900004            MOV     DPTR,#04H
0055 120000      E     LCALL   ?C?LLDOPTR0
0058 900000      E     MOV     DPTR,#?_SpiOsdWinImageLoc?BYTE+01H
005B 120000      R     LCALL   L?0787
005E 7F01              MOV     R7,#01H
0060 120000      E     LCALL   _SpiOsdWinImageLoc
                                           ; SOURCE LINE # 445
0063 900000      R     MOV     DPTR,#header
0066 120000      R     LCALL   L?0736
0069 120000      R     LCALL   L?0802
006C FB                MOV     R3,A
006D AAF0              MOV     R2,B
006F 7F01              MOV     R7,#01H
0071 120000      E     LCALL   _SpiOsdWinImageSizeWH
                                           ; SOURCE LINE # 446
0074 900000      R     MOV     DPTR,#header
0077 120000      R     LCALL   L?0736
007A 120000      R     LCALL   L?0838
007D 120000      R     LCALL   L?0804
0080 FF                MOV     R7,A
0081 900000      E     MOV     DPTR,#?_SpiOsdWinScreen?BYTE+07H
0084 120000      R     LCALL   L?0840
0087 E4                CLR     A
0088 FB                MOV     R3,A
0089 FA                MOV     R2,A
008A FD                MOV     R5,A
008B FC                MOV     R4,A
008C 7F01              MOV     R7,#01H
008E 120000      E     LCALL   _SpiOsdWinScreen
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 450
0091         ?C0020:
                                           ; SOURCE LINE # 451
0091 7D01              MOV     R5,#01H
0093 7F01              MOV     R7,#01H
0095 120000      E     LCALL   _SpiOsdWinPixelAlpha
                                           ; SOURCE LINE # 452
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 110 

0098 1D                DEC     R5
0099 7F01              MOV     R7,#01H
009B 120000      E     LCALL   _SpiOsdWinGlobalAlpha
                                           ; SOURCE LINE # 453
009E 900000      R     MOV     DPTR,#header
00A1 120000      R     LCALL   L?0736
00A4 120000      R     LCALL   L?0845
00A7 FD                MOV     R5,A
00A8 7F01              MOV     R7,#01H
00AA 120000      E     LCALL   _SpiOsdWinPixelWidth
                                           ; SOURCE LINE # 454
00AD E4                CLR     A
00AE FD                MOV     R5,A
00AF FC                MOV     R4,A
00B0 7F01              MOV     R7,#01H
00B2 120000      E     LCALL   _SpiOsdWinLutOffset
                                           ; SOURCE LINE # 456
00B5 0D                INC     R5
00B6 7F01              MOV     R7,#01H
00B8 120000      E     LCALL   _SpiOsdWinBuffEnable
                                           ; SOURCE LINE # 460
00BB 7F01              MOV     R7,#01H
00BD 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 461
00C0 900000      R     MOV     DPTR,#header
00C3 120000      R     LCALL   L?0736
00C6 120000      R     LCALL   L?0905
00C9 FF                MOV     R7,A
00CA 600D              JZ      ?C0021
                                           ; SOURCE LINE # 463
00CC 120000      R     LCALL   L?0845
00CF FD                MOV     R5,A
00D0 AB07              MOV     R3,AR7
00D2 7F01              MOV     R7,#01H
00D4 120000      E     LCALL   _SpiOsdRLC
                                           ; SOURCE LINE # 464
00D7 8005              SJMP    ?C0022
00D9         ?C0021:
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 473
00D9 7F01              MOV     R7,#01H
00DB 120000      E     LCALL   _SpiOsdDisableRLC
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
00DE         ?C0022:
                                           ; SOURCE LINE # 477
00DE 7D01              MOV     R5,#01H
00E0 7F01              MOV     R7,#01H
00E2 120000      E     LCALL   _SOsdWinBuffWrite2Hw
                                           ; SOURCE LINE # 479
00E5 900000      R     MOV     DPTR,#header
00E8 120000      R     LCALL   L?0736
00EB 120000      R     LCALL   L?0842
00EE FD                MOV     R5,A
00EF C005              PUSH    AR5
00F1 120000      R     LCALL   L?0785
00F4 900000      R     MOV     DPTR,#lut_loc
00F7 E0                MOVX    A,@DPTR
00F8 FA                MOV     R2,A
00F9 A3                INC     DPTR
00FA E0                MOVX    A,@DPTR
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 111 

00FB FB                MOV     R3,A
00FC D005              POP     AR5
00FE 7F01              MOV     R7,#01H
0100 120000      E     LCALL   _SpiOsdLoadLUT
                                           ; SOURCE LINE # 482
0103 900000      R     MOV     DPTR,#image
0106 120000      R     LCALL   L?0736
0109 120000      R     LCALL   L?0842
010C FF                MOV     R7,A
010D F4                CPL     A
010E 6015              JZ      ?C0024
                                           ; SOURCE LINE # 483
0110 7E00              MOV     R6,#00H
0112 900000      R     MOV     DPTR,#lut_loc
0115 E0                MOVX    A,@DPTR
0116 FC                MOV     R4,A
0117 A3                INC     DPTR
0118 E0                MOVX    A,@DPTR
0119 2F                ADD     A,R7
011A FD                MOV     R5,A
011B EE                MOV     A,R6
011C 3C                ADDC    A,R4
011D AF05              MOV     R7,AR5
011F FE                MOV     R6,A
0120 7D7F              MOV     R5,#07FH
0122 120000      E     LCALL   _SpiOsdPixelAlphaAttr
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 486
0125         ?C0024:
0125 22                RET     
             ; FUNCTION InitLogo1 (END)

             ; FUNCTION _RemoveLogoWithWait (BEGIN)
                                           ; SOURCE LINE # 488
;---- Variable 'fPowerUpBoot' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 494
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#NoSignalLogoShow
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 497
0005 EF                MOV     A,R7
0006 6061              JZ      END_END
                                           ; SOURCE LINE # 498
0008 E4                CLR     A
0009 900000      R     MOV     DPTR,#i
000C F0                MOVX    @DPTR,A
000D         ?C0026:
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
000D 120000      R     LCALL   L?0985
0010 6004              JZ      ?C0029
0012 E0                MOVX    A,@DPTR
0013 B40313            CJNE    A,#03H,?C0027
0016         ?C0029:
                                           ; SOURCE LINE # 501
0016 7F0A              MOV     R7,#0AH
0018 7E00              MOV     R6,#00H
001A 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 502
001D 900000      R     MOV     DPTR,#i
0020 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 112 

0021 04                INC     A
0022 F0                MOVX    @DPTR,A
0023 E0                MOVX    A,@DPTR
0024 C3                CLR     C
0025 9480              SUBB    A,#080H
0027 40E4              JC      ?C0026
0029         ?C0027:
                                           ; SOURCE LINE # 503
0029 900000      R     MOV     DPTR,#i
002C E0                MOVX    A,@DPTR
002D 6480              XRL     A,#080H
002F 7038              JNZ     END_END
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 506
0031         ?C0030:
                                           ; SOURCE LINE # 508
0031 E4                CLR     A
0032 900000      R     MOV     DPTR,#i
0035 F0                MOVX    @DPTR,A
0036         ?C0032:
0036 900000      R     MOV     DPTR,#i
0039 E0                MOVX    A,@DPTR
003A FD                MOV     R5,A
003B C3                CLR     C
003C 9480              SUBB    A,#080H
003E 5029              JNC     ?C0033
                                           ; SOURCE LINE # 509
0040 7F01              MOV     R7,#01H
0042 120000      E     LCALL   _SpiOsdWinGlobalAlpha
                                           ; SOURCE LINE # 510
0045 7F01              MOV     R7,#01H
0047 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 511
004A 7D01              MOV     R5,#01H
004C 7F01              MOV     R7,#01H
004E 120000      E     LCALL   _SOsdWinBuffWrite2Hw
                                           ; SOURCE LINE # 512
0051 7F0A              MOV     R7,#0AH
0053 7E00              MOV     R6,#00H
0055 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
0058 120000      R     LCALL   L?0985
005B 6004              JZ      ?C0034
005D E0                MOVX    A,@DPTR
005E B40308            CJNE    A,#03H,?C0033
                                           ; SOURCE LINE # 515
0061         ?C0035:
                                           ; SOURCE LINE # 516
0061         ?C0034:
0061 900000      R     MOV     DPTR,#i
0064 E0                MOVX    A,@DPTR
0065 04                INC     A
0066 F0                MOVX    @DPTR,A
0067 80CD              SJMP    ?C0032
0069         ?C0033:
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 519
                                           ; SOURCE LINE # 520
                                           ; SOURCE LINE # 521
0069         END_END:
                                           ; SOURCE LINE # 522
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 113 

0069 7F01              MOV     R7,#01H
006B 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 523
006E E4                CLR     A
006F FD                MOV     R5,A
0070 7F01              MOV     R7,#01H
0072 120000      E     LCALL   _SpiOsdWinBuffEnable
                                           ; SOURCE LINE # 524
0075 E4                CLR     A
0076 FF                MOV     R7,A
0077 020000      E     LJMP    _SpiOsdEnable
                                           ; SOURCE LINE # 525
007A         L?0985:
007A 7F01              MOV     R7,#01H
007C 120000      E     LCALL   _CheckHumanInputs
007F 900000      R     MOV     DPTR,#human_input
0082 EF                MOV     A,R7
0083 F0                MOVX    @DPTR,A
0084 E0                MOVX    A,@DPTR
0085 22                RET     
             ; FUNCTION _RemoveLogoWithWait (END)

             ; FUNCTION RemoveLogo (BEGIN)
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 529
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_182
0004 7900        R     MOV     R1,#LOW ?SC_182
0006 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 530
0009 E4                CLR     A
000A 900000      R     MOV     DPTR,#NoSignalLogoShow
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 532
000E 7F01              MOV     R7,#01H
0010 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 533
0013 E4                CLR     A
0014 FD                MOV     R5,A
0015 7F01              MOV     R7,#01H
0017 120000      E     LCALL   _SpiOsdWinBuffEnable
                                           ; SOURCE LINE # 534
001A E4                CLR     A
001B FF                MOV     R7,A
001C 020000      E     LJMP    _SpiOsdEnable
             ; FUNCTION RemoveLogo (END)

             ; FUNCTION getNoSignalLogoStatus (BEGIN)
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
0000 900000      R     MOV     DPTR,#NoSignalLogoShow
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 540
0005         ?C0039:
0005 22                RET     
             ; FUNCTION getNoSignalLogoStatus (END)

             ; FUNCTION _MenuFontOsdItemInit (BEGIN)
                                           ; SOURCE LINE # 546
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 114 

0000 900000      R     MOV     DPTR,#f1BPP_ALPHA
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
;---- Variable 'item' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 554
0005 120000      R     LCALL   L?0735
0008 120000      R     LCALL   L?0809
000B 900000      R     MOV     DPTR,#menu_item
000E EB                MOV     A,R3
000F 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 555
0012 120000      R     LCALL   L?0735
0015 120000      R     LCALL   L?0907
0018 900000      R     MOV     DPTR,#text_info
001B EB                MOV     A,R3
001C 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 557
001F 900000      R     MOV     DPTR,#text_info+01H
0022 120000      R     LCALL   L?0876
                                           ; SOURCE LINE # 559
0025 900000      R     MOV     DPTR,#text_info
0028 120000      R     LCALL   L?0736
002B 120000      E     LCALL   ?C?CLDPTR
002E 900000      R     MOV     DPTR,#winno
                                           ; SOURCE LINE # 560
0031 120000      R     LCALL   L?0913
0034 900000      R     MOV     DPTR,#palette
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 570
0038 E4                CLR     A
0039 FD                MOV     R5,A
003A 120000      E     LCALL   _FOsdWinEnable
                                           ; SOURCE LINE # 575
003D E500        E     MOV     A,regTW88+01H
003F 2404              ADD     A,#04H
0041 120000      R     LCALL   L?0801
0044 E0                MOVX    A,@DPTR
0045 54DF              ANL     A,#0DFH
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 576
0048 E500        E     MOV     A,regTW88+01H
004A 2404              ADD     A,#04H
004C 120000      R     LCALL   L?0801
004F E0                MOVX    A,@DPTR
0050 54FE              ANL     A,#0FEH
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 578
0053 900000      R     MOV     DPTR,#winno
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 7D01              MOV     R5,#01H
005A 120000      E     LCALL   _FOsdWinMulticolor
                                           ; SOURCE LINE # 582
005D 900000      R     MOV     DPTR,#text_info
0060 120000      R     LCALL   L?0736
0063 900003            MOV     DPTR,#03H
0066 120000      R     LCALL   L?0822
0069 900000      R     MOV     DPTR,#menu_item
006C 120000      R     LCALL   L?0736
006F 120000      R     LCALL   L?0866
0072 2F                ADD     A,R7
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 115 

0073 FD                MOV     R5,A
0074 E5F0              MOV     A,B
0076 3E                ADDC    A,R6
0077 FC                MOV     R4,A
0078 900000      R     MOV     DPTR,#text_info
007B 120000      R     LCALL   L?0736
007E 900005            MOV     DPTR,#05H
0081 120000      R     LCALL   L?0822
0084 900000      R     MOV     DPTR,#menu_item
0087 120000      R     LCALL   L?0736
008A 120000      R     LCALL   L?0881
008D 2F                ADD     A,R7
008E FB                MOV     R3,A
008F E5F0              MOV     A,B
0091 3E                ADDC    A,R6
0092 FA                MOV     R2,A
0093 900000      R     MOV     DPTR,#winno
0096 E0                MOVX    A,@DPTR
0097 FF                MOV     R7,A
0098 120000      E     LCALL   _FOsdWinScreenXY
                                           ; SOURCE LINE # 583
009B 120000      R     LCALL   L?0944
009E 120000      R     LCALL   L?0736
00A1 120000      R     LCALL   L?0841
00A4 FB                MOV     R3,A
00A5 120000      E     LCALL   _FOsdWinScreenWH
                                           ; SOURCE LINE # 584
00A8 120000      R     LCALL   L?0944
00AB 120000      R     LCALL   L?0736
00AE 120000      R     LCALL   L?0845
00B1 120000      R     LCALL   L?0904
00B4 FB                MOV     R3,A
00B5 120000      E     LCALL   _FOsdWinZoom
                                           ; SOURCE LINE # 586
00B8 900000      R     MOV     DPTR,#winno
00BB E0                MOVX    A,@DPTR
00BC FF                MOV     R7,A
00BD A3                INC     DPTR
00BE E0                MOVX    A,@DPTR
00BF FD                MOV     R5,A
00C0 120000      E     LCALL   _FOsdWinSetBpp3Alpha
                                           ; SOURCE LINE # 587
00C3 900000      R     MOV     DPTR,#palette
00C6 E0                MOVX    A,@DPTR
00C7 FF                MOV     R7,A
00C8 900000      R     MOV     DPTR,#text_info
00CB 120000      R     LCALL   L?0736
00CE 120000      R     LCALL   L?0804
00D1 120000      R     LCALL   L?0989
00D4 120000      E     LCALL   _FOsdSetPaletteColor
                                           ; SOURCE LINE # 588
00D7 120000      R     LCALL   L?0945
00DA 120000      R     LCALL   L?0736
00DD 900001            MOV     DPTR,#01H
00E0 120000      R     LCALL   L?0863
00E3 120000      E     LCALL   _FOsdWinSetOsdRamStartAddr
                                           ; SOURCE LINE # 599
00E6 900000      R     MOV     DPTR,#f1BPP_ALPHA
00E9 E0                MOVX    A,@DPTR
00EA 6016              JZ      ?C0040
                                           ; SOURCE LINE # 600
00EC A3                INC     DPTR
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 116 

00ED E0                MOVX    A,@DPTR
00EE FF                MOV     R7,A
00EF 900000      R     MOV     DPTR,#text_info
00F2 120000      R     LCALL   L?0736
00F5 120000      R     LCALL   L?0837
00F8 FE                MOV     R6,A
00F9 C4                SWAP    A
00FA 540F              ANL     A,#0FH
00FC FD                MOV     R5,A
00FD 7B0F              MOV     R3,#0FH
00FF 120000      E     LCALL   _FOsdWinAlphaPixel
                                           ; SOURCE LINE # 601
0102         ?C0040:
                                           ; SOURCE LINE # 603
0102 900000      R     MOV     DPTR,#winno
0105 E0                MOVX    A,@DPTR
0106 FF                MOV     R7,A
0107 7D01              MOV     R5,#01H
0109 020000      E     LJMP    _FOsdWinEnable
             ; FUNCTION _MenuFontOsdItemInit (END)

             ; FUNCTION _MenuFontOsdItemInitNew (BEGIN)
                                           ; SOURCE LINE # 610
0000 900000      R     MOV     DPTR,#item_end
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
;---- Variable 'item_start' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 620
0005 120000      R     LCALL   L?0735
0008 120000      R     LCALL   L?0809
000B 900000      R     MOV     DPTR,#menu_item
000E EB                MOV     A,R3
000F 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 622
0012 900000      R     MOV     DPTR,#item
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
0017         ?C0042:
0017 900000      R     MOV     DPTR,#item_end
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 900000      R     MOV     DPTR,#item
001F E0                MOVX    A,@DPTR
0020 FE                MOV     R6,A
0021 D3                SETB    C
0022 9F                SUBB    A,R7
0023 4003              JC      $ + 5H
0025 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 623
0028 120000      R     LCALL   L?0735
002B 120000      R     LCALL   L?0907
002E 900000      R     MOV     DPTR,#text_info
0031 EB                MOV     A,R3
0032 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 624
0035 EE                MOV     A,R6
0036 75F00F            MOV     B,#0FH
0039 A4                MUL     AB
003A FF                MOV     R7,A
003B 900000      R     MOV     DPTR,#text_info+01H
003E 120000      R     LCALL   L?0877
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 117 

                                           ; SOURCE LINE # 626
0041 900000      R     MOV     DPTR,#text_info
0044 120000      R     LCALL   L?0736
0047 120000      E     LCALL   ?C?CLDPTR
004A 900000      R     MOV     DPTR,#winno
                                           ; SOURCE LINE # 627
004D 120000      R     LCALL   L?0913
0050 900000      R     MOV     DPTR,#palette
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 635
0054 E4                CLR     A
0055 FD                MOV     R5,A
0056 120000      E     LCALL   _FOsdWinEnable
                                           ; SOURCE LINE # 638
0059 E500        E     MOV     A,regTW88+01H
005B 2404              ADD     A,#04H
005D 120000      R     LCALL   L?0801
0060 E0                MOVX    A,@DPTR
0061 900000      R     MOV     DPTR,#value
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 639
0065 54DE              ANL     A,#0DEH
0067 FF                MOV     R7,A
0068 E500        E     MOV     A,regTW88+01H
006A 2404              ADD     A,#04H
006C 120000      R     LCALL   L?0801
006F EF                MOV     A,R7
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 641
0071 900000      R     MOV     DPTR,#winno
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
0076 7D01              MOV     R5,#01H
0078 120000      E     LCALL   _FOsdWinMulticolor
                                           ; SOURCE LINE # 643
007B 900000      R     MOV     DPTR,#text_info
007E 120000      R     LCALL   L?0736
0081 900003            MOV     DPTR,#03H
0084 120000      R     LCALL   L?0822
0087 900000      R     MOV     DPTR,#menu_item
008A 120000      R     LCALL   L?0736
008D 120000      R     LCALL   L?0866
0090 2F                ADD     A,R7
0091 FD                MOV     R5,A
0092 E5F0              MOV     A,B
0094 3E                ADDC    A,R6
0095 FC                MOV     R4,A
0096 900000      R     MOV     DPTR,#text_info
0099 120000      R     LCALL   L?0736
009C 900005            MOV     DPTR,#05H
009F 120000      R     LCALL   L?0822
00A2 900000      R     MOV     DPTR,#menu_item
00A5 120000      R     LCALL   L?0736
00A8 120000      R     LCALL   L?0881
00AB 2F                ADD     A,R7
00AC FB                MOV     R3,A
00AD E5F0              MOV     A,B
00AF 3E                ADDC    A,R6
00B0 FA                MOV     R2,A
00B1 900000      R     MOV     DPTR,#winno
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 118 

00B6 120000      E     LCALL   _FOsdWinScreenXY
                                           ; SOURCE LINE # 644
00B9 120000      R     LCALL   L?0946
00BC 120000      R     LCALL   L?0736
00BF 120000      R     LCALL   L?0841
00C2 FB                MOV     R3,A
00C3 120000      E     LCALL   _FOsdWinScreenWH
                                           ; SOURCE LINE # 645
00C6 120000      R     LCALL   L?0946
00C9 120000      R     LCALL   L?0736
00CC 120000      R     LCALL   L?0845
00CF 120000      R     LCALL   L?0904
00D2 FB                MOV     R3,A
00D3 120000      E     LCALL   _FOsdWinZoom
                                           ; SOURCE LINE # 648
00D6 900000      R     MOV     DPTR,#winno
00D9 E0                MOVX    A,@DPTR
00DA FF                MOV     R7,A
00DB A3                INC     DPTR
00DC E0                MOVX    A,@DPTR
00DD FD                MOV     R5,A
00DE 120000      E     LCALL   _FOsdWinSetBpp3Alpha
                                           ; SOURCE LINE # 659
00E1 900000      R     MOV     DPTR,#palette
00E4 E0                MOVX    A,@DPTR
00E5 FF                MOV     R7,A
00E6 900000      R     MOV     DPTR,#text_info
00E9 120000      R     LCALL   L?0736
00EC 120000      R     LCALL   L?0804
00EF 120000      R     LCALL   L?0989
00F2 120000      E     LCALL   _FOsdSetPaletteColor
                                           ; SOURCE LINE # 660
00F5 120000      R     LCALL   L?0947
00F8 120000      R     LCALL   L?0736
00FB 900001            MOV     DPTR,#01H
00FE 120000      R     LCALL   L?0863
0101 120000      E     LCALL   _FOsdWinSetOsdRamStartAddr
                                           ; SOURCE LINE # 662
0104 900000      R     MOV     DPTR,#winno
0107 E0                MOVX    A,@DPTR
0108 FF                MOV     R7,A
0109 7D01              MOV     R5,#01H
010B 120000      E     LCALL   _FOsdWinEnable
                                           ; SOURCE LINE # 663
010E 900000      R     MOV     DPTR,#item
0111 E0                MOVX    A,@DPTR
0112 04                INC     A
0113 F0                MOVX    @DPTR,A
0114 020000      R     LJMP    ?C0042
                                           ; SOURCE LINE # 664
0117         ?C0045:
0117 22                RET     
             ; FUNCTION _MenuFontOsdItemInitNew (END)

             ; FUNCTION _TestMainMenuImage (BEGIN)
                                           ; SOURCE LINE # 671
;---- Variable 'type' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 677
0000 900000      R     MOV     DPTR,#header
0003 120000      R     LCALL   L?0812
                                           ; SOURCE LINE # 681
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 119 

0006 EF                MOV     A,R7
0007 24FD              ADD     A,#0FDH
0009 600F              JZ      ?C0048
000B 04                INC     A
000C 7018              JNZ     ?C0049
                                           ; SOURCE LINE # 682
000E         ?C0047:
000E 120000      R     LCALL   L?0980
0011 7400        E     MOV     A,#HIGH img_main_test2
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 7400        E     MOV     A,#LOW img_main_test2
0017 F0                MOVX    @DPTR,A
0018 8016              SJMP    ?C0046
                                           ; SOURCE LINE # 683
001A         ?C0048:
001A 120000      R     LCALL   L?0980
001D 7400        E     MOV     A,#HIGH img_main_test3
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 7400        E     MOV     A,#LOW img_main_test3
0023 F0                MOVX    @DPTR,A
0024 800A              SJMP    ?C0046
                                           ; SOURCE LINE # 684
0026         ?C0049:
0026 120000      R     LCALL   L?0981
0029 7400        E     MOV     A,#HIGH img_main_test1
002B F0                MOVX    @DPTR,A
002C A3                INC     DPTR
002D 7400        E     MOV     A,#LOW img_main_test1
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 685
0030         ?C0046:
                                           ; SOURCE LINE # 687
0030 E4                CLR     A
0031 900000      R     MOV     DPTR,#sx
0034 F0                MOVX    @DPTR,A
0035 A3                INC     DPTR
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 688
0037 A3                INC     DPTR
0038 F0                MOVX    @DPTR,A
0039 A3                INC     DPTR
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 689
003B 900000      R     MOV     DPTR,#sosd_win
003E 04                INC     A
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 692
0040 900000      R     MOV     DPTR,#image
0043 120000      R     LCALL   L?0736
0046 120000      R     LCALL   _MenuPrepareImageHeader
                                           ; SOURCE LINE # 694
0049 900000      R     MOV     DPTR,#header
004C 120000      R     LCALL   L?0736
004F 120000      R     LCALL   L?0850
0052 900000      R     MOV     DPTR,#sosd_win
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 120000      E     LCALL   _SpiOsdWinImageLoc
                                           ; SOURCE LINE # 695
005A 120000      R     LCALL   L?0948
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 120 

005D 120000      R     LCALL   L?0736
0060 120000      R     LCALL   L?0802
0063 FB                MOV     R3,A
0064 AAF0              MOV     R2,B
0066 120000      E     LCALL   _SpiOsdWinImageSizeWH
                                           ; SOURCE LINE # 696
0069 900000      R     MOV     DPTR,#sosd_win
006C E0                MOVX    A,@DPTR
006D 7007              JNZ     ?C0050
                                           ; SOURCE LINE # 697
006F FD                MOV     R5,A
0070 FC                MOV     R4,A
0071 FF                MOV     R7,A
0072 FE                MOV     R6,A
0073 120000      E     LCALL   _SpiOsdWin0ImageOffsetXY
0076         ?C0050:
                                           ; SOURCE LINE # 698
0076 120000      R     LCALL   L?0948
0079 120000      R     LCALL   L?0736
007C 120000      R     LCALL   L?0828
007F 120000      R     LCALL   L?0804
0082 900000      E     MOV     DPTR,#?_SpiOsdWinScreen?BYTE+07H
0085 120000      R     LCALL   L?0830
0088 900000      R     MOV     DPTR,#sy
008B E0                MOVX    A,@DPTR
008C FA                MOV     R2,A
008D A3                INC     DPTR
008E E0                MOVX    A,@DPTR
008F 900000      R     MOV     DPTR,#sx
0092 120000      R     LCALL   L?0998
0095 120000      E     LCALL   _SpiOsdWinScreen
                                           ; SOURCE LINE # 699
0098 900000      R     MOV     DPTR,#sosd_win
009B E0                MOVX    A,@DPTR
009C 700B              JNZ     ?C0051
                                           ; SOURCE LINE # 700
009E 900000      E     MOV     DPTR,#?_SpiOsdWin0Animation?BYTE+03H
00A1 F0                MOVX    @DPTR,A
00A2 FB                MOV     R3,A
00A3 FD                MOV     R5,A
00A4 7F01              MOV     R7,#01H
00A6 120000      E     LCALL   _SpiOsdWin0Animation
00A9         ?C0051:
                                           ; SOURCE LINE # 701
00A9 900000      R     MOV     DPTR,#sosd_win
00AC E0                MOVX    A,@DPTR
00AD FF                MOV     R7,A
00AE 7D01              MOV     R5,#01H
00B0 120000      E     LCALL   _SpiOsdWinPixelAlpha
                                           ; SOURCE LINE # 702
00B3 120000      R     LCALL   L?0949
00B6 120000      R     LCALL   L?0736
00B9 120000      R     LCALL   L?0845
00BC FD                MOV     R5,A
00BD 120000      E     LCALL   _SpiOsdWinPixelWidth
                                           ; SOURCE LINE # 703
00C0 900000      R     MOV     DPTR,#sosd_win
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 E4                CLR     A
00C6 FD                MOV     R5,A
00C7 FC                MOV     R4,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 121 

00C8 120000      E     LCALL   _SpiOsdWinLutOffset
                                           ; SOURCE LINE # 706
00CB 900000      R     MOV     DPTR,#sosd_win
00CE E0                MOVX    A,@DPTR
00CF FF                MOV     R7,A
00D0 0D                INC     R5
00D1 120000      E     LCALL   _SpiOsdWinBuffEnable
                                           ; SOURCE LINE # 709
00D4 7F01              MOV     R7,#01H
00D6 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 710
00D9 900000      R     MOV     DPTR,#header
00DC 120000      R     LCALL   L?0736
00DF 120000      R     LCALL   L?0905
00E2 FE                MOV     R6,A
00E3 600C              JZ      ?C0052
                                           ; SOURCE LINE # 712
00E5 900000      R     MOV     DPTR,#sosd_win
00E8 120000      R     LCALL   L?0844
00EB FD                MOV     R5,A
00EC AB06              MOV     R3,AR6
00EE 120000      E     LCALL   _SpiOsdRLC
                                           ; SOURCE LINE # 713
00F1         ?C0052:
                                           ; SOURCE LINE # 714
00F1 7D01              MOV     R5,#01H
00F3 7F01              MOV     R7,#01H
00F5 120000      E     LCALL   _SOsdWinBuffWrite2Hw
                                           ; SOURCE LINE # 715
00F8 900000      R     MOV     DPTR,#header
00FB 120000      R     LCALL   L?0736
00FE 120000      R     LCALL   L?0842
0101 FD                MOV     R5,A
0102 C005              PUSH    AR5
0104 120000      R     LCALL   L?0785
0107 900000      R     MOV     DPTR,#sosd_win
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C D005              POP     AR5
010E E4                CLR     A
010F FB                MOV     R3,A
0110 FA                MOV     R2,A
0111 120000      E     LCALL   _SpiOsdLoadLUT
                                           ; SOURCE LINE # 719
0114 900000      R     MOV     DPTR,#image
0117 120000      R     LCALL   L?0736
011A 120000      R     LCALL   L?0842
011D FF                MOV     R7,A
011E F4                CPL     A
011F 6007              JZ      ?C0054
                                           ; SOURCE LINE # 720
0121 7E00              MOV     R6,#00H
0123 7D7F              MOV     R5,#07FH
0125 120000      E     LCALL   _SpiOsdPixelAlphaAttr
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 722
0128         ?C0054:
0128 22                RET     
             ; FUNCTION _TestMainMenuImage (END)

             ; FUNCTION _MenuDrawCurrImage (BEGIN)
                                           ; SOURCE LINE # 745
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 122 

0000 900000      R     MOV     DPTR,#use1
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 746
                                           ; SOURCE LINE # 751
0008 900000      R     MOV     DPTR,#header
000B 120000      R     LCALL   L?0812
                                           ; SOURCE LINE # 753
000E 120000      R     LCALL   L?0735
0011 120000      R     LCALL   L?0809
0014 900000      R     MOV     DPTR,#item
0017 120000      R     LCALL   L?0783
001A 900000      R     MOV     DPTR,#menu_item
001D EB                MOV     A,R3
001E 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 754
0021 900000      R     MOV     DPTR,#use1
0024 E0                MOVX    A,@DPTR
0025 601B              JZ      ?C0055
                                           ; SOURCE LINE # 755
0027 900000      R     MOV     DPTR,#menu_item
002A 120000      R     LCALL   L?0736
002D 90000C            MOV     DPTR,#0CH
0030 120000      E     LCALL   ?C?PLDOPTR
0033 900000      R     MOV     DPTR,#image
0036 EB                MOV     A,R3
0037 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 756
003A 120000      R     LCALL   L?0894
003D 4A                ORL     A,R2
003E 4B                ORL     A,R3
003F 701B              JNZ     ?C0058
0041 22                RET     
                                           ; SOURCE LINE # 759
0042         ?C0055:
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 762
0042 900000      R     MOV     DPTR,#menu_item
0045 120000      R     LCALL   L?0736
0048 120000      R     LCALL   L?0929
004B 900000      R     MOV     DPTR,#image
004E EB                MOV     A,R3
004F 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 763
0052 120000      R     LCALL   L?0894
0055 4A                ORL     A,R2
0056 4B                ORL     A,R3
0057 7003              JNZ     $ + 5H
0059 020000      R     LJMP    ?C0057
                                           ; SOURCE LINE # 766
005C         ?C0059:
                                           ; SOURCE LINE # 767
005C         ?C0058:
                                           ; SOURCE LINE # 768
005C 120000      R     LCALL   L?0735
005F 120000      R     LCALL   L?0832
0062 700A              JNZ     ?C0633
0064 7400        E     MOV     A,#LOW menu_slider_page
0066 6582              XRL     A,DPL
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 123 

0068 7004              JNZ     ?C0633
006A 7400        E     MOV     A,#HIGH menu_slider_page
006C 6583              XRL     A,DPH
006E         ?C0633:
006E 6014              JZ      ?C0061
0070 120000      R     LCALL   L?0735
0073 120000      R     LCALL   L?0832
0076 700A              JNZ     ?C0634
0078 7400        E     MOV     A,#LOW menu_slider3_page
007A 6582              XRL     A,DPL
007C 7004              JNZ     ?C0634
007E 7400        E     MOV     A,#HIGH menu_slider3_page
0080 6583              XRL     A,DPH
0082         ?C0634:
0082 7014              JNZ     ?C0060
0084         ?C0061:
                                           ; SOURCE LINE # 769
0084 900000      R     MOV     DPTR,#item
0087 E0                MOVX    A,@DPTR
0088 B4010D            CJNE    A,#01H,?C0060
                                           ; SOURCE LINE # 771
008B 900000      R     MOV     DPTR,#slide_title_img
008E 120000      R     LCALL   L?0819
0091 900000      R     MOV     DPTR,#image
0094 C9                XCH     A,R1
0095 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
0098         ?C0060:
                                           ; SOURCE LINE # 775
0098 900000      R     MOV     DPTR,#image
009B 120000      R     LCALL   L?0736
009E 120000      R     LCALL   _MenuPrepareImageHeader
                                           ; SOURCE LINE # 783
00A1 900000      R     MOV     DPTR,#menu_item
00A4 120000      R     LCALL   L?0736
00A7 120000      R     LCALL   L?0866
00AA FF                MOV     R7,A
00AB 900000      R     MOV     DPTR,#sx
00AE 120000      R     LCALL   L?0840
                                           ; SOURCE LINE # 784
00B1 120000      R     LCALL   L?0881
00B4 FF                MOV     R7,A
00B5 900000      R     MOV     DPTR,#sy
00B8 120000      R     LCALL   L?0840
                                           ; SOURCE LINE # 785
00BB 120000      R     LCALL   L?0882
00BE 900000      R     MOV     DPTR,#sosd_win
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 788
                                           ; SOURCE LINE # 790
00C2         ?C0063:
                                           ; SOURCE LINE # 793
00C2 900000      R     MOV     DPTR,#header
00C5 120000      R     LCALL   L?0736
00C8 120000      R     LCALL   L?0850
00CB 900000      R     MOV     DPTR,#sosd_win
00CE E0                MOVX    A,@DPTR
00CF FF                MOV     R7,A
00D0 120000      E     LCALL   _SpiOsdWinImageLoc
                                           ; SOURCE LINE # 794
00D3 120000      R     LCALL   L?0999
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 124 

00D6 120000      R     LCALL   L?0736
00D9 120000      R     LCALL   L?0803
00DC FB                MOV     R3,A
00DD AAF0              MOV     R2,B
00DF 120000      E     LCALL   _SpiOsdWinImageSizeWH
                                           ; SOURCE LINE # 795
00E2 120000      R     LCALL   L?0999
00E5 120000      R     LCALL   L?0736
00E8 120000      R     LCALL   L?0828
00EB 120000      R     LCALL   L?0804
00EE FD                MOV     R5,A
00EF 900000      E     MOV     DPTR,#?_SpiOsdWinScreen?BYTE+07H
00F2 120000      R     LCALL   L?0831
00F5 900000      R     MOV     DPTR,#sy
00F8 E0                MOVX    A,@DPTR
00F9 FA                MOV     R2,A
00FA A3                INC     DPTR
00FB E0                MOVX    A,@DPTR
00FC 900000      R     MOV     DPTR,#sx
00FF 120000      R     LCALL   L?0998
0102 120000      E     LCALL   _SpiOsdWinScreen
                                           ; SOURCE LINE # 796
0105 900000      R     MOV     DPTR,#sosd_win
0108 E0                MOVX    A,@DPTR
0109 700D              JNZ     ?C0064
                                           ; SOURCE LINE # 797
010B FD                MOV     R5,A
010C FC                MOV     R4,A
010D FF                MOV     R7,A
010E FE                MOV     R6,A
010F 120000      E     LCALL   _SpiOsdWin0ImageOffsetXY
                                           ; SOURCE LINE # 798
0112 120000      R     LCALL   L?0950
0115 120000      E     LCALL   _SpiOsdWin0Animation
                                           ; SOURCE LINE # 799
0118         ?C0064:
                                           ; SOURCE LINE # 800
0118 900000      R     MOV     DPTR,#image
011B 120000      R     LCALL   L?0736
011E 120000      R     LCALL   L?0842
0121 F4                CPL     A
0122 900000      R     MOV     DPTR,#sosd_win
0125 6009              JZ      ?C0065
                                           ; SOURCE LINE # 801
0127 E0                MOVX    A,@DPTR
0128 FF                MOV     R7,A
0129 7D01              MOV     R5,#01H
012B 120000      E     LCALL   _SpiOsdWinPixelAlpha
012E 8007              SJMP    ?C0066
0130         ?C0065:
                                           ; SOURCE LINE # 802
                                           ; SOURCE LINE # 803
0130 E0                MOVX    A,@DPTR
0131 FF                MOV     R7,A
0132 E4                CLR     A
0133 FD                MOV     R5,A
0134 120000      E     LCALL   _SpiOsdWinGlobalAlpha
                                           ; SOURCE LINE # 804
0137         ?C0066:
                                           ; SOURCE LINE # 805
0137 120000      R     LCALL   L?1000
013A 120000      R     LCALL   L?0736
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 125 

013D 120000      R     LCALL   L?0845
0140 FD                MOV     R5,A
0141 120000      E     LCALL   _SpiOsdWinPixelWidth
                                           ; SOURCE LINE # 806
0144 900000      R     MOV     DPTR,#sosd_win
0147 E0                MOVX    A,@DPTR
0148 FF                MOV     R7,A
0149 900000      R     MOV     DPTR,#menu_item
014C 120000      R     LCALL   L?0736
014F 120000      R     LCALL   L?0861
0152 120000      E     LCALL   _SpiOsdWinLutOffset
                                           ; SOURCE LINE # 808
0155 900000      R     MOV     DPTR,#sosd_win
0158 E0                MOVX    A,@DPTR
0159 FF                MOV     R7,A
015A 7D01              MOV     R5,#01H
015C 120000      E     LCALL   _SpiOsdWinBuffEnable
                                           ; SOURCE LINE # 812
015F 900000      R     MOV     DPTR,#UseSOsdHwBuff
0162 E0                MOVX    A,@DPTR
0163 6073              JZ      ?C0067
                                           ; SOURCE LINE # 813
0165 900000      R     MOV     DPTR,#header
0168 120000      R     LCALL   L?0736
016B 120000      R     LCALL   L?0905
016E FE                MOV     R6,A
016F 6009              JZ      ?C0068
                                           ; SOURCE LINE # 814
0171 120000      R     LCALL   L?0843
0174 FD                MOV     R5,A
0175 AB06              MOV     R3,AR6
0177 120000      E     LCALL   _SOsdHwBuffSetRle
017A         ?C0068:
                                           ; SOURCE LINE # 815
017A 900000      R     MOV     DPTR,#menu_item
017D 120000      R     LCALL   L?0736
0180 120000      R     LCALL   L?0861
0183 C004              PUSH    AR4
0185 C005              PUSH    AR5
0187 900000      R     MOV     DPTR,#header
018A 120000      R     LCALL   L?0736
018D 90000F            MOV     DPTR,#0FH
0190 120000      E     LCALL   ?C?ILDOPTR
0193 FB                MOV     R3,A
0194 AAF0              MOV     R2,B
0196 C002              PUSH    AR2
0198 C003              PUSH    AR3
019A 900000      R     MOV     DPTR,#header
019D 120000      R     LCALL   L?0895
01A0 120000      E     LCALL   ?C?LLDPTR0
01A3 900000      E     MOV     DPTR,#?_SOsdHwBuffSetLut?BYTE+05H
01A6 120000      R     LCALL   L?0852
01A9 900000      R     MOV     DPTR,#sosd_win
01AC E0                MOVX    A,@DPTR
01AD FF                MOV     R7,A
01AE D003              POP     AR3
01B0 D002              POP     AR2
01B2 D005              POP     AR5
01B4 D004              POP     AR4
01B6 120000      E     LCALL   _SOsdHwBuffSetLut
                                           ; SOURCE LINE # 818
01B9 900000      R     MOV     DPTR,#image
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 126 

01BC 120000      R     LCALL   L?0736
01BF 120000      R     LCALL   L?0842
01C2 FF                MOV     R7,A
01C3 F4                CPL     A
01C4 7003              JNZ     $ + 5H
01C6 020000      R     LJMP    ?C0057
                                           ; SOURCE LINE # 819
01C9 900000      R     MOV     DPTR,#menu_item
01CC 120000      R     LCALL   L?0736
01CF 120000      R     LCALL   L?0892
01D2 120000      R     LCALL   L?0952
01D5 020000      E     LJMP    _SOsdHwBuffSetAlpha
                                           ; SOURCE LINE # 820
01D8         ?C0067:
                                           ; SOURCE LINE # 821
                                           ; SOURCE LINE # 823
01D8 900000      R     MOV     DPTR,#header
01DB 120000      R     LCALL   L?0736
01DE 120000      R     LCALL   L?0905
01E1 FE                MOV     R6,A
01E2 600B              JZ      ?C0071
                                           ; SOURCE LINE # 825
01E4 120000      R     LCALL   L?0843
01E7 FD                MOV     R5,A
01E8 AB06              MOV     R3,AR6
01EA 120000      E     LCALL   _SpiOsdRLC
                                           ; SOURCE LINE # 826
01ED 800B              SJMP    ?C0072
01EF         ?C0071:
                                           ; SOURCE LINE # 827
                                           ; SOURCE LINE # 829
01EF 900000      R     MOV     DPTR,#item
01F2 E0                MOVX    A,@DPTR
01F3 7005              JNZ     ?C0072
                                           ; SOURCE LINE # 833
01F5 7F01              MOV     R7,#01H
01F7 120000      E     LCALL   _SpiOsdDisableRLC
                                           ; SOURCE LINE # 834
                                           ; SOURCE LINE # 835
01FA         ?C0072:
                                           ; SOURCE LINE # 836
01FA 7F01              MOV     R7,#01H
01FC 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 839
01FF 900000      R     MOV     DPTR,#header
0202 120000      R     LCALL   L?0736
0205 120000      R     LCALL   L?0842
0208 FD                MOV     R5,A
0209 C005              PUSH    AR5
020B 900000      R     MOV     DPTR,#menu_item
020E 120000      R     LCALL   L?0736
0211 120000      R     LCALL   L?0892
0214 FB                MOV     R3,A
0215 AAF0              MOV     R2,B
0217 C002              PUSH    AR2
0219 C003              PUSH    AR3
021B 900000      R     MOV     DPTR,#header
021E 120000      R     LCALL   L?0736
0221 120000      R     LCALL   L?0786
0224 900000      R     MOV     DPTR,#sosd_win
0227 E0                MOVX    A,@DPTR
0228 FF                MOV     R7,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 127 

0229 D003              POP     AR3
022B D002              POP     AR2
022D D005              POP     AR5
022F 120000      E     LCALL   _SpiOsdLoadLUT
                                           ; SOURCE LINE # 843
0232 900000      R     MOV     DPTR,#menu_item
0235 120000      R     LCALL   L?0736
0238 120000      R     LCALL   L?0882
023B FD                MOV     R5,A
023C FF                MOV     R7,A
023D 120000      E     LCALL   _SOsdWinBuffWrite2Hw
                                           ; SOURCE LINE # 846
0240 900000      R     MOV     DPTR,#image
0243 120000      R     LCALL   L?0736
0246 120000      R     LCALL   L?0842
0249 FF                MOV     R7,A
024A F4                CPL     A
024B 6011              JZ      ?C0057
                                           ; SOURCE LINE # 847
024D 900000      R     MOV     DPTR,#menu_item
0250 120000      R     LCALL   L?0736
0253 120000      R     LCALL   L?0893
0256 120000      R     LCALL   L?0952
0259 7D7F              MOV     R5,#07FH
025B 120000      E     LCALL   _SpiOsdPixelAlphaAttr
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 850
025E         ?C0057:
025E 22                RET     
             ; FUNCTION _MenuDrawCurrImage (END)

             ; FUNCTION _MenuDrawScrollImage (BEGIN)
                                           ; SOURCE LINE # 855
0000 900000      R     MOV     DPTR,#item
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 856
                                           ; SOURCE LINE # 863
0008 900000      R     MOV     DPTR,#header
000B 120000      R     LCALL   L?0812
                                           ; SOURCE LINE # 866
000E 120000      R     LCALL   L?0735
0011 120000      R     LCALL   L?0809
0014 900000      R     MOV     DPTR,#item
0017 120000      R     LCALL   L?0783
001A 900000      R     MOV     DPTR,#menu_item
001D EB                MOV     A,R3
001E 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 867
0021 120000      R     LCALL   L?0929
0024 900000      R     MOV     DPTR,#image
0027 EB                MOV     A,R3
0028 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 870
002B 120000      R     LCALL   _MenuPrepareImageHeader
                                           ; SOURCE LINE # 874
002E 900000      R     MOV     DPTR,#header
0031 120000      R     LCALL   L?0736
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 128 

0034 120000      R     LCALL   L?0905
0037 6003              JZ      ?C0075
                                           ; SOURCE LINE # 876
0039 020000      R     LJMP    ?C0684
                                           ; SOURCE LINE # 878
003C         ?C0075:
                                           ; SOURCE LINE # 880
003C 900000      R     MOV     DPTR,#menu_item
003F 120000      R     LCALL   L?0736
0042 120000      R     LCALL   L?0883
0045 900000      R     MOV     DPTR,#sosd_win
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 883
0049 7F01              MOV     R7,#01H
004B 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 884
004E 900000      R     MOV     DPTR,#header
0051 120000      R     LCALL   L?0736
0054 120000      R     LCALL   L?0842
0057 FD                MOV     R5,A
0058 C005              PUSH    AR5
005A 900000      R     MOV     DPTR,#menu_item
005D 120000      R     LCALL   L?0736
0060 120000      R     LCALL   L?0893
0063 FB                MOV     R3,A
0064 AAF0              MOV     R2,B
0066 C002              PUSH    AR2
0068 C003              PUSH    AR3
006A 900000      R     MOV     DPTR,#header
006D 120000      R     LCALL   L?0736
0070 120000      R     LCALL   L?0990
0073 120000      R     LCALL   L?0840
0076 120000      R     LCALL   L?0968
0079 900000      R     MOV     DPTR,#sosd_win
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E D003              POP     AR3
0080 D002              POP     AR2
0082 D005              POP     AR5
0084 120000      E     LCALL   _SpiOsdLoadLUT
                                           ; SOURCE LINE # 885
0087 900000      R     MOV     DPTR,#image
008A 120000      R     LCALL   L?0736
008D 120000      R     LCALL   L?0842
0090 FF                MOV     R7,A
0091 F4                CPL     A
0092 6011              JZ      ?C0077
                                           ; SOURCE LINE # 886
0094 900000      R     MOV     DPTR,#menu_item
0097 120000      R     LCALL   L?0736
009A 120000      R     LCALL   L?0893
009D 120000      R     LCALL   L?0939
00A0 7D7F              MOV     R5,#07FH
00A2 120000      E     LCALL   _SpiOsdPixelAlphaAttr
                                           ; SOURCE LINE # 887
00A5         ?C0077:
                                           ; SOURCE LINE # 889
00A5 900000      R     MOV     DPTR,#sosd_win
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA 7D01              MOV     R5,#01H
00AC 120000      E     LCALL   _SpiOsdWinBuffEnable
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 129 

                                           ; SOURCE LINE # 890
00AF 900000      R     MOV     DPTR,#sosd_win
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 120000      E     LCALL   _SpiOsdWinPixelAlpha
                                           ; SOURCE LINE # 891
00B7 120000      R     LCALL   L?1001
00BA 120000      R     LCALL   L?0736
00BD 120000      R     LCALL   L?0845
00C0 FD                MOV     R5,A
00C1 120000      E     LCALL   _SpiOsdWinPixelWidth
                                           ; SOURCE LINE # 892
00C4 900000      R     MOV     DPTR,#sosd_win
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9 900000      R     MOV     DPTR,#menu_item
00CC 120000      R     LCALL   L?0736
00CF 120000      R     LCALL   L?0862
00D2 120000      E     LCALL   _SpiOsdWinLutOffset
                                           ; SOURCE LINE # 893
00D5 900000      R     MOV     DPTR,#sosd_win
00D8 E0                MOVX    A,@DPTR
00D9 700D              JNZ     ?C0078
                                           ; SOURCE LINE # 894
00DB FD                MOV     R5,A
00DC FC                MOV     R4,A
00DD FF                MOV     R7,A
00DE FE                MOV     R6,A
00DF 120000      E     LCALL   _SpiOsdWin0ImageOffsetXY
                                           ; SOURCE LINE # 895
00E2 120000      R     LCALL   L?0950
00E5 120000      E     LCALL   _SpiOsdWin0Animation
                                           ; SOURCE LINE # 896
00E8         ?C0078:
                                           ; SOURCE LINE # 898
00E8 900000      R     MOV     DPTR,#direction
00EB E0                MOVX    A,@DPTR
00EC 6403              XRL     A,#03H
00EE 6003              JZ      $ + 5H
00F0 020000      R     LJMP    ?C0079
                                           ; SOURCE LINE # 899
00F3 A3                INC     DPTR
00F4 F0                MOVX    @DPTR,A
00F5 A3                INC     DPTR
00F6 04                INC     A
00F7 F0                MOVX    @DPTR,A
00F8         ?C0080:
00F8 900000      R     MOV     DPTR,#header
00FB 120000      R     LCALL   L?0736
00FE 120000      R     LCALL   L?0804
0101 FF                MOV     R7,A
0102 120000      R     LCALL   L?0991
0105 95F0              SUBB    A,B
0107 4003              JC      $ + 5H
0109 020000      R     LJMP    ?C0076
                                           ; SOURCE LINE # 900
010C 120000      R     LCALL   L?0804
010F FF                MOV     R7,A
0110 900000      R     MOV     DPTR,#i
0113 120000      R     LCALL   L?0931
0116 E5F0              MOV     A,B
0118 9C                SUBB    A,R4
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 130 

0119 FE                MOV     R6,A
011A 90000B            MOV     DPTR,#0BH
011D 120000      R     LCALL   L?0863
0120 120000      E     LCALL   ?C?IMUL
0123 E4                CLR     A
0124 FC                MOV     R4,A
0125 FD                MOV     R5,A
0126 120000      R     LCALL   L?0868
                                           ; SOURCE LINE # 901
0129 E4                CLR     A
012A 900000      R     MOV     DPTR,#start_bit
012D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 902
012E 900000      R     MOV     DPTR,#start_byte
0131 120000      R     LCALL   L?0771
0134 FF                MOV     R7,A
0135 EC                MOV     A,R4
0136 4D                ORL     A,R5
0137 4E                ORL     A,R6
0138 4F                ORL     A,R7
0139 603B              JZ      ?C0083
                                           ; SOURCE LINE # 903
013B 900000      R     MOV     DPTR,#header
013E 120000      R     LCALL   L?0736
0141 120000      R     LCALL   L?0845
0144 6406              XRL     A,#06H
0146 7005              JNZ     ?C0084
                                           ; SOURCE LINE # 904
0148 120000      R     LCALL   L?1003
                                           ; SOURCE LINE # 905
                                           ; SOURCE LINE # 906
                                           ; SOURCE LINE # 907
                                           ; SOURCE LINE # 908
014B 8017              SJMP    ?C0685
014D         ?C0084:
                                           ; SOURCE LINE # 909
014D 900000      R     MOV     DPTR,#header
0150 120000      R     LCALL   L?0736
0153 120000      R     LCALL   L?0845
0156 6404              XRL     A,#04H
0158 701C              JNZ     ?C0083
                                           ; SOURCE LINE # 910
015A 900000      R     MOV     DPTR,#start_byte
015D 120000      R     LCALL   L?0771
0160 FF                MOV     R7,A
0161 E4                CLR     A
0162 7B04              MOV     R3,#04H
0164         ?C0685:
0164 FA                MOV     R2,A
0165 F9                MOV     R1,A
0166 F8                MOV     R0,A
0167 120000      E     LCALL   ?C?LMUL
016A 120000      R     LCALL   L?0868
                                           ; SOURCE LINE # 911
016D 900000      R     MOV     DPTR,#start_byte
0170 120000      R     LCALL   L?0771
                                           ; SOURCE LINE # 912
                                           ; SOURCE LINE # 913
0173 120000      R     LCALL   L?0867
                                           ; SOURCE LINE # 914
                                           ; SOURCE LINE # 915
0176         ?C0083:
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 131 

                                           ; SOURCE LINE # 917
0176 900000      R     MOV     DPTR,#header
0179 120000      R     LCALL   L?0736
017C 120000      R     LCALL   L?0817
                                           ; SOURCE LINE # 918
                                           ; SOURCE LINE # 919
017F 120000      R     LCALL   L?0864
0182 A3                INC     DPTR
0183 120000      R     LCALL   L?0736
0186 120000      R     LCALL   L?0829
0189 900000      R     MOV     DPTR,#i
018C E0                MOVX    A,@DPTR
018D FD                MOV     R5,A
018E A3                INC     DPTR
018F E0                MOVX    A,@DPTR
0190 900000      E     MOV     DPTR,#?_SpiOsdWinScreen?BYTE+07H
0193 CD                XCH     A,R5
0194 F0                MOVX    @DPTR,A
0195 A3                INC     DPTR
0196 ED                MOV     A,R5
0197 F0                MOVX    @DPTR,A
0198 E4                CLR     A
0199 FB                MOV     R3,A
019A FA                MOV     R2,A
019B FD                MOV     R5,A
019C FC                MOV     R4,A
019D 120000      E     LCALL   _SpiOsdWinScreen
                                           ; SOURCE LINE # 920
01A0 120000      R     LCALL   L?1001
01A3 120000      R     LCALL   L?0736
01A6 90000B            MOV     DPTR,#0BH
01A9 120000      R     LCALL   L?0863
01AC 900000      R     MOV     DPTR,#i
01AF E0                MOVX    A,@DPTR
01B0 FA                MOV     R2,A
01B1 A3                INC     DPTR
01B2 E0                MOVX    A,@DPTR
01B3 FB                MOV     R3,A
01B4 120000      E     LCALL   _SpiOsdWinImageSizeWH
                                           ; SOURCE LINE # 922
01B7 7F01              MOV     R7,#01H
01B9 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 923
01BC 900000      R     MOV     DPTR,#menu_item
01BF 120000      R     LCALL   L?0736
01C2 120000      R     LCALL   L?0883
01C5 FD                MOV     R5,A
01C6 FF                MOV     R7,A
01C7 120000      E     LCALL   _SOsdWinBuffWrite2Hw
                                           ; SOURCE LINE # 925
01CA 900000      R     MOV     DPTR,#header
01CD 120000      R     LCALL   L?0736
01D0 120000      R     LCALL   L?0804
01D3 FF                MOV     R7,A
01D4 AEF0              MOV     R6,B
01D6 900000      R     MOV     DPTR,#i+01H
01D9 E0                MOVX    A,@DPTR
01DA 2402              ADD     A,#02H
01DC 120000      R     LCALL   L?0954
01DF FC                MOV     R4,A
01E0 C3                CLR     C
01E1 ED                MOV     A,R5
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 132 

01E2 9F                SUBB    A,R7
01E3 EC                MOV     A,R4
01E4 9E                SUBB    A,R6
01E5 400E              JC      ?C0087
                                           ; SOURCE LINE # 927
01E7 E0                MOVX    A,@DPTR
01E8 6E                XRL     A,R6
01E9 7003              JNZ     ?C0635
01EB A3                INC     DPTR
01EC E0                MOVX    A,@DPTR
01ED 6F                XRL     A,R7
01EE         ?C0635:
01EE 6010              JZ      ?C0082
                                           ; SOURCE LINE # 928
01F0 120000      R     LCALL   L?0937
                                           ; SOURCE LINE # 929
                                           ; SOURCE LINE # 931
01F3 800B              SJMP    ?C0082
01F5         ?C0087:
                                           ; SOURCE LINE # 932
                                           ; SOURCE LINE # 933
01F5 900000      R     MOV     DPTR,#i+01H
01F8 E0                MOVX    A,@DPTR
01F9 2402              ADD     A,#02H
01FB F0                MOVX    @DPTR,A
01FC 120000      R     LCALL   L?0955
01FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 935
                                           ; SOURCE LINE # 936
0200         ?C0082:
0200 900000      R     MOV     DPTR,#i+01H
0203 E0                MOVX    A,@DPTR
0204 04                INC     A
0205 F0                MOVX    @DPTR,A
0206 7006              JNZ     ?C0636
0208 900000      R     MOV     DPTR,#i
020B E0                MOVX    A,@DPTR
020C 04                INC     A
020D F0                MOVX    @DPTR,A
020E         ?C0636:
020E 020000      R     LJMP    ?C0080
                                           ; SOURCE LINE # 937
0211         ?C0079:
                                           ; SOURCE LINE # 938
0211 900000      R     MOV     DPTR,#direction
0214 E0                MOVX    A,@DPTR
0215 6405              XRL     A,#05H
0217 6003              JZ      $ + 5H
0219 020000      R     LJMP    ?C0091
                                           ; SOURCE LINE # 939
                                           ; SOURCE LINE # 940
021C 120000      R     LCALL   L?1002
021F 120000      R     LCALL   L?0736
0222 120000      R     LCALL   L?0803
0225 FB                MOV     R3,A
0226 AAF0              MOV     R2,B
0228 120000      E     LCALL   _SpiOsdWinImageSizeWH
                                           ; SOURCE LINE # 942
022B 900000      R     MOV     DPTR,#i
022E E4                CLR     A
022F F0                MOVX    @DPTR,A
0230 A3                INC     DPTR
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 133 

0231 04                INC     A
0232 F0                MOVX    @DPTR,A
0233         ?C0092:
0233 900000      R     MOV     DPTR,#header
0236 120000      R     LCALL   L?0736
0239 90000B            MOV     DPTR,#0BH
023C 120000      R     LCALL   L?0822
023F 120000      R     LCALL   L?0991
0242 9E                SUBB    A,R6
0243 4003              JC      $ + 5H
0245 020000      R     LJMP    ?C0076
                                           ; SOURCE LINE # 943
0248 120000      R     LCALL   L?0931
024B EE                MOV     A,R6
024C 9C                SUBB    A,R4
024D FE                MOV     R6,A
024E E4                CLR     A
024F FC                MOV     R4,A
0250 FD                MOV     R5,A
0251 A3                INC     DPTR
0252 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 944
0255 E4                CLR     A
0256 900000      R     MOV     DPTR,#start_bit
0259 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 945
025A 900000      R     MOV     DPTR,#start_byte
025D 120000      R     LCALL   L?0771
0260 FF                MOV     R7,A
0261 EC                MOV     A,R4
0262 4D                ORL     A,R5
0263 4E                ORL     A,R6
0264 4F                ORL     A,R7
0265 603B              JZ      ?C0095
                                           ; SOURCE LINE # 946
0267 900000      R     MOV     DPTR,#header
026A 120000      R     LCALL   L?0736
026D 120000      R     LCALL   L?0845
0270 6406              XRL     A,#06H
0272 7005              JNZ     ?C0096
                                           ; SOURCE LINE # 947
0274 120000      R     LCALL   L?1003
                                           ; SOURCE LINE # 948
                                           ; SOURCE LINE # 949
                                           ; SOURCE LINE # 950
                                           ; SOURCE LINE # 951
0277 8017              SJMP    ?C0686
0279         ?C0096:
                                           ; SOURCE LINE # 952
0279 900000      R     MOV     DPTR,#header
027C 120000      R     LCALL   L?0736
027F 120000      R     LCALL   L?0845
0282 6404              XRL     A,#04H
0284 701C              JNZ     ?C0095
                                           ; SOURCE LINE # 953
0286 900000      R     MOV     DPTR,#start_byte
0289 120000      R     LCALL   L?0771
028C FF                MOV     R7,A
028D E4                CLR     A
028E 7B04              MOV     R3,#04H
0290         ?C0686:
0290 FA                MOV     R2,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 134 

0291 F9                MOV     R1,A
0292 F8                MOV     R0,A
0293 120000      E     LCALL   ?C?LMUL
0296 120000      R     LCALL   L?0868
                                           ; SOURCE LINE # 954
0299 900000      R     MOV     DPTR,#start_byte
029C 120000      R     LCALL   L?0771
                                           ; SOURCE LINE # 955
                                           ; SOURCE LINE # 956
029F 120000      R     LCALL   L?0867
                                           ; SOURCE LINE # 957
                                           ; SOURCE LINE # 958
02A2         ?C0095:
                                           ; SOURCE LINE # 959
02A2 900000      R     MOV     DPTR,#header
02A5 120000      R     LCALL   L?0736
02A8 120000      R     LCALL   L?0817
                                           ; SOURCE LINE # 960
                                           ; SOURCE LINE # 961
02AB 120000      R     LCALL   L?0864
02AE 900000      R     MOV     DPTR,#i
02B1 E0                MOVX    A,@DPTR
02B2 FD                MOV     R5,A
02B3 A3                INC     DPTR
02B4 E0                MOVX    A,@DPTR
02B5 900000      E     MOV     DPTR,#?_SpiOsdWinScreen?BYTE+05H
02B8 CD                XCH     A,R5
02B9 F0                MOVX    @DPTR,A
02BA A3                INC     DPTR
02BB ED                MOV     A,R5
02BC F0                MOVX    @DPTR,A
02BD 900000      R     MOV     DPTR,#header
02C0 120000      R     LCALL   L?0736
02C3 120000      R     LCALL   L?0804
02C6 FD                MOV     R5,A
02C7 900000      E     MOV     DPTR,#?_SpiOsdWinScreen?BYTE+07H
02CA 120000      R     LCALL   L?0831
02CD E4                CLR     A
02CE FB                MOV     R3,A
02CF FA                MOV     R2,A
02D0 FD                MOV     R5,A
02D1 FC                MOV     R4,A
02D2 120000      E     LCALL   _SpiOsdWinScreen
                                           ; SOURCE LINE # 963
02D5 7F01              MOV     R7,#01H
02D7 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 964
02DA 900000      R     MOV     DPTR,#menu_item
02DD 120000      R     LCALL   L?0736
02E0 120000      R     LCALL   L?0883
02E3 FD                MOV     R5,A
02E4 FF                MOV     R7,A
02E5 120000      E     LCALL   _SOsdWinBuffWrite2Hw
                                           ; SOURCE LINE # 967
02E8 900000      R     MOV     DPTR,#header
02EB 120000      R     LCALL   L?0736
02EE 90000B            MOV     DPTR,#0BH
02F1 120000      R     LCALL   L?0822
02F4 900000      R     MOV     DPTR,#i+01H
02F7 E0                MOVX    A,@DPTR
02F8 2404              ADD     A,#04H
02FA 120000      R     LCALL   L?0954
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 135 

02FD FC                MOV     R4,A
02FE C3                CLR     C
02FF ED                MOV     A,R5
0300 9F                SUBB    A,R7
0301 EC                MOV     A,R4
0302 9E                SUBB    A,R6
0303 400E              JC      ?C0099
                                           ; SOURCE LINE # 969
0305 E0                MOVX    A,@DPTR
0306 6E                XRL     A,R6
0307 7003              JNZ     ?C0637
0309 A3                INC     DPTR
030A E0                MOVX    A,@DPTR
030B 6F                XRL     A,R7
030C         ?C0637:
030C 6010              JZ      ?C0094
                                           ; SOURCE LINE # 970
030E 120000      R     LCALL   L?0937
                                           ; SOURCE LINE # 971
                                           ; SOURCE LINE # 973
0311 800B              SJMP    ?C0094
0313         ?C0099:
                                           ; SOURCE LINE # 974
                                           ; SOURCE LINE # 975
0313 900000      R     MOV     DPTR,#i+01H
0316 E0                MOVX    A,@DPTR
0317 2404              ADD     A,#04H
0319 F0                MOVX    @DPTR,A
031A 120000      R     LCALL   L?0955
031D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 977
                                           ; SOURCE LINE # 978
031E         ?C0094:
031E 900000      R     MOV     DPTR,#i+01H
0321 E0                MOVX    A,@DPTR
0322 04                INC     A
0323 F0                MOVX    @DPTR,A
0324 7006              JNZ     ?C0638
0326 900000      R     MOV     DPTR,#i
0329 E0                MOVX    A,@DPTR
032A 04                INC     A
032B F0                MOVX    @DPTR,A
032C         ?C0638:
032C 020000      R     LJMP    ?C0092
                                           ; SOURCE LINE # 979
032F         ?C0091:
                                           ; SOURCE LINE # 980
                                           ; SOURCE LINE # 983
032F         ?C0684:
032F 900000      R     MOV     DPTR,#item
0332 E0                MOVX    A,@DPTR
0333 FD                MOV     R5,A
0334 E4                CLR     A
0335 FF                MOV     R7,A
0336 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 984
                                           ; SOURCE LINE # 985
0339         ?C0076:
0339 22                RET     
033A         L?0864:
033A 2F                ADD     A,R7
033B FF                MOV     R7,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 136 

033C EA                MOV     A,R2
033D 3E                ADDC    A,R6
033E FE                MOV     R6,A
033F E9                MOV     A,R1
0340 3D                ADDC    A,R5
0341 FD                MOV     R5,A
0342 E8                MOV     A,R0
0343 3C                ADDC    A,R4
0344 FC                MOV     R4,A
0345 900000      E     MOV     DPTR,#?_SpiOsdWinImageLoc?BYTE+01H
0348 120000      E     LCALL   ?C?LSTXDATA
034B 900000      R     MOV     DPTR,#sosd_win
034E E0                MOVX    A,@DPTR
034F FF                MOV     R7,A
0350 120000      E     LCALL   _SpiOsdWinImageLoc
0353 900000      R     MOV     DPTR,#sosd_win
0356 E0                MOVX    A,@DPTR
0357 FF                MOV     R7,A
0358 900000      R     MOV     DPTR,#start_bit
035B E0                MOVX    A,@DPTR
035C FD                MOV     R5,A
035D 120000      E     LCALL   _SpiOsdWinImageLocBit
0360 900000      R     MOV     DPTR,#sosd_win
0363 E0                MOVX    A,@DPTR
0364 FF                MOV     R7,A
0365 22                RET     
             ; FUNCTION _MenuDrawScrollImage (END)

             ; FUNCTION _MenuTurnOffCurrImage (BEGIN)
                                           ; SOURCE LINE # 987
;---- Variable 'item' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 988
                                           ; SOURCE LINE # 992
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0809
0006 EF                MOV     A,R7
0007 120000      R     LCALL   L?0784
;---- Variable 'menu_item' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 993
000A 120000      R     LCALL   L?0883
000D 900000      R     MOV     DPTR,#sosd_win
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 994
0011 7F01              MOV     R7,#01H
0013 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 995
0016 900000      R     MOV     DPTR,#sosd_win
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B E4                CLR     A
001C FD                MOV     R5,A
001D 020000      E     LJMP    _SpiOsdWinHWEnable
             ; FUNCTION _MenuTurnOffCurrImage (END)

             ; FUNCTION _MenuDrawDeactivatedItemImage (BEGIN)
                                           ; SOURCE LINE # 998
;---- Variable 'item' assigned to Register 'R5' ----
;---- Variable 'sosd_win' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 999
                                           ; SOURCE LINE # 1000
0000 900000      R     MOV     DPTR,#temp
0003 EF                MOV     A,R7
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 137 

0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1001
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1003
0008 22                RET     
             ; FUNCTION _MenuDrawDeactivatedItemImage (END)

             ; FUNCTION _MenuFontOsdItemString (BEGIN)
                                           ; SOURCE LINE # 1012
0000 900000      R     MOV     DPTR,#str
0003 EB                MOV     A,R3
0004 120000      R     LCALL   L?0753
;---- Variable 'index' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1013
                                           ; SOURCE LINE # 1017
0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0908
000D 900000      R     MOV     DPTR,#text_info
0010 EB                MOV     A,R3
0011 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1018
0014 900000      R     MOV     DPTR,#text_info+01H
0017 120000      R     LCALL   L?0876
                                           ; SOURCE LINE # 1021
001A 900000      R     MOV     DPTR,#text_info
001D 120000      R     LCALL   L?0736
0020 120000      R     LCALL   L?0837
0023 FD                MOV     R5,A
0024 900000      R     MOV     DPTR,#palette
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1022
0028 900001            MOV     DPTR,#01H
002B 120000      R     LCALL   L?0822
002E 120000      E     LCALL   _FOsdRamSetAddrAttr
                                           ; SOURCE LINE # 1024
;---- Variable 'n_char' assigned to Register 'R6' ----
0031 E4                CLR     A
0032 FE                MOV     R6,A
0033         ?C0105:
                                           ; SOURCE LINE # 1025
0033 900000      R     MOV     DPTR,#str
0036 120000      R     LCALL   L?0736
0039 120000      E     LCALL   ?C?CLDPTR
003C 600E              JZ      ?C0106
                                           ; SOURCE LINE # 1026
003E 900000      R     MOV     DPTR,#str
0041 120000      R     LCALL   L?0900
0044 120000      R     LCALL   L?0799
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1027
0049 0E                INC     R6
                                           ; SOURCE LINE # 1028
004A 80E7              SJMP    ?C0105
004C         ?C0106:
                                           ; SOURCE LINE # 1031
004C 900000      R     MOV     DPTR,#text_info
004F 120000      R     LCALL   L?0736
0052 120000      E     LCALL   ?C?CLDPTR
0055 FF                MOV     R7,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 138 

0056 AD06              MOV     R5,AR6
0058 7B01              MOV     R3,#01H
005A 020000      E     LJMP    _FOsdWinScreenWH
             ; FUNCTION _MenuFontOsdItemString (END)

             ; FUNCTION proc_menu_bg (BEGIN)
                                           ; SOURCE LINE # 1036
                                           ; SOURCE LINE # 1037
                                           ; SOURCE LINE # 1039
0000 120000      R     LCALL   L?0735
0003 120000      E     LCALL   ?C?CLDPTR
0006 540F              ANL     A,#0FH
0008 900000      R     MOV     DPTR,#curr_menu_type
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1041
000C 120000      R     LCALL   L?0925
                                           ; SOURCE LINE # 1043
000F 120000      R     LCALL   L?1004
                                           ; SOURCE LINE # 1044
0012 120000      E     LCALL   SOsdHwBuffClean
                                           ; SOURCE LINE # 1045
0015 E4                CLR     A
0016 FF                MOV     R7,A
0017 120000      E     LCALL   _SOsdWinBuffClean
                                           ; SOURCE LINE # 1047
001A E4                CLR     A
001B FD                MOV     R5,A
001C FF                MOV     R7,A
001D 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 1048
0020 900000      R     MOV     DPTR,#curr_menu_type
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 6401              XRL     A,#01H
0027 6005              JZ      ?C0109
0029 EF                MOV     A,R7
002A 6402              XRL     A,#02H
002C 703F              JNZ     ?C0108
002E         ?C0109:
                                           ; SOURCE LINE # 1049
                                           ; SOURCE LINE # 1051
002E 120000      E     LCALL   SOsdHwBuffWrite2Hw
                                           ; SOURCE LINE # 1052
0031 E4                CLR     A
0032 900000      R     MOV     DPTR,#UseSOsdHwBuff
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1054
0036 900000      R     MOV     DPTR,#menu_lock_scroll
0039 E0                MOVX    A,@DPTR
003A 702A              JNZ     ?C0110
                                           ; SOURCE LINE # 1055
003C 900000      R     MOV     DPTR,#curr_menu_type
003F E0                MOVX    A,@DPTR
0040 B40104            CJNE    A,#01H,?C0111
                                           ; SOURCE LINE # 1056
0043 7D05              MOV     R5,#05H
0045 8009              SJMP    ?C0687
0047         ?C0111:
                                           ; SOURCE LINE # 1057
0047 900000      R     MOV     DPTR,#curr_menu_type
004A E0                MOVX    A,@DPTR
004B B40209            CJNE    A,#02H,?C0113
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 139 

                                           ; SOURCE LINE # 1058
004E 7D03              MOV     R5,#03H
0050         ?C0687:
0050 7F01              MOV     R7,#01H
0052 120000      R     LCALL   _MenuDrawScrollImage
0055 8007              SJMP    ?C0112
0057         ?C0113:
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1061
0057 7D01              MOV     R5,#01H
0059 E4                CLR     A
005A FF                MOV     R7,A
005B 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 1062
005E         ?C0112:
                                           ; SOURCE LINE # 1063
005E 900000      R     MOV     DPTR,#menu_lock_scroll
0061 7401              MOV     A,#01H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1064
0064 8007              SJMP    ?C0108
0066         ?C0110:
                                           ; SOURCE LINE # 1066
0066 7D01              MOV     R5,#01H
0068 E4                CLR     A
0069 FF                MOV     R7,A
006A 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 1068
006D         ?C0108:
                                           ; SOURCE LINE # 1069
006D 120000      R     LCALL   L?0735
0070 120000      R     LCALL   L?0758
0073 FD                MOV     R5,A
0074 E4                CLR     A
0075 FF                MOV     R7,A
0076 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 1071
0079 120000      R     LCALL   L?0735
007C 120000      E     LCALL   ?C?CLDPTR
007F 30E40A            JNB     ACC.4,?C0116
                                           ; SOURCE LINE # 1072
0082 120000      R     LCALL   L?0765
0085 2F                ADD     A,R7
0086 FD                MOV     R5,A
0087 E4                CLR     A
0088 FF                MOV     R7,A
0089 120000      R     LCALL   _MenuDrawCurrImage
008C         ?C0116:
                                           ; SOURCE LINE # 1074
008C 900000      R     MOV     DPTR,#UseSOsdHwBuff
008F E0                MOVX    A,@DPTR
0090 6008              JZ      ?C0118
                                           ; SOURCE LINE # 1075
0092 120000      E     LCALL   SOsdHwBuffWrite2Hw
                                           ; SOURCE LINE # 1076
0095 E4                CLR     A
0096 900000      R     MOV     DPTR,#UseSOsdHwBuff
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1077
                                           ; SOURCE LINE # 1078
009A         ?C0118:
009A 22                RET     
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 140 

             ; FUNCTION proc_menu_bg (END)

             ; FUNCTION _MenuKeyInput_slider_page (BEGIN)
                                           ; SOURCE LINE # 1084
;---- Variable 'key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1085
                                           ; SOURCE LINE # 1086
0000 EF                MOV     A,R7
0001 24FD              ADD     A,#0FDH
0003 6018              JZ      ?C0122
0005 14                DEC     A
0006 602F              JZ      ?C0123
0008 14                DEC     A
0009 603C              JZ      ?C0125
000B 2403              ADD     A,#03H
000D 7046              JNZ     ?C0119
                                           ; SOURCE LINE # 1087
                                           ; SOURCE LINE # 1088
                                           ; SOURCE LINE # 1089
000F         ?C0121:
                                           ; SOURCE LINE # 1090
000F 120000      R     LCALL   L?0735
0012 120000      R     LCALL   L?0758
0015 120000      R     LCALL   L?0761
0018 900013            MOV     DPTR,#013H
                                           ; SOURCE LINE # 1091
                                           ; SOURCE LINE # 1092
                                           ; SOURCE LINE # 1093
001B 800C              SJMP    ?C0688
                                           ; SOURCE LINE # 1094
001D         ?C0122:
                                           ; SOURCE LINE # 1095
001D 120000      R     LCALL   L?0735
0020 120000      R     LCALL   L?0758
0023 120000      R     LCALL   L?0761
0026 900015            MOV     DPTR,#015H
0029         ?C0688:
0029 120000      R     LCALL   L?0733
002C EF                MOV     A,R7
                                           ; SOURCE LINE # 1096
002D 120000      R     LCALL   L?0742
0030 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 1097
0033 E4                CLR     A
0034 FF                MOV     R7,A
                                           ; SOURCE LINE # 1098
0035 801E              SJMP    ?C0119
                                           ; SOURCE LINE # 1099
0037         ?C0123:
                                           ; SOURCE LINE # 1100
0037 120000      R     LCALL   L?0735
003A 120000      R     LCALL   L?0758
003D B40515            CJNE    A,#05H,?C0119
                                           ; SOURCE LINE # 1101
0040 120000      R     LCALL   proc_slider_left
                                           ; SOURCE LINE # 1102
0043 E4                CLR     A
0044 FF                MOV     R7,A
                                           ; SOURCE LINE # 1103
                                           ; SOURCE LINE # 1104
0045 800E              SJMP    ?C0119
                                           ; SOURCE LINE # 1105
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 141 

0047         ?C0125:
                                           ; SOURCE LINE # 1106
0047 120000      R     LCALL   L?0735
004A 120000      R     LCALL   L?0758
004D B40505            CJNE    A,#05H,?C0119
                                           ; SOURCE LINE # 1107
0050 120000      R     LCALL   proc_slider_right
                                           ; SOURCE LINE # 1108
0053 E4                CLR     A
0054 FF                MOV     R7,A
                                           ; SOURCE LINE # 1109
                                           ; SOURCE LINE # 1110
                                           ; SOURCE LINE # 1111
                                           ; SOURCE LINE # 1113
                                           ; SOURCE LINE # 1114
0055         ?C0119:
                                           ; SOURCE LINE # 1115
                                           ; SOURCE LINE # 1116
0055         ?C0128:
0055 22                RET     
             ; FUNCTION _MenuKeyInput_slider_page (END)

             ; FUNCTION _MenuKeyInput_slider3_page (BEGIN)
                                           ; SOURCE LINE # 1118
0000 900000      R     MOV     DPTR,#key
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1119
                                           ; SOURCE LINE # 1120
0005 24FD              ADD     A,#0FDH
0007 602B              JZ      ?C0133
0009 14                DEC     A
000A 605C              JZ      ?C0135
000C 14                DEC     A
000D 6073              JZ      ?C0138
000F 2403              ADD     A,#03H
0011 6003              JZ      $ + 5H
0013 020000      R     LJMP    ?C0129
                                           ; SOURCE LINE # 1121
                                           ; SOURCE LINE # 1122
                                           ; SOURCE LINE # 1123
0016         ?C0131:
                                           ; SOURCE LINE # 1124
0016 120000      R     LCALL   L?0735
0019 120000      R     LCALL   L?0758
001C 120000      R     LCALL   L?0731
                                           ; SOURCE LINE # 1125
001F 120000      R     LCALL   L?0805
0022 FF                MOV     R7,A
0023 120000      R     LCALL   L?0758
0026 FE                MOV     R6,A
0027 C3                CLR     C
0028 9F                SUBB    A,R7
0029 4032              JC      ?C0689
                                           ; SOURCE LINE # 1126
002B 120000      R     LCALL   L?0735
002E EE                MOV     A,R6
002F 120000      R     LCALL   L?0849
0032         ?C0132:
                                           ; SOURCE LINE # 1127
                                           ; SOURCE LINE # 1128
                                           ; SOURCE LINE # 1129
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 142 

0032 8029              SJMP    ?C0689
                                           ; SOURCE LINE # 1130
0034         ?C0133:
                                           ; SOURCE LINE # 1131
0034 120000      R     LCALL   L?0735
0037 120000      R     LCALL   L?0758
003A 75F017            MOV     B,#017H
003D A4                MUL     AB
003E FF                MOV     R7,A
003F AEF0              MOV     R6,B
0041 120000      R     LCALL   L?0809
0044 900015            MOV     DPTR,#015H
0047 120000      R     LCALL   L?0732
                                           ; SOURCE LINE # 1132
004A 120000      R     LCALL   L?0805
004D FF                MOV     R7,A
004E 120000      R     LCALL   L?0758
0051 FE                MOV     R6,A
0052 C3                CLR     C
0053 9F                SUBB    A,R7
0054 4007              JC      ?C0134
                                           ; SOURCE LINE # 1133
0056 120000      R     LCALL   L?0735
0059 EE                MOV     A,R6
005A 120000      R     LCALL   L?0897
005D         ?C0134:
                                           ; SOURCE LINE # 1134
005D         ?C0689:
005D 120000      R     LCALL   L?0735
0060 120000      R     LCALL   L?0744
0063 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 1135
                                           ; SOURCE LINE # 1136
0066 8031              SJMP    ?C0691
                                           ; SOURCE LINE # 1137
0068         ?C0135:
                                           ; SOURCE LINE # 1138
0068 120000      R     LCALL   L?0735
006B 120000      R     LCALL   L?0758
006E FF                MOV     R7,A
006F 6405              XRL     A,#05H
0071 600A              JZ      ?C0137
0073 EF                MOV     A,R7
0074 6407              XRL     A,#07H
0076 6005              JZ      ?C0137
0078 EF                MOV     A,R7
0079 6409              XRL     A,#09H
007B 7021              JNZ     ?C0129
007D         ?C0137:
                                           ; SOURCE LINE # 1139
007D 120000      R     LCALL   proc_slider3_left
                                           ; SOURCE LINE # 1140
0080         ?C0690:
                                           ; SOURCE LINE # 1141
                                           ; SOURCE LINE # 1142
0080 8017              SJMP    ?C0691
                                           ; SOURCE LINE # 1143
0082         ?C0138:
                                           ; SOURCE LINE # 1144
0082 120000      R     LCALL   L?0735
0085 120000      R     LCALL   L?0758
0088 FF                MOV     R7,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 143 

0089 6405              XRL     A,#05H
008B 6009              JZ      ?C0140
008D EF                MOV     A,R7
008E 6407              XRL     A,#07H
0090 6004              JZ      ?C0140
0092 EF                MOV     A,R7
0093 B40908            CJNE    A,#09H,?C0129
0096         ?C0140:
                                           ; SOURCE LINE # 1145
0096 120000      R     LCALL   proc_slider3_right
                                           ; SOURCE LINE # 1146
0099         ?C0691:
0099 E4                CLR     A
009A 900000      R     MOV     DPTR,#key
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1147
                                           ; SOURCE LINE # 1148
                                           ; SOURCE LINE # 1149
                                           ; SOURCE LINE # 1151
                                           ; SOURCE LINE # 1152
009E         ?C0129:
                                           ; SOURCE LINE # 1153
009E 900000      R     MOV     DPTR,#key
00A1 E0                MOVX    A,@DPTR
00A2 FF                MOV     R7,A
                                           ; SOURCE LINE # 1154
00A3         ?C0142:
00A3 22                RET     
             ; FUNCTION _MenuKeyInput_slider3_page (END)

             ; FUNCTION _MenuKeyInput_main_page (BEGIN)
                                           ; SOURCE LINE # 1156
0000 900000      R     MOV     DPTR,#key
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1157
                                           ; SOURCE LINE # 1160
0005 24FD              ADD     A,#0FDH
0007 604A              JZ      ?C0149
0009 14                DEC     A
000A 7003              JNZ     $ + 5H
000C 020000      R     LJMP    ?C0153
000F 14                DEC     A
0010 7003              JNZ     $ + 5H
0012 020000      R     LJMP    ?C0155
0015 2403              ADD     A,#03H
0017 6003              JZ      $ + 5H
0019 020000      R     LJMP    ?C0143
                                           ; SOURCE LINE # 1161
                                           ; SOURCE LINE # 1162
                                           ; SOURCE LINE # 1163
001C         ?C0145:
                                           ; SOURCE LINE # 1164
001C 120000      R     LCALL   L?0735
001F 120000      R     LCALL   L?0806
0022 FE                MOV     R6,A
0023 120000      R     LCALL   L?0758
0026 FF                MOV     R7,A
0027 C3                CLR     C
0028 9E                SUBB    A,R6
0029 5002              JNC     ?C0146
                                           ; SOURCE LINE # 1166
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 144 

                                           ; SOURCE LINE # 1167
                                           ; SOURCE LINE # 1168
                                           ; SOURCE LINE # 1169
                                           ; SOURCE LINE # 1170
002B 8035              SJMP    ?C0692
002D         ?C0146:
                                           ; SOURCE LINE # 1171
                                           ; SOURCE LINE # 1173
002D 120000      R     LCALL   L?0735
0030 120000      R     LCALL   L?0758
0033 120000      R     LCALL   L?0761
0036 900013            MOV     DPTR,#013H
0039 120000      E     LCALL   ?C?CLDOPTR
003C FF                MOV     R7,A
003D 900000      R     MOV     DPTR,#new
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1174
0041 120000      R     LCALL   L?0735
0044 120000      R     LCALL   L?0806
0047 FE                MOV     R6,A
0048 EF                MOV     A,R7
0049 C3                CLR     C
004A 9E                SUBB    A,R6
004B 5003              JNC     $ + 5H
004D 020000      R     LJMP    ?C0143
                                           ; SOURCE LINE # 1175
                                           ; SOURCE LINE # 1176
                                           ; SOURCE LINE # 1177
0050 020000      R     LJMP    ?C0693
                                           ; SOURCE LINE # 1179
0053         ?C0149:
                                           ; SOURCE LINE # 1180
0053 120000      R     LCALL   L?0735
0056 120000      R     LCALL   L?0806
0059 FE                MOV     R6,A
005A 120000      R     LCALL   L?0758
005D FF                MOV     R7,A
005E C3                CLR     C
005F 9E                SUBB    A,R6
0060 5017              JNC     ?C0150
                                           ; SOURCE LINE # 1182
0062         ?C0692:
0062 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 1183
0065 120000      R     LCALL   L?0735
                                           ; SOURCE LINE # 1184
0068 120000      R     LCALL   L?0754
006B FD                MOV     R5,A
006C E4                CLR     A
006D FF                MOV     R7,A
006E 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 1185
0071 E4                CLR     A
0072 900000      R     MOV     DPTR,#key
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1186
0076 020000      R     LJMP    ?C0143
0079         ?C0150:
                                           ; SOURCE LINE # 1187
                                           ; SOURCE LINE # 1189
0079 120000      R     LCALL   L?0735
007C 120000      R     LCALL   L?0758
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 145 

007F 120000      R     LCALL   L?0761
0082 900015            MOV     DPTR,#015H
0085 120000      E     LCALL   ?C?CLDOPTR
0088 FF                MOV     R7,A
0089 900000      R     MOV     DPTR,#new
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1190
008D 120000      R     LCALL   L?0735
0090 120000      R     LCALL   L?0806
0093 FE                MOV     R6,A
0094 EF                MOV     A,R7
0095 C3                CLR     C
0096 9E                SUBB    A,R6
0097 4047              JC      ?C0143
                                           ; SOURCE LINE # 1191
0099         ?C0693:
0099 900000      R     MOV     DPTR,#new
009C E0                MOVX    A,@DPTR
009D 900002            MOV     DPTR,#02H
                                           ; SOURCE LINE # 1192
                                           ; SOURCE LINE # 1193
00A0 020000      R     LJMP    ?C0695
                                           ; SOURCE LINE # 1195
00A3         ?C0153:
                                           ; SOURCE LINE # 1196
00A3 120000      R     LCALL   L?0735
00A6 120000      R     LCALL   L?0806
00A9 FF                MOV     R7,A
00AA 120000      R     LCALL   L?0758
00AD FE                MOV     R6,A
00AE C3                CLR     C
00AF 9F                SUBB    A,R7
00B0 402E              JC      ?C0143
                                           ; SOURCE LINE # 1197
00B2 120000      R     LCALL   L?0759
00B5 900014            MOV     DPTR,#014H
00B8 120000      R     LCALL   L?0733
00BB 900002            MOV     DPTR,#02H
00BE EF                MOV     A,R7
00BF         ?C0694:
                                           ; SOURCE LINE # 1198
                                           ; SOURCE LINE # 1199
00BF 801C              SJMP    ?C0695
                                           ; SOURCE LINE # 1200
00C1         ?C0155:
                                           ; SOURCE LINE # 1201
00C1 120000      R     LCALL   L?0735
00C4 120000      R     LCALL   L?0806
00C7 FF                MOV     R7,A
00C8 120000      R     LCALL   L?0758
00CB FE                MOV     R6,A
00CC C3                CLR     C
00CD 9F                SUBB    A,R7
00CE 4010              JC      ?C0143
                                           ; SOURCE LINE # 1202
00D0 120000      R     LCALL   L?0759
00D3 900016            MOV     DPTR,#016H
00D6 120000      R     LCALL   L?0733
00D9 900002            MOV     DPTR,#02H
00DC EF                MOV     A,R7
00DD         ?C0695:
00DD 120000      E     LCALL   ?C?CSTOPTR
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 146 

                                           ; SOURCE LINE # 1203
                                           ; SOURCE LINE # 1204
                                           ; SOURCE LINE # 1205
                                           ; SOURCE LINE # 1207
                                           ; SOURCE LINE # 1208
00E0         ?C0143:
                                           ; SOURCE LINE # 1209
00E0 900000      R     MOV     DPTR,#key
00E3 E0                MOVX    A,@DPTR
00E4 FF                MOV     R7,A
                                           ; SOURCE LINE # 1210
00E5         ?C0158:
00E5 22                RET     
             ; FUNCTION _MenuKeyInput_main_page (END)

             ; FUNCTION _MenuKeyInput_input_page (BEGIN)
                                           ; SOURCE LINE # 1213
0000 900000      R     MOV     DPTR,#key
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1214
                                           ; SOURCE LINE # 1215
0005 24FD              ADD     A,#0FDH
0007 6045              JZ      ?C0165
0009 04                INC     A
000A 6003              JZ      $ + 5H
000C 020000      R     LJMP    ?C0159
                                           ; SOURCE LINE # 1216
                                           ; SOURCE LINE # 1217
                                           ; SOURCE LINE # 1218
000F         ?C0161:
                                           ; SOURCE LINE # 1219
000F 120000      R     LCALL   L?0735
0012 120000      R     LCALL   L?0758
0015 FF                MOV     R7,A
0016 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 1220
0019 120000      R     LCALL   L?0735
001C 120000      R     LCALL   L?0806
001F FF                MOV     R7,A
0020 120000      R     LCALL   L?0758
0023 FE                MOV     R6,A
0024 C3                CLR     C
0025 9F                SUBB    A,R7
0026 5009              JNC     ?C0162
                                           ; SOURCE LINE # 1222
0028 120000      R     LCALL   L?0767
002B 120000      R     LCALL   L?0825
                                           ; SOURCE LINE # 1223
002E 020000      R     LJMP    ?C0696
0031         ?C0162:
                                           ; SOURCE LINE # 1224
                                           ; SOURCE LINE # 1226
0031 120000      R     LCALL   L?0735
0034 EE                MOV     A,R6
0035 120000      R     LCALL   L?0731
0038 EF                MOV     A,R7
0039 120000      R     LCALL   L?0825
                                           ; SOURCE LINE # 1227
003C 120000      E     LCALL   ?C?CLDPTR
003F 30E409            JNB     ACC.4,?C0163
                                           ; SOURCE LINE # 1228
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 147 

0042 120000      R     LCALL   L?0735
0045 120000      R     LCALL   L?0765
0048 120000      R     LCALL   L?0994
                                           ; SOURCE LINE # 1229
004B         ?C0163:
                                           ; SOURCE LINE # 1230
                                           ; SOURCE LINE # 1231
                                           ; SOURCE LINE # 1232
004B 020000      R     LJMP    ?C0696
                                           ; SOURCE LINE # 1234
004E         ?C0165:
                                           ; SOURCE LINE # 1235
004E 120000      R     LCALL   L?0735
0051 120000      R     LCALL   L?0758
0054 FF                MOV     R7,A
0055 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 1236
0058 120000      R     LCALL   L?0735
005B 120000      R     LCALL   L?0806
005E FF                MOV     R7,A
005F 120000      R     LCALL   L?0758
0062 FE                MOV     R6,A
0063 C3                CLR     C
0064 9F                SUBB    A,R7
0065 5008              JNC     ?C0166
                                           ; SOURCE LINE # 1238
0067 120000      R     LCALL   L?0767
006A 120000      R     LCALL   L?0825
                                           ; SOURCE LINE # 1239
006D 801F              SJMP    ?C0167
006F         ?C0166:
                                           ; SOURCE LINE # 1240
                                           ; SOURCE LINE # 1242
006F 120000      R     LCALL   L?0735
0072 120000      R     LCALL   L?0760
0075 900015            MOV     DPTR,#015H
0078 120000      R     LCALL   L?0733
007B EF                MOV     A,R7
007C 120000      R     LCALL   L?0889
                                           ; SOURCE LINE # 1243
007F 120000      E     LCALL   ?C?CLDPTR
0082 30E409            JNB     ACC.4,?C0167
                                           ; SOURCE LINE # 1244
0085 120000      R     LCALL   L?0735
0088 120000      R     LCALL   L?0765
008B 120000      R     LCALL   L?0994
                                           ; SOURCE LINE # 1245
008E         ?C0167:
                                           ; SOURCE LINE # 1246
008E         ?C0696:
008E 120000      R     LCALL   L?0735
0091 120000      R     LCALL   L?0758
0094 FD                MOV     R5,A
0095 E4                CLR     A
0096 FF                MOV     R7,A
0097 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 1247
009A E4                CLR     A
009B 900000      R     MOV     DPTR,#key
009E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1248
                                           ; SOURCE LINE # 1250
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 148 

                                           ; SOURCE LINE # 1251
                                           ; SOURCE LINE # 1252
                                           ; SOURCE LINE # 1253
                                           ; SOURCE LINE # 1254
                                           ; SOURCE LINE # 1256
                                           ; SOURCE LINE # 1257
009F         ?C0159:
                                           ; SOURCE LINE # 1258
009F 900000      R     MOV     DPTR,#key
00A2 E0                MOVX    A,@DPTR
00A3 FF                MOV     R7,A
                                           ; SOURCE LINE # 1259
00A4         ?C0172:
00A4 22                RET     
00A5         L?0994:
00A5 2F                ADD     A,R7
00A6 FD                MOV     R5,A
00A7 E4                CLR     A
00A8 FF                MOV     R7,A
00A9 120000      R     LCALL   _MenuDrawCurrImage
00AC 22                RET     
             ; FUNCTION _MenuKeyInput_input_page (END)

             ; FUNCTION _MenuKeyInput_position_page (BEGIN)
                                           ; SOURCE LINE # 1261
0000 900000      R     MOV     DPTR,#key
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1262
                                           ; SOURCE LINE # 1267
0005 24FD              ADD     A,#0FDH
0007 602D              JZ      ?C0178
0009 14                DEC     A
000A 604A              JZ      ?C0181
000C 14                DEC     A
000D 6067              JZ      ?C0184
000F 2403              ADD     A,#03H
0011 6003              JZ      $ + 5H
0013 020000      R     LJMP    ?C0173
                                           ; SOURCE LINE # 1268
                                           ; SOURCE LINE # 1269
                                           ; SOURCE LINE # 1270
0016         ?C0175:
                                           ; SOURCE LINE # 1272
0016 120000      R     LCALL   L?0735
0019 120000      R     LCALL   L?0758
001C 6403              XRL     A,#03H
001E 707B              JNZ     ?C0173
                                           ; SOURCE LINE # 1274
0020 120000      E     LCALL   GetRGBPosV
0023 900000      R     MOV     DPTR,#digit
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1275
0028 C3                CLR     C
0029 9464              SUBB    A,#064H
002B 5024              JNC     ?C0697
                                           ; SOURCE LINE # 1276
002D E0                MOVX    A,@DPTR
002E 04                INC     A
002F FF                MOV     R7,A
0030 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 149 

0031 120000      E     LCALL   _SetRGBPosV
0034         ?C0177:
                                           ; SOURCE LINE # 1277
                                           ; SOURCE LINE # 1278
                                           ; SOURCE LINE # 1279
                                           ; SOURCE LINE # 1281
0034 801B              SJMP    ?C0697
                                           ; SOURCE LINE # 1282
0036         ?C0178:
                                           ; SOURCE LINE # 1284
0036 120000      R     LCALL   L?0735
0039 120000      R     LCALL   L?0758
003C 6403              XRL     A,#03H
003E 705B              JNZ     ?C0173
                                           ; SOURCE LINE # 1286
0040 120000      E     LCALL   GetRGBPosV
0043 900000      R     MOV     DPTR,#digit
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1287
0048 6007              JZ      ?C0180
                                           ; SOURCE LINE # 1288
004A E0                MOVX    A,@DPTR
004B 14                DEC     A
004C FF                MOV     R7,A
004D F0                MOVX    @DPTR,A
004E 120000      E     LCALL   _SetRGBPosV
0051         ?C0180:
                                           ; SOURCE LINE # 1289
0051         ?C0697:
0051 120000      R     LCALL   proc_position_V_digit
                                           ; SOURCE LINE # 1290
                                           ; SOURCE LINE # 1291
                                           ; SOURCE LINE # 1293
0054 8040              SJMP    ?C0699
                                           ; SOURCE LINE # 1294
0056         ?C0181:
                                           ; SOURCE LINE # 1296
0056 120000      R     LCALL   L?0735
0059 120000      R     LCALL   L?0758
005C 6403              XRL     A,#03H
005E 703B              JNZ     ?C0173
                                           ; SOURCE LINE # 1298
0060 120000      E     LCALL   GetRGBPosH
0063 900000      R     MOV     DPTR,#digit
0066 EF                MOV     A,R7
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1299
0068 6007              JZ      ?C0183
                                           ; SOURCE LINE # 1300
006A E0                MOVX    A,@DPTR
006B 14                DEC     A
006C FF                MOV     R7,A
006D F0                MOVX    @DPTR,A
006E 120000      E     LCALL   _SetRGBPosH
0071         ?C0183:
                                           ; SOURCE LINE # 1301
0071 120000      R     LCALL   proc_position_H_digit
                                           ; SOURCE LINE # 1302
0074         ?C0698:
                                           ; SOURCE LINE # 1303
                                           ; SOURCE LINE # 1305
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 150 

0074 8020              SJMP    ?C0699
                                           ; SOURCE LINE # 1306
0076         ?C0184:
                                           ; SOURCE LINE # 1308
0076 120000      R     LCALL   L?0735
0079 120000      R     LCALL   L?0758
007C B4031C            CJNE    A,#03H,?C0173
                                           ; SOURCE LINE # 1310
007F 120000      E     LCALL   GetRGBPosH
0082 900000      R     MOV     DPTR,#digit
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1311
0087 C3                CLR     C
0088 9464              SUBB    A,#064H
008A 5007              JNC     ?C0186
                                           ; SOURCE LINE # 1312
008C E0                MOVX    A,@DPTR
008D 04                INC     A
008E FF                MOV     R7,A
008F F0                MOVX    @DPTR,A
0090 120000      E     LCALL   _SetRGBPosH
0093         ?C0186:
                                           ; SOURCE LINE # 1313
0093 120000      R     LCALL   proc_position_H_digit
                                           ; SOURCE LINE # 1314
0096         ?C0699:
0096 E4                CLR     A
0097 900000      R     MOV     DPTR,#key
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1315
                                           ; SOURCE LINE # 1317
                                           ; SOURCE LINE # 1318
                                           ; SOURCE LINE # 1320
                                           ; SOURCE LINE # 1321
009B         ?C0173:
                                           ; SOURCE LINE # 1322
009B 900000      R     MOV     DPTR,#key
009E E0                MOVX    A,@DPTR
009F FF                MOV     R7,A
                                           ; SOURCE LINE # 1323
00A0         ?C0188:
00A0 22                RET     
             ; FUNCTION _MenuKeyInput_position_page (END)

             ; FUNCTION _MenuKeyInput (BEGIN)
                                           ; SOURCE LINE # 1328
;---- Variable 'key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1329
                                           ; SOURCE LINE # 1344
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0826
0006 7A00        E     MOV     R2,#HIGH menu_slider_page
0008 7900        E     MOV     R1,#LOW menu_slider_page
000A 6401              XRL     A,#01H
000C 700A              JNZ     ?C0639
000E 7400        E     MOV     A,#LOW menu_slider_page
0010 6582              XRL     A,DPL
0012 7004              JNZ     ?C0639
0014 7400        E     MOV     A,#HIGH menu_slider_page
0016 6583              XRL     A,DPH
0018         ?C0639:
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 151 

0018 7006              JNZ     ?C0189
                                           ; SOURCE LINE # 1345
001A 120000      R     LCALL   _MenuKeyInput_slider_page
001D 020000      R     LJMP    ?C0190
0020         ?C0189:
                                           ; SOURCE LINE # 1346
0020 120000      R     LCALL   L?0735
0023 120000      R     LCALL   L?0826
0026 120000      R     LCALL   L?0970
0029 700A              JNZ     ?C0640
002B 7400        E     MOV     A,#LOW menu_slider3_page
002D 6582              XRL     A,DPL
002F 7004              JNZ     ?C0640
0031 7400        E     MOV     A,#HIGH menu_slider3_page
0033 6583              XRL     A,DPH
0035         ?C0640:
0035 7006              JNZ     ?C0191
                                           ; SOURCE LINE # 1347
0037 120000      R     LCALL   _MenuKeyInput_slider3_page
003A 020000      R     LJMP    ?C0190
003D         ?C0191:
                                           ; SOURCE LINE # 1348
003D 120000      R     LCALL   L?0735
0040 120000      R     LCALL   L?0827
0043 7A00        E     MOV     R2,#HIGH menu_position_page
0045 7900        E     MOV     R1,#LOW menu_position_page
0047 6401              XRL     A,#01H
0049 700A              JNZ     ?C0641
004B 7400        E     MOV     A,#LOW menu_position_page
004D 6582              XRL     A,DPL
004F 7004              JNZ     ?C0641
0051 7400        E     MOV     A,#HIGH menu_position_page
0053 6583              XRL     A,DPH
0055         ?C0641:
0055 7005              JNZ     ?C0193
                                           ; SOURCE LINE # 1349
0057 120000      R     LCALL   _MenuKeyInput_position_page
005A 8056              SJMP    ?C0190
005C         ?C0193:
                                           ; SOURCE LINE # 1350
005C 120000      R     LCALL   L?0735
005F 120000      R     LCALL   L?0827
0062 7A00        E     MOV     R2,#HIGH menu_input_page
0064 7900        E     MOV     R1,#LOW menu_input_page
0066 6401              XRL     A,#01H
0068 700A              JNZ     ?C0642
006A 7400        E     MOV     A,#LOW menu_input_page
006C 6582              XRL     A,DPL
006E 7004              JNZ     ?C0642
0070 7400        E     MOV     A,#HIGH menu_input_page
0072 6583              XRL     A,DPH
0074         ?C0642:
0074 601A              JZ      ?C0196
0076 120000      R     LCALL   L?0735
0079 120000      R     LCALL   L?0827
007C 7A00        E     MOV     R2,#HIGH menu_system_page
007E 7900        E     MOV     R1,#LOW menu_system_page
0080 6401              XRL     A,#01H
0082 700A              JNZ     ?C0643
0084 7400        E     MOV     A,#LOW menu_system_page
0086 6582              XRL     A,DPL
0088 7004              JNZ     ?C0643
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 152 

008A 7400        E     MOV     A,#HIGH menu_system_page
008C 6583              XRL     A,DPH
008E         ?C0643:
008E 7005              JNZ     ?C0195
0090         ?C0196:
                                           ; SOURCE LINE # 1351
0090 120000      R     LCALL   _MenuKeyInput_input_page
0093 801D              SJMP    ?C0190
0095         ?C0195:
                                           ; SOURCE LINE # 1352
0095 120000      R     LCALL   L?0735
0098 120000      R     LCALL   L?0827
009B 7A00        E     MOV     R2,#HIGH menu_main_page
009D 7900        E     MOV     R1,#LOW menu_main_page
009F 6401              XRL     A,#01H
00A1 700A              JNZ     ?C0644
00A3 7400        E     MOV     A,#LOW menu_main_page
00A5 6582              XRL     A,DPL
00A7 7004              JNZ     ?C0644
00A9 7400        E     MOV     A,#HIGH menu_main_page
00AB 6583              XRL     A,DPH
00AD         ?C0644:
00AD 7003              JNZ     ?C0190
                                           ; SOURCE LINE # 1353
00AF 120000      R     LCALL   _MenuKeyInput_main_page
                                           ; SOURCE LINE # 1354
00B2         ?C0190:
                                           ; SOURCE LINE # 1357
00B2 EF                MOV     A,R7
00B3 24FE              ADD     A,#0FEH
00B5 601F              JZ      ?C0201
00B7 14                DEC     A
00B8 6035              JZ      ?C0202
00BA 14                DEC     A
00BB 604A              JZ      ?C0203
00BD 14                DEC     A
00BE 605F              JZ      ?C0204
00C0 2404              ADD     A,#04H
00C2 6003              JZ      $ + 5H
00C4 020000      R     LJMP    ?C0206
                                           ; SOURCE LINE # 1358
00C7         ?C0200:
                                           ; SOURCE LINE # 1359
00C7 120000      R     LCALL   L?0735
00CA 120000      R     LCALL   L?0758
00CD 120000      R     LCALL   L?0761
00D0 120000      R     LCALL   L?0745
00D3 020000      E     LJMP    ?C?ICALL
                                           ; SOURCE LINE # 1361
                                           ; SOURCE LINE # 1362
00D6         ?C0201:
                                           ; SOURCE LINE # 1363
00D6 120000      R     LCALL   L?0735
00D9 120000      R     LCALL   L?0758
00DC FF                MOV     R7,A
00DD 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 1364
00E0 120000      R     LCALL   L?0735
00E3 120000      R     LCALL   L?0758
00E6 120000      R     LCALL   L?0761
00E9 900013            MOV     DPTR,#013H
                                           ; SOURCE LINE # 1365
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 153 

                                           ; SOURCE LINE # 1366
00EC 020000      R     LJMP    ?C0702
                                           ; SOURCE LINE # 1367
00EF         ?C0202:
                                           ; SOURCE LINE # 1368
00EF 120000      R     LCALL   L?0735
00F2 120000      R     LCALL   L?0758
00F5 FF                MOV     R7,A
00F6 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 1369
00F9 120000      R     LCALL   L?0735
00FC 120000      R     LCALL   L?0758
00FF 120000      R     LCALL   L?0761
0102 900015            MOV     DPTR,#015H
0105         ?C0700:
                                           ; SOURCE LINE # 1370
                                           ; SOURCE LINE # 1371
0105 802E              SJMP    ?C0702
                                           ; SOURCE LINE # 1372
0107         ?C0203:
                                           ; SOURCE LINE # 1373
0107 120000      R     LCALL   L?0735
010A 120000      R     LCALL   L?0758
010D FF                MOV     R7,A
010E 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 1374
0111 120000      R     LCALL   L?0735
0114 120000      R     LCALL   L?0758
0117 120000      R     LCALL   L?0761
011A 900014            MOV     DPTR,#014H
011D         ?C0701:
                                           ; SOURCE LINE # 1375
                                           ; SOURCE LINE # 1376
011D 8016              SJMP    ?C0702
                                           ; SOURCE LINE # 1377
011F         ?C0204:
                                           ; SOURCE LINE # 1379
011F 120000      R     LCALL   L?0735
0122 120000      R     LCALL   L?0758
0125 FF                MOV     R7,A
0126 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 1380
0129 120000      R     LCALL   L?0735
012C 120000      R     LCALL   L?0758
012F 120000      R     LCALL   L?0761
0132 900016            MOV     DPTR,#016H
0135         ?C0702:
0135 120000      R     LCALL   L?0733
0138 900001            MOV     DPTR,#01H
013B EF                MOV     A,R7
                                           ; SOURCE LINE # 1382
013C 120000      R     LCALL   L?0757
013F FD                MOV     R5,A
0140 E4                CLR     A
0141 FF                MOV     R7,A
0142 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 1383
                                           ; SOURCE LINE # 1384
                                           ; SOURCE LINE # 1386
                                           ; SOURCE LINE # 1387
                                           ; SOURCE LINE # 1396
0145         ?C0206:
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 154 

0145 22                RET     
             ; FUNCTION _MenuKeyInput (END)

             ; FUNCTION _MenuCheckItemPosition (BEGIN)
                                           ; SOURCE LINE # 1403
0000 900000      R     MOV     DPTR,#x
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EC                MOV     A,R4
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1404
                                           ; SOURCE LINE # 1406
000E 900000      R     MOV     DPTR,#header
0011 120000      R     LCALL   L?0812
                                           ; SOURCE LINE # 1412
0014 120000      R     LCALL   L?0735
0017 900004            MOV     DPTR,#04H
001A 120000      E     LCALL   ?C?CLDOPTR
001D FF                MOV     R7,A
001E 120000      R     LCALL   L?0806
0021 2F                ADD     A,R7
0022 900000      R     MOV     DPTR,#max
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1413
0026 120000      E     LCALL   ?C?CLDPTR
0029 30E406            JNB     ACC.4,?C0207
                                           ; SOURCE LINE # 1414
002C 900000      R     MOV     DPTR,#max
002F E0                MOVX    A,@DPTR
0030 2F                ADD     A,R7
0031 F0                MOVX    @DPTR,A
0032         ?C0207:
                                           ; SOURCE LINE # 1417
0032 E4                CLR     A
0033 900000      R     MOV     DPTR,#i
0036 F0                MOVX    @DPTR,A
0037         ?C0208:
0037 900000      R     MOV     DPTR,#max
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#i
003F E0                MOVX    A,@DPTR
0040 FE                MOV     R6,A
0041 C3                CLR     C
0042 9F                SUBB    A,R7
0043 4003              JC      $ + 5H
0045 020000      R     LJMP    ?C0209
                                           ; SOURCE LINE # 1418
0048 120000      R     LCALL   L?0735
004B 120000      R     LCALL   L?0809
004E 75F017            MOV     B,#017H
0051 EE                MOV     A,R6
0052 A4                MUL     AB
0053 F582              MOV     DPL,A
0055 85F083            MOV     DPH,B
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 155 

0058 120000      E     LCALL   ?C?CLDOPTR
005B FF                MOV     R7,A
005C 6401              XRL     A,#01H
005E 7003              JNZ     $ + 5H
0060 020000      R     LJMP    ?C0210
0063         ?C0211:
                                           ; SOURCE LINE # 1419
0063 EF                MOV     A,R7
0064 6402              XRL     A,#02H
0066 7003              JNZ     $ + 5H
0068 020000      R     LJMP    ?C0210
006B         ?C0212:
                                           ; SOURCE LINE # 1420
006B EF                MOV     A,R7
006C 6403              XRL     A,#03H
006E 7003              JNZ     $ + 5H
0070 020000      R     LJMP    ?C0210
0073         ?C0213:
                                           ; SOURCE LINE # 1421
0073 EF                MOV     A,R7
0074 6404              XRL     A,#04H
0076 707A              JNZ     ?C0214
                                           ; SOURCE LINE # 1422
0078 120000      R     LCALL   L?0735
007B 120000      R     LCALL   L?0780
007E 120000      R     LCALL   L?0820
0081 120000      R     LCALL   L?0735
0084 120000      R     LCALL   L?0809
0087 120000      R     LCALL   L?0866
008A 900000      R     MOV     DPTR,#x
008D 120000      R     LCALL   L?0871
0090 9E                SUBB    A,R6
0091 4056              JC      ?C0215
0093 120000      R     LCALL   L?0782
0096 90001B            MOV     DPTR,#01BH
0099 120000      R     LCALL   L?0822
009C 120000      R     LCALL   L?0735
009F 120000      R     LCALL   L?0809
00A2 120000      R     LCALL   L?0866
00A5 900000      R     MOV     DPTR,#x
00A8 120000      R     LCALL   L?0972
00AB 503C              JNC     ?C0215
00AD 120000      R     LCALL   L?0782
00B0 900006            MOV     DPTR,#06H
00B3 120000      R     LCALL   L?0822
00B6 120000      R     LCALL   L?0735
00B9 120000      R     LCALL   L?0809
00BC 120000      R     LCALL   L?0881
00BF 900000      R     MOV     DPTR,#y
00C2 120000      R     LCALL   L?0871
00C5 9E                SUBB    A,R6
00C6 4021              JC      ?C0215
00C8 120000      R     LCALL   L?0782
00CB 90001D            MOV     DPTR,#01DH
00CE 120000      R     LCALL   L?0822
00D1 120000      R     LCALL   L?0735
00D4 120000      R     LCALL   L?0809
00D7 120000      R     LCALL   L?0881
00DA 900000      R     MOV     DPTR,#y
00DD 120000      R     LCALL   L?0972
00E0 5007              JNC     ?C0215
                                           ; SOURCE LINE # 1425
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 156 

                                           ; SOURCE LINE # 1426
00E2 900000      R     MOV     DPTR,#i
00E5 E0                MOVX    A,@DPTR
00E6 04                INC     A
00E7 FF                MOV     R7,A
00E8 22                RET     
                                           ; SOURCE LINE # 1427
00E9         ?C0215:
                                           ; SOURCE LINE # 1428
00E9 900000      R     MOV     DPTR,#i
00EC E0                MOVX    A,@DPTR
00ED 04                INC     A
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1429
00EF 020000      R     LJMP    ?C0210
                                           ; SOURCE LINE # 1430
00F2         ?C0214:
                                           ; SOURCE LINE # 1435
00F2 120000      R     LCALL   L?0735
00F5 120000      R     LCALL   L?0780
00F8 120000      R     LCALL   L?0866
00FB FF                MOV     R7,A
00FC 900000      R     MOV     DPTR,#x
00FF 120000      R     LCALL   L?0872
0102 95F0              SUBB    A,B
0104 5003              JNC     $ + 5H
0106 020000      R     LJMP    ?C0210
0109 120000      R     LCALL   L?0881
010C FF                MOV     R7,A
010D 900000      R     MOV     DPTR,#y
0110 120000      R     LCALL   L?0872
0113 95F0              SUBB    A,B
0115 5003              JNC     $ + 5H
0117 020000      R     LJMP    ?C0210
                                           ; SOURCE LINE # 1436
011A 120000      R     LCALL   L?0930
011D 900000      R     MOV     DPTR,#image
0120 EB                MOV     A,R3
0121 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1437
0124 900000      R     MOV     DPTR,#image
0127 120000      R     LCALL   L?0895
012A 4A                ORL     A,R2
012B 4B                ORL     A,R3
012C 7013              JNZ     ?C0218
                                           ; SOURCE LINE # 1438
012E 120000      R     LCALL   L?0735
0131 120000      R     LCALL   L?0781
0134 90000C            MOV     DPTR,#0CH
0137 120000      E     LCALL   ?C?PLDOPTR
013A 900000      R     MOV     DPTR,#image
013D EB                MOV     A,R3
013E 120000      R     LCALL   L?0753
0141         ?C0218:
                                           ; SOURCE LINE # 1439
0141 900000      R     MOV     DPTR,#image
0144 120000      R     LCALL   L?0895
0147 4A                ORL     A,R2
0148 4B                ORL     A,R3
0149 6057              JZ      ?C0210
                                           ; SOURCE LINE # 1441
                                           ; SOURCE LINE # 1442
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 157 

014B         ?C0219:
                                           ; SOURCE LINE # 1445
014B 900000      R     MOV     DPTR,#image
014E 120000      R     LCALL   L?0736
0151 120000      R     LCALL   _MenuPrepareImageHeader
                                           ; SOURCE LINE # 1448
0154 120000      R     LCALL   L?0735
0157 120000      R     LCALL   L?0781
015A 120000      R     LCALL   L?0820
015D 900000      R     MOV     DPTR,#header
0160 120000      R     LCALL   L?0736
0163 90000B            MOV     DPTR,#0BH
0166 120000      E     LCALL   ?C?ILDOPTR
0169 2F                ADD     A,R7
016A FF                MOV     R7,A
016B EE                MOV     A,R6
016C 35F0              ADDC    A,B
016E FE                MOV     R6,A
016F 900000      R     MOV     DPTR,#x
0172 120000      R     LCALL   L?0872
0175 9E                SUBB    A,R6
0176 502A              JNC     ?C0210
0178 120000      R     LCALL   L?0735
017B 120000      R     LCALL   L?0781
017E 900006            MOV     DPTR,#06H
0181 120000      R     LCALL   L?0822
0184 900000      R     MOV     DPTR,#header
0187 120000      R     LCALL   L?0736
018A 120000      R     LCALL   L?0804
018D 2F                ADD     A,R7
018E FF                MOV     R7,A
018F EE                MOV     A,R6
0190 35F0              ADDC    A,B
0192 FE                MOV     R6,A
0193 900000      R     MOV     DPTR,#y
0196 120000      R     LCALL   L?0872
0199 9E                SUBB    A,R6
019A 5006              JNC     ?C0210
                                           ; SOURCE LINE # 1451
019C 900000      R     MOV     DPTR,#i
019F E0                MOVX    A,@DPTR
01A0 FF                MOV     R7,A
01A1 22                RET     
                                           ; SOURCE LINE # 1452
                                           ; SOURCE LINE # 1453
                                           ; SOURCE LINE # 1454
01A2         ?C0210:
01A2 900000      R     MOV     DPTR,#i
01A5 E0                MOVX    A,@DPTR
01A6 04                INC     A
01A7 F0                MOVX    @DPTR,A
01A8 020000      R     LJMP    ?C0208
01AB         ?C0209:
                                           ; SOURCE LINE # 1455
01AB 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 1456
01AD         ?C0216:
01AD 22                RET     
             ; FUNCTION _MenuCheckItemPosition (END)

             ; FUNCTION _MenuCheckTouchInput (BEGIN)
                                           ; SOURCE LINE # 1463
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 158 

0000 900000      R     MOV     DPTR,#TscStatus
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 FE                MOV     R6,A
0009 A3                INC     DPTR
000A ED                MOV     A,R5
000B F0                MOVX    @DPTR,A
000C FF                MOV     R7,A
000D A3                INC     DPTR
000E EA                MOV     A,R2
000F F0                MOVX    @DPTR,A
0010 FC                MOV     R4,A
0011 A3                INC     DPTR
0012 EB                MOV     A,R3
0013 F0                MOVX    @DPTR,A
0014 FD                MOV     R5,A
                                           ; SOURCE LINE # 1464
                                           ; SOURCE LINE # 1468
0015 120000      R     LCALL   _MenuCheckItemPosition
0018 900000      R     MOV     DPTR,#ret
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1470
001D F4                CPL     A
001E 6003              JZ      $ + 5H
0020 020000      R     LJMP    ?C0221
                                           ; SOURCE LINE # 1475
0023 120000      R     LCALL   MenuIsSlideMode
0026 EF                MOV     A,R7
0027 7003              JNZ     $ + 5H
0029 020000      R     LJMP    ?C0222
                                           ; SOURCE LINE # 1476
002C 120000      R     LCALL   L?0735
002F 120000      R     LCALL   L?0833
0032 700A              JNZ     ?C0647
0034 7400        E     MOV     A,#LOW menu_slider_page
0036 6582              XRL     A,DPL
0038 7004              JNZ     ?C0647
003A 7400        E     MOV     A,#HIGH menu_slider_page
003C 6583              XRL     A,DPH
003E         ?C0647:
003E 702E              JNZ     ?C0223
                                           ; SOURCE LINE # 1477
0040 120000      R     LCALL   L?0735
0043 120000      R     LCALL   L?0758
0046 FF                MOV     R7,A
0047 6406              XRL     A,#06H
0049 6012              JZ      ?C0225
004B EF                MOV     A,R7
004C 6407              XRL     A,#07H
004E 600D              JZ      ?C0225
0050 EF                MOV     A,R7
0051 6402              XRL     A,#02H
0053 6008              JZ      ?C0225
0055 EF                MOV     A,R7
0056 6403              XRL     A,#03H
0058 6003              JZ      $ + 5H
005A 020000      R     LJMP    ?C0226
005D         ?C0225:
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 159 

                                           ; SOURCE LINE # 1481
                                           ; SOURCE LINE # 1482
005D 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 1483
0060 120000      R     LCALL   L?0735
0063 120000      R     LCALL   L?0887
                                           ; SOURCE LINE # 1484
0066 7B01              MOV     R3,#01H
0068 120000      R     LCALL   L?0886
                                           ; SOURCE LINE # 1485
006B 020000      R     LJMP    ?C0703
                                           ; SOURCE LINE # 1487
006E         ?C0223:
                                           ; SOURCE LINE # 1488
006E 120000      R     LCALL   L?0735
0071 120000      R     LCALL   L?0833
0074 700A              JNZ     ?C0648
0076 7400        E     MOV     A,#LOW menu_slider3_page
0078 6582              XRL     A,DPL
007A 7004              JNZ     ?C0648
007C 7400        E     MOV     A,#HIGH menu_slider3_page
007E 6583              XRL     A,DPH
0080         ?C0648:
0080 7056              JNZ     ?C0222
                                           ; SOURCE LINE # 1489
0082 120000      R     LCALL   L?0735
0085 120000      R     LCALL   L?0758
0088 FF                MOV     R7,A
0089 640A              XRL     A,#0AH
008B 6012              JZ      ?C0230
008D EF                MOV     A,R7
008E 640B              XRL     A,#0BH
0090 600D              JZ      ?C0230
0092 EF                MOV     A,R7
0093 6402              XRL     A,#02H
0095 6008              JZ      ?C0230
0097 EF                MOV     A,R7
0098 6403              XRL     A,#03H
009A 6003              JZ      $ + 5H
009C 020000      R     LJMP    ?C0226
009F         ?C0230:
                                           ; SOURCE LINE # 1493
                                           ; SOURCE LINE # 1494
009F 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 1495
00A2 120000      R     LCALL   L?0735
                                           ; SOURCE LINE # 1497
00A5 120000      R     LCALL   L?0754
00A8 FF                MOV     R7,A
00A9 B40502            CJNE    A,#05H,?C0231
00AC 8018              SJMP    ?C0704
00AE         ?C0231:
                                           ; SOURCE LINE # 1498
00AE EF                MOV     A,R7
00AF B40708            CJNE    A,#07H,?C0233
00B2 900000      R     MOV     DPTR,#index
00B5 7401              MOV     A,#01H
00B7 F0                MOVX    @DPTR,A
00B8 8011              SJMP    ?C0232
00BA         ?C0233:
                                           ; SOURCE LINE # 1499
00BA EF                MOV     A,R7
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 160 

00BB B40908            CJNE    A,#09H,?C0235
00BE 900000      R     MOV     DPTR,#index
00C1 7402              MOV     A,#02H
00C3 F0                MOVX    @DPTR,A
00C4 8005              SJMP    ?C0232
00C6         ?C0235:
                                           ; SOURCE LINE # 1500
00C6         ?C0704:
00C6 E4                CLR     A
00C7 900000      R     MOV     DPTR,#index
00CA F0                MOVX    @DPTR,A
00CB         ?C0232:
                                           ; SOURCE LINE # 1502
00CB 900000      R     MOV     DPTR,#index
00CE 120000      R     LCALL   L?0790
00D1 E0                MOVX    A,@DPTR
00D2 FD                MOV     R5,A
00D3 7B01              MOV     R3,#01H
00D5         ?C0703:
00D5 020000      R     LJMP    _MenuDrawSlideNeedleImageXY
                                           ; SOURCE LINE # 1503
                                           ; SOURCE LINE # 1505
                                           ; SOURCE LINE # 1506
00D8         ?C0222:
                                           ; SOURCE LINE # 1507
00D8 120000      R     LCALL   L?0735
00DB 120000      R     LCALL   L?0758
00DE FD                MOV     R5,A
00DF E4                CLR     A
00E0 FF                MOV     R7,A
00E1 020000      R     LJMP    ?C0709
                                           ; SOURCE LINE # 1510
00E4         ?C0221:
                                           ; SOURCE LINE # 1513
00E4 900000      R     MOV     DPTR,#TscStatus
00E7 E0                MOVX    A,@DPTR
00E8 FF                MOV     R7,A
00E9 6480              XRL     A,#080H
00EB 6009              JZ      ?C0238
00ED EF                MOV     A,R7
00EE C3                CLR     C
00EF 94C0              SUBB    A,#0C0H
00F1 5003              JNC     $ + 5H
00F3 020000      R     LJMP    ?C0237
00F6         ?C0238:
                                           ; SOURCE LINE # 1516
00F6 120000      R     LCALL   L?0735
00F9 120000      R     LCALL   L?0758
00FC 900000      R     MOV     DPTR,#curr_menu_focus
00FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1518
0100 900000      R     MOV     DPTR,#ret
0103 E0                MOVX    A,@DPTR
0104 120000      R     LCALL   L?0825
                                           ; SOURCE LINE # 1520
0107 120000      R     LCALL   MenuIsSlideMode
010A EF                MOV     A,R7
010B 606A              JZ      ?C0239
                                           ; SOURCE LINE # 1521
010D 120000      R     LCALL   L?0735
0110 120000      R     LCALL   L?0833
0113 700A              JNZ     ?C0649
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 161 

0115 7400        E     MOV     A,#LOW menu_slider_page
0117 6582              XRL     A,DPL
0119 7004              JNZ     ?C0649
011B 7400        E     MOV     A,#HIGH menu_slider_page
011D 6583              XRL     A,DPH
011F         ?C0649:
011F 701C              JNZ     ?C0240
                                           ; SOURCE LINE # 1523
0121 900000      R     MOV     DPTR,#ret
0124 E0                MOVX    A,@DPTR
0125 FF                MOV     R7,A
0126 6404              XRL     A,#04H
0128 6005              JZ      ?C0242
012A EF                MOV     A,R7
012B 6405              XRL     A,#05H
012D 7003              JNZ     ?C0241
012F         ?C0242:
                                           ; SOURCE LINE # 1524
                                           ; SOURCE LINE # 1525
                                           ; SOURCE LINE # 1526
                                           ; SOURCE LINE # 1527
012F 020000      R     LJMP    ?C0706
                                           ; SOURCE LINE # 1530
0132         ?C0241:
                                           ; SOURCE LINE # 1531
                                           ; SOURCE LINE # 1532
0132 120000      R     LCALL   L?0735
0135 120000      R     LCALL   L?0758
0138 FD                MOV     R5,A
0139 7F01              MOV     R7,#01H
013B         ?C0705:
013B 8043              SJMP    ?C0709
                                           ; SOURCE LINE # 1535
                                           ; SOURCE LINE # 1536
013D         ?C0240:
                                           ; SOURCE LINE # 1537
013D 120000      R     LCALL   L?0735
0140 120000      R     LCALL   L?0833
0143 700A              JNZ     ?C0650
0145 7400        E     MOV     A,#LOW menu_slider3_page
0147 6582              XRL     A,DPL
0149 7004              JNZ     ?C0650
014B 7400        E     MOV     A,#HIGH menu_slider3_page
014D 6583              XRL     A,DPH
014F         ?C0650:
014F 6003              JZ      $ + 5H
0151 020000      R     LJMP    ?C0226
                                           ; SOURCE LINE # 1538
0154 120000      R     LCALL   L?0735
0157 120000      R     LCALL   L?0806
015A FF                MOV     R7,A
015B 900000      R     MOV     DPTR,#ret
015E E0                MOVX    A,@DPTR
015F FE                MOV     R6,A
0160 C3                CLR     C
0161 9F                SUBB    A,R7
0162 4008              JC      ?C0246
0164 120000      R     LCALL   L?0890
0167 5003              JNC     ?C0246
                                           ; SOURCE LINE # 1539
                                           ; SOURCE LINE # 1540
                                           ; SOURCE LINE # 1541
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 162 

0169 020000      R     LJMP    ?C0708
                                           ; SOURCE LINE # 1544
016C         ?C0246:
                                           ; SOURCE LINE # 1545
                                           ; SOURCE LINE # 1546
016C 120000      R     LCALL   L?0735
016F 120000      R     LCALL   L?0758
0172 FD                MOV     R5,A
0173 7F01              MOV     R7,#01H
0175         ?C0707:
                                           ; SOURCE LINE # 1547
                                           ; SOURCE LINE # 1548
0175 8009              SJMP    ?C0709
                                           ; SOURCE LINE # 1550
0177         ?C0239:
                                           ; SOURCE LINE # 1552
0177 120000      R     LCALL   L?0735
017A 120000      R     LCALL   L?0758
017D FD                MOV     R5,A
017E 7F01              MOV     R7,#01H
0180         ?C0709:
0180 020000      R     LJMP    _MenuDrawCurrImage
                                           ; SOURCE LINE # 1555
0183         ?C0237:
                                           ; SOURCE LINE # 1556
0183 900000      R     MOV     DPTR,#TscStatus
0186 E0                MOVX    A,@DPTR
0187 FF                MOV     R7,A
0188 6401              XRL     A,#01H
018A 600D              JZ      ?C0249
018C EF                MOV     A,R7
018D 6402              XRL     A,#02H
018F 6008              JZ      ?C0249
0191 EF                MOV     A,R7
0192 6404              XRL     A,#04H
0194 6003              JZ      $ + 5H
0196 020000      R     LJMP    ?C0248
0199         ?C0249:
                                           ; SOURCE LINE # 1559
0199 120000      R     LCALL   MenuIsSlideMode
019C EF                MOV     A,R7
019D 607C              JZ      ?C0250
                                           ; SOURCE LINE # 1560
019F 120000      R     LCALL   L?0735
01A2 120000      R     LCALL   L?0833
01A5 700A              JNZ     ?C0651
01A7 7400        E     MOV     A,#LOW menu_slider_page
01A9 6582              XRL     A,DPL
01AB 7004              JNZ     ?C0651
01AD 7400        E     MOV     A,#HIGH menu_slider_page
01AF 6583              XRL     A,DPH
01B1         ?C0651:
01B1 702D              JNZ     ?C0251
                                           ; SOURCE LINE # 1561
01B3 900000      R     MOV     DPTR,#ret
01B6 E0                MOVX    A,@DPTR
01B7 FF                MOV     R7,A
01B8 6404              XRL     A,#04H
01BA 6005              JZ      ?C0253
01BC EF                MOV     A,R7
01BD 6405              XRL     A,#05H
01BF 705A              JNZ     ?C0250
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 163 

01C1         ?C0253:
                                           ; SOURCE LINE # 1562
01C1         ?C0706:
01C1 120000      R     LCALL   L?0735
01C4 EF                MOV     A,R7
01C5 120000      R     LCALL   L?0941
01C8 120000      R     LCALL   L?0849
                                           ; SOURCE LINE # 1563
01CB 120000      R     LCALL   L?0986
                                           ; SOURCE LINE # 1564
01CE 900000      R     MOV     DPTR,#curr_slide_value
01D1 E0                MOVX    A,@DPTR
01D2 FD                MOV     R5,A
01D3 7B01              MOV     R3,#01H
01D5 E4                CLR     A
01D6 FF                MOV     R7,A
01D7 120000      R     LCALL   _MenuDrawSlideNeedleImageXY
                                           ; SOURCE LINE # 1565
01DA 120000      R     LCALL   L?0884
01DD 020000      R     LJMP    _MenuDrawSlideCurrValue
                                           ; SOURCE LINE # 1568
                                           ; SOURCE LINE # 1569
01E0         ?C0251:
                                           ; SOURCE LINE # 1570
01E0 120000      R     LCALL   L?0735
01E3 120000      R     LCALL   L?0833
01E6 700A              JNZ     ?C0652
01E8 7400        E     MOV     A,#LOW menu_slider3_page
01EA 6582              XRL     A,DPL
01EC 7004              JNZ     ?C0652
01EE 7400        E     MOV     A,#HIGH menu_slider3_page
01F0 6583              XRL     A,DPH
01F2         ?C0652:
01F2 7027              JNZ     ?C0250
                                           ; SOURCE LINE # 1571
01F4 120000      R     LCALL   L?0735
01F7 120000      R     LCALL   L?0806
01FA FF                MOV     R7,A
01FB 900000      R     MOV     DPTR,#ret
01FE E0                MOVX    A,@DPTR
01FF FE                MOV     R6,A
0200 C3                CLR     C
0201 9F                SUBB    A,R7
0202 4017              JC      ?C0250
0204 120000      R     LCALL   L?0890
0207 5012              JNC     ?C0250
                                           ; SOURCE LINE # 1572
0209         ?C0708:
0209 E0                MOVX    A,@DPTR
020A 120000      R     LCALL   L?0825
020D 120000      R     LCALL   L?0849
                                           ; SOURCE LINE # 1573
0210 120000      R     LCALL   L?0986
                                           ; SOURCE LINE # 1574
0213 120000      R     LCALL   L?0735
0216 120000      R     LCALL   L?0809
0219 8045              SJMP    ?C0711
                                           ; SOURCE LINE # 1577
                                           ; SOURCE LINE # 1578
                                           ; SOURCE LINE # 1579
021B         ?C0250:
                                           ; SOURCE LINE # 1582
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 164 

021B 900000      R     MOV     DPTR,#ret
021E E0                MOVX    A,@DPTR
021F 120000      R     LCALL   L?0734
0222 EF                MOV     A,R7
                                           ; SOURCE LINE # 1584
0223 120000      R     LCALL   L?0808
0226 EF                MOV     A,R7
0227 120000      R     LCALL   L?0784
022A         ?C0710:
022A 8034              SJMP    ?C0711
                                           ; SOURCE LINE # 1589
022C         ?C0248:
                                           ; SOURCE LINE # 1592
                                           ; SOURCE LINE # 1593
022C 900000      R     MOV     DPTR,#x
022F E0                MOVX    A,@DPTR
0230 FF                MOV     R7,A
0231 A3                INC     DPTR
0232 E0                MOVX    A,@DPTR
0233 900000      R     MOV     DPTR,#last_touch_x
0236 CF                XCH     A,R7
0237 F0                MOVX    @DPTR,A
0238 A3                INC     DPTR
0239 EF                MOV     A,R7
023A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1594
023B 900000      R     MOV     DPTR,#y
023E E0                MOVX    A,@DPTR
023F FF                MOV     R7,A
0240 A3                INC     DPTR
0241 E0                MOVX    A,@DPTR
0242 900000      R     MOV     DPTR,#last_touch_y
0245 CF                XCH     A,R7
0246 F0                MOVX    @DPTR,A
0247 A3                INC     DPTR
0248 EF                MOV     A,R7
0249 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1596
024A 120000      R     LCALL   L?0735
024D 120000      R     LCALL   L?0758
0250 900000      R     MOV     DPTR,#curr_menu_focus
0253 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1597
0254 900000      R     MOV     DPTR,#ret
0257 E0                MOVX    A,@DPTR
0258 FF                MOV     R7,A
                                           ; SOURCE LINE # 1598
0259 120000      R     LCALL   L?0808
025C EF                MOV     A,R7
025D 120000      R     LCALL   L?0784
0260         ?C0711:
0260 120000      R     LCALL   L?0745
0263 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 1602
                                           ; SOURCE LINE # 1603
0266         ?C0226:
0266 22                RET     
0267         L?0986:
0267 900000      R     MOV     DPTR,#x
026A E0                MOVX    A,@DPTR
026B FE                MOV     R6,A
026C A3                INC     DPTR
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 165 

026D E0                MOVX    A,@DPTR
026E FF                MOV     R7,A
026F 120000      R     LCALL   _MenuUpdateSlideNeedleByPosition
0272 22                RET     
             ; FUNCTION _MenuCheckTouchInput (END)

             ; FUNCTION proc_demo_icon (BEGIN)
                                           ; SOURCE LINE # 1615
                                           ; SOURCE LINE # 1616
                                           ; SOURCE LINE # 1617
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 1618
0003 7A00        E     MOV     R2,#HIGH menu_demo_page
0005 7900        E     MOV     R1,#LOW menu_demo_page
0007 120000      R     LCALL   L?0750
                                           ; SOURCE LINE # 1619
000A 120000      R     LCALL   L?0806
                                           ; SOURCE LINE # 1620
000D 120000      R     LCALL   L?0742
0010 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_demo_icon (END)

             ; FUNCTION proc_exit_icon (BEGIN)
                                           ; SOURCE LINE # 1622
                                           ; SOURCE LINE # 1623
                                           ; SOURCE LINE # 1626
0000 020000      R     LJMP    MenuEnd
             ; FUNCTION proc_exit_icon (END)

             ; FUNCTION proc_return_icon (BEGIN)
                                           ; SOURCE LINE # 1628
                                           ; SOURCE LINE # 1629
                                           ; SOURCE LINE # 1631
0000 120000      E     LCALL   FOsdWinOffAll
                                           ; SOURCE LINE # 1633
0003 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 1634
0006 120000      R     LCALL   L?0735
0009 120000      R     LCALL   L?0744
000C 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_return_icon (END)

             ; FUNCTION proc_home_icon (BEGIN)
                                           ; SOURCE LINE # 1637
                                           ; SOURCE LINE # 1638
                                           ; SOURCE LINE # 1640
0000 900000      R     MOV     DPTR,#menu_level
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1641
0006 020000      R     LJMP    proc_return_icon
             ; FUNCTION proc_home_icon (END)

             ; FUNCTION _InitSlideCtrl (BEGIN)
                                           ; SOURCE LINE # 1651
0000 900000      R     MOV     DPTR,#title_img
0003 EB                MOV     A,R3
0004 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1652
                                           ; SOURCE LINE # 1653
0007 E4                CLR     A
0008 900000      R     MOV     DPTR,#UseSOsdHwBuff
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 166 

000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1654
000C 7F01              MOV     R7,#01H
000E 120000      E     LCALL   _SOsdWinBuffClean
                                           ; SOURCE LINE # 1656
0011 900000      R     MOV     DPTR,#title_img
0014 120000      R     LCALL   L?0819
0017 900000      R     MOV     DPTR,#slide_title_img
001A C9                XCH     A,R1
001B 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1657
001E 900000      R     MOV     DPTR,#pGet
0021 120000      R     LCALL   L?0819
0024 900000      R     MOV     DPTR,#GetSlideValue
0027 C9                XCH     A,R1
0028 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1658
002B 900000      R     MOV     DPTR,#pVary
002E 120000      R     LCALL   L?0819
0031 900000      R     MOV     DPTR,#_VarySlideValue
0034 C9                XCH     A,R1
0035 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1659
0038 900000      R     MOV     DPTR,#pSet
003B 120000      R     LCALL   L?0819
003E 900000      R     MOV     DPTR,#_SetSlideValue
0041 C9                XCH     A,R1
0042 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1660
0045 900000      R     MOV     DPTR,#pSave
0048 120000      R     LCALL   L?0819
004B 900000      R     MOV     DPTR,#_SaveSlideValue
004E C9                XCH     A,R1
004F 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1662
0052 900000      R     MOV     DPTR,#GetSlideValue
0055 120000      R     LCALL   L?0737
0058 120000      E     LCALL   ?C?ICALL
005B 900000      R     MOV     DPTR,#curr_slide_value
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
0060 900000      R     MOV     DPTR,#last_slide3_value
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1663
0064 22                RET     
             ; FUNCTION _InitSlideCtrl (END)

             ; FUNCTION _InitSlide3Ctrl (BEGIN)
                                           ; SOURCE LINE # 1664
0000 900000      R     MOV     DPTR,#title_img
0003 EB                MOV     A,R3
0004 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1665
                                           ; SOURCE LINE # 1666
0007 E4                CLR     A
0008 900000      R     MOV     DPTR,#UseSOsdHwBuff
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1667
000C 7F01              MOV     R7,#01H
000E 120000      E     LCALL   _SOsdWinBuffClean
                                           ; SOURCE LINE # 1669
0011 900000      R     MOV     DPTR,#title_img
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 167 

0014 120000      R     LCALL   L?0819
0017 900000      R     MOV     DPTR,#slide_title_img
001A C9                XCH     A,R1
001B 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1670
001E 900000      R     MOV     DPTR,#pGet
0021 120000      R     LCALL   L?0819
0024 900000      R     MOV     DPTR,#_GetSlide3Value
0027 C9                XCH     A,R1
0028 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1671
002B 900000      R     MOV     DPTR,#pVary
002E 120000      R     LCALL   L?0819
0031 900000      R     MOV     DPTR,#_VarySlide3Value
0034 C9                XCH     A,R1
0035 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1672
0038 900000      R     MOV     DPTR,#pSet
003B 120000      R     LCALL   L?0819
003E 900000      R     MOV     DPTR,#_SetSlide3Value
0041 C9                XCH     A,R1
0042 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1673
0045 900000      R     MOV     DPTR,#pSave
0048 120000      R     LCALL   L?0819
004B 900000      R     MOV     DPTR,#_SaveSlide3Value
004E C9                XCH     A,R1
004F 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1675
0052 900000      R     MOV     DPTR,#_GetSlide3Value
0055 120000      R     LCALL   L?0796
0058 E4                CLR     A
0059 FF                MOV     R7,A
005A 120000      E     LCALL   ?C?ICALL2
005D 900000      R     MOV     DPTR,#curr_slide3_value
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
0062 900000      R     MOV     DPTR,#last_slide3_value
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1676
0066 900000      R     MOV     DPTR,#_GetSlide3Value
0069 120000      R     LCALL   L?0796
006C 7F01              MOV     R7,#01H
006E 120000      E     LCALL   ?C?ICALL2
0071 900000      R     MOV     DPTR,#curr_slide3_value+01H
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
0076 900000      R     MOV     DPTR,#last_slide3_value+01H
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1677
007A 900000      R     MOV     DPTR,#_GetSlide3Value
007D 120000      R     LCALL   L?0796
0080 7F02              MOV     R7,#02H
0082 120000      E     LCALL   ?C?ICALL2
0085 900000      R     MOV     DPTR,#curr_slide3_value+02H
0088 EF                MOV     A,R7
0089 F0                MOVX    @DPTR,A
008A 900000      R     MOV     DPTR,#last_slide3_value+02H
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1678
008E 22                RET     
             ; FUNCTION _InitSlide3Ctrl (END)
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 168 


             ; FUNCTION _MenuDrawSlideNeedleImageXY (BEGIN)
                                           ; SOURCE LINE # 1689
0000 900000      R     MOV     DPTR,#index
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1690
                                           ; SOURCE LINE # 1694
000B 900000      R     MOV     DPTR,#header
000E 120000      R     LCALL   L?0812
                                           ; SOURCE LINE # 1697
0011 900000      R     MOV     DPTR,#rate
0014 7464              MOV     A,#064H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1704
0017 120000      R     LCALL   L?0735
001A 120000      R     LCALL   L?0809
001D 900000      R     MOV     DPTR,#menu_item
0020 EB                MOV     A,R3
0021 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1706
0024 900000      R     MOV     DPTR,#menu_item
0027 120000      R     LCALL   L?0736
002A 120000      R     LCALL   L?0866
002D FF                MOV     R7,A
002E 900000      R     MOV     DPTR,#sx
0031 120000      R     LCALL   L?0840
                                           ; SOURCE LINE # 1707
0034 120000      R     LCALL   L?0881
0037 FF                MOV     R7,A
0038 900000      R     MOV     DPTR,#sy
003B 120000      R     LCALL   L?0840
                                           ; SOURCE LINE # 1710
003E 120000      R     LCALL   L?0735
0041 120000      R     LCALL   L?0806
0044 900000      R     MOV     DPTR,#index
0047 120000      R     LCALL   L?0873
004A 120000      R     LCALL   L?0927
004D 120000      R     LCALL   L?0762
0050 900000      R     MOV     DPTR,#menu_item
0053 EB                MOV     A,R3
0054 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1712
0057 900000      R     MOV     DPTR,#menu_item
005A 120000      R     LCALL   L?0736
005D 120000      R     LCALL   L?0866
0060 FF                MOV     R7,A
0061 900000      R     MOV     DPTR,#barsize
0064 120000      R     LCALL   L?0840
                                           ; SOURCE LINE # 1715
0067 120000      R     LCALL   L?0735
006A 120000      R     LCALL   L?0806
006D FD                MOV     R5,A
006E 900000      R     MOV     DPTR,#index
0071 120000      R     LCALL   L?0874
0074 120000      R     LCALL   L?0919
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 169 

0077 120000      R     LCALL   L?0762
007A 900000      R     MOV     DPTR,#menu_item
007D EB                MOV     A,R3
007E 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1717
0081 900000      R     MOV     DPTR,#menu_item
0084 120000      R     LCALL   L?0736
0087 120000      R     LCALL   L?0821
008A 120000      R     LCALL   L?0973
                                           ; SOURCE LINE # 1718
008D 900006            MOV     DPTR,#06H
0090 120000      R     LCALL   L?0863
0093 900000      R     MOV     DPTR,#sy+01H
0096 E0                MOVX    A,@DPTR
0097 2D                ADD     A,R5
0098 F0                MOVX    @DPTR,A
0099 900000      R     MOV     DPTR,#sy
009C E0                MOVX    A,@DPTR
009D 3C                ADDC    A,R4
009E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1721
009F 900000      R     MOV     DPTR,#barsize
00A2 E0                MOVX    A,@DPTR
00A3 FC                MOV     R4,A
00A4 A3                INC     DPTR
00A5 E0                MOVX    A,@DPTR
00A6 C3                CLR     C
00A7 9F                SUBB    A,R7
00A8 FF                MOV     R7,A
00A9 EC                MOV     A,R4
00AA 9E                SUBB    A,R6
00AB 900000      R     MOV     DPTR,#barsize
00AE F0                MOVX    @DPTR,A
00AF A3                INC     DPTR
00B0 EF                MOV     A,R7
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1724
00B2 900000      R     MOV     DPTR,#value
00B5 E0                MOVX    A,@DPTR
00B6 FF                MOV     R7,A
00B7 7E00              MOV     R6,#00H
00B9 7C00              MOV     R4,#00H
00BB 7D64              MOV     R5,#064H
00BD 120000      E     LCALL   ?C?LIMUL
00C0 900000      R     MOV     DPTR,#rate
00C3 120000      R     LCALL   L?1006
00C6 FF                MOV     R7,A
00C7 E4                CLR     A
00C8 FD                MOV     R5,A
00C9 FE                MOV     R6,A
00CA C8                XCH     A,R0
00CB FC                MOV     R4,A
00CC ED                MOV     A,R5
00CD C9                XCH     A,R1
00CE FD                MOV     R5,A
00CF EE                MOV     A,R6
00D0 CA                XCH     A,R2
00D1 FE                MOV     R6,A
00D2 EF                MOV     A,R7
00D3 CB                XCH     A,R3
00D4 FF                MOV     R7,A
00D5 120000      E     LCALL   ?C?ULDIV
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 170 

00D8 900000      R     MOV     DPTR,#barsize
00DB 120000      R     LCALL   L?1006
00DE FC                MOV     R4,A
00DF A3                INC     DPTR
00E0 E0                MOVX    A,@DPTR
00E1 FF                MOV     R7,A
00E2 AE04              MOV     R6,AR4
00E4 E4                CLR     A
00E5 FC                MOV     R4,A
00E6 FD                MOV     R5,A
00E7 120000      E     LCALL   ?C?LMUL
00EA E4                CLR     A
00EB 7B64              MOV     R3,#064H
00ED FA                MOV     R2,A
00EE F9                MOV     R1,A
00EF F8                MOV     R0,A
00F0 120000      E     LCALL   ?C?ULDIV
;---- Variable 'position' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1726
00F3 120000      R     LCALL   L?0973
                                           ; SOURCE LINE # 1729
00F6 120000      R     LCALL   L?0735
00F9 120000      R     LCALL   L?0806
00FC FD                MOV     R5,A
00FD 7C00              MOV     R4,#00H
00FF 900000      R     MOV     DPTR,#index
0102 120000      R     LCALL   L?0874
0105 EC                MOV     A,R4
0106 35F0              ADDC    A,B
0108 FE                MOV     R6,A
0109 900000      R     MOV     DPTR,#item
010C E0                MOVX    A,@DPTR
010D 2F                ADD     A,R7
010E FF                MOV     R7,A
010F EC                MOV     A,R4
0110 3E                ADDC    A,R6
0111 120000      R     LCALL   L?0921
0114 120000      R     LCALL   L?0762
0117 900000      R     MOV     DPTR,#menu_item
011A EB                MOV     A,R3
011B 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1730
011E 900000      R     MOV     DPTR,#menu_item
0121 120000      R     LCALL   L?0736
0124 120000      R     LCALL   L?0930
0127 900000      R     MOV     DPTR,#image
012A EB                MOV     A,R3
012B 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1733
012E 900000      R     MOV     DPTR,#menu_item
0131 120000      R     LCALL   L?0736
0134 120000      R     LCALL   L?0883
0137 900000      R     MOV     DPTR,#sosd_win
013A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1738
013B 120000      R     LCALL   L?0842
013E B4010E            CJNE    A,#01H,?C0263
                                           ; SOURCE LINE # 1739
0141 900000      R     MOV     DPTR,#sx+01H
0144 E0                MOVX    A,@DPTR
0145 24EC              ADD     A,#0ECH
0147 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 171 

0148 900000      R     MOV     DPTR,#sx
014B E0                MOVX    A,@DPTR
014C 34FF              ADDC    A,#0FFH
014E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1740
014F         ?C0263:
                                           ; SOURCE LINE # 1743
014F 900000      R     MOV     DPTR,#image
0152 120000      R     LCALL   L?0736
0155 120000      R     LCALL   _MenuPrepareImageHeader
                                           ; SOURCE LINE # 1747
0158 900000      R     MOV     DPTR,#header
015B 120000      R     LCALL   L?0736
015E 120000      R     LCALL   L?0851
0161 900000      R     MOV     DPTR,#sosd_win
0164 E0                MOVX    A,@DPTR
0165 FF                MOV     R7,A
0166 120000      E     LCALL   _SpiOsdWinImageLoc
                                           ; SOURCE LINE # 1748
0169 120000      R     LCALL   L?0956
016C 120000      R     LCALL   L?0736
016F 120000      R     LCALL   L?0803
0172 FB                MOV     R3,A
0173 AAF0              MOV     R2,B
0175 120000      E     LCALL   _SpiOsdWinImageSizeWH
                                           ; SOURCE LINE # 1749
0178 120000      R     LCALL   L?0956
017B 120000      R     LCALL   L?0736
017E 120000      R     LCALL   L?0829
0181 120000      R     LCALL   L?0804
0184 FD                MOV     R5,A
0185 900000      E     MOV     DPTR,#?_SpiOsdWinScreen?BYTE+07H
0188 120000      R     LCALL   L?0831
018B 900000      R     MOV     DPTR,#sy
018E E0                MOVX    A,@DPTR
018F FA                MOV     R2,A
0190 A3                INC     DPTR
0191 E0                MOVX    A,@DPTR
0192 FB                MOV     R3,A
0193 900000      R     MOV     DPTR,#sx
0196 E0                MOVX    A,@DPTR
0197 FC                MOV     R4,A
0198 A3                INC     DPTR
0199 E0                MOVX    A,@DPTR
019A FD                MOV     R5,A
019B 120000      E     LCALL   _SpiOsdWinScreen
                                           ; SOURCE LINE # 1750
019E 900000      R     MOV     DPTR,#sosd_win
01A1 E0                MOVX    A,@DPTR
01A2 700D              JNZ     ?C0264
                                           ; SOURCE LINE # 1751
01A4 FD                MOV     R5,A
01A5 FC                MOV     R4,A
01A6 FF                MOV     R7,A
01A7 FE                MOV     R6,A
01A8 120000      E     LCALL   _SpiOsdWin0ImageOffsetXY
                                           ; SOURCE LINE # 1752
01AB 120000      R     LCALL   L?0951
01AE 120000      E     LCALL   _SpiOsdWin0Animation
                                           ; SOURCE LINE # 1753
01B1         ?C0264:
                                           ; SOURCE LINE # 1755
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 172 

01B1 900000      R     MOV     DPTR,#image
01B4 120000      R     LCALL   L?0736
01B7 120000      R     LCALL   L?0842
01BA F4                CPL     A
01BB 600C              JZ      ?C0265
                                           ; SOURCE LINE # 1756
01BD 900000      R     MOV     DPTR,#sosd_win
01C0 E0                MOVX    A,@DPTR
01C1 FF                MOV     R7,A
01C2 7D01              MOV     R5,#01H
01C4 120000      E     LCALL   _SpiOsdWinPixelAlpha
01C7 8050              SJMP    ?C0266
01C9         ?C0265:
                                           ; SOURCE LINE # 1757
                                           ; SOURCE LINE # 1758
01C9 900000      R     MOV     DPTR,#slide_title_img
01CC 120000      R     LCALL   L?0736
01CF 120000      R     LCALL   L?0915
01D2 7A00        E     MOV     R2,#HIGH img_slide_trans
01D4 7900        E     MOV     R1,#LOW img_slide_trans
01D6 F4                CPL     A
01D7 700A              JNZ     ?C0653
01D9 7400        E     MOV     A,#LOW img_slide_trans
01DB 6582              XRL     A,DPL
01DD 7004              JNZ     ?C0653
01DF 7400        E     MOV     A,#HIGH img_slide_trans
01E1 6583              XRL     A,DPH
01E3         ?C0653:
01E3 702A              JNZ     ?C0267
                                           ; SOURCE LINE # 1759
01E5 120000      E     LCALL   OsdGetTrans
01E8 AD07              MOV     R5,AR7
01EA 900000      R     MOV     DPTR,#sosd_win
01ED E0                MOVX    A,@DPTR
01EE FF                MOV     R7,A
01EF 120000      E     LCALL   _SpiOsdWinGlobalAlpha
                                           ; SOURCE LINE # 1761
01F2 120000      E     LCALL   OsdGetTrans
01F5 AD07              MOV     R5,AR7
01F7 7F01              MOV     R7,#01H
01F9 120000      E     LCALL   _SpiOsdWinGlobalAlpha
                                           ; SOURCE LINE # 1762
01FC 120000      E     LCALL   OsdGetTrans
01FF AD07              MOV     R5,AR7
0201 7F02              MOV     R7,#02H
0203 120000      E     LCALL   _SpiOsdWinGlobalAlpha
                                           ; SOURCE LINE # 1763
0206 7D02              MOV     R5,#02H
0208 7F01              MOV     R7,#01H
020A 120000      E     LCALL   _SOsdWinBuffWrite2Hw
                                           ; SOURCE LINE # 1764
020D 800A              SJMP    ?C0266
020F         ?C0267:
                                           ; SOURCE LINE # 1766
020F 900000      R     MOV     DPTR,#sosd_win
0212 E0                MOVX    A,@DPTR
0213 FF                MOV     R7,A
0214 E4                CLR     A
0215 FD                MOV     R5,A
0216 120000      E     LCALL   _SpiOsdWinGlobalAlpha
                                           ; SOURCE LINE # 1767
0219         ?C0266:
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 173 

                                           ; SOURCE LINE # 1768
0219 120000      R     LCALL   L?0957
021C 120000      R     LCALL   L?0736
021F 120000      R     LCALL   L?0845
0222 FD                MOV     R5,A
0223 120000      E     LCALL   _SpiOsdWinPixelWidth
                                           ; SOURCE LINE # 1769
0226 900000      R     MOV     DPTR,#sosd_win
0229 E0                MOVX    A,@DPTR
022A FF                MOV     R7,A
022B 900000      R     MOV     DPTR,#menu_item
022E 120000      R     LCALL   L?0736
0231 120000      R     LCALL   L?0862
0234 120000      E     LCALL   _SpiOsdWinLutOffset
                                           ; SOURCE LINE # 1771
0237 900000      R     MOV     DPTR,#sosd_win
023A E0                MOVX    A,@DPTR
023B FF                MOV     R7,A
023C 7D01              MOV     R5,#01H
023E 120000      E     LCALL   _SpiOsdWinBuffEnable
                                           ; SOURCE LINE # 1774
0241 7F01              MOV     R7,#01H
0243 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 1776
0246 900000      R     MOV     DPTR,#header
0249 120000      R     LCALL   L?0736
024C 120000      R     LCALL   L?0905
024F FE                MOV     R6,A
0250 600E              JZ      ?C0269
                                           ; SOURCE LINE # 1778
0252 900000      R     MOV     DPTR,#sosd_win
0255 120000      R     LCALL   L?0844
0258 FD                MOV     R5,A
0259 AB06              MOV     R3,AR6
025B 120000      E     LCALL   _SpiOsdRLC
                                           ; SOURCE LINE # 1779
025E 800B              SJMP    ?C0270
0260         ?C0269:
                                           ; SOURCE LINE # 1780
                                           ; SOURCE LINE # 1783
0260 900000      R     MOV     DPTR,#item
0263 E0                MOVX    A,@DPTR
0264 7005              JNZ     ?C0270
                                           ; SOURCE LINE # 1785
0266 7F01              MOV     R7,#01H
0268 120000      E     LCALL   _SpiOsdDisableRLC
                                           ; SOURCE LINE # 1786
026B         ?C0270:
                                           ; SOURCE LINE # 1788
026B 900000      R     MOV     DPTR,#menu_item
026E 120000      R     LCALL   L?0736
0271 120000      R     LCALL   L?0883
0274 FD                MOV     R5,A
0275 FF                MOV     R7,A
0276 120000      E     LCALL   _SOsdWinBuffWrite2Hw
                                           ; SOURCE LINE # 1790
0279 900000      R     MOV     DPTR,#header
027C 120000      R     LCALL   L?0736
027F 120000      R     LCALL   L?0842
0282 FD                MOV     R5,A
0283 C005              PUSH    AR5
0285 900000      R     MOV     DPTR,#menu_item
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 174 

0288 120000      R     LCALL   L?0736
028B 120000      R     LCALL   L?0893
028E FB                MOV     R3,A
028F AAF0              MOV     R2,B
0291 C002              PUSH    AR2
0293 C003              PUSH    AR3
0295 900000      R     MOV     DPTR,#header
0298 120000      R     LCALL   L?0736
029B 120000      R     LCALL   L?0786
029E 900000      R     MOV     DPTR,#sosd_win
02A1 E0                MOVX    A,@DPTR
02A2 FF                MOV     R7,A
02A3 D003              POP     AR3
02A5 D002              POP     AR2
02A7 D005              POP     AR5
02A9 120000      E     LCALL   _SpiOsdLoadLUT
                                           ; SOURCE LINE # 1793
02AC 900000      R     MOV     DPTR,#image
02AF 120000      R     LCALL   L?0736
02B2 120000      R     LCALL   L?0842
02B5 FF                MOV     R7,A
02B6 F4                CPL     A
02B7 6011              JZ      ?C0273
                                           ; SOURCE LINE # 1794
02B9 900000      R     MOV     DPTR,#menu_item
02BC 120000      R     LCALL   L?0736
02BF 120000      R     LCALL   L?0893
02C2 120000      R     LCALL   L?0953
02C5 7D7F              MOV     R5,#07FH
02C7 120000      E     LCALL   _SpiOsdPixelAlphaAttr
                                           ; SOURCE LINE # 1795
                                           ; SOURCE LINE # 1797
02CA         ?C0273:
02CA 22                RET     
             ; FUNCTION _MenuDrawSlideNeedleImageXY (END)

             ; FUNCTION _MenuUpdateSlideNeedleByPosition (BEGIN)
                                           ; SOURCE LINE # 1800
;---- Variable 'x' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1801
                                           ; SOURCE LINE # 1805
0000 900000      R     MOV     DPTR,#header
0003 120000      R     LCALL   L?0812
                                           ; SOURCE LINE # 1812
0006 900000      R     MOV     DPTR,#rate
0009 7464              MOV     A,#064H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1815
000C 120000      R     LCALL   L?0735
000F 120000      R     LCALL   L?0833
0012 700A              JNZ     ?C0654
0014 7400        E     MOV     A,#LOW menu_slider_page
0016 6582              XRL     A,DPL
0018 7004              JNZ     ?C0654
001A 7400        E     MOV     A,#HIGH menu_slider_page
001C 6583              XRL     A,DPH
001E         ?C0654:
001E 7002              JNZ     ?C0274
                                           ; SOURCE LINE # 1816
0020 8026              SJMP    ?C0713
0022         ?C0274:
                                           ; SOURCE LINE # 1817
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 175 

                                           ; SOURCE LINE # 1818
0022 120000      R     LCALL   L?0735
0025 120000      R     LCALL   L?0758
0028 FD                MOV     R5,A
0029 B40503            CJNE    A,#05H,?C0276
002C E4                CLR     A
002D         ?C0712:
002D 8019              SJMP    ?C0713
002F         ?C0276:
                                           ; SOURCE LINE # 1819
002F ED                MOV     A,R5
0030 B40708            CJNE    A,#07H,?C0278
0033 900000      R     MOV     DPTR,#index
0036 7401              MOV     A,#01H
0038 F0                MOVX    @DPTR,A
0039 8011              SJMP    ?C0275
003B         ?C0278:
                                           ; SOURCE LINE # 1820
003B ED                MOV     A,R5
003C B40908            CJNE    A,#09H,?C0280
003F 900000      R     MOV     DPTR,#index
0042 7402              MOV     A,#02H
0044 F0                MOVX    @DPTR,A
0045 8005              SJMP    ?C0275
0047         ?C0280:
                                           ; SOURCE LINE # 1821
0047 E4                CLR     A
0048         ?C0713:
0048 900000      R     MOV     DPTR,#index
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1822
004C         ?C0275:
                                           ; SOURCE LINE # 1825
004C 120000      R     LCALL   L?0735
004F 120000      R     LCALL   L?0809
0052 900000      R     MOV     DPTR,#menu_item
0055 EB                MOV     A,R3
0056 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1827
0059 900000      R     MOV     DPTR,#menu_item
005C 120000      R     LCALL   L?0736
005F 120000      R     LCALL   L?0866
0062 FD                MOV     R5,A
0063 900000      R     MOV     DPTR,#sx
0066 120000      R     LCALL   L?0831
                                           ; SOURCE LINE # 1828
0069 120000      R     LCALL   L?0881
006C FD                MOV     R5,A
006D 900000      R     MOV     DPTR,#sy
0070 120000      R     LCALL   L?0831
                                           ; SOURCE LINE # 1829
0073 900000      R     MOV     DPTR,#sx
0076 120000      R     LCALL   L?0932
0079 EE                MOV     A,R6
007A 9C                SUBB    A,R4
007B 900000      R     MOV     DPTR,#position
007E F0                MOVX    @DPTR,A
007F A3                INC     DPTR
0080 EF                MOV     A,R7
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1832
0082 120000      R     LCALL   L?0735
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 176 

0085 120000      R     LCALL   L?0806
0088 900000      R     MOV     DPTR,#index
008B 120000      R     LCALL   L?0873
008E 120000      R     LCALL   L?0927
0091 120000      R     LCALL   L?0762
0094 900000      R     MOV     DPTR,#menu_item
0097 EB                MOV     A,R3
0098 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1834
009B 900000      R     MOV     DPTR,#menu_item
009E 120000      R     LCALL   L?0736
00A1 120000      R     LCALL   L?0866
00A4 FF                MOV     R7,A
00A5 900000      R     MOV     DPTR,#barsize
00A8 120000      R     LCALL   L?0840
                                           ; SOURCE LINE # 1837
00AB 120000      R     LCALL   L?0735
00AE 120000      R     LCALL   L?0806
00B1 FD                MOV     R5,A
00B2 900000      R     MOV     DPTR,#index
00B5 120000      R     LCALL   L?0874
00B8 120000      R     LCALL   L?0919
00BB 120000      R     LCALL   L?0762
00BE 900000      R     MOV     DPTR,#menu_item
00C1 EB                MOV     A,R3
00C2 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1838
00C5 900000      R     MOV     DPTR,#menu_item
00C8 120000      R     LCALL   L?0736
00CB 120000      R     LCALL   L?0930
00CE 900000      R     MOV     DPTR,#image
00D1 EB                MOV     A,R3
00D2 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1839
00D5 900000      R     MOV     DPTR,#menu_item
00D8 120000      R     LCALL   L?0736
00DB 120000      R     LCALL   L?0821
00DE 900000      R     MOV     DPTR,#sx+01H
00E1 E0                MOVX    A,@DPTR
00E2 2F                ADD     A,R7
00E3 F0                MOVX    @DPTR,A
00E4 900000      R     MOV     DPTR,#sx
00E7 E0                MOVX    A,@DPTR
00E8 3E                ADDC    A,R6
00E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1840
00EA 900006            MOV     DPTR,#06H
00ED 120000      R     LCALL   L?0863
00F0 900000      R     MOV     DPTR,#sy+01H
00F3 E0                MOVX    A,@DPTR
00F4 2D                ADD     A,R5
00F5 F0                MOVX    @DPTR,A
00F6 900000      R     MOV     DPTR,#sy
00F9 E0                MOVX    A,@DPTR
00FA 3C                ADDC    A,R4
00FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1841
00FC C3                CLR     C
00FD 900000      R     MOV     DPTR,#position+01H
0100 E0                MOVX    A,@DPTR
0101 9F                SUBB    A,R7
0102 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 177 

0103 900000      R     MOV     DPTR,#position
0106 E0                MOVX    A,@DPTR
0107 9E                SUBB    A,R6
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1844
0109 120000      R     LCALL   L?0821
010C C3                CLR     C
010D 900000      R     MOV     DPTR,#barsize+01H
0110 E0                MOVX    A,@DPTR
0111 9F                SUBB    A,R7
0112 F0                MOVX    @DPTR,A
0113 900000      R     MOV     DPTR,#barsize
0116 E0                MOVX    A,@DPTR
0117 9E                SUBB    A,R6
0118 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1851
0119 900000      R     MOV     DPTR,#position
011C E0                MOVX    A,@DPTR
011D FE                MOV     R6,A
011E A3                INC     DPTR
011F E0                MOVX    A,@DPTR
0120 FF                MOV     R7,A
0121 7C00              MOV     R4,#00H
0123 7D64              MOV     R5,#064H
0125 120000      E     LCALL   ?C?LIMUL
0128 C006              PUSH    AR6
012A C007              PUSH    AR7
012C A3                INC     DPTR
012D E0                MOVX    A,@DPTR
012E FE                MOV     R6,A
012F A3                INC     DPTR
0130 E0                MOVX    A,@DPTR
0131 FB                MOV     R3,A
0132 AA06              MOV     R2,AR6
0134 E4                CLR     A
0135 F9                MOV     R1,A
0136 F8                MOV     R0,A
0137 D007              POP     AR7
0139 D006              POP     AR6
013B 120000      E     LCALL   ?C?ULDIV
013E 900000      R     MOV     DPTR,#value
0141 EF                MOV     A,R7
0142 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1854
0143 120000      R     LCALL   L?0735
0146 120000      R     LCALL   L?0827
0149 7900        E     MOV     R1,#LOW menu_slider_page
014B 6401              XRL     A,#01H
014D 700A              JNZ     ?C0655
014F 7400        E     MOV     A,#LOW menu_slider_page
0151 6582              XRL     A,DPL
0153 7004              JNZ     ?C0655
0155 7400        E     MOV     A,#HIGH menu_slider_page
0157 6583              XRL     A,DPH
0159         ?C0655:
0159 900000      R     MOV     DPTR,#value
015C 7010              JNZ     ?C0282
                                           ; SOURCE LINE # 1855
015E E0                MOVX    A,@DPTR
015F FF                MOV     R7,A
0160 900000      R     MOV     DPTR,#curr_slide_value
0163 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 178 

                                           ; SOURCE LINE # 1856
0164 900000      R     MOV     DPTR,#_SetSlideValue
0167 120000      R     LCALL   L?0796
016A 120000      R     LCALL   L?0958
                                           ; SOURCE LINE # 1864
016D 22                RET     
016E         ?C0282:
                                           ; SOURCE LINE # 1865
                                           ; SOURCE LINE # 1866
016E E0                MOVX    A,@DPTR
016F FE                MOV     R6,A
0170 A3                INC     DPTR
0171 120000      R     LCALL   L?0790
0174 EE                MOV     A,R6
0175 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1867
0176 7400        R     MOV     A,#LOW curr_slide3_value
0178 2F                ADD     A,R7
0179 120000      R     LCALL   L?0792
017C 120000      R     LCALL   L?0793
017F 120000      E     LCALL   ?C?ICALL2
0182 900000      R     MOV     DPTR,#index
0185 E0                MOVX    A,@DPTR
0186 120000      R     LCALL   L?0791
0189 EF                MOV     A,R7
018A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1869
                                           ; SOURCE LINE # 1870
018B         ?C0284:
018B 22                RET     
             ; FUNCTION _MenuUpdateSlideNeedleByPosition (END)

             ; FUNCTION _MenuDrawSlideCurrValue (BEGIN)
                                           ; SOURCE LINE # 1880
0000 900000      R     MOV     DPTR,#value
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
;---- Variable 'index' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1881
                                           ; SOURCE LINE # 1887
0008 E4                CLR     A
0009 900000      R     MOV     DPTR,#start
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1891
000D 120000      R     LCALL   L?0735
0010 120000      R     LCALL   L?0908
0013 900000      R     MOV     DPTR,#text_info
0016 EB                MOV     A,R3
0017 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1892
001A EF                MOV     A,R7
001B 75F00F            MOV     B,#0FH
001E A4                MUL     AB
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#text_info+01H
0023 120000      R     LCALL   L?0877
                                           ; SOURCE LINE # 1896
0026 900000      R     MOV     DPTR,#value
0029 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 179 

002A FE                MOV     R6,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 120000      R     LCALL   L?0974
0031 120000      E     LCALL   _TWitoa
0034 900000      R     MOV     DPTR,#n_char
0037 EF                MOV     A,R7
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1897
0039 120000      R     LCALL   L?0974
003C 900000      R     MOV     DPTR,#str
003F EB                MOV     A,R3
0040 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 1900
0043 120000      E     LCALL   ?C?CLDPTR
0046 FF                MOV     R7,A
0047 120000      E     LCALL   _IsDigit
004A EF                MOV     A,R7
004B 7035              JNZ     ?C0285
                                           ; SOURCE LINE # 1902
004D 900000      R     MOV     DPTR,#text_info
0050 120000      R     LCALL   L?0736
0053 120000      R     LCALL   L?0837
0056 FD                MOV     R5,A
0057 900000      R     MOV     DPTR,#palette
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1903
005B 900001            MOV     DPTR,#01H
005E 120000      R     LCALL   L?0822
0061 120000      E     LCALL   _FOsdRamSetAddrAttr
                                           ; SOURCE LINE # 1905
0064 900000      R     MOV     DPTR,#str
0067 120000      R     LCALL   L?0736
006A 120000      E     LCALL   ?C?CLDPTR
006D 120000      R     LCALL   L?0799
0070 EF                MOV     A,R7
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1906
0072 900000      R     MOV     DPTR,#str+01H
0075 E4                CLR     A
0076 75F001            MOV     B,#01H
0079 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1907
007C 900000      R     MOV     DPTR,#start
007F E0                MOVX    A,@DPTR
0080 04                INC     A
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1908
0082         ?C0285:
                                           ; SOURCE LINE # 1910
0082 900000      R     MOV     DPTR,#text_info
0085 120000      R     LCALL   L?0736
0088 120000      R     LCALL   L?0914
008B 900000      R     MOV     DPTR,#palette
                                           ; SOURCE LINE # 1913
008E 120000      R     LCALL   L?0992
0091 900000      R     MOV     DPTR,#start
0094 120000      R     LCALL   L?0938
0097 900000      R     MOV     DPTR,#palette
009A E0                MOVX    A,@DPTR
009B 13                RRC     A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 180 

009C 13                RRC     A
009D 543F              ANL     A,#03FH
009F FD                MOV     R5,A
00A0 120000      E     LCALL   _FOsdRamSetAddrAttr
00A3         ?C0286:
                                           ; SOURCE LINE # 1914
00A3 900000      R     MOV     DPTR,#str
00A6 120000      R     LCALL   L?0736
00A9 120000      E     LCALL   ?C?CLDPTR
00AC 6017              JZ      ?C0287
                                           ; SOURCE LINE # 1915
00AE 900000      R     MOV     DPTR,#str
00B1 120000      R     LCALL   L?0901
;---- Variable 'font' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1916
00B4 24D0              ADD     A,#0D0H
00B6 FF                MOV     R7,A
                                           ; SOURCE LINE # 1917
00B7 75F003            MOV     B,#03H
00BA A4                MUL     AB
00BB 2480              ADD     A,#080H
00BD FE                MOV     R6,A
00BE 120000      R     LCALL   L?0800
00C1 EE                MOV     A,R6
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1918
00C3 80DE              SJMP    ?C0286
00C5         ?C0287:
                                           ; SOURCE LINE # 1920
00C5 900000      R     MOV     DPTR,#text_info
00C8 120000      R     LCALL   L?0736
00CB 120000      E     LCALL   ?C?CLDPTR
00CE FF                MOV     R7,A
00CF 900000      R     MOV     DPTR,#n_char
00D2 E0                MOVX    A,@DPTR
00D3 FD                MOV     R5,A
00D4 7B01              MOV     R3,#01H
00D6 020000      E     LJMP    _FOsdWinScreenWH
             ; FUNCTION _MenuDrawSlideCurrValue (END)

             ; FUNCTION proc_slider_bg (BEGIN)
                                           ; SOURCE LINE # 1925
                                           ; SOURCE LINE # 1926
                                           ; SOURCE LINE # 1934
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FF                MOV     R7,A
0003 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 1935
0006 7D01              MOV     R5,#01H
0008 E4                CLR     A
0009 FF                MOV     R7,A
000A 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 1937
000D 120000      R     LCALL   L?0735
0010 120000      R     LCALL   L?0758
0013 6405              XRL     A,#05H
0015 900000      R     MOV     DPTR,#curr_slide_value
0018 702C              JNZ     ?C0289
                                           ; SOURCE LINE # 1938
001A E0                MOVX    A,@DPTR
001B FD                MOV     R5,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 181 

001C 7B01              MOV     R3,#01H
001E E4                CLR     A
001F FF                MOV     R7,A
0020 120000      R     LCALL   _MenuDrawSlideNeedleImageXY
                                           ; SOURCE LINE # 1940
0023 120000      R     LCALL   L?0735
0026 120000      R     LCALL   L?0758
0029 24FF              ADD     A,#0FFH
002B FF                MOV     R7,A
002C E4                CLR     A
002D 34FF              ADDC    A,#0FFH
002F 120000      R     LCALL   L?0928
0032 120000      R     LCALL   L?0762
;---- Variable 'menu_item' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 1941
0035 120000      R     LCALL   L?0883
;---- Variable 'sosd_win' assigned to Register 'R6' ----
0038 FE                MOV     R6,A
                                           ; SOURCE LINE # 1942
0039 FF                MOV     R7,A
003A E4                CLR     A
003B FD                MOV     R5,A
003C 120000      E     LCALL   _SpiOsdWinBuffEnable
                                           ; SOURCE LINE # 1943
003F AF06              MOV     R7,AR6
0041 120000      E     LCALL   _SpiOsdWinHWEnable
                                           ; SOURCE LINE # 1944
0044 8014              SJMP    ?C0290
0046         ?C0289:
                                           ; SOURCE LINE # 1945
                                           ; SOURCE LINE # 1946
0046 E0                MOVX    A,@DPTR
0047 FD                MOV     R5,A
0048 E4                CLR     A
0049 FB                MOV     R3,A
004A FF                MOV     R7,A
004B 120000      R     LCALL   _MenuDrawSlideNeedleImageXY
                                           ; SOURCE LINE # 1947
004E 120000      R     LCALL   L?0735
0051 120000      R     LCALL   L?0758
0054 FD                MOV     R5,A
0055 E4                CLR     A
0056 FF                MOV     R7,A
0057 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 1948
005A         ?C0290:
                                           ; SOURCE LINE # 1954
005A E4                CLR     A
005B FD                MOV     R5,A
005C FF                MOV     R7,A
005D 120000      R     LCALL   _MenuFontOsdItemInit
                                           ; SOURCE LINE # 1955
0060 120000      R     LCALL   L?0884
0063 020000      R     LJMP    _MenuDrawSlideCurrValue
             ; FUNCTION proc_slider_bg (END)

             ; FUNCTION proc_slider3_bg (BEGIN)
                                           ; SOURCE LINE # 1958
                                           ; SOURCE LINE # 1959
                                           ; SOURCE LINE # 1965
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0758
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 182 

0006 FF                MOV     R7,A
0007 B40507            CJNE    A,#05H,?C0292
000A E4                CLR     A
000B 900000      R     MOV     DPTR,#index
000E F0                MOVX    @DPTR,A
000F 801B              SJMP    ?C0293
0011         ?C0292:
                                           ; SOURCE LINE # 1966
0011 EF                MOV     A,R7
0012 B40708            CJNE    A,#07H,?C0294
0015 900000      R     MOV     DPTR,#index
0018 7401              MOV     A,#01H
001A F0                MOVX    @DPTR,A
001B 800F              SJMP    ?C0293
001D         ?C0294:
                                           ; SOURCE LINE # 1967
001D EF                MOV     A,R7
001E 900000      R     MOV     DPTR,#index
0021 B40905            CJNE    A,#09H,?C0296
0024 7402              MOV     A,#02H
0026 F0                MOVX    @DPTR,A
0027 8003              SJMP    ?C0293
0029         ?C0296:
                                           ; SOURCE LINE # 1968
0029 7403              MOV     A,#03H
002B F0                MOVX    @DPTR,A
002C         ?C0293:
                                           ; SOURCE LINE # 1970
002C 120000      R     LCALL   L?1004
                                           ; SOURCE LINE # 1971
002F 120000      E     LCALL   SOsdHwBuffClean
                                           ; SOURCE LINE # 1972
0032 E4                CLR     A
0033 FF                MOV     R7,A
0034 120000      E     LCALL   _SOsdWinBuffClean
                                           ; SOURCE LINE # 1974
0037 E4                CLR     A
0038 FD                MOV     R5,A
0039 FF                MOV     R7,A
003A 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 1975
003D 7D01              MOV     R5,#01H
003F E4                CLR     A
0040 FF                MOV     R7,A
0041 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 1977
0044 E4                CLR     A
0045 900000      R     MOV     DPTR,#i
0048 F0                MOVX    @DPTR,A
0049         ?C0298:
0049 900000      R     MOV     DPTR,#i
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E C3                CLR     C
004F 9403              SUBB    A,#03H
0051 504F              JNC     ?C0299
                                           ; SOURCE LINE # 1978
0053 900000      R     MOV     DPTR,#index
0056 E0                MOVX    A,@DPTR
0057 6F                XRL     A,R7
0058 7032              JNZ     ?C0301
                                           ; SOURCE LINE # 1979
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 183 

005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C 120000      R     LCALL   L?0791
005F E0                MOVX    A,@DPTR
0060 FD                MOV     R5,A
0061 7B01              MOV     R3,#01H
0063 120000      R     LCALL   _MenuDrawSlideNeedleImageXY
                                           ; SOURCE LINE # 1982
0066 120000      R     LCALL   L?0735
0069 120000      R     LCALL   L?0806
006C FD                MOV     R5,A
006D 7C00              MOV     R4,#00H
006F 900000      R     MOV     DPTR,#index
0072 120000      R     LCALL   L?0874
0075 120000      R     LCALL   L?0920
0078 120000      R     LCALL   L?0762
;---- Variable 'menu_item' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 1983
007B 120000      R     LCALL   L?0883
;---- Variable 'sosd_win' assigned to Register 'R6' ----
007E FE                MOV     R6,A
                                           ; SOURCE LINE # 1984
007F FF                MOV     R7,A
0080 E4                CLR     A
0081 FD                MOV     R5,A
0082 120000      E     LCALL   _SpiOsdWinBuffEnable
                                           ; SOURCE LINE # 1985
0085 AF06              MOV     R7,AR6
0087 120000      E     LCALL   _SpiOsdWinHWEnable
                                           ; SOURCE LINE # 1986
008A 800D              SJMP    ?C0300
008C         ?C0301:
                                           ; SOURCE LINE # 1987
                                           ; SOURCE LINE # 1988
008C 900000      R     MOV     DPTR,#i
008F 120000      R     LCALL   L?0790
0092 E0                MOVX    A,@DPTR
0093 FD                MOV     R5,A
0094 E4                CLR     A
0095 FB                MOV     R3,A
0096 120000      R     LCALL   _MenuDrawSlideNeedleImageXY
                                           ; SOURCE LINE # 1989
                                           ; SOURCE LINE # 1993
0099         ?C0300:
0099 900000      R     MOV     DPTR,#i
009C E0                MOVX    A,@DPTR
009D 04                INC     A
009E F0                MOVX    @DPTR,A
009F 020000      R     LJMP    ?C0298
00A2         ?C0299:
                                           ; SOURCE LINE # 1994
00A2 900000      R     MOV     DPTR,#index
00A5 E0                MOVX    A,@DPTR
00A6 B4030C            CJNE    A,#03H,?C0303
                                           ; SOURCE LINE # 1995
00A9 120000      R     LCALL   L?0735
00AC 120000      R     LCALL   L?0758
00AF FD                MOV     R5,A
00B0 E4                CLR     A
00B1 FF                MOV     R7,A
00B2 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 1996
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 184 

00B5         ?C0303:
                                           ; SOURCE LINE # 1998
00B5 900000      R     MOV     DPTR,#UseSOsdHwBuff
00B8 E0                MOVX    A,@DPTR
00B9 6008              JZ      ?C0304
                                           ; SOURCE LINE # 1999
00BB 120000      E     LCALL   SOsdHwBuffWrite2Hw
                                           ; SOURCE LINE # 2000
00BE E4                CLR     A
00BF 900000      R     MOV     DPTR,#UseSOsdHwBuff
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2001
00C3         ?C0304:
                                           ; SOURCE LINE # 2003
00C3 7D02              MOV     R5,#02H
00C5 E4                CLR     A
00C6 FF                MOV     R7,A
00C7 120000      R     LCALL   _MenuFontOsdItemInitNew
                                           ; SOURCE LINE # 2004
00CA E4                CLR     A
00CB 900000      R     MOV     DPTR,#i
00CE F0                MOVX    @DPTR,A
00CF         ?C0305:
                                           ; SOURCE LINE # 2005
00CF 900000      R     MOV     DPTR,#i
00D2 120000      R     LCALL   L?0790
00D5 E0                MOVX    A,@DPTR
00D6 FD                MOV     R5,A
00D7 7C00              MOV     R4,#00H
00D9 120000      R     LCALL   _MenuDrawSlideCurrValue
                                           ; SOURCE LINE # 2007
00DC 900000      R     MOV     DPTR,#i
00DF E0                MOVX    A,@DPTR
00E0 04                INC     A
00E1 F0                MOVX    @DPTR,A
00E2 E0                MOVX    A,@DPTR
00E3 C3                CLR     C
00E4 9403              SUBB    A,#03H
00E6 40E7              JC      ?C0305
                                           ; SOURCE LINE # 2016
00E8         ?C0308:
00E8 22                RET     
             ; FUNCTION proc_slider3_bg (END)

             ; FUNCTION proc_slider_ctrl (BEGIN)
                                           ; SOURCE LINE # 2018
                                           ; SOURCE LINE # 2019
                                           ; SOURCE LINE # 2021
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0833
0006 700A              JNZ     ?C0656
0008 7400        E     MOV     A,#LOW menu_slider_page
000A 6582              XRL     A,DPL
000C 7004              JNZ     ?C0656
000E 7400        E     MOV     A,#HIGH menu_slider_page
0010 6583              XRL     A,DPH
0012         ?C0656:
0012 7014              JNZ     ?C0309
                                           ; SOURCE LINE # 2022
0014 120000      R     LCALL   L?0735
0017 120000      R     LCALL   L?0758
001A 6405              XRL     A,#05H
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 185 

001C 7048              JNZ     ?C0311
                                           ; SOURCE LINE # 2023
001E 900000      R     MOV     DPTR,#curr_slide_value
0021 E0                MOVX    A,@DPTR
0022 FD                MOV     R5,A
0023 E4                CLR     A
0024 FB                MOV     R3,A
0025 FF                MOV     R7,A
                                           ; SOURCE LINE # 2024
0026 803B              SJMP    ?C0714
0028         ?C0309:
                                           ; SOURCE LINE # 2025
                                           ; SOURCE LINE # 2026
0028 120000      R     LCALL   L?0735
002B 120000      R     LCALL   L?0758
002E FF                MOV     R7,A
002F B40507            CJNE    A,#05H,?C0312
0032 E4                CLR     A
0033 900000      R     MOV     DPTR,#index
0036 F0                MOVX    @DPTR,A
0037 801B              SJMP    ?C0313
0039         ?C0312:
                                           ; SOURCE LINE # 2027
0039 EF                MOV     A,R7
003A B40708            CJNE    A,#07H,?C0314
003D 900000      R     MOV     DPTR,#index
0040 7401              MOV     A,#01H
0042 F0                MOVX    @DPTR,A
0043 800F              SJMP    ?C0313
0045         ?C0314:
                                           ; SOURCE LINE # 2028
0045 EF                MOV     A,R7
0046 900000      R     MOV     DPTR,#index
0049 B40905            CJNE    A,#09H,?C0316
004C 7402              MOV     A,#02H
004E F0                MOVX    @DPTR,A
004F 8003              SJMP    ?C0313
0051         ?C0316:
                                           ; SOURCE LINE # 2029
0051 7403              MOV     A,#03H
0053 F0                MOVX    @DPTR,A
0054         ?C0313:
                                           ; SOURCE LINE # 2031
0054 900000      R     MOV     DPTR,#index
0057 E0                MOVX    A,@DPTR
0058 6403              XRL     A,#03H
005A 600A              JZ      ?C0311
                                           ; SOURCE LINE # 2032
005C 120000      R     LCALL   L?0790
005F E0                MOVX    A,@DPTR
0060 FD                MOV     R5,A
0061 E4                CLR     A
0062 FB                MOV     R3,A
0063         ?C0714:
0063 120000      R     LCALL   _MenuDrawSlideNeedleImageXY
                                           ; SOURCE LINE # 2033
0066         ?C0311:
                                           ; SOURCE LINE # 2036
0066 120000      R     LCALL   L?0735
0069 120000      R     LCALL   L?0833
006C 700A              JNZ     ?C0657
006E 7400        E     MOV     A,#LOW menu_slider3_page
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 186 

0070 6582              XRL     A,DPL
0072 7004              JNZ     ?C0657
0074 7400        E     MOV     A,#HIGH menu_slider3_page
0076 6583              XRL     A,DPH
0078         ?C0657:
                                           ; SOURCE LINE # 2037
0078 120000      R     LCALL   L?0735
007B 900001            MOV     DPTR,#01H
007E 7402              MOV     A,#02H
0080 120000      E     LCALL   ?C?CSTOPTR
0083         ?C0320:
                                           ; SOURCE LINE # 2038
0083 120000      R     LCALL   L?0735
0086 120000      R     LCALL   L?0758
0089 FD                MOV     R5,A
008A E4                CLR     A
008B FF                MOV     R7,A
008C 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_slider_ctrl (END)

             ; FUNCTION proc_slider_ok (BEGIN)
                                           ; SOURCE LINE # 2040
                                           ; SOURCE LINE # 2041
                                           ; SOURCE LINE # 2042
0000 7F01              MOV     R7,#01H
0002 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 2043
0005 E4                CLR     A
0006 FF                MOV     R7,A
0007 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 2045
000A 900000      R     MOV     DPTR,#slide_title_img
000D 120000      R     LCALL   L?0736
0010 120000      R     LCALL   L?0915
0013 7A00        E     MOV     R2,#HIGH img_slide_clock
0015 7900        E     MOV     R1,#LOW img_slide_clock
0017 F4                CPL     A
0018 700A              JNZ     ?C0658
001A 7400        E     MOV     A,#LOW img_slide_clock
001C 6582              XRL     A,DPL
001E 7004              JNZ     ?C0658
0020 7400        E     MOV     A,#HIGH img_slide_clock
0022 6583              XRL     A,DPH
0024         ?C0658:
0024 7009              JNZ     ?C0322
                                           ; SOURCE LINE # 2048
0026 120000      R     LCALL   L?0933
0029 74F8              MOV     A,#0F8H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2049
002C E4                CLR     A
                                           ; SOURCE LINE # 2050
002D 801C              SJMP    ?C0715
002F         ?C0322:
                                           ; SOURCE LINE # 2051
002F 900000      R     MOV     DPTR,#slide_title_img
0032 120000      R     LCALL   L?0736
0035 120000      R     LCALL   L?0916
0038 7A00        E     MOV     R2,#HIGH img_slide_phase
003A 7900        E     MOV     R1,#LOW img_slide_phase
003C F4                CPL     A
003D 700A              JNZ     ?C0659
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 187 

003F 7400        E     MOV     A,#LOW img_slide_phase
0041 6582              XRL     A,DPL
0043 7004              JNZ     ?C0659
0045 7400        E     MOV     A,#HIGH img_slide_phase
0047 6583              XRL     A,DPH
0049         ?C0659:
0049 7007              JNZ     ?C0323
                                           ; SOURCE LINE # 2052
004B         ?C0715:
004B FD                MOV     R5,A
004C FC                MOV     R4,A
004D 7F07              MOV     R7,#07H
004F 120000      E     LCALL   _VAdcSetFilterBandwidth
                                           ; SOURCE LINE # 2053
0052         ?C0323:
                                           ; SOURCE LINE # 2057
0052 120000      R     LCALL   L?0735
0055 120000      R     LCALL   L?0827
0058 7900        E     MOV     R1,#LOW menu_slider3_page
005A 6401              XRL     A,#01H
005C 700A              JNZ     ?C0660
005E 7400        E     MOV     A,#LOW menu_slider3_page
0060 6582              XRL     A,DPL
0062 7004              JNZ     ?C0660
0064 7400        E     MOV     A,#HIGH menu_slider3_page
0066 6583              XRL     A,DPH
0068         ?C0660:
0068 702E              JNZ     ?C0325
                                           ; SOURCE LINE # 2058
006A 900000      R     MOV     DPTR,#curr_slide3_value
006D E0                MOVX    A,@DPTR
006E 900000      R     MOV     DPTR,#_SaveSlide3Value
0071 120000      R     LCALL   L?0795
0074 E4                CLR     A
0075 FF                MOV     R7,A
0076 120000      E     LCALL   ?C?ICALL2
                                           ; SOURCE LINE # 2059
0079 900000      R     MOV     DPTR,#curr_slide3_value+01H
007C E0                MOVX    A,@DPTR
007D FD                MOV     R5,A
007E 900000      R     MOV     DPTR,#_SaveSlide3Value
0081 120000      R     LCALL   L?0796
0084 7F01              MOV     R7,#01H
0086 120000      E     LCALL   ?C?ICALL2
                                           ; SOURCE LINE # 2060
0089 900000      R     MOV     DPTR,#curr_slide3_value+02H
008C E0                MOVX    A,@DPTR
008D FD                MOV     R5,A
008E 900000      R     MOV     DPTR,#_SaveSlide3Value
0091 120000      R     LCALL   L?0796
0094 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 2061
0096 800B              SJMP    ?C0716
0098         ?C0325:
                                           ; SOURCE LINE # 2063
0098 900000      R     MOV     DPTR,#curr_slide_value
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D 900000      R     MOV     DPTR,#_SaveSlideValue
00A0 120000      R     LCALL   L?0796
00A3         ?C0716:
00A3 120000      E     LCALL   ?C?ICALL2
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 188 

00A6         ?C0326:
                                           ; SOURCE LINE # 2065
00A6 7F01              MOV     R7,#01H
00A8 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 2068
00AB 120000      E     LCALL   FOsdWinOffAll
                                           ; SOURCE LINE # 2069
00AE 120000      R     LCALL   L?0735
00B1 120000      R     LCALL   L?0827
00B4 120000      R     LCALL   L?0970
00B7 700A              JNZ     ?C0661
00B9 7400        E     MOV     A,#LOW menu_slider3_page
00BB 6582              XRL     A,DPL
00BD 7004              JNZ     ?C0661
00BF 7400        E     MOV     A,#HIGH menu_slider3_page
00C1 6583              XRL     A,DPH
00C3         ?C0661:
00C3 7004              JNZ     ?C0327
                                           ; SOURCE LINE # 2071
00C5 FF                MOV     R7,A
00C6 120000      E     LCALL   _FOsdSetDefPaletteColor
00C9         ?C0327:
                                           ; SOURCE LINE # 2073
00C9 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2076
00CC 120000      R     LCALL   L?0735
00CF 120000      R     LCALL   L?0744
00D2 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_slider_ok (END)

             ; FUNCTION proc_slider_undo (BEGIN)
                                           ; SOURCE LINE # 2078
                                           ; SOURCE LINE # 2079
                                           ; SOURCE LINE # 2081
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0827
0006 7900        E     MOV     R1,#LOW menu_slider3_page
0008 6401              XRL     A,#01H
000A 700A              JNZ     ?C0662
000C 7400        E     MOV     A,#LOW menu_slider3_page
000E 6582              XRL     A,DPL
0010 7004              JNZ     ?C0662
0012 7400        E     MOV     A,#HIGH menu_slider3_page
0014 6583              XRL     A,DPH
0016         ?C0662:
0016 900000      R     MOV     DPTR,#last_slide3_value
0019 701D              JNZ     ?C0329
                                           ; SOURCE LINE # 2082
001B 120000      R     LCALL   L?0793
001E E4                CLR     A
001F FF                MOV     R7,A
0020 120000      E     LCALL   ?C?ICALL2
                                           ; SOURCE LINE # 2083
0023 900000      R     MOV     DPTR,#last_slide3_value+01H
0026 120000      R     LCALL   L?0794
0029 7F01              MOV     R7,#01H
002B 120000      E     LCALL   ?C?ICALL2
                                           ; SOURCE LINE # 2084
002E 900000      R     MOV     DPTR,#last_slide3_value+02H
0031 120000      R     LCALL   L?0794
0034 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 2085
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 189 

0036 8008              SJMP    ?C0717
0038         ?C0329:
                                           ; SOURCE LINE # 2086
                                           ; SOURCE LINE # 2088
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 900000      R     MOV     DPTR,#_SetSlideValue
003D 120000      R     LCALL   L?0796
0040         ?C0717:
0040 120000      E     LCALL   ?C?ICALL2
                                           ; SOURCE LINE # 2089
0043         ?C0330:
                                           ; SOURCE LINE # 2091
0043 900000      R     MOV     DPTR,#slide_title_img
0046 120000      R     LCALL   L?0736
0049 120000      R     LCALL   L?0916
004C 7A00        E     MOV     R2,#HIGH img_slide_clock
004E 7900        E     MOV     R1,#LOW img_slide_clock
0050 F4                CPL     A
0051 700A              JNZ     ?C0663
0053 7400        E     MOV     A,#LOW img_slide_clock
0055 6582              XRL     A,DPL
0057 7004              JNZ     ?C0663
0059 7400        E     MOV     A,#HIGH img_slide_clock
005B 6583              XRL     A,DPH
005D         ?C0663:
005D 7009              JNZ     ?C0331
                                           ; SOURCE LINE # 2093
005F 120000      R     LCALL   L?0933
0062 74F8              MOV     A,#0F8H
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2094
0065 E4                CLR     A
                                           ; SOURCE LINE # 2096
0066 801C              SJMP    ?C0718
0068         ?C0331:
                                           ; SOURCE LINE # 2097
0068 900000      R     MOV     DPTR,#slide_title_img
006B 120000      R     LCALL   L?0736
006E 120000      R     LCALL   L?0916
0071 7A00        E     MOV     R2,#HIGH img_slide_phase
0073 7900        E     MOV     R1,#LOW img_slide_phase
0075 F4                CPL     A
0076 700A              JNZ     ?C0664
0078 7400        E     MOV     A,#LOW img_slide_phase
007A 6582              XRL     A,DPL
007C 7004              JNZ     ?C0664
007E 7400        E     MOV     A,#HIGH img_slide_phase
0080 6583              XRL     A,DPH
0082         ?C0664:
0082 7007              JNZ     ?C0332
                                           ; SOURCE LINE # 2098
0084         ?C0718:
0084 FD                MOV     R5,A
0085 FC                MOV     R4,A
0086 7F07              MOV     R7,#07H
0088 120000      E     LCALL   _VAdcSetFilterBandwidth
                                           ; SOURCE LINE # 2099
008B         ?C0332:
                                           ; SOURCE LINE # 2102
008B 120000      E     LCALL   FOsdWinOffAll
                                           ; SOURCE LINE # 2103
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 190 

008E 120000      R     LCALL   L?0735
0091 120000      R     LCALL   L?0827
0094 120000      R     LCALL   L?0971
0097 700A              JNZ     ?C0665
0099 7400        E     MOV     A,#LOW menu_slider3_page
009B 6582              XRL     A,DPL
009D 7004              JNZ     ?C0665
009F 7400        E     MOV     A,#HIGH menu_slider3_page
00A1 6583              XRL     A,DPH
00A3         ?C0665:
00A3 7004              JNZ     ?C0334
                                           ; SOURCE LINE # 2105
00A5 FF                MOV     R7,A
00A6 120000      E     LCALL   _FOsdSetDefPaletteColor
00A9         ?C0334:
                                           ; SOURCE LINE # 2107
00A9 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2109
00AC 120000      R     LCALL   L?0735
00AF 120000      R     LCALL   L?0744
00B2 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_slider_undo (END)

             ; FUNCTION proc_slider_left (BEGIN)
                                           ; SOURCE LINE # 2111
                                           ; SOURCE LINE # 2112
                                           ; SOURCE LINE # 2134
0000 900000      R     MOV     DPTR,#curr_slide_value
0003 E0                MOVX    A,@DPTR
0004 601B              JZ      ?C0337
                                           ; SOURCE LINE # 2135
0006 14                DEC     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2136
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#_VarySlideValue
000D 120000      R     LCALL   L?0796
0010 120000      R     LCALL   L?0958
0013 FD                MOV     R5,A
                                           ; SOURCE LINE # 2141
0014 7B01              MOV     R3,#01H
0016 E4                CLR     A
0017 FF                MOV     R7,A
0018 120000      R     LCALL   _MenuDrawSlideNeedleImageXY
                                           ; SOURCE LINE # 2142
001B 120000      R     LCALL   L?0885
001E 120000      R     LCALL   _MenuDrawSlideCurrValue
                                           ; SOURCE LINE # 2143
                                           ; SOURCE LINE # 2144
0021         ?C0337:
0021 22                RET     
             ; FUNCTION proc_slider_left (END)

             ; FUNCTION proc_slider3_left (BEGIN)
                                           ; SOURCE LINE # 2146
                                           ; SOURCE LINE # 2147
                                           ; SOURCE LINE # 2150
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0758
0006 FF                MOV     R7,A
0007 B40502            CJNE    A,#05H,?C0338
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 191 

000A 8018              SJMP    ?C0719
000C         ?C0338:
                                           ; SOURCE LINE # 2151
000C EF                MOV     A,R7
000D B40708            CJNE    A,#07H,?C0340
0010 900000      R     MOV     DPTR,#index
0013 7401              MOV     A,#01H
0015 F0                MOVX    @DPTR,A
0016 8011              SJMP    ?C0339
0018         ?C0340:
                                           ; SOURCE LINE # 2152
0018 EF                MOV     A,R7
0019 B40908            CJNE    A,#09H,?C0342
001C 900000      R     MOV     DPTR,#index
001F 7402              MOV     A,#02H
0021 F0                MOVX    @DPTR,A
0022 8005              SJMP    ?C0339
0024         ?C0342:
                                           ; SOURCE LINE # 2153
0024         ?C0719:
0024 E4                CLR     A
0025 900000      R     MOV     DPTR,#index
0028 F0                MOVX    @DPTR,A
0029         ?C0339:
                                           ; SOURCE LINE # 2156
0029 900000      R     MOV     DPTR,#index
002C E0                MOVX    A,@DPTR
002D FE                MOV     R6,A
002E 120000      R     LCALL   L?0791
0031 E0                MOVX    A,@DPTR
0032 6035              JZ      ?C0345
                                           ; SOURCE LINE # 2157
0034 120000      R     LCALL   L?0788
0037 E0                MOVX    A,@DPTR
0038 14                DEC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2158
003A 7400        R     MOV     A,#LOW curr_slide3_value
003C 2E                ADD     A,R6
003D 120000      R     LCALL   L?0792
0040 E0                MOVX    A,@DPTR
0041 FD                MOV     R5,A
0042 900000      R     MOV     DPTR,#_VarySlide3Value
0045 120000      R     LCALL   L?0796
0048 120000      E     LCALL   ?C?ICALL2
004B AE07              MOV     R6,AR7
004D 120000      R     LCALL   L?0788
0050 EE                MOV     A,R6
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2161
0052 7400        R     MOV     A,#LOW curr_slide3_value
0054 2F                ADD     A,R7
0055 120000      R     LCALL   L?0792
0058 E0                MOVX    A,@DPTR
0059 FD                MOV     R5,A
005A 7B01              MOV     R3,#01H
005C 120000      R     LCALL   _MenuDrawSlideNeedleImageXY
                                           ; SOURCE LINE # 2162
005F 120000      R     LCALL   L?0789
0062 E0                MOVX    A,@DPTR
0063 FD                MOV     R5,A
0064 7C00              MOV     R4,#00H
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 192 

0066 120000      R     LCALL   _MenuDrawSlideCurrValue
                                           ; SOURCE LINE # 2163
                                           ; SOURCE LINE # 2164
0069         ?C0345:
0069 22                RET     
             ; FUNCTION proc_slider3_left (END)

             ; FUNCTION proc_slider_left_tsc (BEGIN)
                                           ; SOURCE LINE # 2165
                                           ; SOURCE LINE # 2166
                                           ; SOURCE LINE # 2167
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0833
0006 700A              JNZ     ?C0666
0008 7400        E     MOV     A,#LOW menu_slider3_page
000A 6582              XRL     A,DPL
000C 7004              JNZ     ?C0666
000E 7400        E     MOV     A,#HIGH menu_slider3_page
0010 6583              XRL     A,DPH
0012         ?C0666:
0012 900000      R     MOV     DPTR,#curr_menu
0015 7016              JNZ     ?C0346
                                           ; SOURCE LINE # 2169
0017 120000      R     LCALL   L?0736
001A 120000      R     LCALL   L?0758
001D FF                MOV     R7,A
001E 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 2171
0021 120000      R     LCALL   L?0735
0024 120000      R     LCALL   L?0767
0027 120000      R     LCALL   L?0825
                                           ; SOURCE LINE # 2173
002A 020000      R     LJMP    proc_slider3_left
                                           ; SOURCE LINE # 2174
002D         ?C0346:
                                           ; SOURCE LINE # 2175
                                           ; SOURCE LINE # 2177
002D 120000      R     LCALL   L?0736
0030 120000      R     LCALL   L?0758
0033 FF                MOV     R7,A
0034 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 2179
0037 120000      R     LCALL   L?0735
003A 120000      R     LCALL   L?0887
                                           ; SOURCE LINE # 2181
003D 120000      R     LCALL   proc_slider_left
                                           ; SOURCE LINE # 2182
                                           ; SOURCE LINE # 2183
0040         ?C0348:
0040 22                RET     
             ; FUNCTION proc_slider_left_tsc (END)

             ; FUNCTION proc_slider_right (BEGIN)
                                           ; SOURCE LINE # 2186
                                           ; SOURCE LINE # 2187
                                           ; SOURCE LINE # 2201
0000 900000      R     MOV     DPTR,#curr_slide_value
0003 E0                MOVX    A,@DPTR
0004 C3                CLR     C
0005 9464              SUBB    A,#064H
0007 501C              JNC     ?C0350
                                           ; SOURCE LINE # 2202
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 193 

0009 E0                MOVX    A,@DPTR
000A 04                INC     A
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2203
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#_VarySlideValue
0011 120000      R     LCALL   L?0796
0014 120000      R     LCALL   L?0959
0017 FD                MOV     R5,A
                                           ; SOURCE LINE # 2206
0018 7B01              MOV     R3,#01H
001A E4                CLR     A
001B FF                MOV     R7,A
001C 120000      R     LCALL   _MenuDrawSlideNeedleImageXY
                                           ; SOURCE LINE # 2207
001F 120000      R     LCALL   L?0885
0022 120000      R     LCALL   _MenuDrawSlideCurrValue
                                           ; SOURCE LINE # 2208
                                           ; SOURCE LINE # 2209
0025         ?C0350:
0025 22                RET     
             ; FUNCTION proc_slider_right (END)

             ; FUNCTION proc_slider3_right (BEGIN)
                                           ; SOURCE LINE # 2210
                                           ; SOURCE LINE # 2211
                                           ; SOURCE LINE # 2214
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0758
0006 FF                MOV     R7,A
0007 B40507            CJNE    A,#05H,?C0351
000A E4                CLR     A
000B 900000      R     MOV     DPTR,#index
000E F0                MOVX    @DPTR,A
000F 8017              SJMP    ?C0352
0011         ?C0351:
                                           ; SOURCE LINE # 2215
0011 EF                MOV     A,R7
0012 B40708            CJNE    A,#07H,?C0353
0015 900000      R     MOV     DPTR,#index
0018 7401              MOV     A,#01H
001A F0                MOVX    @DPTR,A
001B 800B              SJMP    ?C0352
001D         ?C0353:
                                           ; SOURCE LINE # 2216
001D EF                MOV     A,R7
001E 6409              XRL     A,#09H
0020 7052              JNZ     ?C0357
0022 900000      R     MOV     DPTR,#index
0025 7402              MOV     A,#02H
0027 F0                MOVX    @DPTR,A
0028         ?C0352:
                                           ; SOURCE LINE # 2219
0028 900000      R     MOV     DPTR,#index
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D 120000      R     LCALL   L?0791
0030 E0                MOVX    A,@DPTR
0031 C3                CLR     C
0032 9464              SUBB    A,#064H
0034 503E              JNC     ?C0357
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 194 

                                           ; SOURCE LINE # 2220
0036 900000      R     MOV     DPTR,#index
0039 120000      R     LCALL   L?0790
003C E0                MOVX    A,@DPTR
003D 04                INC     A
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2221
003F 7400        R     MOV     A,#LOW curr_slide3_value
0041 2E                ADD     A,R6
0042 120000      R     LCALL   L?0792
0045 E0                MOVX    A,@DPTR
0046 FD                MOV     R5,A
0047 900000      R     MOV     DPTR,#_VarySlide3Value
004A 120000      R     LCALL   L?0796
004D 120000      E     LCALL   ?C?ICALL2
0050 AE07              MOV     R6,AR7
0052 900000      R     MOV     DPTR,#index
0055 120000      R     LCALL   L?0790
0058 EE                MOV     A,R6
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2224
005A 7400        R     MOV     A,#LOW curr_slide3_value
005C 2F                ADD     A,R7
005D 120000      R     LCALL   L?0792
0060 E0                MOVX    A,@DPTR
0061 FD                MOV     R5,A
0062 7B01              MOV     R3,#01H
0064 120000      R     LCALL   _MenuDrawSlideNeedleImageXY
                                           ; SOURCE LINE # 2225
0067 900000      R     MOV     DPTR,#index
006A 120000      R     LCALL   L?0790
006D E0                MOVX    A,@DPTR
006E FD                MOV     R5,A
006F 7C00              MOV     R4,#00H
0071 120000      R     LCALL   _MenuDrawSlideCurrValue
                                           ; SOURCE LINE # 2226
                                           ; SOURCE LINE # 2227
0074         ?C0357:
0074 22                RET     
             ; FUNCTION proc_slider3_right (END)

             ; FUNCTION proc_slider_right_tsc (BEGIN)
                                           ; SOURCE LINE # 2228
                                           ; SOURCE LINE # 2229
                                           ; SOURCE LINE # 2230
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0833
0006 700A              JNZ     ?C0667
0008 7400        E     MOV     A,#LOW menu_slider3_page
000A 6582              XRL     A,DPL
000C 7004              JNZ     ?C0667
000E 7400        E     MOV     A,#HIGH menu_slider3_page
0010 6583              XRL     A,DPH
0012         ?C0667:
0012 900000      R     MOV     DPTR,#curr_menu
0015 7016              JNZ     ?C0359
                                           ; SOURCE LINE # 2232
0017 120000      R     LCALL   L?0736
001A 120000      R     LCALL   L?0758
001D FF                MOV     R7,A
001E 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 2234
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 195 

0021 120000      R     LCALL   L?0735
0024 120000      R     LCALL   L?0767
0027 120000      R     LCALL   L?0825
                                           ; SOURCE LINE # 2236
002A 020000      R     LJMP    proc_slider3_right
                                           ; SOURCE LINE # 2237
002D         ?C0359:
                                           ; SOURCE LINE # 2238
                                           ; SOURCE LINE # 2240
002D 120000      R     LCALL   L?0736
0030 120000      R     LCALL   L?0758
0033 FF                MOV     R7,A
0034 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 2242
0037 120000      R     LCALL   L?0735
003A 120000      R     LCALL   L?0888
                                           ; SOURCE LINE # 2244
003D 120000      R     LCALL   proc_slider_right
                                           ; SOURCE LINE # 2245
                                           ; SOURCE LINE # 2246
0040         ?C0361:
0040 22                RET     
             ; FUNCTION proc_slider_right_tsc (END)

             ; FUNCTION MenuIsSlideMode (BEGIN)
                                           ; SOURCE LINE # 2269
                                           ; SOURCE LINE # 2270
                                           ; SOURCE LINE # 2271
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0833
0006 700A              JNZ     ?C0668
0008 7400        E     MOV     A,#LOW menu_slider3_page
000A 6582              XRL     A,DPL
000C 7004              JNZ     ?C0668
000E 7400        E     MOV     A,#HIGH menu_slider3_page
0010 6583              XRL     A,DPH
0012         ?C0668:
0012 7003              JNZ     ?C0362
                                           ; SOURCE LINE # 2272
0014 7F03              MOV     R7,#03H
0016 22                RET     
                                           ; SOURCE LINE # 2273
0017         ?C0362:
                                           ; SOURCE LINE # 2274
0017 120000      R     LCALL   L?0735
001A 120000      R     LCALL   L?0833
001D 700A              JNZ     ?C0669
001F 7400        E     MOV     A,#LOW menu_slider_page
0021 6582              XRL     A,DPL
0023 7004              JNZ     ?C0669
0025 7400        E     MOV     A,#HIGH menu_slider_page
0027 6583              XRL     A,DPH
0029         ?C0669:
0029 7003              JNZ     ?C0364
                                           ; SOURCE LINE # 2275
002B 7F01              MOV     R7,#01H
002D 22                RET     
                                           ; SOURCE LINE # 2276
002E         ?C0364:
                                           ; SOURCE LINE # 2278
002E 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 2279
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 196 

0030         ?C0363:
0030 22                RET     
             ; FUNCTION MenuIsSlideMode (END)

             ; FUNCTION proc_position_bg (BEGIN)
                                           ; SOURCE LINE # 2292
                                           ; SOURCE LINE # 2293
                                           ; SOURCE LINE # 2295
0000 120000      R     LCALL   proc_menu_bg
                                           ; SOURCE LINE # 2305
0003 E4                CLR     A
0004 FD                MOV     R5,A
0005 FF                MOV     R7,A
0006 120000      R     LCALL   _MenuFontOsdItemInit
                                           ; SOURCE LINE # 2306
0009 E4                CLR     A
000A FD                MOV     R5,A
000B 7F01              MOV     R7,#01H
000D 120000      R     LCALL   _MenuFontOsdItemInit
                                           ; SOURCE LINE # 2307
0010 120000      R     LCALL   proc_position_H_digit
                                           ; SOURCE LINE # 2308
0013 020000      R     LJMP    proc_position_V_digit
             ; FUNCTION proc_position_bg (END)

             ; FUNCTION proc_position_box (BEGIN)
                                           ; SOURCE LINE # 2310
                                           ; SOURCE LINE # 2311
                                           ; SOURCE LINE # 2313
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0824
0006 7401              MOV     A,#01H
0008 120000      R     LCALL   L?0935
                                           ; SOURCE LINE # 2315
000B E4                CLR     A
000C FD                MOV     R5,A
000D FF                MOV     R7,A
000E 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 2316
0011 7D04              MOV     R5,#04H
0013 E4                CLR     A
0014 FF                MOV     R7,A
0015 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 2317
0018 120000      R     LCALL   L?0735
001B 120000      R     LCALL   L?0758
001E FD                MOV     R5,A
001F E4                CLR     A
0020 FF                MOV     R7,A
0021 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_position_box (END)

             ; FUNCTION proc_position_ok (BEGIN)
                                           ; SOURCE LINE # 2319
                                           ; SOURCE LINE # 2320
                                           ; SOURCE LINE # 2324
0000 120000      E     LCALL   ChangeRGBPosH
                                           ; SOURCE LINE # 2325
0003 120000      E     LCALL   ChangeRGBPosV
                                           ; SOURCE LINE # 2331
0006 120000      E     LCALL   FOsdWinOffAll
                                           ; SOURCE LINE # 2333
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 197 

0009 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2335
000C 120000      R     LCALL   L?0735
000F 120000      R     LCALL   L?0744
0012 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_position_ok (END)

             ; FUNCTION proc_position_undo (BEGIN)
                                           ; SOURCE LINE # 2337
                                           ; SOURCE LINE # 2338
                                           ; SOURCE LINE # 2344
0000 120000      E     LCALL   PCRestoreH
                                           ; SOURCE LINE # 2345
0003 120000      E     LCALL   PCRestoreV
                                           ; SOURCE LINE # 2348
0006 120000      E     LCALL   FOsdWinOffAll
                                           ; SOURCE LINE # 2350
0009 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2352
000C 120000      R     LCALL   L?0735
000F 120000      R     LCALL   L?0744
0012 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_position_undo (END)

             ; FUNCTION _proc_position_tsc (BEGIN)
                                           ; SOURCE LINE # 2359
0000 900000      R     MOV     DPTR,#key
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2360
                                           ; SOURCE LINE # 2361
0005 120000      R     LCALL   L?0735
0008 120000      R     LCALL   L?0758
000B FF                MOV     R7,A
000C 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 2362
000F 120000      R     LCALL   L?0735
0012 120000      R     LCALL   L?0940
                                           ; SOURCE LINE # 2363
0015 120000      R     LCALL   L?0767
0018 6403              XRL     A,#03H
001A 6016              JZ      ?C0369
                                           ; SOURCE LINE # 2364
001C 7F04              MOV     R7,#04H
001E 120000      R     LCALL   _MenuTurnOffCurrImage
                                           ; SOURCE LINE # 2365
0021 120000      R     LCALL   L?0735
0024 900002            MOV     DPTR,#02H
0027 7403              MOV     A,#03H
                                           ; SOURCE LINE # 2366
0029 120000      R     LCALL   L?0757
002C FD                MOV     R5,A
002D E4                CLR     A
002E FF                MOV     R7,A
002F 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 2367
0032         ?C0369:
                                           ; SOURCE LINE # 2368
0032 900000      R     MOV     DPTR,#key
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 020000      R     LJMP    _MenuKeyInput_position_page
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 198 

             ; FUNCTION _proc_position_tsc (END)

             ; FUNCTION proc_position_left_tsc (BEGIN)
                                           ; SOURCE LINE # 2371
                                           ; SOURCE LINE # 2372
                                           ; SOURCE LINE # 2373
0000 7F04              MOV     R7,#04H
0002 020000      R     LJMP    _proc_position_tsc
             ; FUNCTION proc_position_left_tsc (END)

             ; FUNCTION proc_position_right_tsc (BEGIN)
                                           ; SOURCE LINE # 2375
                                           ; SOURCE LINE # 2376
                                           ; SOURCE LINE # 2377
0000 7F05              MOV     R7,#05H
0002 020000      R     LJMP    _proc_position_tsc
             ; FUNCTION proc_position_right_tsc (END)

             ; FUNCTION proc_position_up_tsc (BEGIN)
                                           ; SOURCE LINE # 2379
                                           ; SOURCE LINE # 2380
                                           ; SOURCE LINE # 2381
0000 7F02              MOV     R7,#02H
0002 020000      R     LJMP    _proc_position_tsc
             ; FUNCTION proc_position_up_tsc (END)

             ; FUNCTION proc_position_down_tsc (BEGIN)
                                           ; SOURCE LINE # 2383
                                           ; SOURCE LINE # 2384
                                           ; SOURCE LINE # 2385
0000 7F03              MOV     R7,#03H
0002 020000      R     LJMP    _proc_position_tsc
             ; FUNCTION proc_position_down_tsc (END)

             ; FUNCTION proc_position_H_digit (BEGIN)
                                           ; SOURCE LINE # 2388
                                           ; SOURCE LINE # 2389
                                           ; SOURCE LINE # 2392
0000 120000      E     LCALL   GetRGBPosH
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2395
0003 EF                MOV     A,R7
0004 FD                MOV     R5,A
0005 7C00              MOV     R4,#00H
0007 E4                CLR     A
0008 FF                MOV     R7,A
0009 020000      R     LJMP    _MenuDrawSlideCurrValue
             ; FUNCTION proc_position_H_digit (END)

             ; FUNCTION proc_position_V_digit (BEGIN)
                                           ; SOURCE LINE # 2402
                                           ; SOURCE LINE # 2403
                                           ; SOURCE LINE # 2406
0000 120000      E     LCALL   GetRGBPosV
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2408
0003 EF                MOV     A,R7
0004 FD                MOV     R5,A
0005 7C00              MOV     R4,#00H
0007 7F01              MOV     R7,#01H
0009 020000      R     LJMP    _MenuDrawSlideCurrValue
             ; FUNCTION proc_position_V_digit (END)
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 199 


             ; FUNCTION proc_autoadj_bg (BEGIN)
                                           ; SOURCE LINE # 2427
                                           ; SOURCE LINE # 2428
                                           ; SOURCE LINE # 2430
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_autoadj_bg (END)

             ; FUNCTION proc_autoadj_ok (BEGIN)
                                           ; SOURCE LINE # 2436
                                           ; SOURCE LINE # 2437
                                           ; SOURCE LINE # 2440
0000 120000      E     LCALL   PCResetCurrEEPROMMode
                                           ; SOURCE LINE # 2443
0003 120000      R     LCALL   L?0735
                                           ; SOURCE LINE # 2444
0006 120000      R     LCALL   L?0807
0009 120000      R     LCALL   L?1007
                                           ; SOURCE LINE # 2448
000C 120000      E     LCALL   CheckAndSetPC
                                           ; SOURCE LINE # 2452
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 2453
0014 E4                CLR     A
0015 FD                MOV     R5,A
0016 FF                MOV     R7,A
0017 120000      E     LCALL   _SpiOsdWinHWEnable
                                           ; SOURCE LINE # 2456
001A 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2458
001D 120000      R     LCALL   L?0735
0020 120000      R     LCALL   L?0744
0023 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_autoadj_ok (END)

             ; FUNCTION proc_autoadj_cancel (BEGIN)
                                           ; SOURCE LINE # 2460
                                           ; SOURCE LINE # 2461
                                           ; SOURCE LINE # 2462
0000 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2464
0003 120000      R     LCALL   L?0735
0006 120000      R     LCALL   L?0744
0009 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_autoadj_cancel (END)

             ; FUNCTION proc_autocolor_bg (BEGIN)
                                           ; SOURCE LINE # 2467
                                           ; SOURCE LINE # 2468
                                           ; SOURCE LINE # 2469
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_autocolor_bg (END)

             ; FUNCTION proc_autocolor_ok (BEGIN)
                                           ; SOURCE LINE # 2471
                                           ; SOURCE LINE # 2472
                                           ; SOURCE LINE # 2474
0000 120000      R     LCALL   L?0735
                                           ; SOURCE LINE # 2475
0003 120000      R     LCALL   L?0807
0006 120000      R     LCALL   L?1007
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 200 

                                           ; SOURCE LINE # 2479
0009 120000      E     LCALL   AutoTuneColor
                                           ; SOURCE LINE # 2483
000C 7F01              MOV     R7,#01H
000E 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 2484
0011 E4                CLR     A
0012 FD                MOV     R5,A
0013 FF                MOV     R7,A
0014 120000      E     LCALL   _SpiOsdWinHWEnable
                                           ; SOURCE LINE # 2488
0017 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2490
001A 120000      R     LCALL   L?0735
001D 120000      R     LCALL   L?0744
0020 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_autocolor_ok (END)

             ; FUNCTION proc_autocolor_cancel (BEGIN)
                                           ; SOURCE LINE # 2492
                                           ; SOURCE LINE # 2493
                                           ; SOURCE LINE # 2494
0000 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2496
0003 120000      R     LCALL   L?0735
0006 120000      R     LCALL   L?0744
0009 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_autocolor_cancel (END)

             ; FUNCTION proc_restore_bg (BEGIN)
                                           ; SOURCE LINE # 2505
                                           ; SOURCE LINE # 2506
                                           ; SOURCE LINE # 2507
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_restore_bg (END)

             ; FUNCTION proc_restore_ok (BEGIN)
                                           ; SOURCE LINE # 2510
                                           ; SOURCE LINE # 2511
                                           ; SOURCE LINE # 2515
0000 120000      E     LCALL   GetInputMain
0003 900000      R     MOV     DPTR,#MenuInputMain
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2518
0008 120000      E     LCALL   ClearBasicEE
                                           ; SOURCE LINE # 2524
000B 900000      R     MOV     DPTR,#MenuInputMain
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 120000      E     LCALL   _SaveInputEE
                                           ; SOURCE LINE # 2530
0013 900000      R     MOV     DPTR,#MenuInputMain
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 120000      E     LCALL   _SetImage
                                           ; SOURCE LINE # 2532
001B 120000      E     LCALL   GetAspectModeEE
001E 120000      E     LCALL   _SetAspectHW
                                           ; SOURCE LINE # 2533
0021 7F3B              MOV     R7,#03BH
0023 7E00              MOV     R6,#00H
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 201 

0025 120000      E     LCALL   _EE_Read
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2534
0028 EF                MOV     A,R7
0029 6007              JZ      ?C0384
                                           ; SOURCE LINE # 2536
002B 120000      R     LCALL   L?0859
002E E0                MOVX    A,@DPTR
002F 4480              ORL     A,#080H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2537
0032         ?C0384:
                                           ; SOURCE LINE # 2538
0032 7F3A              MOV     R7,#03AH
0034 7E00              MOV     R6,#00H
0036 120000      E     LCALL   _EE_Read
0039 120000      E     LCALL   _OsdSetTime
                                           ; SOURCE LINE # 2539
003C 7F39              MOV     R7,#039H
003E 7E00              MOV     R6,#00H
0040 120000      E     LCALL   _EE_Read
0043 120000      E     LCALL   _OsdSetTransRate
                                           ; SOURCE LINE # 2540
0046 7F3C              MOV     R7,#03CH
0048 7E00              MOV     R6,#00H
004A 120000      E     LCALL   _EE_Read
004D 120000      E     LCALL   _BackLightSetRate
                                           ; SOURCE LINE # 2542
0050 120000      E     LCALL   ReadCalibDataFromEE
                                           ; SOURCE LINE # 2545
0053 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2547
0056 120000      R     LCALL   L?0735
0059 120000      R     LCALL   L?0744
005C 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_restore_ok (END)

             ; FUNCTION proc_restore_undo (BEGIN)
                                           ; SOURCE LINE # 2549
                                           ; SOURCE LINE # 2550
                                           ; SOURCE LINE # 2551
0000 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2553
0003 120000      R     LCALL   L?0735
0006 120000      R     LCALL   L?0744
0009 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_restore_undo (END)

             ; FUNCTION proc_info_bg (BEGIN)
                                           ; SOURCE LINE # 2563
                                           ; SOURCE LINE # 2564
                                           ; SOURCE LINE # 2566
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_info_bg (END)

             ; FUNCTION proc_info_ok (BEGIN)
                                           ; SOURCE LINE # 2576
                                           ; SOURCE LINE # 2577
                                           ; SOURCE LINE # 2579
0000 120000      E     LCALL   FOsdWinOffAll
                                           ; SOURCE LINE # 2581
0003 120000      R     LCALL   pop_menu_stack_level
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 202 

                                           ; SOURCE LINE # 2583
0006 120000      R     LCALL   L?0735
0009 120000      R     LCALL   L?0744
000C 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_info_ok (END)

             ; FUNCTION proc_flip_bg (BEGIN)
                                           ; SOURCE LINE # 2593
                                           ; SOURCE LINE # 2594
                                           ; SOURCE LINE # 2595
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_flip_bg (END)

             ; FUNCTION proc_flip_ok (BEGIN)
                                           ; SOURCE LINE # 2597
                                           ; SOURCE LINE # 2598
                                           ; SOURCE LINE # 2602
0000 120000      R     LCALL   L?0859
0003 E0                MOVX    A,@DPTR
0004 900000      R     MOV     DPTR,#value
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2603
0008 30E70F            JNB     ACC.7,?C0390
                                           ; SOURCE LINE # 2604
000B E0                MOVX    A,@DPTR
000C 547F              ANL     A,#07FH
000E 120000      R     LCALL   L?0858
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2605
0013 E4                CLR     A
0014 FD                MOV     R5,A
0015 7F3B              MOV     R7,#03BH
0017 FE                MOV     R6,A
                                           ; SOURCE LINE # 2606
0018 8011              SJMP    ?C0720
001A         ?C0390:
                                           ; SOURCE LINE # 2607
                                           ; SOURCE LINE # 2608
001A 900000      R     MOV     DPTR,#value
001D E0                MOVX    A,@DPTR
001E 4480              ORL     A,#080H
0020 120000      R     LCALL   L?0858
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2609
0025 7D01              MOV     R5,#01H
0027 7F3B              MOV     R7,#03BH
0029 7E00              MOV     R6,#00H
002B         ?C0720:
002B 120000      E     LCALL   _EE_Write
                                           ; SOURCE LINE # 2610
002E         ?C0391:
                                           ; SOURCE LINE # 2611
002E 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2613
0031 120000      R     LCALL   L?0735
0034 120000      R     LCALL   L?0744
0037 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_flip_ok (END)

             ; FUNCTION proc_flip_undo (BEGIN)
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 203 

                                           ; SOURCE LINE # 2615
                                           ; SOURCE LINE # 2616
                                           ; SOURCE LINE # 2617
0000 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2619
0003 120000      R     LCALL   L?0735
0006 120000      R     LCALL   L?0744
0009 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_flip_undo (END)

             ; FUNCTION proc_disp_resolution_bg (BEGIN)
                                           ; SOURCE LINE # 2623
                                           ; SOURCE LINE # 2624
                                           ; SOURCE LINE # 2625
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_disp_resolution_bg (END)

             ; FUNCTION proc_disp_resolution_ok (BEGIN)
                                           ; SOURCE LINE # 2627
                                           ; SOURCE LINE # 2628
                                           ; SOURCE LINE # 2630
0000 120000      E     LCALL   FOsdWinOffAll
                                           ; SOURCE LINE # 2632
0003 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2634
0006 120000      R     LCALL   L?0735
0009 120000      R     LCALL   L?0744
000C 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_disp_resolution_ok (END)

             ; FUNCTION proc_dvi_mode_bg (BEGIN)
                                           ; SOURCE LINE # 2642
                                           ; SOURCE LINE # 2643
                                           ; SOURCE LINE # 2644
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_dvi_mode_bg (END)

             ; FUNCTION proc_dvi_mode_24bit (BEGIN)
                                           ; SOURCE LINE # 2646
                                           ; SOURCE LINE # 2647
                                           ; SOURCE LINE # 2648
0000 120000      R     LCALL   L?0735
0003 7403              MOV     A,#03H
0005 120000      R     LCALL   L?0935
                                           ; SOURCE LINE # 2649
                                           ; SOURCE LINE # 2650
0008 120000      R     LCALL   L?0741
000B 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_dvi_mode_24bit (END)

             ; FUNCTION proc_dvi_mode_16bit (BEGIN)
                                           ; SOURCE LINE # 2652
                                           ; SOURCE LINE # 2653
                                           ; SOURCE LINE # 2654
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0896
                                           ; SOURCE LINE # 2655
                                           ; SOURCE LINE # 2656
0006 120000      R     LCALL   L?0741
0009 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_dvi_mode_16bit (END)

C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 204 

             ; FUNCTION proc_dvi_mode_ok (BEGIN)
                                           ; SOURCE LINE # 2658
                                           ; SOURCE LINE # 2659
                                           ; SOURCE LINE # 2660
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0767
0006 B40304            CJNE    A,#03H,?C0399
0009 7F00              MOV     R7,#00H
000B 8002              SJMP    ?C0400
000D         ?C0399:
000D 7F01              MOV     R7,#01H
000F         ?C0400:
000F 120000      E     LCALL   _SaveDviModeEE
                                           ; SOURCE LINE # 2661
0012 020000      R     LJMP    proc_return_icon
             ; FUNCTION proc_dvi_mode_ok (END)

             ; FUNCTION proc_dvi_mode_cancel (BEGIN)
                                           ; SOURCE LINE # 2663
                                           ; SOURCE LINE # 2664
                                           ; SOURCE LINE # 2665
0000 020000      R     LJMP    proc_return_icon
             ; FUNCTION proc_dvi_mode_cancel (END)

             ; FUNCTION proc_hdmi_mode_bg (BEGIN)
                                           ; SOURCE LINE # 2668
                                           ; SOURCE LINE # 2669
                                           ; SOURCE LINE # 2670
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_hdmi_mode_bg (END)

             ; FUNCTION proc_hdmi_mode_pc (BEGIN)
                                           ; SOURCE LINE # 2672
                                           ; SOURCE LINE # 2673
                                           ; SOURCE LINE # 2674
0000 120000      R     LCALL   L?0735
0003 7403              MOV     A,#03H
                                           ; SOURCE LINE # 2675
0005 120000      R     LCALL   L?0823
                                           ; SOURCE LINE # 2676
0008 7F05              MOV     R7,#05H
000A 120000      E     LCALL   _SetImage
                                           ; SOURCE LINE # 2677
000D 120000      R     LCALL   L?0735
0010 120000      R     LCALL   L?0744
0013 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_hdmi_mode_pc (END)

             ; FUNCTION proc_hdmi_mode_tv (BEGIN)
                                           ; SOURCE LINE # 2679
                                           ; SOURCE LINE # 2680
                                           ; SOURCE LINE # 2681
0000 120000      R     LCALL   L?0735
0003 7404              MOV     A,#04H
                                           ; SOURCE LINE # 2682
0005 120000      R     LCALL   L?0823
                                           ; SOURCE LINE # 2683
0008 7F06              MOV     R7,#06H
000A 120000      E     LCALL   _SetImage
                                           ; SOURCE LINE # 2684
000D 120000      R     LCALL   L?0735
0010 120000      R     LCALL   L?0744
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 205 

0013 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_hdmi_mode_tv (END)

             ; FUNCTION proc_hdmi_mode_ok (BEGIN)
                                           ; SOURCE LINE # 2686
                                           ; SOURCE LINE # 2687
                                           ; SOURCE LINE # 2690
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0767
0006 B40304            CJNE    A,#03H,?C0406
0009 7F00              MOV     R7,#00H
000B 8002              SJMP    ?C0407
000D         ?C0406:
000D 7F01              MOV     R7,#01H
000F         ?C0407:
000F 900000      R     MOV     DPTR,#hdmi_mode
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2691
0014 120000      E     LCALL   GetHdmiModeEE
0017 AE07              MOV     R6,AR7
0019 900000      R     MOV     DPTR,#hdmi_mode
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 6E                XRL     A,R6
001F 6003              JZ      ?C0408
                                           ; SOURCE LINE # 2692
0021 120000      E     LCALL   _SaveHdmiModeEE
0024         ?C0408:
                                           ; SOURCE LINE # 2693
0024 120000      R     LCALL   L?0735
0027 120000      R     LCALL   L?0767
002A FF                MOV     R7,A
002B 900000      R     MOV     DPTR,#cancel_recover_value
002E E0                MOVX    A,@DPTR
002F 6F                XRL     A,R7
0030 601F              JZ      ?C0409
                                           ; SOURCE LINE # 2694
0032 EF                MOV     A,R7
0033 900000      R     MOV     DPTR,#MenuInputMain
0036 B40305            CJNE    A,#03H,?C0410
                                           ; SOURCE LINE # 2695
0039 7405              MOV     A,#05H
003B F0                MOVX    @DPTR,A
003C 8003              SJMP    ?C0411
003E         ?C0410:
                                           ; SOURCE LINE # 2697
003E 7406              MOV     A,#06H
0040 F0                MOVX    @DPTR,A
0041         ?C0411:
                                           ; SOURCE LINE # 2698
0041 900000      R     MOV     DPTR,#MenuInputMain
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 120000      E     LCALL   _SetInputMain
                                           ; SOURCE LINE # 2699
0049 900000      R     MOV     DPTR,#MenuInputMain
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 120000      E     LCALL   _SaveInputEE
                                           ; SOURCE LINE # 2700
0051         ?C0409:
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 206 

                                           ; SOURCE LINE # 2701
0051 020000      R     LJMP    proc_return_icon
             ; FUNCTION proc_hdmi_mode_ok (END)

             ; FUNCTION proc_hdmi_mode_cancel (BEGIN)
                                           ; SOURCE LINE # 2703
                                           ; SOURCE LINE # 2704
                                           ; SOURCE LINE # 2706
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0809
0006 900000      R     MOV     DPTR,#cancel_recover_value
0009 120000      R     LCALL   L?0783
000C 120000      R     LCALL   L?0745
000F 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 2708
0012 020000      R     LJMP    proc_return_icon
             ; FUNCTION proc_hdmi_mode_cancel (END)

             ; FUNCTION proc_aspect_bg (BEGIN)
                                           ; SOURCE LINE # 2718
                                           ; SOURCE LINE # 2719
                                           ; SOURCE LINE # 2720
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_aspect_bg (END)

             ; FUNCTION proc_aspect_normal (BEGIN)
                                           ; SOURCE LINE # 2722
                                           ; SOURCE LINE # 2723
                                           ; SOURCE LINE # 2724
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0824
                                           ; SOURCE LINE # 2725
0006 900002            MOV     DPTR,#02H
0009 7403              MOV     A,#03H
                                           ; SOURCE LINE # 2728
000B 120000      R     LCALL   L?0757
000E FD                MOV     R5,A
000F E4                CLR     A
0010 FF                MOV     R7,A
0011 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 2729
0014 120000      R     LCALL   L?0735
0017 120000      R     LCALL   L?0765
001A 2F                ADD     A,R7
001B FD                MOV     R5,A
001C E4                CLR     A
001D FF                MOV     R7,A
001E 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 2731
0021 120000      R     LCALL   L?0735
0024 900003            MOV     DPTR,#03H
0027 120000      R     LCALL   L?0766
002A C3                CLR     C
002B 9F                SUBB    A,R7
002C FF                MOV     R7,A
002D 020000      E     LJMP    _SetAspectHW
             ; FUNCTION proc_aspect_normal (END)

             ; FUNCTION proc_aspect_zoom (BEGIN)
                                           ; SOURCE LINE # 2733
                                           ; SOURCE LINE # 2734
                                           ; SOURCE LINE # 2735
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 207 

0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0824
                                           ; SOURCE LINE # 2736
0006 900002            MOV     DPTR,#02H
0009 7404              MOV     A,#04H
                                           ; SOURCE LINE # 2739
000B 120000      R     LCALL   L?0757
000E FD                MOV     R5,A
000F E4                CLR     A
0010 FF                MOV     R7,A
0011 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 2740
0014 120000      R     LCALL   L?0735
0017 120000      R     LCALL   L?0765
001A 2F                ADD     A,R7
001B FD                MOV     R5,A
001C E4                CLR     A
001D FF                MOV     R7,A
001E 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 2742
0021 120000      R     LCALL   L?0735
0024 900003            MOV     DPTR,#03H
0027 120000      R     LCALL   L?0766
002A C3                CLR     C
002B 9F                SUBB    A,R7
002C FF                MOV     R7,A
002D 020000      E     LJMP    _SetAspectHW
             ; FUNCTION proc_aspect_zoom (END)

             ; FUNCTION proc_aspect_full (BEGIN)
                                           ; SOURCE LINE # 2744
                                           ; SOURCE LINE # 2745
                                           ; SOURCE LINE # 2746
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0824
                                           ; SOURCE LINE # 2747
0006 900002            MOV     DPTR,#02H
0009 7405              MOV     A,#05H
                                           ; SOURCE LINE # 2750
000B 120000      R     LCALL   L?0757
000E FD                MOV     R5,A
000F E4                CLR     A
0010 FF                MOV     R7,A
0011 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 2751
0014 120000      R     LCALL   L?0735
0017 120000      R     LCALL   L?0765
001A 2F                ADD     A,R7
001B FD                MOV     R5,A
001C E4                CLR     A
001D FF                MOV     R7,A
001E 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 2753
0021 120000      R     LCALL   L?0735
0024 900003            MOV     DPTR,#03H
0027 120000      R     LCALL   L?0766
002A C3                CLR     C
002B 9F                SUBB    A,R7
002C FF                MOV     R7,A
002D 020000      E     LJMP    _SetAspectHW
             ; FUNCTION proc_aspect_full (END)

C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 208 

             ; FUNCTION proc_aspect_pano (BEGIN)
                                           ; SOURCE LINE # 2755
                                           ; SOURCE LINE # 2756
                                           ; SOURCE LINE # 2757
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0824
                                           ; SOURCE LINE # 2758
0006 900002            MOV     DPTR,#02H
0009 7406              MOV     A,#06H
                                           ; SOURCE LINE # 2761
000B 120000      R     LCALL   L?0757
000E FD                MOV     R5,A
000F E4                CLR     A
0010 FF                MOV     R7,A
0011 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 2762
0014 120000      R     LCALL   L?0735
0017 120000      R     LCALL   L?0765
001A 2F                ADD     A,R7
001B FD                MOV     R5,A
001C E4                CLR     A
001D FF                MOV     R7,A
001E 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 2764
0021 120000      R     LCALL   L?0735
0024 900003            MOV     DPTR,#03H
0027 120000      R     LCALL   L?0766
002A C3                CLR     C
002B 9F                SUBB    A,R7
002C FF                MOV     R7,A
002D 020000      E     LJMP    _SetAspectHW
             ; FUNCTION proc_aspect_pano (END)

             ; FUNCTION proc_aspect_ok (BEGIN)
                                           ; SOURCE LINE # 2766
                                           ; SOURCE LINE # 2767
                                           ; SOURCE LINE # 2768
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0767
0006 FF                MOV     R7,A
0007 900000      R     MOV     DPTR,#cancel_recover_value
000A E0                MOVX    A,@DPTR
000B 6F                XRL     A,R7
000C 6066              JZ      ?C0419
                                           ; SOURCE LINE # 2770
000E 120000      R     LCALL   L?0806
0011 FE                MOV     R6,A
0012 C3                CLR     C
0013 EF                MOV     A,R7
0014 9E                SUBB    A,R6
0015 FF                MOV     R7,A
0016 120000      E     LCALL   _SaveAspectModeEE
                                           ; SOURCE LINE # 2772
0019 120000      E     LCALL   GetInputMain
001C 900000      R     MOV     DPTR,#MenuInputMain
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2775
0021 7FFF              MOV     R7,#0FFH
0023 120000      E     LCALL   _SetInputMain
                                           ; SOURCE LINE # 2776
0026 E4                CLR     A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 209 

0027 FF                MOV     R7,A
0028 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 2778
002B 900000      R     MOV     DPTR,#MenuInputMain
002E E0                MOVX    A,@DPTR
002F B40800            CJNE    A,#08H,?C0670
0032         ?C0670:
0032 503B              JNC     ?C0420
0034 900000      R     MOV     DPTR,#?C0671
0037 F8                MOV     R0,A
0038 28                ADD     A,R0
0039 28                ADD     A,R0
003A 73                JMP     @A+DPTR
003B         ?C0671:
003B 020000      R     LJMP    ?C0421
003E 020000      R     LJMP    ?C0422
0041 020000      R     LJMP    ?C0423
0044 020000      R     LJMP    ?C0424
0047 020000      R     LJMP    ?C0420
004A 020000      R     LJMP    ?C0426
004D 020000      R     LJMP    ?C0426
0050 020000      R     LJMP    ?C0427
                                           ; SOURCE LINE # 2779
0053         ?C0421:
0053 120000      E     LCALL   ChangeCVBS
0056 8017              SJMP    ?C0420
                                           ; SOURCE LINE # 2780
0058         ?C0422:
0058 120000      E     LCALL   ChangeSVIDEO
005B 8012              SJMP    ?C0420
                                           ; SOURCE LINE # 2782
005D         ?C0423:
005D 120000      E     LCALL   ChangeCOMPONENT
0060 800D              SJMP    ?C0420
                                           ; SOURCE LINE # 2785
0062         ?C0424:
0062 120000      E     LCALL   ChangePC
0065 8008              SJMP    ?C0420
                                           ; SOURCE LINE # 2790
                                           ; SOURCE LINE # 2791
0067         ?C0426:
0067 120000      E     LCALL   ChangeHDMI
006A 8003              SJMP    ?C0420
                                           ; SOURCE LINE # 2793
006C         ?C0427:
006C 120000      E     LCALL   ChangeBT656
                                           ; SOURCE LINE # 2795
006F         ?C0420:
                                           ; SOURCE LINE # 2799
006F 7F01              MOV     R7,#01H
0071 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 2800
0074         ?C0419:
                                           ; SOURCE LINE # 2801
0074 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2803
0077 120000      R     LCALL   L?0735
007A 120000      R     LCALL   L?0744
007D 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_aspect_ok (END)

             ; FUNCTION proc_aspect_cancel (BEGIN)
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 210 

                                           ; SOURCE LINE # 2805
                                           ; SOURCE LINE # 2806
                                           ; SOURCE LINE # 2808
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0809
0006 900000      R     MOV     DPTR,#cancel_recover_value
0009 120000      R     LCALL   L?0783
000C 120000      R     LCALL   L?0745
000F 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 2810
0012 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 2812
0015 120000      R     LCALL   L?0735
0018 120000      R     LCALL   L?0744
001B 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_aspect_cancel (END)

             ; FUNCTION proc_menu_list_return (BEGIN)
                                           ; SOURCE LINE # 2818
                                           ; SOURCE LINE # 2819
                                           ; SOURCE LINE # 2820
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0827
0006 7A00        E     MOV     R2,#HIGH menu_slider_page
0008 7900        E     MOV     R1,#LOW menu_slider_page
000A 6401              XRL     A,#01H
000C 700A              JNZ     ?C0672
000E 7400        E     MOV     A,#LOW menu_slider_page
0010 6582              XRL     A,DPL
0012 7004              JNZ     ?C0672
0014 7400        E     MOV     A,#HIGH menu_slider_page
0016 6583              XRL     A,DPH
0018         ?C0672:
0018 6017              JZ      ?C0431
001A 120000      R     LCALL   L?0735
001D 120000      R     LCALL   L?0827
0020 120000      R     LCALL   L?0971
0023 700A              JNZ     ?C0673
0025 7400        E     MOV     A,#LOW menu_slider3_page
0027 6582              XRL     A,DPL
0029 7004              JNZ     ?C0673
002B 7400        E     MOV     A,#HIGH menu_slider3_page
002D 6583              XRL     A,DPH
002F         ?C0673:
002F 7003              JNZ     ?C0430
0031         ?C0431:
                                           ; SOURCE LINE # 2821
0031 020000      R     LJMP    proc_slider_undo
                                           ; SOURCE LINE # 2822
0034         ?C0430:
                                           ; SOURCE LINE # 2823
0034 120000      R     LCALL   L?0735
0037 120000      R     LCALL   L?0827
003A 7A00        E     MOV     R2,#HIGH menu_position_page
003C 7900        E     MOV     R1,#LOW menu_position_page
003E 6401              XRL     A,#01H
0040 700A              JNZ     ?C0674
0042 7400        E     MOV     A,#LOW menu_position_page
0044 6582              XRL     A,DPL
0046 7004              JNZ     ?C0674
0048 7400        E     MOV     A,#HIGH menu_position_page
004A 6583              XRL     A,DPH
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 211 

004C         ?C0674:
004C 7003              JNZ     ?C0433
                                           ; SOURCE LINE # 2824
004E 020000      R     LJMP    proc_position_undo
                                           ; SOURCE LINE # 2825
0051         ?C0433:
                                           ; SOURCE LINE # 2826
0051 120000      R     LCALL   L?0735
0054 120000      R     LCALL   L?0827
0057 7A00        E     MOV     R2,#HIGH menu_autoadj_page
0059 7900        E     MOV     R1,#LOW menu_autoadj_page
005B 6401              XRL     A,#01H
005D 700A              JNZ     ?C0675
005F 7400        E     MOV     A,#LOW menu_autoadj_page
0061 6582              XRL     A,DPL
0063 7004              JNZ     ?C0675
0065 7400        E     MOV     A,#HIGH menu_autoadj_page
0067 6583              XRL     A,DPH
0069         ?C0675:
0069 7003              JNZ     ?C0435
                                           ; SOURCE LINE # 2827
006B 020000      R     LJMP    proc_autoadj_cancel
                                           ; SOURCE LINE # 2828
006E         ?C0435:
                                           ; SOURCE LINE # 2829
006E 120000      R     LCALL   L?0735
0071 120000      R     LCALL   L?0827
0074 7A00        E     MOV     R2,#HIGH menu_autocolor_page
0076 7900        E     MOV     R1,#LOW menu_autocolor_page
0078 6401              XRL     A,#01H
007A 700A              JNZ     ?C0676
007C 7400        E     MOV     A,#LOW menu_autocolor_page
007E 6582              XRL     A,DPL
0080 7004              JNZ     ?C0676
0082 7400        E     MOV     A,#HIGH menu_autocolor_page
0084 6583              XRL     A,DPH
0086         ?C0676:
0086 7003              JNZ     ?C0437
                                           ; SOURCE LINE # 2830
0088 020000      R     LJMP    proc_autocolor_cancel
                                           ; SOURCE LINE # 2831
008B         ?C0437:
                                           ; SOURCE LINE # 2832
008B 120000      R     LCALL   L?0735
008E 120000      R     LCALL   L?0827
0091 7A00        E     MOV     R2,#HIGH menu_sys_info_page
0093 7900        E     MOV     R1,#LOW menu_sys_info_page
0095 6401              XRL     A,#01H
0097 700A              JNZ     ?C0677
0099 7400        E     MOV     A,#LOW menu_sys_info_page
009B 6582              XRL     A,DPL
009D 7004              JNZ     ?C0677
009F 7400        E     MOV     A,#HIGH menu_sys_info_page
00A1 6583              XRL     A,DPH
00A3         ?C0677:
00A3 7003              JNZ     ?C0439
                                           ; SOURCE LINE # 2833
00A5 020000      R     LJMP    proc_info_ok
                                           ; SOURCE LINE # 2834
00A8         ?C0439:
                                           ; SOURCE LINE # 2835
00A8 120000      R     LCALL   L?0735
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 212 

00AB 120000      R     LCALL   L?0827
00AE 7A00        E     MOV     R2,#HIGH menu_disp_resolution_page
00B0 7900        E     MOV     R1,#LOW menu_disp_resolution_page
00B2 6401              XRL     A,#01H
00B4 700A              JNZ     ?C0678
00B6 7400        E     MOV     A,#LOW menu_disp_resolution_page
00B8 6582              XRL     A,DPL
00BA 7004              JNZ     ?C0678
00BC 7400        E     MOV     A,#HIGH menu_disp_resolution_page
00BE 6583              XRL     A,DPH
00C0         ?C0678:
00C0 7003              JNZ     ?C0441
                                           ; SOURCE LINE # 2836
00C2 020000      R     LJMP    proc_disp_resolution_ok
                                           ; SOURCE LINE # 2837
00C5         ?C0441:
                                           ; SOURCE LINE # 2838
                                           ; SOURCE LINE # 2839
00C5 120000      R     LCALL   proc_return_icon
                                           ; SOURCE LINE # 2840
                                           ; SOURCE LINE # 2841
00C8         ?C0443:
00C8 22                RET     
             ; FUNCTION proc_menu_list_return (END)

             ; FUNCTION proc_yuv_list_bg (BEGIN)
                                           ; SOURCE LINE # 2854
                                           ; SOURCE LINE # 2855
                                           ; SOURCE LINE # 2856
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_yuv_list_bg (END)

             ; FUNCTION proc_yuv_list_bright (BEGIN)
                                           ; SOURCE LINE # 2859
                                           ; SOURCE LINE # 2860
                                           ; SOURCE LINE # 2861
                                           ; SOURCE LINE # 2863
0000 120000      R     LCALL   L?0747
                                           ; SOURCE LINE # 2864
                                           ; SOURCE LINE # 2865
                                           ; SOURCE LINE # 2866
0003 120000      R     LCALL   L?0772
0006 7400        E     MOV     A,#HIGH ImgAdjGetBrightnessY
0008 F0                MOVX    @DPTR,A
0009 7400        E     MOV     A,#LOW ImgAdjGetBrightnessY
000B 120000      R     LCALL   L?0778
000E 7400        E     MOV     A,#HIGH _ImgAdjSetBrightnessY
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 7400        E     MOV     A,#LOW _ImgAdjSetBrightnessY
0014 F0                MOVX    @DPTR,A
0015 F9                MOV     R1,A
0016 A3                INC     DPTR
0017 74FF              MOV     A,#0FFH
0019 F0                MOVX    @DPTR,A
001A 7400        E     MOV     A,#HIGH _ImgAdjSetBrightnessY
001C 120000      R     LCALL   L?0776
001F 7400        E     MOV     A,#HIGH ImgAdjChangeBrightnessY
0021 F0                MOVX    @DPTR,A
0022 7400        E     MOV     A,#LOW ImgAdjChangeBrightnessY
0024 120000      R     LCALL   L?0960
0027 120000      R     LCALL   _InitSlideCtrl
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 213 

                                           ; SOURCE LINE # 2872
002A 120000      R     LCALL   L?0735
002D 120000      R     LCALL   L?0744
0030 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_yuv_list_bright (END)

             ; FUNCTION proc_yuv_list_contrast (BEGIN)
                                           ; SOURCE LINE # 2874
                                           ; SOURCE LINE # 2875
                                           ; SOURCE LINE # 2876
                                           ; SOURCE LINE # 2878
0000 120000      R     LCALL   L?0747
                                           ; SOURCE LINE # 2879
                                           ; SOURCE LINE # 2880
                                           ; SOURCE LINE # 2881
0003 120000      R     LCALL   L?0772
0006 7400        E     MOV     A,#HIGH ImgAdjGetContrastY
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A 7400        E     MOV     A,#LOW ImgAdjGetContrastY
000C 120000      R     LCALL   L?0779
000F 7400        E     MOV     A,#HIGH _ImgAdjSetContrastY
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 7400        E     MOV     A,#LOW _ImgAdjSetContrastY
0015 F0                MOVX    @DPTR,A
0016 F9                MOV     R1,A
0017 A3                INC     DPTR
0018 74FF              MOV     A,#0FFH
001A F0                MOVX    @DPTR,A
001B 7400        E     MOV     A,#HIGH _ImgAdjSetContrastY
001D 120000      R     LCALL   L?0776
0020 7400        E     MOV     A,#HIGH ImgAdjChangeContrastY
0022 F0                MOVX    @DPTR,A
0023 7400        E     MOV     A,#LOW ImgAdjChangeContrastY
0025 120000      R     LCALL   L?0962
0028 120000      R     LCALL   _InitSlideCtrl
                                           ; SOURCE LINE # 2887
002B 120000      R     LCALL   L?0735
002E 120000      R     LCALL   L?0744
0031 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_yuv_list_contrast (END)

             ; FUNCTION proc_yuv_list_hue (BEGIN)
                                           ; SOURCE LINE # 2889
                                           ; SOURCE LINE # 2890
                                           ; SOURCE LINE # 2891
                                           ; SOURCE LINE # 2893
0000 120000      R     LCALL   L?0748
                                           ; SOURCE LINE # 2894
0003 900001            MOV     DPTR,#01H
                                           ; SOURCE LINE # 2895
0006 120000      R     LCALL   L?0774
0009 7400        E     MOV     A,#HIGH ImgAdjGetHUE
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D 7400        E     MOV     A,#LOW ImgAdjGetHUE
000F 120000      R     LCALL   L?0779
0012 7400        E     MOV     A,#HIGH _ImgAdjVaryHUE
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 7400        E     MOV     A,#LOW _ImgAdjVaryHUE
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 214 

0018 120000      R     LCALL   L?0779
001B 7400        E     MOV     A,#HIGH _ImgAdjSetHUE
001D F0                MOVX    @DPTR,A
001E A3                INC     DPTR
001F 7400        E     MOV     A,#LOW _ImgAdjSetHUE
0021 120000      R     LCALL   L?0779
0024 7400        E     MOV     A,#HIGH ImgAdjChangeHUE
0026 F0                MOVX    @DPTR,A
0027 A3                INC     DPTR
0028 7400        E     MOV     A,#LOW ImgAdjChangeHUE
002A F0                MOVX    @DPTR,A
002B 7BFF              MOV     R3,#0FFH
002D 7A00        E     MOV     R2,#HIGH img_slide_hue
002F 7900        E     MOV     R1,#LOW img_slide_hue
0031 120000      R     LCALL   _InitSlideCtrl
                                           ; SOURCE LINE # 2900
0034 120000      R     LCALL   L?0735
0037 120000      R     LCALL   L?0744
003A 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_yuv_list_hue (END)

             ; FUNCTION proc_yuv_list_saturate (BEGIN)
                                           ; SOURCE LINE # 2903
                                           ; SOURCE LINE # 2904
                                           ; SOURCE LINE # 2905
                                           ; SOURCE LINE # 2907
0000 120000      R     LCALL   L?0748
                                           ; SOURCE LINE # 2908
0003 900001            MOV     DPTR,#01H
                                           ; SOURCE LINE # 2909
0006 120000      R     LCALL   L?0774
0009 7400        E     MOV     A,#HIGH ImgAdjGetSaturation
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D 7400        E     MOV     A,#LOW ImgAdjGetSaturation
000F 120000      R     LCALL   L?0779
0012 7400        E     MOV     A,#HIGH _ImgAdjSetSaturation
0014 F0                MOVX    @DPTR,A
0015 7400        E     MOV     A,#LOW _ImgAdjSetSaturation
0017 120000      R     LCALL   L?0853
001A 7400        E     MOV     A,#HIGH _ImgAdjSetSaturation
001C 120000      R     LCALL   L?0777
001F 7400        E     MOV     A,#HIGH ImgAdjChangeSaturation
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 7400        E     MOV     A,#LOW ImgAdjChangeSaturation
0025 F0                MOVX    @DPTR,A
0026 7BFF              MOV     R3,#0FFH
0028 7A00        E     MOV     R2,#HIGH img_slide_saturate
002A 7900        E     MOV     R1,#LOW img_slide_saturate
002C 120000      R     LCALL   _InitSlideCtrl
                                           ; SOURCE LINE # 2915
002F 120000      R     LCALL   L?0735
0032 120000      R     LCALL   L?0744
0035 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_yuv_list_saturate (END)

             ; FUNCTION proc_yuv_list_sharp (BEGIN)
                                           ; SOURCE LINE # 2917
                                           ; SOURCE LINE # 2918
                                           ; SOURCE LINE # 2919
                                           ; SOURCE LINE # 2921
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 215 

0000 120000      R     LCALL   L?0748
                                           ; SOURCE LINE # 2922
0003 900001            MOV     DPTR,#01H
                                           ; SOURCE LINE # 2923
0006 120000      R     LCALL   L?0774
0009 7400        E     MOV     A,#HIGH ImgAdjGetSharpness
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D 7400        E     MOV     A,#LOW ImgAdjGetSharpness
000F 120000      R     LCALL   L?0779
0012 7400        E     MOV     A,#HIGH _ImgAdjSetSharpness
0014 F0                MOVX    @DPTR,A
0015 7400        E     MOV     A,#LOW _ImgAdjSetSharpness
0017 120000      R     LCALL   L?0853
001A 7400        E     MOV     A,#HIGH _ImgAdjSetSharpness
001C 120000      R     LCALL   L?0777
001F 7400        E     MOV     A,#HIGH ImgAdjChangeSharpness
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 7400        E     MOV     A,#LOW ImgAdjChangeSharpness
0025 F0                MOVX    @DPTR,A
0026 7BFF              MOV     R3,#0FFH
0028 7A00        E     MOV     R2,#HIGH img_slide_sharp
002A 7900        E     MOV     R1,#LOW img_slide_sharp
002C 120000      R     LCALL   _InitSlideCtrl
                                           ; SOURCE LINE # 2929
002F 120000      R     LCALL   L?0735
0032 120000      R     LCALL   L?0744
0035 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_yuv_list_sharp (END)

             ; FUNCTION proc_rgb_list_bg (BEGIN)
                                           ; SOURCE LINE # 2938
                                           ; SOURCE LINE # 2939
                                           ; SOURCE LINE # 2940
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_rgb_list_bg (END)

             ; FUNCTION proc_rgb_list_bright (BEGIN)
                                           ; SOURCE LINE # 2943
                                           ; SOURCE LINE # 2944
                                           ; SOURCE LINE # 2945
                                           ; SOURCE LINE # 2947
0000 120000      R     LCALL   L?0748
                                           ; SOURCE LINE # 2948
                                           ; SOURCE LINE # 2949
                                           ; SOURCE LINE # 2950
0003 120000      R     LCALL   L?0773
0006 7400        E     MOV     A,#HIGH ImgAdjGetBrightnessY
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A 7400        E     MOV     A,#LOW ImgAdjGetBrightnessY
000C 120000      R     LCALL   L?0779
000F 7400        E     MOV     A,#HIGH _ImgAdjSetBrightnessY
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 7400        E     MOV     A,#LOW _ImgAdjSetBrightnessY
0015 120000      R     LCALL   L?0854
0018 7400        E     MOV     A,#HIGH _ImgAdjSetBrightnessY
001A 120000      R     LCALL   L?0777
001D 7400        E     MOV     A,#HIGH ImgAdjChangeBrightnessY
001F F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 216 

0020 7400        E     MOV     A,#LOW ImgAdjChangeBrightnessY
0022 120000      R     LCALL   L?0960
0025 120000      R     LCALL   _InitSlideCtrl
                                           ; SOURCE LINE # 2955
0028 120000      R     LCALL   L?0735
002B 120000      R     LCALL   L?0744
002E 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_rgb_list_bright (END)

             ; FUNCTION proc_rgb_list_contrast (BEGIN)
                                           ; SOURCE LINE # 2957
                                           ; SOURCE LINE # 2958
                                           ; SOURCE LINE # 2959
                                           ; SOURCE LINE # 2961
0000 120000      R     LCALL   L?0748
                                           ; SOURCE LINE # 2962
                                           ; SOURCE LINE # 2963
                                           ; SOURCE LINE # 2964
0003 120000      R     LCALL   L?0773
0006 7400        E     MOV     A,#HIGH ImgAdjGetContrastY
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A 7400        E     MOV     A,#LOW ImgAdjGetContrastY
000C 120000      R     LCALL   L?0779
000F 7400        E     MOV     A,#HIGH _ImgAdjSetContrastY
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 7400        E     MOV     A,#LOW _ImgAdjSetContrastY
0015 120000      R     LCALL   L?0854
0018 7400        E     MOV     A,#HIGH _ImgAdjSetContrastY
001A 120000      R     LCALL   L?0777
001D 7400        E     MOV     A,#HIGH ImgAdjChangeContrastY
001F F0                MOVX    @DPTR,A
0020 7400        E     MOV     A,#LOW ImgAdjChangeContrastY
0022 120000      R     LCALL   L?0962
0025 120000      R     LCALL   _InitSlideCtrl
                                           ; SOURCE LINE # 2969
0028 120000      R     LCALL   L?0735
002B 120000      R     LCALL   L?0744
002E 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_rgb_list_contrast (END)

             ; FUNCTION proc_rgb_list_color (BEGIN)
                                           ; SOURCE LINE # 2971
                                           ; SOURCE LINE # 2972
                                           ; SOURCE LINE # 2973
                                           ; SOURCE LINE # 2975
0000 120000      R     LCALL   L?1008
0003 120000      R     LCALL   L?0751
                                           ; SOURCE LINE # 2976
0006 120000      R     LCALL   L?0846
                                           ; SOURCE LINE # 2977
0009 900000      R     MOV     DPTR,#?_InitSlide3Ctrl?BYTE+03H
000C 74FF              MOV     A,#0FFH
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 7400        E     MOV     A,#HIGH _ImgAdjGetContrastRGB
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 7400        E     MOV     A,#LOW _ImgAdjGetContrastRGB
0016 120000      R     LCALL   L?0779
0019 7400        E     MOV     A,#HIGH _ImgAdjSetContrastRGB
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 217 

001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D 7400        E     MOV     A,#LOW _ImgAdjSetContrastRGB
001F 120000      R     LCALL   L?0854
0022 7400        E     MOV     A,#HIGH _ImgAdjSetContrastRGB
0024 120000      R     LCALL   L?0777
0027 7400        E     MOV     A,#HIGH _ImgAdjChangeContrastRGB
0029 F0                MOVX    @DPTR,A
002A A3                INC     DPTR
002B 7400        E     MOV     A,#LOW _ImgAdjChangeContrastRGB
002D F0                MOVX    @DPTR,A
002E 7BFF              MOV     R3,#0FFH
0030 7A00        E     MOV     R2,#HIGH img_slide_rgb
0032 7900        E     MOV     R1,#LOW img_slide_rgb
0034 120000      R     LCALL   _InitSlide3Ctrl
                                           ; SOURCE LINE # 2982
0037 120000      R     LCALL   L?0735
003A 120000      R     LCALL   L?0744
003D 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_rgb_list_color (END)

             ; FUNCTION proc_apc_list_bg (BEGIN)
                                           ; SOURCE LINE # 2998
                                           ; SOURCE LINE # 2999
                                           ; SOURCE LINE # 3000
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_apc_list_bg (END)

             ; FUNCTION proc_apc_list_bright (BEGIN)
                                           ; SOURCE LINE # 3003
                                           ; SOURCE LINE # 3004
                                           ; SOURCE LINE # 3005
                                           ; SOURCE LINE # 3007
0000 120000      R     LCALL   L?0748
                                           ; SOURCE LINE # 3008
0003 900001            MOV     DPTR,#01H
                                           ; SOURCE LINE # 3009
0006 120000      R     LCALL   L?0774
0009 7400        E     MOV     A,#HIGH ImgAdjGetBrightnessY
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D 7400        E     MOV     A,#LOW ImgAdjGetBrightnessY
000F 120000      R     LCALL   L?0779
0012 7400        E     MOV     A,#HIGH _ImgAdjSetBrightnessY
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 7400        E     MOV     A,#LOW _ImgAdjSetBrightnessY
0018 120000      R     LCALL   L?0854
001B 7400        E     MOV     A,#HIGH _ImgAdjSetBrightnessY
001D 120000      R     LCALL   L?0777
0020 7400        E     MOV     A,#HIGH ImgAdjChangeBrightnessY
0022 F0                MOVX    @DPTR,A
0023 A3                INC     DPTR
0024 7400        E     MOV     A,#LOW ImgAdjChangeBrightnessY
0026 120000      R     LCALL   L?0961
0029 120000      R     LCALL   _InitSlideCtrl
                                           ; SOURCE LINE # 3015
002C 120000      R     LCALL   L?0735
002F 120000      R     LCALL   L?0744
0032 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_apc_list_bright (END)

C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 218 

             ; FUNCTION proc_apc_list_contrast (BEGIN)
                                           ; SOURCE LINE # 3017
                                           ; SOURCE LINE # 3018
                                           ; SOURCE LINE # 3019
                                           ; SOURCE LINE # 3021
0000 120000      R     LCALL   L?0748
                                           ; SOURCE LINE # 3022
0003 900001            MOV     DPTR,#01H
                                           ; SOURCE LINE # 3023
0006 120000      R     LCALL   L?0774
0009 7400        E     MOV     A,#HIGH ImgAdjGetContrastY
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D 7400        E     MOV     A,#LOW ImgAdjGetContrastY
000F 120000      R     LCALL   L?0779
0012 7400        E     MOV     A,#HIGH _ImgAdjSetContrastY
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 7400        E     MOV     A,#LOW _ImgAdjSetContrastY
0018 120000      R     LCALL   L?0854
001B 7400        E     MOV     A,#HIGH _ImgAdjSetContrastY
001D 120000      R     LCALL   L?0777
0020 7400        E     MOV     A,#HIGH ImgAdjChangeContrastY
0022 F0                MOVX    @DPTR,A
0023 A3                INC     DPTR
0024 7400        E     MOV     A,#LOW ImgAdjChangeContrastY
0026 120000      R     LCALL   L?0963
0029 120000      R     LCALL   _InitSlideCtrl
                                           ; SOURCE LINE # 3029
002C 120000      R     LCALL   L?0735
002F 120000      R     LCALL   L?0744
0032 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_apc_list_contrast (END)

             ; FUNCTION proc_apc_list_color (BEGIN)
                                           ; SOURCE LINE # 3032
                                           ; SOURCE LINE # 3033
                                           ; SOURCE LINE # 3034
                                           ; SOURCE LINE # 3036
0000 120000      R     LCALL   L?1008
0003 120000      R     LCALL   L?0751
                                           ; SOURCE LINE # 3037
0006 120000      R     LCALL   L?0846
                                           ; SOURCE LINE # 3038
0009 900000      R     MOV     DPTR,#?_InitSlide3Ctrl?BYTE+03H
000C 74FF              MOV     A,#0FFH
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 7400        E     MOV     A,#HIGH _ImgAdjGetContrastRGB
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 7400        E     MOV     A,#LOW _ImgAdjGetContrastRGB
0016 120000      R     LCALL   L?0779
0019 7400        E     MOV     A,#HIGH _ImgAdjSetContrastRGB
001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D 7400        E     MOV     A,#LOW _ImgAdjSetContrastRGB
001F 120000      R     LCALL   L?0854
0022 7400        E     MOV     A,#HIGH _ImgAdjSetContrastRGB
0024 120000      R     LCALL   L?0777
0027 7400        E     MOV     A,#HIGH _ImgAdjChangeContrastRGB
0029 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 219 

002A A3                INC     DPTR
002B 7400        E     MOV     A,#LOW _ImgAdjChangeContrastRGB
002D F0                MOVX    @DPTR,A
002E 7BFF              MOV     R3,#0FFH
0030 7A00        E     MOV     R2,#HIGH img_slide_rgb
0032 7900        E     MOV     R1,#LOW img_slide_rgb
0034 120000      R     LCALL   _InitSlide3Ctrl
                                           ; SOURCE LINE # 3044
0037 120000      R     LCALL   L?0735
003A 120000      R     LCALL   L?0744
003D 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_apc_list_color (END)

             ; FUNCTION proc_apc_list_position (BEGIN)
                                           ; SOURCE LINE # 3047
                                           ; SOURCE LINE # 3048
                                           ; SOURCE LINE # 3049
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 3051
0003 7B01              MOV     R3,#01H
0005 7A00        E     MOV     R2,#HIGH menu_position_page
0007 7900        E     MOV     R1,#LOW menu_position_page
0009 120000      R     LCALL   L?0751
                                           ; SOURCE LINE # 3052
000C 120000      R     LCALL   L?0940
000F 900002            MOV     DPTR,#02H
0012 7403              MOV     A,#03H
                                           ; SOURCE LINE # 3054
0014 120000      R     LCALL   L?0743
0017 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_apc_list_position (END)

             ; FUNCTION proc_apc_list_phase (BEGIN)
                                           ; SOURCE LINE # 3056
                                           ; SOURCE LINE # 3057
                                           ; SOURCE LINE # 3058
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 3059
0003 E4                CLR     A
0004 FD                MOV     R5,A
0005 FC                MOV     R4,A
0006 FF                MOV     R7,A
0007 120000      E     LCALL   _VAdcSetFilterBandwidth
                                           ; SOURCE LINE # 3061
000A 120000      R     LCALL   L?0749
                                           ; SOURCE LINE # 3062
000D 900001            MOV     DPTR,#01H
                                           ; SOURCE LINE # 3064
0010 120000      R     LCALL   L?0774
0013 7400        E     MOV     A,#HIGH GetVAdcPhase
0015 F0                MOVX    @DPTR,A
0016 A3                INC     DPTR
0017 7400        E     MOV     A,#LOW GetVAdcPhase
0019 120000      R     LCALL   L?0779
001C 7400        E     MOV     A,#HIGH _VaryVAdcPhase
001E F0                MOVX    @DPTR,A
001F A3                INC     DPTR
0020 7400        E     MOV     A,#LOW _VaryVAdcPhase
0022 120000      R     LCALL   L?0779
0025 7400        E     MOV     A,#HIGH _SetVAdcPhase
0027 F0                MOVX    @DPTR,A
0028 A3                INC     DPTR
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 220 

0029 7400        E     MOV     A,#LOW _SetVAdcPhase
002B 120000      R     LCALL   L?0779
002E 7400        E     MOV     A,#HIGH ChangeVAdcPhase
0030 F0                MOVX    @DPTR,A
0031 A3                INC     DPTR
0032 7400        E     MOV     A,#LOW ChangeVAdcPhase
0034 F0                MOVX    @DPTR,A
0035 7BFF              MOV     R3,#0FFH
0037 7A00        E     MOV     R2,#HIGH img_slide_phase
0039 7900        E     MOV     R1,#LOW img_slide_phase
003B 120000      R     LCALL   _InitSlideCtrl
                                           ; SOURCE LINE # 3070
003E 120000      R     LCALL   L?0735
0041 120000      R     LCALL   L?0744
0044 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_apc_list_phase (END)

             ; FUNCTION proc_apc_list_clock (BEGIN)
                                           ; SOURCE LINE # 3073
                                           ; SOURCE LINE # 3074
                                           ; SOURCE LINE # 3075
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 3078
0003 120000      R     LCALL   L?0934
0006 74FE              MOV     A,#0FEH
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3079
0009 E4                CLR     A
000A FD                MOV     R5,A
000B FC                MOV     R4,A
000C FF                MOV     R7,A
000D 120000      E     LCALL   _VAdcSetFilterBandwidth
                                           ; SOURCE LINE # 3082
0010 120000      R     LCALL   L?0749
                                           ; SOURCE LINE # 3083
                                           ; SOURCE LINE # 3085
0013 120000      R     LCALL   L?0773
0016 7400        E     MOV     A,#HIGH GetVAdcClock
0018 F0                MOVX    @DPTR,A
0019 A3                INC     DPTR
001A 7400        E     MOV     A,#LOW GetVAdcClock
001C 120000      R     LCALL   L?0779
001F 7400        E     MOV     A,#HIGH _SetVAdcClock
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 7400        E     MOV     A,#LOW _SetVAdcClock
0025 120000      R     LCALL   L?0854
0028 7400        E     MOV     A,#HIGH _SetVAdcClock
002A 120000      R     LCALL   L?0777
002D 7400        E     MOV     A,#HIGH ChangeVAdcClock
002F F0                MOVX    @DPTR,A
0030 A3                INC     DPTR
0031 7400        E     MOV     A,#LOW ChangeVAdcClock
0033 F0                MOVX    @DPTR,A
0034 7BFF              MOV     R3,#0FFH
0036 7A00        E     MOV     R2,#HIGH img_slide_clock
0038 7900        E     MOV     R1,#LOW img_slide_clock
003A 120000      R     LCALL   _InitSlideCtrl
                                           ; SOURCE LINE # 3091
003D 120000      R     LCALL   L?0735
0040 120000      R     LCALL   L?0744
0043 020000      E     LJMP    ?C?ICALL
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 221 

             ; FUNCTION proc_apc_list_clock (END)

             ; FUNCTION proc_apc_list_autoadj (BEGIN)
                                           ; SOURCE LINE # 3095
                                           ; SOURCE LINE # 3096
                                           ; SOURCE LINE # 3097
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 3099
0003 7A00        E     MOV     R2,#HIGH menu_autoadj_page
0005 7900        E     MOV     R1,#LOW menu_autoadj_page
                                           ; SOURCE LINE # 3100
                                           ; SOURCE LINE # 3101
0007 120000      R     LCALL   L?0739
000A 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_apc_list_autoadj (END)

             ; FUNCTION proc_apc_list_autocolor (BEGIN)
                                           ; SOURCE LINE # 3104
                                           ; SOURCE LINE # 3105
                                           ; SOURCE LINE # 3106
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 3108
0003 7B01              MOV     R3,#01H
0005 7A00        E     MOV     R2,#HIGH menu_autocolor_page
0007 7900        E     MOV     R1,#LOW menu_autocolor_page
                                           ; SOURCE LINE # 3109
                                           ; SOURCE LINE # 3110
0009 120000      R     LCALL   L?0740
000C 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_apc_list_autocolor (END)

             ; FUNCTION proc_hdmi_list_bg (BEGIN)
                                           ; SOURCE LINE # 3119
                                           ; SOURCE LINE # 3120
                                           ; SOURCE LINE # 3121
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_hdmi_list_bg (END)

             ; FUNCTION proc_hdmi_list_mode (BEGIN)
                                           ; SOURCE LINE # 3123
                                           ; SOURCE LINE # 3124
                                           ; SOURCE LINE # 3125
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 3127
0003 7B01              MOV     R3,#01H
0005 7A00        E     MOV     R2,#HIGH menu_hdmi_mode_page
0007 7900        E     MOV     R1,#LOW menu_hdmi_mode_page
0009 120000      R     LCALL   L?0751
                                           ; SOURCE LINE # 3128
000C 120000      R     LCALL   L?0806
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#MenuInputMain
0013 E0                MOVX    A,@DPTR
0014 24FB              ADD     A,#0FBH
0016 2F                ADD     A,R7
                                           ; SOURCE LINE # 3129
0017 120000      R     LCALL   L?0756
001A 120000      R     LCALL   L?0849
                                           ; SOURCE LINE # 3130
001D 120000      R     LCALL   L?0767
0020 900000      R     MOV     DPTR,#cancel_recover_value
0023 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 222 

                                           ; SOURCE LINE # 3131
0024 120000      R     LCALL   L?0744
0027 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_hdmi_list_mode (END)

             ; FUNCTION proc_hdmi_list_setting (BEGIN)
                                           ; SOURCE LINE # 3133
                                           ; SOURCE LINE # 3134
                                           ; SOURCE LINE # 3135
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 3139
0003 900000      R     MOV     DPTR,#MenuInputMain
0006 E0                MOVX    A,@DPTR
0007 900000      R     MOV     DPTR,#curr_menu
000A B4050D            CJNE    A,#05H,?C0465
000D 7401              MOV     A,#01H
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 7400        E     MOV     A,#HIGH menu_rgb_list_page
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 7400        E     MOV     A,#LOW menu_rgb_list_page
0017 F0                MOVX    @DPTR,A
0018 800B              SJMP    ?C0466
001A         ?C0465:
                                           ; SOURCE LINE # 3140
001A 7401              MOV     A,#01H
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E 7400        E     MOV     A,#HIGH menu_yuv_list_page
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
0022 7400        E     MOV     A,#LOW menu_yuv_list_page
0024 F0                MOVX    @DPTR,A
0025         ?C0466:
                                           ; SOURCE LINE # 3142
0025 120000      R     LCALL   L?0735
0028 120000      R     LCALL   L?0806
                                           ; SOURCE LINE # 3144
002B 120000      R     LCALL   L?0742
002E 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_hdmi_list_setting (END)

             ; FUNCTION proc_osd_bg (BEGIN)
                                           ; SOURCE LINE # 3201
                                           ; SOURCE LINE # 3202
                                           ; SOURCE LINE # 3203
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_osd_bg (END)

             ; FUNCTION proc_osd_time (BEGIN)
                                           ; SOURCE LINE # 3207
                                           ; SOURCE LINE # 3208
                                           ; SOURCE LINE # 3209
                                           ; SOURCE LINE # 3211
0000 120000      R     LCALL   L?0748
                                           ; SOURCE LINE # 3212
                                           ; SOURCE LINE # 3213
                                           ; SOURCE LINE # 3216
0003 120000      R     LCALL   L?0773
0006 7400        E     MOV     A,#HIGH OsdGetTime
0008 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 223 

0009 A3                INC     DPTR
000A 7400        E     MOV     A,#LOW OsdGetTime
000C 120000      R     LCALL   L?0779
000F 7400        E     MOV     A,#HIGH _OsdVaryTime
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 7400        E     MOV     A,#LOW _OsdVaryTime
0015 120000      R     LCALL   L?0779
0018 7400        E     MOV     A,#HIGH _OsdSetTime
001A F0                MOVX    @DPTR,A
001B A3                INC     DPTR
001C 7400        E     MOV     A,#LOW _OsdSetTime
001E 120000      R     LCALL   L?0779
0021 7400        E     MOV     A,#HIGH OsdChangeTime
0023 F0                MOVX    @DPTR,A
0024 A3                INC     DPTR
0025 7400        E     MOV     A,#LOW OsdChangeTime
0027 F0                MOVX    @DPTR,A
0028 7BFF              MOV     R3,#0FFH
002A 7A00        E     MOV     R2,#HIGH img_slide_timer
002C 7900        E     MOV     R1,#LOW img_slide_timer
002E 120000      R     LCALL   _InitSlideCtrl
                                           ; SOURCE LINE # 3218
0031 120000      R     LCALL   L?0735
0034 120000      R     LCALL   L?0744
0037 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_osd_time (END)

             ; FUNCTION proc_osd_trans (BEGIN)
                                           ; SOURCE LINE # 3220
                                           ; SOURCE LINE # 3221
                                           ; SOURCE LINE # 3222
                                           ; SOURCE LINE # 3224
0000 120000      R     LCALL   L?0748
                                           ; SOURCE LINE # 3225
                                           ; SOURCE LINE # 3226
0003 120000      R     LCALL   L?0847
                                           ; SOURCE LINE # 3232
0006 7F39              MOV     R7,#039H
0008 7E00              MOV     R6,#00H
000A 120000      E     LCALL   _EE_Read
000D 120000      E     LCALL   _OsdSetTransRate
                                           ; SOURCE LINE # 3233
0010 120000      R     LCALL   L?0775
0013 7400        E     MOV     A,#HIGH OsdGetTransRate
0015 F0                MOVX    @DPTR,A
0016 A3                INC     DPTR
0017 7400        E     MOV     A,#LOW OsdGetTransRate
0019 120000      R     LCALL   L?0779
001C 7400        E     MOV     A,#HIGH _OsdSetTransRate
001E F0                MOVX    @DPTR,A
001F A3                INC     DPTR
0020 7400        E     MOV     A,#LOW _OsdSetTransRate
0022 120000      R     LCALL   L?0854
0025 7400        E     MOV     A,#HIGH _OsdSetTransRate
0027 120000      R     LCALL   L?0777
002A 7400        E     MOV     A,#HIGH OsdChangeTransRate
002C F0                MOVX    @DPTR,A
002D A3                INC     DPTR
002E 7400        E     MOV     A,#LOW OsdChangeTransRate
0030 F0                MOVX    @DPTR,A
0031 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 224 

0033 7A00        E     MOV     R2,#HIGH img_slide_trans
0035 7900        E     MOV     R1,#LOW img_slide_trans
0037 120000      R     LCALL   _InitSlideCtrl
                                           ; SOURCE LINE # 3235
003A 120000      R     LCALL   L?0735
003D 120000      R     LCALL   L?0744
0040 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_osd_trans (END)

             ; FUNCTION proc_main_bg (BEGIN)
                                           ; SOURCE LINE # 3254
                                           ; SOURCE LINE # 3255
                                           ; SOURCE LINE # 3256
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_main_bg (END)

             ; FUNCTION proc_main_input (BEGIN)
                                           ; SOURCE LINE # 3260
                                           ; SOURCE LINE # 3261
                                           ; SOURCE LINE # 3262
                                           ; SOURCE LINE # 3263
0000 120000      R     LCALL   L?0898
0003 7400        E     MOV     A,#HIGH menu_input_page
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 7400        E     MOV     A,#LOW menu_input_page
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3265
000A 120000      E     LCALL   GetInputMain
000D 900000      R     MOV     DPTR,#MenuInputMain
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3266
0012 B40800            CJNE    A,#08H,?C0679
0015         ?C0679:
0015 5053              JNC     ?C0480
0017 900000      R     MOV     DPTR,#?C0680
001A F8                MOV     R0,A
001B 28                ADD     A,R0
001C 28                ADD     A,R0
001D 73                JMP     @A+DPTR
001E         ?C0680:
001E 020000      R     LJMP    ?C0473
0021 020000      R     LJMP    ?C0474
0024 020000      R     LJMP    ?C0475
0027 020000      R     LJMP    ?C0476
002A 020000      R     LJMP    ?C0480
002D 020000      R     LJMP    ?C0478
0030 020000      R     LJMP    ?C0478
0033 020000      R     LJMP    ?C0479
                                           ; SOURCE LINE # 3267
0036         ?C0473:
0036 8032              SJMP    ?C0721
                                           ; SOURCE LINE # 3268
0038         ?C0474:
0038 120000      R     LCALL   L?0735
003B 900001            MOV     DPTR,#01H
003E 7406              MOV     A,#06H
0040 8030              SJMP    ?C0726
                                           ; SOURCE LINE # 3269
0042         ?C0475:
0042 120000      R     LCALL   L?0735
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 225 

0045 900001            MOV     DPTR,#01H
0048 7407              MOV     A,#07H
004A         ?C0722:
004A 8026              SJMP    ?C0726
                                           ; SOURCE LINE # 3270
004C         ?C0476:
004C 120000      R     LCALL   L?0735
004F 900001            MOV     DPTR,#01H
0052 7408              MOV     A,#08H
0054         ?C0723:
0054 801C              SJMP    ?C0726
                                           ; SOURCE LINE # 3274
                                           ; SOURCE LINE # 3275
0056         ?C0478:
0056 120000      R     LCALL   L?0735
0059 900001            MOV     DPTR,#01H
005C 7409              MOV     A,#09H
005E         ?C0724:
005E 8012              SJMP    ?C0726
                                           ; SOURCE LINE # 3276
0060         ?C0479:
0060 120000      R     LCALL   L?0735
0063 900001            MOV     DPTR,#01H
0066 740A              MOV     A,#0AH
0068         ?C0725:
0068 8008              SJMP    ?C0726
                                           ; SOURCE LINE # 3277
006A         ?C0480:
006A         ?C0721:
006A 120000      R     LCALL   L?0735
006D 900001            MOV     DPTR,#01H
0070 7405              MOV     A,#05H
0072         ?C0726:
0072 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 3278
0075         ?C0472:
                                           ; SOURCE LINE # 3279
0075 120000      R     LCALL   L?0735
0078 120000      R     LCALL   L?0758
007B 900002            MOV     DPTR,#02H
                                           ; SOURCE LINE # 3281
007E 120000      R     LCALL   L?0743
0081 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_main_input (END)

             ; FUNCTION proc_main_audio (BEGIN)
                                           ; SOURCE LINE # 3284
                                           ; SOURCE LINE # 3285
                                           ; SOURCE LINE # 3286
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 3287
0003 7B01              MOV     R3,#01H
0005 7A00        E     MOV     R2,#HIGH menu_audio_page
0007 7900        E     MOV     R1,#LOW menu_audio_page
                                           ; SOURCE LINE # 3288
                                           ; SOURCE LINE # 3289
0009 120000      R     LCALL   L?0740
000C 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_main_audio (END)

             ; FUNCTION proc_main_system (BEGIN)
                                           ; SOURCE LINE # 3292
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 226 

                                           ; SOURCE LINE # 3293
                                           ; SOURCE LINE # 3294
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 3295
0003 7B01              MOV     R3,#01H
0005 7A00        E     MOV     R2,#HIGH menu_system_page
0007 7900        E     MOV     R1,#LOW menu_system_page
0009 120000      R     LCALL   L?0751
                                           ; SOURCE LINE # 3297
000C 900001            MOV     DPTR,#01H
000F 7405              MOV     A,#05H
                                           ; SOURCE LINE # 3298
0011 120000      R     LCALL   L?0757
0014 900002            MOV     DPTR,#02H
                                           ; SOURCE LINE # 3299
0017 120000      R     LCALL   L?0743
001A 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_main_system (END)

             ; FUNCTION proc_main_gps (BEGIN)
                                           ; SOURCE LINE # 3302
                                           ; SOURCE LINE # 3303
                                           ; SOURCE LINE # 3304
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 3305
0003 7B01              MOV     R3,#01H
0005 7A00        E     MOV     R2,#HIGH menu_gps_page
0007 7900        E     MOV     R1,#LOW menu_gps_page
                                           ; SOURCE LINE # 3306
                                           ; SOURCE LINE # 3307
0009 120000      R     LCALL   L?0740
000C 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_main_gps (END)

             ; FUNCTION proc_main_phone (BEGIN)
                                           ; SOURCE LINE # 3310
                                           ; SOURCE LINE # 3311
                                           ; SOURCE LINE # 3312
                                           ; SOURCE LINE # 3313
                                           ; SOURCE LINE # 3314
                                           ; SOURCE LINE # 3315
0000 120000      R     LCALL   L?0738
0003 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_main_phone (END)

             ; FUNCTION proc_main_info (BEGIN)
                                           ; SOURCE LINE # 3318
                                           ; SOURCE LINE # 3319
                                           ; SOURCE LINE # 3320
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 3321
0003 7B01              MOV     R3,#01H
0005 7A00        E     MOV     R2,#HIGH menu_carinfo_page
0007 7900        E     MOV     R1,#LOW menu_carinfo_page
                                           ; SOURCE LINE # 3322
                                           ; SOURCE LINE # 3323
0009 120000      R     LCALL   L?0740
000C 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_main_info (END)

             ; FUNCTION proc_input_bg (BEGIN)
                                           ; SOURCE LINE # 3336
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 227 

                                           ; SOURCE LINE # 3337
                                           ; SOURCE LINE # 3344
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_input_bg (END)

             ; FUNCTION proc_input_cvbs (BEGIN)
                                           ; SOURCE LINE # 3358
                                           ; SOURCE LINE # 3359
                                           ; SOURCE LINE # 3360
0000 120000      E     LCALL   GetInputMain
0003 900000      R     MOV     DPTR,#MenuInputMain
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3361
0008 600E              JZ      ?C0488
                                           ; SOURCE LINE # 3364
000A E4                CLR     A
000B FF                MOV     R7,A
000C 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 3367
000F 120000      E     LCALL   ChangeCVBS
                                           ; SOURCE LINE # 3372
0012 120000      R     LCALL   L?0909
0015 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 3373
0018         ?C0488:
                                           ; SOURCE LINE # 3375
0018 120000      R     LCALL   L?0735
001B 120000      R     LCALL   L?0758
                                           ; SOURCE LINE # 3376
001E 120000      R     LCALL   L?0763
0021 2F                ADD     A,R7
0022 FD                MOV     R5,A
0023 E4                CLR     A
0024 FF                MOV     R7,A
0025 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 3380
0028 120000      R     LCALL   L?0735
002B 120000      R     LCALL   L?0758
002E FD                MOV     R5,A
002F E4                CLR     A
0030 FF                MOV     R7,A
0031 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_input_cvbs (END)

             ; FUNCTION proc_input_svideo (BEGIN)
                                           ; SOURCE LINE # 3383
                                           ; SOURCE LINE # 3384
                                           ; SOURCE LINE # 3385
0000 120000      E     LCALL   GetInputMain
0003 900000      R     MOV     DPTR,#MenuInputMain
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3386
0008 6401              XRL     A,#01H
000A 600E              JZ      ?C0490
                                           ; SOURCE LINE # 3389
000C E4                CLR     A
000D FF                MOV     R7,A
000E 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 3392
0011 120000      E     LCALL   ChangeSVIDEO
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 228 

                                           ; SOURCE LINE # 3397
0014 120000      R     LCALL   L?0909
0017 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 3398
001A         ?C0490:
                                           ; SOURCE LINE # 3400
001A 120000      R     LCALL   L?0735
001D 120000      R     LCALL   L?0758
                                           ; SOURCE LINE # 3401
0020 120000      R     LCALL   L?0763
0023 2F                ADD     A,R7
0024 FD                MOV     R5,A
0025 E4                CLR     A
0026 FF                MOV     R7,A
0027 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 3404
002A 120000      R     LCALL   L?0735
002D 120000      R     LCALL   L?0758
0030 FD                MOV     R5,A
0031 E4                CLR     A
0032 FF                MOV     R7,A
0033 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_input_svideo (END)

             ; FUNCTION proc_input_ypbpr (BEGIN)
                                           ; SOURCE LINE # 3407
                                           ; SOURCE LINE # 3408
                                           ; SOURCE LINE # 3409
0000 120000      E     LCALL   GetInputMain
0003 900000      R     MOV     DPTR,#MenuInputMain
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3410
0008 6402              XRL     A,#02H
000A 600E              JZ      ?C0492
                                           ; SOURCE LINE # 3413
000C E4                CLR     A
000D FF                MOV     R7,A
000E 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 3417
0011 120000      E     LCALL   ChangeCOMPONENT
                                           ; SOURCE LINE # 3425
0014 120000      R     LCALL   L?0910
0017 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 3426
001A         ?C0492:
                                           ; SOURCE LINE # 3428
001A 120000      R     LCALL   L?0735
001D 120000      R     LCALL   L?0758
                                           ; SOURCE LINE # 3429
0020 120000      R     LCALL   L?0764
0023 2F                ADD     A,R7
0024 FD                MOV     R5,A
0025 E4                CLR     A
0026 FF                MOV     R7,A
0027 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 3432
002A 120000      R     LCALL   L?0735
002D 120000      R     LCALL   L?0758
0030 FD                MOV     R5,A
0031 E4                CLR     A
0032 FF                MOV     R7,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 229 

0033 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_input_ypbpr (END)

             ; FUNCTION proc_input_pc (BEGIN)
                                           ; SOURCE LINE # 3435
                                           ; SOURCE LINE # 3436
                                           ; SOURCE LINE # 3437
0000 120000      E     LCALL   GetInputMain
0003 900000      R     MOV     DPTR,#MenuInputMain
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3438
0008 6403              XRL     A,#03H
000A 600E              JZ      ?C0494
                                           ; SOURCE LINE # 3441
000C E4                CLR     A
000D FF                MOV     R7,A
000E 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 3445
0011 120000      E     LCALL   ChangePC
                                           ; SOURCE LINE # 3452
0014 120000      R     LCALL   L?0910
0017 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 3453
001A         ?C0494:
                                           ; SOURCE LINE # 3455
001A 120000      R     LCALL   L?0735
001D 120000      R     LCALL   L?0758
                                           ; SOURCE LINE # 3456
0020 120000      R     LCALL   L?0764
0023 2F                ADD     A,R7
0024 FD                MOV     R5,A
0025 E4                CLR     A
0026 FF                MOV     R7,A
0027 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 3459
002A 120000      R     LCALL   L?0735
002D 120000      R     LCALL   L?0758
0030 FD                MOV     R5,A
0031 E4                CLR     A
0032 FF                MOV     R7,A
0033 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_input_pc (END)

             ; FUNCTION proc_input_hdmi (BEGIN)
                                           ; SOURCE LINE # 3488
                                           ; SOURCE LINE # 3489
                                           ; SOURCE LINE # 3490
0000 120000      E     LCALL   GetInputMain
0003 900000      R     MOV     DPTR,#MenuInputMain
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3491
0008 6405              XRL     A,#05H
000A 6013              JZ      ?C0496
000C E0                MOVX    A,@DPTR
000D 6406              XRL     A,#06H
000F 600E              JZ      ?C0496
                                           ; SOURCE LINE # 3495
0011 E4                CLR     A
0012 FF                MOV     R7,A
0013 120000      E     LCALL   _SpiOsdEnable
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 230 

                                           ; SOURCE LINE # 3498
0016 120000      E     LCALL   ChangeHDMI
                                           ; SOURCE LINE # 3503
0019 120000      R     LCALL   L?0910
001C 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 3504
001F         ?C0496:
                                           ; SOURCE LINE # 3506
001F 120000      R     LCALL   L?0735
0022 120000      R     LCALL   L?0758
                                           ; SOURCE LINE # 3507
0025 120000      R     LCALL   L?0764
0028 2F                ADD     A,R7
0029 FD                MOV     R5,A
002A E4                CLR     A
002B FF                MOV     R7,A
002C 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 3510
002F 120000      R     LCALL   L?0735
0032 120000      R     LCALL   L?0758
0035 FD                MOV     R5,A
0036 E4                CLR     A
0037 FF                MOV     R7,A
0038 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_input_hdmi (END)

             ; FUNCTION proc_input_bt656 (BEGIN)
                                           ; SOURCE LINE # 3513
                                           ; SOURCE LINE # 3514
                                           ; SOURCE LINE # 3516
0000 120000      E     LCALL   GetInputMain
0003 900000      R     MOV     DPTR,#MenuInputMain
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3517
0008 6407              XRL     A,#07H
000A 600E              JZ      ?C0498
                                           ; SOURCE LINE # 3519
000C E4                CLR     A
000D FF                MOV     R7,A
000E 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 3523
0011 120000      E     LCALL   ChangeBT656
                                           ; SOURCE LINE # 3528
0014 120000      R     LCALL   L?0910
0017 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 3529
001A         ?C0498:
                                           ; SOURCE LINE # 3531
001A 120000      R     LCALL   L?0735
001D 120000      R     LCALL   L?0758
                                           ; SOURCE LINE # 3532
0020 120000      R     LCALL   L?0764
0023 2F                ADD     A,R7
0024 FD                MOV     R5,A
0025 E4                CLR     A
0026 FF                MOV     R7,A
0027 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 3535
002A 120000      R     LCALL   L?0735
002D 120000      R     LCALL   L?0758
0030 FD                MOV     R5,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 231 

0031 E4                CLR     A
0032 FF                MOV     R7,A
0033 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_input_bt656 (END)

             ; FUNCTION proc_input_setting (BEGIN)
                                           ; SOURCE LINE # 3540
                                           ; SOURCE LINE # 3541
                                           ; SOURCE LINE # 3542
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 3544
0003 120000      E     LCALL   GetInputMain
0006 900000      R     MOV     DPTR,#MenuInputMain
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3545
000B BF030C            CJNE    R7,#03H,?C0500
                                           ; SOURCE LINE # 3546
000E 120000      R     LCALL   L?0899
0011 7400        E     MOV     A,#HIGH menu_apc_list_page
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 7400        E     MOV     A,#LOW menu_apc_list_page
0017 F0                MOVX    @DPTR,A
0018 8033              SJMP    ?C0501
001A         ?C0500:
                                           ; SOURCE LINE # 3547
001A 900000      R     MOV     DPTR,#MenuInputMain
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F B4040C            CJNE    A,#04H,?C0502
                                           ; SOURCE LINE # 3548
0022 120000      R     LCALL   L?0899
0025 7400        E     MOV     A,#HIGH menu_rgb_list_page
0027 F0                MOVX    @DPTR,A
0028 A3                INC     DPTR
0029 7400        E     MOV     A,#LOW menu_rgb_list_page
002B F0                MOVX    @DPTR,A
002C 801F              SJMP    ?C0501
002E         ?C0502:
                                           ; SOURCE LINE # 3549
002E EF                MOV     A,R7
002F 6405              XRL     A,#05H
0031 6004              JZ      ?C0505
0033 EF                MOV     A,R7
0034 B4060C            CJNE    A,#06H,?C0504
0037         ?C0505:
                                           ; SOURCE LINE # 3550
0037 120000      R     LCALL   L?0899
003A 7400        E     MOV     A,#HIGH menu_hdmi_list_page
003C F0                MOVX    @DPTR,A
003D A3                INC     DPTR
003E 7400        E     MOV     A,#LOW menu_hdmi_list_page
0040 F0                MOVX    @DPTR,A
0041 800A              SJMP    ?C0501
0043         ?C0504:
                                           ; SOURCE LINE # 3552
0043 120000      R     LCALL   L?0899
0046 7400        E     MOV     A,#HIGH menu_yuv_list_page
0048 F0                MOVX    @DPTR,A
0049 A3                INC     DPTR
004A 7400        E     MOV     A,#LOW menu_yuv_list_page
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 232 

004C F0                MOVX    @DPTR,A
004D         ?C0501:
                                           ; SOURCE LINE # 3554
004D 120000      R     LCALL   L?0735
0050 120000      R     LCALL   L?0806
                                           ; SOURCE LINE # 3556
0053 120000      R     LCALL   L?0742
0056 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_input_setting (END)

             ; FUNCTION proc_audio_bg (BEGIN)
                                           ; SOURCE LINE # 3567
                                           ; SOURCE LINE # 3568
                                           ; SOURCE LINE # 3569
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_audio_bg (END)

             ; FUNCTION proc_system_bg (BEGIN)
                                           ; SOURCE LINE # 3580
                                           ; SOURCE LINE # 3581
                                           ; SOURCE LINE # 3583
0000 900000      R     MOV     DPTR,#touch_not_detected
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3585
0006 120000      R     LCALL   proc_menu_bg
                                           ; SOURCE LINE # 3588
0009 900000      R     MOV     DPTR,#touch_not_detected
000C E0                MOVX    A,@DPTR
000D 6007              JZ      ?C0510
                                           ; SOURCE LINE # 3593
000F 7D04              MOV     R5,#04H
0011 7F07              MOV     R7,#07H
0013 120000      R     LCALL   _MenuDrawDeactivatedItemImage
                                           ; SOURCE LINE # 3594
                                           ; SOURCE LINE # 3595
0016         ?C0510:
0016 22                RET     
             ; FUNCTION proc_system_bg (END)

             ; FUNCTION proc_system_touch (BEGIN)
                                           ; SOURCE LINE # 3597
                                           ; SOURCE LINE # 3598
                                           ; SOURCE LINE # 3600
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0896
                                           ; SOURCE LINE # 3601
                                           ; SOURCE LINE # 3604
0006 120000      R     LCALL   L?1009
0009 120000      R     LCALL   L?0751
                                           ; SOURCE LINE # 3605
000C 120000      R     LCALL   L?0806
                                           ; SOURCE LINE # 3606
000F 120000      R     LCALL   L?0742
0012 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_system_touch (END)

             ; FUNCTION proc_system_display (BEGIN)
                                           ; SOURCE LINE # 3610
                                           ; SOURCE LINE # 3611
                                           ; SOURCE LINE # 3612
0000 120000      R     LCALL   L?0735
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 233 

0003 120000      R     LCALL   L?0848
                                           ; SOURCE LINE # 3613
0006 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 3615
0009 7B01              MOV     R3,#01H
000B 7A00        E     MOV     R2,#HIGH menu_display_page
000D 7900        E     MOV     R1,#LOW menu_display_page
000F 120000      R     LCALL   L?0751
                                           ; SOURCE LINE # 3616
0012 120000      R     LCALL   L?0806
                                           ; SOURCE LINE # 3617
0015 120000      R     LCALL   L?0742
0018 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_system_display (END)

             ; FUNCTION proc_system_btooth (BEGIN)
                                           ; SOURCE LINE # 3619
                                           ; SOURCE LINE # 3620
                                           ; SOURCE LINE # 3621
0000 120000      R     LCALL   L?0735
0003 900002            MOV     DPTR,#02H
0006 7406              MOV     A,#06H
0008 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 3622
                                           ; SOURCE LINE # 3625
                                           ; SOURCE LINE # 3626
                                           ; SOURCE LINE # 3627
000B 120000      R     LCALL   L?0738
000E 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_system_btooth (END)

             ; FUNCTION proc_system_restore (BEGIN)
                                           ; SOURCE LINE # 3629
                                           ; SOURCE LINE # 3630
                                           ; SOURCE LINE # 3631
0000 120000      R     LCALL   L?0735
0003 7407              MOV     A,#07H
                                           ; SOURCE LINE # 3632
                                           ; SOURCE LINE # 3634
0005 120000      R     LCALL   L?0982
0008 7A00        E     MOV     R2,#HIGH menu_restore_page
000A 7900        E     MOV     R1,#LOW menu_restore_page
                                           ; SOURCE LINE # 3635
                                           ; SOURCE LINE # 3636
000C 120000      R     LCALL   L?0740
000F 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_system_restore (END)

             ; FUNCTION proc_system_info (BEGIN)
                                           ; SOURCE LINE # 3638
                                           ; SOURCE LINE # 3639
                                           ; SOURCE LINE # 3642
0000 120000      R     LCALL   L?0735
0003 7408              MOV     A,#08H
                                           ; SOURCE LINE # 3643
                                           ; SOURCE LINE # 3645
0005 120000      R     LCALL   L?0982
0008 7A00        E     MOV     R2,#HIGH menu_sys_info_page
000A 7900        E     MOV     R1,#LOW menu_sys_info_page
                                           ; SOURCE LINE # 3646
                                           ; SOURCE LINE # 3647
000C 120000      R     LCALL   L?0740
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 234 

000F 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 3650
0012 7D01              MOV     R5,#01H
0014 E4                CLR     A
0015 FF                MOV     R7,A
0016 120000      R     LCALL   _MenuFontOsdItemInit
                                           ; SOURCE LINE # 3651
0019 7D01              MOV     R5,#01H
001B 7F01              MOV     R7,#01H
001D 120000      R     LCALL   _MenuFontOsdItemInit
                                           ; SOURCE LINE # 3653
0020 7BFF              MOV     R3,#0FFH
0022 7A00        R     MOV     R2,#HIGH ?SC_196
0024 7900        R     MOV     R1,#LOW ?SC_196
0026 E4                CLR     A
0027 FF                MOV     R7,A
0028 120000      R     LCALL   _MenuFontOsdItemString
                                           ; SOURCE LINE # 3663
002B 7B01              MOV     R3,#01H
002D 7A00        R     MOV     R2,#HIGH str_buff
002F 7900        R     MOV     R1,#LOW str_buff
0031 E4                CLR     A
0032 FF                MOV     R7,A
0033 120000      E     LCALL   _TWhtos
                                           ; SOURCE LINE # 3664
0036 900000      E     MOV     DPTR,#?_TWstrcat?BYTE+03H
0039 74FF              MOV     A,#0FFH
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D 7400        R     MOV     A,#HIGH ?SC_200
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 7400        R     MOV     A,#LOW ?SC_200
0043 F0                MOVX    @DPTR,A
0044 120000      E     LCALL   _TWstrcat
                                           ; SOURCE LINE # 3665
0047 120000      R     LCALL   L?0975
004A 7F10              MOV     R7,#010H
004C 120000      E     LCALL   _TWhtos
                                           ; SOURCE LINE # 3666
004F 900000      E     MOV     DPTR,#?_TWstrcat?BYTE+03H
0052 EB                MOV     A,R3
0053 120000      R     LCALL   L?0753
0056 7A00        R     MOV     R2,#HIGH str_buff
0058 7900        R     MOV     R1,#LOW str_buff
005A 120000      E     LCALL   _TWstrcat
                                           ; SOURCE LINE # 3667
005D 7B01              MOV     R3,#01H
005F 7A00        R     MOV     R2,#HIGH str_buff
0061 7900        R     MOV     R1,#LOW str_buff
0063 7F01              MOV     R7,#01H
0065 020000      R     LJMP    _MenuFontOsdItemString
             ; FUNCTION proc_system_info (END)

             ; FUNCTION MenuIsSystemPage (BEGIN)
                                           ; SOURCE LINE # 3671
                                           ; SOURCE LINE # 3672
                                           ; SOURCE LINE # 3673
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0833
0006 700A              JNZ     ?C0681
0008 7400        E     MOV     A,#LOW menu_system_page
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 235 

000A 6582              XRL     A,DPL
000C 7004              JNZ     ?C0681
000E 7400        E     MOV     A,#HIGH menu_system_page
0010 6583              XRL     A,DPH
0012         ?C0681:
0012 7003              JNZ     ?C0516
0014 7F01              MOV     R7,#01H
0016 22                RET     
0017         ?C0516:
                                           ; SOURCE LINE # 3674
0017 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 3675
0019         ?C0517:
0019 22                RET     
             ; FUNCTION MenuIsSystemPage (END)

             ; FUNCTION proc_gps_bg (BEGIN)
                                           ; SOURCE LINE # 3686
                                           ; SOURCE LINE # 3687
                                           ; SOURCE LINE # 3688
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_gps_bg (END)

             ; FUNCTION proc_phone_bg (BEGIN)
                                           ; SOURCE LINE # 3703
                                           ; SOURCE LINE # 3704
                                           ; SOURCE LINE # 3706
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0908
0006 900000      R     MOV     DPTR,#text_info
0009 EB                MOV     A,R3
000A 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 3708
000D 120000      R     LCALL   proc_menu_bg
                                           ; SOURCE LINE # 3709
0010 E4                CLR     A
0011 FD                MOV     R5,A
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _MenuFontOsdItemInit
                                           ; SOURCE LINE # 3710
0016 E4                CLR     A
0017 FD                MOV     R5,A
0018 7F01              MOV     R7,#01H
001A 120000      R     LCALL   _MenuFontOsdItemInit
                                           ; SOURCE LINE # 3712
001D 7BFF              MOV     R3,#0FFH
001F 7A00        R     MOV     R2,#HIGH ?SC_202
0021 7900        R     MOV     R1,#LOW ?SC_202
0023 120000      R     LCALL   _proc_phone_string
                                           ; SOURCE LINE # 3713
0026 E4                CLR     A
0027 900000      R     MOV     DPTR,#phone_start
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3714
002B 900000      R     MOV     DPTR,#i
002E F0                MOVX    @DPTR,A
002F         ?C0519:
002F 900000      R     MOV     DPTR,#text_info
0032 120000      R     LCALL   L?0736
0035 120000      R     LCALL   L?0842
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#i
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 236 

003C E0                MOVX    A,@DPTR
003D C3                CLR     C
003E 9F                SUBB    A,R7
003F 502F              JNC     ?C0520
                                           ; SOURCE LINE # 3715
0041 E4                CLR     A
0042 A3                INC     DPTR
0043 F0                MOVX    @DPTR,A
0044         ?C0522:
0044 900000      R     MOV     DPTR,#text_info
0047 120000      R     LCALL   L?0736
004A 900007            MOV     DPTR,#07H
004D 120000      E     LCALL   ?C?CLDOPTR
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#j
0054 E0                MOVX    A,@DPTR
0055 C3                CLR     C
0056 9F                SUBB    A,R7
0057 500F              JNC     ?C0521
                                           ; SOURCE LINE # 3716
0059 E4                CLR     A
005A FD                MOV     R5,A
005B 7F20              MOV     R7,#020H
005D 120000      R     LCALL   _proc_phone_digit
0060 900000      R     MOV     DPTR,#j
0063 E0                MOVX    A,@DPTR
0064 04                INC     A
0065 F0                MOVX    @DPTR,A
0066 80DC              SJMP    ?C0522
0068         ?C0521:
0068 900000      R     MOV     DPTR,#i
006B E0                MOVX    A,@DPTR
006C 04                INC     A
006D F0                MOVX    @DPTR,A
006E 80BF              SJMP    ?C0519
0070         ?C0520:
                                           ; SOURCE LINE # 3717
0070 E4                CLR     A
0071 900000      R     MOV     DPTR,#phone_start
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3718
0075 FF                MOV     R7,A
0076 020000      R     LJMP    _proc_phone_cursor
             ; FUNCTION proc_phone_bg (END)

             ; FUNCTION proc_phone_return (BEGIN)
                                           ; SOURCE LINE # 3720
                                           ; SOURCE LINE # 3721
                                           ; SOURCE LINE # 3723
0000 120000      E     LCALL   FOsdWinOffAll
                                           ; SOURCE LINE # 3724
0003 020000      R     LJMP    proc_return_icon
             ; FUNCTION proc_phone_return (END)

             ; FUNCTION _proc_phone_cursor (BEGIN)
                                           ; SOURCE LINE # 3727
;---- Variable 'start' assigned to Register 'R6' ----
0000 AE07              MOV     R6,AR7
                                           ; SOURCE LINE # 3728
                                           ; SOURCE LINE # 3730
0002 120000      R     LCALL   L?0735
0005 120000      R     LCALL   L?0908
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 237 

;---- Variable 'text_info' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 3732
0008 900000      R     MOV     DPTR,#ch
000B 745F              MOV     A,#05FH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3733
000E 7F01              MOV     R7,#01H
0010 120000      E     LCALL   _FOsdBlinkOnOff
                                           ; SOURCE LINE # 3734
0013 120000      R     LCALL   L?0993
0016 AF06              MOV     R7,AR6
0018 120000      R     LCALL   L?0836
001B FD                MOV     R5,A
001C 120000      E     LCALL   _FOsdRamSetAddrAttr
                                           ; SOURCE LINE # 3735
001F 900000      R     MOV     DPTR,#ch
0022 120000      R     LCALL   L?0798
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3736
0027 E4                CLR     A
0028 FF                MOV     R7,A
0029 020000      E     LJMP    _FOsdBlinkOnOff
             ; FUNCTION _proc_phone_cursor (END)

             ; FUNCTION _proc_phone_digit (BEGIN)
                                           ; SOURCE LINE # 3739
0000 900000      R     MOV     DPTR,#fCursor
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#ch
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3740
                                           ; SOURCE LINE # 3742
000A 120000      R     LCALL   L?0735
000D 120000      R     LCALL   L?0908
0010 900000      R     MOV     DPTR,#text_info
0013 EB                MOV     A,R3
0014 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 3746
0017 120000      E     LCALL   _IsDigit
001A EF                MOV     A,R7
001B 602E              JZ      ?C0528
                                           ; SOURCE LINE # 3747
001D 900000      R     MOV     DPTR,#text_info
0020 120000      R     LCALL   L?0736
0023 120000      R     LCALL   L?0914
0026 900000      R     MOV     DPTR,#palette
                                           ; SOURCE LINE # 3748
0029 120000      R     LCALL   L?0992
002C 900000      R     MOV     DPTR,#phone_start
002F 120000      R     LCALL   L?0938
0032 900000      R     MOV     DPTR,#palette
0035 E0                MOVX    A,@DPTR
0036 13                RRC     A
0037 13                RRC     A
0038 543F              ANL     A,#03FH
003A FD                MOV     R5,A
003B 120000      E     LCALL   _FOsdRamSetAddrAttr
                                           ; SOURCE LINE # 3749
003E 900000      R     MOV     DPTR,#ch
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 238 

0041 E0                MOVX    A,@DPTR
0042 75F003            MOV     B,#03H
0045 A4                MUL     AB
0046 24F0              ADD     A,#0F0H
                                           ; SOURCE LINE # 3750
                                           ; SOURCE LINE # 3751
0048 020000      R     LJMP    ?C0727
004B         ?C0528:
                                           ; SOURCE LINE # 3752
                                           ; SOURCE LINE # 3753
004B 900000      R     MOV     DPTR,#text_info
004E 120000      R     LCALL   L?0736
0051 120000      R     LCALL   L?0837
0054 900000      R     MOV     DPTR,#palette
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3754
0058 900000      R     MOV     DPTR,#ch
005B E0                MOVX    A,@DPTR
005C 640B              XRL     A,#0BH
005E 702B              JNZ     ?C0530
                                           ; SOURCE LINE # 3755
0060 7420              MOV     A,#020H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3756
0063 120000      R     LCALL   L?0834
0066 FD                MOV     R5,A
0067 120000      E     LCALL   _FOsdRamSetAddrAttr
                                           ; SOURCE LINE # 3757
006A 120000      R     LCALL   L?0797
006D EF                MOV     A,R7
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3758
006F 900000      R     MOV     DPTR,#phone_start
0072 E0                MOVX    A,@DPTR
0073 6002              JZ      ?C0531
                                           ; SOURCE LINE # 3759
0075 14                DEC     A
0076 F0                MOVX    @DPTR,A
0077         ?C0531:
                                           ; SOURCE LINE # 3760
0077 900000      R     MOV     DPTR,#text_info
007A 120000      R     LCALL   L?0736
007D 120000      R     LCALL   L?0834
0080 FD                MOV     R5,A
0081 120000      E     LCALL   _FOsdRamSetAddrAttr
                                           ; SOURCE LINE # 3761
0084 120000      R     LCALL   L?0797
0087 EF                MOV     A,R7
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3762
0089 801C              SJMP    ?C0529
008B         ?C0530:
                                           ; SOURCE LINE # 3763
                                           ; SOURCE LINE # 3764
008B 900000      R     MOV     DPTR,#text_info
008E 120000      R     LCALL   L?0736
0091 120000      R     LCALL   L?0835
0094 FD                MOV     R5,A
0095 120000      E     LCALL   _FOsdRamSetAddrAttr
                                           ; SOURCE LINE # 3765
0098 900000      R     MOV     DPTR,#ch
009B E0                MOVX    A,@DPTR
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 239 

009C         ?C0727:
009C 120000      R     LCALL   L?0799
009F EF                MOV     A,R7
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3766
00A1 900000      R     MOV     DPTR,#phone_start
00A4 E0                MOVX    A,@DPTR
00A5 04                INC     A
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3767
                                           ; SOURCE LINE # 3768
00A7         ?C0529:
                                           ; SOURCE LINE # 3769
00A7 900000      R     MOV     DPTR,#fCursor
00AA E0                MOVX    A,@DPTR
00AB 6008              JZ      ?C0533
                                           ; SOURCE LINE # 3770
00AD 900000      R     MOV     DPTR,#phone_start
00B0 E0                MOVX    A,@DPTR
00B1 FF                MOV     R7,A
00B2 120000      R     LCALL   _proc_phone_cursor
00B5         ?C0533:
                                           ; SOURCE LINE # 3773
00B5 900000      R     MOV     DPTR,#phone_start
00B8 E0                MOVX    A,@DPTR
00B9 C3                CLR     C
00BA 941E              SUBB    A,#01EH
00BC 4003              JC      ?C0535
                                           ; SOURCE LINE # 3774
00BE 741E              MOV     A,#01EH
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3776
00C1         ?C0535:
00C1 22                RET     
             ; FUNCTION _proc_phone_digit (END)

             ; FUNCTION _proc_phone_string (BEGIN)
                                           ; SOURCE LINE # 3777
0000 900000      R     MOV     DPTR,#str
0003 EB                MOV     A,R3
0004 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 3778
                                           ; SOURCE LINE # 3782
0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0908
000D 900000      R     MOV     DPTR,#text_info
0010 EB                MOV     A,R3
0011 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 3783
0014 900000      R     MOV     DPTR,#text_info+01H
0017 E4                CLR     A
0018 75F00F            MOV     B,#0FH
001B 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 3785
001E 900000      R     MOV     DPTR,#text_info
0021 120000      R     LCALL   L?0736
0024 120000      R     LCALL   L?0837
0027 FD                MOV     R5,A
0028 900000      R     MOV     DPTR,#palette
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3786
002C 900001            MOV     DPTR,#01H
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 240 

002F 120000      R     LCALL   L?0822
0032 120000      E     LCALL   _FOsdRamSetAddrAttr
                                           ; SOURCE LINE # 3787
;---- Variable 'index' assigned to Register 'R7' ----
0035 E4                CLR     A
0036 FF                MOV     R7,A
0037         ?C0536:
                                           ; SOURCE LINE # 3788
0037 900000      R     MOV     DPTR,#str
003A 120000      R     LCALL   L?0736
003D 120000      E     LCALL   ?C?CLDPTR
0040 FE                MOV     R6,A
0041 6012              JZ      ?C0537
                                           ; SOURCE LINE # 3789
0043 120000      R     LCALL   L?0800
0046 EE                MOV     A,R6
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3790
0048 900000      R     MOV     DPTR,#str+01H
004B E4                CLR     A
004C 75F001            MOV     B,#01H
004F 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 3791
0052 0F                INC     R7
                                           ; SOURCE LINE # 3792
0053 80E2              SJMP    ?C0536
0055         ?C0537:
                                           ; SOURCE LINE # 3793
;---- Variable 'i' assigned to Register 'R7' ----
0055         ?C0538:
0055 900000      R     MOV     DPTR,#text_info
0058 120000      R     LCALL   L?0736
005B 900007            MOV     DPTR,#07H
005E 120000      E     LCALL   ?C?CLDOPTR
0061 FE                MOV     R6,A
0062 EF                MOV     A,R7
0063 C3                CLR     C
0064 9E                SUBB    A,R6
0065 5008              JNC     ?C0541
                                           ; SOURCE LINE # 3794
0067 120000      R     LCALL   L?0800
006A E4                CLR     A
006B F0                MOVX    @DPTR,A
006C 0F                INC     R7
006D 80E6              SJMP    ?C0538
                                           ; SOURCE LINE # 3795
006F         ?C0541:
006F 22                RET     
             ; FUNCTION _proc_phone_string (END)

             ; FUNCTION proc_phone_1 (BEGIN)
                                           ; SOURCE LINE # 3798
                                           ; SOURCE LINE # 3799
                                           ; SOURCE LINE # 3800
0000 7D01              MOV     R5,#01H
0002 7F31              MOV     R7,#031H
0004 120000      R     LCALL   _proc_phone_digit
                                           ; SOURCE LINE # 3801
0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0758
000D FD                MOV     R5,A
000E E4                CLR     A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 241 

000F FF                MOV     R7,A
0010 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_1 (END)

             ; FUNCTION proc_phone_2 (BEGIN)
                                           ; SOURCE LINE # 3803
                                           ; SOURCE LINE # 3804
                                           ; SOURCE LINE # 3805
0000 7D01              MOV     R5,#01H
0002 7F32              MOV     R7,#032H
0004 120000      R     LCALL   _proc_phone_digit
                                           ; SOURCE LINE # 3806
0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0758
000D FD                MOV     R5,A
000E E4                CLR     A
000F FF                MOV     R7,A
0010 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_2 (END)

             ; FUNCTION proc_phone_3 (BEGIN)
                                           ; SOURCE LINE # 3808
                                           ; SOURCE LINE # 3809
                                           ; SOURCE LINE # 3810
0000 7D01              MOV     R5,#01H
0002 7F33              MOV     R7,#033H
0004 120000      R     LCALL   _proc_phone_digit
                                           ; SOURCE LINE # 3811
0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0758
000D FD                MOV     R5,A
000E E4                CLR     A
000F FF                MOV     R7,A
0010 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_3 (END)

             ; FUNCTION proc_phone_4 (BEGIN)
                                           ; SOURCE LINE # 3813
                                           ; SOURCE LINE # 3814
                                           ; SOURCE LINE # 3815
0000 7D01              MOV     R5,#01H
0002 7F34              MOV     R7,#034H
0004 120000      R     LCALL   _proc_phone_digit
                                           ; SOURCE LINE # 3816
0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0758
000D FD                MOV     R5,A
000E E4                CLR     A
000F FF                MOV     R7,A
0010 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_4 (END)

             ; FUNCTION proc_phone_5 (BEGIN)
                                           ; SOURCE LINE # 3818
                                           ; SOURCE LINE # 3819
                                           ; SOURCE LINE # 3820
0000 7D01              MOV     R5,#01H
0002 7F35              MOV     R7,#035H
0004 120000      R     LCALL   _proc_phone_digit
                                           ; SOURCE LINE # 3821
0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0758
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 242 

000D FD                MOV     R5,A
000E E4                CLR     A
000F FF                MOV     R7,A
0010 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_5 (END)

             ; FUNCTION proc_phone_6 (BEGIN)
                                           ; SOURCE LINE # 3823
                                           ; SOURCE LINE # 3824
                                           ; SOURCE LINE # 3825
0000 7D01              MOV     R5,#01H
0002 7F36              MOV     R7,#036H
0004 120000      R     LCALL   _proc_phone_digit
                                           ; SOURCE LINE # 3826
0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0758
000D FD                MOV     R5,A
000E E4                CLR     A
000F FF                MOV     R7,A
0010 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_6 (END)

             ; FUNCTION proc_phone_7 (BEGIN)
                                           ; SOURCE LINE # 3828
                                           ; SOURCE LINE # 3829
                                           ; SOURCE LINE # 3830
0000 7D01              MOV     R5,#01H
0002 7F37              MOV     R7,#037H
0004 120000      R     LCALL   _proc_phone_digit
                                           ; SOURCE LINE # 3831
0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0758
000D FD                MOV     R5,A
000E E4                CLR     A
000F FF                MOV     R7,A
0010 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_7 (END)

             ; FUNCTION proc_phone_8 (BEGIN)
                                           ; SOURCE LINE # 3833
                                           ; SOURCE LINE # 3834
                                           ; SOURCE LINE # 3835
0000 7D01              MOV     R5,#01H
0002 7F38              MOV     R7,#038H
0004 120000      R     LCALL   _proc_phone_digit
                                           ; SOURCE LINE # 3836
0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0758
000D FD                MOV     R5,A
000E E4                CLR     A
000F FF                MOV     R7,A
0010 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_8 (END)

             ; FUNCTION proc_phone_9 (BEGIN)
                                           ; SOURCE LINE # 3838
                                           ; SOURCE LINE # 3839
                                           ; SOURCE LINE # 3840
0000 7D01              MOV     R5,#01H
0002 7F39              MOV     R7,#039H
0004 120000      R     LCALL   _proc_phone_digit
                                           ; SOURCE LINE # 3841
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 243 

0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0758
000D FD                MOV     R5,A
000E E4                CLR     A
000F FF                MOV     R7,A
0010 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_9 (END)

             ; FUNCTION proc_phone_star (BEGIN)
                                           ; SOURCE LINE # 3843
                                           ; SOURCE LINE # 3844
                                           ; SOURCE LINE # 3845
0000 7D01              MOV     R5,#01H
0002 7F2A              MOV     R7,#02AH
0004 120000      R     LCALL   _proc_phone_digit
                                           ; SOURCE LINE # 3846
0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0758
000D FD                MOV     R5,A
000E E4                CLR     A
000F FF                MOV     R7,A
0010 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_star (END)

             ; FUNCTION proc_phone_0 (BEGIN)
                                           ; SOURCE LINE # 3848
                                           ; SOURCE LINE # 3849
                                           ; SOURCE LINE # 3850
0000 7D01              MOV     R5,#01H
0002 7F30              MOV     R7,#030H
0004 120000      R     LCALL   _proc_phone_digit
                                           ; SOURCE LINE # 3851
0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0758
000D FD                MOV     R5,A
000E E4                CLR     A
000F FF                MOV     R7,A
0010 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_0 (END)

             ; FUNCTION proc_phone_sharp (BEGIN)
                                           ; SOURCE LINE # 3853
                                           ; SOURCE LINE # 3854
                                           ; SOURCE LINE # 3855
0000 7D01              MOV     R5,#01H
0002 7F23              MOV     R7,#023H
0004 120000      R     LCALL   _proc_phone_digit
                                           ; SOURCE LINE # 3856
0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0758
000D FD                MOV     R5,A
000E E4                CLR     A
000F FF                MOV     R7,A
0010 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_sharp (END)

             ; FUNCTION proc_phone_dial (BEGIN)
                                           ; SOURCE LINE # 3858
                                           ; SOURCE LINE # 3859
                                           ; SOURCE LINE # 3860
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_204
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 244 

0004 7900        R     MOV     R1,#LOW ?SC_204
0006 120000      R     LCALL   _proc_phone_string
                                           ; SOURCE LINE # 3861
0009 120000      R     LCALL   L?0735
000C 120000      R     LCALL   L?0758
000F FD                MOV     R5,A
0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_dial (END)

             ; FUNCTION proc_phone_up (BEGIN)
                                           ; SOURCE LINE # 3863
                                           ; SOURCE LINE # 3864
                                           ; SOURCE LINE # 3865
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_212
0004 7900        R     MOV     R1,#LOW ?SC_212
0006 120000      R     LCALL   _proc_phone_string
                                           ; SOURCE LINE # 3866
0009 120000      R     LCALL   L?0735
000C 120000      R     LCALL   L?0758
000F FD                MOV     R5,A
0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_up (END)

             ; FUNCTION proc_phone_down (BEGIN)
                                           ; SOURCE LINE # 3868
                                           ; SOURCE LINE # 3869
                                           ; SOURCE LINE # 3870
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_215
0004 7900        R     MOV     R1,#LOW ?SC_215
0006 120000      R     LCALL   _proc_phone_string
                                           ; SOURCE LINE # 3871
0009 120000      R     LCALL   L?0735
000C 120000      R     LCALL   L?0758
000F FD                MOV     R5,A
0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_down (END)

             ; FUNCTION proc_phone_check (BEGIN)
                                           ; SOURCE LINE # 3873
                                           ; SOURCE LINE # 3874
                                           ; SOURCE LINE # 3875
0000 7D01              MOV     R5,#01H
0002 7F0B              MOV     R7,#0BH
0004 120000      R     LCALL   _proc_phone_digit
                                           ; SOURCE LINE # 3876
0007 120000      R     LCALL   L?0735
000A 120000      R     LCALL   L?0758
000D FD                MOV     R5,A
000E E4                CLR     A
000F FF                MOV     R7,A
0010 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_check (END)

             ; FUNCTION proc_phone_left (BEGIN)
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 245 

                                           ; SOURCE LINE # 3878
                                           ; SOURCE LINE # 3879
                                           ; SOURCE LINE # 3880
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_220
0004 7900        R     MOV     R1,#LOW ?SC_220
0006 120000      R     LCALL   _proc_phone_string
                                           ; SOURCE LINE # 3881
0009 120000      R     LCALL   L?0735
000C 120000      R     LCALL   L?0758
000F FD                MOV     R5,A
0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_left (END)

             ; FUNCTION proc_phone_right (BEGIN)
                                           ; SOURCE LINE # 3883
                                           ; SOURCE LINE # 3884
                                           ; SOURCE LINE # 3885
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_225
0004 7900        R     MOV     R1,#LOW ?SC_225
0006 120000      R     LCALL   _proc_phone_string
                                           ; SOURCE LINE # 3886
0009 120000      R     LCALL   L?0735
000C 120000      R     LCALL   L?0758
000F FD                MOV     R5,A
0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_right (END)

             ; FUNCTION proc_phone_help (BEGIN)
                                           ; SOURCE LINE # 3888
                                           ; SOURCE LINE # 3889
                                           ; SOURCE LINE # 3890
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_231
0004 7900        R     MOV     R1,#LOW ?SC_231
0006 120000      R     LCALL   _proc_phone_string
                                           ; SOURCE LINE # 3891
0009 120000      R     LCALL   L?0735
000C 120000      R     LCALL   L?0758
000F FD                MOV     R5,A
0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_help (END)

             ; FUNCTION proc_phone_dir (BEGIN)
                                           ; SOURCE LINE # 3893
                                           ; SOURCE LINE # 3894
                                           ; SOURCE LINE # 3895
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_236
0004 7900        R     MOV     R1,#LOW ?SC_236
0006 120000      R     LCALL   _proc_phone_string
                                           ; SOURCE LINE # 3896
0009 120000      R     LCALL   L?0735
000C 120000      R     LCALL   L?0758
000F FD                MOV     R5,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 246 

0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_dir (END)

             ; FUNCTION proc_phone_set (BEGIN)
                                           ; SOURCE LINE # 3898
                                           ; SOURCE LINE # 3899
                                           ; SOURCE LINE # 3900
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_246
0004 7900        R     MOV     R1,#LOW ?SC_246
0006 120000      R     LCALL   _proc_phone_string
                                           ; SOURCE LINE # 3901
0009 120000      R     LCALL   L?0735
000C 120000      R     LCALL   L?0758
000F FD                MOV     R5,A
0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_set (END)

             ; FUNCTION proc_phone_msg (BEGIN)
                                           ; SOURCE LINE # 3903
                                           ; SOURCE LINE # 3904
                                           ; SOURCE LINE # 3905
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_255
0004 7900        R     MOV     R1,#LOW ?SC_255
0006 120000      R     LCALL   _proc_phone_string
                                           ; SOURCE LINE # 3906
0009 120000      R     LCALL   L?0735
000C 120000      R     LCALL   L?0758
000F FD                MOV     R5,A
0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_msg (END)

             ; FUNCTION proc_phone_menu (BEGIN)
                                           ; SOURCE LINE # 3908
                                           ; SOURCE LINE # 3909
                                           ; SOURCE LINE # 3910
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_264
0004 7900        R     MOV     R1,#LOW ?SC_264
0006 120000      R     LCALL   _proc_phone_string
                                           ; SOURCE LINE # 3911
0009 120000      R     LCALL   L?0735
000C 120000      R     LCALL   L?0758
000F FD                MOV     R5,A
0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 020000      R     LJMP    _MenuDrawCurrImage
             ; FUNCTION proc_phone_menu (END)

             ; FUNCTION proc_carinfo_bg (BEGIN)
                                           ; SOURCE LINE # 3923
                                           ; SOURCE LINE # 3924
                                           ; SOURCE LINE # 3925
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_carinfo_bg (END)
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 247 


             ; FUNCTION proc_demo_bg (BEGIN)
                                           ; SOURCE LINE # 3935
                                           ; SOURCE LINE # 3936
                                           ; SOURCE LINE # 3937
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_demo_bg (END)

             ; FUNCTION proc_grid_demo_start (BEGIN)
                                           ; SOURCE LINE # 3940
                                           ; SOURCE LINE # 3941
                                           ; SOURCE LINE # 3942
0000 7F01              MOV     R7,#01H
0002 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 3943
0005 E4                CLR     A
0006 FD                MOV     R5,A
0007 7F08              MOV     R7,#08H
0009 120000      E     LCALL   _SpiOsdWinHWEnable
                                           ; SOURCE LINE # 3946
000C 120000      R     LCALL   MenuEnd
                                           ; SOURCE LINE # 3948
000F 120000      E     LCALL   MovingGridInit
                                           ; SOURCE LINE # 3950
0012 120000      E     LCALL   MovingGridTask_init
                                           ; SOURCE LINE # 3953
0015 120000      R     LCALL   L?0925
                                           ; SOURCE LINE # 3954
0018 22                RET     
             ; FUNCTION proc_grid_demo_start (END)

             ; FUNCTION proc_rose_demo_start (BEGIN)
                                           ; SOURCE LINE # 3965
                                           ; SOURCE LINE # 3966
                                           ; SOURCE LINE # 3967
0000 7F01              MOV     R7,#01H
0002 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 3968
0005 120000      R     LCALL   MenuEnd
                                           ; SOURCE LINE # 3970
0008 7F01              MOV     R7,#01H
000A 120000      E     LCALL   _SpiOsdWinHWOffAll
                                           ; SOURCE LINE # 3972
000D 120000      E     LCALL   RoseDemo
                                           ; SOURCE LINE # 3975
0010 120000      R     LCALL   L?0926
                                           ; SOURCE LINE # 3976
0013 22                RET     
             ; FUNCTION proc_rose_demo_start (END)

             ; FUNCTION proc_test1_demo_start (BEGIN)
                                           ; SOURCE LINE # 3978
                                           ; SOURCE LINE # 3979
                                           ; SOURCE LINE # 3980
0000 7F01              MOV     R7,#01H
0002 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 3981
0005 120000      R     LCALL   MenuEnd
                                           ; SOURCE LINE # 3983
0008 020000      E     LJMP    DumpFontOsdPalette
             ; FUNCTION proc_test1_demo_start (END)

C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 248 

             ; FUNCTION proc_wait_menu_start (BEGIN)
                                           ; SOURCE LINE # 3991
                                           ; SOURCE LINE # 3992
                                           ; SOURCE LINE # 3995
0000 900000      R     MOV     DPTR,#header
0003 120000      R     LCALL   L?0812
                                           ; SOURCE LINE # 3998
0006 120000      R     LCALL   L?0735
0009 120000      R     LCALL   L?0758
000C FF                MOV     R7,A
;---- Variable 'item' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 3999
000D 120000      R     LCALL   L?0809
0010 EF                MOV     A,R7
0011 120000      R     LCALL   L?0784
0014 900000      R     MOV     DPTR,#menu_item
0017 EB                MOV     A,R3
0018 120000      R     LCALL   L?0753
                                           ; SOURCE LINE # 4000
001B A3                INC     DPTR
001C 74FF              MOV     A,#0FFH
001E F0                MOVX    @DPTR,A
001F A3                INC     DPTR
0020 7400        E     MOV     A,#HIGH img_wait
0022 F0                MOVX    @DPTR,A
0023 A3                INC     DPTR
0024 7400        E     MOV     A,#LOW img_wait
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4002
0027 7F01              MOV     R7,#01H
0029 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 4004
002C E4                CLR     A
002D FF                MOV     R7,A
002E 120000      E     LCALL   _SOsdWinBuffClean
                                           ; SOURCE LINE # 4007
0031 900000      R     MOV     DPTR,#image
0034 120000      R     LCALL   L?0736
0037 120000      R     LCALL   _MenuPrepareImageHeader
                                           ; SOURCE LINE # 4009
003A 900000      R     MOV     DPTR,#header
003D 120000      R     LCALL   L?0736
0040 900004            MOV     DPTR,#04H
0043 120000      E     LCALL   ?C?LLDOPTR
0046 900000      E     MOV     DPTR,#?_SpiOsdWinImageLoc?BYTE+01H
0049 120000      E     LCALL   ?C?LSTXDATA
004C E4                CLR     A
004D FF                MOV     R7,A
004E 120000      E     LCALL   _SpiOsdWinImageLoc
                                           ; SOURCE LINE # 4010
0051 900000      R     MOV     DPTR,#header
0054 120000      R     LCALL   L?0736
0057 120000      R     LCALL   L?0803
005A FB                MOV     R3,A
005B AAF0              MOV     R2,B
005D E4                CLR     A
005E FF                MOV     R7,A
005F 120000      E     LCALL   _SpiOsdWinImageSizeWH
                                           ; SOURCE LINE # 4011
0062 900000      R     MOV     DPTR,#header
0065 120000      R     LCALL   L?0736
0068 90000B            MOV     DPTR,#0BH
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 249 

006B 120000      E     LCALL   ?C?ILDOPTR
006E 120000      R     LCALL   L?0976
0071 C3                CLR     C
0072 7490              MOV     A,#090H
0074 9F                SUBB    A,R7
0075 FD                MOV     R5,A
0076 7401              MOV     A,#01H
0078 9E                SUBB    A,R6
0079 FC                MOV     R4,A
007A 120000      R     LCALL   L?0804
007D 120000      R     LCALL   L?0976
0080 C3                CLR     C
0081 74F0              MOV     A,#0F0H
0083 9F                SUBB    A,R7
0084 FB                MOV     R3,A
0085 E4                CLR     A
0086 9E                SUBB    A,R6
0087 FA                MOV     R2,A
0088 C002              PUSH    AR2
008A C003              PUSH    AR3
008C 900000      R     MOV     DPTR,#header
008F E0                MOVX    A,@DPTR
0090 FB                MOV     R3,A
0091 A3                INC     DPTR
0092 E0                MOVX    A,@DPTR
0093 FA                MOV     R2,A
0094 120000      R     LCALL   L?0838
0097 120000      R     LCALL   L?0804
009A FF                MOV     R7,A
009B 900000      E     MOV     DPTR,#?_SpiOsdWinScreen?BYTE+07H
009E 120000      R     LCALL   L?0840
00A1 D003              POP     AR3
00A3 D002              POP     AR2
00A5 E4                CLR     A
00A6 FF                MOV     R7,A
00A7 120000      E     LCALL   _SpiOsdWinScreen
                                           ; SOURCE LINE # 4012
00AA E4                CLR     A
00AB FD                MOV     R5,A
00AC FC                MOV     R4,A
00AD FF                MOV     R7,A
00AE FE                MOV     R6,A
00AF 120000      E     LCALL   _SpiOsdWin0ImageOffsetXY
                                           ; SOURCE LINE # 4013
00B2 900000      E     MOV     DPTR,#?_SpiOsdWin0Animation?BYTE+03H
00B5 7403              MOV     A,#03H
00B7 F0                MOVX    @DPTR,A
00B8 7B09              MOV     R3,#09H
00BA 7F02              MOV     R7,#02H
00BC 120000      E     LCALL   _SpiOsdWin0Animation
                                           ; SOURCE LINE # 4014
00BF 7F01              MOV     R7,#01H
00C1 120000      E     LCALL   _SpiOsdWin0SetPriority
                                           ; SOURCE LINE # 4017
00C4 0D                INC     R5
00C5 1F                DEC     R7
00C6 120000      E     LCALL   _SpiOsdWinPixelAlpha
                                           ; SOURCE LINE # 4018
00C9 900000      R     MOV     DPTR,#header
00CC 120000      R     LCALL   L?0736
00CF 120000      R     LCALL   L?0845
00D2 FD                MOV     R5,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 250 

00D3 E4                CLR     A
00D4 FF                MOV     R7,A
00D5 120000      E     LCALL   _SpiOsdWinPixelWidth
                                           ; SOURCE LINE # 4019
00D8 900000      R     MOV     DPTR,#menu_item
00DB 120000      R     LCALL   L?0736
00DE 120000      R     LCALL   L?0862
00E1 E4                CLR     A
00E2 FF                MOV     R7,A
00E3 120000      E     LCALL   _SpiOsdWinLutOffset
                                           ; SOURCE LINE # 4021
00E6 7D01              MOV     R5,#01H
00E8 E4                CLR     A
00E9 FF                MOV     R7,A
00EA 120000      E     LCALL   _SpiOsdWinBuffEnable
                                           ; SOURCE LINE # 4024
00ED 7F01              MOV     R7,#01H
00EF 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 4025
00F2 900000      R     MOV     DPTR,#header
00F5 120000      R     LCALL   L?0736
00F8 120000      R     LCALL   L?0842
00FB FD                MOV     R5,A
00FC C005              PUSH    AR5
00FE 900000      R     MOV     DPTR,#menu_item
0101 120000      R     LCALL   L?0736
0104 120000      R     LCALL   L?0893
0107 FB                MOV     R3,A
0108 AAF0              MOV     R2,B
010A C002              PUSH    AR2
010C C003              PUSH    AR3
010E 900000      R     MOV     DPTR,#header
0111 120000      R     LCALL   L?0736
0114 120000      R     LCALL   L?0990
0117 120000      R     LCALL   L?0840
011A 120000      R     LCALL   L?0968
011D D003              POP     AR3
011F D002              POP     AR2
0121 D005              POP     AR5
0123 E4                CLR     A
0124 FF                MOV     R7,A
0125 120000      E     LCALL   _SpiOsdLoadLUT
                                           ; SOURCE LINE # 4026
0128 E4                CLR     A
0129 FD                MOV     R5,A
012A FF                MOV     R7,A
012B 120000      E     LCALL   _SOsdWinBuffWrite2Hw
                                           ; SOURCE LINE # 4027
012E 900000      R     MOV     DPTR,#image
0131 120000      R     LCALL   L?0736
0134 120000      R     LCALL   L?0842
0137 FF                MOV     R7,A
0138 900000      R     MOV     DPTR,#menu_item
013B 120000      R     LCALL   L?0736
013E 120000      R     LCALL   L?0893
0141 120000      R     LCALL   L?0939
0144 7D7F              MOV     R5,#07FH
0146 020000      E     LJMP    _SpiOsdPixelAlphaAttr
             ; FUNCTION proc_wait_menu_start (END)

             ; FUNCTION proc_wait_demo_start (BEGIN)
                                           ; SOURCE LINE # 4031
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 251 

                                           ; SOURCE LINE # 4032
                                           ; SOURCE LINE # 4033
0000 7F01              MOV     R7,#01H
0002 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 4034
0005 120000      R     LCALL   MenuEnd
                                           ; SOURCE LINE # 4035
0008 020000      R     LJMP    proc_wait_menu_start
             ; FUNCTION proc_wait_demo_start (END)

             ; FUNCTION proc_touch_bg (BEGIN)
                                           ; SOURCE LINE # 4049
                                           ; SOURCE LINE # 4050
                                           ; SOURCE LINE # 4051
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_touch_bg (END)

             ; FUNCTION proc_touch_bg_end (BEGIN)
                                           ; SOURCE LINE # 4053
                                           ; SOURCE LINE # 4054
                                           ; SOURCE LINE # 4055
0000 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 4056
0003 120000      R     LCALL   L?0735
0006 120000      R     LCALL   L?0744
0009 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_touch_bg_end (END)

             ; FUNCTION proc_touch_button1 (BEGIN)
                                           ; SOURCE LINE # 4062
                                           ; SOURCE LINE # 4063
                                           ; SOURCE LINE # 4067
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0922
                                           ; SOURCE LINE # 4068
0006 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_touch_button1 (END)

             ; FUNCTION proc_touch_button2 (BEGIN)
                                           ; SOURCE LINE # 4071
                                           ; SOURCE LINE # 4072
                                           ; SOURCE LINE # 4074
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0922
                                           ; SOURCE LINE # 4075
0006 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_touch_button2 (END)

             ; FUNCTION proc_touch_button3 (BEGIN)
                                           ; SOURCE LINE # 4078
                                           ; SOURCE LINE # 4079
                                           ; SOURCE LINE # 4081
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0923
                                           ; SOURCE LINE # 4082
0006 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_touch_button3 (END)

             ; FUNCTION proc_touch_button4 (BEGIN)
                                           ; SOURCE LINE # 4086
                                           ; SOURCE LINE # 4087
                                           ; SOURCE LINE # 4089
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 252 

0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0923
                                           ; SOURCE LINE # 4090
0006 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_touch_button4 (END)

             ; FUNCTION proc_touch_button5 (BEGIN)
                                           ; SOURCE LINE # 4093
                                           ; SOURCE LINE # 4094
                                           ; SOURCE LINE # 4095
0000 120000      R     LCALL   L?1005
                                           ; SOURCE LINE # 4096
0003 120000      E     LCALL   SOsdHwBuffClean
                                           ; SOURCE LINE # 4097
0006 E4                CLR     A
0007 FF                MOV     R7,A
0008 120000      E     LCALL   _SOsdWinBuffClean
                                           ; SOURCE LINE # 4103
000B 7D01              MOV     R5,#01H
000D E4                CLR     A
000E FF                MOV     R7,A
000F 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 4105
0012 120000      R     LCALL   L?0735
0015 900001            MOV     DPTR,#01H
0018 7402              MOV     A,#02H
                                           ; SOURCE LINE # 4106
001A 120000      R     LCALL   L?0757
001D FD                MOV     R5,A
001E E4                CLR     A
001F FF                MOV     R7,A
0020 120000      R     LCALL   _MenuDrawCurrImage
                                           ; SOURCE LINE # 4108
0023 900000      R     MOV     DPTR,#UseSOsdHwBuff
0026 E0                MOVX    A,@DPTR
0027 6008              JZ      ?C0579
                                           ; SOURCE LINE # 4109
0029 120000      E     LCALL   SOsdHwBuffWrite2Hw
                                           ; SOURCE LINE # 4110
002C E4                CLR     A
002D 900000      R     MOV     DPTR,#UseSOsdHwBuff
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4111
                                           ; SOURCE LINE # 4113
0031         ?C0579:
0031 22                RET     
             ; FUNCTION proc_touch_button5 (END)

             ; FUNCTION proc_touch_calib_end (BEGIN)
                                           ; SOURCE LINE # 4115
                                           ; SOURCE LINE # 4116
                                           ; SOURCE LINE # 4122
0000 120000      R     LCALL   pop_menu_stack_level
                                           ; SOURCE LINE # 4123
0003 120000      R     LCALL   L?0735
0006 120000      R     LCALL   L?0744
0009 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_touch_calib_end (END)

             ; FUNCTION proc_touch_ok (BEGIN)
                                           ; SOURCE LINE # 4127
                                           ; SOURCE LINE # 4128
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 253 

                                           ; SOURCE LINE # 4140
0000 7F01              MOV     R7,#01H
0002 120000      E     LCALL   _SaveCalibDataToEE
                                           ; SOURCE LINE # 4147
0005 020000      R     LJMP    proc_touch_calib_end
             ; FUNCTION proc_touch_ok (END)

             ; FUNCTION proc_touch_cancel (BEGIN)
                                           ; SOURCE LINE # 4151
                                           ; SOURCE LINE # 4152
                                           ; SOURCE LINE # 4164
0000 020000      R     LJMP    proc_touch_calib_end
             ; FUNCTION proc_touch_cancel (END)

             ; FUNCTION MenuIsTouchCalibMode (BEGIN)
                                           ; SOURCE LINE # 4170
                                           ; SOURCE LINE # 4171
                                           ; SOURCE LINE # 4172
0000 120000      R     LCALL   L?0735
0003 120000      R     LCALL   L?0833
0006 700A              JNZ     ?C0682
0008 7400        E     MOV     A,#LOW menu_touch_page
000A 6582              XRL     A,DPL
000C 7004              JNZ     ?C0682
000E 7400        E     MOV     A,#HIGH menu_touch_page
0010 6583              XRL     A,DPH
0012         ?C0682:
0012 7023              JNZ     ?C0583
                                           ; SOURCE LINE # 4173
0014 120000      R     LCALL   L?0735
0017 120000      R     LCALL   L?0806
001A FF                MOV     R7,A
001B 120000      R     LCALL   L?0758
001E FE                MOV     R6,A
001F C3                CLR     C
0020 9F                SUBB    A,R7
0021 4014              JC      ?C0583
0023 EF                MOV     A,R7
0024 2405              ADD     A,#05H
0026 120000      R     LCALL   L?0891
0029 500C              JNC     ?C0583
                                           ; SOURCE LINE # 4174
002B 120000      R     LCALL   L?0806
002E FF                MOV     R7,A
002F 120000      R     LCALL   L?0758
0032 C3                CLR     C
0033 9F                SUBB    A,R7
0034 04                INC     A
0035 FF                MOV     R7,A
0036 22                RET     
                                           ; SOURCE LINE # 4176
0037         ?C0583:
                                           ; SOURCE LINE # 4177
0037 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 4178
0039         ?C0585:
0039 22                RET     
             ; FUNCTION MenuIsTouchCalibMode (END)

             ; FUNCTION MenuTouchCalibStart (BEGIN)
                                           ; SOURCE LINE # 4182
                                           ; SOURCE LINE # 4183
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 254 

                                           ; SOURCE LINE # 4186
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 120000      E     LCALL   _SaveCalibDataToEE
                                           ; SOURCE LINE # 4189
                                           ; SOURCE LINE # 4190
0005 120000      R     LCALL   L?1009
0008 120000      R     LCALL   L?0751
                                           ; SOURCE LINE # 4191
000B 900003            MOV     DPTR,#03H
                                           ; SOURCE LINE # 4192
000E 120000      R     LCALL   L?0755
0011 900002            MOV     DPTR,#02H
                                           ; SOURCE LINE # 4195
0014 120000      R     LCALL   L?0743
0017 020000      E     LJMP    ?C?ICALL
             ; FUNCTION MenuTouchCalibStart (END)

             ; FUNCTION proc_display_bg (BEGIN)
                                           ; SOURCE LINE # 4208
                                           ; SOURCE LINE # 4209
                                           ; SOURCE LINE # 4210
0000 020000      R     LJMP    proc_menu_bg
             ; FUNCTION proc_display_bg (END)

             ; FUNCTION proc_display_aspect (BEGIN)
                                           ; SOURCE LINE # 4212
                                           ; SOURCE LINE # 4213
                                           ; SOURCE LINE # 4214
                                           ; SOURCE LINE # 4216
0000 120000      R     LCALL   L?0898
0003 7400        E     MOV     A,#HIGH menu_aspect_page
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 7400        E     MOV     A,#LOW menu_aspect_page
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4217
000A 120000      E     LCALL   GetAspectModeEE
000D EF                MOV     A,R7
000E 2403              ADD     A,#03H
0010 120000      R     LCALL   L?0734
0013 900001            MOV     DPTR,#01H
0016 EF                MOV     A,R7
                                           ; SOURCE LINE # 4218
0017 120000      R     LCALL   L?0757
001A 120000      R     LCALL   L?0849
                                           ; SOURCE LINE # 4219
001D 120000      R     LCALL   L?0767
0020 900000      R     MOV     DPTR,#cancel_recover_value
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4220
0024 120000      R     LCALL   L?0744
0027 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_display_aspect (END)

             ; FUNCTION proc_display_osd (BEGIN)
                                           ; SOURCE LINE # 4223
                                           ; SOURCE LINE # 4224
                                           ; SOURCE LINE # 4225
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 4227
0003 7B01              MOV     R3,#01H
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 255 

0005 7A00        E     MOV     R2,#HIGH menu_osd_page
0007 7900        E     MOV     R1,#LOW menu_osd_page
0009 120000      R     LCALL   L?0751
                                           ; SOURCE LINE # 4228
000C 120000      R     LCALL   L?0806
                                           ; SOURCE LINE # 4229
000F 120000      R     LCALL   L?0742
0012 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_display_osd (END)

             ; FUNCTION proc_display_flip (BEGIN)
                                           ; SOURCE LINE # 4231
                                           ; SOURCE LINE # 4232
                                           ; SOURCE LINE # 4233
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 4235
0003 7B01              MOV     R3,#01H
0005 7A00        E     MOV     R2,#HIGH menu_mirror_page
0007 7900        E     MOV     R1,#LOW menu_mirror_page
                                           ; SOURCE LINE # 4236
                                           ; SOURCE LINE # 4237
0009 120000      R     LCALL   L?0740
000C 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_display_flip (END)

             ; FUNCTION proc_display_backlight (BEGIN)
                                           ; SOURCE LINE # 4239
                                           ; SOURCE LINE # 4240
                                           ; SOURCE LINE # 4241
                                           ; SOURCE LINE # 4243
0000 120000      R     LCALL   L?0748
                                           ; SOURCE LINE # 4244
                                           ; SOURCE LINE # 4245
                                           ; SOURCE LINE # 4247
0003 120000      R     LCALL   L?0773
0006 7400        E     MOV     A,#HIGH BackLightGetRate
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A 7400        E     MOV     A,#LOW BackLightGetRate
000C 120000      R     LCALL   L?0779
000F 7400        E     MOV     A,#HIGH _BackLightSetRate
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 7400        E     MOV     A,#LOW _BackLightSetRate
0015 120000      R     LCALL   L?0854
0018 7400        E     MOV     A,#HIGH _BackLightSetRate
001A 120000      R     LCALL   L?0777
001D 7400        E     MOV     A,#HIGH BackLightChangeRate
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 7400        E     MOV     A,#LOW BackLightChangeRate
0023 F0                MOVX    @DPTR,A
0024 7BFF              MOV     R3,#0FFH
0026 7A00        E     MOV     R2,#HIGH img_slide_backlight
0028 7900        E     MOV     R1,#LOW img_slide_backlight
002A 120000      R     LCALL   _InitSlideCtrl
                                           ; SOURCE LINE # 4253
002D 120000      R     LCALL   L?0735
0030 120000      R     LCALL   L?0744
0033 020000      E     LJMP    ?C?ICALL
             ; FUNCTION proc_display_backlight (END)

C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 256 

             ; FUNCTION proc_display_resolution (BEGIN)
                                           ; SOURCE LINE # 4257
                                           ; SOURCE LINE # 4258
                                           ; SOURCE LINE # 4262
0000 120000      R     LCALL   push_menu_stack_level
                                           ; SOURCE LINE # 4296
0003 7B01              MOV     R3,#01H
0005 7A00        E     MOV     R2,#HIGH menu_disp_resolution_page
0007 7900        E     MOV     R1,#LOW menu_disp_resolution_page
                                           ; SOURCE LINE # 4297
                                           ; SOURCE LINE # 4299
0009 120000      R     LCALL   L?0740
000C 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 4302
000F 7D01              MOV     R5,#01H
0011 E4                CLR     A
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _MenuFontOsdItemInit
                                           ; SOURCE LINE # 4303
0016 7D01              MOV     R5,#01H
0018 7F01              MOV     R7,#01H
001A 120000      R     LCALL   _MenuFontOsdItemInit
                                           ; SOURCE LINE # 4310
001D E500        E     MOV     A,regTW88+01H
001F 241C              ADD     A,#01CH
0021 120000      R     LCALL   L?0860
0024 E0                MOVX    A,@DPTR
0025 30E208            JNB     ACC.2,?C0592
                                           ; SOURCE LINE # 4312
0028 7BFF              MOV     R3,#0FFH
002A 7A00        R     MOV     R2,#HIGH ?SC_269
002C 7900        R     MOV     R1,#LOW ?SC_269
                                           ; SOURCE LINE # 4313
002E 8006              SJMP    ?C0728
0030         ?C0592:
                                           ; SOURCE LINE # 4314
                                           ; SOURCE LINE # 4325
0030 7B01              MOV     R3,#01H
0032 7A00        E     MOV     R2,#HIGH FOsdMsgBuff
0034 7900        E     MOV     R1,#LOW FOsdMsgBuff
0036         ?C0728:
0036 E4                CLR     A
0037 FF                MOV     R7,A
0038 120000      R     LCALL   _MenuFontOsdItemString
                                           ; SOURCE LINE # 4328
003B         ?C0593:
                                           ; SOURCE LINE # 4329
003B 120000      R     LCALL   L?0943
003E 7F20              MOV     R7,#020H
0040 7E03              MOV     R6,#03H
0042 120000      E     LCALL   _TWitoa
                                           ; SOURCE LINE # 4330
0045 900000      E     MOV     DPTR,#?_TWstrcat?BYTE+03H
0048 74FF              MOV     A,#0FFH
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C 7400        R     MOV     A,#HIGH ?SC_273
004E F0                MOVX    @DPTR,A
004F 7400        R     MOV     A,#LOW ?SC_273
0051 120000      R     LCALL   L?0942
0054 120000      E     LCALL   _TWstrcat
                                           ; SOURCE LINE # 4331
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 257 

0057 120000      R     LCALL   L?0975
005A 7FE0              MOV     R7,#0E0H
005C 7E01              MOV     R6,#01H
005E 120000      E     LCALL   _TWitoa
                                           ; SOURCE LINE # 4332
0061 900000      E     MOV     DPTR,#?_TWstrcat?BYTE+03H
0064 7401              MOV     A,#01H
0066 F0                MOVX    @DPTR,A
0067 A3                INC     DPTR
0068 7400        R     MOV     A,#HIGH menu_str_buff
006A F0                MOVX    @DPTR,A
006B 7400        R     MOV     A,#LOW menu_str_buff
006D 120000      R     LCALL   L?0942
0070 120000      E     LCALL   _TWstrcat
                                           ; SOURCE LINE # 4333
0073 120000      R     LCALL   L?0943
0076 7F01              MOV     R7,#01H
0078 020000      R     LJMP    _MenuFontOsdItemString
             ; FUNCTION proc_display_resolution (END)

             ; FUNCTION MenuStart (BEGIN)
                                           ; SOURCE LINE # 4395
                                           ; SOURCE LINE # 4396
                                           ; SOURCE LINE # 4398
0000 900000      R     MOV     DPTR,#menu_on
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4399
0006 E4                CLR     A
0007 900000      R     MOV     DPTR,#menu_lock_scroll
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4400
000B 900000      R     MOV     DPTR,#UseSOsdHwBuff
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4403
000F 120000      E     LCALL   TaskNoSignal_getCmd
0012 EF                MOV     A,R7
0013 6005              JZ      ?C0595
                                           ; SOURCE LINE # 4405
0015 E4                CLR     A
0016 FF                MOV     R7,A
0017 120000      E     LCALL   _TaskNoSignal_setCmd
                                           ; SOURCE LINE # 4406
001A         ?C0595:
                                           ; SOURCE LINE # 4408
001A 900000      R     MOV     DPTR,#NoSignalLogoShow
001D E0                MOVX    A,@DPTR
001E 6003              JZ      ?C0596
                                           ; SOURCE LINE # 4409
0020 120000      R     LCALL   RemoveLogo
0023         ?C0596:
                                           ; SOURCE LINE # 4412
0023 E4                CLR     A
0024 FF                MOV     R7,A
0025 120000      E     LCALL   _SOsdWinBuffClean
                                           ; SOURCE LINE # 4415
0028 120000      E     LCALL   SpiOsdSetDeValue
                                           ; SOURCE LINE # 4416
002B 120000      E     LCALL   FOsdSetDeValue
                                           ; SOURCE LINE # 4419
002E E4                CLR     A
002F FF                MOV     R7,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 258 

0030 120000      E     LCALL   _SpiOsdWinHWOffAll
                                           ; SOURCE LINE # 4422
0033 120000      E     LCALL   FontOsdInit
                                           ; SOURCE LINE # 4425
0036 E4                CLR     A
0037 900000      R     MOV     DPTR,#menu_level
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4437
003B 900000      R     MOV     DPTR,#osd_lang
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4440
003F 7F01              MOV     R7,#01H
0041 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 4441
0044 E4                CLR     A
0045 FD                MOV     R5,A
0046 7F01              MOV     R7,#01H
0048 120000      E     LCALL   _SpiOsdResetRLC
                                           ; SOURCE LINE # 4442
004B 120000      E     LCALL   _SpiOsdWinImageLocBit
                                           ; SOURCE LINE # 4443
004E E4                CLR     A
004F FC                MOV     R4,A
0050 7F01              MOV     R7,#01H
0052 120000      E     LCALL   _SpiOsdWinLutOffset
                                           ; SOURCE LINE # 4444
0055 7F01              MOV     R7,#01H
0057 120000      E     LCALL   _SpiOsdWinFillColor
                                           ; SOURCE LINE # 4449
005A 7B01              MOV     R3,#01H
005C 7A00        E     MOV     R2,#HIGH menu_main_page
005E 7900        E     MOV     R1,#LOW menu_main_page
0060 120000      R     LCALL   L?0751
                                           ; SOURCE LINE # 4450
0063 900001            MOV     DPTR,#01H
0066 7403              MOV     A,#03H
                                           ; SOURCE LINE # 4451
0068 120000      R     LCALL   L?0757
006B 900002            MOV     DPTR,#02H
                                           ; SOURCE LINE # 4454
006E 120000      R     LCALL   L?0743
0071 020000      E     LJMP    ?C?ICALL
             ; FUNCTION MenuStart (END)

             ; FUNCTION MenuEnd (BEGIN)
                                           ; SOURCE LINE # 4460
                                           ; SOURCE LINE # 4461
                                           ; SOURCE LINE # 4468
0000 7F01              MOV     R7,#01H
0002 120000      E     LCALL   _SpiOsdWinHWOffAll
                                           ; SOURCE LINE # 4469
0005 E4                CLR     A
0006 FF                MOV     R7,A
0007 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 4470
000A 120000      E     LCALL   FOsdWinOffAll
                                           ; SOURCE LINE # 4477
000D 120000      E     LCALL   EE_CleanBlocks
                                           ; SOURCE LINE # 4480
0010 E4                CLR     A
0011 900000      R     MOV     DPTR,#menu_on
0014 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 259 

                                           ; SOURCE LINE # 4481
0015 900000      R     MOV     DPTR,#menu_level
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4483
0019 120000      E     LCALL   GetInputMain
001C 900000      R     MOV     DPTR,#MenuInputMain
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4486
0021 120000      E     LCALL   FontOsdInit
                                           ; SOURCE LINE # 4487
0024 120000      E     LCALL   FOsdSetDeValue
                                           ; SOURCE LINE # 4495
0027 E500        E     MOV     A,regTW88+01H
0029 2404              ADD     A,#04H
002B F582              MOV     DPL,A
002D E4                CLR     A
002E 3500        E     ADDC    A,regTW88
0030 F583              MOV     DPH,A
0032 E0                MOVX    A,@DPTR
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 4496
0033 30E00D            JNB     ACC.0,?C0598
                                           ; SOURCE LINE # 4497
0036 7F02              MOV     R7,#02H
0038 120000      E     LCALL   _FOsdIndexMsgPrint
                                           ; SOURCE LINE # 4498
003B 7F01              MOV     R7,#01H
003D 120000      E     LCALL   _TaskNoSignal_setCmd
                                           ; SOURCE LINE # 4501
0040 120000      R     LCALL   InitLogo1
                                           ; SOURCE LINE # 4503
0043         ?C0598:
                                           ; SOURCE LINE # 4504
                                           ; SOURCE LINE # 4505
                                           ; SOURCE LINE # 4508
                                           ; SOURCE LINE # 4509
0043         ?C0599:
                                           ; SOURCE LINE # 4513
0043 120000      R     LCALL   L?0859
0046 E0                MOVX    A,@DPTR
0047 54FD              ANL     A,#0FDH
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4538
004A 22                RET     
             ; FUNCTION MenuEnd (END)

             ; FUNCTION _DParkGridAction (BEGIN)
                                           ; SOURCE LINE # 4629
0000 900000      R     MOV     DPTR,#n
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4630
                                           ; SOURCE LINE # 4637
0005 7E00              MOV     R6,#00H
0007 7C0F              MOV     R4,#0FH
0009 7D00              MOV     R5,#00H
000B 120000      E     LCALL   ?C?LIMUL
000E 900000      R     MOV     DPTR,#lOffsetStart
0011 120000      R     LCALL   L?0818
0014 2F                ADD     A,R7
0015 FF                MOV     R7,A
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 260 

0016 EA                MOV     A,R2
0017 3E                ADDC    A,R6
0018 FE                MOV     R6,A
0019 E9                MOV     A,R1
001A 3D                ADDC    A,R5
001B FD                MOV     R5,A
001C E8                MOV     A,R0
001D 3C                ADDC    A,R4
001E FC                MOV     R4,A
001F 900000      R     MOV     DPTR,#offset
0022 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 4638
0025 900000      R     MOV     DPTR,#n
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A 900000      R     MOV     DPTR,#nCarIndex
002D E0                MOVX    A,@DPTR
002E 75F03E            MOV     B,#03EH
0031 A4                MUL     AB
0032 2400        R     ADD     A,#LOW test_grid_rle
0034 F582              MOV     DPL,A
0036 E5F0              MOV     A,B
0038 3400        R     ADDC    A,#HIGH test_grid_rle
003A F583              MOV     DPH,A
003C E582              MOV     A,DPL
003E 2F                ADD     A,R7
003F F582              MOV     DPL,A
0041 E4                CLR     A
0042 3583              ADDC    A,DPH
0044 F583              MOV     DPH,A
0046 E4                CLR     A
0047 93                MOVC    A,@A+DPTR
0048 900000      R     MOV     DPTR,#rle_byte
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4642
004C 900000      R     MOV     DPTR,#offset
004F 120000      R     LCALL   L?0771
0052 FF                MOV     R7,A
0053 900000      E     MOV     DPTR,#?_SpiOsdWinImageLoc?BYTE+01H
0056 120000      E     LCALL   ?C?LSTXDATA
0059 7F01              MOV     R7,#01H
005B 120000      E     LCALL   _SpiOsdWinImageLoc
                                           ; SOURCE LINE # 4643
005E 7BE0              MOV     R3,#0E0H
0060 7A01              MOV     R2,#01H
0062 7DF8              MOV     R5,#0F8H
0064 7C02              MOV     R4,#02H
0066 7F01              MOV     R7,#01H
0068 120000      E     LCALL   _SpiOsdWinImageSizeWH
                                           ; SOURCE LINE # 4644
006B 900000      R     MOV     DPTR,#nStartPosX
006E E0                MOVX    A,@DPTR
006F FD                MOV     R5,A
0070 7C00              MOV     R4,#00H
0072 A3                INC     DPTR
0073 E0                MOVX    A,@DPTR
0074 FB                MOV     R3,A
0075 7A00              MOV     R2,#00H
0077 900000      E     MOV     DPTR,#?_SpiOsdWinScreen?BYTE+05H
007A 7402              MOV     A,#02H
007C F0                MOVX    @DPTR,A
007D A3                INC     DPTR
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 261 

007E 74F8              MOV     A,#0F8H
0080 F0                MOVX    @DPTR,A
0081 A3                INC     DPTR
0082 7401              MOV     A,#01H
0084 F0                MOVX    @DPTR,A
0085 A3                INC     DPTR
0086 74E0              MOV     A,#0E0H
0088 F0                MOVX    @DPTR,A
0089 7F01              MOV     R7,#01H
008B 120000      E     LCALL   _SpiOsdWinScreen
                                           ; SOURCE LINE # 4646
008E 7D01              MOV     R5,#01H
0090 7F01              MOV     R7,#01H
0092 120000      E     LCALL   _SpiOsdWinPixelAlpha
                                           ; SOURCE LINE # 4647
0095 900000      R     MOV     DPTR,#rle_byte
0098 E0                MOVX    A,@DPTR
0099 C4                SWAP    A
009A 540F              ANL     A,#0FH
009C FD                MOV     R5,A
009D 7F01              MOV     R7,#01H
009F 120000      E     LCALL   _SpiOsdWinPixelWidth
                                           ; SOURCE LINE # 4648
00A2 E4                CLR     A
00A3 FD                MOV     R5,A
00A4 FC                MOV     R4,A
00A5 7F01              MOV     R7,#01H
00A7 120000      E     LCALL   _SpiOsdWinLutOffset
                                           ; SOURCE LINE # 4649
00AA 0D                INC     R5
00AB 7F01              MOV     R7,#01H
00AD 120000      E     LCALL   _SpiOsdWinBuffEnable
                                           ; SOURCE LINE # 4653
00B0 7F01              MOV     R7,#01H
00B2 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 4655
00B5 900000      R     MOV     DPTR,#rle_byte
00B8 E0                MOVX    A,@DPTR
00B9 FF                MOV     R7,A
00BA C4                SWAP    A
00BB 540F              ANL     A,#0FH
00BD FD                MOV     R5,A
00BE EF                MOV     A,R7
00BF 540F              ANL     A,#0FH
00C1 FB                MOV     R3,A
00C2 7F01              MOV     R7,#01H
00C4 120000      E     LCALL   _SpiOsdRLC
                                           ; SOURCE LINE # 4656
00C7 900000      E     MOV     DPTR,#?_SpiOsdLoadLUT?BYTE+04H
00CA E4                CLR     A
00CB F0                MOVX    @DPTR,A
00CC A3                INC     DPTR
00CD 7440              MOV     A,#040H
00CF F0                MOVX    @DPTR,A
00D0 120000      R     LCALL   L?0770
00D3 FF                MOV     R7,A
00D4 120000      R     LCALL   L?0969
00D7 E4                CLR     A
00D8 FB                MOV     R3,A
00D9 FA                MOV     R2,A
00DA 7D01              MOV     R5,#01H
00DC 7F01              MOV     R7,#01H
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 262 

00DE 120000      E     LCALL   _SpiOsdLoadLUT
                                           ; SOURCE LINE # 4657
00E1 7D01              MOV     R5,#01H
00E3 7F01              MOV     R7,#01H
00E5 120000      E     LCALL   _SOsdWinBuffWrite2Hw
                                           ; SOURCE LINE # 4659
00E8 E500        E     MOV     A,regTW88+01H
00EA 2410              ADD     A,#010H
00EC 120000      R     LCALL   L?0912
00EF 74C3              MOV     A,#0C3H
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4662
00F2 E500        E     MOV     A,regTW88+01H
00F4 2411              ADD     A,#011H
00F6 120000      R     LCALL   L?0912
00F9 E4                CLR     A
00FA F0                MOVX    @DPTR,A
00FB 120000      R     LCALL   L?0911
00FE 747F              MOV     A,#07FH
                                           ; SOURCE LINE # 4663
                                           ; SOURCE LINE # 4664
                                           ; SOURCE LINE # 4665
                                           ; SOURCE LINE # 4666
                                           ; SOURCE LINE # 4667
                                           ; SOURCE LINE # 4668
                                           ; SOURCE LINE # 4669
0100 120000      R     LCALL   L?0746
                                           ; SOURCE LINE # 4670
0103 120000      R     LCALL   L?0911
0106 743F              MOV     A,#03FH
                                           ; SOURCE LINE # 4671
                                           ; SOURCE LINE # 4672
                                           ; SOURCE LINE # 4673
                                           ; SOURCE LINE # 4674
                                           ; SOURCE LINE # 4675
                                           ; SOURCE LINE # 4676
                                           ; SOURCE LINE # 4677
0108 120000      R     LCALL   L?0746
                                           ; SOURCE LINE # 4679
010B 7BFF              MOV     R3,#0FFH
010D 7A00        R     MOV     R2,#HIGH ?SC_275
010F 7900        R     MOV     R1,#LOW ?SC_275
0111 020000      E     LJMP    _dPuts
             ; FUNCTION _DParkGridAction (END)

             ; FUNCTION TestDParkGridAction (BEGIN)
                                           ; SOURCE LINE # 4683
                                           ; SOURCE LINE # 4684
                                           ; SOURCE LINE # 4690
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 120000      E     LCALL   _SOsdWinBuffClean
                                           ; SOURCE LINE # 4692
0005 120000      E     LCALL   SpiOsdSetDeValue
                                           ; SOURCE LINE # 4693
0008 E4                CLR     A
0009 FF                MOV     R7,A
000A 120000      E     LCALL   _SpiOsdWinHWOffAll
                                           ; SOURCE LINE # 4694
000D 7F01              MOV     R7,#01H
000F 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 4697
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 263 

0012 E4                CLR     A
0013 900000      R     MOV     DPTR,#nStartPosX
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4698
0017 A3                INC     DPTR
0018 F0                MOVX    @DPTR,A
0019         ?C0603:
                                           ; SOURCE LINE # 4699
0019 120000      E     LCALL   RS_ready
001C EF                MOV     A,R7
001D 706A              JNZ     ?C0604
                                           ; SOURCE LINE # 4700
001F 900000      R     MOV     DPTR,#nCarIndex
0022 F0                MOVX    @DPTR,A
0023         ?C0605:
0023 900000      R     MOV     DPTR,#nCarIndex
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 C3                CLR     C
0029 9404              SUBB    A,#04H
002B 503D              JNC     ?C0606
                                           ; SOURCE LINE # 4702
                                           ; SOURCE LINE # 4703
002D 120000      R     LCALL   L?0768
0030 2440              ADD     A,#040H
0032 120000      R     LCALL   L?0857
0035 120000      R     LCALL   L?0983
                                           ; SOURCE LINE # 4705
0038 E4                CLR     A
0039 900000      R     MOV     DPTR,#n
003C F0                MOVX    @DPTR,A
003D         ?C0608:
003D 900000      R     MOV     DPTR,#n
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 C3                CLR     C
0043 943E              SUBB    A,#03EH
0045 501E              JNC     ?C0607
                                           ; SOURCE LINE # 4706
0047 120000      R     LCALL   _DParkGridAction
                                           ; SOURCE LINE # 4707
004A 900000      R     MOV     DPTR,#n
004D E0                MOVX    A,@DPTR
004E 6006              JZ      ?C0611
0050 7F64              MOV     R7,#064H
0052 7E00              MOV     R6,#00H
0054 8004              SJMP    ?C0729
0056         ?C0611:
                                           ; SOURCE LINE # 4708
0056 7FF4              MOV     R7,#0F4H
0058 7E01              MOV     R6,#01H
005A         ?C0729:
005A 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 4710
005D         ?C0610:
005D 900000      R     MOV     DPTR,#n
0060 E0                MOVX    A,@DPTR
0061 04                INC     A
0062 F0                MOVX    @DPTR,A
0063 80D8              SJMP    ?C0608
                                           ; SOURCE LINE # 4711
0065         ?C0607:
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 264 

0065 120000      R     LCALL   L?1010
0068 80B9              SJMP    ?C0605
006A         ?C0606:
                                           ; SOURCE LINE # 4712
006A 900000      R     MOV     DPTR,#nStartPosX
006D E0                MOVX    A,@DPTR
006E 2432              ADD     A,#032H
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4713
0071 E0                MOVX    A,@DPTR
0072 75F090            MOV     B,#090H
0075 84                DIV     AB
0076 E5F0              MOV     A,B
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4714
0079 A3                INC     DPTR
007A E0                MOVX    A,@DPTR
007B 2432              ADD     A,#032H
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4715
007E E0                MOVX    A,@DPTR
007F 75F0F0            MOV     B,#0F0H
0082 84                DIV     AB
0083 E5F0              MOV     A,B
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4716
0086 020000      R     LJMP    ?C0603
0089         ?C0604:
                                           ; SOURCE LINE # 4720
0089 7F01              MOV     R7,#01H
008B 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 4721
008E E4                CLR     A
008F FD                MOV     R5,A
0090 7F01              MOV     R7,#01H
0092 120000      E     LCALL   _SpiOsdWinBuffEnable
                                           ; SOURCE LINE # 4722
0095 E4                CLR     A
0096 FF                MOV     R7,A
0097 020000      E     LJMP    _SpiOsdEnable
             ; FUNCTION TestDParkGridAction (END)

             ; FUNCTION _TestAutoDParkGridAction (BEGIN)
                                           ; SOURCE LINE # 4726
0000 900000      R     MOV     DPTR,#positionX
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4727
                                           ; SOURCE LINE # 4734
0008 E4                CLR     A
0009 FF                MOV     R7,A
000A 120000      E     LCALL   _SOsdWinBuffClean
                                           ; SOURCE LINE # 4736
000D 120000      E     LCALL   SpiOsdSetDeValue
                                           ; SOURCE LINE # 4737
0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 120000      E     LCALL   _SpiOsdWinHWOffAll
                                           ; SOURCE LINE # 4738
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 265 

0015 7F01              MOV     R7,#01H
0017 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 4740
001A 900000      R     MOV     DPTR,#positionX
001D E0                MOVX    A,@DPTR
001E 900000      R     MOV     DPTR,#nStartPosX
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4741
0022 900000      R     MOV     DPTR,#positionY
0025 E0                MOVX    A,@DPTR
0026 900000      R     MOV     DPTR,#nStartPosY
0029 F0                MOVX    @DPTR,A
002A         ?C0614:
                                           ; SOURCE LINE # 4744
002A 120000      E     LCALL   RS_ready
002D EF                MOV     A,R7
002E 7038              JNZ     ?C0615
                                           ; SOURCE LINE # 4745
0030 900000      R     MOV     DPTR,#nCarIndex
0033 F0                MOVX    @DPTR,A
0034         ?C0616:
0034 900000      R     MOV     DPTR,#nCarIndex
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 C3                CLR     C
003A 9404              SUBB    A,#04H
003C 50EC              JNC     ?C0614
                                           ; SOURCE LINE # 4747
                                           ; SOURCE LINE # 4748
003E 120000      R     LCALL   L?0768
0041 2440              ADD     A,#040H
0043 120000      R     LCALL   L?0857
0046 120000      R     LCALL   L?0983
                                           ; SOURCE LINE # 4750
0049 E4                CLR     A
004A 900000      R     MOV     DPTR,#n
004D F0                MOVX    @DPTR,A
004E         ?C0619:
004E 900000      R     MOV     DPTR,#n
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 C3                CLR     C
0054 943A              SUBB    A,#03AH
0056 500B              JNC     ?C0618
                                           ; SOURCE LINE # 4755
0058 120000      R     LCALL   _DParkGridAction
                                           ; SOURCE LINE # 4756
005B 900000      R     MOV     DPTR,#n
005E E0                MOVX    A,@DPTR
005F 04                INC     A
0060 F0                MOVX    @DPTR,A
0061 80EB              SJMP    ?C0619
                                           ; SOURCE LINE # 4758
0063         ?C0618:
0063 120000      R     LCALL   L?1010
0066 80CC              SJMP    ?C0616
                                           ; SOURCE LINE # 4761
0068         ?C0615:
                                           ; SOURCE LINE # 4762
0068 120000      E     LCALL   RS_rx
                                           ; SOURCE LINE # 4763
006B 7F01              MOV     R7,#01H
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 266 

006D 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 4764
0070 E4                CLR     A
0071 FD                MOV     R5,A
0072 7F01              MOV     R7,#01H
0074 120000      E     LCALL   _SpiOsdWinBuffEnable
                                           ; SOURCE LINE # 4765
0077 E4                CLR     A
0078 FF                MOV     R7,A
0079 020000      E     LJMP    _SpiOsdEnable
             ; FUNCTION _TestAutoDParkGridAction (END)

             ; FUNCTION _TestStepDParkGridAction (BEGIN)
                                           ; SOURCE LINE # 4768
0000 900000      R     MOV     DPTR,#positionX
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4769
                                           ; SOURCE LINE # 4774
0008 E4                CLR     A
0009 FF                MOV     R7,A
000A 120000      E     LCALL   _SOsdWinBuffClean
                                           ; SOURCE LINE # 4776
000D 120000      E     LCALL   SpiOsdSetDeValue
                                           ; SOURCE LINE # 4777
0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 120000      E     LCALL   _SpiOsdWinHWOffAll
                                           ; SOURCE LINE # 4778
0015 7F01              MOV     R7,#01H
0017 120000      E     LCALL   _SpiOsdEnable
                                           ; SOURCE LINE # 4780
001A 900000      R     MOV     DPTR,#positionX
001D E0                MOVX    A,@DPTR
001E 900000      R     MOV     DPTR,#nStartPosX
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4781
0022 900000      R     MOV     DPTR,#positionY
0025 E0                MOVX    A,@DPTR
0026 900000      R     MOV     DPTR,#nStartPosY
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4783
002A 900000      R     MOV     DPTR,#nCarIndex
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
                                           ; SOURCE LINE # 4784
002F 120000      R     LCALL   L?0769
0032 2440              ADD     A,#040H
0034 120000      R     LCALL   L?0857
0037 120000      R     LCALL   L?0984
                                           ; SOURCE LINE # 4785
003A 7BFF              MOV     R3,#0FFH
003C 7A00        R     MOV     R2,#HIGH ?SC_298
003E 7900        R     MOV     R1,#LOW ?SC_298
0040 900000      R     MOV     DPTR,#nCarIndex
0043 E0                MOVX    A,@DPTR
0044 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0047 F0                MOVX    @DPTR,A
0048 900000      R     MOV     DPTR,#nMoving
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 267 

004B E0                MOVX    A,@DPTR
004C 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
004F F0                MOVX    @DPTR,A
0050 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 4786
0053 900000      R     MOV     DPTR,#nMoving
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 120000      R     LCALL   _DParkGridAction
                                           ; SOURCE LINE # 4787
005B 900000      R     MOV     DPTR,#nMoving
005E E0                MOVX    A,@DPTR
005F 04                INC     A
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4788
0061 E0                MOVX    A,@DPTR
0062 B43A0B            CJNE    A,#03AH,?C0623
                                           ; SOURCE LINE # 4789
0065 E4                CLR     A
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4790
0067 120000      R     LCALL   L?1011
                                           ; SOURCE LINE # 4791
006A E0                MOVX    A,@DPTR
006B B40502            CJNE    A,#05H,?C0623
                                           ; SOURCE LINE # 4792
006E E4                CLR     A
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4793
0070         ?C0623:
                                           ; SOURCE LINE # 4794
0070 900000      R     MOV     DPTR,#nMoving
0073 E0                MOVX    A,@DPTR
0074 B4010D            CJNE    A,#01H,?C0626
0077 900000      R     MOV     DPTR,#nCarIndex
007A E0                MOVX    A,@DPTR
007B B40406            CJNE    A,#04H,?C0626
                                           ; SOURCE LINE # 4795
007E E4                CLR     A
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4796
0080 900000      R     MOV     DPTR,#nMoving
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4797
                                           ; SOURCE LINE # 4798
0084         ?C0626:
0084 22                RET     
             ; FUNCTION _TestStepDParkGridAction (END)

C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 268 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


proc_input_pc. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_hdmi_mode_ok. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  hdmi_mode. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
menu_carinfo_page. . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
_TestAutoDParkGridAction . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  positionX. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  positionY. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  n. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
ImgAdjGetContrastY . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_flip_ok . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
getNoSignalLogoStatus. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_touch_bg_end. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_yuv_list_bright . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_info_ok . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
nCarIndex. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
ChangeCOMPONENT. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_TestStepDParkGridAction . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  positionX. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  positionY. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
_MenuFontOsdItemInit . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  item . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  f1BPP_ALPHA. . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  winno. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  palette. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  menu_item. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  text_info. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0006H  3
_SetVAdcPhase. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ImgAdjGetContrastRGB. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MenuDrawScrollImage . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  item . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  direction. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  start_byte . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0004H  4
  start_bit. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
  menu_item. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0009H  3
  image. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      000CH  3
  sosd_win . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000FH  1
  header . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0010H  3
img_slide_saturate . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
ChangeBT656. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OsdChangeTime. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ImgAdjGetSaturation. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
lGridStartAddr . . . . . . . . . . . .  PUBLIC   XDATA  U_LONG   0001H  4
proc_hdmi_list_bg. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_position_up_tsc . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_autoadj_page. . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
_FOsdSetDefPaletteColor. . . . . . . .  EXTERN   CODE   PROC     -----  -----
RemoveLogo . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SaveSlideValue. . . . . . . . . . . .  PUBLIC   XDATA  PTR      0005H  3
_SetRGBPosH. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
menu_disp_resolution_page. . . . . . .  EXTERN   XDATA  STRUCT   -----  11
_MenuDrawSlideNeedleImageXY. . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  value. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  item . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 269 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  sx . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  sy . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0005H  2
  menu_item. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0007H  3
  image. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      000AH  3
  header . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      000DH  3
  sosd_win . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0010H  1
  rate . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0011H  1
  position . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  barsize. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0012H  2
proc_touch_cancel. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_MenuDrawDeactivatedItemImage. . . . .  PUBLIC   CODE   PROC     0000H  -----
  sosd_win . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  item . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  test . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
menu_sys_info_page . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
img_slide_contrast . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
_MenuReadRleHeader . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  spi_loc. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
  header . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0004H  3
  wTemp. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  dTemp. . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0007H  4
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000BH  1
  ptr. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      000CH  3
_rle2_to_header. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  rle_header . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  header . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  colors . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  bpp. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
GetRGBPosV . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SaveAspectModeEE. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_osd_bg. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_aspect_normal . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_ImgAdjSetContrastY. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
nStartPosX . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0008H  1
PCResetCurrEEPROMMode. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OsdChangeTransRate . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_gps_bg. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SpiOsdWinImageLoc . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
nStartPosY . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0009H  1
proc_hdmi_mode_cancel. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_dvi_mode_bg . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_FOsdWinSetBpp3Alpha . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FOsdWinAlphaPixel . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ImgAdjSetContrastRGB. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MenuTouchCalibStart. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_hdmi_mode_tv. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
st_animation . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  53
  active . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  current. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  speed. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  vcnt . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 270 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  srcx . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000DH  20
  srcy . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0021H  20
ImgAdjGetSharpness . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ImgAdjSetSaturation . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SpiOsdWinPixelWidth . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
rle_header . . . . . . . . . . . . . .  PUBLIC   XDATA  STRUCT   000AH  16
menu_position_page . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
menu_display_page. . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
menu_fitem_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  winno. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  osdram . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  zoom_h . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  zoom_v . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  BPP1Color. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  BPP3_palette . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  BPP3_color . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
_SpiOsdWinFillColor. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dPuts . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MovingGridInit . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetImage. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MenuCheckTouchInput . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  TscStatus. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  x. . . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0001H  2
  y. . . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0003H  2
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
menu_fitem_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  15
  winno. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  osdram . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  zoom_h . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  zoom_v . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  BPP1Color. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  BPP3_palette . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  BPP3_color . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
_VAdcSetFilterBandwidth. . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetRGBPosV. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SOsdHwBuffSetRle. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
last_touch_x . . . . . . . . . . . . .  PUBLIC   XDATA  INT      001AH  2
proc_phone_check . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_apc_list_bg . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
GetSlideValue. . . . . . . . . . . . .  PUBLIC   XDATA  PTR      001CH  3
last_touch_y . . . . . . . . . . . . .  PUBLIC   XDATA  INT      001FH  2
ChangeSVIDEO . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
img_slide_bright . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
_SOsdWinBuffClean. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetAspectModeEE. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_VarySlideValue. . . . . . . . . . . .  PUBLIC   XDATA  PTR      0021H  3
ChangeVAdcClock. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
menu_page_info_s . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 271 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  focus. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  select . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  item_start . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  item_total . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  items. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  texts. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0008H  3
img_main_test1 . . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
menu_page_info_t . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  11
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  focus. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  select . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  item_start . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  item_total . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  items. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  texts. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0008H  3
_ImgAdjSetSharpness. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_system_display. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
img_main_test2 . . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
menu_aspect_page . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
proc_rgb_list_bg . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
img_main_test3 . . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
menu_yuv_list_page . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
FOsdMsgBuff. . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  40
proc_yuv_list_sharp. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
RS_ready . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ChangeVAdcPhase. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_dvi_mode_ok . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_slider_page . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
_MenuPrepareImageHeader. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  image. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  header . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
proc_slider_right. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
BackLightGetRate . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_display_flip. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_autocolor_bg. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_sitem_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  23
  osd_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  p. . . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  align. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  image. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
  image1 . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
  image_type . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  lut. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  up . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  down . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0016H  1
menu_restore_page. . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
menu_sitem_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  23
  osd_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  p. . . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 272 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  align. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  image. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
  image1 . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
  image_type . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  lut. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  up . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  down . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0016H  1
_SpiOsdEnable. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_display_backlight . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
RLE2_HEADER. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  id . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  op_bmpbits . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  rledata_cnt. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  LUT_format . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  LUT_colors . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
_SetSlideValue . . . . . . . . . . . .  PUBLIC   XDATA  PTR      0024H  3
RoseDemo . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ChangeRGBPosH. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_InitSlideCtrl . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  title_img. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  pGet . . . . . . . . . . . . . . . .  AUTO     XDATA  VOID_PTR 0003H  3
  pVary. . . . . . . . . . . . . . . .  AUTO     XDATA  VOID_PTR 0006H  3
  pSet . . . . . . . . . . . . . . . .  AUTO     XDATA  VOID_PTR 0009H  3
  pSave. . . . . . . . . . . . . . . .  AUTO     XDATA  VOID_PTR 000CH  3
img_slide_clock. . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
_FOsdWinScreenWH . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_input_bt656 . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_FOsdIndexMsgPrint . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_test1_demo_start. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_delay1ms. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FOsdWinSetOsdRamStartAddr . . . . . .  EXTERN   CODE   PROC     -----  -----
_SOsdHwBuffSetLut. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ImgAdjChangeContrastY. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_carinfo_bg. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
img_slide_phase. . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
SOsdHwBuffClean. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_proc_phone_digit. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  fCursor. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  palette. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  text_info. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
_SaveHdmiModeEE. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MenuStart. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_TestMainMenuImage . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  type . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  sx . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  sy . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  image. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0004H  3
  header . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0007H  3
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 273 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  sosd_win . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
_SpiOsdWinLutOffset. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MovingGridTask_init. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_system_restore. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_ImgAdjChangeContrastRGB . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_apc_list_autocolor. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_position_undo . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SpiOsdWinImageSizeWH. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_slider_left . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_BackLightSetRate. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ImgAdjChangeSaturation . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_aspect_pano . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
fosd_menu_item_s . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  12
  ram. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  zoom . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  ch_space_low . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  color. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  alpha_value. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  alpha_color_index. . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  reserved9. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  reserved10 . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  reserved11 . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
menu_level_stack . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0027H  12
menu_audio_page. . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
proc_input_setting . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_dvi_mode_cancel . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_autoadj_bg. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_MenuDrawCurrImage . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  use1 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  item . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  sx . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  sy . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  menu_item. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0006H  3
  image. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0009H  3
  sosd_win . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000CH  1
  header . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      000DH  3
_SpiOsdWinImageLocBit. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DumpFontOsdPalette . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
phone_start. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0033H  1
_MenuFontOsdItemInitNew. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  item_start . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  item_end . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  winno. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  palette. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  menu_item. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  text_info. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0006H  3
  item . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0009H  1
  value. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
proc_position_H_digit. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SpiOsdSetDeValue . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_proc_phone_string . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  palette. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 274 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  index. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  text_info. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0004H  3
_SaveInputEE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MenuEnd. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
proc_disp_resolution_bg. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ChangeRGBPosV. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_phone_dial. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_aspect_full . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_autocolor_ok. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_IsDigit . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MenuKeyInput_position_page. . . . . .  PUBLIC   CODE   PROC     0000H  -----
  key. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  digit. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
_SetAspectHW . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MenuInputMain. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0034H  1
menu_level . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0035H  1
_SOsdWinBuffWrite2Hw . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
EE_CleanBlocks . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
curr_slide_value . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0036H  1
proc_main_audio. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_touch_calib_end . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ImgAdjGetHUE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_system_btooth . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
MenuGetLevel . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_phone_page. . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
img_slide_sharp. . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
_FOsdWinScreenXY . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
proc_phone_right . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_phone_sharp . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_slider_ctrl . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_PCMODEDATA. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  han. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  van. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  vfreq. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  htotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  vtotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  hsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  vsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  offseth. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0010H  2
  offsetv. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0012H  2
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  dummy2 . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  dummy3 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0018H  1
_proc_phone_cursor . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  ch . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  text_info. . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
menu_lock_scroll . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0037H  1
proc_slider_undo . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 275 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


menu_mirror_page . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
MenuNoSignal . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0038H  1
CheckAndSetPC. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ImgAdjChangeSharpness. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ImgAdjVaryHUE . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
img_slide_timer. . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
_SpiOsdRLC . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
slide_title_img. . . . . . . . . . . .  PUBLIC   XDATA  PTR      0039H  3
GetHdmiModeEE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_phone_return. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_input_svideo. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_apc_list_autoadj. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_restore_undo. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SaveSlide3Value . . . . . . . . . . .  PUBLIC   XDATA  PTR      003CH  3
proc_display_osd . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SpiOsdWin0ImageOffsetXY . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SaveCalibDataToEE . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_display_bg. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_main_phone. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_position_bg . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_MenuDrawSlideCurrValue. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  value. . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0000H  2
  n_char . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  palette. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0004H  3
  font . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  start. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  text_info. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0008H  3
AutoTuneColor. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_position_V_digit. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
proc_position_box. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_RemoveLogoWithWait. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fPowerUpBoot . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  human_input. . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  END_END. . . . . . . . . . . . . . .  LABEL    CODE   LABEL    -----  -----
GetInputMain . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FOsdBlinkOnOff. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_proc_position_tsc . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  key. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_MenuKeyInput_slider_page. . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  key. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
proc_hdmi_list_setting . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_touch_page. . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
proc_autoadj_ok. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_demo_page . . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
menu_main_page . . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
img_slide_trans. . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
menu_image_header_s. . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  lut_loc. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  image_loc. . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  bpp. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 276 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  lut_size . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
_SpiOsdResetRLC. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_DParkGridAction . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  offset . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0001H  4
  rle_byte . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
_info_to_header. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  info . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  header . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
proc_phone_help. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_apc_list_contrast . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_yuv_list_hue. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_autocolor_cancel. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_position_right_tsc. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_image_header_t. . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  17
  lut_loc. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  image_loc. . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  bpp. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  lut_size . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
_ImgAdjSetHUE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_disp_resolution_ok. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_system_page . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
_TWstrcat. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MenuIsTouchCalibMode . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_phone_left. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_aspect_zoom . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
img_slide_backlight. . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
SOsdHwBuffWrite2Hw . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_phone_0 . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_hdmi_mode_page. . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
PCRestoreH . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_phone_1 . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_aspect_bg . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SpiOsdWinGlobalAlpha. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
cancel_recover_value . . . . . . . . .  PUBLIC   XDATA  U_CHAR   003FH  1
proc_phone_2 . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_yuv_list_bg . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_FOsdWinZoom . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_phone_3 . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_system_touch. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_apc_list_position . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_rgb_list_contrast . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_return_icon . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
FOsdSetDeValue . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BackLightChangeRate. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_phone_4 . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_main_system . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_slider_bg . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  menu_item. . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  sosd_win . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
_SaveDviModeEE . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 277 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


proc_phone_5 . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SetInputMain. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_GetSlide3Value. . . . . . . . . . . .  PUBLIC   XDATA  PTR      0040H  3
proc_phone_6 . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_restore_bg. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_demo_icon . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_ScalerSetFreerunManual. . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_phone_7 . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_input_page. . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
osd_lang . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0043H  1
ImgAdjGetBrightnessY . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_phone_menu. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_phone_8 . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_position_left_tsc . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_slider_right_tsc. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_VarySlide3Value . . . . . . . . . . .  PUBLIC   XDATA  PTR      0044H  3
proc_phone_9 . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_main_info . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_position_ok . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SpiOsdWin0SetPriority . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_display_resolution. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  str_buff . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0000H  10
proc_autoadj_cancel. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_home_icon . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_phone_down. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_system_info . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  str_buff . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0000H  10
proc_input_hdmi. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SpiOsdLoadLUT . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_RLE_HEADER. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  id . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  cp . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bmp. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
proc_apc_list_bright . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
push_menu_stack_level. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
img_slide_rgb. . . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
_FOsdWinMulticolor . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_phone_star. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
MenuIsSlideMode. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_main_input. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_slider3_page. . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
img_logo . . . . . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
SPIIMAGE . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  top. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  bottom . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
proc_slider3_right . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
PCRestoreV . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OsdGetTrans. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 278 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


proc_phone_dir . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SetSlide3Value. . . . . . . . . . . .  PUBLIC   XDATA  PTR      0047H  3
curr_menu. . . . . . . . . . . . . . .  PUBLIC   XDATA  PTR      004AH  3
proc_audio_bg. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_aspect_ok . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_InitSlide3Ctrl. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  title_img. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  pGet . . . . . . . . . . . . . . . .  AUTO     XDATA  VOID_PTR 0003H  3
  pVary. . . . . . . . . . . . . . . .  AUTO     XDATA  VOID_PTR 0006H  3
  pSet . . . . . . . . . . . . . . . .  AUTO     XDATA  VOID_PTR 0009H  3
  pSave. . . . . . . . . . . . . . . .  AUTO     XDATA  VOID_PTR 000CH  3
_MenuKeyInput. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  key. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
img_wait . . . . . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
FOsdWinOffAll. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_rgb_list_bright . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
img_slide_hue. . . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  9
_SpiOsdWinBuffEnable . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CpuTouchSkipCount. . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
NoSignalLogoShow . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   004DH  1
header_table . . . . . . . . . . . . .  PUBLIC   XDATA  STRUCT   004EH  17
_ImgAdjSetBrightnessY. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_slider_left_tsc . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
FontOsdInit. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SLIDEIMAGE . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
proc_grid_demo_start . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_position_down_tsc . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_slider_ok . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SOsdHwBuffSetAlpha. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_WaitVBlank. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
curr_menu_focus. . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   005FH  1
ClearBasicEE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FOsdRamSetAddrAttr. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OsdGetTime . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_input_ypbpr . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_input_cvbs. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_apc_list_clock. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_restore_ok. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
InitLogo1. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  image. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  header . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  lut_loc. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  FreeRunManual. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
menu_hdmi_list_page. . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
_TWitoa. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dPrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
regTW88. . . . . . . . . . . . . . . .  EXTERN   DATA   PTR      -----  2
_MenuUpdateSlideNeedleByPosition . . .  PUBLIC   CODE   PROC     0000H  -----
  x. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  sx . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 279 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  sy . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  menu_item. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0004H  3
  image. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0007H  3
  header . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      000AH  3
  position . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000DH  2
  barsize. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000FH  2
  value. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0011H  1
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0012H  1
  rate . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0013H  1
ImgAdjChangeHUE. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_phone_msg . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_flip_undo . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ChangePC . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SpiOsdWin0Animation . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MenuKeyInput_main_page. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  key. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  new. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
_OsdVaryTime . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_phone_bg. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  text_info. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
MenuIsSystemPage . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
pop_menu_stack_level . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SpiOsdWinHWOffAll . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SpiFlashDmaRead2XMem. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_slider3_left. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
last_slide3_value. . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0060H  3
proc_exit_icon . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_osd_page. . . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
MY_SLIDEIMAGE. . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  10
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  lut_size . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0006H  4
proc_apc_list_phase. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
nMoving. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0063H  1
proc_phone_set . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_hdmi_list_mode. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TestDParkGridAction. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
menu_gps_page. . . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
_SpiOsdPixelAlphaAttr. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OsdGetTransRate. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_CheckHumanInputs. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_aspect_cancel . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_MenuCheckItemPosition . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  x. . . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0000H  2
  y. . . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0002H  2
  image. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0004H  3
  header . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0007H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
  max. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000BH  1
_MenuTurnOffCurrImage. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  item . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  menu_item. . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  sosd_win . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 280 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


curr_slide3_value. . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0064H  3
_OsdSetTime. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_touch_bg. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_MenuFontOsdItemString . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  n_char . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  palette. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  text_info. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0004H  3
FONT_SPI_INFO_s. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
proc_wait_demo_start . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_demo_bg . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_main_bg . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
image_info_s . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
FONT_SPI_INFO_t. . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
_EE_Read . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
lOffsetStart . . . . . . . . . . . . .  PUBLIC   XDATA  U_LONG   0067H  4
image_info_t . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
_FOsdWinEnable . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MenuKeyInput_input_page . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  key. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
proc_system_bg . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  touch_not_detected . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
proc_main_gps. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_osd_trans . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SpiOsdWinScreen . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_yuv_list_saturate . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 281 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


proc_dvi_mode_24bit. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_rose_demo_start . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_dvi_mode_16bit. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_apc_list_page . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
_TWhtos. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
proc_hdmi_mode_bg. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ChangeHDMI . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_apc_list_color. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_flip_bg . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TaskNoSignal_getCmd. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_touch_button1 . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_info_bg . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
test_grid_rle. . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    013DH  310
UseSOsdHwBuff. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   006BH  1
_OsdSetTransRate . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_touch_button2 . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_osd_time. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_yuv_list_contrast . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
RS_rx. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MenuKeyInput_slider3_page . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  key. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
GetVAdcClock . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_touch_button3 . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SpiOsdDisableRLC. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SpiOsdWinHWEnable . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_touch_button4 . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_menu_list_return. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_touch_button5 . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_rgb_list_page . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
_FOsdSetPaletteColor . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ImgAdjChangeBrightnessY. . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_input_bg. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_on. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   006CH  1
proc_rgb_list_color. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SpiOsdWinPixelAlpha . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetVAdcPhase . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_display_aspect. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_autocolor_page. . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  11
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_hdmi_mode_pc. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
menu_str_buff. . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    006DH  5
proc_touch_ok. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
proc_wait_menu_start . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  menu_item. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  image. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  header . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0006H  3
  item . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
proc_menu_bg . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  curr_menu_type . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
MY_RLE_INFO. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  5
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
C51 COMPILER V9.00   SOSDMENU                                                              05/31/2013 20:18:35 PAGE 282 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_EE_Write. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_VaryVAdcPhase . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ChangeCVBS . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetRGBPosH . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_phone_up. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
image_item_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  9
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  info . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  alpha. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
_TaskNoSignal_setCmd . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ReadCalibDataFromEE. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
proc_slider3_bg. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  menu_item. . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  sosd_win . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
image_item_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  info . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  alpha. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
_SetVAdcClock. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  16800    ----
   CONSTANT SIZE    =    627    ----
   XDATA SIZE       =    114     296
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
