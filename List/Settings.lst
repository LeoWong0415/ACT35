C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SETTINGS
OBJECT MODULE PLACED IN .\Output\Settings.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Settings.c LARGE OPTIMIZE(9,SPEED) REGFILE(.\Output\TW8835_REV31.ORC) BROWS
                    -E MODDP2 DEFINE(EVB_30,EVB_31,nullFn=//) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\List\Settings.lst) OBJECT(.\Output\Sett
                    -ings.obj)

line level    source

   1          /**
   2           * @file
   3           * settings.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *      Copyright (C) 2011~2012 Intersil Corporation
   8           * @section DESCRIPTION
   9           *      setup system 
  10          */
  11          
  12          //input                 
  13          //      CVBS    YIN0
  14          //      SVIDEO  YIN1, CIN0
  15          //      aRGB    G:YIN2 B:CIN0 R:VIN0 
  16          //      aYUV    G:YIN2 B:CIN0 R:VIN0
  17          
  18          #include "Config.h"
  19          #include "reg.h"
  20          #include "typedefs.h"
  21          #include "TW8835.h"
  22          
  23          #include "Global.h"
  24          #include "CPU.h"
  25          #include "Printf.h"
  26          #include "util.h"
  27          #include "Monitor.h"
  28          
  29          #include "I2C.h"
  30          #include "SPI.h"
  31          
  32          #include "main.h"
  33          #include "SOsd.h"
  34          #include "FOsd.h"
  35          #include "Scaler.h"
  36          #include "decoder.h"
  37          #include "InputCtrl.h"
  38          #include "EEPROM.h"
  39          #include "ImageCtrl.h"
  40          #include "decoder.h"
  41          #include "InputCtrl.h"
  42          #include "OutputCtrl.h"
  43          #include "Settings.h"
  44          #include "measure.h"
  45          //#include "SOsdMenu.h"
  46          
  47          
  48          #include "Data\DataInitPC.inc"
  49          #include "Data\DataInitMonitor.inc"
  50          
  51          
  52          #if 0
              void SW_Reset(void)
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 2   

              {
                      DECLARE_LOCAL_page
                      ReadTW88Page(page);
                      WriteTW88Page(0);
                      WriteTW88(REG006, ReadTW88(REG006) | 0x80);     //SW RESET
                      WriteTW88Page(page);
              }
              #endif  
  62          
  63          
  64          //=============================================================================
  65          //      INPUT CLOCKS                                                                   
  66          //=============================================================================
  67          
  68          //NeedClock ?
  69          //LLPLL
  70          //PCLKO
  71          //-----------------------------------------------------------------------------
  72          /**
  73          * set High speed clock. only for test
  74          */
  75          void ClockHigh(void)
  76          {
  77   1              dPrintf("\nHigh");      
  78   1      
  79   1              WriteTW88Page(PAGE0_SSPLL );
  80   1              WriteTW88(REG0F6, 0x00 );       // PCLK div by 1
  81   1      
  82   1              WriteTW88Page(PAGE2_SCALER );
  83   1              WriteTW88(REG20D, 0x81 );       // PCLKO div by 2
  84   1      
  85   1              WriteTW88Page(PAGE4_CLOCK);
  86   1              WriteTW88(REG4E1, 0xe0 );       // Source=PCLK, Delay=1, Edge=1
  87   1      
  88   1              SPI_SetReadModeByRegister(0x05);        // SPI mode QuadIO, Match DMA mode with SPI-read
  89   1      }
  90          
  91          //-----------------------------------------------------------------------------
  92          /**
  93          * set Low speed clock. only for test
  94          */
  95          void ClockLow(void)
  96          {
  97   1              dPrintf("\nLow");       
  98   1      
  99   1              WriteTW88Page(PAGE0_SSPLL );
 100   1              WriteTW88(REG0F6, 0x00 );       // PCLK div by 1
 101   1      
 102   1              WriteTW88Page(PAGE2_SCALER );
 103   1              WriteTW88(REG20D, 0x80 );       // PCLKO div by 1
 104   1      
 105   1              WriteTW88Page(PAGE4_CLOCK);
 106   1              WriteTW88(REG4E1, 0x20 );       // Source=PCLK, Delay=0, Edge=0
 107   1      
 108   1              SPI_SetReadModeByRegister(0x05);        // SPI mode QuadIO, Match DMA mode with SPI-read
 109   1      }
 110          
 111          //-----------------------------------------------------------------------------
 112          /**
 113          * set 27MHz clock. only for test
 114          */
 115          void Clock27(void)
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 3   

 116          {
 117   1              dPrintf("\n27MHz");     
 118   1      
 119   1              WriteTW88Page(PAGE0_SSPLL );
 120   1              WriteTW88(REG0F6, 0x00 );       // PCLK div by 1
 121   1      
 122   1              WriteTW88Page(PAGE2_SCALER );
 123   1              WriteTW88(REG20D, 0x80 );       // PCLKO div by 1
 124   1      
 125   1              WriteTW88Page(PAGE4_CLOCK);
 126   1              WriteTW88(REG4E1, 0x00 );       // Source=27M
 127   1      
 128   1              SPI_SetReadModeByRegister(0x05);        // SPI mode QuadIO, Match DMA mode with SPI-read
 129   1      }
 130          
 131          //=========================================
 132          // SSPLL
 133          //=========================================
 134          
 135          //-----------------------------------------------------------------------------
 136          /**
 137          * power up the SSPLL
 138          */
 139          void SSPLL_PowerUp(BYTE fOn)
 140          {
 141   1              WriteTW88Page(PAGE0_SSPLL);
 142   1              if(fOn) WriteTW88(REG0FC, ReadTW88(REG0FC) & ~0x80);
 143   1              else    WriteTW88(REG0FC, ReadTW88(REG0FC) |  0x80);
 144   1      }
 145          //-----------------------------------------------------------------------------
 146          /**
 147          * get PPF(PLL Pixel Frequency) value. SSPLL value
 148          *
 149          * oldname:SspllGetPCLK
 150          *
 151          *       FPLL = REG(0x0f8[3:0],0x0f9[7:0],0x0fa[7:0])
 152          *       POST = REG(0x0fd[7:6])
 153          *       PLL Osc Freq = 108MHz * FPLL / 2^17 / 2^POST
 154          */
 155          DWORD SspllGetPPF(BYTE fHost)
 156          {
 157   1              DWORD ppf, FPLL;
 158   1              BYTE  i;
 159   1      
 160   1              //read PLL center frequency
 161   1              FPLL = SspllGetFreqReg(fHost);
 162   1      
 163   1              #ifdef DEBUG_PC
                      dPrintf("\r\n(GetFBDN) :%ld", FPLL);
                      #endif
 166   1      
 167   1              i= SspllGetPost(fHost);
 168   1              ppf = SspllFPLL2FREQ(FPLL, i);
 169   1      //      dPrintf("\r\n(GetPPF) :%ld", ppf);
 170   1      
 171   1              //test
 172   1              //FPLL = SspllFREQ2FPLL(ppf, i);
 173   1              //dPrintf(" test FPLL :0x%lx", FPLL);
 174   1      
 175   1      
 176   1      #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
                      //FPGA do not return the correct ppf value. type "PCLK 666" for 66.6MKz
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 4   

                      ppf = 66560180;
                      dPrintf("->%ld", ppf);
              #endif
 181   1              return ppf;
 182   1      }
 183          
 184          //desc
 185          // PLL = 108MHz *FPLL / 2^17
 186          // FPLL = PLL * 2^17 / 108MHz
 187          //              = PLL * 131072 / 108MHz
 188          //              = PLL * 131072 / (108 * 100000 * 10)Hz
 189          //      = (PLL / 100000) * (131072 / 108)* (1/10)
 190          //      = (PLL / 100000) * (1213.6296) * (1/10)
 191          //      = (PLL / 100000) * (1213.6296 *2 ) * (1/10*2) 
 192          //      = (PLL / 100000) * (2427.2592) / 20 
 193          //      = (PLL / 100000) * (2427) / 20 
 194          //@param
 195          //      _PPF: input pixel clock
 196          //oldname:ChangeInternPLL@TW8816
 197          //nickname: SetPclk
 198          
 199          //              #define REG0F8_FPLL0                    0xF8
 200          //              #define REG0F9_FPLL1                    0xF9
 201          //              #define REG0FA_FPLL2                    0xFA
 202          //              #define REG0FD_SSPLL_ANALOG     0xFD
 203          
 204          //-----------------------------------------------------------------------------
 205          /**
 206          * set SSPLL register value
 207          */
 208          void SspllSetFreqReg(DWORD FPLL)
 209          {
 210   1              dPrintf("\nSspllSetFreqReg(%lx)",FPLL);
 211   1              WriteTW88Page(PAGE0_SSPLL);
 212   1              WriteTW88(REG0FA_FPLL2, (BYTE)FPLL );
 213   1              WriteTW88(REG0F9_FPLL1, (BYTE)(FPLL>>8));
 214   1              WriteTW88(REG0F8_FPLL0, (ReadTW88(REG0F8_FPLL0)&0xF0) | (FPLL>>16));
 215   1      }
 216          //-----------------------------------------------------------------------------
 217          /**
 218          * get SSPLL register value
 219          *
 220          *       register
 221          *       R0F8[3:0]       FPLL[19:16]
 222          *       R0F9[7:0]       FPLL[15:8]
 223          *       R0FA[7:0]       FPLL[7:0]
 224          */
 225          DWORD SspllGetFreqReg(BYTE fHost)
 226          {
 227   1              DWORD dFPLL;
 228   1              
 229   1              if(fHost) {
 230   2                      WriteHostPage(PAGE0_SSPLL);
 231   2                      dFPLL = ReadHost(REG0F8_FPLL0)&0x0F;
 232   2                      dFPLL <<=8;
 233   2                      dFPLL |= ReadHost(REG0F9_FPLL1);
 234   2                      dFPLL <<=8;
 235   2                      dFPLL |= ReadHost(REG0FA_FPLL2);
 236   2              }
 237   1              else {
 238   2                      WriteTW88Page(PAGE0_SSPLL);
 239   2                      dFPLL = ReadTW88(REG0F8_FPLL0)&0x0F;
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 5   

 240   2                      dFPLL <<=8;
 241   2                      dFPLL |= ReadTW88(REG0F9_FPLL1);
 242   2                      dFPLL <<=8;
 243   2                      dFPLL |= ReadTW88(REG0FA_FPLL2);
 244   2              }
 245   1              return dFPLL;
 246   1      }
 247          
 248          //-----------------------------------------------------------------------------
 249          /**
 250          * set SSPLL AnalogControl register
 251          *
 252          *       register
 253          *       R0FD[7:6] POST
 254          *       R0FD[5:4] VCO
 255          *       R0FD[2:0] ChargePump
 256          */
 257          void SspllSetAnalogControl(BYTE value)
 258          {
 259   1              WriteTW88Page(PAGE0_SSPLL);
 260   1              WriteTW88(REG0FD_SSPLL_ANALOG, value );
 261   1      }
 262          
 263          //-----------------------------------------------------------------------------
 264          /**
 265          * get SSPLL Post value
 266          */
 267          BYTE SspllGetPost(BYTE fHost)
 268          {
 269   1              BYTE post;
 270   1      
 271   1              if(fHost) {
 272   2                      WriteHostPage(PAGE0_SSPLL);
 273   2                      post = ReadHost(REG0FD);
 274   2              }
 275   1              else {
 276   2                      WriteTW88Page(PAGE0_SSPLL);
 277   2                      post = ReadTW88(REG0FD);
 278   2              }
 279   1              return ((post>>6) & 0x03);
 280   1      }
 281          
 282          /*
 283                  PLL Osc Freq = 108MHz * FPLL / 2^17 / 2^POST
 284                  FREQ                    = 27000000 * 4 * FPLL / 2^17  / 2^POST
 285              FPLL                        = FREQ *((2^15) * (2^POST)) / 27000000                                          
 286              FPLL                        = (FREQ / 1000) *((2^15) * (2^POST)) / 27000                                            
 287              FPLL                        = (FREQ / 1000) *((2^12) * (2^POST)) * (2^3  / 27000)
 288              FPLL                        = (FREQ / 1000) *((2^12) * (2^POST)) / (3375)                                           
 289          */
 290          #if 1 //GOOD
 291          //-----------------------------------------------------------------------------
 292          /**
 293          * get FPLL value from freq
 294          */
 295          DWORD SspllFREQ2FPLL(DWORD FREQ, BYTE POST)
 296          {
 297   1              DWORD FPLL;
 298   1              FPLL = FREQ/1000L;
 299   1              FPLL <<= POST;
 300   1              FPLL <<= 12;
 301   1              FPLL = FPLL / 3375L;
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 6   

 302   1              return FPLL;
 303   1      }
 304          #endif
 305          #if 0   //BKFYI:example
              /*
                  FPLL                        = FREQ *((2^15) * (2^POST)) / 27000000                                          
                      FPLL                    = FREQ *(32768 * (2^POST)) / 27000000
                      FPLL                    = FREQ *(512 * (2^POST)) / 421875
                  FPLL            = FREQ * 16 / 421875 * 32 * (2^POST)
              */
              //DWORD SspllFREQ2FPLL(DWORD FREQ, BYTE POST)
              //{
              //      DWORD FPLL;
              //      FPLL = FREQ * 16; 
              //      FPLL /= 421875;
              //      FPLL *= 32;
              //      FPLL <<= POST;
              //      return FPLL;
              //}
              #endif
 322          
 323          #if 0 //BKFYI: example 
              /*
                      FREQ                    = 27000000 * 4 * FPLL / 2^17  / 2^POST
                  Simpilfied FREQ     = 824L * FPLL * 2^POST
              */
              //DWORD SspllFPLL2FREQ(DWORD FPLL, BYTE POST)
              //{
              //      DWORD FREQ;
              //      FREQ = FPLL * 824L;
              //      FREQ >>= POST;
              //      return FREQ;
              //}
              #endif
 336          
 337          /*
 338              FREQ                        = 27000000 * FPLL / ( (2^15) * (2^POST) )
 339              FREQ                        = 27000000 * FPLL / ( (2^15) * (2^POST) )
 340                                                  = 421875 * 64 * FPLL / (64 * 2^9 *(2^POST))
 341                                                  = 421875 * FPLL / (512 *(2^POST))
 342                                                  = FPLL / 64 * 421875 / 8 / (2^POST)
 343          */
 344          //-----------------------------------------------------------------------------
 345          /**
 346          * get freq from FPLL
 347          */
 348          DWORD SspllFPLL2FREQ(DWORD FPLL, BYTE POST)
 349          {
 350   1              DWORD FREQ;
 351   1              FREQ = FPLL / 64;
 352   1              FREQ *= 421875;
 353   1              FREQ /= 8;
 354   1              FREQ >>= POST;
 355   1              return FREQ;
 356   1      }
 357          
 358          
 359          //SSPLL Set Frequency And PLL
 360          //R0F8
 361          //R0F9
 362          //R0FA
 363          //R0FD
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 7   

 364          //R0FC
 365          //R20D[4]       Pixel clock polarity control
 366          //R20D[1:0]     Pixel clock output frequency division control
 367          //
 368          //if PPF is 108M, POST=0. VCO:3 CURR=4
 369          
 370          //-----------------------------------------------------------------------------
 371          /**
 372          * set SSPLL freq and Pll
 373          */
 374          void SspllSetFreqAndPll(DWORD _PPF)
 375          {
 376   1              BYTE    ppf, CURR, VCO, POST;
 377   1              DWORD   FPLL;
 378   1              
 379   1              dPrintf("\nSspllSetFreqAndPll(%ld)",_PPF);
 380   1              ppf = _PPF/1000000L;            //base:1MHz
 381   1      
 382   1              //----- Frequency Range --------------------
 383   1              if     ( ppf < 27 )  { VCO=2; CURR=0; POST=2; }         // step = 0.5MHz
 384   1              else if( ppf < 54 )  { VCO=2; CURR=1; POST=1; }         // step = 1.0MHz
 385   1              else if( ppf < 108 ) { VCO=2; CURR=2; POST=0; }         // step = 1.0MHz
 386   1              else                 { VCO=3; CURR=3; POST=0; }         // step = 1.0MHz
 387   1      
 388   1              CURR = VCO+1;   //BK110721. Harry Suggest.
 389   1      
 390   1              //----- Get FBDN
 391   1              FPLL = SspllFREQ2FPLL(_PPF, POST);
 392   1      
 393   1              //----- Setting Registers
 394   1              SspllSetFreqReg(FPLL);
 395   1              SspllSetAnalogControl((VCO<<4) | (POST<<6) | CURR);
 396   1      
 397   1              dPrintf("\nPOST:%bx VCO:%bx CURR:%bx",POST, VCO, CURR);
 398   1      
 399   1              //adjust pclk divider
 400   1              if(ppf >=150) {
 401   2                      ppf /= 2;
 402   2                      PclkSetDividerReg(1);   //div2
 403   2              }
 404   1              else {
 405   2                      PclkSetDividerReg(0);   //div1:default
 406   2              }
 407   1      
 408   1              //adjust pclko divider. see SetDefaultPClock()
 409   1              PclkoSetDiv( (ppf+39) / 40 - 1); //pixel clock polarity : Invert 0:div1, 1:div2, 2:div3
 410   1                                                                                      //BKTODO:move pixel clock polarity...   
 411   1              PclkSetPolarity(1);     //invert
 412   1      
 413   1      }
 414          
 415          
 416          
 417          //=========================================
 418          // PCLK
 419          //=========================================
 420          
 421          //-----------------------------------------------------------------------------
 422          /**
 423          * set PCLK divider
 424          */
 425          void PclkSetDividerReg(BYTE divider)
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 8   

 426          {
 427   1              WriteTW88Page(0);
 428   1              WriteTW88(REG0F6, (ReadTW88(REG0F6) & 0xF8) | divider);
 429   1      }
 430          
 431          //-----------------------------------------------------------------------------
 432          /**
 433          * get PCLK frequency
 434          */
 435          DWORD PclkGetFreq(BYTE fHost,DWORD sspll)
 436          {
 437   1              BYTE divider;
 438   1              DWORD temp32;
 439   1              if(fHost) {
 440   2                      WriteHostPage(0);
 441   2                      divider = ReadHost(REG0F6) & 0x03;
 442   2              }
 443   1              else {
 444   2                      WriteTW88Page(0);
 445   2                      divider = ReadTW88(REG0F6) & 0x03;
 446   2              }
 447   1              switch(divider) {
 448   2              case 0: temp32 = sspll;                 break;
 449   2              case 1: temp32 = sspll / 2;             break;
 450   2              case 2: temp32 = sspll / 4;             break;
 451   2              case 3: temp32 = sspll / 8;             break;
 452   2              }
 453   1              return temp32;
 454   1      }
 455          //-----------------------------------------------------------------------------
 456          /**
 457          * get PCLKO frequency
 458          */
 459          DWORD PclkoGetFreq(BYTE fHost, DWORD pclk)
 460          {
 461   1              BYTE divider;
 462   1              DWORD temp32;
 463   1              if(fHost) {
 464   2                      WriteHostPage(2);
 465   2                      divider = ReadHost(REG20D) & 0x03;
 466   2              }
 467   1              else {
 468   2                      WriteTW88Page(2);
 469   2                      divider = ReadTW88(REG20D) & 0x03;
 470   2              }
 471   1              divider++;
 472   1              temp32 = pclk / divider;
 473   1              return temp32;
 474   1      }
 475          
 476          //-----------------------------------------------------------------------------
 477          /**
 478          * set PCLKO divider and CLK polarity
 479          *
 480          *       R20D[4] Pixel clock polarity control
 481          *       R20D[1:0]       Poxel clock output frequency division control
 482          
 483          * @param div - Pixel clock output frequency division
 484          *       0:div 1,        1:div 2,        2:div 3,        3:div 4.
 485          *
 486          */
 487          void PclkoSetDiv(/*BYTE pol,*/ BYTE div)
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 9   

 488          {
 489   1              BYTE value;
 490   1              WriteTW88Page(PAGE2_SCALER);
 491   1              value = ReadTW88(REG20D) & 0xFC;
 492   1              WriteTW88(REG20D, value | div);
 493   1      }
 494          //-----------------------------------------------------------------------------
 495          /**
 496          * set PCLK polarity
 497          *
 498          * @param pol - Pixel clock output polarity
 499          *       -0:     no inversion
 500          *       -1:     inversion
 501          *       - 0xFF: do not change it. Use previous value
 502          */
 503          void PclkSetPolarity(BYTE pol)
 504          {
 505   1              BYTE value;
 506   1              WriteTW88Page(PAGE2_SCALER);
 507   1              value = ReadTW88(REG20D);
 508   1              if(pol) value |=  0x10;
 509   1              else    value &= ~0x10;
 510   1              WriteTW88(REG20D, value);
 511   1      }
 512          
 513          
 514          //=========================================
 515          // CLKPLL
 516          //=========================================
 517          
 518          //-----------------------------------------------------------------------------
 519          /**
 520          * select ClkPLL input
 521          */
 522          void ClkPllSetSelectReg(BYTE ClkPllSel)
 523          {
 524   1              WriteTW88Page(4);
 525   1              if(ClkPllSel) WriteTW88(REG4E0, ReadTW88(REG4E0) |  0x01);
 526   1              else              WriteTW88(REG4E0, ReadTW88(REG4E0) & ~0x01);
 527   1      }
 528          //-----------------------------------------------------------------------------
 529          /**
 530          * set ClkPLL divider
 531          */
 532          void ClkPllSetDividerReg(BYTE divider)
 533          {
 534   1              WriteTW88Page(4);
 535   1              WriteTW88(REG4E1, (ReadTW88(REG4E1) & ~0x07) | divider);        //CLKPLL Divider
 536   1      }
 537          
 538          //-----------------------------------------------------------------------------
 539          /**
 540          * set ClkPLL input and ClkPLL divider
 541          * 
 542          * only from monitor
 543          */
 544          void ClkPllSetSelDiv(BYTE ClkPllSel, BYTE ClkPllDiv)
 545          {
 546   1              BYTE mcu_sel;
 547   1              DWORD clkpll,spi_clk;
 548   1              BYTE i=0;
 549   1      
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 10  

 550   1              //check & move MCU CLK source to 27M 
 551   1              mcu_sel = McuSpiClkReadSelectReg();
 552   1              if(mcu_sel==MCUSPI_CLK_PCLK)
 553   1                      McuSpiClkSelect(MCUSPI_CLK_27M);        
 554   1              //
 555   1              //Now, MCU uses 27M or 32K. You can change CLKPLL register without a system hang
 556   1              //
 557   1      
 558   1              ClkPllSetSelectReg(ClkPllSel);
 559   1              do {
 560   2                      ClkPllSetDividerReg(ClkPllDiv);
 561   2                      ClkPllDiv++;
 562   2                      clkpll =ClkPllGetFreq(0);
 563   2                      spi_clk=SpiClkGetFreq(0, clkpll);
 564   2                      i++;
 565   2              } while(spi_clk > 75000000L);   //MAX SPICLK
 566   1              if(i!=1)
 567   1                      ePrintf("\nClkPllSetSelDiv div encreased:%d",i-1);
 568   1      
 569   1              //restore MCU CLK source
 570   1              if(mcu_sel==MCUSPI_CLK_PCLK)
 571   1                      McuSpiClkSelect(MCUSPI_CLK_PCLK);       
 572   1      }
 573          
 574          //-----------------------------------------------------------------------------
 575          /**
 576          * get ClkPLL frequency
 577          */
 578          DWORD ClkPllGetFreq(BYTE fHost)
 579          {
 580   1              BYTE temp8;
 581   1              DWORD clkpll;
 582   1              DWORD temp32;
 583   1              if(fHost) {
 584   2                      WriteHostPage(4);
 585   2                      temp8 = ReadHost(REG4E0) & 0x01;
 586   2              }
 587   1              else {
 588   2                      WriteTW88Page(4);
 589   2                      temp8 = ReadTW88(REG4E0) & 0x01;
 590   2              }
 591   1              if(temp8==0) {
 592   2                      temp32 = SspllGetPPF(fHost);
 593   2                      clkpll = PclkGetFreq(fHost, temp32);
 594   2              }
 595   1              else {
 596   2                      clkpll=108000000L;
 597   2              }
 598   1              if(fHost) {
 599   2                      WriteHostPage(4);
 600   2                      temp8 = ReadHost(REG4E1) & 0x07;
 601   2              }
 602   1              else {
 603   2                      WriteTW88Page(4);
 604   2                      temp8 = ReadTW88(REG4E1) & 0x07;
 605   2              }
 606   1              switch(temp8) {
 607   2              case 0: temp32 = clkpll;                break;
 608   2              case 1: temp32 = clkpll*2/3;    break;
 609   2              case 2: temp32 = clkpll*2;              break;
 610   2              case 3: temp32 = clkpll*2/5;    break;
 611   2              case 4: temp32 = clkpll*3;              break;
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 11  

 612   2              case 5: temp32 = clkpll*2/7;    break;
 613   2              case 6: temp32 = clkpll*4;              break;
 614   2              case 7: temp32 = clkpll*5;              break;
 615   2              }
 616   1              return temp32;
 617   1      }
 618          
 619          
 620          //=========================================
 621          // MCPSPI
 622          //=========================================
 623          //-----------------------------------
 624          // McuSpiClkToPclk & McuSpiClkRestore
 625          //-----------------------------------
 626          
 627          /*
 628          result  register        stepA   stepB   stepC   stepD   stepE
 629          ------  --------                -----   -----   -----   -----   -----
 630          fail    PCLK_SEL                PLL                                             PCLK
 631                          MCUSPI_CLK_SEL          PCLK    27M                                             PCLK
 632                          MCUSPI_CLK_DIV          1                               0                               1
 633          
 634          OK              PCLK_SEL                PLL                                             PCLK
 635                          MCUSPI_CLK_SEL          PCLK    27M                                             PCLK
 636                          MCUSPI_CLK_DIV          1                                                               1
 637          
 638          OK              PCLK_SEL                PLL                                             PCLK
 639                          MCUSPI_CLK_SEL          PCLK
 640                          MCUSPI_CLK_DIV          1
 641          ---------------------------------------------------------------
 642          */
 643          BYTE shadow_r4e0;
 644          BYTE shadow_r4e1;
 645          
 646          //-----------------------------------------------------------------------------
 647          /**
 648          * select PCLK for McuSpi
 649          *
 650          * NOTE: SPIDMA needs a PCLK source
 651          * @see McuSpiClkRestore
 652          */
 653          BYTE McuSpiClkToPclk(BYTE divider)
 654          {
 655   1      //#if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
 656   1      //      BYTE temp;
 657   1      //      //do not change divider. I will use 65MHz PCLK with divider 1.
 658   1      //      temp = divider;                 
 659   1      //      return 0;
 660   1      //#endif
 661   1      #ifdef MODEL_TW8835_EXTI2C
                      BYTE temp;
                      temp = divider;                 
                      WriteTW88Page(PAGE4_CLOCK);
                      shadow_r4e0 = ReadTW88(REG4E0);
                      shadow_r4e1 = ReadTW88(REG4E1);
              
                      WriteTW88Page(PAGE0_GENERAL);
                      WriteTW88(REG002, 0xff );                               
                      while((ReadTW88(REG002) & 0x40) ==0);   //wait vblank  I2C_WAIT_VBLANK
              //PORT_DEBUG = 0;
                      WriteTW88Page(PAGE4_CLOCK);
                      WriteTW88(REG4E0, shadow_r4e0 & 0xFE);  //select PCLK.
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 12  

                      WriteTW88(REG4E1, 0x20 | divider);
              //PORT_DEBUG = 1;
                      return 0;
              #else
 678   1              WriteTW88Page(PAGE4_CLOCK);
 679   1              shadow_r4e0 = ReadTW88(REG4E0);
 680   1              shadow_r4e1 = ReadTW88(REG4E1);
 681   1      
 682   1              WriteTW88(REG4E0, shadow_r4e0 & 0xFE);  //select PCLK.
 683   1              WriteTW88(REG4E1, 0x20 | divider);              //CLKPLL + divider.
 684   1      
 685   1              return 0;
 686   1      #endif
 687   1      }
 688          
 689          //-----------------------------------------------------------------------------
 690          /**
 691          * restore MCUSPI clock
 692          *
 693          * @see McuSpiClkToPclk
 694          */
 695          
 696          void McuSpiClkRestore(void)
 697          {
 698   1      //#if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
 699   1      //      //do not change. I will use 65MHz PCLK with divider 1.
 700   1      //      return;
 701   1      //#endif
 702   1              //Printf("\nMcuSpiClkRestore REG4E0:%bx REG4E1:%bx",shadow_r4e0,shadow_r4e1);
 703   1      #ifdef MODEL_TW8835_EXTI2C      //I2C_WAIT_VBLANK
                      WriteTW88Page(PAGE0_GENERAL);
                      WriteTW88(REG002, 0xff );                               
                      while((ReadTW88(REG002) & 0x40) ==0); //wait vblank
              #endif
 708   1      //PORT_DEBUG = 0;
 709   1              WriteTW88Page(PAGE4_CLOCK);
 710   1              WriteTW88(REG4E0, shadow_r4e0);
 711   1      //#ifdef MODEL_TW8835_EXTI2C
 712   1      //#else
 713   1              WriteTW88(REG4E1, shadow_r4e1);
 714   1      //#endif
 715   1      //PORT_DEBUG = 1;
 716   1              //Printf("-Done");
 717   1      }
 718          
 719          //-----------------------------------------------------------------------------
 720          /**
 721          * read MCUSPI clock mode
 722          */
 723          BYTE McuSpiClkReadSelectReg(void)
 724          {
 725   1              BYTE value;
 726   1              WriteTW88Page(PAGE4_CLOCK);
 727   1              value = ReadTW88(REG4E1) & 0x30;
 728   1              return (value >> 4);
 729   1      }
 730          
 731          //-----------------------------------------------------------------------------
 732          /**
 733          * Select McuSpi clock source
 734          *
 735          *       register
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 13  

 736          *       R4E1[5:4]
 737          * @param McuSpiClkSel clock source
 738          *       -0:27MHz
 739          *       -1:32KHz
 740          *       -2:CLKPLL. << (PLL Divider) << (PCLK or 108M) << (if PCLK, SSPLL with PCLK Divider)
 741          */
 742          void McuSpiClkSelect(BYTE McuSpiClkSel)
 743          {
 744   1              BYTE value;
 745   1              WriteTW88Page(PAGE4_CLOCK);
 746   1              value = ReadTW88(REG4E1) & 0x0F;
 747   1              WriteTW88(REG4E1, (McuSpiClkSel << 4) | value);
 748   1      } 
 749          
 750          #if 0
              //OLD code
              //!void McuSpiClkSet(BYTE McuSpiClkSel, BYTE ClkPllSel, BYTE ClkPllDiv) 
              //!{
              //!     WriteTW88Page(PAGE4_CLOCK);
              //!     if(ClkPllSel)   WriteTW88(REG4E0, ReadTW88(REG4E0) |  0x01);
              //!     else                    WriteTW88(REG4E0, ReadTW88(REG4E0) & ~0x01); 
              //!     WriteTW88(REG4E1, (McuSpiClkSel << 4) | ClkPllDiv);
              //!}
              #endif
 760          
 761          //-----------------------------------------------------------------------------
 762          /**
 763          * get MCU clock frequency
 764          */
 765          DWORD McuGetClkFreq(BYTE fHost)
 766          {
 767   1              BYTE temp8;
 768   1              DWORD temp32;
 769   1      
 770   1              if(fHost) {
 771   2                      WriteHostPage(4);
 772   2                      temp8 = ReadHost(REG4E1) >> 4;
 773   2              }
 774   1              else {
 775   2                      WriteTW88Page(4);
 776   2                      temp8 = ReadTW88(REG4E1) >> 4;
 777   2              }
 778   1              switch(temp8) {
 779   2              case 0: temp32 = 27000000L;                             break;
 780   2              case 1: temp32 = 32000L;                                break;
 781   2              case 2: temp32 = ClkPllGetFreq(fHost);  break;
 782   2              default: //unknown
 783   2                              temp32 = 27000000L;                             break;
 784   2              }
 785   1              return temp32;
 786   1      }
 787          
 788          //=========================================
 789          // SPI CLK
 790          //=========================================
 791          
 792          //-----------------------------------------------------------------------------
 793          /**
 794          * get SPI clock frequency
 795          */
 796          DWORD SpiClkGetFreq(BYTE fHost, DWORD mcu_clk)
 797          {
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 14  

 798   1              BYTE divider;
 799   1              DWORD temp32;
 800   1              if(fHost) {
 801   2                      WriteHostPage(0);
 802   2                      divider = ReadHost(REG0F6) >> 4;
 803   2              }
 804   1              else {
 805   2                      WriteTW88Page(0);
 806   2                      divider = ReadTW88(REG0F6) >> 4;
 807   2              }
 808   1              divider++;
 809   1              temp32 = mcu_clk / divider;
 810   1              return temp32;
 811   1      }
 812          
 813          //-----------------------------------------------------------------------------
 814          /**
 815          * set LLPLL clock source
 816          *
 817          * use 27M OSD or PLL 
 818          */
 819          void LLPLLSetClockSource(BYTE use_27M)
 820          {
 821   1              WriteTW88Page(PAGE1_LLPLL);
 822   1              if(use_27M)     WriteTW88(REG1C0, ReadTW88(REG1C0) | 0x01); 
 823   1              else            WriteTW88(REG1C0, ReadTW88(REG1C0) & ~0x01);
 824   1      }
 825          
 826          /*
 827          example
 828          #if 0
 829                  WriteTW88Page(PAGE4_CLOCK);
 830                  value = ReadTW88(REG4E1);
 831                  WriteTW88(REG4E1, value & ~0x30);       //select 27M first
 832                  WriteTW88(REG4E0, ReadTW88(REG4E0) | 0x01);             //select 108M PLL clock.
 833                  WriteTW88(REG4E1, (value & ~0x30) | 0x01);                      //SPI clock Source=PCLK, Delay=1, Edge=0, PLL(72M) divider:1
             -.5
 834                  WriteTW88(REG4E1, 0x21);                                                //SPI clock Source=PCLK, Delay=1, Edge=0, PLL(72M) divider:1.5
 835          #endif
 836                  do {
 837                          BYTE r4e0,r4e1;
 838                          WriteTW88Page(PAGE4_CLOCK);
 839                          r4e0 = ReadTW88(REG4E0);
 840                          r4e1 = ReadTW88(REG4E1);
 841                          WriteTW88(REG4E1, r4e1 & 0x0F); //27M
 842                          delay1ms(10);
 843                          WriteTW88(REG4E1, 0x00);                        //27M with div1.0
 844                          WriteTW88(REG4E0, r4e0 | 0x01);
 845                          WriteTW88(REG4E1, 0x21);                        
 846                          delay1ms(10);
 847          //              Printf("\nline:%d",__LINE__);
 848                  } while(0);
 849                  //
 850          */
 851          
 852          
 853          
 854          //-----------------------------------------------------------------------------
 855          //set default SSPLL clock
 856          #if 0
              void SetDefaultPClock(void)
              {
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 15  

                      WriteTW88Page(PAGE0_SSPLL);
                      WriteTW88(REG0F9, 0x50);                //SSPLL 70MKz. 0x50:70MHz, 0x3C:66.6MHz..Pls use SspllSetFreqReg(0x015000);
                      WriteTW88(REG0F6, 0x00);                //PCLK div:1. SPI CLK div:1
              
                      WriteTW88Page(PAGE2_SCALER);
                      WriteTW88(REG20D, 0x81 );       // PCLKO div by 2. ??Polarity
              }
              #endif
 867          
 868          //-----------------------------------------------------------------------------
 869          /**
 870          * print current clock info
 871          */
 872          void DumpClock(BYTE fHost)
 873          {
 874   1              DWORD ppf, FPLL;
 875   1              BYTE  i;
 876   1              DWORD pclk,pclko;
 877   1              DWORD clkpll, mcu_clk,spi_clk;
 878   1      
 879   1              //read PLL center frequency
 880   1              FPLL = SspllGetFreqReg(fHost);
 881   1              i= SspllGetPost(fHost);
 882   1              ppf = SspllFPLL2FREQ(FPLL, i);
 883   1      
 884   1              pclk = PclkGetFreq(fHost, ppf);
 885   1              pclko = PclkoGetFreq(fHost, pclk);
 886   1      
 887   1              clkpll =ClkPllGetFreq(fHost);
 888   1      
 889   1              mcu_clk=McuGetClkFreq(fHost);
 890   1              spi_clk=SpiClkGetFreq(fHost, mcu_clk);
 891   1      
 892   1              dPrintf("\nCLOCK SSPLL:%lx POST:%bx FREQ:%ld", FPLL,i,ppf);
 893   1              dPrintf("\n      PCLK:%ld PCLKO:%ld",   pclk, pclko);
 894   1              dPrintf("\n      CLKPLL:%ld",clkpll);
 895   1              dPrintf("\n      MCU:%ld SPI:%ld",mcu_clk,spi_clk);
 896   1      }
 897          
 898          
 899          //=============================================================================
 900          //                                                                             
 901          //=============================================================================
 902          //global
 903          
 904          
 905          /*
 906          //==========================
 907          // GPIO EXAMPLE
 908          //==========================
 909          //!GPIO_EN      Enable(active high)
 910          //!GPIO_OE      Output Enable(active high)
 911          //!GPIO_OD      Output Data
 912          //!GPIO_ID      Input Data
 913          //!
 914          //!             GPIO_EN GPIO_OE GPIO_OD GPIO_ID
 915          //!GPIO0        R080    R088    R090    R098
 916          //!GPIO1        R081    R089    R091    R099
 917          //!GPIO2        R082    R08A    R092    R09A
 918          //!GPIO3        R083    R08B    R093    R09B
 919          //!GPIO4        R084    R08C    R094    R09C
 920          //!GPIO6        R085    R08D    R095    R09D
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 16  

 921          //!GPIO7        R086    R08E    R096    R09E
 922          //!
 923          //!bit readGpioInputData(BYTE gpio, BYTE b)
 924          //!{
 925          //!     BYTE reg;
 926          //!     reg = 0x98+gpio;
 927          //!     value = ReadTW88(reg);
 928          //!     if(value & (1<<b))      return 1;
 929          //!     else                            return 0;
 930          //!}
 931          //!bit readGpioOutputData(BYTE gpio, BYTE b)
 932          //!{
 933          //!     BYTE reg;
 934          //!     reg = 0x90+gpio;
 935          //!     value = ReadTW88(reg);
 936          //!     if(value & (1<<b))      return 1;
 937          //!     else                            return 0;
 938          //!}
 939          //!void writeGpioOutputData(BYTE gpio, BYTE b, BYTE fOnOff)
 940          //!{
 941          //!     BYTE reg;
 942          //!     reg = 0x90+gpio;
 943          //!     value = ReadTW88(reg);
 944          //!     if(fOnOff) value |= (1<<b);
 945          //!     else       value &= ~(1<<b);
 946          //!     WriteTW88(reg,value);
 947          //!}
 948          */
 949                  
 950          
 951          
 952          //
 953          //BKFYI110909.
 954          //      We merge step0 and step1, and check the status only at step2.
 955          //      
 956          //      step0 check_status : OK
 957          //      step1 check_status : OK
 958          //      step2 check_status : OK
 959          //
 960          //  step0 & step1 check_status : fail 20%
 961          //      step2         check_status : OK
 962          //-------------------------------------- 
 963          
 964          //-----------------------------------------------------------------------------
 965          /**
 966          * turn on DCDC
 967          */
 968          BYTE DCDC_On(BYTE step)
 969          {
 970   1              BYTE i;
 971   1              //-------------
 972   1              //DCDC ON
 973   1              WriteTW88Page(PAGE0_DCDC);
 974   1              switch(step) {
 975   2              case 0:
 976   2      #if 0
                              WriteTW88(REG0E8, 0x72);        //default. & disable OverVoltage
                              WriteTW88(REG0E8, 0x12);        //disable OverCurrent, disable UnderCurrent
                              WriteTW88(REG0E8, 0x13);        //enable DC convert digital block
              #endif
 981   2                      WriteTW88(REG0E8, 0xF2);        //Printf("\nREG0E8:F2[%bd]",ReadTW88(REG0EA)>>4);
 982   2                      WriteTW88(REG0E8, 0x02);        //Printf("\nREG0E8:02[%bd]",ReadTW88(REG0EA)>>4);
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 17  

 983   2                      WriteTW88(REG0E8, 0x03);        //Printf("\nREG0E8:03[%bd]",ReadTW88(REG0EA)>>4);
 984   2                      WriteTW88(REG0E8, 0x01);        //Printf("\nREG0E8:01[%bd]",ReadTW88(REG0EA)>>4);
 985   2                      break;
 986   2              case 1:
 987   2                      WriteTW88(REG0E8, 0x11);        //powerup DC sense block
 988   2                      break;
 989   2              case 2:
 990   2                      WriteTW88(REG0E8, 0x71);        //turn on under current feedback control
 991   2                                                                              //0x11->0x51->0x71
 992   2                      break;
 993   2              //default:
 994   2              //      ePuts("\nBUG");
 995   2              //      return;
 996   2              }
 997   1              for(i=0; i < 10; i++) {
 998   2                      if((ReadTW88(REG0EA) & 0x30)==0x30) {
 999   3                              //dPrintf("\nDCDC(%bd):%bd",step,i);
1000   3                              return ERR_SUCCESS;     //break;
1001   3                      }
1002   2                      delay1ms(2);
1003   2              }
1004   1              Printf("\nDCDC_On(%bd) FAIL",step);
1005   1              return ERR_FAIL;
1006   1      }
1007          
1008          //GPIO43 or expender GPIO[1]
1009          //-----------------------------------------------------------------------------
1010          /**
1011          * set FP_Bias
1012          */
1013          void FP_BiasOnOff(BYTE fOn)
1014          {
1015   1      #ifdef EVB_10
                      WriteTW88Page(PAGE0_GENERAL);
                      if(fOn) {
              #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
              #else
                              WriteTW88(REG084, ReadTW88(REG084) | 0x08);             //enable 
                              WriteTW88(REG08C, ReadTW88(REG08C) | 0x08);             //output enable
                              delay1ms(2);
              #endif
                      }
                      else {
                              WriteTW88(REG08C, ReadTW88(REG08C) & ~0x08);    //output disable
                              WriteTW88(REG084, ReadTW88(REG084) & ~0x08);    //disable
                      }
              #else
1030   1              WriteTW88Page(PAGE0_GENERAL);
1031   1              WriteTW88(REG084, 0x00);        //disable
1032   1      #ifdef PICO_GENERIC
                      dPrintf("\nFP_BiasOnOff(%bd) skip",fOn);
              #else
1035   1              if(fOn) {
1036   2                      WriteSlowI2CByte( I2CID_SX1504, 1, 0 );         // output enable
1037   2                      WriteSlowI2CByte( I2CID_SX1504, 0, ReadSlowI2CByte(I2CID_SX1504, 0) & 0xFD );           // FPBIAS enable.
1038   2              }
1039   1              else {
1040   2                      WriteSlowI2CByte( I2CID_SX1504, 1, 0 );         // output enable
1041   2                      WriteSlowI2CByte( I2CID_SX1504, 0, ReadSlowI2CByte(I2CID_SX1504, 0) | 0x02 );           // FPBIAS disable
1042   2              }
1043   1      #endif
1044   1      #endif  
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 18  

1045   1      #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
                      WriteTW88Page(PAGE0_GENERAL);
                      if(fOn) WriteTW88(REG0F1, ReadTW88(REG0F1) |  0x40);            
                      else    WriteTW88(REG0F1, ReadTW88(REG0F1) & ~0x40);            
              #endif
1050   1      }
1051          
1052          //FrontPanel PowerControl ON - GPIO42. or expender GPIO[0]
1053          //-----------------------------------------------------------------------------
1054          /**
1055          * set FP_PWC
1056          */
1057          void FP_PWC_OnOff(BYTE fOn)
1058          {
1059   1      #ifdef EVB_10
                      WriteTW88Page(PAGE0_GENERAL);
                      if(fOn) {
              #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
              #else
                              WriteTW88(REG08C, ReadTW88(REG08C) | 0x04);             //output FPPWC enable
                              WriteTW88(REG084, ReadTW88(REG084) | 0x04);             //enable GPIO
              #endif
                      }
                      else {
                              WriteTW88(REG08C, ReadTW88(REG08C) & ~0x04);    //output FPPWC disable
                              WriteTW88(REG084, ReadTW88(REG084) & ~0x04);    //disable GPIO
                      }
              #else
1073   1              WriteTW88Page(PAGE0_GENERAL);
1074   1              WriteTW88(REG084, 0x00);                                                                                        //disable
1075   1      #ifdef PICO_GENERIC
                      dPrintf("\nFP_PWC_OnOff(%bd) skip",fOn);
              #else
1078   1              if(fOn) {
1079   2                      WriteSlowI2CByte( I2CID_SX1504, 1, 0 );                                                                 // output enable
1080   2                      WriteSlowI2CByte( I2CID_SX1504, 0, ReadSlowI2CByte(I2CID_SX1504, 0) & 0xFE );   // FPPWC enable
1081   2              }
1082   1              else {
1083   2                      WriteSlowI2CByte( I2CID_SX1504, 1, 0 );                                                                 // output enable
1084   2                      WriteSlowI2CByte( I2CID_SX1504, 0, ReadSlowI2CByte(I2CID_SX1504, 0) | 0x01 );   // FPPWC disable
1085   2              }
1086   1      #endif
1087   1      #endif
1088   1      
1089   1      #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
                      WriteTW88Page(PAGE0_GENERAL);
                      if(fOn) WriteTW88(REG0F1, ReadTW88(REG0F1) |  0x80);            
                      else    WriteTW88(REG0F1, ReadTW88(REG0F1) & ~0x80);            
              #endif
1094   1      
1095   1              
1096   1      }
1097          
1098          //-----------------------------------------------------------------------------
1099          /**
1100          * set GPIO for FP
1101          */
1102          void FP_GpioDefault(void)
1103          {
1104   1              WriteTW88Page(PAGE0_GPIO);
1105   1              WriteTW88(REG084, 0x00);        //FP_BiasOnOff(OFF);
1106   1              WriteTW88(REG08C, 0x00);        //FP_PWC_OnOff(OFF);
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 19  

1107   1              WriteTW88(REG094, 0x00);        //output
1108   1      
1109   1      #ifndef EVB_10
1110   1              if(access) {
1111   2                      //turn off FPPWC & FPBias. make default
1112   2                      //      0x40 R0 R1 is related with FP_PWC_OnOff
1113   2      #ifndef PICO_GENERIC
1114   2                      WriteSlowI2CByte( I2CID_SX1504, 0, 3 ); //RegData:      FPBias OFF. FPPWC disable.
1115   2                      WriteSlowI2CByte( I2CID_SX1504, 1, 3 ); //RegDir:       input 
1116   2      #endif
1117   2                      //Printf("\nI2CID_SX1504 0:%02bx 1:%bx",ReadSlowI2CByte(I2CID_SX1504, 0), ReadSlowI2CByte(I2CID_SX1504, 
             -1));
1118   2              }
1119   1      #endif
1120   1      }
1121          
1122          //-----------------------------------------------------------------------------
1123          /**
1124          * init default NTSC value
1125          */
1126          void InitWithNTSC(void)
1127          {
1128   1      #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
              #else
1130   1              //dump default registers
1131   1              if(DebugLevel >=3) {
1132   2      //              DumpRegister(0);
1133   2                      //DumpRegister(1);
1134   2                      //DumpRegister(2);
1135   2                      //DumpRegister(3);
1136   2      //              DumpRegister(4);
1137   2                      //DumpRegister(5);
1138   2              }
1139   1      #endif
1140   1      
1141   1              //---------------------------
1142   1              //clock
1143   1              //---------------------------
1144   1              WriteTW88Page(PAGE4_CLOCK);
1145   1      #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
                      WriteTW88(REG4E1, 0x01);                        //SPI_CK_DIV[2:0]=1. SPI_CK_SEL[5:4]=0(27MHz) will be changed later 
                      WriteTW88(REG4E0, 0x00);                        // PCLK_SEL[0]=0(PCLK)
              #else
1149   1              if(SpiFlashVendor==SFLASH_VENDOR_MX)//if Macronix SPI Flash
1150   1                      WriteTW88(REG4E1, 0x02);                //SPI_CK_DIV[2:0]=2(%2). SPI_CK_SEL[5:4]=0(27MHz) will be changed later 
1151   1              else
1152   1                      WriteTW88(REG4E1, 0x01);                //SPI_CK_DIV[2:0]=1(%1.5).SPI_CK_SEL[5:4]=0(27MHz) will be changed later
1153   1      #ifdef MODEL_TW8835_EXTI2C_USE_PCLK
                      WriteTW88(REG4E0, 0x00);                        // PCLK_SEL[0]=0(PCLK)
              #else
1156   1              WriteTW88(REG4E0, 0x01);                        // PCLK_SEL[0]=1(PLL108M)
1157   1      #endif
1158   1      #endif
1159   1      
1160   1              WriteTW88Page(PAGE0_GENERAL);
1161   1              WriteTW88(REG0D6, 0x01);
1162   1                                                              //SSPLL FREQ R0F8[3:0]R0F9[7:0]R0FA[7:0]
1163   1      #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
                      WriteTW88(REG0F8, 0x01);        //65MHz
                      WriteTW88(REG0F9, 0x34);        
                      WriteTW88(REG0FA, 0x26);        
                      WriteTW88(REG0F6, 0x00);        //PCLK_div_by_1 SPICLK_div_by_1
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 20  

                      WriteTW88(REG0FD, 0x34);        //SSPLL Analog Control
                                                                              //              POST[7:6]=0 VCO[5:4]=3 IPMP[2:0]=4
              #else
1171   1              WriteTW88(REG0F8, 0x02);        //108MHz
1172   1              WriteTW88(REG0F9, 0x00);        
1173   1              WriteTW88(REG0FA, 0x00);        
1174   1              WriteTW88(REG0F6, 0x00);        //PCLK_div_by_1 SPICLK_div_by_1
1175   1              WriteTW88(REG0FD, 0x34);        //SSPLL Analog Control
1176   1                                                                      //              POST[7:6]=0 VCO[5:4]=3 IPMP[2:0]=4
1177   1      #endif
1178   1      
1179   1              WriteTW88Page(PAGE2_SCALER);
1180   1      #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
                      WriteTW88(REG20D, 0x01);        //pclko div 2.  65/2 = 32.5MHz 
              #else
1183   1              WriteTW88(REG20D, 0x02);        //pclko div 3.  108/3=36MHz
1184   1      #endif
1185   1      
1186   1      
1187   1      #if 0   //if you want CLKPLL 72MHz or 54MHz
                      WriteTW88Page(PAGE0_GENERAL);
                      WriteTW88(REG0FC, ReadTW88(REG0FC) & ~0x80);    //Turn off SSPLL PowerDown first.
                      WriteTW88(REG0F6, ReadTW88(REG0F6) | 0x20);     //SPICLK_div_by_3
              
                      WriteTW88Page(PAGE4_CLOCK);
                      WriteTW88(REG4E1, ReadTW88(REG4E1) | 0x20);             //SPI_CK_SEL[5:4]=2. CLKPLL
              #endif
1195   1      
1196   1              //---------------------------
1197   1              WriteTW88Page(PAGE1_DECODER);
1198   1              WriteTW88(REG1C0, 0x01);                //LLPLL input def 0x00
1199   1              WriteTW88(REG105, 0x2f);                //Reserved def 0x0E
1200   1      
1201   1      
1202   1              //---------------------------
1203   1              WriteTW88Page(PAGE2_SCALER);
1204   1              WriteTW88(REG21E, 0x03);                //BLANK def 0x00.       --enable screen blanking with AUTO
1205   1      
1206   1              //---------------------------
1207   1              WriteTW88Page(PAGE0_LEDC);
1208   1              WriteTW88(REG0E0, 0xF2);                //LEDC. default. 
1209   1                                                                              //      R0E0[1]=1       Analog block power down
1210   1                                                                              //      R0E0[0]=0       LEDC digital block disable
1211   1              //---------------------------
1212   1                                                                              //DCDC. default. HW:0xF2
1213   1                                                                              //      R0E8[1]=1       Sense block power down
1214   1                                                                              //      R0E8[0]=0       DC converter digital block disable.
1215   1      
1216   1              WriteTW88(REG0E8, 0x70);                //Masami
1217   1              //WriteTW88(REG0E8, 0xF2);
1218   1              WriteTW88(REG0EA, 0x3F);                //Van. 110909
1219   1      
1220   1                                                                                                      //SSPLL_PowerDown
1221   1                                                                                                      //TWTerCmd:     "b 8a fc 77 ff"
1222   1              //WriteTW88Page(PAGE0_SSPLL);                           //DocDefault:0x30. HWDefault:0xB0
1223   1              //WriteTW88(REG0FC, ReadTW88(REG0FC) | 0x80);   //      R0FC[7]=1       SSPLL power down
1224   1      
1225   1      #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
                      //set external decoder
                      WriteSlowI2CByte(I2CID_TW9910, 0x03, 0x82);
                      WriteSlowI2CByte(I2CID_TW9910, 0x1A, 0x02);
                      WriteSlowI2CByte(I2CID_TW9910, 0x1F, 0x01);
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 21  

              #endif
1231   1      
1232   1      
1233   1      
1234   1              //=====================
1235   1              //All Register setting
1236   1              //=====================
1237   1      
1238   1              //-------------------
1239   1              // PAGE 0
1240   1              //-------------------
1241   1              WriteTW88Page(PAGE0_GENERAL);
1242   1      
1243   1      //R000 74       Product ID Code Register
1244   1      
1245   1      //R002 0A       IRQ
1246   1      //R003 FE       IMASK
1247   1      //R004 01       Status
1248   1      
1249   1      //R006 00       SRST
1250   1      
1251   1      //R007 00       Output Ctrl I
1252   1      //      [7]     SWPPRT
1253   1      //      [6]     SWPNIT
1254   1      //      [5:4]   SHFT2
1255   1      //      [3]             EN656OUT
1256   1      //      [2:0]   TCONSEL                                         
1257   1      #if defined(PANEL_SRGB)
                      WriteTW88(REG007, 0x01);        // Serial RGB
              #elif defined(PANEL_FP_LSB)     
                      WriteTW88(REG007, 0x02);        // FP LSB
              #else
1262   1              WriteTW88(REG007, 0x00);        // TCON
1263   1      #endif                  
1264   1      //R008 30       Output Ctrl II  
1265   1      //      [7:6]   TCKDRV  =10     8mA     
1266   1      //      [5]             TRI_FPD =1      1:Tristate all FP data pins.
1267   1      //      [4]             TRI_EN  =0      1:Tristate all output pins
1268   1      //      [3:0]   GPOSEL  =9      sDE(Serial RGB DE)
1269   1      //      SW use 0xA9. TRI_FPD will turn on at FP module.
1270   1      
1271   1      #ifdef MODEL_TW8835_EXTI2C      
                      WriteTW88(REG008, 0xA0);        //GPOSEL for IRQ. 0=Negative IRQ(Use).1=Positive IRQ
              #elif defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
                      WriteTW88(REG008, 0x89);                
              #else
1276   1              WriteTW88(REG008, 0xA9);                
1277   1      #endif
1278   1      
1279   1      //R00F 00       INT0 WRITE PORT
1280   1      //R01F 00       TEST
1281   1                                                                                                              
1282   1      //R040 00       INPUT Control I
1283   1      //      [7:6]   IPHDLY  Input H cropping position control in implicit DE mode. This is a 10-bit register.
1284   1      //      [4]             CKINP   Scaler input clock polarity control
1285   1      //                                      1 = Inversion 0 = no inversion
1286   1      //      [3]             DTVDE_EN
1287   1      //                                      1 = INT_4 pin is turn into dtvde pin 
1288   1      //                                      0 = INT_4 pin is normal operation
1289   1      //      [2]             DTVCK2_EN
1290   1      //                                      1 = dtv_vs pin is turn into 2nd DTV clock pin 
1291   1      //                                      0 = dtv_vs pin is normal operation
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 22  

1292   1      //      [1:0]   IPSEL   Input selection
1293   1      //                                      0 = Internal decoder 1 = Analog RGB/YUV 2 = DTV
1294   1              WriteTW88(REG040, 0x10);                
1295   1      
1296   1      //R041 00       INPUT CONTROL II
1297   1      //      [5]             PROG    Field control for progressive input
1298   1      //      [4]             IMPDE   1 = implicit DE mode. It is only available in DTV input mode
1299   1      //      [3]             IPVDET  Input V sync detection edge control
1300   1      //                              1 = falling edge 0 = rising edge
1301   1      //      [2]             IPHDET  Input H sync detection edge control
1302   1      //                              1 = falling edge 0 = rising edge
1303   1      //      [1]             IPFD    Input field control
1304   1      //                              1 = inversion 0 = no inversion
1305   1      //      [0]             RGBIN   Input data format selection
1306   1      //                              1 = RGB 0 = YCbCr
1307   1              WriteTW88(REG041, 0x0C);
1308   1      
1309   1      //R042 02       INPUT CROP_HI
1310   1      //      [6:4]   IPVACT_HI       
1311   1      //                              Input V cropping length control in number of input lines for 
1312   1      //                              use in implicit DE mode. This is an 11-bit register.
1313   1      //      [3:0]   IPHACT_HI       
1314   1      //                              Input H cropping length control in number of input pixels for 
1315   1      //                              use in implicit DE mode. This is a 12-bit register.
1316   1      //R043 20       INPUT V CROP Position
1317   1      //      [7:0]   IPVDLY
1318   1      //                              Input V cropping starting position in number of lines relative to the V sync. 
1319   1      //                              This is used in implicit DE mode
1320   1      //R044 F0       INPUT V CROP LENGTH LO
1321   1      //      [7:0]   IPVACT_LO
1322   1      //                              Input V cropping length control in number of input lines for 
1323   1      //                              use in implicit DE mode. This is an 11-bit register.
1324   1      //R045 20       IINPUT H CROP POSITION LO
1325   1      //      [7:0]   IPHDLY_LO
1326   1      //                              Input H cropping position control relative to leading edge of 
1327   1      //                              H sync in implicit DE mode. This is a 10-bit register.
1328   1      //R046 D0       INPUT H CROP LENGTH LO
1329   1      //      [7:0]   IPHACT_LO
1330   1      //                              Input H cropping length control in number of input pixels for 
1331   1      //                              use in implicit DE mode. This is a 12-bit register.
1332   1      //---------------------------
1333   1      //      input h start 0x082     length 0x2D0 
1334   1      //  input v start 0x10  length 0x0F0    
1335   1              WriteTW88(REG042, 0x02);        
1336   1              WriteTW88(REG043, 0x10);        
1337   1              WriteTW88(REG044, 0xF0);        
1338   1              WriteTW88(REG045, 0x82);        
1339   1              WriteTW88(REG046, 0xD0);        
1340   1      
1341   1      //R047 00       BT656 DECODER CONTROL I
1342   1      //      [7]             FRUN    BT656 input control
1343   1      //                              0 = External input 1 = Internal pattern generator
1344   1      //      [6]             HZ50    Internal pattern generator field frequency control.
1345   1      //                              0 = 60 Hz 1 = 50 Hz
1346   1      //      [5]             DTVCKP  BT656 input clock control
1347   1      //                              0 = no inversion 1 = Inversion
1348   1      //      [4:0]   EVDELAY BT656 input V delay control in number of lines.
1349   1      //R048 00       BT646 DECODER CONTROL II
1350   1      //      [7]             NONSTA  Non-standard BT656 signal decoding.
1351   1      //      [5:0]   EHDELAY BT656 input H delay control in number of pixels.
1352   1      //R049 00       BT656 Status I
1353   1      //      [7:0]   LNPF656[9:2]    BT656 Input line count per frame status.
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 23  

1354   1      //R04A 01       BT656 STATUS II
1355   1      //      [2:1]   LNPF656[1:0]
1356   1      //      [0]             VDET656         BT656 input video loss detection.
1357   1      //                              0 = video detected 1 = no video input
1358   1              WriteTW88(REG047, 0x80);        
1359   1              //WriteTW88(REG048, 0x00);
1360   1              WriteTW88(REG049, 0x41);        //def 0x00
1361   1      
1362   1      //R050~R05F     DTV
1363   1              //WriteTW88(REG05F, 0x00);
1364   1              
1365   1      //R080~R09E     GPIO
1366   1      
1367   1      //R0A0~ MBIST
1368   1      
1369   1      //R0B0~ TSC CONTROL
1370   1              WriteTW88(REG0B1, 0xC0); //disable Touch Ready&Pen interrupt
1371   1      
1372   1      //R0D4
1373   1      
1374   1      //R0E0 LEDC CONTROL
1375   1      //      WriteTW88(REG0F7, 0x16); def
1376   1      //      WriteTW88(REG0F8, 0x01); def
1377   1      //                                                                      
1378   1      //;DC/DC setting
1379   1      //      WriteTW88(REG0e8, 0xf1);  DC sense powerup. DC digital enable. DCDC-on. DONOT change it here. 
1380   1      //      WriteTW88(REG0e9, 0x06);  def
1381   1      //      WriteTW88(REG0ea, 0x0a);        ??
1382   1      //      WriteTW88(REG0eb, 0x40);        def
1383   1      //      WriteTW88(REG0ec, 0x20);        def
1384   1              WriteTW88(REG0ED, 0x40);        //def:0x80
1385   1      #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
                      WriteTW88(REG0F1, 0xC0);        //[7]FP_PWC [6]FP_BIAS          
              #endif
1388   1      //
1389   1      //                                                      SSPLL FREQ R0F8[3:0]R0F9[7:0]R0FA[7:0]
1390   1      //      WriteTW88(REG0F9, 0x50);        //70MHz NOT HERE
1391   1      //      WriteTW88(REG0FA, 0x00);        //def
1392   1      //      WriteTW88(REG0FB, 0x40);        //def
1393   1      //;FPCLK_PD
1394   1      //      WriteTW88(REG0FC, 0x23);        En.SSPLL
1395   1      //      WriteTW88(REG0FD, 0x00);
1396   1      
1397   1              //-------------------
1398   1              // PAGE 1
1399   1              //-------------------
1400   1              WriteTW88Page(PAGE1_DECODER);
1401   1              WriteTW88(REG11C, 0x0F);        //*** Disable Shadow
1402   1              WriteTW88(REG102, 0x40);
1403   1              //WriteTW88(REG104, 0x00);
1404   1              //moveup                WriteTW88(REG105, 0x2f);        //Reserved def 0x0E
1405   1              WriteTW88(REG106, 0x03);        //ACNTL def 0x00
1406   1              WriteTW88(REG107, 0x02);        //Cropping Register High(CROP_HI) def 0x12
1407   1              //WriteTW88(REG108, 0x12);
1408   1              WriteTW88(REG109, 0xF0);        //Vertical Active Register,Low(VACTIVE_LO) def 0x20
1409   1              WriteTW88(REG10A, 0x0B);        //Horizontal Delay,Low(HDELAY_LO) def 0x10
1410   1              //WriteTW88(REG10B, 0xD0);
1411   1              //WriteTW88(REG10C, 0xCC);
1412   1              //WriteTW88(REG110, 0x00);
1413   1              WriteTW88(REG111, 0x5C);        //CONTRAST def 0x64
1414   1              //WriteTW88(REG112, 0x11);
1415   1              //WriteTW88(REG113, 0x80);
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 24  

1416   1              //WriteTW88(REG114, 0x80);
1417   1              //WriteTW88(REG115, 0x00);
1418   1              WriteTW88(REG117, 0x80);        //Vertical Peaking Control I    def 0x30
1419   1              //WriteTW88(REG118, 0x44);
1420   1              //WriteTW88(REG11D, 0x7F);       //BK120418. Masami request 0x01(NTSC only) on the RCD mode.
1421   1              WriteTW88(REG11E, 0x00);        //Component video format: def 0x08
1422   1              //WriteTW88(REG120, 0x50);      
1423   1              WriteTW88(REG121, 0x22);        //Individual AGC Gain def 0x48
1424   1              //WriteTW88(REG122, 0xF0);
1425   1              //WriteTW88(REG123, 0xD8);
1426   1              //WriteTW88(REG124, 0xBC);
1427   1              //WriteTW88(REG125, 0xB8);
1428   1              //WriteTW88(REG126, 0x44);
1429   1              WriteTW88(REG127, 0x38);        //Clamp Position(PCLAMP)        def 0x2A
1430   1              WriteTW88(REG128, 0x00);
1431   1              //WriteTW88(REG129, 0x00);
1432   1              //WriteTW88(REG12A, 0x78);
1433   1              WriteTW88(REG12B, 0x44);        //Comb Filter   def -100-100b
1434   1              //WriteTW88(REG12C, 0x30);
1435   1              //WriteTW88(REG12D, 0x14);
1436   1              //WriteTW88(REG12E, 0xA5);
1437   1              //WriteTW88(REG12F, 0xE0);
1438   1              WriteTW88(REG130, 0x00);
1439   1              //WriteTW88(REG133, 0x05);      //CLMD
1440   1              WriteTW88(REG134, 0x1A);
1441   1              WriteTW88(REG135, 0x00);
1442   1                                                                      //ADCLLPLL
1443   1              //moveup        WriteTW88(REG1C0, 0x01);                //LLPLL input def 0x00
1444   1              //WriteTW88(REG1C2, 0x01);
1445   1              //WriteTW88(REG1C3, 0x03);
1446   1              //WriteTW88(REG1C4, 0x5A);
1447   1              //WriteTW88(REG1C5, 0x00);
1448   1              WriteTW88(REG1C6, 0x20); //WriteTW88(REG1C6, 0x27);     //WriteTW88(REG1C6, 0x20);  Use VAdcSetFilterBandwidt
             -h()
1449   1              //WriteTW88(REG1C7, 0x04);
1450   1              //WriteTW88(REG1C8, 0x00);
1451   1              //WriteTW88(REG1C9, 0x06);
1452   1              //WriteTW88(REG1CA, 0x06);
1453   1              WriteTW88(REG1CB, 0x3A);        //WriteTW88(REG1CB, 0x30);
1454   1              //WriteTW88(REG1CC, 0x00);
1455   1              //WriteTW88(REG1CD, 0x54);
1456   1              //WriteTW88(REG1D0, 0x00);
1457   1              //WriteTW88(REG1D1, 0xF0);
1458   1              //WriteTW88(REG1D2, 0xF0);
1459   1              //WriteTW88(REG1D3, 0xF0);
1460   1              //WriteTW88(REG1D4, 0x00);
1461   1              //WriteTW88(REG1D5, 0x00);
1462   1              //WriteTW88(REG1D6, 0x10);
1463   1              //WriteTW88(REG1D7, 0x70);
1464   1              //WriteTW88(REG1D8, 0x00);
1465   1              //WriteTW88(REG1D9, 0x04);
1466   1              //WriteTW88(REG1DA, 0x80);
1467   1              //WriteTW88(REG1DB, 0x80);
1468   1              //WriteTW88(REG1DC, 0x20);
1469   1              //WriteTW88(REG1E2, 0xD9);
1470   1              //WriteTW88(REG1E3, 0x07);
1471   1              //WriteTW88(REG1E4, 0x33);
1472   1              //WriteTW88(REG1E5, 0x31);
1473   1              //WriteTW88(REG1E6, 0x00);
1474   1              //WriteTW88(REG1E7, 0x2A);
1475   1      
1476   1              //-------------------
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 25  

1477   1              // PAGE 2
1478   1              //-------------------
1479   1              WriteTW88Page(PAGE2_SCALER);
1480   1              //WriteTW88(REG201, 0x00);
1481   1              //WriteTW88(REG202, 0x20);
1482   1              WriteTW88(REG203, 0xCC);                //XSCALE: 0x1C00. def:0x2000
1483   1              WriteTW88(REG204, 0x1C);                //XSCALE:
1484   1              WriteTW88(REG205, 0x8A);                //YSCALE: 0x0F8A. def:0x2000
1485   1              WriteTW88(REG206, 0x0F);                //YSCALE:
1486   1              WriteTW88(REG207, 0x40);                //PXSCALE[11:4] def 0x800
1487   1              WriteTW88(REG208, 0x20);                //PXINC def 0x10
1488   1              WriteTW88(REG209, 0x00);                //HDSCALE:0x0400 def:0x0100
1489   1              WriteTW88(REG20A, 0x04);                //HDSCALE
1490   1              WriteTW88(REG20B, 0x08);                //HDELAY2 def:0x30
1491   1              //WriteTW88(REG20C, 0xD0);      //HACTIVE2_LO
1492   1              WriteTW88(REG20D, 0x90 | (ReadTW88(REG20D) & 0x03));  //LNTT_HI def 0x80. 
1493   1              WriteTW88(REG20E, 0x20);                //HPADJ def 0x0000.  20E[6:4] HACTIVE2_HI
1494   1              WriteTW88(REG20F, 0x00);
1495   1              WriteTW88(REG210, 0x21);                //HA_POS        def 0x10
1496   1              
1497   1              //HA_LEN                Output DE length control in number of the output clocks.
1498   1              //      R212[3:0]R211[7:0] = PANEL_H+1
1499   1      #if 0
                      WriteTW88(REG211, 0x21);                //HA_LEN        def 0x0300
                      WriteTW88(REG212, 0x03);                //PXSCALE[3:0]  def:0x800 HALEN_H[3:0] def:0x03
              #else
1503   1              WriteTW88(REG211, (BYTE)(PANEL_H+1));           //HA_LEN        def 0x0300
1504   1              WriteTW88(REG212, (PANEL_H+1)>>8);              //PXSCALE[3:0]  def:0x800 HALEN_H[3:0] def:0x03
1505   1      #endif
1506   1              WriteTW88(REG213, 0x00);                //HS_POS        def 0x10
1507   1              WriteTW88(REG214, 0x20);                //HS_LEN
1508   1              WriteTW88(REG215, 0x2E);                //VA_POS        def 0x20
1509   1              //VA_LEN        Output DE control in number of the output lines.
1510   1              //      R217[7:0]R216[7:0] = PANEL_V
1511   1      #if 0
                      WriteTW88(REG216, 0xE0);                //VA_LEN_LO     def 0x0300
                      WriteTW88(REG217, 0x01);                //VA_LEN_HI
              #else
1515   1              WriteTW88(REG216, PANEL_V);             //VA_LEN_LO     def 0x0300
1516   1              WriteTW88(REG217, PANEL_V>>8);  //VA_LEN_HI
1517   1      #endif
1518   1              
1519   1              //WriteTW88(REG218, 0x00);      //VA_LEN_POS
1520   1              //WriteTW88(REG219, 0x00);
1521   1              //WriteTW88(REG21A, 0x00);
1522   1              //WriteTW88(REG21B, 0x00);
1523   1              WriteTW88(REG21C, 0x42);        //PANEL_FRUN. def 0x40
1524   1              //WriteTW88(REG21D, 0x00);
1525   1              WriteTW88(REG21E, 0x03);                //BLANK def 0x00.       --enable screen blanking. SW have to remove 21E[0]
1526   1              WriteTW88(REG280, 0x20);                //Image Adjustment register
1527   1              //WriteTW88(REG281, 0x80);
1528   1              //WriteTW88(REG282, 0x80);
1529   1              //WriteTW88(REG283, 0x80);
1530   1              //WriteTW88(REG284, 0x80);
1531   1              //WriteTW88(REG285, 0x80);
1532   1              //WriteTW88(REG286, 0x80);
1533   1              //WriteTW88(REG287, 0x80);
1534   1              //WriteTW88(REG288, 0x80);
1535   1              //WriteTW88(REG289, 0x80);
1536   1              //WriteTW88(REG28A, 0x80);
1537   1              WriteTW88(REG28B, 0x44);
1538   1              //WriteTW88(REG28C, 0x00);
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 26  

1539   1              //WriteTW88(REG2B0, 0x10);      //Image Adjustment register     
1540   1              //WriteTW88(REG2B1, 0x40);      
1541   1              //WriteTW88(REG2B2, 0x40);
1542   1              //WriteTW88(REG2B6, 0x67);
1543   1              //WriteTW88(REG2B7, 0x94);
1544   1              //WriteTW88(REG2BF, 0x00);      //Test Pattern Generator Register
1545   1              //WriteTW88(REG2E0, 0x00);      //--disable gamma
1546   1              WriteTW88(REG2E4, 0x21);                //--dither
1547   1              //WriteTW88(REG2F8, 0x00);      //8bit Panel interface
1548   1              //WriteTW88(REG2F9, 0x00);      //8bit Panel interface  TW8832:0x80
1549   1      
1550   1              //-------------
1551   1              //Enable TCON
1552   1              //TW8835                                        TW8832
1553   1              WriteTW88Page(PAGE2_TCON);
1554   1              WriteTW88(REG240, 0x10);                //WriteTW88(REG240, 0x11);
1555   1              WriteTW88(REG241, 0x00);                //WriteTW88(REG241, 0x0A);
1556   1              WriteTW88(REG242, 0x05);                //WriteTW88(REG242, 0x05);
1557   1              WriteTW88(REG243, 0x01);                //WriteTW88(REG243, 0x01);
1558   1              WriteTW88(REG244, 0x64);                //WriteTW88(REG244, 0x64);
1559   1              WriteTW88(REG245, 0xF4);                //WriteTW88(REG245, 0xF4);
1560   1              WriteTW88(REG246, 0x00);                //WriteTW88(REG246, 0x00);
1561   1              WriteTW88(REG247, 0x0A);                //WriteTW88(REG247, 0x0A);
1562   1              WriteTW88(REG248, 0x36);                //WriteTW88(REG248, 0x36);
1563   1              WriteTW88(REG249, 0x10);                //WriteTW88(REG249, 0x10);
1564   1              WriteTW88(REG24A, 0x00);                //WriteTW88(REG24A, 0x00);
1565   1              WriteTW88(REG24B, 0x00);                //WriteTW88(REG24B, 0x00);
1566   1              WriteTW88(REG24C, 0x00);                //WriteTW88(REG24C, 0x00);
1567   1              WriteTW88(REG24D, 0x44);                //WriteTW88(REG24D, 0x44);
1568   1              WriteTW88(REG24E, 0x04);                //WriteTW88(REG24E, 0x04);
1569   1      
1570   1              WriteTW88Page(PAGE0_GENERAL);
1571   1              WriteTW88(REG006, 0x06);        //display direction. TSCP,TRSP
1572   1      #if defined(PANEL_SRGB)
                      WriteTW88(REG007, 0x01);        // Serial RGB
              #elif defined(PANEL_FP_LSB)     
                      WriteTW88(REG007, 0x02);        // FP LSB
              #else
1577   1              WriteTW88(REG007, 0x00);        // TCON
1578   1      #endif
1579   1      
1580   1      #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
                      WriteTW88Page(4);
                      WriteTW88(REG4E1, 0x21);                        //SPI_CK_DIV[2:0]=1. SPI_CK_SEL[5:4]=2(CLKPLLMHz) will be changed later 
              #endif
1584   1      
1585   1                              
1586   1      }
1587          
1588          //-----------------------------------------------------------------------------
1589          /**
1590          * turn on DCDC
1591          *
1592          *       DCDC startup step
1593          *       SSPLL ON
1594          *       FP PWC ON
1595          *       call DCDC_on(0) & DCDC_on(1)
1596          *       delay
1597          *       wait VBlank
1598          *       Enable FP Data Out
1599          *       delay
1600          *       call DCDC_on(2)
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 27  

1601          *       FP Bias On
1602          *
1603          * DCDC data out needs more then 200ms delay after SSPLL_PowerUp(ON).
1604          */
1605          BYTE DCDC_StartUP_sub(void)
1606          {
1607   1              BYTE ret;
1608   1      #if 0
                              ret = ReadTW88(REG008);
                              Printf("\nREG008:%bx FPData:%bd Output:%bx",ret, ret&0x20?0:1, ret&0x10?0:1 );
                              Printf("\nREG0E8:%bx", ReadTW88(REG0E8));
                              Printf("\nREG0EA:%bx", ReadTW88(REG0EA));
                              ret = ReadTW88(REG0FC);
                              Printf("\nREG0FC:%bx PD_SSPLL:%bd", ret, ret & 0x80);
                              Printf("\nREG21E:%bx", ReadTW88(REG21E));
              #endif
1617   1      
1618   1              //-------------
1619   1              //FPPWC ON
1620   1              FP_PWC_OnOff(ON);
1621   1      
1622   1              ret=DCDC_On(0);
1623   1              ret=DCDC_On(1);
1624   1      
1625   1              //-------------
1626   1              // wait
1627   1      #ifdef EVB_10
                      delay1ms(100);
              #endif
1630   1      
1631   1              WaitVBlank(1);
1632   1              //-------------
1633   1              //FP Data Out
1634   1              OutputEnablePin(ON,ON);         //Output enable. FP data: enable
1635   1      
1636   1      
1637   1      #ifdef EVB_10
                      delay1ms(15);
              #endif
1640   1      
1641   1              //DCDC final
1642   1              ret=DCDC_On(2);
1643   1      
1644   1              //-------------
1645   1              //FPBIAS ON 
1646   1              FP_BiasOnOff(ON);
1647   1      
1648   1              //disable Blank
1649   1              //WriteTW88Page(PAGE2_SCALER);
1650   1              //WriteTW88(REG21E, ReadTW88(REG21E) & ~0x01);
1651   1      
1652   1              PrintSystemClockMsg("DCDC_StartUp END");
1653   1              if(ret!=ERR_SUCCESS) {
1654   2                      Puts(" FAIL");
1655   2      
1656   2                      //WriteTW88Page(PAGE0_DCDC);
1657   2                      //WriteTW88(REG0E8, 0xF2);      Printf("\nREG0E8:F2[%bd]",ReadTW88(REG0EA)>>4);
1658   2                      //WriteTW88(REG0E8, 0x02);      Printf("\nREG0E8:02[%bd]",ReadTW88(REG0EA)>>4);
1659   2                      //WriteTW88(REG0E8, 0x03);      Printf("\nREG0E8:03[%bd]",ReadTW88(REG0EA)>>4);
1660   2                      //WriteTW88(REG0E8, 0x01);      Printf("\nREG0E8:01[%bd]",ReadTW88(REG0EA)>>4);
1661   2                      //WriteTW88(REG0E8, 0x11);      Printf("\nREG0E8:11[%bd]",ReadTW88(REG0EA)>>4);
1662   2                      //WriteTW88(REG0E8, 0x71);      Printf("\nREG0E8:71[%bd]",ReadTW88(REG0EA)>>4);
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 28  

1663   2              }
1664   1              return ret;
1665   1      }
1666          
1667          //-----------------------------------------------------------------------------
1668          /**
1669          * turn on DCDC
1670          *
1671          * @see DCDC_StartUP_sub
1672          */
1673          BYTE DCDC_StartUP(void)
1674          {
1675   1              BYTE ret;
1676   1              ret=DCDC_StartUP_sub();
1677   1              if(ret == ERR_SUCCESS)
1678   1                      return ERR_SUCCESS;
1679   1      
1680   1              ret=DCDC_StartUP_sub();
1681   1              if(ret == ERR_SUCCESS)
1682   1                      return ERR_SUCCESS;
1683   1      
1684   1              ret=DCDC_StartUP_sub();
1685   1              return ret;
1686   1      }
1687          
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 29  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0085 (BEGIN)
0000         L?0134:
0000 E4                CLR     A
0001 FA                MOV     R2,A
0002 F9                MOV     R1,A
0003 F8                MOV     R0,A
0004 120000      E     LCALL   ?C?ULDIV
0007         L?0135:
0007 900000      R     MOV     DPTR,#FREQ
000A         L?0136:
000A 120000      E     LCALL   ?C?LSTXDATA
000D 900000      R     MOV     DPTR,#FREQ
0010         L?0137:
0010 E0                MOVX    A,@DPTR
0011 FC                MOV     R4,A
0012 A3                INC     DPTR
0013 E0                MOVX    A,@DPTR
0014 FD                MOV     R5,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
0018 A3                INC     DPTR
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B 22                RET     
001C         L?0138:
001C         L?0139:
001C E500        E     MOV     A,regTW88+01H
001E 24F6              ADD     A,#0F6H
0020 F582              MOV     DPL,A
0022 E4                CLR     A
0023 3500        E     ADDC    A,regTW88
0025 F583              MOV     DPH,A
0027 E4                CLR     A
0028         L?0140:
0028 F0                MOVX    @DPTR,A
0029         L?0141:
0029 E500        E     MOV     A,regTW88+01H
002B 240D              ADD     A,#0DH
002D         L?0142:
002D F582              MOV     DPL,A
002F E500        E     MOV     A,regTW88
0031 3402              ADDC    A,#02H
0033 F583              MOV     DPH,A
0035 22                RET     
0036         L?0143:
0036 F582              MOV     DPL,A
0038 E4                CLR     A
0039 3500        E     ADDC    A,regTW88
003B F583              MOV     DPH,A
003D 74F2              MOV     A,#0F2H
003F         L?0144:
003F F0                MOVX    @DPTR,A
0040         L?0145:
0040 E500        E     MOV     A,regTW88+01H
0042 24E8              ADD     A,#0E8H
0044         L?0146:
0044 F582              MOV     DPL,A
0046 E4                CLR     A
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 30  

0047 3500        E     ADDC    A,regTW88
0049 F583              MOV     DPH,A
004B 22                RET     
004C         L?0147:
004C 7480              MOV     A,#080H
004E         L?0148:
004E F0                MOVX    @DPTR,A
004F         L?0149:
004F E500        E     MOV     A,regTW88+01H
0051 24E1              ADD     A,#0E1H
0053         L?0150:
0053 F582              MOV     DPL,A
0055 E500        E     MOV     A,regTW88
0057 3404              ADDC    A,#04H
0059 F583              MOV     DPH,A
005B 22                RET     
005C         L?0151:
005C         L?0152:
005C 7F02              MOV     R7,#02H
005E         L?0153:
005E E4                CLR     A
005F         L?0154:
005F FE                MOV     R6,A
0060 FD                MOV     R5,A
0061 FC                MOV     R4,A
0062 900000      R     MOV     DPTR,#clkpll
0065         L?0155:
0065 E0                MOVX    A,@DPTR
0066 F8                MOV     R0,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 F9                MOV     R1,A
006A A3                INC     DPTR
006B E0                MOVX    A,@DPTR
006C FA                MOV     R2,A
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F FB                MOV     R3,A
0070 22                RET     
0071         L?0156:
0071         L?0157:
0071 E500        E     MOV     A,regTW88+01H
0073 24C0              ADD     A,#0C0H
0075         L?0158:
0075 F582              MOV     DPL,A
0077 E500        E     MOV     A,regTW88
0079 3401              ADDC    A,#01H
007B F583              MOV     DPH,A
007D 22                RET     
007E         L?0159:
007E         L?0160:
007E 120000      E     LCALL   ?C?LSTXDATA
0081 900000      R     MOV     DPTR,#fHost
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 22                RET     
0087         L?0161:
0087 7808              MOV     R0,#08H
0089 120000      E     LCALL   ?C?LSHL
008C         L?0162:
008C 900000      R     MOV     DPTR,#dFPLL
008F 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 31  

0092 900000      R     MOV     DPTR,#dFPLL
0095 22                RET     
0096         L?0163:
0096 E4                CLR     A
0097 F9                MOV     R1,A
0098 F8                MOV     R0,A
0099 120000      E     LCALL   ?C?ULDIV
009C         L?0164:
009C 900000      R     MOV     DPTR,#FPLL
009F         L?0165:
009F 120000      E     LCALL   ?C?LSTXDATA
00A2 900000      R     MOV     DPTR,#FPLL
00A5 22                RET     
00A6         L?0166:
00A6         L?0167:
00A6 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
00A9 020000      E     LJMP    ?C?LSTXDATA
00AC         L?0168:
00AC E4                CLR     A
00AD         L?0169:
00AD FA                MOV     R2,A
00AE F9                MOV     R1,A
00AF F8                MOV     R0,A
00B0 120000      E     LCALL   ?C?ULDIV
00B3 900000      R     MOV     DPTR,#temp32
00B6 22                RET     
00B7         L?0173:
00B7         L?0174:
00B7 120000      E     LCALL   ?C?LMUL
00BA 900000      R     MOV     DPTR,#temp32
00BD 22                RET     
00BE         L?0175:
00BE E0                MOVX    A,@DPTR
00BF FF                MOV     R7,A
00C0 EB                MOV     A,R3
00C1 4F                ORL     A,R7
00C2 FF                MOV     R7,A
00C3 EA                MOV     A,R2
00C4 FE                MOV     R6,A
00C5 E9                MOV     A,R1
00C6 FD                MOV     R5,A
00C7 E8                MOV     A,R0
00C8 FC                MOV     R4,A
00C9 22                RET     
00CA         L?0176:
00CA E4                CLR     A
00CB         L?0177:
00CB FA                MOV     R2,A
00CC F9                MOV     R1,A
00CD F8                MOV     R0,A
00CE 900000      R     MOV     DPTR,#sspll
00D1 22                RET     
00D2         L?0178:
00D2 E0                MOVX    A,@DPTR
00D3 04                INC     A
00D4 F0                MOVX    @DPTR,A
00D5 E0                MOVX    A,@DPTR
00D6 FB                MOV     R3,A
00D7 E4                CLR     A
00D8 FA                MOV     R2,A
00D9 F9                MOV     R1,A
00DA F8                MOV     R0,A
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 32  

00DB 22                RET     
             ; FUNCTION Com0085 (END)

             ; FUNCTION ClockHigh (BEGIN)
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_0
0004 7900        R     MOV     R1,#LOW ?SC_0
0006 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 83
0009 120000      R     LCALL   L?0138
000C 7481              MOV     A,#081H
                                           ; SOURCE LINE # 86
000E 120000      R     LCALL   L?0148
0011 74E0              MOV     A,#0E0H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 88
0014 7F05              MOV     R7,#05H
0016 020000      E     LJMP    _SPI_SetReadModeByRegister
             ; FUNCTION ClockHigh (END)

             ; FUNCTION ClockLow (BEGIN)
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 97
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_6
0004 7900        R     MOV     R1,#LOW ?SC_6
0006 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 103
0009 120000      R     LCALL   L?0138
                                           ; SOURCE LINE # 106
000C 120000      R     LCALL   L?0147
000F 7420              MOV     A,#020H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
0012 7F05              MOV     R7,#05H
0014 020000      E     LJMP    _SPI_SetReadModeByRegister
             ; FUNCTION ClockLow (END)

             ; FUNCTION Clock27 (BEGIN)
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_11
0004 7900        R     MOV     R1,#LOW ?SC_11
0006 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 123
0009 120000      R     LCALL   L?0139
                                           ; SOURCE LINE # 126
000C 120000      R     LCALL   L?0147
000F E4                CLR     A
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
0011 7F05              MOV     R7,#05H
0013 020000      E     LJMP    _SPI_SetReadModeByRegister
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 33  

             ; FUNCTION Clock27 (END)

             ; FUNCTION _SSPLL_PowerUp (BEGIN)
                                           ; SOURCE LINE # 139
;---- Variable 'fOn' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 142
0000 EF                MOV     A,R7
0001 600C              JZ      ?C0004
0003 E500        E     MOV     A,regTW88+01H
0005 24FC              ADD     A,#0FCH
0007 120000      R     LCALL   L?0146
000A E0                MOVX    A,@DPTR
000B 547F              ANL     A,#07FH
000D F0                MOVX    @DPTR,A
000E 22                RET     
000F         ?C0004:
                                           ; SOURCE LINE # 143
000F E500        E     MOV     A,regTW88+01H
0011 24FC              ADD     A,#0FCH
0013 120000      R     LCALL   L?0146
0016 E0                MOVX    A,@DPTR
0017 4480              ORL     A,#080H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
001A         ?C0006:
001A 22                RET     
             ; FUNCTION _SSPLL_PowerUp (END)

             ; FUNCTION _SspllGetPPF (BEGIN)
                                           ; SOURCE LINE # 155
0000 900000      R     MOV     DPTR,#fHost
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 161
0005 120000      R     LCALL   _SspllGetFreqReg
0008 900000      R     MOV     DPTR,#FPLL
000B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 167
000E 900000      R     MOV     DPTR,#fHost
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _SspllGetPost
;---- Variable 'i' assigned to Register 'R3' ----
0016 AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 168
0018 900000      R     MOV     DPTR,#FPLL
001B 120000      R     LCALL   L?0137
001E 900000      R     MOV     DPTR,#?_SspllFPLL2FREQ?BYTE+04H
0021 EB                MOV     A,R3
0022 F0                MOVX    @DPTR,A
0023 120000      R     LCALL   _SspllFPLL2FREQ
;---- Variable 'ppf' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
0026         ?C0007:
0026 22                RET     
             ; FUNCTION _SspllGetPPF (END)

             ; FUNCTION _SspllSetFreqReg (BEGIN)
                                           ; SOURCE LINE # 208
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 34  

0000 900000      R     MOV     DPTR,#FPLL
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
0006 7BFF              MOV     R3,#0FFH
0008 7A00        R     MOV     R2,#HIGH ?SC_18
000A 7900        R     MOV     R1,#LOW ?SC_18
000C 900000      R     MOV     DPTR,#FPLL
000F 120000      R     LCALL   L?0137
0012 120000      R     LCALL   L?0166
0015 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 212
0018 900000      R     MOV     DPTR,#FPLL
001B A3                INC     DPTR
001C A3                INC     DPTR
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 E500        E     MOV     A,regTW88+01H
0022 24FA              ADD     A,#0FAH
0024 120000      R     LCALL   L?0146
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
0029 900000      R     MOV     DPTR,#FPLL
002C 120000      R     LCALL   L?0137
002F 7808              MOV     R0,#08H
0031 120000      E     LCALL   ?C?ULSHR
0034 E500        E     MOV     A,regTW88+01H
0036 24F9              ADD     A,#0F9H
0038 120000      R     LCALL   L?0146
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
003D 900000      R     MOV     DPTR,#FPLL
0040 120000      R     LCALL   L?0137
0043 7810              MOV     R0,#010H
0045 120000      E     LCALL   ?C?ULSHR
0048 AB07              MOV     R3,AR7
004A E500        E     MOV     A,regTW88+01H
004C 24F8              ADD     A,#0F8H
004E 120000      R     LCALL   L?0146
0051 E0                MOVX    A,@DPTR
0052 54F0              ANL     A,#0F0H
0054 FF                MOV     R7,A
0055 EB                MOV     A,R3
0056 4F                ORL     A,R7
0057 FF                MOV     R7,A
0058 E500        E     MOV     A,regTW88+01H
005A 24F8              ADD     A,#0F8H
005C 120000      R     LCALL   L?0146
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
0061 22                RET     
             ; FUNCTION _SspllSetFreqReg (END)

             ; FUNCTION _SspllGetFreqReg (BEGIN)
                                           ; SOURCE LINE # 225
;---- Variable 'fHost' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 229
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 35  

0000 EF                MOV     A,R7
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 239
0001 E500        E     MOV     A,regTW88+01H
0003 24F8              ADD     A,#0F8H
0005 120000      R     LCALL   L?0146
0008 E0                MOVX    A,@DPTR
0009 540F              ANL     A,#0FH
000B FF                MOV     R7,A
000C E4                CLR     A
000D FC                MOV     R4,A
000E FD                MOV     R5,A
000F FE                MOV     R6,A
                                           ; SOURCE LINE # 240
0010 120000      R     LCALL   L?0162
0013 120000      R     LCALL   L?0137
                                           ; SOURCE LINE # 241
0016 120000      R     LCALL   L?0161
0019 120000      R     LCALL   L?0155
001C E500        E     MOV     A,regTW88+01H
001E 24F9              ADD     A,#0F9H
0020 120000      R     LCALL   L?0146
0023 120000      R     LCALL   L?0175
                                           ; SOURCE LINE # 242
0026 120000      R     LCALL   L?0162
0029 120000      R     LCALL   L?0137
                                           ; SOURCE LINE # 243
002C 120000      R     LCALL   L?0161
002F 120000      R     LCALL   L?0155
0032 E500        E     MOV     A,regTW88+01H
0034 24FA              ADD     A,#0FAH
0036 120000      R     LCALL   L?0146
0039 120000      R     LCALL   L?0175
003C 900000      R     MOV     DPTR,#dFPLL
003F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 244
0042         ?C0010:
                                           ; SOURCE LINE # 245
0042 900000      R     MOV     DPTR,#dFPLL
0045 120000      R     LCALL   L?0137
                                           ; SOURCE LINE # 246
0048         ?C0011:
0048 22                RET     
             ; FUNCTION _SspllGetFreqReg (END)

             ; FUNCTION _SspllSetAnalogControl (BEGIN)
                                           ; SOURCE LINE # 257
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 260
0000 E500        E     MOV     A,regTW88+01H
0002 24FD              ADD     A,#0FDH
0004 120000      R     LCALL   L?0146
0007 EF                MOV     A,R7
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 261
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 36  

0009 22                RET     
             ; FUNCTION _SspllSetAnalogControl (END)

             ; FUNCTION _SspllGetPost (BEGIN)
                                           ; SOURCE LINE # 267
;---- Variable 'post' assigned to Register 'R6' ----
;---- Variable 'fHost' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 271
0000 EF                MOV     A,R7
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 277
0001 E500        E     MOV     A,regTW88+01H
0003 24FD              ADD     A,#0FDH
0005 120000      R     LCALL   L?0146
0008 E0                MOVX    A,@DPTR
0009 FE                MOV     R6,A
                                           ; SOURCE LINE # 278
000A         ?C0014:
                                           ; SOURCE LINE # 279
000A EE                MOV     A,R6
000B C4                SWAP    A
000C 13                RRC     A
000D 13                RRC     A
000E 5403              ANL     A,#03H
0010 FF                MOV     R7,A
                                           ; SOURCE LINE # 280
0011         ?C0015:
0011 22                RET     
             ; FUNCTION _SspllGetPost (END)

             ; FUNCTION _SspllFREQ2FPLL (BEGIN)
                                           ; SOURCE LINE # 295
;---- Variable 'FREQ' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 298
0000 7BE8              MOV     R3,#0E8H
0002 7A03              MOV     R2,#03H
                                           ; SOURCE LINE # 299
0004 120000      R     LCALL   L?0163
0007 120000      R     LCALL   L?0137
000A 900000      R     MOV     DPTR,#POST
000D E0                MOVX    A,@DPTR
000E F9                MOV     R1,A
000F F8                MOV     R0,A
0010 120000      E     LCALL   ?C?LSHL
0013 A3                INC     DPTR
                                           ; SOURCE LINE # 300
0014 120000      R     LCALL   L?0165
0017 120000      R     LCALL   L?0137
001A 780C              MOV     R0,#0CH
001C 120000      E     LCALL   ?C?LSHL
                                           ; SOURCE LINE # 301
001F 120000      R     LCALL   L?0164
0022 120000      R     LCALL   L?0137
0025 7B2F              MOV     R3,#02FH
0027 7A0D              MOV     R2,#0DH
                                           ; SOURCE LINE # 302
0029 120000      R     LCALL   L?0163
002C 120000      R     LCALL   L?0137
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 37  

                                           ; SOURCE LINE # 303
002F         ?C0016:
002F 22                RET     
             ; FUNCTION _SspllFREQ2FPLL (END)

             ; FUNCTION _SspllFPLL2FREQ (BEGIN)
                                           ; SOURCE LINE # 348
;---- Variable 'FPLL' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 351
0000 7B40              MOV     R3,#040H
                                           ; SOURCE LINE # 352
0002 120000      R     LCALL   L?0134
0005 7BF3              MOV     R3,#0F3H
0007 7A6F              MOV     R2,#06FH
0009 7906              MOV     R1,#06H
000B 7800              MOV     R0,#00H
000D 120000      E     LCALL   ?C?LMUL
                                           ; SOURCE LINE # 353
0010 120000      R     LCALL   L?0135
0013 7B08              MOV     R3,#08H
                                           ; SOURCE LINE # 354
0015 120000      R     LCALL   L?0134
0018 900000      R     MOV     DPTR,#POST
001B E0                MOVX    A,@DPTR
001C F9                MOV     R1,A
001D F8                MOV     R0,A
001E 120000      E     LCALL   ?C?ULSHR
0021 A3                INC     DPTR
                                           ; SOURCE LINE # 355
0022 120000      R     LCALL   L?0136
                                           ; SOURCE LINE # 356
0025         ?C0017:
0025 22                RET     
             ; FUNCTION _SspllFPLL2FREQ (END)

             ; FUNCTION _SspllSetFreqAndPll (BEGIN)
                                           ; SOURCE LINE # 374
0000 900000      R     MOV     DPTR,#_PPF
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 379
0006 7BFF              MOV     R3,#0FFH
0008 7A00        R     MOV     R2,#HIGH ?SC_40
000A 7900        R     MOV     R1,#LOW ?SC_40
000C 900000      R     MOV     DPTR,#_PPF
000F 120000      R     LCALL   L?0137
0012 120000      R     LCALL   L?0166
0015 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 380
0018 7B40              MOV     R3,#040H
001A 7A42              MOV     R2,#042H
001C 790F              MOV     R1,#0FH
001E 7800              MOV     R0,#00H
0020 900000      R     MOV     DPTR,#_PPF
0023 120000      R     LCALL   L?0137
0026 120000      E     LCALL   ?C?ULDIV
0029 900000      R     MOV     DPTR,#ppf
002C EF                MOV     A,R7
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 383
002E C3                CLR     C
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 38  

002F 941B              SUBB    A,#01BH
0031 5013              JNC     ?C0018
0033 900000      R     MOV     DPTR,#VCO
0036 7402              MOV     A,#02H
0038 F0                MOVX    @DPTR,A
0039 E4                CLR     A
003A 900000      R     MOV     DPTR,#CURR
003D F0                MOVX    @DPTR,A
003E 900000      R     MOV     DPTR,#POST
0041 7402              MOV     A,#02H
0043 F0                MOVX    @DPTR,A
0044 8030              SJMP    ?C0019
0046         ?C0018:
                                           ; SOURCE LINE # 384
0046 900000      R     MOV     DPTR,#ppf
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B C3                CLR     C
004C 9436              SUBB    A,#036H
004E 500D              JNC     ?C0020
0050 900000      R     MOV     DPTR,#VCO
0053 7402              MOV     A,#02H
0055 F0                MOVX    @DPTR,A
0056 900000      R     MOV     DPTR,#CURR
0059 14                DEC     A
005A F0                MOVX    @DPTR,A
005B 8015              SJMP    ?C0118
005D         ?C0020:
                                           ; SOURCE LINE # 385
005D EF                MOV     A,R7
005E C3                CLR     C
005F 946C              SUBB    A,#06CH
0061 900000      R     MOV     DPTR,#VCO
0064 5004              JNC     ?C0022
0066 7402              MOV     A,#02H
0068 8002              SJMP    ?C0117
006A         ?C0022:
                                           ; SOURCE LINE # 386
006A 7403              MOV     A,#03H
006C         ?C0117:
006C F0                MOVX    @DPTR,A
006D 900000      R     MOV     DPTR,#CURR
0070 F0                MOVX    @DPTR,A
0071 E4                CLR     A
0072         ?C0118:
0072 900000      R     MOV     DPTR,#POST
0075 F0                MOVX    @DPTR,A
0076         ?C0019:
                                           ; SOURCE LINE # 388
0076 900000      R     MOV     DPTR,#VCO
0079 E0                MOVX    A,@DPTR
007A 04                INC     A
007B 900000      R     MOV     DPTR,#CURR
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 391
007F 900000      R     MOV     DPTR,#_PPF
0082 120000      R     LCALL   L?0137
0085 900000      R     MOV     DPTR,#POST
0088 E0                MOVX    A,@DPTR
0089 900000      R     MOV     DPTR,#?_SspllFREQ2FPLL?BYTE+04H
008C F0                MOVX    @DPTR,A
008D 120000      R     LCALL   _SspllFREQ2FPLL
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 39  

;---- Variable 'FPLL' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 394
0090 120000      R     LCALL   _SspllSetFreqReg
                                           ; SOURCE LINE # 395
0093 900000      R     MOV     DPTR,#POST
0096 E0                MOVX    A,@DPTR
0097 C4                SWAP    A
0098 33                RLC     A
0099 33                RLC     A
009A 54C0              ANL     A,#0C0H
009C FF                MOV     R7,A
009D 900000      R     MOV     DPTR,#VCO
00A0 E0                MOVX    A,@DPTR
00A1 FE                MOV     R6,A
00A2 C4                SWAP    A
00A3 54F0              ANL     A,#0F0H
00A5 4F                ORL     A,R7
00A6 FF                MOV     R7,A
00A7 900000      R     MOV     DPTR,#CURR
00AA E0                MOVX    A,@DPTR
00AB 4F                ORL     A,R7
00AC FF                MOV     R7,A
00AD 120000      R     LCALL   _SspllSetAnalogControl
                                           ; SOURCE LINE # 397
00B0 7BFF              MOV     R3,#0FFH
00B2 7A00        R     MOV     R2,#HIGH ?SC_65
00B4 7900        R     MOV     R1,#LOW ?SC_65
00B6 900000      R     MOV     DPTR,#POST
00B9 E0                MOVX    A,@DPTR
00BA 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
00BD F0                MOVX    @DPTR,A
00BE 900000      R     MOV     DPTR,#VCO
00C1 E0                MOVX    A,@DPTR
00C2 900000      E     MOV     DPTR,#?_dPrintf?BYTE+04H
00C5 F0                MOVX    @DPTR,A
00C6 900000      R     MOV     DPTR,#CURR
00C9 E0                MOVX    A,@DPTR
00CA 900000      E     MOV     DPTR,#?_dPrintf?BYTE+05H
00CD F0                MOVX    @DPTR,A
00CE 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 400
00D1 900000      R     MOV     DPTR,#ppf
00D4 E0                MOVX    A,@DPTR
00D5 FF                MOV     R7,A
00D6 C3                CLR     C
00D7 9496              SUBB    A,#096H
00D9 4007              JC      ?C0024
                                           ; SOURCE LINE # 401
00DB EF                MOV     A,R7
00DC 13                RRC     A
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
00DE 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 403
00E0 8002              SJMP    ?C0119
00E2         ?C0024:
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 405
00E2 E4                CLR     A
00E3 FF                MOV     R7,A
00E4         ?C0119:
00E4 120000      R     LCALL   _PclkSetDividerReg
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 40  

                                           ; SOURCE LINE # 406
00E7         ?C0025:
                                           ; SOURCE LINE # 409
00E7 900000      R     MOV     DPTR,#ppf
00EA E0                MOVX    A,@DPTR
00EB 2427              ADD     A,#027H
00ED FF                MOV     R7,A
00EE E4                CLR     A
00EF 33                RLC     A
00F0 FE                MOV     R6,A
00F1 7C00              MOV     R4,#00H
00F3 7D28              MOV     R5,#028H
00F5 120000      E     LCALL   ?C?UIDIV
00F8 EF                MOV     A,R7
00F9 14                DEC     A
00FA FF                MOV     R7,A
00FB 120000      R     LCALL   _PclkoSetDiv
                                           ; SOURCE LINE # 411
00FE 7F01              MOV     R7,#01H
0100 020000      R     LJMP    _PclkSetPolarity
             ; FUNCTION _SspllSetFreqAndPll (END)

             ; FUNCTION _PclkSetDividerReg (BEGIN)
                                           ; SOURCE LINE # 425
;---- Variable 'divider' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 428
0000 E500        E     MOV     A,regTW88+01H
0002 24F6              ADD     A,#0F6H
0004 120000      R     LCALL   L?0146
0007 E0                MOVX    A,@DPTR
0008 54F8              ANL     A,#0F8H
000A 4F                ORL     A,R7
000B FF                MOV     R7,A
000C E500        E     MOV     A,regTW88+01H
000E 24F6              ADD     A,#0F6H
0010 120000      R     LCALL   L?0146
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 429
0015 22                RET     
             ; FUNCTION _PclkSetDividerReg (END)

             ; FUNCTION _PclkGetFreq (BEGIN)
                                           ; SOURCE LINE # 435
;---- Variable 'fHost' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 436
                                           ; SOURCE LINE # 439
0000 EF                MOV     A,R7
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 445
0001 E500        E     MOV     A,regTW88+01H
0003 24F6              ADD     A,#0F6H
0005 120000      R     LCALL   L?0146
0008 E0                MOVX    A,@DPTR
0009 5403              ANL     A,#03H
000B 900000      R     MOV     DPTR,#divider
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 446
000F         ?C0029:
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 41  

                                           ; SOURCE LINE # 447
000F 900000      R     MOV     DPTR,#divider
0012 E0                MOVX    A,@DPTR
0013 14                DEC     A
0014 6012              JZ      ?C0032
0016 14                DEC     A
0017 601C              JZ      ?C0033
0019 14                DEC     A
001A 6026              JZ      ?C0034
001C 2403              ADD     A,#03H
001E 7034              JNZ     ?C0030
                                           ; SOURCE LINE # 448
0020         ?C0031:
0020 900000      R     MOV     DPTR,#sspll
0023 120000      R     LCALL   L?0137
0026 8026              SJMP    ?C0122
                                           ; SOURCE LINE # 449
0028         ?C0032:
0028 7B02              MOV     R3,#02H
002A 120000      R     LCALL   L?0176
002D 120000      R     LCALL   L?0137
0030 120000      E     LCALL   ?C?ULDIV
0033         ?C0120:
0033 8019              SJMP    ?C0122
                                           ; SOURCE LINE # 450
0035         ?C0033:
0035 7B04              MOV     R3,#04H
0037 120000      R     LCALL   L?0176
003A 120000      R     LCALL   L?0137
003D 120000      E     LCALL   ?C?ULDIV
0040         ?C0121:
0040 800C              SJMP    ?C0122
                                           ; SOURCE LINE # 451
0042         ?C0034:
0042 E4                CLR     A
0043 7B08              MOV     R3,#08H
0045 120000      R     LCALL   L?0177
0048 120000      R     LCALL   L?0137
004B 120000      E     LCALL   ?C?ULDIV
004E         ?C0122:
004E 900000      R     MOV     DPTR,#temp32
0051 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 452
0054         ?C0030:
                                           ; SOURCE LINE # 453
0054 900000      R     MOV     DPTR,#temp32
0057 120000      R     LCALL   L?0137
                                           ; SOURCE LINE # 454
005A         ?C0035:
005A 22                RET     
             ; FUNCTION _PclkGetFreq (END)

             ; FUNCTION _PclkoGetFreq (BEGIN)
                                           ; SOURCE LINE # 459
;---- Variable 'fHost' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 463
0000 EF                MOV     A,R7
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 466
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 469
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 42  

0001 120000      R     LCALL   L?0141
0004 E0                MOVX    A,@DPTR
0005 5403              ANL     A,#03H
0007 900000      R     MOV     DPTR,#divider
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
000B         ?C0037:
                                           ; SOURCE LINE # 471
000B 900000      R     MOV     DPTR,#divider
                                           ; SOURCE LINE # 472
000E 120000      R     LCALL   L?0178
0011 900000      R     MOV     DPTR,#pclk
0014 120000      R     LCALL   L?0137
0017 120000      E     LCALL   ?C?ULDIV
;---- Variable 'temp32' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 474
001A         ?C0038:
001A 22                RET     
             ; FUNCTION _PclkoGetFreq (END)

             ; FUNCTION _PclkoSetDiv (BEGIN)
                                           ; SOURCE LINE # 487
;---- Variable 'div' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 491
0000 120000      R     LCALL   L?0141
0003 E0                MOVX    A,@DPTR
0004 54FC              ANL     A,#0FCH
;---- Variable 'value' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 492
0006 4F                ORL     A,R7
0007 FF                MOV     R7,A
0008 120000      R     LCALL   L?0141
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
000D 22                RET     
             ; FUNCTION _PclkoSetDiv (END)

             ; FUNCTION _PclkSetPolarity (BEGIN)
                                           ; SOURCE LINE # 503
;---- Variable 'pol' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 507
0000 120000      R     LCALL   L?0141
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
;---- Variable 'value' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 508
0005 EF                MOV     A,R7
0006 6006              JZ      ?C0040
0008 EE                MOV     A,R6
0009 4410              ORL     A,#010H
000B FE                MOV     R6,A
000C 8004              SJMP    ?C0041
000E         ?C0040:
                                           ; SOURCE LINE # 509
000E EE                MOV     A,R6
000F 54EF              ANL     A,#0EFH
0011 FE                MOV     R6,A
0012         ?C0041:
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 43  

                                           ; SOURCE LINE # 510
0012 120000      R     LCALL   L?0141
0015 EE                MOV     A,R6
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 511
0017 22                RET     
             ; FUNCTION _PclkSetPolarity (END)

             ; FUNCTION _ClkPllSetSelectReg (BEGIN)
                                           ; SOURCE LINE # 522
;---- Variable 'ClkPllSel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 525
0000 EF                MOV     A,R7
0001 600C              JZ      ?C0043
0003 E500        E     MOV     A,regTW88+01H
0005 24E0              ADD     A,#0E0H
0007 120000      R     LCALL   L?0150
000A E0                MOVX    A,@DPTR
000B 4401              ORL     A,#01H
000D F0                MOVX    @DPTR,A
000E 22                RET     
000F         ?C0043:
                                           ; SOURCE LINE # 526
000F E500        E     MOV     A,regTW88+01H
0011 24E0              ADD     A,#0E0H
0013 120000      R     LCALL   L?0150
0016 E0                MOVX    A,@DPTR
0017 54FE              ANL     A,#0FEH
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 527
001A         ?C0045:
001A 22                RET     
             ; FUNCTION _ClkPllSetSelectReg (END)

             ; FUNCTION _ClkPllSetDividerReg (BEGIN)
                                           ; SOURCE LINE # 532
;---- Variable 'divider' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 535
0000 120000      R     LCALL   L?0149
0003 E0                MOVX    A,@DPTR
0004 54F8              ANL     A,#0F8H
0006 4F                ORL     A,R7
0007 FF                MOV     R7,A
0008 120000      R     LCALL   L?0149
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 536
000D 22                RET     
             ; FUNCTION _ClkPllSetDividerReg (END)

             ; FUNCTION _ClkPllSetSelDiv (BEGIN)
                                           ; SOURCE LINE # 544
0000 900000      R     MOV     DPTR,#ClkPllSel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 545
                                           ; SOURCE LINE # 548
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 44  

0008 E4                CLR     A
0009 900000      R     MOV     DPTR,#i
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 551
000D 120000      R     LCALL   McuSpiClkReadSelectReg
0010 900000      R     MOV     DPTR,#mcu_sel
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 552
0015 BF0205            CJNE    R7,#02H,?C0047
                                           ; SOURCE LINE # 553
0018 E4                CLR     A
0019 FF                MOV     R7,A
001A 120000      R     LCALL   _McuSpiClkSelect
001D         ?C0047:
                                           ; SOURCE LINE # 558
001D 900000      R     MOV     DPTR,#ClkPllSel
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 120000      R     LCALL   _ClkPllSetSelectReg
0025         ?C0050:
                                           ; SOURCE LINE # 559
                                           ; SOURCE LINE # 560
0025 900000      R     MOV     DPTR,#ClkPllDiv
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A 120000      R     LCALL   _ClkPllSetDividerReg
                                           ; SOURCE LINE # 561
002D 900000      R     MOV     DPTR,#ClkPllDiv
0030 E0                MOVX    A,@DPTR
0031 04                INC     A
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 562
0033 E4                CLR     A
0034 FF                MOV     R7,A
0035 120000      R     LCALL   _ClkPllGetFreq
0038 900000      R     MOV     DPTR,#clkpll
003B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 563
003E 900000      R     MOV     DPTR,#clkpll
0041 120000      R     LCALL   L?0137
0044 900000      R     MOV     DPTR,#?_SpiClkGetFreq?BYTE+01H
0047 120000      E     LCALL   ?C?LSTXDATA
004A E4                CLR     A
004B FF                MOV     R7,A
004C 120000      R     LCALL   _SpiClkGetFreq
004F 900000      R     MOV     DPTR,#spi_clk
0052 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 564
0055 900000      R     MOV     DPTR,#i
0058 E0                MOVX    A,@DPTR
0059 04                INC     A
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 565
005B 7FC0              MOV     R7,#0C0H
005D 7E68              MOV     R6,#068H
005F 7D78              MOV     R5,#078H
0061 7C04              MOV     R4,#04H
0063 900000      R     MOV     DPTR,#spi_clk
0066 120000      R     LCALL   L?0155
0069 D3                SETB    C
006A 120000      E     LCALL   ?C?ULCMP
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 45  

006D 50B6              JNC     ?C0050
                                           ; SOURCE LINE # 566
006F 900000      R     MOV     DPTR,#i
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 6401              XRL     A,#01H
0076 600F              JZ      ?C0051
                                           ; SOURCE LINE # 567
0078 7BFF              MOV     R3,#0FFH
007A 7A00        R     MOV     R2,#HIGH ?SC_92
007C 7900        R     MOV     R1,#LOW ?SC_92
007E EF                MOV     A,R7
007F 14                DEC     A
0080 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
0083 F0                MOVX    @DPTR,A
0084 120000      E     LCALL   _ePrintf
0087         ?C0051:
                                           ; SOURCE LINE # 570
0087 900000      R     MOV     DPTR,#mcu_sel
008A E0                MOVX    A,@DPTR
008B B40205            CJNE    A,#02H,?C0053
                                           ; SOURCE LINE # 571
008E 7F02              MOV     R7,#02H
0090 120000      R     LCALL   _McuSpiClkSelect
                                           ; SOURCE LINE # 572
0093         ?C0053:
0093 22                RET     
             ; FUNCTION _ClkPllSetSelDiv (END)

             ; FUNCTION _ClkPllGetFreq (BEGIN)
                                           ; SOURCE LINE # 578
0000 900000      R     MOV     DPTR,#fHost
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 583
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 587
                                           ; SOURCE LINE # 589
0005 E500        E     MOV     A,regTW88+01H
0007 24E0              ADD     A,#0E0H
0009 120000      R     LCALL   L?0150
000C E0                MOVX    A,@DPTR
000D 5401              ANL     A,#01H
000F 900000      R     MOV     DPTR,#temp8
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
0013         ?C0055:
                                           ; SOURCE LINE # 591
0013 900000      R     MOV     DPTR,#temp8
0016 E0                MOVX    A,@DPTR
0017 702A              JNZ     ?C0056
                                           ; SOURCE LINE # 592
0019 900000      R     MOV     DPTR,#fHost
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 120000      R     LCALL   _SspllGetPPF
0021 900000      R     MOV     DPTR,#temp32
0024 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 593
0027 900000      R     MOV     DPTR,#temp32
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 46  

002A 120000      R     LCALL   L?0137
002D 900000      R     MOV     DPTR,#?_PclkGetFreq?BYTE+01H
0030 120000      E     LCALL   ?C?LSTXDATA
0033 900000      R     MOV     DPTR,#fHost
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 120000      R     LCALL   _PclkGetFreq
003B 900000      R     MOV     DPTR,#clkpll
003E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 594
0041 800A              SJMP    ?C0057
0043         ?C0056:
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
0043 900000      R     MOV     DPTR,#clkpll
0046 120000      E     LCALL   ?C?LSTKXDATA
0049 06                DB      06H
004A 6F                DB      06FH
004B F3                DB      0F3H
004C 00                DB      00H
                                           ; SOURCE LINE # 597
004D         ?C0057:
                                           ; SOURCE LINE # 598
004D 900000      R     MOV     DPTR,#fHost
0050 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 600
                                           ; SOURCE LINE # 601
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 604
0051 120000      R     LCALL   L?0149
0054 E0                MOVX    A,@DPTR
0055 5407              ANL     A,#07H
0057 900000      R     MOV     DPTR,#temp8
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 605
005B         ?C0059:
                                           ; SOURCE LINE # 606
005B 900000      R     MOV     DPTR,#temp8
005E E0                MOVX    A,@DPTR
005F B40800            CJNE    A,#08H,?C0115
0062         ?C0115:
0062 507C              JNC     ?C0060
0064 900000      R     MOV     DPTR,#?C0116
0067 F8                MOV     R0,A
0068 28                ADD     A,R0
0069 28                ADD     A,R0
006A 73                JMP     @A+DPTR
006B         ?C0116:
006B 020000      R     LJMP    ?C0061
006E 020000      R     LJMP    ?C0062
0071 020000      R     LJMP    ?C0063
0074 020000      R     LJMP    ?C0064
0077 020000      R     LJMP    ?C0065
007A 020000      R     LJMP    ?C0066
007D 020000      R     LJMP    ?C0067
0080 020000      R     LJMP    ?C0068
                                           ; SOURCE LINE # 607
0083         ?C0061:
0083 900000      R     MOV     DPTR,#clkpll
0086 120000      R     LCALL   L?0137
0089 A3                INC     DPTR
008A 020000      R     LJMP    ?C0129
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 47  

                                           ; SOURCE LINE # 608
008D         ?C0062:
008D 120000      R     LCALL   L?0151
0090 120000      E     LCALL   ?C?LMUL
0093 7B03              MOV     R3,#03H
0095 120000      R     LCALL   L?0168
0098         ?C0123:
0098 020000      R     LJMP    ?C0129
                                           ; SOURCE LINE # 609
009B         ?C0063:
009B 120000      R     LCALL   L?0151
009E 120000      R     LCALL   L?0173
00A1         ?C0124:
00A1 020000      R     LJMP    ?C0129
                                           ; SOURCE LINE # 610
00A4         ?C0064:
00A4 120000      R     LCALL   L?0152
00A7 120000      E     LCALL   ?C?LMUL
00AA 7B05              MOV     R3,#05H
00AC 120000      R     LCALL   L?0168
00AF         ?C0125:
00AF 802C              SJMP    ?C0129
                                           ; SOURCE LINE # 611
00B1         ?C0065:
00B1 7F03              MOV     R7,#03H
00B3 120000      R     LCALL   L?0153
00B6 120000      R     LCALL   L?0173
00B9         ?C0126:
00B9 8022              SJMP    ?C0129
                                           ; SOURCE LINE # 612
00BB         ?C0066:
00BB 120000      R     LCALL   L?0152
00BE 120000      E     LCALL   ?C?LMUL
00C1 E4                CLR     A
00C2 7B07              MOV     R3,#07H
00C4 120000      R     LCALL   L?0169
00C7         ?C0127:
00C7 8014              SJMP    ?C0129
                                           ; SOURCE LINE # 613
00C9         ?C0067:
00C9 E4                CLR     A
00CA 7F04              MOV     R7,#04H
00CC 120000      R     LCALL   L?0154
00CF 120000      R     LCALL   L?0174
00D2         ?C0128:
00D2 8009              SJMP    ?C0129
                                           ; SOURCE LINE # 614
00D4         ?C0068:
00D4 E4                CLR     A
00D5 7F05              MOV     R7,#05H
00D7 120000      R     LCALL   L?0154
00DA 120000      R     LCALL   L?0174
00DD         ?C0129:
00DD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 615
00E0         ?C0060:
                                           ; SOURCE LINE # 616
00E0 900000      R     MOV     DPTR,#temp32
00E3 120000      R     LCALL   L?0137
                                           ; SOURCE LINE # 617
00E6         ?C0069:
00E6 22                RET     
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 48  

             ; FUNCTION _ClkPllGetFreq (END)

             ; FUNCTION _McuSpiClkToPclk (BEGIN)
                                           ; SOURCE LINE # 653
;---- Variable 'divider' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 654
                                           ; SOURCE LINE # 679
0000 E500        E     MOV     A,regTW88+01H
0002 24E0              ADD     A,#0E0H
0004 120000      R     LCALL   L?0150
0007 E0                MOVX    A,@DPTR
0008 FE                MOV     R6,A
0009 900000      R     MOV     DPTR,#shadow_r4e0
                                           ; SOURCE LINE # 680
000C 120000      R     LCALL   L?0148
000F E0                MOVX    A,@DPTR
0010 900000      R     MOV     DPTR,#shadow_r4e1
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 682
0014 EE                MOV     A,R6
0015 54FE              ANL     A,#0FEH
0017 FE                MOV     R6,A
0018 E500        E     MOV     A,regTW88+01H
001A 24E0              ADD     A,#0E0H
001C 120000      R     LCALL   L?0150
001F EE                MOV     A,R6
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 683
0021 EF                MOV     A,R7
0022 4420              ORL     A,#020H
0024 FF                MOV     R7,A
0025 120000      R     LCALL   L?0149
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 685
002A 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 687
002C         ?C0070:
002C 22                RET     
             ; FUNCTION _McuSpiClkToPclk (END)

             ; FUNCTION McuSpiClkRestore (BEGIN)
                                           ; SOURCE LINE # 696
                                           ; SOURCE LINE # 697
                                           ; SOURCE LINE # 710
0000 900000      R     MOV     DPTR,#shadow_r4e0
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 E500        E     MOV     A,regTW88+01H
0007 24E0              ADD     A,#0E0H
0009 120000      R     LCALL   L?0150
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 713
000E 900000      R     MOV     DPTR,#shadow_r4e1
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   L?0149
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 717
0018 22                RET     
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 49  

             ; FUNCTION McuSpiClkRestore (END)

             ; FUNCTION McuSpiClkReadSelectReg (BEGIN)
                                           ; SOURCE LINE # 723
                                           ; SOURCE LINE # 724
                                           ; SOURCE LINE # 727
0000 120000      R     LCALL   L?0149
0003 E0                MOVX    A,@DPTR
0004 5430              ANL     A,#030H
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 728
0006 C4                SWAP    A
0007 540F              ANL     A,#0FH
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 729
000A         ?C0072:
000A 22                RET     
             ; FUNCTION McuSpiClkReadSelectReg (END)

             ; FUNCTION _McuSpiClkSelect (BEGIN)
                                           ; SOURCE LINE # 742
;---- Variable 'McuSpiClkSel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 743
                                           ; SOURCE LINE # 746
0000 120000      R     LCALL   L?0149
0003 E0                MOVX    A,@DPTR
0004 540F              ANL     A,#0FH
0006 FE                MOV     R6,A
;---- Variable 'value' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 747
0007 EF                MOV     A,R7
0008 C4                SWAP    A
0009 54F0              ANL     A,#0F0H
000B 4E                ORL     A,R6
000C FF                MOV     R7,A
000D 120000      R     LCALL   L?0149
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 748
0012 22                RET     
             ; FUNCTION _McuSpiClkSelect (END)

             ; FUNCTION _McuGetClkFreq (BEGIN)
                                           ; SOURCE LINE # 765
;---- Variable 'fHost' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 770
0000 EF                MOV     A,R7
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
                                           ; SOURCE LINE # 774
                                           ; SOURCE LINE # 776
0001 120000      R     LCALL   L?0149
0004 E0                MOVX    A,@DPTR
0005 FE                MOV     R6,A
0006 C4                SWAP    A
0007 540F              ANL     A,#0FH
0009 900000      R     MOV     DPTR,#temp8
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 777
000D         ?C0075:
                                           ; SOURCE LINE # 778
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 50  

000D 900000      R     MOV     DPTR,#temp8
0010 E0                MOVX    A,@DPTR
0011 14                DEC     A
0012 6007              JZ      ?C0078
0014 14                DEC     A
0015 6010              JZ      ?C0079
0017 2402              ADD     A,#02H
                                           ; SOURCE LINE # 779
0019         ?C0077:
0019 8017              SJMP    ?C0130
                                           ; SOURCE LINE # 780
001B         ?C0078:
001B 900000      R     MOV     DPTR,#temp32
001E 120000      E     LCALL   ?C?LSTKXDATA
0021 00                DB      00H
0022 00                DB      00H
0023 7D                DB      07DH
0024 00                DB      00H
0025 8015              SJMP    ?C0076
                                           ; SOURCE LINE # 781
0027         ?C0079:
0027 120000      R     LCALL   _ClkPllGetFreq
002A 900000      R     MOV     DPTR,#temp32
002D 120000      E     LCALL   ?C?LSTXDATA
0030 800A              SJMP    ?C0076
                                           ; SOURCE LINE # 782
0032         ?C0130:
0032 900000      R     MOV     DPTR,#temp32
0035 120000      E     LCALL   ?C?LSTKXDATA
0038 01                DB      01H
0039 9B                DB      09BH
003A FC                DB      0FCH
003B C0                DB      0C0H
                                           ; SOURCE LINE # 784
003C         ?C0076:
                                           ; SOURCE LINE # 785
003C 900000      R     MOV     DPTR,#temp32
003F 120000      R     LCALL   L?0137
                                           ; SOURCE LINE # 786
0042         ?C0081:
0042 22                RET     
             ; FUNCTION _McuGetClkFreq (END)

             ; FUNCTION _SpiClkGetFreq (BEGIN)
                                           ; SOURCE LINE # 796
;---- Variable 'fHost' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 800
0000 EF                MOV     A,R7
                                           ; SOURCE LINE # 802
                                           ; SOURCE LINE # 803
                                           ; SOURCE LINE # 804
                                           ; SOURCE LINE # 806
0001 E500        E     MOV     A,regTW88+01H
0003 24F6              ADD     A,#0F6H
0005 120000      R     LCALL   L?0146
0008 E0                MOVX    A,@DPTR
0009 C4                SWAP    A
000A 540F              ANL     A,#0FH
000C 900000      R     MOV     DPTR,#divider
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 807
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 51  

0010         ?C0083:
                                           ; SOURCE LINE # 808
0010 900000      R     MOV     DPTR,#divider
                                           ; SOURCE LINE # 809
0013 120000      R     LCALL   L?0178
0016 900000      R     MOV     DPTR,#mcu_clk
0019 120000      R     LCALL   L?0137
001C 120000      E     LCALL   ?C?ULDIV
;---- Variable 'temp32' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 811
001F         ?C0084:
001F 22                RET     
             ; FUNCTION _SpiClkGetFreq (END)

             ; FUNCTION _LLPLLSetClockSource (BEGIN)
                                           ; SOURCE LINE # 819
;---- Variable 'use_27M' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 820
                                           ; SOURCE LINE # 822
0000 EF                MOV     A,R7
0001 6008              JZ      ?C0085
0003 120000      R     LCALL   L?0156
0006 E0                MOVX    A,@DPTR
0007 4401              ORL     A,#01H
0009 F0                MOVX    @DPTR,A
000A 22                RET     
000B         ?C0085:
                                           ; SOURCE LINE # 823
000B 120000      R     LCALL   L?0156
000E E0                MOVX    A,@DPTR
000F 54FE              ANL     A,#0FEH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 824
0012         ?C0087:
0012 22                RET     
             ; FUNCTION _LLPLLSetClockSource (END)

             ; FUNCTION _DumpClock (BEGIN)
                                           ; SOURCE LINE # 872
0000 900000      R     MOV     DPTR,#fHost
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 880
0005 120000      R     LCALL   _SspllGetFreqReg
0008 900000      R     MOV     DPTR,#FPLL
                                           ; SOURCE LINE # 881
000B 120000      R     LCALL   L?0159
000E 120000      R     LCALL   _SspllGetPost
0011 900000      R     MOV     DPTR,#i
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
0016 FB                MOV     R3,A
                                           ; SOURCE LINE # 882
0017 900000      R     MOV     DPTR,#FPLL
001A 120000      R     LCALL   L?0137
001D 900000      R     MOV     DPTR,#?_SspllFPLL2FREQ?BYTE+04H
0020 EB                MOV     A,R3
0021 F0                MOVX    @DPTR,A
0022 120000      R     LCALL   _SspllFPLL2FREQ
0025 900000      R     MOV     DPTR,#ppf
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 52  

0028 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 884
002B 900000      R     MOV     DPTR,#ppf
002E 120000      R     LCALL   L?0137
0031 900000      R     MOV     DPTR,#?_PclkGetFreq?BYTE+01H
0034 120000      R     LCALL   L?0159
0037 120000      R     LCALL   _PclkGetFreq
003A 900000      R     MOV     DPTR,#pclk
003D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 885
0040 900000      R     MOV     DPTR,#pclk
0043 120000      R     LCALL   L?0137
0046 900000      R     MOV     DPTR,#?_PclkoGetFreq?BYTE+01H
0049 120000      R     LCALL   L?0160
004C 120000      R     LCALL   _PclkoGetFreq
004F 900000      R     MOV     DPTR,#pclko
                                           ; SOURCE LINE # 887
0052 120000      R     LCALL   L?0160
0055 120000      R     LCALL   _ClkPllGetFreq
0058 900000      R     MOV     DPTR,#clkpll
                                           ; SOURCE LINE # 889
005B 120000      R     LCALL   L?0160
005E 120000      R     LCALL   _McuGetClkFreq
0061 900000      R     MOV     DPTR,#mcu_clk
0064 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 890
0067 900000      R     MOV     DPTR,#mcu_clk
006A 120000      R     LCALL   L?0137
006D 900000      R     MOV     DPTR,#?_SpiClkGetFreq?BYTE+01H
0070 120000      R     LCALL   L?0160
0073 120000      R     LCALL   _SpiClkGetFreq
0076 900000      R     MOV     DPTR,#spi_clk
0079 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 892
007C 7BFF              MOV     R3,#0FFH
007E 7A00        R     MOV     R2,#HIGH ?SC_126
0080 7900        R     MOV     R1,#LOW ?SC_126
0082 900000      R     MOV     DPTR,#FPLL
0085 120000      R     LCALL   L?0137
0088 120000      R     LCALL   L?0167
008B 900000      R     MOV     DPTR,#i
008E E0                MOVX    A,@DPTR
008F 900000      E     MOV     DPTR,#?_dPrintf?BYTE+07H
0092 F0                MOVX    @DPTR,A
0093 900000      R     MOV     DPTR,#ppf
0096 120000      R     LCALL   L?0137
0099 900000      E     MOV     DPTR,#?_dPrintf?BYTE+08H
009C 120000      E     LCALL   ?C?LSTXDATA
009F 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 893
00A2 7BFF              MOV     R3,#0FFH
00A4 7A00        R     MOV     R2,#HIGH ?SC_161
00A6 7900        R     MOV     R1,#LOW ?SC_161
00A8 900000      R     MOV     DPTR,#pclk
00AB 120000      R     LCALL   L?0137
00AE 120000      R     LCALL   L?0167
00B1 900000      R     MOV     DPTR,#pclko
00B4 120000      R     LCALL   L?0137
00B7 900000      E     MOV     DPTR,#?_dPrintf?BYTE+07H
00BA 120000      E     LCALL   ?C?LSTXDATA
00BD 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 894
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 53  

00C0 7BFF              MOV     R3,#0FFH
00C2 7A00        R     MOV     R2,#HIGH ?SC_187
00C4 7900        R     MOV     R1,#LOW ?SC_187
00C6 900000      R     MOV     DPTR,#clkpll
00C9 120000      R     LCALL   L?0137
00CC 120000      R     LCALL   L?0167
00CF 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 895
00D2 7BFF              MOV     R3,#0FFH
00D4 7A00        R     MOV     R2,#HIGH ?SC_205
00D6 7900        R     MOV     R1,#LOW ?SC_205
00D8 900000      R     MOV     DPTR,#mcu_clk
00DB 120000      R     LCALL   L?0137
00DE 120000      R     LCALL   L?0167
00E1 900000      R     MOV     DPTR,#spi_clk
00E4 120000      R     LCALL   L?0137
00E7 900000      E     MOV     DPTR,#?_dPrintf?BYTE+07H
00EA 120000      E     LCALL   ?C?LSTXDATA
00ED 020000      E     LJMP    _dPrintf
             ; FUNCTION _DumpClock (END)

             ; FUNCTION _DCDC_On (BEGIN)
                                           ; SOURCE LINE # 968
;---- Variable 'step' assigned to Register 'R5' ----
0000 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 969
                                           ; SOURCE LINE # 974
0002 ED                MOV     A,R5
0003 14                DEC     A
0004 601D              JZ      ?C0091
0006 14                DEC     A
0007 6022              JZ      ?C0092
0009 2402              ADD     A,#02H
000B 7024              JNZ     ?C0089
                                           ; SOURCE LINE # 975
000D         ?C0090:
                                           ; SOURCE LINE # 981
000D E500        E     MOV     A,regTW88+01H
000F 24E8              ADD     A,#0E8H
                                           ; SOURCE LINE # 982
0011 120000      R     LCALL   L?0143
0014 7402              MOV     A,#02H
                                           ; SOURCE LINE # 983
0016 120000      R     LCALL   L?0144
0019 7403              MOV     A,#03H
                                           ; SOURCE LINE # 984
001B 120000      R     LCALL   L?0144
001E 7401              MOV     A,#01H
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 985
0021 800E              SJMP    ?C0089
                                           ; SOURCE LINE # 986
0023         ?C0091:
                                           ; SOURCE LINE # 987
0023 120000      R     LCALL   L?0145
0026 7411              MOV     A,#011H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 988
0029 8006              SJMP    ?C0089
                                           ; SOURCE LINE # 989
002B         ?C0092:
                                           ; SOURCE LINE # 990
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 54  

002B 120000      R     LCALL   L?0145
002E 7471              MOV     A,#071H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 992
                                           ; SOURCE LINE # 996
0031         ?C0089:
                                           ; SOURCE LINE # 997
;---- Variable 'i' assigned to Register 'R4' ----
0031 E4                CLR     A
0032 FC                MOV     R4,A
0033         ?C0093:
                                           ; SOURCE LINE # 998
0033 E500        E     MOV     A,regTW88+01H
0035 24EA              ADD     A,#0EAH
0037 120000      R     LCALL   L?0146
003A E0                MOVX    A,@DPTR
003B 5430              ANL     A,#030H
003D FF                MOV     R7,A
003E BF3003            CJNE    R7,#030H,?C0096
                                           ; SOURCE LINE # 1000
0041 7F00              MOV     R7,#00H
0043 22                RET     
                                           ; SOURCE LINE # 1001
0044         ?C0096:
                                           ; SOURCE LINE # 1002
0044 7F02              MOV     R7,#02H
0046 7E00              MOV     R6,#00H
0048 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 1003
004B 0C                INC     R4
004C EC                MOV     A,R4
004D B40AE3            CJNE    A,#0AH,?C0093
0050         ?C0094:
                                           ; SOURCE LINE # 1004
0050 7BFF              MOV     R3,#0FFH
0052 7A00        R     MOV     R2,#HIGH ?SC_228
0054 7900        R     MOV     R1,#LOW ?SC_228
0056 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0059 ED                MOV     A,R5
005A F0                MOVX    @DPTR,A
005B 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1005
005E 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1006
0060         ?C0097:
0060 22                RET     
             ; FUNCTION _DCDC_On (END)

             ; FUNCTION _FP_BiasOnOff (BEGIN)
                                           ; SOURCE LINE # 1013
;---- Variable 'fOn' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1031
0000 E500        E     MOV     A,regTW88+01H
0002 2484              ADD     A,#084H
0004 120000      R     LCALL   L?0146
0007 E4                CLR     A
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1035
0009 EF                MOV     A,R7
000A 6007              JZ      ?C0098
                                           ; SOURCE LINE # 1036
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 55  

                                           ; SOURCE LINE # 1037
000C 120000      R     LCALL   L?0170
000F 54FD              ANL     A,#0FDH
                                           ; SOURCE LINE # 1038
0011 8005              SJMP    ?C0131
0013         ?C0098:
                                           ; SOURCE LINE # 1039
                                           ; SOURCE LINE # 1040
                                           ; SOURCE LINE # 1041
0013 120000      R     LCALL   L?0170
0016 4402              ORL     A,#02H
0018         ?C0131:
0018 FB                MOV     R3,A
0019 E4                CLR     A
001A FD                MOV     R5,A
001B 7F40              MOV     R7,#040H
001D 120000      E     LCALL   _WriteSlowI2CByte
                                           ; SOURCE LINE # 1042
                                           ; SOURCE LINE # 1050
0020         ?C0100:
0020 22                RET     
0021         L?0170:
0021 E4                CLR     A
0022 FB                MOV     R3,A
0023 7D01              MOV     R5,#01H
0025 7F40              MOV     R7,#040H
0027 120000      E     LCALL   _WriteSlowI2CByte
002A E4                CLR     A
002B FD                MOV     R5,A
002C 7F40              MOV     R7,#040H
002E 120000      E     LCALL   _ReadSlowI2CByte
0031 EF                MOV     A,R7
0032 22                RET     
             ; FUNCTION _FP_BiasOnOff (END)

             ; FUNCTION _FP_PWC_OnOff (BEGIN)
                                           ; SOURCE LINE # 1057
;---- Variable 'fOn' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1058
                                           ; SOURCE LINE # 1074
0000 E500        E     MOV     A,regTW88+01H
0002 2484              ADD     A,#084H
0004 120000      R     LCALL   L?0146
0007 E4                CLR     A
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1078
0009 EF                MOV     A,R7
000A 6007              JZ      ?C0101
                                           ; SOURCE LINE # 1079
                                           ; SOURCE LINE # 1080
000C 120000      R     LCALL   L?0171
000F 54FE              ANL     A,#0FEH
                                           ; SOURCE LINE # 1081
0011 8005              SJMP    ?C0132
0013         ?C0101:
                                           ; SOURCE LINE # 1082
                                           ; SOURCE LINE # 1083
                                           ; SOURCE LINE # 1084
0013 120000      R     LCALL   L?0171
0016 4401              ORL     A,#01H
0018         ?C0132:
0018 FB                MOV     R3,A
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 56  

0019 E4                CLR     A
001A FD                MOV     R5,A
001B 7F40              MOV     R7,#040H
001D 120000      E     LCALL   _WriteSlowI2CByte
                                           ; SOURCE LINE # 1085
                                           ; SOURCE LINE # 1096
0020         ?C0103:
0020 22                RET     
0021         L?0171:
0021 E4                CLR     A
0022 FB                MOV     R3,A
0023 7D01              MOV     R5,#01H
0025 7F40              MOV     R7,#040H
0027 120000      E     LCALL   _WriteSlowI2CByte
002A E4                CLR     A
002B FD                MOV     R5,A
002C 7F40              MOV     R7,#040H
002E 120000      E     LCALL   _ReadSlowI2CByte
0031 EF                MOV     A,R7
0032 22                RET     
             ; FUNCTION _FP_PWC_OnOff (END)

             ; FUNCTION FP_GpioDefault (BEGIN)
                                           ; SOURCE LINE # 1102
                                           ; SOURCE LINE # 1103
                                           ; SOURCE LINE # 1105
0000 E500        E     MOV     A,regTW88+01H
0002 2484              ADD     A,#084H
0004 120000      R     LCALL   L?0146
0007 E4                CLR     A
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1106
0009 E500        E     MOV     A,regTW88+01H
000B 248C              ADD     A,#08CH
000D 120000      R     LCALL   L?0146
0010 E4                CLR     A
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1107
0012 E500        E     MOV     A,regTW88+01H
0014 2494              ADD     A,#094H
0016 120000      R     LCALL   L?0146
0019 E4                CLR     A
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1110
001B 300011      E     JNB     access,?C0105
                                           ; SOURCE LINE # 1114
001E 7B03              MOV     R3,#03H
0020 FD                MOV     R5,A
0021 7F40              MOV     R7,#040H
0023 120000      E     LCALL   _WriteSlowI2CByte
                                           ; SOURCE LINE # 1115
0026 7B03              MOV     R3,#03H
0028 7D01              MOV     R5,#01H
002A 7F40              MOV     R7,#040H
002C 120000      E     LCALL   _WriteSlowI2CByte
                                           ; SOURCE LINE # 1118
                                           ; SOURCE LINE # 1120
002F         ?C0105:
002F 22                RET     
             ; FUNCTION FP_GpioDefault (END)

             ; FUNCTION InitWithNTSC (BEGIN)
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 57  

                                           ; SOURCE LINE # 1126
                                           ; SOURCE LINE # 1127
                                           ; SOURCE LINE # 1131
                                           ; SOURCE LINE # 1138
0000         ?C0106:
                                           ; SOURCE LINE # 1149
0000 900000      E     MOV     DPTR,#SpiFlashVendor
0003 E0                MOVX    A,@DPTR
0004 B40108            CJNE    A,#01H,?C0107
                                           ; SOURCE LINE # 1150
0007 120000      R     LCALL   L?0149
000A 7402              MOV     A,#02H
000C F0                MOVX    @DPTR,A
000D 8006              SJMP    ?C0108
000F         ?C0107:
                                           ; SOURCE LINE # 1152
000F 120000      R     LCALL   L?0149
0012 7401              MOV     A,#01H
0014 F0                MOVX    @DPTR,A
0015         ?C0108:
                                           ; SOURCE LINE # 1156
0015 E500        E     MOV     A,regTW88+01H
0017 24E0              ADD     A,#0E0H
0019 120000      R     LCALL   L?0150
001C 7401              MOV     A,#01H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1161
001F E500        E     MOV     A,regTW88+01H
0021 24D6              ADD     A,#0D6H
0023 120000      R     LCALL   L?0146
0026 7401              MOV     A,#01H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1171
0029 E500        E     MOV     A,regTW88+01H
002B 24F8              ADD     A,#0F8H
002D 120000      R     LCALL   L?0146
0030 7402              MOV     A,#02H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1172
0033 E500        E     MOV     A,regTW88+01H
0035 24F9              ADD     A,#0F9H
0037 120000      R     LCALL   L?0146
003A E4                CLR     A
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1173
003C E500        E     MOV     A,regTW88+01H
003E 24FA              ADD     A,#0FAH
0040 120000      R     LCALL   L?0146
0043 E4                CLR     A
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1174
0045 E500        E     MOV     A,regTW88+01H
0047 24F6              ADD     A,#0F6H
0049 120000      R     LCALL   L?0146
004C E4                CLR     A
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1175
004E E500        E     MOV     A,regTW88+01H
0050 24FD              ADD     A,#0FDH
0052 120000      R     LCALL   L?0146
0055 7434              MOV     A,#034H
                                           ; SOURCE LINE # 1183
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 58  

0057 120000      R     LCALL   L?0140
005A 7402              MOV     A,#02H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1198
005D 120000      R     LCALL   L?0157
0060 7401              MOV     A,#01H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1199
0063 E500        E     MOV     A,regTW88+01H
0065 2405              ADD     A,#05H
0067 120000      R     LCALL   L?0158
006A 742F              MOV     A,#02FH
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1204
006D E500        E     MOV     A,regTW88+01H
006F 241E              ADD     A,#01EH
0071 120000      R     LCALL   L?0142
0074 7403              MOV     A,#03H
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1208
0077 E500        E     MOV     A,regTW88+01H
0079 24E0              ADD     A,#0E0H
                                           ; SOURCE LINE # 1216
007B 120000      R     LCALL   L?0143
007E 7470              MOV     A,#070H
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1218
0081 E500        E     MOV     A,regTW88+01H
0083 24EA              ADD     A,#0EAH
0085 120000      R     LCALL   L?0146
0088 743F              MOV     A,#03FH
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1262
008B E500        E     MOV     A,regTW88+01H
008D 2407              ADD     A,#07H
008F 120000      R     LCALL   L?0146
0092 E4                CLR     A
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1276
0094 E500        E     MOV     A,regTW88+01H
0096 2408              ADD     A,#08H
0098 120000      R     LCALL   L?0146
009B 74A9              MOV     A,#0A9H
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1294
009E E500        E     MOV     A,regTW88+01H
00A0 2440              ADD     A,#040H
00A2 120000      R     LCALL   L?0146
00A5 7410              MOV     A,#010H
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1307
00A8 E500        E     MOV     A,regTW88+01H
00AA 2441              ADD     A,#041H
00AC 120000      R     LCALL   L?0146
00AF 740C              MOV     A,#0CH
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1335
00B2 E500        E     MOV     A,regTW88+01H
00B4 2442              ADD     A,#042H
00B6 120000      R     LCALL   L?0146
00B9 7402              MOV     A,#02H
00BB F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 59  

                                           ; SOURCE LINE # 1336
00BC E500        E     MOV     A,regTW88+01H
00BE 2443              ADD     A,#043H
00C0 120000      R     LCALL   L?0146
00C3 7410              MOV     A,#010H
00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1337
00C6 E500        E     MOV     A,regTW88+01H
00C8 2444              ADD     A,#044H
00CA 120000      R     LCALL   L?0146
00CD 74F0              MOV     A,#0F0H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1338
00D0 E500        E     MOV     A,regTW88+01H
00D2 2445              ADD     A,#045H
00D4 120000      R     LCALL   L?0146
00D7 7482              MOV     A,#082H
00D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1339
00DA E500        E     MOV     A,regTW88+01H
00DC 2446              ADD     A,#046H
00DE 120000      R     LCALL   L?0146
00E1 74D0              MOV     A,#0D0H
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1358
00E4 E500        E     MOV     A,regTW88+01H
00E6 2447              ADD     A,#047H
00E8 120000      R     LCALL   L?0146
00EB 7480              MOV     A,#080H
00ED F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1360
00EE E500        E     MOV     A,regTW88+01H
00F0 2449              ADD     A,#049H
00F2 120000      R     LCALL   L?0146
00F5 7441              MOV     A,#041H
00F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1370
00F8 E500        E     MOV     A,regTW88+01H
00FA 24B1              ADD     A,#0B1H
00FC 120000      R     LCALL   L?0146
00FF 74C0              MOV     A,#0C0H
0101 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1384
0102 E500        E     MOV     A,regTW88+01H
0104 24ED              ADD     A,#0EDH
0106 120000      R     LCALL   L?0146
0109 7440              MOV     A,#040H
010B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1401
010C E500        E     MOV     A,regTW88+01H
010E 241C              ADD     A,#01CH
0110 120000      R     LCALL   L?0158
0113 740F              MOV     A,#0FH
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1402
0116 E500        E     MOV     A,regTW88+01H
0118 2402              ADD     A,#02H
011A 120000      R     LCALL   L?0158
011D 7440              MOV     A,#040H
011F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1405
0120 E500        E     MOV     A,regTW88+01H
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 60  

0122 2406              ADD     A,#06H
0124 120000      R     LCALL   L?0158
0127 7403              MOV     A,#03H
0129 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1406
012A E500        E     MOV     A,regTW88+01H
012C 2407              ADD     A,#07H
012E 120000      R     LCALL   L?0158
0131 7402              MOV     A,#02H
0133 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1408
0134 E500        E     MOV     A,regTW88+01H
0136 2409              ADD     A,#09H
0138 120000      R     LCALL   L?0158
013B 74F0              MOV     A,#0F0H
013D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1409
013E E500        E     MOV     A,regTW88+01H
0140 240A              ADD     A,#0AH
0142 120000      R     LCALL   L?0158
0145 740B              MOV     A,#0BH
0147 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1413
0148 E500        E     MOV     A,regTW88+01H
014A 2411              ADD     A,#011H
014C 120000      R     LCALL   L?0158
014F 745C              MOV     A,#05CH
0151 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1418
0152 E500        E     MOV     A,regTW88+01H
0154 2417              ADD     A,#017H
0156 120000      R     LCALL   L?0158
0159 7480              MOV     A,#080H
015B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1421
015C E500        E     MOV     A,regTW88+01H
015E 241E              ADD     A,#01EH
0160 120000      R     LCALL   L?0158
0163 E4                CLR     A
0164 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1423
0165 E500        E     MOV     A,regTW88+01H
0167 2421              ADD     A,#021H
0169 120000      R     LCALL   L?0158
016C 7422              MOV     A,#022H
016E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1429
016F E500        E     MOV     A,regTW88+01H
0171 2427              ADD     A,#027H
0173 120000      R     LCALL   L?0158
0176 7438              MOV     A,#038H
0178 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1430
0179 E500        E     MOV     A,regTW88+01H
017B 2428              ADD     A,#028H
017D 120000      R     LCALL   L?0158
0180 E4                CLR     A
0181 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1433
0182 E500        E     MOV     A,regTW88+01H
0184 242B              ADD     A,#02BH
0186 120000      R     LCALL   L?0158
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 61  

0189 7444              MOV     A,#044H
018B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1438
018C E500        E     MOV     A,regTW88+01H
018E 2430              ADD     A,#030H
0190 120000      R     LCALL   L?0158
0193 E4                CLR     A
0194 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1440
0195 E500        E     MOV     A,regTW88+01H
0197 2434              ADD     A,#034H
0199 120000      R     LCALL   L?0158
019C 741A              MOV     A,#01AH
019E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1441
019F E500        E     MOV     A,regTW88+01H
01A1 2435              ADD     A,#035H
01A3 120000      R     LCALL   L?0158
01A6 E4                CLR     A
01A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1448
01A8 E500        E     MOV     A,regTW88+01H
01AA 24C6              ADD     A,#0C6H
01AC 120000      R     LCALL   L?0158
01AF 7420              MOV     A,#020H
01B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1453
01B2 E500        E     MOV     A,regTW88+01H
01B4 24CB              ADD     A,#0CBH
01B6 120000      R     LCALL   L?0158
01B9 743A              MOV     A,#03AH
01BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1482
01BC E500        E     MOV     A,regTW88+01H
01BE 2403              ADD     A,#03H
01C0 120000      R     LCALL   L?0142
01C3 74CC              MOV     A,#0CCH
01C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1483
01C6 E500        E     MOV     A,regTW88+01H
01C8 2404              ADD     A,#04H
01CA 120000      R     LCALL   L?0142
01CD 741C              MOV     A,#01CH
01CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1484
01D0 E500        E     MOV     A,regTW88+01H
01D2 2405              ADD     A,#05H
01D4 120000      R     LCALL   L?0142
01D7 748A              MOV     A,#08AH
01D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1485
01DA E500        E     MOV     A,regTW88+01H
01DC 2406              ADD     A,#06H
01DE 120000      R     LCALL   L?0142
01E1 740F              MOV     A,#0FH
01E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1486
01E4 E500        E     MOV     A,regTW88+01H
01E6 2407              ADD     A,#07H
01E8 120000      R     LCALL   L?0142
01EB 7440              MOV     A,#040H
01ED F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 62  

                                           ; SOURCE LINE # 1487
01EE E500        E     MOV     A,regTW88+01H
01F0 2408              ADD     A,#08H
01F2 120000      R     LCALL   L?0142
01F5 7420              MOV     A,#020H
01F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1488
01F8 E500        E     MOV     A,regTW88+01H
01FA 2409              ADD     A,#09H
01FC 120000      R     LCALL   L?0142
01FF E4                CLR     A
0200 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1489
0201 E500        E     MOV     A,regTW88+01H
0203 240A              ADD     A,#0AH
0205 120000      R     LCALL   L?0142
0208 7404              MOV     A,#04H
020A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1490
020B E500        E     MOV     A,regTW88+01H
020D 240B              ADD     A,#0BH
020F 120000      R     LCALL   L?0142
0212 7408              MOV     A,#08H
                                           ; SOURCE LINE # 1492
0214 120000      R     LCALL   L?0140
0217 E0                MOVX    A,@DPTR
0218 5403              ANL     A,#03H
021A 4490              ORL     A,#090H
021C FF                MOV     R7,A
021D 120000      R     LCALL   L?0141
0220 EF                MOV     A,R7
0221 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1493
0222 E500        E     MOV     A,regTW88+01H
0224 240E              ADD     A,#0EH
0226 120000      R     LCALL   L?0142
0229 7420              MOV     A,#020H
022B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1494
022C E500        E     MOV     A,regTW88+01H
022E 240F              ADD     A,#0FH
0230 120000      R     LCALL   L?0142
0233 E4                CLR     A
0234 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1495
0235 E500        E     MOV     A,regTW88+01H
0237 2410              ADD     A,#010H
0239 120000      R     LCALL   L?0142
023C 7421              MOV     A,#021H
023E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1503
023F E500        E     MOV     A,regTW88+01H
0241 2411              ADD     A,#011H
0243 120000      R     LCALL   L?0142
0246 7421              MOV     A,#021H
0248 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1504
0249 E500        E     MOV     A,regTW88+01H
024B 2412              ADD     A,#012H
024D 120000      R     LCALL   L?0142
0250 7403              MOV     A,#03H
0252 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 63  

                                           ; SOURCE LINE # 1506
0253 E500        E     MOV     A,regTW88+01H
0255 2413              ADD     A,#013H
0257 120000      R     LCALL   L?0142
025A E4                CLR     A
025B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1507
025C E500        E     MOV     A,regTW88+01H
025E 2414              ADD     A,#014H
0260 120000      R     LCALL   L?0142
0263 7420              MOV     A,#020H
0265 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1508
0266 E500        E     MOV     A,regTW88+01H
0268 2415              ADD     A,#015H
026A 120000      R     LCALL   L?0142
026D 742E              MOV     A,#02EH
026F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1515
0270 E500        E     MOV     A,regTW88+01H
0272 2416              ADD     A,#016H
0274 120000      R     LCALL   L?0142
0277 74E0              MOV     A,#0E0H
0279 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1516
027A E500        E     MOV     A,regTW88+01H
027C 2417              ADD     A,#017H
027E 120000      R     LCALL   L?0142
0281 7401              MOV     A,#01H
0283 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1523
0284 E500        E     MOV     A,regTW88+01H
0286 241C              ADD     A,#01CH
0288 120000      R     LCALL   L?0142
028B 7442              MOV     A,#042H
028D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1525
028E E500        E     MOV     A,regTW88+01H
0290 241E              ADD     A,#01EH
0292 120000      R     LCALL   L?0142
0295 7403              MOV     A,#03H
0297 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1526
0298 E500        E     MOV     A,regTW88+01H
029A 2480              ADD     A,#080H
029C 120000      R     LCALL   L?0142
029F 7420              MOV     A,#020H
02A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1537
02A2 E500        E     MOV     A,regTW88+01H
02A4 248B              ADD     A,#08BH
02A6 120000      R     LCALL   L?0142
02A9 7444              MOV     A,#044H
02AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1546
02AC E500        E     MOV     A,regTW88+01H
02AE 24E4              ADD     A,#0E4H
02B0 120000      R     LCALL   L?0142
02B3 7421              MOV     A,#021H
02B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1554
02B6 E500        E     MOV     A,regTW88+01H
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 64  

02B8 2440              ADD     A,#040H
02BA 120000      R     LCALL   L?0142
02BD 7410              MOV     A,#010H
02BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1555
02C0 E500        E     MOV     A,regTW88+01H
02C2 2441              ADD     A,#041H
02C4 120000      R     LCALL   L?0142
02C7 E4                CLR     A
02C8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1556
02C9 E500        E     MOV     A,regTW88+01H
02CB 2442              ADD     A,#042H
02CD 120000      R     LCALL   L?0142
02D0 7405              MOV     A,#05H
02D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1557
02D3 E500        E     MOV     A,regTW88+01H
02D5 2443              ADD     A,#043H
02D7 120000      R     LCALL   L?0142
02DA 7401              MOV     A,#01H
02DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1558
02DD E500        E     MOV     A,regTW88+01H
02DF 2444              ADD     A,#044H
02E1 120000      R     LCALL   L?0142
02E4 7464              MOV     A,#064H
02E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1559
02E7 E500        E     MOV     A,regTW88+01H
02E9 2445              ADD     A,#045H
02EB 120000      R     LCALL   L?0142
02EE 74F4              MOV     A,#0F4H
02F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1560
02F1 E500        E     MOV     A,regTW88+01H
02F3 2446              ADD     A,#046H
02F5 120000      R     LCALL   L?0142
02F8 E4                CLR     A
02F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1561
02FA E500        E     MOV     A,regTW88+01H
02FC 2447              ADD     A,#047H
02FE 120000      R     LCALL   L?0142
0301 740A              MOV     A,#0AH
0303 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1562
0304 E500        E     MOV     A,regTW88+01H
0306 2448              ADD     A,#048H
0308 120000      R     LCALL   L?0142
030B 7436              MOV     A,#036H
030D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1563
030E E500        E     MOV     A,regTW88+01H
0310 2449              ADD     A,#049H
0312 120000      R     LCALL   L?0142
0315 7410              MOV     A,#010H
0317 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1564
0318 E500        E     MOV     A,regTW88+01H
031A 244A              ADD     A,#04AH
031C 120000      R     LCALL   L?0142
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 65  

031F E4                CLR     A
0320 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1565
0321 E500        E     MOV     A,regTW88+01H
0323 244B              ADD     A,#04BH
0325 120000      R     LCALL   L?0142
0328 E4                CLR     A
0329 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1566
032A E500        E     MOV     A,regTW88+01H
032C 244C              ADD     A,#04CH
032E 120000      R     LCALL   L?0142
0331 E4                CLR     A
0332 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1567
0333 E500        E     MOV     A,regTW88+01H
0335 244D              ADD     A,#04DH
0337 120000      R     LCALL   L?0142
033A 7444              MOV     A,#044H
033C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1568
033D E500        E     MOV     A,regTW88+01H
033F 244E              ADD     A,#04EH
0341 120000      R     LCALL   L?0142
0344 7404              MOV     A,#04H
0346 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1571
0347 E500        E     MOV     A,regTW88+01H
0349 2406              ADD     A,#06H
034B 120000      R     LCALL   L?0146
034E 7406              MOV     A,#06H
0350 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1577
0351 E500        E     MOV     A,regTW88+01H
0353 2407              ADD     A,#07H
0355 120000      R     LCALL   L?0146
0358 E4                CLR     A
0359 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1586
035A 22                RET     
             ; FUNCTION InitWithNTSC (END)

             ; FUNCTION DCDC_StartUP_sub (BEGIN)
                                           ; SOURCE LINE # 1605
                                           ; SOURCE LINE # 1606
                                           ; SOURCE LINE # 1620
0000 7F01              MOV     R7,#01H
0002 120000      R     LCALL   _FP_PWC_OnOff
                                           ; SOURCE LINE # 1622
0005 E4                CLR     A
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 1623
0007 120000      R     LCALL   L?0172
                                           ; SOURCE LINE # 1631
000A 120000      R     LCALL   L?0172
000D 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 1634
0010 7D01              MOV     R5,#01H
0012 7F01              MOV     R7,#01H
0014 120000      E     LCALL   _OutputEnablePin
                                           ; SOURCE LINE # 1642
0017 0F                INC     R7
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 66  

0018 120000      R     LCALL   _DCDC_On
001B 900000      R     MOV     DPTR,#ret
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1646
0020 7F01              MOV     R7,#01H
0022 120000      R     LCALL   _FP_BiasOnOff
                                           ; SOURCE LINE # 1652
0025 7BFF              MOV     R3,#0FFH
0027 7A00        R     MOV     R2,#HIGH ?SC_247
0029 7900        R     MOV     R1,#LOW ?SC_247
002B 120000      E     LCALL   _PrintSystemClockMsg
                                           ; SOURCE LINE # 1653
002E 900000      R     MOV     DPTR,#ret
0031 E0                MOVX    A,@DPTR
0032 6009              JZ      ?C0110
                                           ; SOURCE LINE # 1654
0034 7BFF              MOV     R3,#0FFH
0036 7A00        R     MOV     R2,#HIGH ?SC_264
0038 7900        R     MOV     R1,#LOW ?SC_264
003A 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1663
003D         ?C0110:
                                           ; SOURCE LINE # 1664
003D 900000      R     MOV     DPTR,#ret
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
                                           ; SOURCE LINE # 1665
0042         ?C0111:
0042 22                RET     
0043         L?0172:
0043 120000      R     LCALL   _DCDC_On
0046 900000      R     MOV     DPTR,#ret
0049 EF                MOV     A,R7
004A F0                MOVX    @DPTR,A
004B 7F01              MOV     R7,#01H
004D 22                RET     
             ; FUNCTION DCDC_StartUP_sub (END)

             ; FUNCTION DCDC_StartUP (BEGIN)
                                           ; SOURCE LINE # 1673
                                           ; SOURCE LINE # 1674
                                           ; SOURCE LINE # 1676
0000 120000      R     LCALL   DCDC_StartUP_sub
;---- Variable 'ret' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1677
0003 EF                MOV     A,R7
0004 7002              JNZ     ?C0112
                                           ; SOURCE LINE # 1678
0006 FF                MOV     R7,A
0007 22                RET     
0008         ?C0112:
                                           ; SOURCE LINE # 1680
0008 120000      R     LCALL   DCDC_StartUP_sub
                                           ; SOURCE LINE # 1681
000B EF                MOV     A,R7
000C 7002              JNZ     ?C0114
                                           ; SOURCE LINE # 1682
000E FF                MOV     R7,A
000F 22                RET     
0010         ?C0114:
                                           ; SOURCE LINE # 1684
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 67  

0010 120000      R     LCALL   DCDC_StartUP_sub
                                           ; SOURCE LINE # 1685
                                           ; SOURCE LINE # 1686
0013         ?C0113:
0013 22                RET     
             ; FUNCTION DCDC_StartUP (END)

C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 68  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_DumpClock . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fHost. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  ppf. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0001H  4
  FPLL . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0005H  4
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0009H  1
  pclk . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   000AH  4
  pclko. . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   000EH  4
  clkpll . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0012H  4
  mcu_clk. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0016H  4
  spi_clk. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   001AH  4
_OutputEnablePin . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SPI_SetReadModeByRegister . . . . . .  EXTERN   CODE   PROC     -----  -----
_WriteSlowI2CByte. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
st_animation . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  53
  active . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  current. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  speed. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  vcnt . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  srcx . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000DH  20
  srcy . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0021H  20
_SspllSetFreqAndPll. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  _PPF . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
  ppf. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  CURR . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  VCO. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  POST . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  FPLL . . . . . . . . . . . . . . . .  * REG *  DATA   U_LONG   0004H  4
SpiFlashVendor . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_PclkSetPolarity . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  pol. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
_LLPLLSetClockSource . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  use_27M. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_SspllGetPPF . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fHost. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  ppf. . . . . . . . . . . . . . . . .  * REG *  DATA   U_LONG   0004H  4
  FPLL . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0001H  4
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
_FP_PWC_OnOff. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fOn. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
ClockLow . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SspllFPLL2FREQ. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  FPLL . . . . . . . . . . . . . . . .  AUTO     DATA   U_LONG   0004H  4
  POST . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  FREQ . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0005H  4
_SspllFREQ2FPLL. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  FREQ . . . . . . . . . . . . . . . .  AUTO     DATA   U_LONG   0004H  4
  POST . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  FPLL . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0005H  4
_delay1ms. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DCDC_StartUP . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 69  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
shadow_r4e0. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
_PclkSetDividerReg . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  divider. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
shadow_r4e1. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0001H  1
_DCDC_On . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  step . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_PclkoGetFreq. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fHost. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  pclk . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0001H  4
  divider. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  temp32 . . . . . . . . . . . . . . .  * REG *  DATA   U_LONG   0004H  4
_PrintSystemClockMsg . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_PCMODEDATA. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  han. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  van. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  vfreq. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  htotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  vtotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  hsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  vsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  offseth. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0010H  2
  offsetv. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0012H  2
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  dummy2 . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  dummy3 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0018H  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_ClkPllSetSelDiv . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ClkPllSel. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  ClkPllDiv. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  mcu_sel. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  clkpll . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0003H  4
  spi_clk. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0007H  4
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000BH  1
_PclkGetFreq . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fHost. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  sspll. . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0001H  4
  divider. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  temp32 . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0006H  4
_McuSpiClkToPclk . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  divider. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_SSPLL_PowerUp . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fOn. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
DataInitTCON . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    01D2H  34
DataInitNTSC . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    010EH  196
_PclkoSetDiv . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  div. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
_RLE_HEADER. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  id . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 70  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  cp . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bmp. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
FP_GpioDefault . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SPIIMAGE . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  top. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  bottom . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
DCDC_StartUP_sub . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_FP_BiasOnOff. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fOn. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_McuSpiClkSelect . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  McuSpiClkSel . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
Clock27. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SLIDEIMAGE . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
_WaitVBlank. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
McuSpiClkRestore . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_dPrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SspllGetPost. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fHost. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  post . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
_ePrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
regTW88. . . . . . . . . . . . . . . .  EXTERN   DATA   PTR      -----  2
_ClkPllSetDividerReg . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  divider. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_SspllGetFreqReg . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fHost. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  dFPLL. . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
DebugLevel . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
FONT_SPI_INFO_s. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
FONT_SPI_INFO_t. . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
C51 COMPILER V9.00   SETTINGS                                                              06/05/2014 15:34:52 PAGE 71  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
InitWithNTSC . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SspllSetFreqReg . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  FPLL . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
ClockHigh. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
McuSpiClkReadSelectReg . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_McuGetClkFreq . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fHost. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  temp8. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  temp32 . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0001H  4
access . . . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ClkPllGetFreq . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fHost. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  temp8. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  clkpll . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0002H  4
  temp32 . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0006H  4
_ClkPllSetSelectReg. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ClkPllSel. . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_SpiClkGetFreq . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fHost. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  mcu_clk. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0001H  4
  divider. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  temp32 . . . . . . . . . . . . . . .  * REG *  DATA   U_LONG   0004H  4
_SspllSetAnalogControl . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_ReadSlowI2CByte . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3160    ----
   CONSTANT SIZE    =    500    ----
   XDATA SIZE       =      2     119
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
