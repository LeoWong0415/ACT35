C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MONITOR_SPI
OBJECT MODULE PLACED IN .\Output\monitor_SPI.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE monitor_SPI.c LARGE OPTIMIZE(9,SPEED) REGFILE(.\Output\TW8835_REV31.ORC) BR
                    -OWSE MODDP2 DEFINE(EVB_30,EVB_31,nullFn=//) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\List\monitor_SPI.lst) OBJECT(.\Outpu
                    -t\monitor_SPI.obj)

line level    source

   1          /**
   2           * @file
   3           * Monitor_SPI.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *      Copyright (C) 2011~2012 Intersil Corporation
   8           * @section DESCRIPTION
   9           *      Interface between TW_Terminal2 and Firmware.
  10          */
  11          //*****************************************************************************
  12          //
  13          //                                                              Monitor_SPI.c
  14          //
  15          //*****************************************************************************
  16          //
  17          //
  18          #include "Config.h"
  19          #include "reg.h"
  20          #include "typedefs.h"
  21          #include "TW8835.h"
  22          
  23          #include "Global.h"
  24          #include "CPU.h"
  25          #include "printf.h"
  26          #include "util.h"
  27          #include "monitor_SPI.h"
  28          
  29          #include "i2c.h"
  30          #include "SPI.h"
  31          
  32          #include "eeprom.h"
  33          #include "host.h"
  34          
  35          static void SPI_Status(void);
  36          static void SPI_dump(DWORD spiaddr); 
  37          
  38          //=============================================================================
  39          //
  40          //=============================================================================
  41          void MonitorSPI(void)
  42          {
  43   1      #ifdef USE_SFLASH_EEPROM
  44   1              BYTE j;
  45   1      #endif
  46   1      
  47   1              //---------------------- Dump SPI --------------------------
  48   1              if( !stricmp( argv[1], "D" ) ) {
  49   2                      static DWORD spiaddr = 0;
  50   2      
  51   2                      if( argc>=3 ) spiaddr = a2h( argv[2] );
  52   2      
  53   2                      SPI_dump(spiaddr); 
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 2   

  54   2      
  55   2                      spiaddr += 0x80L;
  56   2              }
  57   1              //--------------------------------------------------------
  58   1              else if( !stricmp( argv[1], "status" ) ) {
  59   2                      SPI_Status();
  60   2              }
  61   1      //      else if( !stricmp( argv[1], "quad" ) ) {
  62   1      //              SPI_quadio();
  63   1      //      }
  64   1              //--------------------------------------------------------
  65   1      #ifdef USE_SFLASH_EEPROM
  66   1              else if( !stricmp( argv[1], "t" ) ) {
  67   2              
  68   2                      SPI_SectorErase( EE_SPI_SECTOR0 );
  69   2                      
  70   2                      for(j=0; j<128; j++) {
  71   3                              SPI_Buffer[j] = j;
  72   3                      }
  73   2                      SPI_PageProgram( EE_SPI_SECTOR0, (WORD)SPI_Buffer, 128 );
  74   2              }
  75   1      #endif
  76   1              //--------------------------------------------------------
  77   1              else if( !stricmp( argv[1], "Sector" ) ) {
  78   2                      static DWORD spiaddr = 0x10000L;
  79   2      
  80   2                      if( argc>=3 ) spiaddr = a2h( argv[2] );
  81   2      
  82   2                      Printf("\nSector Erase = %06lx", spiaddr);
  83   2      
  84   2                      SPI_SectorErase(spiaddr);
  85   2                      spiaddr += 0x1000L;
  86   2              }
  87   1              //--------------------------------------------------------
  88   1              else if( !stricmp( argv[1], "Block" ) ) {
  89   2                      static DWORD spiaddr = 0x10000L;
  90   2      
  91   2                      if( argc>=3 ) spiaddr = a2h( argv[2] );
  92   2      
  93   2                      Printf("\nBlock Erase = %06lx", spiaddr);
  94   2      
  95   2                      SPI_BlockErase(spiaddr);
  96   2                      spiaddr += 0x1000L;
  97   2              }
  98   1              //--------------------------------------------------------
  99   1              else if( !stricmp( argv[1], "Copy" ) ) {
 100   2                      DWORD source = 0x0L, dest = 0x10000L;
 101   2                      DWORD cnt=0x100L;
 102   2      
 103   2                      if( argc<4 ) {
 104   3                              Printf("\nMissing Parameters !!!" );
 105   3                              return;
 106   3                      }
 107   2                      source = a2h( argv[2] );
 108   2                      dest   = a2h( argv[3] );
 109   2                      cnt    = a2h( argv[4] );
 110   2      
 111   2                      Printf("\nSPI copy from %06lx to %06lx", source, dest);
 112   2                      Printf("  %03x bytes", (WORD)cnt);
 113   2                      SpiFlashDmaRead2XMem(SPI_Buffer,source,cnt);
 114   2      
 115   2                      SPI_PageProgram( dest, (WORD)SPI_Buffer, cnt );
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 3   

 116   2              }
 117   1              //--------------------------------------------------------
 118   1              else if( !stricmp( argv[1], "rmode" ) ) {
 119   2                      BYTE mod;
 120   2      
 121   2                      if(argc < 3)
 122   2                              mod = 0x05;             //QuadIO
 123   2                      else
 124   2                              mod = a2h( argv[2] );
 125   2      
 126   2                      SPI_SetReadModeByRegister(mod);
 127   2                      Printf("\nSPI Read Mode = %bd 0x%bx", mod, ReadTW88(REG4C0) & 0x07);
 128   2              }
 129   1              //---------------------- Write SPI --------------------------
 130   1      #ifdef MODEL_TW8835_EXTI2C
                      else if( !stricmp( argv[1], "W" ) ) {
                              DWORD spiaddr;
                              //BYTE *ptr = SPI_Buffer;
                              //DWORD size;
                              BYTE i;
                              BYTE cnt;
                              BYTE dat;
                              volatile BYTE vdata;
                              //WORD xaddr;
                              BYTE page;
              
                              if( argc<4 ) {
                                      Printf("\nMissing Parameters !!!" );
                                      return;
                              }
                              if( argc > 11 ) {
                                      Printf("\nonly support 8 bytes !!!" );
                                      argc = 11;
                              }
                              spiaddr = a2h( argv[2] );
                              Printf("\nWrite SPI %06lx ", spiaddr);
               
                              //??need single mode.
                              //SPI_SetReadModeByRegister(1); //FAST or single
              
                              ReadTW88Page(page);
                              //SPI_WriteEnable();
                              WriteTW88Page(PAGE4_SPI );                                      // Set Page=4
              
              /*
                              WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);
                              WriteTW88(REG4C6, 0x04 );                                       // data Buffer address 0x04D0
                              WriteTW88(REG4C7, 0xD0 );                                       // data Buffer address
              
                              WriteTW88(REG4C8, 0x00 );                                       // data Buff count Mi
                              WriteTW88(REG4C9, 0x00 );                                       // data Buff count Lo
                              //REG4CA: CMD
                              WriteTW88(REG4CB, spiaddr>>16 );                        // SPI address
                              WriteTW88(REG4CC, spiaddr>>8 );                         // SPI address
                              WriteTW88(REG4CD, spiaddr );                            // SPI address
                              //REG4CE: CMD BUFF 5
                              WriteTW88(REG4DA, 0x00 );                                       // data Buff count Hi
              */
              
              
                              WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);  // cmd len 1
                              WriteTW88(REG4CA, SPICMD_WREN );                                // SPI Command = WRITE_ENABLE
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 4   

                              WriteTW88(REG4C9, 0x00 );                                               // data Buff count Lo
                              WriteTW88(REG4C4, 0x03 );                                               // DMA-Write start
              
                              //??status
                              WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);  // cmd len 1
                              WriteTW88(REG4CA, SPICMD_RDSR);                                 // SPI Command
                              WriteTW88(REG4C6, 0x04 );                                               // data Buffer address 0x04D0
                              WriteTW88(REG4C7, 0xD0 );                                               // data Buffer address
                              WriteTW88(REG4C9, 0x01 );                                               // data Buff count Lo
                              WriteTW88(REG4C4, 0x01 );                                               // DMA-Read
                              for(i=0; i < 100; i++) {
                                      vdata = ReadTW88(REG4D0);
                                      if(vdata & 0x02) //check WEL
                                              break;
                                      delay1ms(10);
                              }
                              Printf("[%bx, %02bx]",i,vdata);
              
              
                              for(i=3,cnt=0; i <argc; i++,cnt++) {
                                      dat = a2h(argv[i]);
                                      Printf(" %02bx",dat);
                                      WriteTW88(REG4D0+cnt, dat); 
                              }
              
              
                              WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 4); // cmd len 1
                              WriteTW88(REG4CA, SPICMD_PP );                                  // SPI Command = PAGE_PROGRAM
                              WriteTW88(REG4CB, spiaddr>>16 );                                // SPI address
                              WriteTW88(REG4CC, spiaddr>>8 );                                 // SPI address
                              WriteTW88(REG4CD, spiaddr );                                    // SPI address
                              WriteTW88(REG4C6, 0x04 );                                               // data Buffer address 0x04D0
                              WriteTW88(REG4C7, 0xD0 );                                               // data Buffer address
                              WriteTW88(REG4C8, 0 );                                                  // Write count Middle
                              WriteTW88(REG4C9, cnt );                                                // Write count Low
                              WriteTW88(REG4C4, 0x07 );                                               // DMA-Write start, Busy check
              
                              //move back to QuadIO
                              //delay1ms(10);
                              //SPI_SetReadModeByRegister(5); //QuadIO
              
                              WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 1); // cmd len 1
                              WriteTW88(REG4CA,SPICMD_RDSR);                                  // CMD
                              WriteTW88(REG4C6, 0x04 );                                               // data Buffer address 0x04D0
                              WriteTW88(REG4C7, 0xD0 );                                               // data Buffer address
                              WriteTW88(REG4C9, 0x01 );                                               // len of data buffer
                              WriteTW88(REG4C4, 0x01 );                                               // start READ
                              for(i=0; i < 100; i++) {
                                      vdata = ReadTW88(REG4D0);
                                      if((vdata & 0x01) == 0) //check done
                                              break;
                                      delay1ms(10);
                              }
                              Printf("[%bx, %02bx]",i,vdata);
              
              
                              WriteTW88Page(page);
                      }
              #else
 237   1              else if( !stricmp( argv[1], "W" ) ) {
 238   2                      static DWORD spiaddr = 0;
 239   2                      BYTE *ptr = SPI_Buffer;
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 5   

 240   2                      DWORD size;
 241   2                      BYTE i;
 242   2      
 243   2                      if( argc<3 ) {
 244   3                              Printf("\nMissing Parameters !!!" );
 245   3                              return;
 246   3                      }
 247   2                      if( argc > 7 ) {
 248   3                              Printf("\nonly support 4 bytes !!!" );
 249   3                      }
 250   2                      
 251   2      
 252   2                      spiaddr = a2h( argv[2] );
 253   2                      //only support eeprom area....please
 254   2                      //if((spiaddr < EE_SPI_SECTOR0) || (spiaddr > EE_SPI_SECTOR0+0x010000)) {
 255   2                      //      Printf("\nout of range %06lx~%06lx!!!", EE_SPI_SECTOR0, EE_SPI_SECTOR0+0x010000 );
 256   2                      //      return;
 257   2                      //}
 258   2                      Printf("\nWrite SPI %06lx ", spiaddr);
 259   2      
 260   2      
 261   2                      size=0;
 262   2                      for(i=3; i < argc; i++) {
 263   3                              *ptr++ = (BYTE)a2h(argv[i]);
 264   3                              Printf(" %02bx ",(BYTE)a2h(argv[i]));
 265   3                              size++;
 266   3                      }       
 267   2                      SPI_PageProgram( spiaddr, (WORD)SPI_Buffer, (WORD)size);
 268   2              }
 269   1      #endif
 270   1              //--------------------------------------------------------
 271   1              else if( !stricmp( argv[1], "?" ) ) {
 272   2                      Printf("\n\n  === Help for SPI command ===");
 273   2                      Printf("\nSPI D [addr]      ; dump");
 274   2                      Printf("\nSPI sector [addr] ; sector erase");
 275   2                      Printf("\nSPI block [addr]  ; block erase");
 276   2                      Printf("\nSPI rmode [mode]      ; set the read mode");
 277   2                      //Printf("\nSPI W addr data   ; write 1 byte. Use PageProgram");
 278   2                      Printf("\nSPI W addr data ...  ; write max 8 byte. Use PageProgram");
 279   2                      Printf("\nSPI copy [src] [dst] [cnt] ; copy");
 280   2                      Printf("\nSPI status            ; status");
 281   2                      Printf("\n");
 282   2              }
 283   1              //--------------------------------------------------------
 284   1              else
 285   1                      Printf("\nInvalid command..."); 
 286   1      }
 287          //=============================================================================
 288          //
 289          //=============================================================================
 290          void HelpMonitorSPIC(void)
 291          {
 292   1      #if 0
                      Printf("\n\n  === Help for SPIFlash command ===");
                      Printf("\nSPIC r_cnt [cmd...]   ;r_cnt:max 8, cmd:max 4");
                      Printf("\nSPIC 3 9f                     ; RDID - read JEDEC ID");
                      Printf("\nSPIC 1 5                      ; RDSR - read status register");
                      Printf("\nSPIC 0 6                      ; WREN - Write Enable");
                      Printf("\nSPIC 0 4                      ; WRDI - write disable");
                      Printf("\nSPIC 8 3 0 0 0        ; read 8 data at 0x000000");
              #else
 301   1              Printf("\nSPIC 9f               ; SPICMD_RDID: read JEDEC id");
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 6   

 302   1              Printf("\nSPIC  6               ; SPICMD_WREN: write enable");
 303   1              Printf("\nSPIC  4               ; SPICMD_WRDI: write disable");
 304   1              Printf("\nSPIC  5               ; SPICMD_RDSR: read status register");
 305   1              Printf("\nSPIC  35              ; SPICMD_RDSR2: read status register");
 306   1              Printf("\nSPIC  1 state1 state2 ; SPICMD_WRSR: write status register");
 307   1              Printf("\nSPIC  2 addr data..   ; SPICMD_PP:PageProgram. Max 8 data");
 308   1              Printf("\nSPIC 20 addr          ; SPICMD_SE: sector erase");
 309   1              Printf("\nSPIC d8 addr          ; SPICMD_BE: block erase");
 310   1              Printf("\nSPIC  3 addr [n]      ; SPICMD_READ: read data. default 8 data. Need REG4C0[2:0]=0");
 311   1              Printf("\nSPIC  b addr [n]      ; SPICMD_FASTREAD: fast read data. default 8 data. Need REG4C0[2:0]=1");
 312   1              Printf("\nSPIC eb addr [n]      ; SPICMD_4READ: QuadIO read data. default 8 data. NG. Only 1Byte");
 313   1              Printf("\nSPIC  65              ; SPICMD_RDVEREG: read volatile status register");
 314   1              Printf("\nSPIC  61 data         ; SPICMD_WDVEREG: write volatile enhanced status register");
 315   1              Printf("\nSPIC  85              ; SPICMD_RDVREG: read volatile enhanced status register");
 316   1              Printf("\nSPIC  81 data         ; SPICMD_WDVREG: write volatile status register");
 317   1              Printf("\nSPIC  B5              ; SPICMD_RDNVREG: read non-volatile status register");
 318   1              Printf("\nSPIC  B1 data1 data0  ; SPICMD_WDNVREG: write non-volatile status register");
 319   1      #endif
 320   1              Printf("\n");
 321   1      }
 322          void MonitorSPIC(void)
 323          {
 324   1              DECLARE_LOCAL_page
 325   1              BYTE cmd;
 326   1              BYTE dat0,dat1,dat2;
 327   1              BYTE i;
 328   1              BYTE cnt;
 329   1              DWORD spiaddr;
 330   1              volatile BYTE vdata;
 331   1      
 332   1              if(argc < 2) {
 333   2                      HelpMonitorSPIC();
 334   2                      return;
 335   2              }
 336   1              ReadTW88Page(page);
 337   1              WriteTW88Page(4);
 338   1      
 339   1              cmd = a2h( argv[1] );
 340   1              if(cmd == SPICMD_RDID) {
 341   2                      Printf("\nRDID(JEDEC) ");
 342   2                      WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);
 343   2                      WriteTW88(REG4CA, SPICMD_RDID );
 344   2                      WriteTW88(REG4C6, 0x04 );                                               // data Buffer address 0x04D0
 345   2                      WriteTW88(REG4C7, 0xD0 );                                               // data Buffer address
 346   2                      WriteTW88(REG4DA, 0x00 );                                               // data Buff count high
 347   2                      WriteTW88(REG4C8, 0x00 );                                               // data Buff count middle
 348   2                      WriteTW88(REG4C9, 0x03 );                                               // data Buff count Lo
 349   2                      WaitVBlank(1);
 350   2                      WriteTW88(REG4C4, 0x01 );                                               // DMA-Read
 351   2                      //wait
 352   2                      for(i=0; i < 200; i++) {
 353   3                              vdata = ReadTW88(REG4C4);
 354   3                              if((vdata & 0x01)==0)
 355   3                                      break;
 356   3                              delay1ms(10);
 357   3                      }
 358   2                      Printf(" wait:%bd,%bx data:",i,vdata);
 359   2      
 360   2                      dat0 = ReadTW88(REG4D0);
 361   2                      dat1 = ReadTW88(REG4D1);
 362   2                      dat2 = ReadTW88(REG4D2);
 363   2                      Printf("%02bx %02bx %02bx", dat0, dat1,dat2);
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 7   

 364   2                      switch(dat0) {
 365   3                      case 0x1C:              Puts("\nEON");          break;
 366   3                      case 0xC2:              Puts("\nMX");           break;
 367   3                      case 0xEF:              Puts("\nWB");           break;
 368   3                      case 0x20:              Puts("\nMicron");       break;
 369   3                      default:                Puts("\nUnknown");      break;
 370   3                      }
 371   2                      if(dat2 == 0x18) Puts("128"); 
 372   2              }
 373   1              else if(cmd == SPICMD_WREN || cmd == SPICMD_WRDI) {
 374   2                      WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);
 375   2                      if(cmd == SPICMD_WRDI)
 376   2                              WriteTW88(REG4CA, SPICMD_WRDI );
 377   2                      else 
 378   2                              WriteTW88(REG4CA, SPICMD_WREN );
 379   2                      WriteTW88(REG4C6, 0x04 );                                               // data Buffer address 0x04D0
 380   2                      WriteTW88(REG4C7, 0xD0 );                                               // data Buffer address
 381   2                      WriteTW88(REG4DA, 0x00 );                                               // data Buff count high
 382   2                      WriteTW88(REG4C8, 0x00 );                                               // data Buff count middle
 383   2                      WriteTW88(REG4C9, 0x00 );                                               // data Buff count Lo
 384   2                      WaitVBlank(1);
 385   2                      WriteTW88(REG4C4, 0x03 );                                               // DMA-Write
 386   2                      //wait
 387   2                      for(i=0; i < 200; i++) {
 388   3                              vdata = ReadTW88(REG4C4);
 389   3                              if((vdata & 0x01)==0)
 390   3                                      break;
 391   3                              delay1ms(10);
 392   3                      }
 393   2                      if(cmd == SPICMD_WRDI) Puts("\nWRDI ");
 394   2                      else                               Puts("\nWREN ");
 395   2                      Printf("wait:%bd,%bx data:%bx",i,vdata);
 396   2              }
 397   1              else if(cmd == SPICMD_RDSR || cmd == SPICMD_RDSR2) {
 398   2                      WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);
 399   2                      WriteTW88(REG4CA, cmd );
 400   2                      WriteTW88(REG4C6, 0x04 );                                               // data Buffer address 0x04D0
 401   2                      WriteTW88(REG4C7, 0xD0 );                                               // data Buffer address
 402   2                      WriteTW88(REG4DA, 0x00 );                                               // data Buff count high
 403   2                      WriteTW88(REG4C8, 0x00 );                                               // data Buff count middle
 404   2                      WriteTW88(REG4C9, 0x01 );                                               // data Buff count Lo
 405   2                      WaitVBlank(1);
 406   2                      WriteTW88(REG4C4, 0x01 );                                               // DMA-Read
 407   2                      //wait
 408   2                      for(i=0; i < 200; i++) {
 409   3                              vdata = ReadTW88(REG4C4);
 410   3                              if((vdata & 0x01)==0)
 411   3                                      break;
 412   3                              delay1ms(10);
 413   3                      }
 414   2                      dat0 = ReadTW88(REG4D0);
 415   2                      if(cmd == SPICMD_RDSR2) {
 416   3                              Puts("\nRDSR2 ");
 417   3                              Printf("wait:%bd,%bx data:%bx",i,vdata,dat0);
 418   3                              if(dat0 & 0x02) Puts(" Quad");
 419   3                      }
 420   2                      else {
 421   3                              Puts("\nRDSR ");
 422   3                              Printf("wait:%bd,%bx data:%bx",i,vdata,dat0);
 423   3                              if(dat0 & 0x40) Puts(" Quad");
 424   3                              if(dat0 & 0x02) Puts(" WEL");
 425   3                              if(dat0 & 0x01) Puts(" WIP");
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 8   

 426   3                      }
 427   2              }
 428   1              else if(cmd == SPICMD_WRSR) {
 429   2                      if( argc<4 ) {
 430   3                              Printf("\nMissing Parameters !!!" );
 431   3                              return;
 432   3                      }
 433   2                      dat0 = a2h(argv[2]);
 434   2                      dat1 = a2h(argv[3]);
 435   2                      WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 3); // cmd len 1
 436   2                      WriteTW88(REG4CA, SPICMD_WRSR );                                // SPI Command = 
 437   2                      WriteTW88(REG4CB, dat0);
 438   2                      WriteTW88(REG4CC, dat1);
 439   2                      WriteTW88(REG4C6, 0x04 );                                               // data Buffer address 0x04D0
 440   2                      WriteTW88(REG4C7, 0xD0 );                                               // data Buffer address
 441   2                      WriteTW88(REG4DA, 0x00 );                                               // data Buff count high
 442   2                      WriteTW88(REG4C8, 0x00 );                                               // data Buff count middle
 443   2                      WriteTW88(REG4C9, 0x00 );                                               // data Buff count Low
 444   2                      WaitVBlank(1);
 445   2                      WriteTW88(REG4C4, 0x07 );                                               // DMA-Write start, Busy check
 446   2                      //wait
 447   2                      for(i=0; i < 200; i++) {
 448   3                              vdata = ReadTW88(REG4C4);
 449   3                              if((vdata & 0x01)==0)
 450   3                                      break;
 451   3                              delay1ms(10);
 452   3                      }
 453   2                      Printf("\nWRSR wait:%bd,%bx data:",i,vdata);
 454   2              }
 455   1              else if(cmd == SPICMD_PP) {
 456   2                      if( argc<4 ) {
 457   3                              Printf("\nMissing Parameters !!!" );
 458   3                              return;
 459   3                      }
 460   2                      if( argc > 11 ) {
 461   3                              Printf("\nonly support 8 bytes !!!" );
 462   3                              argc = 11;
 463   3                      }
 464   2                      spiaddr = a2h( argv[2] );
 465   2                      Printf("\nPP %06lx ", spiaddr);
 466   2      
 467   2                      for(i=3,cnt=0; i <argc; i++,cnt++) {
 468   3                              dat0 = a2h(argv[i]);
 469   3                              Printf(" %02bx",dat0);
 470   3                              WriteTW88(REG4D0+cnt, dat0); 
 471   3                      }
 472   2                      WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 4); // cmd len 1
 473   2                      WriteTW88(REG4CA, SPICMD_PP );                                  // SPI Command = PAGE_PROGRAM
 474   2                      WriteTW88(REG4CB, spiaddr>>16 );                                // SPI address
 475   2                      WriteTW88(REG4CC, spiaddr>>8 );                                 // SPI address
 476   2                      WriteTW88(REG4CD, spiaddr );                                    // SPI address
 477   2                      WriteTW88(REG4C6, 0x04 );                                               // data Buffer address 0x04D0
 478   2                      WriteTW88(REG4C7, 0xD0 );                                               // data Buffer address
 479   2                      WriteTW88(REG4DA, 0x00 );                                               // data Buff count high
 480   2                      WriteTW88(REG4C8, 0x00 );                                               // data Buff count middle
 481   2                      WriteTW88(REG4C9, cnt );                                                // data buff count Low
 482   2                      WaitVBlank(1);
 483   2                      WriteTW88(REG4C4, 0x07 );                                               // DMA-Write start, Busy check
 484   2                      //wait
 485   2                      for(i=0; i < 200; i++) {
 486   3                              vdata = ReadTW88(REG4C4);
 487   3                              if((vdata & 0x01)==0)
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 9   

 488   3                                      break;
 489   3                              delay1ms(10);
 490   3                      }
 491   2                      Printf("wait:%bd,%bx data:",i,vdata);
 492   2      #if 1
 493   2                      WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);
 494   2                      WriteTW88(REG4CA, SPICMD_RDSR );
 495   2                      WriteTW88(REG4C6, 0x04 );                                               // data Buffer address 0x04D0
 496   2                      WriteTW88(REG4C7, 0xD0 );                                               // data Buffer address
 497   2                      WriteTW88(REG4C9, 0x01 );                                               // data Buff count Lo
 498   2                      WaitVBlank(1);
 499   2                      WriteTW88(REG4C4, 0x01 );                                               // DMA-Read
 500   2                      for(i=0; i < 200; i++) {
 501   3                              vdata = ReadTW88(REG4D0);
 502   3                              if((vdata & 0x01)==0)
 503   3                                      break;
 504   3                              delay1ms(10);
 505   3                      }
 506   2                      Printf("\n%bd: %02bx", i,vdata);
 507   2                      if(vdata & 0x40) Puts(" Quad");
 508   2                      if(vdata & 0x02) Puts(" WEL");
 509   2                      if(vdata & 0x01) Puts(" WIP");
 510   2      #endif
 511   2                      //Prompt();
 512   2                      //Printf("\nMonAddress[%02bx]>", MonAddress);
 513   2              }
 514   1              else if(cmd == SPICMD_SE || cmd == SPICMD_BE) {
 515   2                      if( argc<3 ) {
 516   3                              Printf("\nMissing Parameters !!!" );
 517   3                              return;
 518   3                      }
 519   2                      spiaddr = a2h( argv[2] );
 520   2                      if(cmd==cmd == SPICMD_BE)
 521   2                              Printf("\nBE %06lx ", spiaddr);
 522   2                      else
 523   2                              Printf("\nSE %06lx ", spiaddr);
 524   2      
 525   2                      WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 4); // cmd len 1
 526   2                      if(cmd == SPICMD_BE)
 527   2                              WriteTW88(REG4CA, SPICMD_BE );                          // SPI Command = 
 528   2                      else
 529   2                              WriteTW88(REG4CA, SPICMD_SE );                          // SPI Command = 
 530   2                      WriteTW88(REG4CB, spiaddr>>16 );                                // SPI address
 531   2                      WriteTW88(REG4CC, spiaddr>>8 );                                 // SPI address
 532   2                      WriteTW88(REG4CD, spiaddr );                                    // SPI address
 533   2                      WriteTW88(REG4DA, 0x00 );                                               // data Buff count high
 534   2                      WriteTW88(REG4C8, 0x00 );                                               // data Buff count middle
 535   2                      WriteTW88(REG4C9, 0 );                                                  // data buff count Low
 536   2                      WaitVBlank(1);
 537   2                      WriteTW88(REG4C4, 0x07 );                                               // DMA-Write start, Busy check
 538   2                      //wait
 539   2                      for(i=0; i < 200; i++) {
 540   3                              vdata = ReadTW88(REG4C4);
 541   3                              if((vdata & 0x01)==0)
 542   3                                      break;
 543   3                              delay1ms(10);
 544   3                      }
 545   2                      Printf("wait:%bd,%bx data:",i,vdata);
 546   2              }
 547   1              else if(cmd == SPICMD_READ || cmd == SPICMD_FASTREAD || cmd == SPICMD_4READ ) {
 548   2                      if( argc < 3 ) {
 549   3                              Printf("\nMissing Parameters !!!" );
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 10  

 550   3                              return;
 551   3                      }
 552   2                      dat0 = ReadTW88(REG4C0) & 0x07;
 553   2                      if(cmd==SPICMD_FASTREAD) {
 554   3                              Puts("\nF_READ");
 555   3                              if(dat0 != 1) {
 556   4                                      Puts(" need REG4C0[2:0]=1");
 557   4                                      WriteTW88(REG4C0, 1);           //BKTODO:TW8836 need REG4C0[7]
 558   4                              }
 559   3                      }
 560   2                      else if(cmd==SPICMD_4READ) {
 561   3                              Puts("\nQ_READ");
 562   3                              if(dat0 != 5) {
 563   4                                      Puts(" need REG4C0[2:0]=5"); 
 564   4                                      WriteTW88(REG4C0, 5);           //BKTODO:TW8836 need REG4C0[7]
 565   4                              }
 566   3                      }
 567   2                      else { // cmd==SPICMD_READ
 568   3                              Puts("\nREAD");
 569   3                              if(dat0 != 0) {
 570   4                                      Puts(" need REG4C0[2:0]=0");
 571   4                                      WriteTW88(REG4C0, 0);           //BKTODO:TW8836 need REG4C0[7]
 572   4                              }  
 573   3                      }
 574   2                      spiaddr = a2h( argv[2] );
 575   2                      Printf(" %06lx ", spiaddr);
 576   2      
 577   2                      if(argc >= 4)
 578   2                              cnt = a2h(argv[3]);
 579   2                      else cnt = 8;
 580   2      
 581   2                      if(cmd==SPICMD_FASTREAD) {
 582   3                              WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 5); // cmd len 5
 583   3                              WriteTW88(REG4CA, SPICMD_FASTREAD );                    // SPI Command = 
 584   3                      }
 585   2                      else if(cmd==SPICMD_4READ) {
 586   3                              WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 7); // cmd len 4
 587   3                              WriteTW88(REG4CA, SPICMD_4READ );                               // SPI Command = 
 588   3                      }
 589   2                      else {  //cmd==SPICMD_READ
 590   3                              WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | 4); // cmd len 1
 591   3                              WriteTW88(REG4CA, SPICMD_READ );                                // SPI Command = 
 592   3                      }
 593   2                      WriteTW88(REG4CB, spiaddr>>16 );                                // SPI address
 594   2                      WriteTW88(REG4CC, spiaddr>>8 );                                 // SPI address
 595   2                      WriteTW88(REG4CD, spiaddr );                                    // SPI address
 596   2      
 597   2                      WriteTW88(REG4C6, 0x04 );                                               // data Buffer address 0x04D0
 598   2                      WriteTW88(REG4C7, 0xD0 );                                               // data Buffer address
 599   2                      WriteTW88(REG4DA, 0x00 );                                               // data Buff count high
 600   2                      WriteTW88(REG4C8, 0x00 );                                               // data Buff count middle
 601   2                      WriteTW88(REG4C9, cnt );                                                // data Buff count Lo
 602   2      
 603   2                      WaitVBlank(1);
 604   2                      WriteTW88(REG4C4, 0x05 );                                               // DMA-Read start, Busy check
 605   2                      //wait
 606   2                      for(i=0; i < 200; i++) {
 607   3                              vdata = ReadTW88(REG4C4);
 608   3                              if((vdata & 0x01)==0)
 609   3                                      break;
 610   3                              delay1ms(10);
 611   3                      }
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 11  

 612   2                      Printf("wait:%bd,%bx data:",i,vdata);
 613   2      
 614   2                      for(i=0; i < cnt; i++)
 615   2                              Printf(" %02bx", ReadTW88(REG4D0+i));
 616   2              }
 617   1              else if(cmd == SPICMD_RDVEREG || cmd == SPICMD_RDVREG || cmd == SPICMD_RDNVREG) {
 618   2                      //only for micron
 619   2                      if(cmd== SPICMD_RDVEREG)
 620   2                              Printf("\nRDVEREG:%bx",SPICMD_RDVEREG);
 621   2                      else if(cmd== SPICMD_RDVREG)
 622   2                              Printf("\nRDVREG:%bx",SPICMD_RDVREG);
 623   2                      else
 624   2                              Printf("\nRDNVREG:%bx",SPICMD_RDNVREG);
 625   2      
 626   2                      WriteTW88(REG4C3,(DMA_DEST_CHIPREG << 6) | 1);
 627   2                      WriteTW88(REG4CA, cmd );
 628   2                      WriteTW88(REG4C6, 0x04 );                                               // data Buffer address 0x04D0
 629   2                      WriteTW88(REG4C7, 0xD0 );                                               // data Buffer address
 630   2                      WriteTW88(REG4DA, 0x00 );                                               // data Buff count high
 631   2                      WriteTW88(REG4C8, 0x00 );                                               // data Buff count middle
 632   2                      if(cmd== SPICMD_RDVEREG || cmd== SPICMD_RDVREG)
 633   2                              WriteTW88(REG4C9, 0x01 );                                               // data Buff count Lo
 634   2                      else
 635   2                              WriteTW88(REG4C9, 0x02 );                                               // data Buff count Lo
 636   2                      WaitVBlank(1);
 637   2                      WriteTW88(REG4C4, 0x01 );                                               // DMA-Read
 638   2                      //wait
 639   2                      for(i=0; i < 200; i++) {
 640   3                              vdata = ReadTW88(REG4C4);
 641   3                              if((vdata & 0x01)==0)
 642   3                                      break;
 643   3                              delay1ms(10);
 644   3                      }
 645   2                      Printf(" wait:%bd,%bx data:",i,vdata);
 646   2      
 647   2                      dat0 = ReadTW88(REG4D0);
 648   2                      Printf("%02bx", dat0);
 649   2                      if(cmd== SPICMD_RDNVREG) {
 650   3                              dat1 = ReadTW88(REG4D1);
 651   3                              Printf(" %02bx", dat1);
 652   3                      }
 653   2                      if(cmd== SPICMD_RDVREG) {
 654   3                              Printf(" DummyCycle:%bd", dat0 >> 4);
 655   3                      }
 656   2                      else {
 657   3                              Printf(" DummyCycle:%bd", dat1 >> 4);
 658   3                      }
 659   2      
 660   2              }
 661   1              else if(cmd==SPICMD_WDVEREG || cmd==SPICMD_WDVREG || cmd==SPICMD_WDNVREG) {
 662   2                      //only for micron
 663   2                      BYTE cmd_len;
 664   2                      if(cmd==SPICMD_WDVEREG || cmd==SPICMD_WDVREG) {
 665   3                              if( argc<3 ) {
 666   4                                      Printf("\nMissing Parameters !!!" );
 667   4                                      return;
 668   4                              }
 669   3                              dat0 = a2h(argv[2]);
 670   3                              cmd_len = 2;
 671   3                      }
 672   2                      else {
 673   3                              if( argc<4 ) {
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 12  

 674   4                                      Printf("\nMissing Parameters !!!" );
 675   4                                      return;
 676   4                              }
 677   3                              dat0 = a2h(argv[2]);
 678   3                              dat1 = a2h(argv[3]);
 679   3                              cmd_len = 3;
 680   3                      }
 681   2                      WriteTW88(REG4C3, (DMA_DEST_CHIPREG << 6) | cmd_len);   // cmd len 1
 682   2                      WriteTW88(REG4CA, cmd );                                // SPI Command = 
 683   2                      WriteTW88(REG4CB, dat0);
 684   2                      if(cmd==SPICMD_WDNVREG)
 685   2                              WriteTW88(REG4CC, dat1);
 686   2                      WriteTW88(REG4C6, 0x04 );                                               // data Buffer address 0x04D0
 687   2                      WriteTW88(REG4C7, 0xD0 );                                               // data Buffer address
 688   2                      WriteTW88(REG4DA, 0x00 );                                               // data Buff count high
 689   2                      WriteTW88(REG4C8, 0x00 );                                               // data Buff count middle
 690   2                      WriteTW88(REG4C9, 0x00 );                                               // data Buff count Low
 691   2                      WaitVBlank(1);
 692   2                      WriteTW88(REG4C4, 0x07 );                                               // DMA-Write start, Busy check
 693   2                      //wait
 694   2                      for(i=0; i < 200; i++) {
 695   3                              vdata = ReadTW88(REG4C4);
 696   3                              if((vdata & 0x01)==0)
 697   3                                      break;
 698   3                              delay1ms(10);
 699   3                      }
 700   2                      Printf("\nwait:%bd,%bx data:",i,vdata);
 701   2              }
 702   1              else {
 703   2                      Printf("\nUnknown CMD:%02bx",cmd);
 704   2              }
 705   1      
 706   1              WriteTW88Page(page);
 707   1      }
 708          
 709          
 710          
 711          #if 0
              void MonitorSPIC_____OLD(void)
              {
                      DECLARE_LOCAL_page
                      BYTE temp;
                      BYTE r_cnt, c_cnt, i;
                      BYTE w_cmd[5];
              
                      if(argc < 3) {
                              HelpMonitorSPIC();
                              return;
                      }
              
                      r_cnt = (BYTE)a2h( argv[1] );
                      if(r_cnt > 8)   r_cnt = 8;              //max
              
                      c_cnt=0;
                      temp = argc - 2;
                      if(temp > 5)    temp=5;                 //max
                      for(i=0; i < temp; i++) {
                              w_cmd[c_cnt++] = (BYTE)a2h(argv[2+i]);
                      }
              
                      Printf("\nSPIC r:%bd c:%bd cmd:",r_cnt, c_cnt);
                      for(i=0; i < c_cnt; i++)
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 13  

                              Printf(" %02bx", w_cmd[i]);             
              
                      ReadTW88Page(page);             //save
                      WriteTW88Page( PAGE4_SPI );
              
                      WriteTW88(REG4C3, 0x40+c_cnt);                  // use chip register
                      Write2TW88(REG4C6,REG4C7, 0x04d0);              // DMA Page & Index. indecate DMA read/write Buffer at 0x04D0.
                      WriteTW88(REG4DA,0 );                                   // DMA Length high
                      Write2TW88(REG4C8,REG4C9, r_cnt);               // DMA Length middle & low
              
                      //write command 
                      for(i=0; i < c_cnt; i++)
                              WriteTW88(REG4CA+i, w_cmd[i] );         // write cmd1
              
                      if(r_cnt) {
                              WriteTW88(REG4C4, 0x01 );                       // start
                              delay1ms(2);
                      }
                      else {
                              //if(c_cnt > 1) 
                              //      WriteTW88(REG4c4, 0x07 );               // start with write, with busycheck
                              //else                  
                                      WriteTW88(REG4C4, 0x03 );               // start           , with busycheck
                      }
              
                      //read
                      if(r_cnt)       Puts("\tREAD:");        
                      for(i=0; i < r_cnt; i++) {
                              temp = ReadTW88(REG4D0+i );
                              Printf("%02bx ",temp);
                      }                                                       
              
                      WriteTW88Page( page );  //restore
              }
              #endif
 771          
 772          #if 0
              void MonitorSPIC(void)
              {
                      BYTE page;
                      BYTE reg, temp;
                      BYTE cnt, i;
                      //BYTE i;
                      BYTE w_cmd[5];
              
              
                      if(argc < 2) {
                              HelpMonitorSPIC();
                              return;
                      }
              
                      ReadTW88Page(page);             //save
                      WriteTW88Page( PAGE4_SPI );
              
                      reg = (BYTE)a2h( argv[1] );
              
                      //--------------------------------------------------------
                      //spic 9f r 3           read SPI JEDEC ID
                      //spic 5 r 1            read status
                      if( !stricmp( argv[2], "R" ) ) {
              
                              cnt = (BYTE)a2h( argv[3] );
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 14  

              
                              Printf("\nspic 0x%bx R %bd==>",reg,cnt);
              
                              WriteTW88(REG4c3, 0x41 );                               // mode, cmd-len 1
                              Write2TW88(REG4C6,REG4C7, 0x04d0);                      // DMA Page & Index. indecate DMA read/write Buffer at 0x04D0.
                              WriteTW88(REG4DA,0 );                                   // DMA Length high
                              Write2TW88(REG4C8,REG4C9, cnt);                         // DMA Length middle & low
              
                              WriteTW88(REG4ca, reg );                                        // cmd1
                              WriteTW88(REG4c4, 0x01 );                               // start
                              for(i=0; i < cnt; i++) {
                                      temp = ReadTW88(REG4d0+i );
                                      Printf("%02bx ",temp);
                              }                                                       
                      }
                      //--------------------------------------------------------
                      //spic 6 w                        ; write enable
                      //spic 4 w                        ; write disable
                      //spic 1 w 1 value1       ; write status
                      else if( !stricmp( argv[2], "W" ) ) {
              
                              if(reg==6 || reg==4) {
                                      cnt = 0;
                              }
                              else
                              cnt = (BYTE)a2h( argv[3] );
                              if(cnt > 4)
                                      cnt = 4;
                              Printf("\nspic 0x%bx W %bd",reg,cnt);
                              for(i=0; i < cnt; i++) {
                                      w_cmd[i] = (BYTE)a2h( argv[4+i] );
                                      Printf(" 0x%bx",w_cmd[i]);
                              }
                              Puts("==>");
              
                              WriteTW88Page(4);                                                               
                              WriteTW88(REG4c3, 0x41+cnt );                           // mode, cmd-len 1+cnt
                              Write2TW88(REG4C6,REG4C7, 0x04d0);                              // DMA Page & Index. indecate DMA read/write Buffer at 0x04D0.
                              WriteTW88(REG4DA, 0 );                                          // DMA Length high
                              WriteTW88(REG4C8, 0 );                                          // DMA Length middle
                              WriteTW88(REG4C9, cnt);                                         // DMA Length low
              
                              WriteTW88(REG4ca, reg );                                                // cmd1
                              for(i=0; i < cnt; i++) {
                                      WriteTW88(REG4cb+i, w_cmd[i] );
                              }                                                       
                              WriteTW88(REG4c4, 0x01 );                                       // start
                      }
              
                      else if( !stricmp( argv[1], "?" ) ) {
                              HelpMonitorSPIC();
                      }
                      //--------------------------------------------------------
                      else
                              Printf("\nInvalid command..."); 
              
                      WriteTW88Page( page );  //restore
              }
              #endif
 857          
 858          //=============================================================================
 859          //
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 15  

 860          //=============================================================================
 861          //      Format is needed only once
 862          //      Init is needed when starting program
 863          #ifndef MODEL_TW8836RTL
 864          #ifdef USE_SFLASH_EEPROM
 865          void MonitorEE(void)
 866          {
 867   1              BYTE dat, i, j;
 868   1              BYTE dat1;
 869   1              WORD index;
 870   1      
 871   1              index = a2h( argv[2] );
 872   1              dat   = a2h( argv[3] );
 873   1      
 874   1              //--------------------------------------------------------
 875   1              if( !stricmp( argv[1], "format" ) ) {
 876   2                      Printf("\nFormat EEPROM...");
 877   2                      EE_Format();
 878   2                      return;
 879   2              }
 880   1              //--------------------------------------------------------
 881   1              else if( !stricmp( argv[1], "find" ) ) {
 882   2                      Printf("\nFind EEPROM variables...");
 883   2                      EE_FindCurrInfo();
 884   2                      return;
 885   2              }
 886   1              //--------------------------------------------------------
 887   1              else if( !stricmp( argv[1], "repair" ) ) {
 888   2                      Printf("\nRepair MoveDone error..call only when EE find have a MoveDone error");
 889   2                      EE_RepairMoveDone();
 890   2                      return;
 891   2              }
 892   1              //--------------------------------------------------------
 893   1              else if( !stricmp( argv[1], "init" ) ) {
 894   2                      Printf("\nEE initialize........");
 895   2                      ClearBasicEE();
 896   2                      SaveDebugLevelEE(0);
 897   2                      SaveFWRevEE( FWVER );
 898   2                      EE_PrintCurrInfo();
 899   2                      return;
 900   2              }
 901   1              //--------------------------------------------------------
 902   1              else if( !stricmp( argv[1], "check" ) ) {
 903   2                      Printf("\nEE check");
 904   2                      EE_Check();
 905   2                      return;
 906   2              }
 907   1              //--------------------------------------------------------
 908   1              else if( !stricmp( argv[1], "clean" ) ) {
 909   2                      Printf("\nEE clean blocks");
 910   2                      EE_CleanBlocks();
 911   2                      return;
 912   2              }
 913   1              //--------------------------------------------------------
 914   1              else if( !stricmp( argv[1], "W" ) ) {
 915   2                      if( argc==4 ) {
 916   3                              Printf("\nWrite EEPROM %03x:%02bx ", index, dat );
 917   3                              EE_Write( index, dat );
 918   3                              dat1 = EE_Read( index );  //BUG
 919   3                              dat = EE_Read( index );
 920   3                              Printf(" ==> Read EEPROM[%03x] = %02bx %02bx", index, dat1, dat );
 921   3                      }
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 16  

 922   2              }
 923   1              //--------------------------------------------------------
 924   1              else if( !stricmp( argv[1], "R" ) ) {
 925   2                      if( argc==3 ) {
 926   3                              dat = EE_Read( index );
 927   3                              Printf("\n ==> Read EEPROM[%03x] = %02bx ", index, dat );
 928   3                      }
 929   2              }
 930   1              //--------------------------------------------------------
 931   1      #ifdef USE_SFLASH_EEPROM
 932   1              else if( !stricmp( argv[1], "D" ) ) {
 933   2                      Printf("\nDump EEPROM");
 934   2                      for(j=0; j<EE_MAX_INDEX/16; j++) {
 935   3                              Printf("\nEEPROM %02bx:", j*0x10);
 936   3                              for(i=0; i<8; i++) Printf(" %02bx", EE_Read( j*16 + i ) );
 937   3                              Printf("-");
 938   3                              for(; i<16; i++) Printf("%02bx ", EE_Read( j*16 + i ) );
 939   3                      }
 940   2              }
 941   1      #endif
 942   1              //--------------------------------------------------------
 943   1              else if( !stricmp( argv[1], "?" ) ) {
 944   2                      Printf("\n\n  === Help for EE command ===");
 945   2                      Printf("\nEE format         ; format and initialize");
 946   2                      Printf("\nEE find           ; initialze internal variables");
 947   2                      Printf("\nEE init           ; initialze default EE values");
 948   2                      Printf("\nEE check          ; report map,dump,corrupt");
 949   2                      Printf("\nEE clean          ; move & clean bank sector");
 950   2                      Printf("\nEE repair         ; call when you have a movedone error");
 951   2                      Printf("\nEE w [idx] [dat]  ; write data");
 952   2                      Printf("\nEE r [idx]        ; read data");
 953   2                      Printf("\nEE d              ; dump all data");
 954   2                      Printf("\nFYI %bx:DebugLevel %bx:InputMain ",EEP_DEBUGLEVEL,EEP_INPUTSELECTION);
 955   2                      Printf("\n");
 956   2              }
 957   1      
 958   1              else
 959   1                      Printf("\nInvalid command..."); 
 960   1              
 961   1      }
 962          #endif
 963          #endif
 964          
 965          //=============================================================================
 966          /**
 967          * SPI Read Status
 968          *
 969          */
 970          static void SPI_Status(void)
 971          {
 972   1              BYTE dat0,dat1;
 973   1              BYTE vid;
 974   1              BYTE cid;
 975   1      
 976   1              WriteTW88Page(PAGE4_SPI);
 977   1      
 978   1              SpiFlashDmaDestType(DMA_DEST_CHIPREG, 0);
 979   1              SpiFlashDmaBuffAddr(DMA_BUFF_REG_ADDR);
 980   1              SpiFlashDmaReadLen(0);  //clear high & middle bytes 
 981   1      
 982   1              SpiFlashCmd(SPICMD_RDID, 1);    
 983   1              SpiFlashDmaReadLenByte(3);
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 17  

 984   1              SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
 985   1              vid  = SPIDMA_READDATA(0);
 986   1              dat1 = SPIDMA_READDATA(1);
 987   1              cid  = SPIDMA_READDATA(2);
 988   1      
 989   1              Printf("\nJEDEC ID: %02bx %02bx %02bx", vid, dat1, cid );
 990   1      
 991   1              switch(vid) {
 992   2              case 0x1C:              Puts("\nEON");          break;
 993   2              case 0xC2:              Puts("\nMX");           break;
 994   2              case 0xEF:              Puts("\nWB");           if(cid == 0x18) Puts("128"); break;
 995   2              case 0x20:              Puts("\nMicron");       break;
 996   2              default:                Puts("\nUnknown");      break;
 997   2              }
 998   1      
 999   1              if (vid == 0xC2 || vid == 0x1c) {
1000   2                      SpiFlashCmd(SPICMD_RDSR, 1);
1001   2                      SpiFlashDmaReadLenByte(1);
1002   2                      SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
1003   2                      dat0 = SPIDMA_READDATA(0);
1004   2                      Printf("        CMD:%02bx Data:%02bx",SPICMD_RDSR,dat0);
1005   2                      if(dat0 & 0x40) Puts(" Quad Enabled");
1006   2              }
1007   1              else if (vid == 0xEF) {                                 // WB
1008   2                      if(cid == 0x18) {                               //Q128 case different status read command
1009   3                              SpiFlashCmd(SPICMD_RDSR2, 1);
1010   3                              SpiFlashDmaReadLenByte(1);
1011   3                              SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
1012   3                              dat0 = SPIDMA_READDATA(0);
1013   3                              Printf("        CMD:%02bx Data:%02bx",SPICMD_RDSR2,dat0);
1014   3                      }
1015   2                      else {
1016   3                              SpiFlashCmd(SPICMD_RDSR, 1);
1017   3                              SpiFlashDmaReadLenByte(2);
1018   3                              SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
1019   3                              dat0 = SPIDMA_READDATA(0);
1020   3                              dat1 = SPIDMA_READDATA(1);
1021   3                              dPrintf("\nStatus before QUAD: %02bx, %02bx", dat0, dat1 );     
1022   3                              Printf("        CMD:%02bx Data:%02bx,%02bx",SPICMD_RDSR,dat0,dat1);
1023   3                      }
1024   2              }
1025   1              else if(vid==0x20) {
1026   2                      if(cid !=0x18) {
1027   3                              Puts(" NEED 128b!!!");
1028   3                              return;
1029   3                      }
1030   2                      // Volatile
1031   2                      SpiFlashCmd(SPICMD_RDVREG, 1);  //cmd, read Volatile register
1032   2                      SpiFlashDmaReadLenByte(1);
1033   2                      SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
1034   2                      dat0 = SPIDMA_READDATA(0);
1035   2                      dPrintf("       Volatile Register: %02bx", dat0 );
1036   2      
1037   2                      // non-Volatile
1038   2                      SpiFlashCmd(SPICMD_RDNVREG, 1); //cmd, read Non-Volatile register
1039   2                      SpiFlashDmaReadLenByte(2);
1040   2                      SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
1041   2                      dat0 = SPIDMA_READDATA(0);
1042   2                      dat1 = SPIDMA_READDATA(1);
1043   2                      dPrintf("       Non-Volatile Register: %02bx, %02bx", dat0, dat1 );
1044   2              }
1045   1      }
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 18  

1046          
1047          //=============================================================================
1048          /**
1049          * read and dump SPIFLASH data
1050          */
1051          static void SPI_dump(DWORD spiaddr) 
1052          {
1053   1              BYTE *ptr = SPI_Buffer;
1054   1              DWORD cnt = 0x80L;
1055   1              BYTE i, j, c;
1056   1      
1057   1              SpiFlashDmaRead2XMem(SPI_Buffer, spiaddr, cnt);  //same SpiFlashDmaRead 
1058   1      
1059   1              for (j=0; j<8; j++) {
1060   2                      Printf("\nSPI %06lx: ", spiaddr + j*0x10);
1061   2                      for(i=0; i<8; i++) Printf("%02bx ", SPI_Buffer[j*0x10+i] );
1062   2                      Printf("- ");
1063   2                      for(; i<16; i++) Printf("%02bx ", SPI_Buffer[j*0x10+i] );
1064   2                      Printf("  ");
1065   2                      for(i=0; i<16; i++) {
1066   3                              c = SPI_Buffer[j*0x10+i];
1067   3                              if( c>=0x20 && c<0x80 ) Printf("%c", c);
1068   3                              else Printf(".");
1069   3                      }
1070   2              }
1071   1      }
1072          
1073          
1074          
1075          
1076          
1077          
1078          
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 19  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0111 (BEGIN)
0000         L?0274:
0000 900000      R     MOV     DPTR,#spiaddr
0003 E0                MOVX    A,@DPTR
0004 FC                MOV     R4,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FD                MOV     R5,A
0008 A3                INC     DPTR
0009 E0                MOVX    A,@DPTR
000A FE                MOV     R6,A
000B A3                INC     DPTR
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
000E 7810              MOV     R0,#010H
0010 120000      E     LCALL   ?C?ULSHR
0013 E500        E     MOV     A,regTW88+01H
0015 24CB              ADD     A,#0CBH
0017 F582              MOV     DPL,A
0019 E500        E     MOV     A,regTW88
001B 3404              ADDC    A,#04H
001D F583              MOV     DPH,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
0021 900000      R     MOV     DPTR,#spiaddr
0024 E0                MOVX    A,@DPTR
0025 FC                MOV     R4,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FD                MOV     R5,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FE                MOV     R6,A
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 7808              MOV     R0,#08H
0031 120000      E     LCALL   ?C?ULSHR
0034 E500        E     MOV     A,regTW88+01H
0036 24CC              ADD     A,#0CCH
0038 F582              MOV     DPL,A
003A E500        E     MOV     A,regTW88
003C 3404              ADDC    A,#04H
003E F583              MOV     DPH,A
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
0042 900000      R     MOV     DPTR,#spiaddr
0045 A3                INC     DPTR
0046 A3                INC     DPTR
0047 A3                INC     DPTR
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A E500        E     MOV     A,regTW88+01H
004C 24CD              ADD     A,#0CDH
004E         L?0275:
004E F582              MOV     DPL,A
0050 E500        E     MOV     A,regTW88
0052 3404              ADDC    A,#04H
0054 F583              MOV     DPH,A
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 20  

0056 EF                MOV     A,R7
0057         L?0276:
0057 F0                MOVX    @DPTR,A
0058         L?0277:
0058 E500        E     MOV     A,regTW88+01H
005A 24C6              ADD     A,#0C6H
005C F582              MOV     DPL,A
005E E500        E     MOV     A,regTW88
0060 3404              ADDC    A,#04H
0062 F583              MOV     DPH,A
0064 7404              MOV     A,#04H
0066 F0                MOVX    @DPTR,A
0067 E500        E     MOV     A,regTW88+01H
0069 24C7              ADD     A,#0C7H
006B F582              MOV     DPL,A
006D E500        E     MOV     A,regTW88
006F 3404              ADDC    A,#04H
0071 F583              MOV     DPH,A
0073 74D0              MOV     A,#0D0H
0075         L?0278:
0075 F0                MOVX    @DPTR,A
0076 E500        E     MOV     A,regTW88+01H
0078 24DA              ADD     A,#0DAH
007A F582              MOV     DPL,A
007C E500        E     MOV     A,regTW88
007E 3404              ADDC    A,#04H
0080 F583              MOV     DPH,A
0082 E4                CLR     A
0083 F0                MOVX    @DPTR,A
0084 E500        E     MOV     A,regTW88+01H
0086 24C8              ADD     A,#0C8H
0088         L?0279:
0088 F582              MOV     DPL,A
008A E500        E     MOV     A,regTW88
008C 3404              ADDC    A,#04H
008E F583              MOV     DPH,A
0090 22                RET     
0091         L?0280:
0091 900000      E     MOV     DPTR,#?_stricmp?BYTE+03H
0094 74FF              MOV     A,#0FFH
0096 F0                MOVX    @DPTR,A
0097 A3                INC     DPTR
0098 7400        R     MOV     A,#HIGH ?SC_0
009A F0                MOVX    @DPTR,A
009B 7400        R     MOV     A,#LOW ?SC_0
009D         L?0281:
009D A3                INC     DPTR
009E         L?0282:
009E F0                MOVX    @DPTR,A
009F         L?0283:
009F 900000      E     MOV     DPTR,#argv+03H
00A2         L?0284:
00A2 E0                MOVX    A,@DPTR
00A3 FB                MOV     R3,A
00A4 A3                INC     DPTR
00A5 E0                MOVX    A,@DPTR
00A6 FA                MOV     R2,A
00A7 A3                INC     DPTR
00A8 E0                MOVX    A,@DPTR
00A9 F9                MOV     R1,A
00AA 22                RET     
00AB         L?0285:
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 21  

00AB 7BFF              MOV     R3,#0FFH
00AD         L?0286:
00AD 900000      R     MOV     DPTR,#spiaddr
00B0         L?0287:
00B0 E0                MOVX    A,@DPTR
00B1 FC                MOV     R4,A
00B2 A3                INC     DPTR
00B3 E0                MOVX    A,@DPTR
00B4 FD                MOV     R5,A
00B5 A3                INC     DPTR
00B6 E0                MOVX    A,@DPTR
00B7 FE                MOV     R6,A
00B8 A3                INC     DPTR
00B9 E0                MOVX    A,@DPTR
00BA 22                RET     
00BB         L?0291:
00BB         L?0292:
00BB 900000      E     MOV     DPTR,#?_stricmp?BYTE+03H
00BE 74FF              MOV     A,#0FFH
00C0 F0                MOVX    @DPTR,A
00C1 A3                INC     DPTR
00C2 22                RET     
00C3         L?0297:
00C3 7BFF              MOV     R3,#0FFH
00C5 7A00        R     MOV     R2,#HIGH ?SC_2531
00C7 7900        R     MOV     R1,#LOW ?SC_2531
00C9         L?0298:
00C9 A3                INC     DPTR
00CA E0                MOVX    A,@DPTR
00CB 75F010            MOV     B,#010H
00CE A4                MUL     AB
00CF 2F                ADD     A,R7
00D0 F582              MOV     DPL,A
00D2 E4                CLR     A
00D3 35F0              ADDC    A,B
00D5 F583              MOV     DPH,A
00D7 E582              MOV     A,DPL
00D9 2400        E     ADD     A,#LOW SPI_Buffer
00DB F582              MOV     DPL,A
00DD E583              MOV     A,DPH
00DF 3400        E     ADDC    A,#HIGH SPI_Buffer
00E1 F583              MOV     DPH,A
00E3 E0                MOVX    A,@DPTR
00E4 22                RET     
00E5         L?0302:
00E5         L?0303:
00E5 7401              MOV     A,#01H
00E7         L?0304:
00E7 F0                MOVX    @DPTR,A
00E8 E4                CLR     A
00E9 900000      R     MOV     DPTR,#i
00EC F0                MOVX    @DPTR,A
00ED 22                RET     
00EE         L?0306:
00EE         L?0307:
00EE 900000      R     MOV     DPTR,#i
00F1 E0                MOVX    A,@DPTR
00F2 FD                MOV     R5,A
00F3 C3                CLR     C
00F4 94C8              SUBB    A,#0C8H
00F6 22                RET     
00F7         L?0308:
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 22  

00F7 7A00        R     MOV     R2,#HIGH ?SC_3022
00F9 7900        R     MOV     R1,#LOW ?SC_3022
00FB         L?0309:
00FB 7BFF              MOV     R3,#0FFH
00FD 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0100 F0                MOVX    @DPTR,A
0101 22                RET     
0102         L?0311:
0102         L?0312:
0102 900000      E     MOV     DPTR,#argc
0105 E0                MOVX    A,@DPTR
0106 C3                CLR     C
0107 9403              SUBB    A,#03H
0109 22                RET     
010A         L?0315:
010A         L?0316:
010A FF                MOV     R7,A
010B         L?0317:
010B 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
010E 020000      E     LJMP    ?C?LSTXDATA
0111         L?0318:
0111         L?0319:
0111 E0                MOVX    A,@DPTR
0112 900000      R     MOV     DPTR,#vdata
0115 F0                MOVX    @DPTR,A
0116 E0                MOVX    A,@DPTR
0117 22                RET     
0118         L?0320:
0118 7B01              MOV     R3,#01H
011A 7A00        E     MOV     R2,#HIGH SPI_Buffer
011C 7900        E     MOV     R1,#LOW SPI_Buffer
011E         L?0321:
011E A3                INC     DPTR
011F A3                INC     DPTR
0120 E0                MOVX    A,@DPTR
0121 FF                MOV     R7,A
0122 A3                INC     DPTR
0123 E0                MOVX    A,@DPTR
0124 22                RET     
0125         L?0322:
0125 7BFF              MOV     R3,#0FFH
0127 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
012A ED                MOV     A,R5
012B         L?0323:
012B F0                MOVX    @DPTR,A
012C 900000      R     MOV     DPTR,#vdata
012F E0                MOVX    A,@DPTR
0130 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
0133 F0                MOVX    @DPTR,A
0134 22                RET     
0135         L?0324:
0135         L?0325:
0135 900000      E     MOV     DPTR,#?_SPI_PageProgram?BYTE+04H
0138         L?0326:
0138 7400        E     MOV     A,#HIGH SPI_Buffer
013A F0                MOVX    @DPTR,A
013B A3                INC     DPTR
013C 7400        E     MOV     A,#LOW SPI_Buffer
013E F0                MOVX    @DPTR,A
013F 22                RET     
0140         L?0329:
0140 75F003            MOV     B,#03H
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 23  

0143 EE                MOV     A,R6
0144         L?0330:
0144 A4                MUL     AB
0145 2400        E     ADD     A,#LOW argv
0147 F582              MOV     DPL,A
0149 E5F0              MOV     A,B
014B 3400        E     ADDC    A,#HIGH argv
014D F583              MOV     DPH,A
014F 22                RET     
0150         L?0333:
0150 2400              ADD     A,#00H
0152 FF                MOV     R7,A
0153 EE                MOV     A,R6
0154 3410              ADDC    A,#010H
0156         L?0334:
0156 FE                MOV     R6,A
0157 E4                CLR     A
0158 3D                ADDC    A,R5
0159 FD                MOV     R5,A
015A E4                CLR     A
015B 3C                ADDC    A,R4
015C FC                MOV     R4,A
015D 22                RET     
015E         L?0335:
015E         L?0336:
015E 900000      E     MOV     DPTR,#argc
0161 E0                MOVX    A,@DPTR
0162 C3                CLR     C
0163 9404              SUBB    A,#04H
0165 22                RET     
0166         L?0337:
0166 7441              MOV     A,#041H
0168         L?0338:
0168 F0                MOVX    @DPTR,A
0169 900000      R     MOV     DPTR,#cmd
016C E0                MOVX    A,@DPTR
016D FF                MOV     R7,A
016E E500        E     MOV     A,regTW88+01H
0170 24CA              ADD     A,#0CAH
0172 22                RET     
0173         L?0342:
0173         L?0343:
0173 E4                CLR     A
0174 F0                MOVX    @DPTR,A
0175 E500        E     MOV     A,regTW88+01H
0177 24C9              ADD     A,#0C9H
0179 22                RET     
017A         L?0344:
017A 7BFF              MOV     R3,#0FFH
017C 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
017F EF                MOV     A,R7
0180 F0                MOVX    @DPTR,A
0181 A3                INC     DPTR
0182 EE                MOV     A,R6
0183 F0                MOVX    @DPTR,A
0184 22                RET     
0185         L?0346:
0185 7BFF              MOV     R3,#0FFH
0187 900000      R     MOV     DPTR,#index
018A E0                MOVX    A,@DPTR
018B FD                MOV     R5,A
018C A3                INC     DPTR
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 24  

018D E0                MOVX    A,@DPTR
018E 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0191 CD                XCH     A,R5
0192 F0                MOVX    @DPTR,A
0193 A3                INC     DPTR
0194 ED                MOV     A,R5
0195 22                RET     
0196         L?0347:
0196 E0                MOVX    A,@DPTR
0197 900000      R     MOV     DPTR,#dat0
019A         L?0348:
019A FF                MOV     R7,A
019B F0                MOVX    @DPTR,A
019C E500        E     MOV     A,regTW88+01H
019E 24D1              ADD     A,#0D1H
01A0 22                RET     
01A1         L?0358:
01A1 7BFF              MOV     R3,#0FFH
01A3 900000      R     MOV     DPTR,#i
01A6 E0                MOVX    A,@DPTR
01A7 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
01AA 22                RET     
01AB         L?0359:
01AB E4                CLR     A
01AC F0                MOVX    @DPTR,A
01AD 900000      R     MOV     DPTR,#cnt
01B0 E0                MOVX    A,@DPTR
01B1 FF                MOV     R7,A
01B2 E500        E     MOV     A,regTW88+01H
01B4 24C9              ADD     A,#0C9H
01B6 22                RET     
01B7         L?0360:
01B7 F0                MOVX    @DPTR,A
01B8 900000      R     MOV     DPTR,#dat0
01BB E0                MOVX    A,@DPTR
01BC FE                MOV     R6,A
01BD E500        E     MOV     A,regTW88+01H
01BF 24CB              ADD     A,#0CBH
01C1 22                RET     
01C2         L?0362:
01C2         L?0363:
01C2 7BFF              MOV     R3,#0FFH
01C4 7A00        R     MOV     R2,#HIGH ?SC_512
01C6 7900        R     MOV     R1,#LOW ?SC_512
01C8 22                RET     
01C9         L?0364:
01C9         L?0365:
01C9 900000      R     MOV     DPTR,#cmd
01CC E0                MOVX    A,@DPTR
01CD 7BFF              MOV     R3,#0FFH
01CF 22                RET     
01D0         L?0366:
01D0         L?0367:
01D0 7BFF              MOV     R3,#0FFH
01D2 7A00        R     MOV     R2,#HIGH ?SC_1870
01D4 7900        R     MOV     R1,#LOW ?SC_1870
01D6 22                RET     
01D7         L?0368:
01D7 7BFF              MOV     R3,#0FFH
01D9 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
01DC ED                MOV     A,R5
01DD 22                RET     
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 25  

01DE         L?0369:
01DE E0                MOVX    A,@DPTR
01DF FF                MOV     R7,A
01E0 900000      R     MOV     DPTR,#i
01E3 E0                MOVX    A,@DPTR
01E4 FE                MOV     R6,A
01E5 C3                CLR     C
01E6 9F                SUBB    A,R7
01E7 22                RET     
01E8         L?0370:
01E8 7BFF              MOV     R3,#0FFH
01EA 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
01ED F0                MOVX    @DPTR,A
01EE 22                RET     
01EF         L?0371:
01EF         L?0372:
01EF E0                MOVX    A,@DPTR
01F0 FE                MOV     R6,A
01F1 900000      R     MOV     DPTR,#dat1
01F4 F0                MOVX    @DPTR,A
01F5 22                RET     
01F6         L?0373:
01F6         L?0374:
01F6 900000      R     MOV     DPTR,#i
01F9 E0                MOVX    A,@DPTR
01FA FF                MOV     R7,A
01FB C3                CLR     C
01FC 22                RET     
             ; FUNCTION Com0111 (END)

             ; FUNCTION MonitorSPI (BEGIN)
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 48
0000 120000      R     LCALL   L?0280
0003 120000      E     LCALL   _stricmp
0006 EF                MOV     A,R7
0007 4E                ORL     A,R6
0008 7032              JNZ     ?C0001
                                           ; SOURCE LINE # 51
000A 120000      R     LCALL   L?0311
000D 400F              JC      ?C0002
000F 900000      E     MOV     DPTR,#argv+06H
0012 120000      R     LCALL   L?0284
0015 120000      E     LCALL   _a2h
0018 900000      R     MOV     DPTR,#spiaddr
001B 120000      E     LCALL   ?C?LSTXDATA
001E         ?C0002:
                                           ; SOURCE LINE # 53
001E 900000      R     MOV     DPTR,#spiaddr
0021 120000      R     LCALL   L?0287
0024 FF                MOV     R7,A
0025 120000      R     LCALL   _SPI_dump
                                           ; SOURCE LINE # 55
0028 900000      R     MOV     DPTR,#spiaddr
002B 120000      R     LCALL   L?0287
002E 2480              ADD     A,#080H
0030 FF                MOV     R7,A
0031 E4                CLR     A
0032 3E                ADDC    A,R6
0033 120000      R     LCALL   L?0334
0036 900000      R     MOV     DPTR,#spiaddr
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 26  

                                           ; SOURCE LINE # 56
0039 020000      R     LJMP    ?C0234
003C         ?C0001:
                                           ; SOURCE LINE # 58
003C 120000      R     LCALL   L?0291
003F 7400        R     MOV     A,#HIGH ?SC_2
0041 F0                MOVX    @DPTR,A
0042 7400        R     MOV     A,#LOW ?SC_2
0044 120000      R     LCALL   L?0281
0047 120000      E     LCALL   _stricmp
004A EF                MOV     A,R7
004B 4E                ORL     A,R6
004C 7003              JNZ     ?C0004
                                           ; SOURCE LINE # 59
004E 020000      R     LJMP    SPI_Status
                                           ; SOURCE LINE # 60
0051         ?C0004:
                                           ; SOURCE LINE # 66
0051 120000      R     LCALL   L?0291
0054 7400        R     MOV     A,#HIGH ?SC_9
0056 F0                MOVX    @DPTR,A
0057 A3                INC     DPTR
0058 7400        R     MOV     A,#LOW ?SC_9
005A 120000      R     LCALL   L?0282
005D 120000      E     LCALL   _stricmp
0060 EF                MOV     A,R7
0061 4E                ORL     A,R6
0062 7030              JNZ     ?C0006
                                           ; SOURCE LINE # 68
0064 FF                MOV     R7,A
0065 FE                MOV     R6,A
0066 7D08              MOV     R5,#08H
0068 FC                MOV     R4,A
0069 120000      E     LCALL   _SPI_SectorErase
                                           ; SOURCE LINE # 70
;---- Variable 'j' assigned to Register 'R7' ----
006C E4                CLR     A
006D FF                MOV     R7,A
006E         ?C0007:
                                           ; SOURCE LINE # 71
006E 7400        E     MOV     A,#LOW SPI_Buffer
0070 2F                ADD     A,R7
0071 F582              MOV     DPL,A
0073 E4                CLR     A
0074 3400        E     ADDC    A,#HIGH SPI_Buffer
0076 F583              MOV     DPH,A
0078 EF                MOV     A,R7
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
007A 0F                INC     R7
007B EF                MOV     A,R7
007C B480EF            CJNE    A,#080H,?C0007
007F         ?C0008:
                                           ; SOURCE LINE # 73
007F 120000      R     LCALL   L?0324
0082 A3                INC     DPTR
0083 E4                CLR     A
0084 F0                MOVX    @DPTR,A
0085 A3                INC     DPTR
0086 7480              MOV     A,#080H
0088 F0                MOVX    @DPTR,A
0089 7F00              MOV     R7,#00H
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 27  

008B 7E00              MOV     R6,#00H
008D 7D08              MOV     R5,#08H
008F 7C00              MOV     R4,#00H
                                           ; SOURCE LINE # 74
0091 020000      R     LJMP    ?C0236
0094         ?C0006:
                                           ; SOURCE LINE # 77
0094 120000      R     LCALL   L?0292
0097 7400        R     MOV     A,#HIGH ?SC_11
0099 F0                MOVX    @DPTR,A
009A A3                INC     DPTR
009B 7400        R     MOV     A,#LOW ?SC_11
009D 120000      R     LCALL   L?0282
00A0 120000      E     LCALL   _stricmp
00A3 EF                MOV     A,R7
00A4 4E                ORL     A,R6
00A5 703F              JNZ     ?C0011
                                           ; SOURCE LINE # 80
00A7 120000      R     LCALL   L?0311
00AA 400F              JC      ?C0012
00AC 900000      E     MOV     DPTR,#argv+06H
00AF 120000      R     LCALL   L?0284
00B2 120000      E     LCALL   _a2h
00B5 900000      R     MOV     DPTR,#spiaddr
00B8 120000      E     LCALL   ?C?LSTXDATA
00BB         ?C0012:
                                           ; SOURCE LINE # 82
00BB 7BFF              MOV     R3,#0FFH
00BD 7A00        R     MOV     R2,#HIGH ?SC_18
00BF 7900        R     MOV     R1,#LOW ?SC_18
00C1 900000      R     MOV     DPTR,#spiaddr
00C4 120000      R     LCALL   L?0287
00C7 120000      R     LCALL   L?0315
00CA 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 84
00CD 900000      R     MOV     DPTR,#spiaddr
00D0 120000      R     LCALL   L?0287
00D3 FF                MOV     R7,A
00D4 120000      E     LCALL   _SPI_SectorErase
                                           ; SOURCE LINE # 85
00D7 900000      R     MOV     DPTR,#spiaddr
00DA 120000      R     LCALL   L?0287
00DD 120000      R     LCALL   L?0333
00E0 900000      R     MOV     DPTR,#spiaddr
00E3         ?C0232:
                                           ; SOURCE LINE # 86
00E3 020000      R     LJMP    ?C0234
00E6         ?C0011:
                                           ; SOURCE LINE # 88
00E6 120000      R     LCALL   L?0292
00E9 7400        R     MOV     A,#HIGH ?SC_40
00EB F0                MOVX    @DPTR,A
00EC A3                INC     DPTR
00ED 7400        R     MOV     A,#LOW ?SC_40
00EF 120000      R     LCALL   L?0282
00F2 120000      E     LCALL   _stricmp
00F5 EF                MOV     A,R7
00F6 4E                ORL     A,R6
00F7 703F              JNZ     ?C0014
                                           ; SOURCE LINE # 91
00F9 120000      R     LCALL   L?0312
00FC 400F              JC      ?C0015
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 28  

00FE 900000      E     MOV     DPTR,#argv+06H
0101 120000      R     LCALL   L?0284
0104 120000      E     LCALL   _a2h
0107 900000      R     MOV     DPTR,#spiaddr
010A 120000      E     LCALL   ?C?LSTXDATA
010D         ?C0015:
                                           ; SOURCE LINE # 93
010D 7BFF              MOV     R3,#0FFH
010F 7A00        R     MOV     R2,#HIGH ?SC_46
0111 7900        R     MOV     R1,#LOW ?SC_46
0113 900000      R     MOV     DPTR,#spiaddr
0116 120000      R     LCALL   L?0287
0119 120000      R     LCALL   L?0315
011C 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 95
011F 900000      R     MOV     DPTR,#spiaddr
0122 120000      R     LCALL   L?0287
0125 FF                MOV     R7,A
0126 120000      E     LCALL   _SPI_BlockErase
                                           ; SOURCE LINE # 96
0129 900000      R     MOV     DPTR,#spiaddr
012C 120000      R     LCALL   L?0287
012F 120000      R     LCALL   L?0333
0132 900000      R     MOV     DPTR,#spiaddr
0135         ?C0234:
0135 020000      E     LJMP    ?C?LSTXDATA
                                           ; SOURCE LINE # 97
0138         ?C0014:
                                           ; SOURCE LINE # 99
0138 120000      R     LCALL   L?0292
013B 7400        R     MOV     A,#HIGH ?SC_67
013D F0                MOVX    @DPTR,A
013E A3                INC     DPTR
013F 7400        R     MOV     A,#LOW ?SC_67
0141 120000      R     LCALL   L?0282
0144 120000      E     LCALL   _stricmp
0147 EF                MOV     A,R7
0148 4E                ORL     A,R6
0149 6003              JZ      $ + 5H
014B 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 100
014E 900000      R     MOV     DPTR,#source
0151 120000      E     LCALL   ?C?LSTKXDATA
0154 00                DB      00H
0155 00                DB      00H
0156 00                DB      00H
0157 00                DB      00H
0158 900000      R     MOV     DPTR,#dest
015B 120000      E     LCALL   ?C?LSTKXDATA
015E 00                DB      00H
015F 01                DB      01H
0160 00                DB      00H
0161 00                DB      00H
                                           ; SOURCE LINE # 101
0162 900000      R     MOV     DPTR,#cnt
0165 120000      E     LCALL   ?C?LSTKXDATA
0168 00                DB      00H
0169 00                DB      00H
016A 01                DB      01H
016B 00                DB      00H
                                           ; SOURCE LINE # 103
016C 120000      R     LCALL   L?0335
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 29  

016F 5003              JNC     ?C0018
                                           ; SOURCE LINE # 104
0171 020000      R     LJMP    ?C0235
                                           ; SOURCE LINE # 106
0174         ?C0018:
                                           ; SOURCE LINE # 107
0174 900000      E     MOV     DPTR,#argv+06H
0177 120000      R     LCALL   L?0284
017A 120000      R     LCALL   L?0375
017D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 108
0180 900000      E     MOV     DPTR,#argv+09H
0183 120000      R     LCALL   L?0284
0186 120000      E     LCALL   _a2h
0189 900000      R     MOV     DPTR,#dest
018C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 109
018F 900000      E     MOV     DPTR,#argv+0CH
0192 120000      R     LCALL   L?0284
0195 120000      E     LCALL   _a2h
0198 900000      R     MOV     DPTR,#cnt
019B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 111
019E 7BFF              MOV     R3,#0FFH
01A0 7A00        R     MOV     R2,#HIGH ?SC_96
01A2 7900        R     MOV     R1,#LOW ?SC_96
01A4 900000      R     MOV     DPTR,#source
01A7 120000      R     LCALL   L?0287
01AA 120000      R     LCALL   L?0316
01AD 900000      R     MOV     DPTR,#dest
01B0 120000      R     LCALL   L?0287
01B3 FF                MOV     R7,A
01B4 900000      E     MOV     DPTR,#?_Printf?BYTE+07H
01B7 120000      E     LCALL   ?C?LSTXDATA
01BA 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 112
01BD 7BFF              MOV     R3,#0FFH
01BF 7A00        R     MOV     R2,#HIGH ?SC_126
01C1 7900        R     MOV     R1,#LOW ?SC_126
01C3 900000      R     MOV     DPTR,#cnt
01C6 120000      R     LCALL   L?0321
01C9 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
01CC CF                XCH     A,R7
01CD F0                MOVX    @DPTR,A
01CE A3                INC     DPTR
01CF EF                MOV     A,R7
01D0 F0                MOVX    @DPTR,A
01D1 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 113
01D4 900000      R     MOV     DPTR,#cnt
01D7 120000      R     LCALL   L?0320
01DA 900000      E     MOV     DPTR,#?_SpiFlashDmaRead2XMem?BYTE+07H
01DD CF                XCH     A,R7
01DE F0                MOVX    @DPTR,A
01DF A3                INC     DPTR
01E0 EF                MOV     A,R7
01E1 F0                MOVX    @DPTR,A
01E2 900000      R     MOV     DPTR,#source
01E5 120000      R     LCALL   L?0287
01E8 FF                MOV     R7,A
01E9 120000      E     LCALL   _SpiFlashDmaRead2XMem
                                           ; SOURCE LINE # 115
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 30  

01EC 120000      R     LCALL   L?0324
01EF 900000      R     MOV     DPTR,#cnt
01F2 120000      R     LCALL   L?0321
01F5 900000      E     MOV     DPTR,#?_SPI_PageProgram?BYTE+06H
01F8 CF                XCH     A,R7
01F9 F0                MOVX    @DPTR,A
01FA A3                INC     DPTR
01FB EF                MOV     A,R7
01FC F0                MOVX    @DPTR,A
01FD 900000      R     MOV     DPTR,#dest
0200 120000      R     LCALL   L?0287
0203 FF                MOV     R7,A
0204         ?C0233:
                                           ; SOURCE LINE # 116
0204 020000      R     LJMP    ?C0236
0207         ?C0017:
                                           ; SOURCE LINE # 118
0207 120000      R     LCALL   L?0292
020A 7400        R     MOV     A,#HIGH ?SC_139
020C F0                MOVX    @DPTR,A
020D A3                INC     DPTR
020E 7400        R     MOV     A,#LOW ?SC_139
0210 120000      R     LCALL   L?0282
0213 120000      E     LCALL   _stricmp
0216 EF                MOV     A,R7
0217 4E                ORL     A,R6
0218 703F              JNZ     ?C0021
                                           ; SOURCE LINE # 121
021A 120000      R     LCALL   L?0312
021D 5008              JNC     ?C0022
                                           ; SOURCE LINE # 122
021F 900000      R     MOV     DPTR,#mod
0222 7405              MOV     A,#05H
0224 F0                MOVX    @DPTR,A
0225 800B              SJMP    ?C0023
0227         ?C0022:
                                           ; SOURCE LINE # 124
0227 900000      E     MOV     DPTR,#argv+06H
022A 120000      R     LCALL   L?0284
022D 120000      R     LCALL   L?0375
0230 EF                MOV     A,R7
0231 F0                MOVX    @DPTR,A
0232         ?C0023:
                                           ; SOURCE LINE # 126
0232 900000      R     MOV     DPTR,#mod
0235 E0                MOVX    A,@DPTR
0236 FF                MOV     R7,A
0237 120000      E     LCALL   _SPI_SetReadModeByRegister
                                           ; SOURCE LINE # 127
023A 7BFF              MOV     R3,#0FFH
023C 7A00        R     MOV     R2,#HIGH ?SC_145
023E 7900        R     MOV     R1,#LOW ?SC_145
0240 900000      R     MOV     DPTR,#mod
0243 E0                MOVX    A,@DPTR
0244 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0247 F0                MOVX    @DPTR,A
0248 E500        E     MOV     A,regTW88+01H
024A 24C0              ADD     A,#0C0H
024C 120000      R     LCALL   L?0279
024F E0                MOVX    A,@DPTR
0250 5407              ANL     A,#07H
0252 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 31  

0255 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
0256 020000      R     LJMP    ?C0239
0259         ?C0021:
                                           ; SOURCE LINE # 237
0259 120000      R     LCALL   L?0292
025C 7400        R     MOV     A,#HIGH ?SC_172
025E F0                MOVX    @DPTR,A
025F A3                INC     DPTR
0260 7400        R     MOV     A,#LOW ?SC_172
0262 120000      R     LCALL   L?0282
0265 120000      E     LCALL   _stricmp
0268 EF                MOV     A,R7
0269 4E                ORL     A,R6
026A 6003              JZ      $ + 5H
026C 020000      R     LJMP    ?C0025
                                           ; SOURCE LINE # 239
026F 900000      R     MOV     DPTR,#ptr
0272 04                INC     A
0273 F0                MOVX    @DPTR,A
0274 A3                INC     DPTR
0275 120000      R     LCALL   L?0326
                                           ; SOURCE LINE # 243
0278 120000      R     LCALL   L?0312
027B 5009              JNC     ?C0026
                                           ; SOURCE LINE # 244
027D         ?C0235:
027D 7BFF              MOV     R3,#0FFH
027F 7A00        R     MOV     R2,#HIGH ?SC_72
0281 7900        R     MOV     R1,#LOW ?SC_72
0283         ?C0237:
0283 020000      R     LJMP    ?C0239
                                           ; SOURCE LINE # 246
0286         ?C0026:
                                           ; SOURCE LINE # 247
0286 900000      E     MOV     DPTR,#argc
0289 E0                MOVX    A,@DPTR
028A D3                SETB    C
028B 9407              SUBB    A,#07H
028D 4009              JC      ?C0027
                                           ; SOURCE LINE # 248
028F 7BFF              MOV     R3,#0FFH
0291 7A00        R     MOV     R2,#HIGH ?SC_174
0293 7900        R     MOV     R1,#LOW ?SC_174
0295 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 249
0298         ?C0027:
                                           ; SOURCE LINE # 252
0298 900000      E     MOV     DPTR,#argv+06H
029B 120000      R     LCALL   L?0284
029E 120000      E     LCALL   _a2h
02A1 900000      R     MOV     DPTR,#spiaddr
02A4 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 258
02A7 7BFF              MOV     R3,#0FFH
02A9 7A00        R     MOV     R2,#HIGH ?SC_200
02AB 7900        R     MOV     R1,#LOW ?SC_200
02AD 900000      R     MOV     DPTR,#spiaddr
02B0 120000      R     LCALL   L?0287
02B3 120000      R     LCALL   L?0316
02B6 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 261
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 32  

02B9 900000      R     MOV     DPTR,#size
02BC 120000      E     LCALL   ?C?LSTKXDATA
02BF 00                DB      00H
02C0 00                DB      00H
02C1 00                DB      00H
02C2 00                DB      00H
                                           ; SOURCE LINE # 262
02C3 900000      R     MOV     DPTR,#i
02C6 7403              MOV     A,#03H
02C8 F0                MOVX    @DPTR,A
02C9         ?C0028:
02C9 900000      E     MOV     DPTR,#argc
02CC E0                MOVX    A,@DPTR
02CD FF                MOV     R7,A
02CE 900000      R     MOV     DPTR,#i
02D1 E0                MOVX    A,@DPTR
02D2 FE                MOV     R6,A
02D3 C3                CLR     C
02D4 9F                SUBB    A,R7
02D5 5058              JNC     ?C0029
                                           ; SOURCE LINE # 263
02D7 120000      R     LCALL   L?0329
02DA 120000      R     LCALL   L?0284
02DD 120000      E     LCALL   _a2h
02E0 900000      R     MOV     DPTR,#ptr
02E3 E0                MOVX    A,@DPTR
02E4 FB                MOV     R3,A
02E5 A3                INC     DPTR
02E6 E4                CLR     A
02E7 75F001            MOV     B,#01H
02EA 120000      E     LCALL   ?C?ILDIX
02ED A9F0              MOV     R1,B
02EF FA                MOV     R2,A
02F0 EF                MOV     A,R7
02F1 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 264
02F4 900000      R     MOV     DPTR,#i
02F7 E0                MOVX    A,@DPTR
02F8 75F003            MOV     B,#03H
02FB 120000      R     LCALL   L?0330
02FE 120000      R     LCALL   L?0284
0301 120000      E     LCALL   _a2h
0304 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0307 EF                MOV     A,R7
0308 F0                MOVX    @DPTR,A
0309 7BFF              MOV     R3,#0FFH
030B 7A00        R     MOV     R2,#HIGH ?SC_218
030D 7900        R     MOV     R1,#LOW ?SC_218
030F 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 265
0312 900000      R     MOV     DPTR,#size
0315 120000      R     LCALL   L?0287
0318 2401              ADD     A,#01H
031A FF                MOV     R7,A
031B E4                CLR     A
031C 3E                ADDC    A,R6
031D 120000      R     LCALL   L?0334
0320 900000      R     MOV     DPTR,#size
0323 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 266
0326 900000      R     MOV     DPTR,#i
0329 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 33  

032A 04                INC     A
032B F0                MOVX    @DPTR,A
032C 020000      R     LJMP    ?C0028
032F         ?C0029:
                                           ; SOURCE LINE # 267
032F 120000      R     LCALL   L?0325
0332 900000      R     MOV     DPTR,#size
0335 120000      R     LCALL   L?0321
0338 900000      E     MOV     DPTR,#?_SPI_PageProgram?BYTE+06H
033B CF                XCH     A,R7
033C F0                MOVX    @DPTR,A
033D A3                INC     DPTR
033E EF                MOV     A,R7
033F F0                MOVX    @DPTR,A
0340 900000      R     MOV     DPTR,#spiaddr
0343 120000      R     LCALL   L?0287
0346 FF                MOV     R7,A
0347         ?C0236:
0347 020000      E     LJMP    _SPI_PageProgram
                                           ; SOURCE LINE # 268
034A         ?C0025:
                                           ; SOURCE LINE # 271
034A 120000      R     LCALL   L?0292
034D 7400        R     MOV     A,#HIGH ?SC_226
034F F0                MOVX    @DPTR,A
0350 A3                INC     DPTR
0351 7400        R     MOV     A,#LOW ?SC_226
0353 120000      R     LCALL   L?0282
0356 120000      E     LCALL   _stricmp
0359 EF                MOV     A,R7
035A 4E                ORL     A,R6
035B 7BFF              MOV     R3,#0FFH
035D 7043              JNZ     ?C0032
                                           ; SOURCE LINE # 272
035F 7A00        R     MOV     R2,#HIGH ?SC_228
0361 7900        R     MOV     R1,#LOW ?SC_228
0363 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 273
0366 7A00        R     MOV     R2,#HIGH ?SC_261
0368 7900        R     MOV     R1,#LOW ?SC_261
                                           ; SOURCE LINE # 274
036A 120000      R     LCALL   L?0331
036D 7A00        R     MOV     R2,#HIGH ?SC_287
036F 7900        R     MOV     R1,#LOW ?SC_287
0371 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 275
0374 7A00        R     MOV     R2,#HIGH ?SC_321
0376 7900        R     MOV     R1,#LOW ?SC_321
                                           ; SOURCE LINE # 276
0378 120000      R     LCALL   L?0331
037B 7A00        R     MOV     R2,#HIGH ?SC_354
037D 7900        R     MOV     R1,#LOW ?SC_354
037F 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 278
0382 7BFF              MOV     R3,#0FFH
0384 7A00        R     MOV     R2,#HIGH ?SC_392
0386 7900        R     MOV     R1,#LOW ?SC_392
0388 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 279
038B 7BFF              MOV     R3,#0FFH
038D 7A00        R     MOV     R2,#HIGH ?SC_450
038F 7900        R     MOV     R1,#LOW ?SC_450
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 34  

0391 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 280
0394 7BFF              MOV     R3,#0FFH
0396 7A00        R     MOV     R2,#HIGH ?SC_485
0398 7900        R     MOV     R1,#LOW ?SC_485
039A 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 281
039D 120000      R     LCALL   L?0362
03A0         ?C0238:
                                           ; SOURCE LINE # 282
03A0 8004              SJMP    ?C0239
03A2         ?C0032:
                                           ; SOURCE LINE # 285
03A2 7A00        R     MOV     R2,#HIGH ?SC_514
03A4 7900        R     MOV     R1,#LOW ?SC_514
03A6         ?C0239:
03A6 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 286
03A9         ?C0019:
03A9 22                RET     
03AA         L?0331:
03AA 7BFF              MOV     R3,#0FFH
03AC 120000      E     LCALL   _Printf
03AF 7BFF              MOV     R3,#0FFH
03B1 22                RET     
03B2         L?0375:
03B2 120000      E     LCALL   _a2h
03B5 900000      R     MOV     DPTR,#source
03B8 22                RET     
             ; FUNCTION MonitorSPI (END)

             ; FUNCTION HelpMonitorSPIC (BEGIN)
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 301
0000 7A00        R     MOV     R2,#HIGH ?SC_534
0002 7900        R     MOV     R1,#LOW ?SC_534
                                           ; SOURCE LINE # 302
0004 120000      R     LCALL   L?0293
0007 7A00        R     MOV     R2,#HIGH ?SC_586
0009 7900        R     MOV     R1,#LOW ?SC_586
000B 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 303
000E 7A00        R     MOV     R2,#HIGH ?SC_637
0010 7900        R     MOV     R1,#LOW ?SC_637
                                           ; SOURCE LINE # 304
0012 120000      R     LCALL   L?0293
0015 7A00        R     MOV     R2,#HIGH ?SC_689
0017 7900        R     MOV     R1,#LOW ?SC_689
0019 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 305
001C 7A00        R     MOV     R2,#HIGH ?SC_748
001E 7900        R     MOV     R1,#LOW ?SC_748
                                           ; SOURCE LINE # 306
0020 120000      R     LCALL   L?0299
0023 7A00        R     MOV     R2,#HIGH ?SC_808
0025 7900        R     MOV     R1,#LOW ?SC_808
0027 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 307
002A 7A00        R     MOV     R2,#HIGH ?SC_868
002C 7900        R     MOV     R1,#LOW ?SC_868
                                           ; SOURCE LINE # 308
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 35  

002E 120000      R     LCALL   L?0299
0031 7A00        R     MOV     R2,#HIGH ?SC_925
0033 7900        R     MOV     R1,#LOW ?SC_925
0035 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 309
0038 7A00        R     MOV     R2,#HIGH ?SC_974
003A 7900        R     MOV     R1,#LOW ?SC_974
                                           ; SOURCE LINE # 310
003C 120000      R     LCALL   L?0305
003F 7A00        R     MOV     R2,#HIGH ?SC_1022
0041 7900        R     MOV     R1,#LOW ?SC_1022
0043 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 311
0046 7A00        R     MOV     R2,#HIGH ?SC_1106
0048 7900        R     MOV     R1,#LOW ?SC_1106
                                           ; SOURCE LINE # 312
004A 120000      R     LCALL   L?0305
004D 7A00        R     MOV     R2,#HIGH ?SC_1199
004F 7900        R     MOV     R1,#LOW ?SC_1199
0051 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 313
0054 7A00        R     MOV     R2,#HIGH ?SC_1287
0056 7900        R     MOV     R1,#LOW ?SC_1287
                                           ; SOURCE LINE # 314
0058 120000      R     LCALL   L?0339
005B 7A00        R     MOV     R2,#HIGH ?SC_1358
005D 7900        R     MOV     R1,#LOW ?SC_1358
005F 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 315
0062 7A00        R     MOV     R2,#HIGH ?SC_1439
0064 7900        R     MOV     R1,#LOW ?SC_1439
                                           ; SOURCE LINE # 316
0066 120000      R     LCALL   L?0339
0069 7A00        R     MOV     R2,#HIGH ?SC_1518
006B 7900        R     MOV     R1,#LOW ?SC_1518
006D 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 317
0070 7BFF              MOV     R3,#0FFH
0072 7A00        R     MOV     R2,#HIGH ?SC_1589
0074 7900        R     MOV     R1,#LOW ?SC_1589
0076 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 318
0079 7BFF              MOV     R3,#0FFH
007B 7A00        R     MOV     R2,#HIGH ?SC_1664
007D 7900        R     MOV     R1,#LOW ?SC_1664
007F 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 320
0082 120000      R     LCALL   L?0362
0085 020000      E     LJMP    _Printf
                                           ; SOURCE LINE # 321
0088         L?0293:
0088 7BFF              MOV     R3,#0FFH
008A 120000      E     LCALL   _Printf
008D 7BFF              MOV     R3,#0FFH
008F 22                RET     
0090         L?0299:
0090 7BFF              MOV     R3,#0FFH
0092 120000      E     LCALL   _Printf
0095 7BFF              MOV     R3,#0FFH
0097 22                RET     
0098         L?0305:
0098 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 36  

009A 120000      E     LCALL   _Printf
009D 7BFF              MOV     R3,#0FFH
009F 22                RET     
00A0         L?0339:
00A0 7BFF              MOV     R3,#0FFH
00A2 120000      E     LCALL   _Printf
00A5 7BFF              MOV     R3,#0FFH
00A7 22                RET     
             ; FUNCTION HelpMonitorSPIC (END)

             ; FUNCTION MonitorSPIC (BEGIN)
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 332
0000 900000      E     MOV     DPTR,#argc
0003 E0                MOVX    A,@DPTR
0004 C3                CLR     C
0005 9402              SUBB    A,#02H
0007 5003              JNC     ?C0035
                                           ; SOURCE LINE # 333
0009 020000      R     LJMP    HelpMonitorSPIC
                                           ; SOURCE LINE # 335
000C         ?C0035:
                                           ; SOURCE LINE # 339
000C 120000      R     LCALL   L?0283
000F 120000      E     LCALL   _a2h
0012 900000      R     MOV     DPTR,#cmd
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 340
0017 649F              XRL     A,#09FH
0019 6003              JZ      $ + 5H
001B 020000      R     LJMP    ?C0037
                                           ; SOURCE LINE # 341
001E 7BFF              MOV     R3,#0FFH
0020 7A00        R     MOV     R2,#HIGH ?SC_1740
0022 7900        R     MOV     R1,#LOW ?SC_1740
0024 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 342
0027 E500        E     MOV     A,regTW88+01H
0029 24C3              ADD     A,#0C3H
002B 120000      R     LCALL   L?0279
002E 7441              MOV     A,#041H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 343
0031 E500        E     MOV     A,regTW88+01H
0033 24CA              ADD     A,#0CAH
0035 120000      R     LCALL   L?0279
0038 749F              MOV     A,#09FH
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
003A 120000      R     LCALL   L?0276
                                           ; SOURCE LINE # 348
003D 120000      R     LCALL   L?0342
0040 120000      R     LCALL   L?0279
0043 7403              MOV     A,#03H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
0046 120000      R     LCALL   L?0376
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 37  

0049 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 352
004C 120000      R     LCALL   L?0302
004F         ?C0038:
                                           ; SOURCE LINE # 353
004F E500        E     MOV     A,regTW88+01H
0051 24C4              ADD     A,#0C4H
0053 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 354
0056 120000      R     LCALL   L?0318
0059 30E009            JNB     ACC.0,?C0039
                                           ; SOURCE LINE # 355
005C         ?C0041:
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
005C 120000      R     LCALL   L?0288
005F E0                MOVX    A,@DPTR
0060 C3                CLR     C
0061 94C8              SUBB    A,#0C8H
0063 40EA              JC      ?C0038
0065         ?C0039:
                                           ; SOURCE LINE # 358
0065 7A00        R     MOV     R2,#HIGH ?SC_1754
0067 7900        R     MOV     R1,#LOW ?SC_1754
0069 120000      R     LCALL   L?0358
006C 120000      R     LCALL   L?0323
006F 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 360
0072 E500        E     MOV     A,regTW88+01H
0074 24D0              ADD     A,#0D0H
0076 120000      R     LCALL   L?0279
0079 E0                MOVX    A,@DPTR
007A 900000      R     MOV     DPTR,#dat0
                                           ; SOURCE LINE # 361
007D 120000      R     LCALL   L?0348
0080 120000      R     LCALL   L?0279
0083 E0                MOVX    A,@DPTR
0084 FE                MOV     R6,A
0085 900000      R     MOV     DPTR,#dat1
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 362
0089 E500        E     MOV     A,regTW88+01H
008B 24D2              ADD     A,#0D2H
008D 120000      R     LCALL   L?0279
0090 E0                MOVX    A,@DPTR
0091 FD                MOV     R5,A
0092 900000      R     MOV     DPTR,#dat2
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
0096 7A00        R     MOV     R2,#HIGH ?SC_1774
0098 7900        R     MOV     R1,#LOW ?SC_1774
009A 120000      R     LCALL   L?0344
009D A3                INC     DPTR
009E ED                MOV     A,R5
009F F0                MOVX    @DPTR,A
00A0 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 364
00A3 900000      R     MOV     DPTR,#dat0
00A6 E0                MOVX    A,@DPTR
00A7 24E0              ADD     A,#0E0H
00A9 6024              JZ      ?C0046
00AB 245E              ADD     A,#05EH
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 38  

00AD 6010              JZ      ?C0044
00AF 24D3              ADD     A,#0D3H
00B1 6014              JZ      ?C0045
00B3 24D3              ADD     A,#0D3H
00B5 7020              JNZ     ?C0047
                                           ; SOURCE LINE # 365
00B7         ?C0043:
00B7 7BFF              MOV     R3,#0FFH
00B9 7A00        R     MOV     R2,#HIGH ?SC_1792
00BB 7900        R     MOV     R1,#LOW ?SC_1792
00BD 801E              SJMP    ?C0246
                                           ; SOURCE LINE # 366
00BF         ?C0044:
00BF 7BFF              MOV     R3,#0FFH
00C1 7A00        R     MOV     R2,#HIGH ?SC_1797
00C3 7900        R     MOV     R1,#LOW ?SC_1797
00C5         ?C0243:
00C5 8016              SJMP    ?C0246
                                           ; SOURCE LINE # 367
00C7         ?C0045:
00C7 7BFF              MOV     R3,#0FFH
00C9 7A00        R     MOV     R2,#HIGH ?SC_1801
00CB 7900        R     MOV     R1,#LOW ?SC_1801
00CD         ?C0244:
00CD 800E              SJMP    ?C0246
                                           ; SOURCE LINE # 368
00CF         ?C0046:
00CF 7BFF              MOV     R3,#0FFH
00D1 7A00        R     MOV     R2,#HIGH ?SC_1805
00D3 7900        R     MOV     R1,#LOW ?SC_1805
00D5         ?C0245:
00D5 8006              SJMP    ?C0246
                                           ; SOURCE LINE # 369
00D7         ?C0047:
00D7 7BFF              MOV     R3,#0FFH
00D9 7A00        R     MOV     R2,#HIGH ?SC_1813
00DB 7900        R     MOV     R1,#LOW ?SC_1813
00DD         ?C0246:
00DD 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 370
00E0         ?C0042:
                                           ; SOURCE LINE # 371
00E0 900000      R     MOV     DPTR,#dat2
00E3 E0                MOVX    A,@DPTR
00E4 6418              XRL     A,#018H
00E6 6003              JZ      $ + 5H
00E8 020000      R     LJMP    ?C0036
00EB 7BFF              MOV     R3,#0FFH
00ED 7A00        R     MOV     R2,#HIGH ?SC_1822
00EF 7900        R     MOV     R1,#LOW ?SC_1822
                                           ; SOURCE LINE # 372
00F1 020000      R     LJMP    ?C0251
00F4         ?C0037:
                                           ; SOURCE LINE # 373
00F4 900000      R     MOV     DPTR,#cmd
00F7 E0                MOVX    A,@DPTR
00F8 FF                MOV     R7,A
00F9 6406              XRL     A,#06H
00FB 6005              JZ      ?C0051
00FD EF                MOV     A,R7
00FE 6404              XRL     A,#04H
0100 706E              JNZ     ?C0050
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 39  

0102         ?C0051:
                                           ; SOURCE LINE # 374
0102 E500        E     MOV     A,regTW88+01H
0104 24C3              ADD     A,#0C3H
0106 120000      R     LCALL   L?0279
0109 7441              MOV     A,#041H
010B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
010C 900000      R     MOV     DPTR,#cmd
010F E0                MOVX    A,@DPTR
0110 B4040C            CJNE    A,#04H,?C0052
                                           ; SOURCE LINE # 376
0113 E500        E     MOV     A,regTW88+01H
0115 24CA              ADD     A,#0CAH
0117 120000      R     LCALL   L?0279
011A 7404              MOV     A,#04H
011C F0                MOVX    @DPTR,A
011D 800A              SJMP    ?C0053
011F         ?C0052:
                                           ; SOURCE LINE # 378
011F E500        E     MOV     A,regTW88+01H
0121 24CA              ADD     A,#0CAH
0123 120000      R     LCALL   L?0279
0126 7406              MOV     A,#06H
0128 F0                MOVX    @DPTR,A
0129         ?C0053:
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 382
0129 120000      R     LCALL   L?0277
                                           ; SOURCE LINE # 383
012C 120000      R     LCALL   L?0342
012F 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
0132 120000      R     LCALL   L?0294
0135 120000      R     LCALL   L?0279
0138 7403              MOV     A,#03H
                                           ; SOURCE LINE # 387
013A 120000      R     LCALL   L?0304
013D         ?C0054:
                                           ; SOURCE LINE # 388
013D E500        E     MOV     A,regTW88+01H
013F 24C4              ADD     A,#0C4H
0141 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 389
0144 120000      R     LCALL   L?0318
0147 30E009            JNB     ACC.0,?C0055
                                           ; SOURCE LINE # 390
014A         ?C0057:
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
014A 120000      R     LCALL   L?0288
014D E0                MOVX    A,@DPTR
014E C3                CLR     C
014F 94C8              SUBB    A,#0C8H
0151 40EA              JC      ?C0054
0153         ?C0055:
                                           ; SOURCE LINE # 393
0153 120000      R     LCALL   L?0364
0156 B40406            CJNE    A,#04H,?C0058
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 40  

0159 7A00        R     MOV     R2,#HIGH ?SC_1826
015B 7900        R     MOV     R1,#LOW ?SC_1826
015D 8004              SJMP    ?C0248
015F         ?C0058:
                                           ; SOURCE LINE # 394
015F 7A00        R     MOV     R2,#HIGH ?SC_1833
0161 7900        R     MOV     R1,#LOW ?SC_1833
0163         ?C0248:
0163 120000      E     LCALL   _Puts
0166         ?C0059:
                                           ; SOURCE LINE # 395
0166 7A00        R     MOV     R2,#HIGH ?SC_1840
0168 7900        R     MOV     R1,#LOW ?SC_1840
016A 120000      R     LCALL   L?0358
                                           ; SOURCE LINE # 396
016D 020000      R     LJMP    ?C0256
0170         ?C0050:
                                           ; SOURCE LINE # 397
0170 900000      R     MOV     DPTR,#cmd
0173 E0                MOVX    A,@DPTR
0174 FF                MOV     R7,A
0175 6405              XRL     A,#05H
0177 6008              JZ      ?C0062
0179 EF                MOV     A,R7
017A 6435              XRL     A,#035H
017C 6003              JZ      $ + 5H
017E 020000      R     LJMP    ?C0061
0181         ?C0062:
                                           ; SOURCE LINE # 398
0181 E500        E     MOV     A,regTW88+01H
0183 24C3              ADD     A,#0C3H
0185 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 399
0188 120000      R     LCALL   L?0337
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 403
018B 120000      R     LCALL   L?0275
                                           ; SOURCE LINE # 404
018E 120000      R     LCALL   L?0343
0191 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
0194 120000      R     LCALL   L?0340
0197 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 408
019A 120000      R     LCALL   L?0302
019D         ?C0063:
                                           ; SOURCE LINE # 409
019D E500        E     MOV     A,regTW88+01H
019F 24C4              ADD     A,#0C4H
01A1 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 410
01A4 120000      R     LCALL   L?0319
01A7 30E009            JNB     ACC.0,?C0064
                                           ; SOURCE LINE # 411
01AA         ?C0066:
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 413
01AA 120000      R     LCALL   L?0289
01AD E0                MOVX    A,@DPTR
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 41  

01AE C3                CLR     C
01AF 94C8              SUBB    A,#0C8H
01B1 40EA              JC      ?C0063
01B3         ?C0064:
                                           ; SOURCE LINE # 414
01B3 E500        E     MOV     A,regTW88+01H
01B5 24D0              ADD     A,#0D0H
01B7 120000      R     LCALL   L?0279
01BA E0                MOVX    A,@DPTR
01BB 900000      R     MOV     DPTR,#dat0
01BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
01BF 900000      R     MOV     DPTR,#cmd
01C2 E0                MOVX    A,@DPTR
01C3 6435              XRL     A,#035H
01C5 7016              JNZ     ?C0067
                                           ; SOURCE LINE # 416
01C7 7A00        R     MOV     R2,#HIGH ?SC_1862
01C9 7900        R     MOV     R1,#LOW ?SC_1862
                                           ; SOURCE LINE # 417
01CB 120000      R     LCALL   L?0290
                                           ; SOURCE LINE # 418
01CE 120000      R     LCALL   L?0327
01D1 20E103            JB      ACC.1,$ + 6H
01D4 020000      R     LJMP    ?C0036
01D7 120000      R     LCALL   L?0366
01DA         ?C0247:
                                           ; SOURCE LINE # 419
01DA 020000      R     LJMP    ?C0251
01DD         ?C0067:
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
01DD 7A00        R     MOV     R2,#HIGH ?SC_1876
01DF 7900        R     MOV     R1,#LOW ?SC_1876
                                           ; SOURCE LINE # 422
01E1 120000      R     LCALL   L?0290
                                           ; SOURCE LINE # 423
01E4 120000      R     LCALL   L?0327
01E7 30E606            JNB     ACC.6,?C0070
01EA 120000      R     LCALL   L?0366
01ED 120000      E     LCALL   _Puts
01F0         ?C0070:
                                           ; SOURCE LINE # 424
01F0 900000      R     MOV     DPTR,#dat0
01F3 E0                MOVX    A,@DPTR
01F4 30E103            JNB     ACC.1,?C0071
01F7 120000      R     LCALL   L?0377
01FA         ?C0071:
                                           ; SOURCE LINE # 425
01FA 900000      R     MOV     DPTR,#dat0
01FD E0                MOVX    A,@DPTR
01FE 20E003            JB      ACC.0,$ + 6H
0201 020000      R     LJMP    ?C0036
0204 7BFF              MOV     R3,#0FFH
0206 7A00        R     MOV     R2,#HIGH ?SC_1888
0208 7900        R     MOV     R1,#LOW ?SC_1888
020A         ?C0250:
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
020A 020000      R     LJMP    ?C0251
020D         ?C0061:
                                           ; SOURCE LINE # 428
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 42  

020D 900000      R     MOV     DPTR,#cmd
0210 E0                MOVX    A,@DPTR
0211 6401              XRL     A,#01H
0213 7073              JNZ     ?C0074
                                           ; SOURCE LINE # 429
0215 120000      R     LCALL   L?0335
0218 5003              JNC     ?C0075
                                           ; SOURCE LINE # 430
021A 020000      R     LJMP    ?C0260
                                           ; SOURCE LINE # 432
021D         ?C0075:
                                           ; SOURCE LINE # 433
021D 900000      E     MOV     DPTR,#argv+06H
0220 120000      R     LCALL   L?0284
0223 120000      R     LCALL   L?0345
                                           ; SOURCE LINE # 434
0226 900000      E     MOV     DPTR,#argv+09H
0229 120000      R     LCALL   L?0284
022C 120000      E     LCALL   _a2h
022F 900000      R     MOV     DPTR,#dat1
0232 EF                MOV     A,R7
0233 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 435
0234 E500        E     MOV     A,regTW88+01H
0236 24C3              ADD     A,#0C3H
0238 120000      R     LCALL   L?0279
023B 7443              MOV     A,#043H
023D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 436
023E E500        E     MOV     A,regTW88+01H
0240 24CA              ADD     A,#0CAH
0242 120000      R     LCALL   L?0279
0245 7401              MOV     A,#01H
                                           ; SOURCE LINE # 437
0247 120000      R     LCALL   L?0360
024A 120000      R     LCALL   L?0279
024D EE                MOV     A,R6
024E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
024F E500        E     MOV     A,regTW88+01H
0251 24CC              ADD     A,#0CCH
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 440
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 442
0253 120000      R     LCALL   L?0275
                                           ; SOURCE LINE # 443
0256 120000      R     LCALL   L?0343
0259 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
025C 120000      R     LCALL   L?0294
025F 120000      R     LCALL   L?0279
0262 7407              MOV     A,#07H
                                           ; SOURCE LINE # 447
0264 120000      R     LCALL   L?0304
0267         ?C0076:
0267 120000      R     LCALL   L?0306
026A 5012              JNC     ?C0077
                                           ; SOURCE LINE # 448
026C E500        E     MOV     A,regTW88+01H
026E 24C4              ADD     A,#0C4H
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 43  

0270 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 449
0273 120000      R     LCALL   L?0319
0276 30E005            JNB     ACC.0,?C0077
                                           ; SOURCE LINE # 450
0279         ?C0079:
                                           ; SOURCE LINE # 451
                                           ; SOURCE LINE # 452
0279 120000      R     LCALL   L?0289
027C 80E9              SJMP    ?C0076
027E         ?C0077:
                                           ; SOURCE LINE # 453
027E 7A00        R     MOV     R2,#HIGH ?SC_1893
0280 7900        R     MOV     R1,#LOW ?SC_1893
0282 120000      R     LCALL   L?0368
0285         ?C0249:
                                           ; SOURCE LINE # 454
0285 020000      R     LJMP    ?C0256
0288         ?C0074:
                                           ; SOURCE LINE # 455
0288 900000      R     MOV     DPTR,#cmd
028B E0                MOVX    A,@DPTR
028C 6402              XRL     A,#02H
028E 6003              JZ      $ + 5H
0290 020000      R     LJMP    ?C0081
                                           ; SOURCE LINE # 456
0293 120000      R     LCALL   L?0336
0296 5003              JNC     ?C0082
                                           ; SOURCE LINE # 457
0298         ?C0252:
0298 020000      R     LJMP    ?C0260
                                           ; SOURCE LINE # 459
029B         ?C0082:
                                           ; SOURCE LINE # 460
029B 900000      E     MOV     DPTR,#argc
029E E0                MOVX    A,@DPTR
029F D3                SETB    C
02A0 940B              SUBB    A,#0BH
02A2 400F              JC      ?C0083
                                           ; SOURCE LINE # 461
02A4 7BFF              MOV     R3,#0FFH
02A6 7A00        R     MOV     R2,#HIGH ?SC_1918
02A8 7900        R     MOV     R1,#LOW ?SC_1918
02AA 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 462
02AD 900000      E     MOV     DPTR,#argc
02B0 740B              MOV     A,#0BH
02B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
02B3         ?C0083:
                                           ; SOURCE LINE # 464
02B3 900000      E     MOV     DPTR,#argv+06H
02B6 120000      R     LCALL   L?0284
02B9 120000      R     LCALL   L?0351
                                           ; SOURCE LINE # 465
02BC 7A00        R     MOV     R2,#HIGH ?SC_1944
02BE 7900        R     MOV     R1,#LOW ?SC_1944
02C0 120000      R     LCALL   L?0285
02C3 120000      R     LCALL   L?0316
02C6 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 467
02C9 900000      R     MOV     DPTR,#i
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 44  

02CC 7403              MOV     A,#03H
02CE F0                MOVX    @DPTR,A
02CF E4                CLR     A
02D0 A3                INC     DPTR
02D1 F0                MOVX    @DPTR,A
02D2         ?C0084:
02D2 900000      E     MOV     DPTR,#argc
02D5 120000      R     LCALL   L?0369
02D8 503B              JNC     ?C0085
                                           ; SOURCE LINE # 468
02DA 120000      R     LCALL   L?0329
02DD 120000      R     LCALL   L?0284
02E0 120000      R     LCALL   L?0345
                                           ; SOURCE LINE # 469
02E3 7A00        R     MOV     R2,#HIGH ?SC_1955
02E5 7900        R     MOV     R1,#LOW ?SC_1955
02E7 120000      R     LCALL   L?0309
02EA 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 470
02ED 900000      R     MOV     DPTR,#dat0
02F0 E0                MOVX    A,@DPTR
02F1 FF                MOV     R7,A
02F2 900000      R     MOV     DPTR,#cnt
02F5 E0                MOVX    A,@DPTR
02F6 24D0              ADD     A,#0D0H
02F8 FD                MOV     R5,A
02F9 E4                CLR     A
02FA 3404              ADDC    A,#04H
02FC FC                MOV     R4,A
02FD E500        E     MOV     A,regTW88+01H
02FF 2D                ADD     A,R5
0300 F582              MOV     DPL,A
0302 E500        E     MOV     A,regTW88
0304 3C                ADDC    A,R4
0305 F583              MOV     DPH,A
0307 EF                MOV     A,R7
0308 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 471
0309 900000      R     MOV     DPTR,#i
030C E0                MOVX    A,@DPTR
030D 04                INC     A
030E F0                MOVX    @DPTR,A
030F A3                INC     DPTR
0310 E0                MOVX    A,@DPTR
0311 04                INC     A
0312 F0                MOVX    @DPTR,A
0313 80BD              SJMP    ?C0084
0315         ?C0085:
                                           ; SOURCE LINE # 472
0315 E500        E     MOV     A,regTW88+01H
0317 24C3              ADD     A,#0C3H
0319 120000      R     LCALL   L?0279
031C 7444              MOV     A,#044H
031E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
031F E500        E     MOV     A,regTW88+01H
0321 24CA              ADD     A,#0CAH
0323 120000      R     LCALL   L?0279
0326 7402              MOV     A,#02H
0328 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 45  

                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
0329 120000      R     LCALL   L?0274
                                           ; SOURCE LINE # 481
032C 120000      R     LCALL   L?0359
032F 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
0332 120000      R     LCALL   L?0300
0335 120000      R     LCALL   L?0279
0338 7407              MOV     A,#07H
                                           ; SOURCE LINE # 485
033A 120000      R     LCALL   L?0304
033D         ?C0087:
033D 120000      R     LCALL   L?0306
0340 5012              JNC     ?C0088
                                           ; SOURCE LINE # 486
0342 E500        E     MOV     A,regTW88+01H
0344 24C4              ADD     A,#0C4H
0346 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 487
0349 120000      R     LCALL   L?0319
034C 30E005            JNB     ACC.0,?C0088
                                           ; SOURCE LINE # 488
034F         ?C0090:
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
034F 120000      R     LCALL   L?0296
0352 80E9              SJMP    ?C0087
0354         ?C0088:
                                           ; SOURCE LINE # 491
0354 120000      R     LCALL   L?0295
                                           ; SOURCE LINE # 493
0357 E500        E     MOV     A,regTW88+01H
0359 24C3              ADD     A,#0C3H
035B 120000      R     LCALL   L?0279
035E 7441              MOV     A,#041H
0360 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 494
0361 E500        E     MOV     A,regTW88+01H
0363 24CA              ADD     A,#0CAH
0365 120000      R     LCALL   L?0279
0368 7405              MOV     A,#05H
036A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 495
036B E500        E     MOV     A,regTW88+01H
036D 24C6              ADD     A,#0C6H
036F 120000      R     LCALL   L?0279
0372 7404              MOV     A,#04H
0374 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 496
0375 E500        E     MOV     A,regTW88+01H
0377 24C7              ADD     A,#0C7H
0379 120000      R     LCALL   L?0279
037C 74D0              MOV     A,#0D0H
037E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 497
037F E500        E     MOV     A,regTW88+01H
0381 24C9              ADD     A,#0C9H
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 46  

0383 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
0386 120000      R     LCALL   L?0340
0389 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 500
038C 120000      R     LCALL   L?0303
038F         ?C0091:
038F 120000      R     LCALL   L?0307
0392 5012              JNC     ?C0092
                                           ; SOURCE LINE # 501
0394 E500        E     MOV     A,regTW88+01H
0396 24D0              ADD     A,#0D0H
0398 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 502
039B 120000      R     LCALL   L?0319
039E 30E005            JNB     ACC.0,?C0092
                                           ; SOURCE LINE # 503
03A1         ?C0094:
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
03A1 120000      R     LCALL   L?0296
03A4 80E9              SJMP    ?C0091
03A6         ?C0092:
                                           ; SOURCE LINE # 506
03A6 7A00        R     MOV     R2,#HIGH ?SC_1981
03A8 7900        R     MOV     R1,#LOW ?SC_1981
03AA 120000      R     LCALL   L?0322
03AD 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 507
03B0 900000      R     MOV     DPTR,#vdata
03B3 E0                MOVX    A,@DPTR
03B4 30E606            JNB     ACC.6,?C0095
03B7 120000      R     LCALL   L?0367
03BA 120000      E     LCALL   _Puts
03BD         ?C0095:
                                           ; SOURCE LINE # 508
03BD 900000      R     MOV     DPTR,#vdata
03C0 E0                MOVX    A,@DPTR
03C1 30E103            JNB     ACC.1,?C0096
03C4 120000      R     LCALL   L?0377
03C7         ?C0096:
                                           ; SOURCE LINE # 509
03C7 900000      R     MOV     DPTR,#vdata
03CA E0                MOVX    A,@DPTR
03CB 20E003            JB      ACC.0,$ + 6H
03CE 020000      R     LJMP    ?C0036
03D1 7BFF              MOV     R3,#0FFH
03D3 7A00        R     MOV     R2,#HIGH ?SC_1888
03D5 7900        R     MOV     R1,#LOW ?SC_1888
03D7         ?C0251:
03D7 020000      E     LJMP    _Puts
                                           ; SOURCE LINE # 513
03DA         ?C0081:
                                           ; SOURCE LINE # 514
03DA 900000      R     MOV     DPTR,#cmd
03DD E0                MOVX    A,@DPTR
03DE FF                MOV     R7,A
03DF 6420              XRL     A,#020H
03E1 6008              JZ      ?C0100
03E3 EF                MOV     A,R7
03E4 64D8              XRL     A,#0D8H
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 47  

03E6 6003              JZ      $ + 5H
03E8 020000      R     LJMP    ?C0099
03EB         ?C0100:
                                           ; SOURCE LINE # 515
03EB 120000      R     LCALL   L?0312
03EE 5003              JNC     ?C0101
                                           ; SOURCE LINE # 516
03F0         ?C0254:
03F0 020000      R     LJMP    ?C0260
                                           ; SOURCE LINE # 518
03F3         ?C0101:
                                           ; SOURCE LINE # 519
03F3 900000      E     MOV     DPTR,#argv+06H
03F6 120000      R     LCALL   L?0284
03F9 120000      R     LCALL   L?0351
                                           ; SOURCE LINE # 520
03FC 7E00              MOV     R6,#00H
03FE 7F01              MOV     R7,#01H
0400         ?C0104:
0400 EF                MOV     A,R7
0401 64D8              XRL     A,#0D8H
0403 4E                ORL     A,R6
0404 7BFF              MOV     R3,#0FFH
0406 7006              JNZ     ?C0102
                                           ; SOURCE LINE # 521
0408 7A00        R     MOV     R2,#HIGH ?SC_1993
040A 7900        R     MOV     R1,#LOW ?SC_1993
040C 8004              SJMP    ?C0240
040E         ?C0102:
                                           ; SOURCE LINE # 523
040E 7A00        R     MOV     R2,#HIGH ?SC_2004
0410 7900        R     MOV     R1,#LOW ?SC_2004
0412         ?C0240:
0412 120000      R     LCALL   L?0286
0415 120000      R     LCALL   L?0316
0418 120000      E     LCALL   _Printf
041B         ?C0105:
                                           ; SOURCE LINE # 525
041B E500        E     MOV     A,regTW88+01H
041D 24C3              ADD     A,#0C3H
041F 120000      R     LCALL   L?0279
0422 7444              MOV     A,#044H
0424 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
0425 900000      R     MOV     DPTR,#cmd
0428 E0                MOVX    A,@DPTR
0429 B4D80C            CJNE    A,#0D8H,?C0106
                                           ; SOURCE LINE # 527
042C E500        E     MOV     A,regTW88+01H
042E 24CA              ADD     A,#0CAH
0430 120000      R     LCALL   L?0279
0433 74D8              MOV     A,#0D8H
0435 F0                MOVX    @DPTR,A
0436 800A              SJMP    ?C0107
0438         ?C0106:
                                           ; SOURCE LINE # 529
0438 E500        E     MOV     A,regTW88+01H
043A 24CA              ADD     A,#0CAH
043C 120000      R     LCALL   L?0279
043F 7420              MOV     A,#020H
0441 F0                MOVX    @DPTR,A
0442         ?C0107:
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 48  

                                           ; SOURCE LINE # 530
0442 120000      R     LCALL   L?0286
0445 FF                MOV     R7,A
0446 7810              MOV     R0,#010H
0448 120000      E     LCALL   ?C?ULSHR
044B E500        E     MOV     A,regTW88+01H
044D 24CB              ADD     A,#0CBH
044F 120000      R     LCALL   L?0279
0452 EF                MOV     A,R7
0453 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 531
0454 120000      R     LCALL   L?0286
0457 FF                MOV     R7,A
0458 7808              MOV     R0,#08H
045A 120000      E     LCALL   ?C?ULSHR
045D E500        E     MOV     A,regTW88+01H
045F 24CC              ADD     A,#0CCH
0461 120000      R     LCALL   L?0279
0464 EF                MOV     A,R7
0465 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 532
0466 900000      R     MOV     DPTR,#spiaddr
0469 A3                INC     DPTR
046A A3                INC     DPTR
046B A3                INC     DPTR
046C E0                MOVX    A,@DPTR
046D FF                MOV     R7,A
046E E500        E     MOV     A,regTW88+01H
0470 24CD              ADD     A,#0CDH
0472 120000      R     LCALL   L?0279
0475 EF                MOV     A,R7
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
0476 120000      R     LCALL   L?0278
                                           ; SOURCE LINE # 535
0479 120000      R     LCALL   L?0343
047C 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 536
                                           ; SOURCE LINE # 537
047F 120000      R     LCALL   L?0310
0482 120000      R     LCALL   L?0279
0485 7407              MOV     A,#07H
                                           ; SOURCE LINE # 539
0487 120000      R     LCALL   L?0304
048A         ?C0108:
048A 120000      R     LCALL   L?0307
048D 5012              JNC     ?C0109
                                           ; SOURCE LINE # 540
048F E500        E     MOV     A,regTW88+01H
0491 24C4              ADD     A,#0C4H
0493 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 541
0496 120000      R     LCALL   L?0319
0499 30E005            JNB     ACC.0,?C0109
                                           ; SOURCE LINE # 542
049C         ?C0111:
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
049C 120000      R     LCALL   L?0301
049F 80E9              SJMP    ?C0108
04A1         ?C0109:
                                           ; SOURCE LINE # 545
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 49  

04A1 7A00        R     MOV     R2,#HIGH ?SC_1962
04A3 7900        R     MOV     R1,#LOW ?SC_1962
04A5 120000      R     LCALL   L?0368
04A8         ?C0253:
                                           ; SOURCE LINE # 546
04A8 020000      R     LJMP    ?C0256
04AB         ?C0099:
                                           ; SOURCE LINE # 547
04AB 900000      R     MOV     DPTR,#cmd
04AE E0                MOVX    A,@DPTR
04AF FF                MOV     R7,A
04B0 6403              XRL     A,#03H
04B2 600D              JZ      ?C0114
04B4 EF                MOV     A,R7
04B5 640B              XRL     A,#0BH
04B7 6008              JZ      ?C0114
04B9 EF                MOV     A,R7
04BA 64EB              XRL     A,#0EBH
04BC 6003              JZ      $ + 5H
04BE 020000      R     LJMP    ?C0113
04C1         ?C0114:
                                           ; SOURCE LINE # 548
04C1 120000      R     LCALL   L?0312
04C4 5003              JNC     ?C0115
                                           ; SOURCE LINE # 549
04C6         ?C0255:
04C6 020000      R     LJMP    ?C0260
                                           ; SOURCE LINE # 551
04C9         ?C0115:
                                           ; SOURCE LINE # 552
04C9 E500        E     MOV     A,regTW88+01H
04CB 24C0              ADD     A,#0C0H
04CD 120000      R     LCALL   L?0279
04D0 E0                MOVX    A,@DPTR
04D1 5407              ANL     A,#07H
04D3 900000      R     MOV     DPTR,#dat0
04D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 553
04D7 900000      R     MOV     DPTR,#cmd
04DA E0                MOVX    A,@DPTR
04DB FE                MOV     R6,A
04DC 640B              XRL     A,#0BH
04DE 701A              JNZ     ?C0116
                                           ; SOURCE LINE # 554
04E0 7A00        R     MOV     R2,#HIGH ?SC_2015
04E2 7900        R     MOV     R1,#LOW ?SC_2015
                                           ; SOURCE LINE # 555
04E4 120000      R     LCALL   L?0352
04E7 6401              XRL     A,#01H
04E9 604F              JZ      ?C0118
                                           ; SOURCE LINE # 556
04EB 7A00        R     MOV     R2,#HIGH ?SC_2023
04ED 7900        R     MOV     R1,#LOW ?SC_2023
                                           ; SOURCE LINE # 557
04EF 120000      R     LCALL   L?0353
04F2 120000      R     LCALL   L?0279
04F5 7401              MOV     A,#01H
04F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 558
                                           ; SOURCE LINE # 559
04F8 8040              SJMP    ?C0118
04FA         ?C0116:
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 50  

                                           ; SOURCE LINE # 560
04FA EE                MOV     A,R6
04FB 64EB              XRL     A,#0EBH
04FD 701A              JNZ     ?C0119
                                           ; SOURCE LINE # 561
04FF 7A00        R     MOV     R2,#HIGH ?SC_2043
0501 7900        R     MOV     R1,#LOW ?SC_2043
                                           ; SOURCE LINE # 562
0503 120000      R     LCALL   L?0352
0506 6405              XRL     A,#05H
0508 6030              JZ      ?C0118
                                           ; SOURCE LINE # 563
050A 7A00        R     MOV     R2,#HIGH ?SC_2051
050C 7900        R     MOV     R1,#LOW ?SC_2051
                                           ; SOURCE LINE # 564
050E 120000      R     LCALL   L?0353
0511 120000      R     LCALL   L?0279
0514 7405              MOV     A,#05H
0516 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 566
0517 8021              SJMP    ?C0118
0519         ?C0119:
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
0519 7BFF              MOV     R3,#0FFH
051B 7A00        R     MOV     R2,#HIGH ?SC_2071
051D 7900        R     MOV     R1,#LOW ?SC_2071
051F 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 569
0522 900000      R     MOV     DPTR,#dat0
0525 E0                MOVX    A,@DPTR
0526 6012              JZ      ?C0118
                                           ; SOURCE LINE # 570
0528 7BFF              MOV     R3,#0FFH
052A 7A00        R     MOV     R2,#HIGH ?SC_2077
052C 7900        R     MOV     R1,#LOW ?SC_2077
052E 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 571
0531 E500        E     MOV     A,regTW88+01H
0533 24C0              ADD     A,#0C0H
0535 120000      R     LCALL   L?0279
0538 E4                CLR     A
0539 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 573
053A         ?C0118:
                                           ; SOURCE LINE # 574
053A 900000      E     MOV     DPTR,#argv+06H
053D 120000      R     LCALL   L?0284
0540 120000      E     LCALL   _a2h
0543 900000      R     MOV     DPTR,#spiaddr
0546 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 575
0549 7A00        R     MOV     R2,#HIGH ?SC_2097
054B 7900        R     MOV     R1,#LOW ?SC_2097
054D 120000      R     LCALL   L?0285
0550 120000      R     LCALL   L?0316
0553 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 577
0556 120000      R     LCALL   L?0336
0559 4010              JC      ?C0123
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 51  

                                           ; SOURCE LINE # 578
055B 900000      E     MOV     DPTR,#argv+09H
055E 120000      R     LCALL   L?0284
0561 120000      E     LCALL   _a2h
0564 900000      R     MOV     DPTR,#cnt
0567 EF                MOV     A,R7
0568 F0                MOVX    @DPTR,A
0569 8006              SJMP    ?C0124
056B         ?C0123:
                                           ; SOURCE LINE # 579
056B 900000      R     MOV     DPTR,#cnt
056E 7408              MOV     A,#08H
0570 F0                MOVX    @DPTR,A
0571         ?C0124:
                                           ; SOURCE LINE # 581
0571 900000      R     MOV     DPTR,#cmd
0574 E0                MOVX    A,@DPTR
0575 FF                MOV     R7,A
0576 B40B16            CJNE    A,#0BH,?C0125
                                           ; SOURCE LINE # 582
0579 E500        E     MOV     A,regTW88+01H
057B 24C3              ADD     A,#0C3H
057D 120000      R     LCALL   L?0279
0580 7445              MOV     A,#045H
0582 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 583
0583 E500        E     MOV     A,regTW88+01H
0585 24CA              ADD     A,#0CAH
0587 120000      R     LCALL   L?0279
058A 740B              MOV     A,#0BH
058C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
058D 802E              SJMP    ?C0126
058F         ?C0125:
                                           ; SOURCE LINE # 585
058F EF                MOV     A,R7
0590 B4EB16            CJNE    A,#0EBH,?C0127
                                           ; SOURCE LINE # 586
0593 E500        E     MOV     A,regTW88+01H
0595 24C3              ADD     A,#0C3H
0597 120000      R     LCALL   L?0279
059A 7447              MOV     A,#047H
059C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 587
059D E500        E     MOV     A,regTW88+01H
059F 24CA              ADD     A,#0CAH
05A1 120000      R     LCALL   L?0279
05A4 74EB              MOV     A,#0EBH
05A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
05A7 8014              SJMP    ?C0126
05A9         ?C0127:
                                           ; SOURCE LINE # 589
                                           ; SOURCE LINE # 590
05A9 E500        E     MOV     A,regTW88+01H
05AB 24C3              ADD     A,#0C3H
05AD 120000      R     LCALL   L?0279
05B0 7444              MOV     A,#044H
05B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 591
05B3 E500        E     MOV     A,regTW88+01H
05B5 24CA              ADD     A,#0CAH
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 52  

05B7 120000      R     LCALL   L?0279
05BA 7403              MOV     A,#03H
05BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
05BD         ?C0126:
                                           ; SOURCE LINE # 593
                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 598
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
05BD 120000      R     LCALL   L?0274
                                           ; SOURCE LINE # 601
05C0 120000      R     LCALL   L?0359
05C3 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 603
                                           ; SOURCE LINE # 604
05C6 120000      R     LCALL   L?0300
05C9 120000      R     LCALL   L?0279
05CC 7405              MOV     A,#05H
                                           ; SOURCE LINE # 606
05CE 120000      R     LCALL   L?0304
05D1         ?C0129:
05D1 120000      R     LCALL   L?0307
05D4 5012              JNC     ?C0130
                                           ; SOURCE LINE # 607
05D6 E500        E     MOV     A,regTW88+01H
05D8 24C4              ADD     A,#0C4H
05DA 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 608
05DD 120000      R     LCALL   L?0319
05E0 30E005            JNB     ACC.0,?C0130
                                           ; SOURCE LINE # 609
05E3         ?C0132:
                                           ; SOURCE LINE # 610
                                           ; SOURCE LINE # 611
05E3 120000      R     LCALL   L?0301
05E6 80E9              SJMP    ?C0129
05E8         ?C0130:
                                           ; SOURCE LINE # 612
05E8 120000      R     LCALL   L?0295
                                           ; SOURCE LINE # 614
05EB E4                CLR     A
05EC 900000      R     MOV     DPTR,#i
05EF F0                MOVX    @DPTR,A
05F0         ?C0133:
05F0 900000      R     MOV     DPTR,#cnt
05F3 120000      R     LCALL   L?0369
05F6 4003              JC      $ + 5H
05F8 020000      R     LJMP    ?C0036
                                           ; SOURCE LINE # 615
05FB 7BFF              MOV     R3,#0FFH
05FD 7A00        R     MOV     R2,#HIGH ?SC_1955
05FF 7900        R     MOV     R1,#LOW ?SC_1955
0601 EE                MOV     A,R6
0602 24D0              ADD     A,#0D0H
0604 FF                MOV     R7,A
0605 E4                CLR     A
0606 3404              ADDC    A,#04H
0608 FE                MOV     R6,A
0609 E500        E     MOV     A,regTW88+01H
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 53  

060B 2F                ADD     A,R7
060C F582              MOV     DPL,A
060E E500        E     MOV     A,regTW88
0610 3E                ADDC    A,R6
0611 F583              MOV     DPH,A
0613 E0                MOVX    A,@DPTR
0614 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0617 F0                MOVX    @DPTR,A
0618 120000      E     LCALL   _Printf
061B 900000      R     MOV     DPTR,#i
061E E0                MOVX    A,@DPTR
061F 04                INC     A
0620 F0                MOVX    @DPTR,A
0621 80CD              SJMP    ?C0133
                                           ; SOURCE LINE # 616
0623         ?C0113:
                                           ; SOURCE LINE # 617
0623 900000      R     MOV     DPTR,#cmd
0626 E0                MOVX    A,@DPTR
0627 FF                MOV     R7,A
0628 6465              XRL     A,#065H
062A 600D              JZ      ?C0138
062C EF                MOV     A,R7
062D 6485              XRL     A,#085H
062F 6008              JZ      ?C0138
0631 EF                MOV     A,R7
0632 64B5              XRL     A,#0B5H
0634 6003              JZ      $ + 5H
0636 020000      R     LJMP    ?C0137
0639         ?C0138:
                                           ; SOURCE LINE # 619
0639 900000      R     MOV     DPTR,#cmd
063C E0                MOVX    A,@DPTR
063D B4650D            CJNE    A,#065H,?C0139
                                           ; SOURCE LINE # 620
0640 7BFF              MOV     R3,#0FFH
0642 7A00        R     MOV     R2,#HIGH ?SC_2105
0644 7900        R     MOV     R1,#LOW ?SC_2105
0646 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0649 7465              MOV     A,#065H
064B 801A              SJMP    ?C0258
064D         ?C0139:
                                           ; SOURCE LINE # 621
064D 120000      R     LCALL   L?0364
0650 B4850B            CJNE    A,#085H,?C0141
                                           ; SOURCE LINE # 622
0653 7A00        R     MOV     R2,#HIGH ?SC_2118
0655 7900        R     MOV     R1,#LOW ?SC_2118
0657 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
065A 7485              MOV     A,#085H
065C 8009              SJMP    ?C0241
065E         ?C0141:
                                           ; SOURCE LINE # 624
065E 7A00        R     MOV     R2,#HIGH ?SC_2130
0660 7900        R     MOV     R1,#LOW ?SC_2130
0662 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0665 74B5              MOV     A,#0B5H
0667         ?C0241:
0667         ?C0258:
0667 F0                MOVX    @DPTR,A
0668 120000      E     LCALL   _Printf
066B         ?C0140:
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 54  

                                           ; SOURCE LINE # 626
066B E500        E     MOV     A,regTW88+01H
066D 24C3              ADD     A,#0C3H
066F 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 627
0672 120000      R     LCALL   L?0337
                                           ; SOURCE LINE # 628
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 630
                                           ; SOURCE LINE # 631
0675 120000      R     LCALL   L?0275
0678 E4                CLR     A
0679 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 632
067A EF                MOV     A,R7
067B 6465              XRL     A,#065H
067D 6007              JZ      ?C0144
067F 900000      R     MOV     DPTR,#cmd
0682 E0                MOVX    A,@DPTR
0683 B4850C            CJNE    A,#085H,?C0143
0686         ?C0144:
                                           ; SOURCE LINE # 633
0686 E500        E     MOV     A,regTW88+01H
0688 24C9              ADD     A,#0C9H
068A 120000      R     LCALL   L?0279
068D 7401              MOV     A,#01H
068F F0                MOVX    @DPTR,A
0690 800A              SJMP    ?C0145
0692         ?C0143:
                                           ; SOURCE LINE # 635
0692 E500        E     MOV     A,regTW88+01H
0694 24C9              ADD     A,#0C9H
0696 120000      R     LCALL   L?0279
0699 7402              MOV     A,#02H
069B F0                MOVX    @DPTR,A
069C         ?C0145:
                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 637
069C 120000      R     LCALL   L?0376
069F 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 639
06A2 120000      R     LCALL   L?0303
06A5         ?C0146:
06A5 120000      R     LCALL   L?0307
06A8 5012              JNC     ?C0147
                                           ; SOURCE LINE # 640
06AA E500        E     MOV     A,regTW88+01H
06AC 24C4              ADD     A,#0C4H
06AE 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 641
06B1 120000      R     LCALL   L?0319
06B4 30E005            JNB     ACC.0,?C0147
                                           ; SOURCE LINE # 642
06B7         ?C0149:
                                           ; SOURCE LINE # 643
                                           ; SOURCE LINE # 644
06B7 120000      R     LCALL   L?0341
06BA 80E9              SJMP    ?C0146
06BC         ?C0147:
                                           ; SOURCE LINE # 645
06BC 7A00        R     MOV     R2,#HIGH ?SC_1754
06BE 7900        R     MOV     R1,#LOW ?SC_1754
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 55  

06C0 120000      R     LCALL   L?0322
06C3 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 647
06C6 E500        E     MOV     A,regTW88+01H
06C8 24D0              ADD     A,#0D0H
06CA 120000      R     LCALL   L?0279
06CD E0                MOVX    A,@DPTR
06CE 900000      R     MOV     DPTR,#dat0
06D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 648
06D2 7A00        R     MOV     R2,#HIGH ?SC_2143
06D4 7900        R     MOV     R1,#LOW ?SC_2143
06D6 120000      R     LCALL   L?0356
                                           ; SOURCE LINE # 649
06D9 900000      R     MOV     DPTR,#cmd
06DC E0                MOVX    A,@DPTR
06DD B4B513            CJNE    A,#0B5H,?C0150
                                           ; SOURCE LINE # 650
06E0 E500        E     MOV     A,regTW88+01H
06E2 24D1              ADD     A,#0D1H
06E4 120000      R     LCALL   L?0279
06E7 E0                MOVX    A,@DPTR
06E8 900000      R     MOV     DPTR,#dat1
06EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 651
06EC 7A00        R     MOV     R2,#HIGH ?SC_1955
06EE 7900        R     MOV     R1,#LOW ?SC_1955
06F0 120000      R     LCALL   L?0356
                                           ; SOURCE LINE # 652
06F3         ?C0150:
                                           ; SOURCE LINE # 653
06F3 120000      R     LCALL   L?0365
06F6 7A00        R     MOV     R2,#HIGH ?SC_2149
06F8 7900        R     MOV     R1,#LOW ?SC_2149
06FA B48503            CJNE    A,#085H,?C0151
                                           ; SOURCE LINE # 654
06FD A3                INC     DPTR
                                           ; SOURCE LINE # 655
06FE 8003              SJMP    ?C0242
0700         ?C0151:
                                           ; SOURCE LINE # 656
                                           ; SOURCE LINE # 657
0700 900000      R     MOV     DPTR,#dat1
0703         ?C0242:
0703 E0                MOVX    A,@DPTR
0704 FF                MOV     R7,A
0705 C4                SWAP    A
0706 540F              ANL     A,#0FH
                                           ; SOURCE LINE # 658
                                           ; SOURCE LINE # 660
0708 020000      R     LJMP    ?C0259
070B         ?C0137:
                                           ; SOURCE LINE # 661
070B 900000      R     MOV     DPTR,#cmd
070E E0                MOVX    A,@DPTR
070F FF                MOV     R7,A
0710 6461              XRL     A,#061H
0712 600D              JZ      ?C0155
0714 EF                MOV     A,R7
0715 6481              XRL     A,#081H
0717 6008              JZ      ?C0155
0719 EF                MOV     A,R7
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 56  

071A 64B1              XRL     A,#0B1H
071C 6003              JZ      $ + 5H
071E 020000      R     LJMP    ?C0154
0721         ?C0155:
                                           ; SOURCE LINE # 664
0721 900000      R     MOV     DPTR,#cmd
0724 E0                MOVX    A,@DPTR
0725 FF                MOV     R7,A
0726 6461              XRL     A,#061H
0728 6005              JZ      ?C0157
072A EF                MOV     A,R7
072B 6481              XRL     A,#081H
072D 701D              JNZ     ?C0156
072F         ?C0157:
                                           ; SOURCE LINE # 665
072F 120000      R     LCALL   L?0312
0732 5002              JNC     ?C0158
                                           ; SOURCE LINE # 666
0734         ?C0257:
0734 801B              SJMP    ?C0260
                                           ; SOURCE LINE # 668
0736         ?C0158:
                                           ; SOURCE LINE # 669
0736 900000      E     MOV     DPTR,#argv+06H
0739 120000      R     LCALL   L?0284
073C 120000      E     LCALL   _a2h
073F 900000      R     MOV     DPTR,#dat0
0742 EF                MOV     A,R7
0743 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 670
0744 900000      R     MOV     DPTR,#cmd_len
0747 7402              MOV     A,#02H
0749 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 671
074A 8030              SJMP    ?C0159
074C         ?C0156:
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 673
074C 120000      R     LCALL   L?0336
074F 5009              JNC     ?C0160
                                           ; SOURCE LINE # 674
0751         ?C0260:
0751 7BFF              MOV     R3,#0FFH
0753 7A00        R     MOV     R2,#HIGH ?SC_72
0755 7900        R     MOV     R1,#LOW ?SC_72
0757 020000      R     LJMP    ?C0262
                                           ; SOURCE LINE # 676
075A         ?C0160:
                                           ; SOURCE LINE # 677
075A 900000      E     MOV     DPTR,#argv+06H
075D 120000      R     LCALL   L?0284
0760 120000      E     LCALL   _a2h
0763 900000      R     MOV     DPTR,#dat0
0766 EF                MOV     A,R7
0767 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 678
0768 900000      E     MOV     DPTR,#argv+09H
076B 120000      R     LCALL   L?0284
076E 120000      E     LCALL   _a2h
0771 900000      R     MOV     DPTR,#dat1
0774 EF                MOV     A,R7
0775 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 57  

                                           ; SOURCE LINE # 679
0776 900000      R     MOV     DPTR,#cmd_len
0779 7403              MOV     A,#03H
077B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 680
077C         ?C0159:
                                           ; SOURCE LINE # 681
077C 900000      R     MOV     DPTR,#cmd_len
077F E0                MOVX    A,@DPTR
0780 4440              ORL     A,#040H
0782 FF                MOV     R7,A
0783 E500        E     MOV     A,regTW88+01H
0785 24C3              ADD     A,#0C3H
0787 120000      R     LCALL   L?0279
078A EF                MOV     A,R7
                                           ; SOURCE LINE # 682
078B 120000      R     LCALL   L?0338
078E 120000      R     LCALL   L?0279
0791 EF                MOV     A,R7
                                           ; SOURCE LINE # 683
0792 120000      R     LCALL   L?0360
0795 120000      R     LCALL   L?0279
0798 EE                MOV     A,R6
0799 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 684
079A EF                MOV     A,R7
079B B4B10E            CJNE    A,#0B1H,?C0161
                                           ; SOURCE LINE # 685
079E 900000      R     MOV     DPTR,#dat1
07A1 E0                MOVX    A,@DPTR
07A2 FF                MOV     R7,A
07A3 E500        E     MOV     A,regTW88+01H
07A5 24CC              ADD     A,#0CCH
07A7 120000      R     LCALL   L?0279
07AA EF                MOV     A,R7
07AB F0                MOVX    @DPTR,A
07AC         ?C0161:
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 687
                                           ; SOURCE LINE # 688
                                           ; SOURCE LINE # 689
07AC 120000      R     LCALL   L?0277
                                           ; SOURCE LINE # 690
07AF 120000      R     LCALL   L?0343
07B2 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 691
                                           ; SOURCE LINE # 692
07B5 120000      R     LCALL   L?0310
07B8 120000      R     LCALL   L?0279
07BB 7407              MOV     A,#07H
                                           ; SOURCE LINE # 694
07BD 120000      R     LCALL   L?0304
07C0         ?C0162:
07C0 120000      R     LCALL   L?0307
07C3 5012              JNC     ?C0163
                                           ; SOURCE LINE # 695
07C5 E500        E     MOV     A,regTW88+01H
07C7 24C4              ADD     A,#0C4H
07C9 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 696
07CC 120000      R     LCALL   L?0319
07CF 30E005            JNB     ACC.0,?C0163
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 58  

                                           ; SOURCE LINE # 697
07D2         ?C0165:
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 699
07D2 120000      R     LCALL   L?0341
07D5 80E9              SJMP    ?C0162
07D7         ?C0163:
                                           ; SOURCE LINE # 700
07D7 7BFF              MOV     R3,#0FFH
07D9 7A00        R     MOV     R2,#HIGH ?SC_2165
07DB 7900        R     MOV     R1,#LOW ?SC_2165
07DD 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
07E0 ED                MOV     A,R5
07E1         ?C0256:
07E1 120000      R     LCALL   L?0323
07E4         ?C0261:
                                           ; SOURCE LINE # 701
07E4 800E              SJMP    ?C0262
07E6         ?C0154:
                                           ; SOURCE LINE # 702
                                           ; SOURCE LINE # 703
07E6 7BFF              MOV     R3,#0FFH
07E8 7A00        R     MOV     R2,#HIGH ?SC_2185
07EA 7900        R     MOV     R1,#LOW ?SC_2185
07EC 900000      R     MOV     DPTR,#cmd
07EF E0                MOVX    A,@DPTR
07F0         ?C0259:
07F0 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
07F3 F0                MOVX    @DPTR,A
07F4         ?C0262:
07F4 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 704
                                           ; SOURCE LINE # 707
07F7         ?C0036:
07F7 22                RET     
07F8         L?0288:
07F8 7F0A              MOV     R7,#0AH
07FA 7E00              MOV     R6,#00H
07FC 120000      E     LCALL   _delay1ms
07FF 900000      R     MOV     DPTR,#i
0802 E0                MOVX    A,@DPTR
0803 04                INC     A
0804 F0                MOVX    @DPTR,A
0805 22                RET     
0806         L?0289:
0806 7F0A              MOV     R7,#0AH
0808 7E00              MOV     R6,#00H
080A 120000      E     LCALL   _delay1ms
080D 900000      R     MOV     DPTR,#i
0810 E0                MOVX    A,@DPTR
0811 04                INC     A
0812 F0                MOVX    @DPTR,A
0813 22                RET     
0814         L?0290:
0814 7BFF              MOV     R3,#0FFH
0816 120000      E     LCALL   _Puts
0819 7BFF              MOV     R3,#0FFH
081B 7A00        R     MOV     R2,#HIGH ?SC_1840
081D 7900        R     MOV     R1,#LOW ?SC_1840
081F 900000      R     MOV     DPTR,#i
0822 E0                MOVX    A,@DPTR
0823 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 59  

0826 F0                MOVX    @DPTR,A
0827 900000      R     MOV     DPTR,#vdata
082A E0                MOVX    A,@DPTR
082B 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
082E F0                MOVX    @DPTR,A
082F 22                RET     
0830         L?0294:
0830 E4                CLR     A
0831 F0                MOVX    @DPTR,A
0832 7F01              MOV     R7,#01H
0834 120000      E     LCALL   _WaitVBlank
0837 E500        E     MOV     A,regTW88+01H
0839 24C4              ADD     A,#0C4H
083B 22                RET     
083C         L?0295:
083C 7BFF              MOV     R3,#0FFH
083E 7A00        R     MOV     R2,#HIGH ?SC_1962
0840 7900        R     MOV     R1,#LOW ?SC_1962
0842 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0845 ED                MOV     A,R5
0846 F0                MOVX    @DPTR,A
0847 900000      R     MOV     DPTR,#vdata
084A E0                MOVX    A,@DPTR
084B 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
084E F0                MOVX    @DPTR,A
084F 120000      E     LCALL   _Printf
0852 22                RET     
0853         L?0296:
0853 7F0A              MOV     R7,#0AH
0855 7E00              MOV     R6,#00H
0857 120000      E     LCALL   _delay1ms
085A 900000      R     MOV     DPTR,#i
085D E0                MOVX    A,@DPTR
085E 04                INC     A
085F F0                MOVX    @DPTR,A
0860 22                RET     
0861         L?0300:
0861 EF                MOV     A,R7
0862 F0                MOVX    @DPTR,A
0863 7F01              MOV     R7,#01H
0865 120000      E     LCALL   _WaitVBlank
0868 E500        E     MOV     A,regTW88+01H
086A 24C4              ADD     A,#0C4H
086C 22                RET     
086D         L?0301:
086D 7F0A              MOV     R7,#0AH
086F 7E00              MOV     R6,#00H
0871 120000      E     LCALL   _delay1ms
0874 900000      R     MOV     DPTR,#i
0877 E0                MOVX    A,@DPTR
0878 04                INC     A
0879 F0                MOVX    @DPTR,A
087A 22                RET     
087B         L?0310:
087B E4                CLR     A
087C F0                MOVX    @DPTR,A
087D 7F01              MOV     R7,#01H
087F 120000      E     LCALL   _WaitVBlank
0882 E500        E     MOV     A,regTW88+01H
0884 24C4              ADD     A,#0C4H
0886 22                RET     
0887         L?0327:
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 60  

0887 900000      R     MOV     DPTR,#dat0
088A E0                MOVX    A,@DPTR
088B 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
088E F0                MOVX    @DPTR,A
088F 120000      E     LCALL   _Printf
0892 900000      R     MOV     DPTR,#dat0
0895 E0                MOVX    A,@DPTR
0896 22                RET     
0897         L?0340:
0897 7401              MOV     A,#01H
0899 F0                MOVX    @DPTR,A
089A FF                MOV     R7,A
089B 120000      E     LCALL   _WaitVBlank
089E E500        E     MOV     A,regTW88+01H
08A0 24C4              ADD     A,#0C4H
08A2 22                RET     
08A3         L?0341:
08A3 7F0A              MOV     R7,#0AH
08A5 7E00              MOV     R6,#00H
08A7 120000      E     LCALL   _delay1ms
08AA 900000      R     MOV     DPTR,#i
08AD E0                MOVX    A,@DPTR
08AE 04                INC     A
08AF F0                MOVX    @DPTR,A
08B0 22                RET     
08B1         L?0345:
08B1 120000      E     LCALL   _a2h
08B4 900000      R     MOV     DPTR,#dat0
08B7 EF                MOV     A,R7
08B8 F0                MOVX    @DPTR,A
08B9 22                RET     
08BA         L?0351:
08BA 120000      E     LCALL   _a2h
08BD 900000      R     MOV     DPTR,#spiaddr
08C0 120000      E     LCALL   ?C?LSTXDATA
08C3 22                RET     
08C4         L?0352:
08C4 7BFF              MOV     R3,#0FFH
08C6 120000      E     LCALL   _Puts
08C9 900000      R     MOV     DPTR,#dat0
08CC E0                MOVX    A,@DPTR
08CD 22                RET     
08CE         L?0353:
08CE 7BFF              MOV     R3,#0FFH
08D0 120000      E     LCALL   _Puts
08D3 E500        E     MOV     A,regTW88+01H
08D5 24C0              ADD     A,#0C0H
08D7 22                RET     
08D8         L?0356:
08D8 7BFF              MOV     R3,#0FFH
08DA 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
08DD F0                MOVX    @DPTR,A
08DE 120000      E     LCALL   _Printf
08E1 22                RET     
08E2         L?0376:
08E2 7F01              MOV     R7,#01H
08E4 120000      E     LCALL   _WaitVBlank
08E7 E500        E     MOV     A,regTW88+01H
08E9 24C4              ADD     A,#0C4H
08EB 22                RET     
08EC         L?0377:
08EC 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 61  

08EE 7A00        R     MOV     R2,#HIGH ?SC_1883
08F0 7900        R     MOV     R1,#LOW ?SC_1883
08F2 120000      E     LCALL   _Puts
08F5 22                RET     
             ; FUNCTION MonitorSPIC (END)

             ; FUNCTION MonitorEE (BEGIN)
                                           ; SOURCE LINE # 865
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 871
0000 900000      E     MOV     DPTR,#argv+06H
0003 120000      R     LCALL   L?0284
0006 120000      E     LCALL   _a2h
0009 900000      R     MOV     DPTR,#index
000C EE                MOV     A,R6
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EF                MOV     A,R7
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 872
0011 900000      E     MOV     DPTR,#argv+09H
0014 120000      R     LCALL   L?0284
0017 120000      E     LCALL   _a2h
001A 900000      R     MOV     DPTR,#dat
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 875
001F 120000      R     LCALL   L?0292
0022 7400        R     MOV     A,#HIGH ?SC_2204
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 7400        R     MOV     A,#LOW ?SC_2204
0028 120000      R     LCALL   L?0282
002B 120000      E     LCALL   _stricmp
002E EF                MOV     A,R7
002F 4E                ORL     A,R6
0030 700C              JNZ     ?C0167
                                           ; SOURCE LINE # 876
0032 7BFF              MOV     R3,#0FFH
0034 7A00        R     MOV     R2,#HIGH ?SC_2211
0036 7900        R     MOV     R1,#LOW ?SC_2211
0038 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 877
003B 020000      E     LJMP    EE_Format
                                           ; SOURCE LINE # 879
003E         ?C0167:
                                           ; SOURCE LINE # 881
003E 120000      R     LCALL   L?0292
0041 7400        R     MOV     A,#HIGH ?SC_2229
0043 F0                MOVX    @DPTR,A
0044 A3                INC     DPTR
0045 7400        R     MOV     A,#LOW ?SC_2229
0047 120000      R     LCALL   L?0282
004A 120000      E     LCALL   _stricmp
004D EF                MOV     A,R7
004E 4E                ORL     A,R6
004F 700C              JNZ     ?C0170
                                           ; SOURCE LINE # 882
0051 7BFF              MOV     R3,#0FFH
0053 7A00        R     MOV     R2,#HIGH ?SC_2234
0055 7900        R     MOV     R1,#LOW ?SC_2234
0057 120000      E     LCALL   _Printf
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 62  

                                           ; SOURCE LINE # 883
005A 020000      E     LJMP    EE_FindCurrInfo
                                           ; SOURCE LINE # 885
005D         ?C0170:
                                           ; SOURCE LINE # 887
005D 120000      R     LCALL   L?0292
0060 7400        R     MOV     A,#HIGH ?SC_2260
0062 F0                MOVX    @DPTR,A
0063 A3                INC     DPTR
0064 7400        R     MOV     A,#LOW ?SC_2260
0066 120000      R     LCALL   L?0282
0069 120000      E     LCALL   _stricmp
006C EF                MOV     A,R7
006D 4E                ORL     A,R6
006E 700C              JNZ     ?C0172
                                           ; SOURCE LINE # 888
0070 7BFF              MOV     R3,#0FFH
0072 7A00        R     MOV     R2,#HIGH ?SC_2267
0074 7900        R     MOV     R1,#LOW ?SC_2267
0076 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 889
0079 020000      E     LJMP    EE_RepairMoveDone
                                           ; SOURCE LINE # 891
007C         ?C0172:
                                           ; SOURCE LINE # 893
007C 120000      R     LCALL   L?0292
007F 7400        R     MOV     A,#HIGH ?SC_2336
0081 F0                MOVX    @DPTR,A
0082 A3                INC     DPTR
0083 7400        R     MOV     A,#LOW ?SC_2336
0085 120000      R     LCALL   L?0282
0088 120000      E     LCALL   _stricmp
008B EF                MOV     A,R7
008C 4E                ORL     A,R6
008D 701B              JNZ     ?C0174
                                           ; SOURCE LINE # 894
008F 7BFF              MOV     R3,#0FFH
0091 7A00        R     MOV     R2,#HIGH ?SC_2341
0093 7900        R     MOV     R1,#LOW ?SC_2341
0095 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 895
0098 120000      E     LCALL   ClearBasicEE
                                           ; SOURCE LINE # 896
009B E4                CLR     A
009C FF                MOV     R7,A
009D 120000      E     LCALL   _SaveDebugLevelEE
                                           ; SOURCE LINE # 897
00A0 7F10              MOV     R7,#010H
00A2 7E00              MOV     R6,#00H
00A4 120000      E     LCALL   _SaveFWRevEE
                                           ; SOURCE LINE # 898
00A7 020000      E     LJMP    EE_PrintCurrInfo
                                           ; SOURCE LINE # 900
00AA         ?C0174:
                                           ; SOURCE LINE # 902
00AA 120000      R     LCALL   L?0292
00AD 7400        R     MOV     A,#HIGH ?SC_2364
00AF F0                MOVX    @DPTR,A
00B0 A3                INC     DPTR
00B1 7400        R     MOV     A,#LOW ?SC_2364
00B3 120000      R     LCALL   L?0282
00B6 120000      E     LCALL   _stricmp
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 63  

00B9 EF                MOV     A,R7
00BA 4E                ORL     A,R6
00BB 700C              JNZ     ?C0176
                                           ; SOURCE LINE # 903
00BD 7BFF              MOV     R3,#0FFH
00BF 7A00        R     MOV     R2,#HIGH ?SC_2370
00C1 7900        R     MOV     R1,#LOW ?SC_2370
00C3 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 904
00C6 020000      E     LJMP    EE_Check
                                           ; SOURCE LINE # 906
00C9         ?C0176:
                                           ; SOURCE LINE # 908
00C9 120000      R     LCALL   L?0292
00CC 7400        R     MOV     A,#HIGH ?SC_2380
00CE F0                MOVX    @DPTR,A
00CF A3                INC     DPTR
00D0 7400        R     MOV     A,#LOW ?SC_2380
00D2 120000      R     LCALL   L?0282
00D5 120000      E     LCALL   _stricmp
00D8 EF                MOV     A,R7
00D9 4E                ORL     A,R6
00DA 700C              JNZ     ?C0178
                                           ; SOURCE LINE # 909
00DC 7BFF              MOV     R3,#0FFH
00DE 7A00        R     MOV     R2,#HIGH ?SC_2386
00E0 7900        R     MOV     R1,#LOW ?SC_2386
00E2 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 910
00E5 020000      E     LJMP    EE_CleanBlocks
                                           ; SOURCE LINE # 912
00E8         ?C0178:
                                           ; SOURCE LINE # 914
00E8 120000      R     LCALL   L?0292
00EB 7400        R     MOV     A,#HIGH ?SC_172
00ED F0                MOVX    @DPTR,A
00EE A3                INC     DPTR
00EF 7400        R     MOV     A,#LOW ?SC_172
00F1 120000      R     LCALL   L?0282
00F4 120000      E     LCALL   _stricmp
00F7 EF                MOV     A,R7
00F8 4E                ORL     A,R6
00F9 7062              JNZ     ?C0180
                                           ; SOURCE LINE # 915
00FB 900000      E     MOV     DPTR,#argc
00FE E0                MOVX    A,@DPTR
00FF 6404              XRL     A,#04H
0101 6003              JZ      $ + 5H
0103 020000      R     LJMP    ?C0168
                                           ; SOURCE LINE # 916
0106 7BFF              MOV     R3,#0FFH
0108 7A00        R     MOV     R2,#HIGH ?SC_2403
010A 7900        R     MOV     R1,#LOW ?SC_2403
010C 900000      R     MOV     DPTR,#index
010F E0                MOVX    A,@DPTR
0110 FF                MOV     R7,A
0111 A3                INC     DPTR
0112 E0                MOVX    A,@DPTR
0113 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0116 CF                XCH     A,R7
0117 F0                MOVX    @DPTR,A
0118 A3                INC     DPTR
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 64  

0119 EF                MOV     A,R7
011A F0                MOVX    @DPTR,A
011B 900000      R     MOV     DPTR,#dat
011E E0                MOVX    A,@DPTR
011F 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
0122 F0                MOVX    @DPTR,A
0123 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 917
0126 900000      R     MOV     DPTR,#index
0129 E0                MOVX    A,@DPTR
012A FE                MOV     R6,A
012B A3                INC     DPTR
012C E0                MOVX    A,@DPTR
012D FF                MOV     R7,A
012E 900000      R     MOV     DPTR,#dat
0131 E0                MOVX    A,@DPTR
0132 FD                MOV     R5,A
0133 120000      E     LCALL   _EE_Write
                                           ; SOURCE LINE # 918
0136 120000      R     LCALL   L?0349
0139 900000      R     MOV     DPTR,#dat1
013C EF                MOV     A,R7
013D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 919
013E A3                INC     DPTR
013F E0                MOVX    A,@DPTR
0140 FE                MOV     R6,A
0141 A3                INC     DPTR
0142 E0                MOVX    A,@DPTR
0143 FF                MOV     R7,A
0144 120000      E     LCALL   _EE_Read
0147 900000      R     MOV     DPTR,#dat
014A EF                MOV     A,R7
014B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 920
014C 7A00        R     MOV     R2,#HIGH ?SC_2429
014E 7900        R     MOV     R1,#LOW ?SC_2429
0150 120000      R     LCALL   L?0346
0153 F0                MOVX    @DPTR,A
0154 900000      R     MOV     DPTR,#dat1
0157 E0                MOVX    A,@DPTR
0158 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
                                           ; SOURCE LINE # 921
                                           ; SOURCE LINE # 922
015B 802D              SJMP    ?C0263
015D         ?C0180:
                                           ; SOURCE LINE # 924
015D 120000      R     LCALL   L?0292
0160 7400        R     MOV     A,#HIGH ?SC_2466
0162 F0                MOVX    @DPTR,A
0163 A3                INC     DPTR
0164 7400        R     MOV     A,#LOW ?SC_2466
0166 120000      R     LCALL   L?0282
0169 120000      E     LCALL   _stricmp
016C EF                MOV     A,R7
016D 4E                ORL     A,R6
016E 7021              JNZ     ?C0183
                                           ; SOURCE LINE # 925
0170 900000      E     MOV     DPTR,#argc
0173 E0                MOVX    A,@DPTR
0174 6403              XRL     A,#03H
0176 6003              JZ      $ + 5H
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 65  

0178 020000      R     LJMP    ?C0168
                                           ; SOURCE LINE # 926
017B 120000      R     LCALL   L?0349
017E 900000      R     MOV     DPTR,#dat
0181 EF                MOV     A,R7
0182 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 927
0183 7A00        R     MOV     R2,#HIGH ?SC_2468
0185 7900        R     MOV     R1,#LOW ?SC_2468
0187 120000      R     LCALL   L?0346
018A         ?C0263:
018A F0                MOVX    @DPTR,A
018B A3                INC     DPTR
018C EF                MOV     A,R7
018D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 928
                                           ; SOURCE LINE # 929
018E 020000      R     LJMP    ?C0265
0191         ?C0183:
                                           ; SOURCE LINE # 932
0191 120000      R     LCALL   L?0280
0194 120000      E     LCALL   _stricmp
0197 EF                MOV     A,R7
0198 4E                ORL     A,R6
0199 706F              JNZ     ?C0186
                                           ; SOURCE LINE # 933
019B 7BFF              MOV     R3,#0FFH
019D 7A00        R     MOV     R2,#HIGH ?SC_2501
019F 7900        R     MOV     R1,#LOW ?SC_2501
01A1 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 934
01A4 E4                CLR     A
01A5 900000      R     MOV     DPTR,#j
01A8 F0                MOVX    @DPTR,A
01A9         ?C0187:
01A9 900000      R     MOV     DPTR,#j
01AC E0                MOVX    A,@DPTR
01AD FF                MOV     R7,A
01AE C3                CLR     C
01AF 9420              SUBB    A,#020H
01B1 4003              JC      $ + 5H
01B3 020000      R     LJMP    ?C0168
                                           ; SOURCE LINE # 935
01B6 7BFF              MOV     R3,#0FFH
01B8 7A00        R     MOV     R2,#HIGH ?SC_2514
01BA 7900        R     MOV     R1,#LOW ?SC_2514
01BC EF                MOV     A,R7
01BD C4                SWAP    A
01BE 54F0              ANL     A,#0F0H
01C0 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
01C3 F0                MOVX    @DPTR,A
01C4 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 936
01C7 E4                CLR     A
01C8 900000      R     MOV     DPTR,#i
01CB F0                MOVX    @DPTR,A
01CC         ?C0190:
01CC 900000      R     MOV     DPTR,#i
01CF E0                MOVX    A,@DPTR
01D0 FD                MOV     R5,A
01D1 C3                CLR     C
01D2 9408              SUBB    A,#08H
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 66  

01D4 500C              JNC     ?C0191
01D6 120000      R     LCALL   L?0328
01D9 7A00        R     MOV     R2,#HIGH ?SC_1955
01DB 7900        R     MOV     R1,#LOW ?SC_1955
01DD 120000      R     LCALL   L?0378
01E0 80EA              SJMP    ?C0190
01E2         ?C0191:
                                           ; SOURCE LINE # 937
01E2 7BFF              MOV     R3,#0FFH
01E4 7A00        R     MOV     R2,#HIGH ?SC_2529
01E6 7900        R     MOV     R1,#LOW ?SC_2529
01E8 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 938
01EB         ?C0193:
01EB 900000      R     MOV     DPTR,#i
01EE E0                MOVX    A,@DPTR
01EF FD                MOV     R5,A
01F0 C3                CLR     C
01F1 9410              SUBB    A,#010H
01F3 500C              JNC     ?C0189
01F5 120000      R     LCALL   L?0328
01F8 7A00        R     MOV     R2,#HIGH ?SC_2531
01FA 7900        R     MOV     R1,#LOW ?SC_2531
01FC 120000      R     LCALL   L?0378
01FF 80EA              SJMP    ?C0193
                                           ; SOURCE LINE # 939
0201         ?C0189:
0201 900000      R     MOV     DPTR,#j
0204 E0                MOVX    A,@DPTR
0205 04                INC     A
0206 F0                MOVX    @DPTR,A
0207 020000      R     LJMP    ?C0187
                                           ; SOURCE LINE # 940
020A         ?C0186:
                                           ; SOURCE LINE # 943
020A 120000      R     LCALL   L?0292
020D 7400        R     MOV     A,#HIGH ?SC_226
020F F0                MOVX    @DPTR,A
0210 A3                INC     DPTR
0211 7400        R     MOV     A,#LOW ?SC_226
0213 120000      R     LCALL   L?0282
0216 120000      E     LCALL   _stricmp
0219 EF                MOV     A,R7
021A 4E                ORL     A,R6
021B 7BFF              MOV     R3,#0FFH
021D 705D              JNZ     ?C0197
                                           ; SOURCE LINE # 944
021F 7A00        R     MOV     R2,#HIGH ?SC_2538
0221 7900        R     MOV     R1,#LOW ?SC_2538
0223 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 945
0226 7A00        R     MOV     R2,#HIGH ?SC_2570
0228 7900        R     MOV     R1,#LOW ?SC_2570
                                           ; SOURCE LINE # 946
022A 120000      R     LCALL   L?0313
022D 7A00        R     MOV     R2,#HIGH ?SC_2613
022F 7900        R     MOV     R1,#LOW ?SC_2613
0231 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 947
0234 7A00        R     MOV     R2,#HIGH ?SC_2663
0236 7900        R     MOV     R1,#LOW ?SC_2663
                                           ; SOURCE LINE # 948
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 67  

0238 120000      R     LCALL   L?0313
023B 7A00        R     MOV     R2,#HIGH ?SC_2712
023D 7900        R     MOV     R1,#LOW ?SC_2712
023F 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 949
0242 7A00        R     MOV     R2,#HIGH ?SC_2757
0244 7900        R     MOV     R1,#LOW ?SC_2757
                                           ; SOURCE LINE # 950
0246 120000      R     LCALL   L?0354
0249 7A00        R     MOV     R2,#HIGH ?SC_2803
024B 7900        R     MOV     R1,#LOW ?SC_2803
024D 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 951
0250 7A00        R     MOV     R2,#HIGH ?SC_2860
0252 7900        R     MOV     R1,#LOW ?SC_2860
                                           ; SOURCE LINE # 952
0254 120000      R     LCALL   L?0354
0257 7A00        R     MOV     R2,#HIGH ?SC_2892
0259 7900        R     MOV     R1,#LOW ?SC_2892
025B 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 953
025E 7BFF              MOV     R3,#0FFH
0260 7A00        R     MOV     R2,#HIGH ?SC_2923
0262 7900        R     MOV     R1,#LOW ?SC_2923
0264 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 954
0267 7A00        R     MOV     R2,#HIGH ?SC_2958
0269 7900        R     MOV     R1,#LOW ?SC_2958
026B 7406              MOV     A,#06H
026D 120000      R     LCALL   L?0370
0270 A3                INC     DPTR
0271 740F              MOV     A,#0FH
0273 F0                MOVX    @DPTR,A
0274 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 955
0277 120000      R     LCALL   L?0363
027A         ?C0264:
                                           ; SOURCE LINE # 956
027A 8004              SJMP    ?C0265
027C         ?C0197:
                                           ; SOURCE LINE # 959
027C 7A00        R     MOV     R2,#HIGH ?SC_514
027E 7900        R     MOV     R1,#LOW ?SC_514
0280         ?C0265:
0280 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 961
0283         ?C0168:
0283 22                RET     
0284         L?0313:
0284 7BFF              MOV     R3,#0FFH
0286 120000      E     LCALL   _Printf
0289 7BFF              MOV     R3,#0FFH
028B 22                RET     
028C         L?0328:
028C A3                INC     DPTR
028D E0                MOVX    A,@DPTR
028E 75F010            MOV     B,#010H
0291 A4                MUL     AB
0292 7C00              MOV     R4,#00H
0294 2D                ADD     A,R5
0295 FF                MOV     R7,A
0296 EC                MOV     A,R4
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 68  

0297 35F0              ADDC    A,B
0299 FE                MOV     R6,A
029A 120000      E     LCALL   _EE_Read
029D 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
02A0 EF                MOV     A,R7
02A1 F0                MOVX    @DPTR,A
02A2 7BFF              MOV     R3,#0FFH
02A4 22                RET     
02A5         L?0349:
02A5 900000      R     MOV     DPTR,#index
02A8 E0                MOVX    A,@DPTR
02A9 FE                MOV     R6,A
02AA A3                INC     DPTR
02AB E0                MOVX    A,@DPTR
02AC FF                MOV     R7,A
02AD 120000      E     LCALL   _EE_Read
02B0 22                RET     
02B1         L?0354:
02B1 7BFF              MOV     R3,#0FFH
02B3 120000      E     LCALL   _Printf
02B6 7BFF              MOV     R3,#0FFH
02B8 22                RET     
02B9         L?0378:
02B9 120000      E     LCALL   _Printf
02BC 900000      R     MOV     DPTR,#i
02BF E0                MOVX    A,@DPTR
02C0 04                INC     A
02C1 F0                MOVX    @DPTR,A
02C2 22                RET     
             ; FUNCTION MonitorEE (END)

             ; FUNCTION SPI_Status (BEGIN)
                                           ; SOURCE LINE # 970
                                           ; SOURCE LINE # 971
                                           ; SOURCE LINE # 978
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 7F01              MOV     R7,#01H
0004 120000      E     LCALL   _SpiFlashDmaDestType
                                           ; SOURCE LINE # 979
0007 7FD0              MOV     R7,#0D0H
0009 7E04              MOV     R6,#04H
000B 120000      E     LCALL   _SpiFlashDmaBuffAddr
                                           ; SOURCE LINE # 980
000E 7F00              MOV     R7,#00H
0010 7E00              MOV     R6,#00H
0012 7D00              MOV     R5,#00H
0014 7C00              MOV     R4,#00H
0016 120000      E     LCALL   _SpiFlashDmaReadLen
                                           ; SOURCE LINE # 982
0019 7D01              MOV     R5,#01H
001B 7F9F              MOV     R7,#09FH
001D 120000      E     LCALL   _SpiFlashCmd
                                           ; SOURCE LINE # 983
0020 7F03              MOV     R7,#03H
0022 120000      E     LCALL   _SpiFlashDmaReadLenByte
                                           ; SOURCE LINE # 984
0025 7BD8              MOV     R3,#0D8H
                                           ; SOURCE LINE # 985
0027 120000      R     LCALL   L?0314
002A 120000      R     LCALL   L?0279
002D E0                MOVX    A,@DPTR
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 69  

002E FF                MOV     R7,A
002F 900000      R     MOV     DPTR,#vid
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 986
0033 E500        E     MOV     A,regTW88+01H
0035 24D1              ADD     A,#0D1H
0037 120000      R     LCALL   L?0279
003A 120000      R     LCALL   L?0371
                                           ; SOURCE LINE # 987
003D E500        E     MOV     A,regTW88+01H
003F 24D2              ADD     A,#0D2H
0041 120000      R     LCALL   L?0279
0044 E0                MOVX    A,@DPTR
0045 FD                MOV     R5,A
0046 900000      R     MOV     DPTR,#cid
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 989
004A 7A00        R     MOV     R2,#HIGH ?SC_2993
004C 7900        R     MOV     R1,#LOW ?SC_2993
004E 120000      R     LCALL   L?0344
0051 A3                INC     DPTR
0052 ED                MOV     A,R5
0053 F0                MOVX    @DPTR,A
0054 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 991
0057 900000      R     MOV     DPTR,#vid
005A E0                MOVX    A,@DPTR
005B 24E0              ADD     A,#0E0H
005D 6034              JZ      ?C0204
005F 245E              ADD     A,#05EH
0061 6010              JZ      ?C0201
0063 24D3              ADD     A,#0D3H
0065 6014              JZ      ?C0202
0067 24D3              ADD     A,#0D3H
0069 7030              JNZ     ?C0205
                                           ; SOURCE LINE # 992
006B         ?C0200:
006B 7BFF              MOV     R3,#0FFH
006D 7A00        R     MOV     R2,#HIGH ?SC_1792
006F 7900        R     MOV     R1,#LOW ?SC_1792
0071 802E              SJMP    ?C0270
                                           ; SOURCE LINE # 993
0073         ?C0201:
0073 7BFF              MOV     R3,#0FFH
0075 7A00        R     MOV     R2,#HIGH ?SC_1797
0077 7900        R     MOV     R1,#LOW ?SC_1797
0079         ?C0267:
0079 8026              SJMP    ?C0270
                                           ; SOURCE LINE # 994
007B         ?C0202:
007B 7BFF              MOV     R3,#0FFH
007D 7A00        R     MOV     R2,#HIGH ?SC_1801
007F 7900        R     MOV     R1,#LOW ?SC_1801
0081 120000      E     LCALL   _Puts
0084 900000      R     MOV     DPTR,#cid
0087 E0                MOVX    A,@DPTR
0088 B41819            CJNE    A,#018H,?C0199
008B 7BFF              MOV     R3,#0FFH
008D 7A00        R     MOV     R2,#HIGH ?SC_1822
008F 7900        R     MOV     R1,#LOW ?SC_1822
0091         ?C0268:
0091 800E              SJMP    ?C0270
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 70  

                                           ; SOURCE LINE # 995
0093         ?C0204:
0093 7BFF              MOV     R3,#0FFH
0095 7A00        R     MOV     R2,#HIGH ?SC_1805
0097 7900        R     MOV     R1,#LOW ?SC_1805
0099         ?C0269:
0099 8006              SJMP    ?C0270
                                           ; SOURCE LINE # 996
009B         ?C0205:
009B 7BFF              MOV     R3,#0FFH
009D 7A00        R     MOV     R2,#HIGH ?SC_1813
009F 7900        R     MOV     R1,#LOW ?SC_1813
00A1         ?C0270:
00A1 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 997
00A4         ?C0199:
                                           ; SOURCE LINE # 999
00A4 900000      R     MOV     DPTR,#vid
00A7 E0                MOVX    A,@DPTR
00A8 FF                MOV     R7,A
00A9 64C2              XRL     A,#0C2H
00AB 6005              JZ      ?C0207
00AD EF                MOV     A,R7
00AE 641C              XRL     A,#01CH
00B0 7031              JNZ     ?C0206
00B2         ?C0207:
                                           ; SOURCE LINE # 1000
00B2 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 1001
00B4 120000      R     LCALL   L?0355
                                           ; SOURCE LINE # 1002
00B7 7BEA              MOV     R3,#0EAH
                                           ; SOURCE LINE # 1003
00B9 120000      R     LCALL   L?0332
00BC 120000      R     LCALL   L?0279
00BF E0                MOVX    A,@DPTR
00C0 FF                MOV     R7,A
00C1 900000      R     MOV     DPTR,#dat0
00C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1004
00C5 7405              MOV     A,#05H
00C7 120000      R     LCALL   L?0308
00CA A3                INC     DPTR
00CB EF                MOV     A,R7
00CC F0                MOVX    @DPTR,A
00CD 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1005
00D0 900000      R     MOV     DPTR,#dat0
00D3 E0                MOVX    A,@DPTR
00D4 20E603            JB      ACC.6,$ + 6H
00D7 020000      R     LJMP    ?C0216
00DA 7BFF              MOV     R3,#0FFH
00DC 7A00        R     MOV     R2,#HIGH ?SC_3044
00DE 7900        R     MOV     R1,#LOW ?SC_3044
                                           ; SOURCE LINE # 1006
00E0 020000      R     LJMP    ?C0271
00E3         ?C0206:
                                           ; SOURCE LINE # 1007
00E3 900000      R     MOV     DPTR,#vid
00E6 E0                MOVX    A,@DPTR
00E7 64EF              XRL     A,#0EFH
00E9 7067              JNZ     ?C0210
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 71  

                                           ; SOURCE LINE # 1008
00EB A3                INC     DPTR
00EC E0                MOVX    A,@DPTR
00ED 6418              XRL     A,#018H
00EF 7D01              MOV     R5,#01H
00F1 7021              JNZ     ?C0211
                                           ; SOURCE LINE # 1009
00F3 7F35              MOV     R7,#035H
00F5 120000      E     LCALL   _SpiFlashCmd
                                           ; SOURCE LINE # 1010
00F8 7F01              MOV     R7,#01H
00FA 120000      E     LCALL   _SpiFlashDmaReadLenByte
                                           ; SOURCE LINE # 1011
00FD 7BF3              MOV     R3,#0F3H
                                           ; SOURCE LINE # 1012
00FF 120000      R     LCALL   L?0332
0102 120000      R     LCALL   L?0279
0105 E0                MOVX    A,@DPTR
0106 FF                MOV     R7,A
0107 900000      R     MOV     DPTR,#dat0
010A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1013
010B 7435              MOV     A,#035H
010D 120000      R     LCALL   L?0308
0110 A3                INC     DPTR
0111 EF                MOV     A,R7
                                           ; SOURCE LINE # 1014
0112 803A              SJMP    ?C0266
0114         ?C0211:
                                           ; SOURCE LINE # 1015
                                           ; SOURCE LINE # 1016
0114 7F05              MOV     R7,#05H
0116 120000      E     LCALL   _SpiFlashCmd
                                           ; SOURCE LINE # 1017
0119 7F02              MOV     R7,#02H
011B 120000      E     LCALL   _SpiFlashDmaReadLenByte
                                           ; SOURCE LINE # 1018
011E 7BFA              MOV     R3,#0FAH
                                           ; SOURCE LINE # 1019
0120 120000      R     LCALL   L?0314
0123 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 1020
0126 120000      R     LCALL   L?0347
0129 120000      R     LCALL   L?0279
012C 120000      R     LCALL   L?0371
                                           ; SOURCE LINE # 1021
012F 7A00        R     MOV     R2,#HIGH ?SC_3058
0131 7900        R     MOV     R1,#LOW ?SC_3058
0133 120000      R     LCALL   L?0357
                                           ; SOURCE LINE # 1022
0136 7A00        R     MOV     R2,#HIGH ?SC_3092
0138 7900        R     MOV     R1,#LOW ?SC_3092
013A 7405              MOV     A,#05H
013C 120000      R     LCALL   L?0370
013F 900000      R     MOV     DPTR,#dat0
0142 E0                MOVX    A,@DPTR
0143 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
0146 F0                MOVX    @DPTR,A
0147 900000      R     MOV     DPTR,#dat1
014A E0                MOVX    A,@DPTR
014B 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
014E         ?C0266:
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 72  

014E F0                MOVX    @DPTR,A
014F 020000      E     LJMP    _Printf
                                           ; SOURCE LINE # 1023
                                           ; SOURCE LINE # 1024
0152         ?C0210:
                                           ; SOURCE LINE # 1025
0152 900000      R     MOV     DPTR,#vid
0155 E0                MOVX    A,@DPTR
0156 6420              XRL     A,#020H
0158 7064              JNZ     ?C0216
                                           ; SOURCE LINE # 1026
015A A3                INC     DPTR
015B E0                MOVX    A,@DPTR
015C 6418              XRL     A,#018H
015E 6009              JZ      ?C0215
                                           ; SOURCE LINE # 1027
0160 7BFF              MOV     R3,#0FFH
0162 7A00        R     MOV     R2,#HIGH ?SC_3120
0164 7900        R     MOV     R1,#LOW ?SC_3120
0166         ?C0271:
0166 020000      E     LJMP    _Puts
                                           ; SOURCE LINE # 1029
0169         ?C0215:
                                           ; SOURCE LINE # 1031
0169 7F85              MOV     R7,#085H
                                           ; SOURCE LINE # 1032
016B 120000      R     LCALL   L?0355
                                           ; SOURCE LINE # 1033
016E 7B09              MOV     R3,#09H
0170 7A04              MOV     R2,#04H
0172 E4                CLR     A
0173 1D                DEC     R5
0174 1F                DEC     R7
0175 120000      E     LCALL   _SpiFlashDmaStart
                                           ; SOURCE LINE # 1034
0178 E500        E     MOV     A,regTW88+01H
017A 24D0              ADD     A,#0D0H
017C 120000      R     LCALL   L?0279
017F E0                MOVX    A,@DPTR
0180 900000      R     MOV     DPTR,#dat0
0183 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1035
0184 7BFF              MOV     R3,#0FFH
0186 7A00        R     MOV     R2,#HIGH ?SC_3134
0188 7900        R     MOV     R1,#LOW ?SC_3134
018A 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
018D F0                MOVX    @DPTR,A
018E 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1038
0191 7D01              MOV     R5,#01H
0193 7FB5              MOV     R7,#0B5H
0195 120000      E     LCALL   _SpiFlashCmd
                                           ; SOURCE LINE # 1039
0198 7F02              MOV     R7,#02H
019A 120000      E     LCALL   _SpiFlashDmaReadLenByte
                                           ; SOURCE LINE # 1040
019D 7B10              MOV     R3,#010H
019F 7A04              MOV     R2,#04H
01A1 E4                CLR     A
01A2 1D                DEC     R5
01A3 FF                MOV     R7,A
01A4 120000      E     LCALL   _SpiFlashDmaStart
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 73  

                                           ; SOURCE LINE # 1041
01A7 E500        E     MOV     A,regTW88+01H
01A9 24D0              ADD     A,#0D0H
01AB 120000      R     LCALL   L?0279
                                           ; SOURCE LINE # 1042
01AE 120000      R     LCALL   L?0347
01B1 120000      R     LCALL   L?0279
01B4 120000      R     LCALL   L?0372
                                           ; SOURCE LINE # 1043
01B7 7A00        R     MOV     R2,#HIGH ?SC_3160
01B9 7900        R     MOV     R1,#LOW ?SC_3160
01BB 120000      R     LCALL   L?0357
                                           ; SOURCE LINE # 1044
                                           ; SOURCE LINE # 1045
01BE         ?C0216:
01BE 22                RET     
01BF         L?0314:
01BF 7A03              MOV     R2,#03H
01C1 E4                CLR     A
01C2 1D                DEC     R5
01C3 FF                MOV     R7,A
01C4 120000      E     LCALL   _SpiFlashDmaStart
01C7 E500        E     MOV     A,regTW88+01H
01C9 24D0              ADD     A,#0D0H
01CB 22                RET     
01CC         L?0332:
01CC 7A03              MOV     R2,#03H
01CE E4                CLR     A
01CF 1D                DEC     R5
01D0 1F                DEC     R7
01D1 120000      E     LCALL   _SpiFlashDmaStart
01D4 E500        E     MOV     A,regTW88+01H
01D6 24D0              ADD     A,#0D0H
01D8 22                RET     
01D9         L?0355:
01D9 7D01              MOV     R5,#01H
01DB 120000      E     LCALL   _SpiFlashCmd
01DE 7F01              MOV     R7,#01H
01E0 120000      E     LCALL   _SpiFlashDmaReadLenByte
01E3 22                RET     
01E4         L?0357:
01E4 7BFF              MOV     R3,#0FFH
01E6 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
01E9 EF                MOV     A,R7
01EA F0                MOVX    @DPTR,A
01EB A3                INC     DPTR
01EC EE                MOV     A,R6
01ED F0                MOVX    @DPTR,A
01EE 120000      E     LCALL   _dPrintf
01F1 22                RET     
             ; FUNCTION SPI_Status (END)

             ; FUNCTION _SPI_dump (BEGIN)
                                           ; SOURCE LINE # 1051
0000 900000      R     MOV     DPTR,#spiaddr
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1052
                                           ; SOURCE LINE # 1053
0006 900000      R     MOV     DPTR,#ptr
0009 7401              MOV     A,#01H
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 74  

000D 120000      R     LCALL   L?0326
                                           ; SOURCE LINE # 1054
0010 A3                INC     DPTR
0011 120000      E     LCALL   ?C?LSTKXDATA
0014 00                DB      00H
0015 00                DB      00H
0016 00                DB      00H
0017 80                DB      080H
                                           ; SOURCE LINE # 1057
0018 900000      R     MOV     DPTR,#cnt
001B 120000      R     LCALL   L?0320
001E 900000      E     MOV     DPTR,#?_SpiFlashDmaRead2XMem?BYTE+07H
0021 CF                XCH     A,R7
0022 F0                MOVX    @DPTR,A
0023 A3                INC     DPTR
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
0026 900000      R     MOV     DPTR,#spiaddr
0029 120000      R     LCALL   L?0287
002C FF                MOV     R7,A
002D 120000      E     LCALL   _SpiFlashDmaRead2XMem
                                           ; SOURCE LINE # 1059
0030 E4                CLR     A
0031 900000      R     MOV     DPTR,#j
0034 F0                MOVX    @DPTR,A
0035         ?C0217:
                                           ; SOURCE LINE # 1060
0035 900000      R     MOV     DPTR,#j
0038 E0                MOVX    A,@DPTR
0039 75F010            MOV     B,#010H
003C A4                MUL     AB
003D FF                MOV     R7,A
003E E4                CLR     A
003F FC                MOV     R4,A
0040 FD                MOV     R5,A
0041 900000      R     MOV     DPTR,#spiaddr
0044 E0                MOVX    A,@DPTR
0045 F8                MOV     R0,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 F9                MOV     R1,A
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B FA                MOV     R2,A
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E 2F                ADD     A,R7
004F FF                MOV     R7,A
0050 EA                MOV     A,R2
0051 35F0              ADDC    A,B
0053 FE                MOV     R6,A
0054 ED                MOV     A,R5
0055 39                ADDC    A,R1
0056 FD                MOV     R5,A
0057 EC                MOV     A,R4
0058 38                ADDC    A,R0
0059 FC                MOV     R4,A
005A 120000      R     LCALL   L?0317
005D 7A00        R     MOV     R2,#HIGH ?SC_3197
005F 7900        R     MOV     R1,#LOW ?SC_3197
                                           ; SOURCE LINE # 1061
0061 120000      R     LCALL   L?0361
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 75  

0064         ?C0220:
0064 120000      R     LCALL   L?0373
0067 9408              SUBB    A,#08H
0069 5008              JNC     ?C0221
006B 120000      R     LCALL   L?0297
006E 120000      R     LCALL   L?0350
0071 80F1              SJMP    ?C0220
0073         ?C0221:
                                           ; SOURCE LINE # 1062
0073 7BFF              MOV     R3,#0FFH
0075 7A00        R     MOV     R2,#HIGH ?SC_3210
0077 7900        R     MOV     R1,#LOW ?SC_3210
0079 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1063
007C         ?C0223:
007C 120000      R     LCALL   L?0373
007F 9410              SUBB    A,#010H
0081 5008              JNC     ?C0224
0083 120000      R     LCALL   L?0297
0086 120000      R     LCALL   L?0350
0089 80F1              SJMP    ?C0223
008B         ?C0224:
                                           ; SOURCE LINE # 1064
008B 7A00        R     MOV     R2,#HIGH ?SC_3213
008D 7900        R     MOV     R1,#LOW ?SC_3213
                                           ; SOURCE LINE # 1065
008F 120000      R     LCALL   L?0361
0092         ?C0226:
0092 120000      R     LCALL   L?0374
0095 9410              SUBB    A,#010H
0097 502C              JNC     ?C0219
                                           ; SOURCE LINE # 1066
0099 120000      R     LCALL   L?0298
009C FF                MOV     R7,A
;---- Variable 'c' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1067
009D C3                CLR     C
009E 9420              SUBB    A,#020H
00A0 4012              JC      ?C0229
00A2 EF                MOV     A,R7
00A3 9480              SUBB    A,#080H
00A5 500D              JNC     ?C0229
00A7 7BFF              MOV     R3,#0FFH
00A9 7A00        R     MOV     R2,#HIGH ?SC_3216
00AB 7900        R     MOV     R1,#LOW ?SC_3216
00AD 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
00B0 EF                MOV     A,R7
00B1 F0                MOVX    @DPTR,A
00B2 8006              SJMP    ?C0272
00B4         ?C0229:
                                           ; SOURCE LINE # 1068
00B4 7BFF              MOV     R3,#0FFH
00B6 7A00        R     MOV     R2,#HIGH ?SC_3219
00B8 7900        R     MOV     R1,#LOW ?SC_3219
00BA         ?C0272:
00BA 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1069
00BD         ?C0228:
00BD 900000      R     MOV     DPTR,#i
00C0 E0                MOVX    A,@DPTR
00C1 04                INC     A
00C2 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 76  

00C3 80CD              SJMP    ?C0226
                                           ; SOURCE LINE # 1070
00C5         ?C0219:
00C5 900000      R     MOV     DPTR,#j
00C8 E0                MOVX    A,@DPTR
00C9 04                INC     A
00CA F0                MOVX    @DPTR,A
00CB E0                MOVX    A,@DPTR
00CC C3                CLR     C
00CD 9408              SUBB    A,#08H
00CF 5003              JNC     $ + 5H
00D1 020000      R     LJMP    ?C0217
                                           ; SOURCE LINE # 1071
00D4         ?C0231:
00D4 22                RET     
00D5         L?0350:
00D5 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
00D8 F0                MOVX    @DPTR,A
00D9 120000      E     LCALL   _Printf
00DC 900000      R     MOV     DPTR,#i
00DF E0                MOVX    A,@DPTR
00E0 04                INC     A
00E1 F0                MOVX    @DPTR,A
00E2 22                RET     
00E3         L?0361:
00E3 7BFF              MOV     R3,#0FFH
00E5 120000      E     LCALL   _Printf
00E8 E4                CLR     A
00E9 900000      R     MOV     DPTR,#i
00EC F0                MOVX    @DPTR,A
00ED 22                RET     
             ; FUNCTION _SPI_dump (END)

C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 77  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_SaveDebugLevelEE. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SPI_dump. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  spiaddr. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
  ptr. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0004H  3
  cnt. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0007H  4
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000BH  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000CH  1
  c. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_stricmp . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SPI_SetReadModeByRegister . . . . . .  EXTERN   CODE   PROC     -----  -----
EE_FindCurrInfo. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonitorSPIC. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  cmd_len. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000BH  1
  cmd. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  dat0 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  dat1 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  dat2 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  cnt. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  spiaddr. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0006H  4
  vdata. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
argc . . . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_delay1ms. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
EE_PrintCurrInfo . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
HelpMonitorSPIC. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SPI_PageProgram . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SPI_Buffer . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  128
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SPI_BlockErase. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
argv . . . . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  -----
EE_CleanBlocks . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SPI_SectorErase . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SpiFlashCmd . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_PCMODEDATA. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  han. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  van. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  vfreq. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  htotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  vtotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  hsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  vsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  offseth. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0010H  2
  offsetv. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0012H  2
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  dummy2 . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  dummy3 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0018H  1
_SpiFlashDmaBuffAddr . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_SpiFlashDmaStart. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
EE_Check . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SPIIMAGE . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 78  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  top. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  bottom . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
_SpiFlashDmaReadLen. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SPI_Status . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  dat0 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  dat1 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  vid. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  cid. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
EE_Format. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SLIDEIMAGE . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
_WaitVBlank. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
ClearBasicEE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonitorSPI . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  spiaddr. . . . . . . . . . . . . . .  STATIC   XDATA  U_LONG   0000H  4
  spiaddr. . . . . . . . . . . . . . .  STATIC   XDATA  U_LONG   0004H  4
  spiaddr. . . . . . . . . . . . . . .  STATIC   XDATA  U_LONG   0008H  4
  source . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
  dest . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0004H  4
  cnt. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0008H  4
  mod. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  spiaddr. . . . . . . . . . . . . . .  STATIC   XDATA  U_LONG   000CH  4
  ptr. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0003H  4
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  j. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_dPrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
regTW88. . . . . . . . . . . . . . . .  EXTERN   DATA   PTR      -----  2
_SpiFlashDmaRead2XMem. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_EE_Read . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SaveFWRevEE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SpiFlashDmaReadLenByte. . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SpiFlashDmaDestType . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
EE_RepairMoveDone. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonitorEE. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  dat1 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
_EE_Write. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_a2h . . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


C51 COMPILER V9.00   MONITOR_SPI                                                           06/05/2014 15:34:59 PAGE 79  

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5367    ----
   CONSTANT SIZE    =   3221    ----
   XDATA SIZE       =     16      47
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
