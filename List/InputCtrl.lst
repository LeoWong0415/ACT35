C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE INPUTCTRL
OBJECT MODULE PLACED IN .\Output\InputCtrl.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE InputCtrl.c LARGE OPTIMIZE(9,SPEED) REGFILE(.\Output\TW8835_REV31.ORC) BROW
                    -SE MODDP2 DEFINE(EVB_30,EVB_31,nullFn=//) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\List\InputCtrl.lst) OBJECT(.\Output\In
                    -putCtrl.obj)

line level    source

   1          /**
   2           * @file
   3           * InputCtrl.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *      Copyright (C) 2011~2012 Intersil Corporation
   8           * @section DESCRIPTION
   9           *      see video input control 
  10           *
  11          */
  12          /*
  13          * video input control 
  14          *
  15          *       +-----+ LoSpeed  +-----+  +---------+   +-+           +------+
  16          *       |     | Decoder  |     |=>| decoder |==>| |==========>|      |
  17          *       |     | =======> |     |  +---------+   | |           |      |
  18          *       |     |          |     |                | |           |      |
  19          *       |     | HiSpeed  |inMux|                | |           |      |
  20          *       |     | ARGB     |     |  +---------+   | |           |      |
  21          *       |INPUT| =======> |     |=>|  ARGB   |==>| |==========>|Scaler|
  22          *       |     |          +-----+  +---------+   | |           |      |
  23          *       |     | Digital                         | |           |      |
  24          *       |     | DTV                             | |  +-----+  |      |
  25          *       |     | ===============================>| |=>| DTV |=>|      |
  26          *       +-----+                                 +-+  +-----+  +------+
  27          *                                                |    +--------+
  28          *                                                +==> |Measure |
  29          *                                                     +--------+
  30          */
  31          
  32          #include "Config.h"
  33          #include "reg.h"
  34          #include "typedefs.h"
  35          #include "TW8835.h"
  36          
  37          #include "Global.h"
  38          #include "CPU.h"
  39          #include "Printf.h"
  40          #include "util.h"
  41          #include "Monitor.h"
  42          
  43          #include "I2C.h"
  44          #include "spi.h"
  45          
  46          #include "main.h"
  47          #include "SOsd.h"
  48          #include "FOsd.h"
  49          #include "decoder.h"
  50          #include "Scaler.h"
  51          #include "InputCtrl.h"
  52          #include "EEPROM.h"
  53          #include "ImageCtrl.h"
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 2   

  54          #include "Settings.h"
  55          #include "measure.h"
  56          #include "vadc.h"
  57          #include "dtv.h"
  58          #include "InputCtrl.h"
  59          #include "OutputCtrl.h"
  60          #include "SOsdMenu.h"
  61          #ifdef SUPPORT_HDMI_SiIRX
              #include "hdmi_SIL9127.H"
              #endif
  64          #ifdef SUPPORT_HDMI_EP9351
              #include "hdmi_EP9351.H"
              #endif
  67          
  68          /*
  69          
  70          SDTV 480i/60M
  71                   576i/50        
  72                   480p SMPTE 267M-1995
  73          HDTV 1080i/60M
  74                   1080i/50
  75                   720p/60M
  76                   720p/50
  77                   1080p = SMPTE 274M-1995 1080p/24 & 1080p/24M
  78                                           1080p/50 1080p/60M
  79          
  80          
  81                                  scan lines       field1 field2   half
  82          480i/60M        525                      23~262 285~524  142x
  83          576i/50         625                      23~310 335~622
  84          1080i           1125
  85          720p            750
  86          
  87          standard
  88          480i/60M        SMPTE 170M-1994.
  89                                  ITU-R BT.601-4
  90                                  SMPTE 125M-1995
  91                                  SMPTE 259M-1997
  92          */
  93          
  94          //=============================================================================
  95          // INPUT CONTROL
  96          //=============================================================================
  97          // Input Module
  98          // start from 0x040
  99          //0x040~0x049
 100          //R040[1:0]     Input Select            0:InternalDecoder,1:ARGB/YUV(YPbPr),2:DTV(BT656)
 101          //R041[0]       Input data format       0:YCbCr 1:RGB
 102          //=============================================================================
 103          
 104          XDATA   BYTE    InputMain;
 105          XDATA   BYTE    InputSubMode;
 106          
 107          //-----------------------------------------------------------------------------
 108          /**
 109          * Get InputMain value
 110          *
 111          * friend function.
 112          * Other bank, specially Menu Bank(Bank2) needs this InputMain global variable.
 113          */
 114          BYTE GetInputMain(void)
 115          {
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 3   

 116   1              return InputMain;
 117   1      }
 118          //-----------------------------------------------------------------------------
 119          /**
 120          * Set InputMain value
 121          *
 122          * @see GetInputMain
 123          */
 124          void SetInputMain(BYTE input)
 125          {
 126   1              InputMain = input;
 127   1              //update EE
 128   1      }
 129          
 130          #ifdef MODEL_TW8835_EXTI2C
              #define VBLANK_WAIT_VALUE       0x0100 
              #else
 133          #define VBLANK_WAIT_VALUE       0xFFFE 
 134          #endif
 135          
 136          //-----------------------------------------------------------------------------
 137          /**
 138          * wait Vertical Blank
 139          *
 140          * You can use this function after you turn off the PD_SSPLL(REG0FC[7]).
 141          * 0xFFFE value uses max 40ms on Cache + 72MHz.
 142          */
 143          void WaitVBlank(BYTE cnt)
 144          {
 145   1              XDATA   BYTE i;
 146   1              WORD loop;
 147   1              DECLARE_LOCAL_page
 148   1      
 149   1              ReadTW88Page(page);
 150   1              WriteTW88Page(PAGE0_GENERAL );
 151   1      
 152   1              for ( i=0; i<cnt; i++ ) {
 153   2                      WriteTW88(REG002, 0xff );
 154   2                      loop = 0;
 155   2                      while (!( ReadTW88(REG002 ) & 0x40 ) ) {
 156   3                              // wait VBlank
 157   3                              loop++;
 158   3                              if(loop > VBLANK_WAIT_VALUE  ) {
 159   4                                      wPrintf("\nERR:WaitVBlank");
 160   4                                      break;
 161   4                              }
 162   3                      }               
 163   2              }
 164   1              WriteTW88Page(page);
 165   1      }
 166          
 167          //-----------------------------------------------------------------------------
 168          /**
 169          * wait Vertical Blank
 170          *
 171          * @see WaitVBlank
 172          */
 173          void Wait1VBlank(void)
 174          {
 175   1              WORD loop;
 176   1              DECLARE_LOCAL_page
 177   1      
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 4   

 178   1              ReadTW88Page(page);
 179   1              WriteTW88Page(PAGE0_GENERAL );
 180   1      
 181   1              WriteTW88(REG002, 0xff );
 182   1              loop = 0;
 183   1              while (!( ReadTW88(REG002 ) & 0x40 ) ) {
 184   2                      // wait VBlank
 185   2                      loop++;
 186   2                      if(loop > VBLANK_WAIT_VALUE  ) {
 187   3                              wPrintf("\nERR:WaitVBlank");
 188   3                              break;
 189   3                      }
 190   2              }
 191   1              WriteTW88Page(page);
 192   1      }
 193          
 194          //-----------------------------------------------------------------------------
 195          //class:Input
 196          /**
 197          * Set input path & color domain
 198          *
 199          *       register
 200          *       REG040[1:0]
 201          *       REG041[0]
 202          *
 203          * @param path: input mode
 204          *               - 0:InternalDecoder
 205          *               - 1:AnalogRGB/Component. PC or Component
 206          *               - 2:BT656(DTV). Note, HDTV use BT709.
 207          *               - 3:DTV2 ??   <--TW8835 do not support                                  
 208          * @param format: data format.
 209          *               - 0:YCbCr 1:RGB
 210          */
 211          void InputSetSource(BYTE path, BYTE format)
 212          {
 213   1              BYTE r040, r041;
 214   1      
 215   1              WriteTW88Page( PAGE0_GENERAL );
 216   1              r040 = ReadTW88(REG040_INPUT_CTRL_I) & ~0x17;   //clear [2] also.
 217   1              r041 = ReadTW88(REG041_INPUT_CTRL_II) & ~0x3F;
 218   1              r040 |= path;
 219   1              r041 |= format;
 220   1      
 221   1              if(path==INPUT_PATH_DECODER) {          //InternalDecoder
 222   2                      r041 |= 0x0C;                                   //input sync detion edge control. falling edge
 223   2              }
 224   1              else if(path==INPUT_PATH_VADC) {        //ARGB(PC or Component)
 225   2                      r040 |= 0x10;                                   //invert clock
 226   2                      if(InputMain==INPUT_COMP) {
 227   3                              r041 |= 0x20;                           //progressive
 228   3                              r041 |= 0x10;                           //implicit DE mode.(Component, don't care)
 229   3                              r041 |= 0x0C;                           //input sync detion edge control. falling edge
 230   3                              r041 |= 0x02;                           //input field inversion
 231   3                      }
 232   2                      else {
 233   3                              //??r041 |= 0x20;                       //progressive
 234   3                              r041 |= 0x10;                           //implicit DE mode.(Component, don't care)
 235   3                              r041 |= 0x0C;                           //input sync detion edge control. falling edge
 236   3                      }
 237   2              }
 238   1              else if(path==INPUT_PATH_DTV) {         //DTV
 239   2                                                                                      //clock normal
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 5   

 240   2                      r040 |= 0x08;                                   //INT_4 pin is turn into dtvde pin
 241   2                      //r041 |= 0x20;                                 // progressive
 242   2                      r041 |= 0x10;                                   //implicit DE mode
 243   2                      //r041 |= 0x0C;                                 //input sync detion edge control. falling edge
 244   2              }
 245   1              else if(path==INPUT_PATH_BT656) {
 246   2                      //target r040:0x06 r041:0x00
 247   2              }
 248   1              dPrintf("\nInputSetSource r040:%bx r041:%bx",r040,r041);
 249   1              WriteTW88(REG040_INPUT_CTRL_I,r040);
 250   1              WriteTW88(REG041_INPUT_CTRL_II,r041);
 251   1      }
 252          #ifdef UNCALLED_SEGMENT
              //-----------------------------------------------------------------------------
              //class:Input
              void InputSetProgressiveField(fOn)
              {
                      WriteTW88Page(PAGE0_INPUT);
                      if(fOn) WriteTW88(REG041_INPUT_CTRL_II, ReadTW88(REG041_INPUT_CTRL_II) | 0x20);     //On Field for Prog
                      else    WriteTW88(REG041_INPUT_CTRL_II, ReadTW88(REG041_INPUT_CTRL_II) & ~0x20);        //Off Field for Prog
              }
              #endif
 262          
 263          #ifdef UNCALLED_SEGMENT
              //-----------------------------------------------------------------------------
              //class:Input
              void InputSetPolarity(BYTE V,BYTE H, BYTE F)
              {
                      BYTE r041;
                      WriteTW88Page( PAGE0_INPUT );
              
                      r041 = ReadTW88(REG041_INPUT_CTRL_II ) & ~0x0E;
                      if(V)   r041 |= 0x08;
                      if(H)   r041 |= 0x04;
                      if(F)   r041 |= 0x02;
                      WriteTW88(REG041_INPUT_CTRL_II, r041);
              }
              //-----------------------------------------------------------------------------
              //class:Input
              BYTE InputGetVPolarity(void)
              {
                      BYTE r041;
                      WriteTW88Page( PAGE0_INPUT );
              
                      r041 = ReadTW88(REG041_INPUT_CTRL_II );
                      if(r041 & 0x08) return ON;              //detect falling edge
                      else                    return OFF;             //detect rising edge
              }
              //-----------------------------------------------------------------------------
              //class:Input
              BYTE InputGetHPolarity(void)
              {
                      BYTE r041;
                      WriteTW88Page( PAGE0_INPUT );
              
                      r041 = ReadTW88(REG041_INPUT_CTRL_II );
                      if(r041 & 0x04) return ON;              //detect falling edge
                      else                    return OFF;             //detect rising edge
              }
              //-----------------------------------------------------------------------------
              //class:Input
              BYTE InputGetFieldPolarity(void)
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 6   

              {
                      BYTE r041;
                      WriteTW88Page( PAGE0_INPUT );
              
                      r041 = ReadTW88(REG041_INPUT_CTRL_II );
                      if(r041 & 0x02) return ON;              //input field inversion
                      else                    return OFF;             //
              }
              #endif
 311          
 312          #if defined(SUPPORT_COMPONENT)
 313          //-----------------------------------------------------------------------------
 314          //class:Input
 315          /**
 316          * set Field Polarity
 317          *
 318          * R041[1] input field control. 1:inversion
 319          */
 320          void InputSetFieldPolarity(BYTE fInv)
 321          {
 322   1              BYTE r041;
 323   1              WriteTW88Page( PAGE0_INPUT );
 324   1      
 325   1              r041 = ReadTW88(REG041_INPUT_CTRL_II );
 326   1              if(fInv)        WriteTW88(REG041_INPUT_CTRL_II, r041 | 0x02);
 327   1              else            WriteTW88(REG041_INPUT_CTRL_II, r041 & ~0x02);
 328   1      }
 329          #endif
 330          
 331          #ifdef UNCALLED_SEGMENT
              //-----------------------------------------------------------------------------
              //class:Input
              /*
              * R041[0] Input data format selection 1:RGB
              */
              BYTE InputGetColorDomain(void)
              {
                      BYTE r041;
                      WriteTW88Page( PAGE0_INPUT );
              
                      r041 = ReadTW88(REG041_INPUT_CTRL_II );
                      if(r041 & 0x01) return ON;              //RGB color
                      else                    return OFF;             //YUV color
              }
              #endif
 347          
 348          //-----------------------------------------------------------------------------
 349          //class:Input
 350          /**
 351          * set input crop
 352          *
 353          * input cropping for implicit DE.
 354          * NOTE:InternalDecoder is not an implicit DE.
 355          *
 356          *       register
 357          *       REG040[7:6]REG045[7:0]  HCropStart
 358          *                          REG043[7:0]  VCropStart
 359          *       REG042[6:4]REG044[7:0]  VCropLength
 360          *       REG042[3:0]REG046[7:0]  HCropLength
 361          */
 362          void InputSetCrop( WORD x, WORD y, WORD w, WORD h )
 363          {
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 7   

 364   1              WriteTW88Page( PAGE0_INPUT );
 365   1      
 366   1              WriteTW88(REG040_INPUT_CTRL_I, (ReadTW88(REG040_INPUT_CTRL_I) & 0x3F) | ((x & 0x300)>>2) );
 367   1              WriteTW88(REG045, (BYTE)x);
 368   1              WriteTW88(REG043, (BYTE)y);
 369   1      
 370   1              WriteTW88(REG042, ((h&0xF00) >> 4)|(w >>8) );
 371   1              WriteTW88(REG044, (BYTE)h);
 372   1              WriteTW88(REG046, (BYTE)w);
 373   1              //dPrintf("\nInput Crop Window: x = %d, y = %d, w = %d, h = %d", x, y, w, h );
 374   1      }
 375          
 376          #if 0
              //-----------------------------------------------------------------------------
              //class:Input
              void InputSetCropStart( WORD x, WORD y)
              {
                      WriteTW88Page( PAGE0_INPUT );
                      WriteTW88(REG040, (ReadTW88(REG040) & 0x3F) | ((x & 0xF00)>>2) );
                      WriteTW88(REG045, (BYTE)x);
                      WriteTW88(REG043, (BYTE)y);
                      //dPrintf("\nInput Crop Window: x = %d, y = %d", x, y);
              }
              #endif
 388          
 389          #ifdef SUPPORT_PC
 390          //-----------------------------------------------------------------------------
 391          //class:Input
 392          /**
 393          * set Horizontal Start at InputCrop
 394          */
 395          void InputSetHStart( WORD x)
 396          {
 397   1              WriteTW88Page( PAGE0_INPUT );
 398   1      
 399   1              WriteTW88(REG040, (ReadTW88(REG040) & 0x3F) | ((x & 0xF00)>>2) );
 400   1              WriteTW88(REG045, (BYTE)x);
 401   1              //dPrintf("\nInput Crop Window: x = %d", x);
 402   1      }
 403          #endif
 404          //-----------------------------------------------------------------------------
 405          //class:Input
 406          /**
 407          * get Horizontal Start at InputCrop
 408          */
 409          WORD InputGetHStart(void)
 410          {
 411   1              WORD wValue;
 412   1              WriteTW88Page( PAGE0_INPUT );
 413   1      
 414   1              wValue = ReadTW88(REG040) & 0xC0;
 415   1              wValue <<= 2;
 416   1              wValue |=  ReadTW88(REG045);
 417   1              return wValue;
 418   1      }
 419          
 420          #if 0
              //-----------------------------------------------------------------------------
              //class:Input
              void InputSetVStart( WORD y)
              {
                      WriteTW88Page( PAGE0_INPUT );
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 8   

              
                      WriteTW88(REG043, (BYTE)y);
                      dPrintf("\nInput Crop Window: y = %d", y);
              }
              //-----------------------------------------------------------------------------
              //class:Input
              WORD InputGetVStart(void)
              {
                      WORD wValue;
                      WriteTW88Page( PAGE0_INPUT );
              
                      wValue = ReadTW88(REG043 );
                      return wValue;
              }
              #endif
 441          
 442          #if 0
              //-----------------------------------------------------------------------------
              //class:Input
              WORD InputGetHLen(void)
              {
                      WORD len;
                      WriteTW88Page( PAGE0_INPUT );
                      len =ReadTW88(REG042) & 0x0F;
                      len <<=8;
                      len |= ReadTW88(REG046);
                      return len;
              }
              //-----------------------------------------------------------------------------
              //class:Input
              WORD InputGetVLen(void)
              {
                      WORD len;
                      WriteTW88Page( PAGE0_INPUT );
                      len =ReadTW88(REG042) & 0x70;
                      len <<=4;
                      len |= ReadTW88(REG044);
                      return len;
              }
              #endif
 466          
 467          #if 0
              //-----------------------------------------------------------------------------
              //class:BT656Input
              //register
              //      R047[7] BT656 input control     0:External input, 1:Internal pattern generator
              void BT656InputSetFreerun(BYTE fOn)
              {
                      WriteTW88Page(PAGE0_INPUT);
                      if(fOn) WriteTW88(REG047,ReadTW88(REG047) | 0x80);
                      else    WriteTW88(REG047,ReadTW88(REG047) & ~0x80);
              }
              #endif
 479          //-----------------------------------------------------------------------------
 480          //class:BT656Input
 481          /**
 482          * set Freerun and invert clock flag on BT656
 483          *
 484          *       R047[7]
 485          *       R047[5]
 486          */
 487          void BT656InputFreerunClk(BYTE fFreerun, BYTE fInvClk)
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 9   

 488          {
 489   1              BYTE value;
 490   1              WriteTW88Page(PAGE0_INPUT);
 491   1              value = ReadTW88(REG047);
 492   1              if(fFreerun)    value |= 0x80;
 493   1              else                    value &= ~0x80;
 494   1              
 495   1              if(fInvClk)             value |= 0x20;
 496   1              else                    value &= ~0x20;
 497   1              WriteTW88(REG047, value);
 498   1      }
 499          
 500          //-----------------------------------------------------------------------------
 501          /**
 502          * print Input string
 503          */
 504          void PrintfInput(BYTE Input, BYTE debug)
 505          {
 506   1              if(debug==3) {
 507   2                      dPuts("\nInput:");
 508   2                      switch(Input) {
 509   3                      case 0: dPrintf("CVBS");                                        break;
 510   3                      case 1: dPrintf("SVIDEO");                                      break;
 511   3                      case 2: dPrintf("Component");                           break;
 512   3                      case 3: dPrintf("PC");                                          break;
 513   3                      case 4: dPrintf("DVI");                                         break;
 514   3                      case 5: dPrintf("HDMIPC");                                      break;
 515   3                      case 6: dPrintf("HDMITV");                                      break;
 516   3                      case 7: dPrintf("BT656");                                       break;
 517   3                      default: dPrintf("unknown:%02bd",Input);        break;
 518   3                      }
 519   2              }
 520   1              else {
 521   2                      Puts("\nInput:");
 522   2                      switch(Input) {
 523   3                      case 0: Printf("CVBS");                                         break;
 524   3                      case 1: Printf("SVIDEO");                                       break;
 525   3                      case 2: Printf("Component");                            break;
 526   3                      case 3: Printf("PC");                                           break;
 527   3                      case 4: Printf("DVI");                                          break;
 528   3                      case 5: Printf("HDMIPC");                                       break;
 529   3                      case 6: Printf("HDMITV");                                       break;
 530   3                      case 7: Printf("BT656");                                        break;
 531   3                      default: Printf("unknown:%02bd",Input);         break;
 532   3                      }
 533   2              }
 534   1      }
 535          
 536          //-----------------------------------------------------------------------------
 537          /**
 538          * Change Video Input.
 539          *
 540          * @param mode
 541          *       - INPUT_CVBS : ChangeCVBS
 542          *       - INPUT_SVIDEO: ChangeCVBS
 543          *       - INPUT_COMP : ChangeCOMPONENT
 544          *       - INPUT_PC :  ChangePC
 545          *       - INPUT_DVI : ChangeDVI
 546          *       - INPUT_HDMIPC:
 547          *       - INPUT_HDMITV: ChangeHDMI
 548          *       - INPUT_BT656: ChangeBT656
 549          * @see ChangeCVBS
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 10  

 550          */
 551          void ChangeInput( BYTE mode )
 552          {
 553   1              dPrintf("\nChangeInput:%02bx", mode);
 554   1      
 555   1              if(getNoSignalLogoStatus())
 556   1                      RemoveLogo();
 557   1      
 558   1      
 559   1              PrintfInput(mode,3);
 560   1              switch ( mode ) {
 561   2      #ifdef SUPPORT_CVBS
 562   2                      case INPUT_CVBS:
 563   2                              ChangeCVBS();
 564   2                              break;
 565   2      #endif
 566   2      #ifdef SUPPORT_SVIDEO
 567   2                      case INPUT_SVIDEO:
 568   2                              ChangeSVIDEO();
 569   2                              break;
 570   2      #endif
 571   2      #ifdef SUPPORT_COMPONENT
 572   2                      case INPUT_COMP:
 573   2                              ChangeCOMPONENT();
 574   2                              break;
 575   2      #endif
 576   2      #ifdef SUPPORT_PC
 577   2                      case INPUT_PC:
 578   2                              ChangePC();
 579   2                              break;
 580   2      #endif
 581   2      #ifdef SUPPORT_DVI
                              case INPUT_DVI:
                                      ChangeDVI();
                                      break;
              #endif
 586   2      #if defined(SUPPORT_HDMI_EP9351) || defined(SUPPORT_HDMI_SiIRX)
                              case INPUT_HDMIPC:
                              case INPUT_HDMITV:
                                      ChangeHDMI();
                                      break;
              #endif
 592   2      #ifdef SUPPORT_BT656
 593   2                      case INPUT_BT656:
 594   2                              ChangeBT656();
 595   2                              break;
 596   2      #endif
 597   2                      default:
 598   2                              ChangeCVBS();
 599   2                              break;
 600   2              }
 601   1      }
 602          //-----------------------------------------------------------------------------
 603          /**
 604          * move to next video input
 605          */
 606          void    InputModeNext( void )
 607          {
 608   1              BYTE next_input;
 609   1      
 610   1      #if defined(SUPPORT_HDMI_EP9351) || defined(SUPPORT_HDMI_SiIRX)
                      if(InputMain==INPUT_HDMIPC)
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 11  

                              next_input = InputMain + 2;
                      else
              #endif
 615   1              next_input = InputMain + 1;
 616   1      
 617   1              do {
 618   2                      if(next_input == INPUT_TOTAL)
 619   2                              next_input = INPUT_CVBS;        
 620   2      #ifndef SUPPORT_CVBS
                              if(next_input==INPUT_CVBS)
                                      next_input++;   
              #endif
 624   2      #ifndef SUPPORT_SVIDEO
                              if(next_input==INPUT_SVIDEO)
                                      next_input++;   
              #endif
 628   2      #ifndef SUPPORT_COMPONENT
                              if(next_input==INPUT_COMP)
                                      next_input++;   
              #endif
 632   2      #ifndef SUPPORT_PC
                              if(next_input==INPUT_PC)
                                      next_input++;   
              #endif
 636   2      #ifndef SUPPORT_DVI
 637   2                      if(next_input==INPUT_DVI)
 638   2                              next_input++;   
 639   2      #endif
 640   2      #if defined(SUPPORT_HDMI_EP9351) || defined(SUPPORT_HDMI_SiIRX)
                              if(next_input==INPUT_HDMIPC)
                                      next_input+=2;  
                              else if(next_input==INPUT_HDMITV)
                                      next_input++;
              #endif
 646   2      #ifndef SUPPORT_BT656
                              if(next_input==INPUT_COMP)
                                      next_input++;   
              #endif
 650   2      #if defined(SUPPORT_HDMI_EP9351) || defined(SUPPORT_HDMI_SiIRX)
                              if(next_input==INPUT_HDMIPC) {
                                      if(GetHdmiModeEE())  next_input = INPUT_HDMITV;
                              }
              #endif
 655   2              } while(next_input==INPUT_TOTAL);
 656   1      
 657   1              ChangeInput(next_input);
 658   1      }
 659          
 660          
 661          //=============================================================================
 662          // Input Control routine
 663          //=============================================================================
 664          
 665          extern CODE BYTE DataInitNTSC[];
 666          
 667          
 668          //-----------------------------------------------------------------------------
 669          /**
 670          * prepare video input register after FW download the default init values.
 671          *
 672          *       select input path
 673          *       turnoff freerun manual & turnon freerun auto.
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 12  

 674          *       assign default freerun Htotal&Vtotal
 675          *
 676          * @see I2CDeviceInitialize
 677          */              
 678          void InitInputAsDefault(void)
 679          {
 680   1              //---------------------------------
 681   1              //step1:
 682   1              //Before FW starts the ChangeInput, 
 683   1              //              link ISR & turnoff signal interrupt & NoSignal task,
 684   1              //              turn off LCD.
 685   1              FOsdIndexMsgPrint(FOSD_STR5_INPUTMAIN);         //prepare InputMain string
 686   1      
 687   1              LinkCheckAndSetInput();                                         //link CheckAndSetInput
 688   1              Interrupt_enableVideoDetect(OFF);                       //turnoff Video Signal Interrupt
 689   1              TaskNoSignal_setCmd(TASK_CMD_DONE);                     //turnoff NoSignal Task
 690   1              LedBackLight(OFF);                                                      //turnoff LedBackLight
 691   1      
 692   1              //---------------------------------
 693   1              //step2:
 694   1              //set system default
 695   1              //      Download the default register values.
 696   1              //      set sspll
 697   1              //      select MCU/SPI Clock
 698   1              dPuts("\nI2CDownload DataInitNTSC");
 699   1              I2CDeviceInitialize( DataInitNTSC, 0 );  //Pls, do not use this ....
 700   1      #ifdef MODEL_TW8835_EXTI2C_USE_PCLK
                      WriteTW88Page(PAGE4_CLOCK);
                      WriteTW88(REG4E0, 0x00);                                //use PCLK
              #endif
 704   1      
 705   1              if(SpiFlashVendor==SFLASH_VENDOR_MX) {
 706   2                      WriteTW88Page(PAGE4_CLOCK);
 707   2                      WriteTW88(REG4E1, (ReadTW88(REG4E1) & 0xF8) | 0x02);    //if Macronix SPI Flash, SPI_CK_DIV[2:0]=2
 708   2              }               
 709   1      #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
                      //If you want CKLPLL, select MCUSPI_CLK_PCLK 
                      McuSpiClkSelect(MCUSPI_CLK_PCLK);
              #endif
 713   1      
 714   1      
 715   1              //---------------------------------
 716   1              //step3:
 717   1              //      InputSource=>InMux=>Decoder=>VAdc=>BT656=>DTV=>Scaler=>Measure
 718   1              //-------------------
 719   1      
 720   1              //InputSource
 721   1              switch(InputMain) {
 722   2              case INPUT_CVBS:
 723   2              case INPUT_SVIDEO:
 724   2                      InputSetSource(INPUT_PATH_DECODER,INPUT_FORMAT_YCBCR);
 725   2                      break;
 726   2              case INPUT_COMP:        //target R040:31 R041:3E
 727   2                      InputSetSource(INPUT_PATH_VADC,INPUT_FORMAT_YCBCR);             
 728   2                      break;
 729   2              case INPUT_PC:          //target R040:31 R041:1D
 730   2                      InputSetSource(INPUT_PATH_VADC,INPUT_FORMAT_RGB);               
 731   2                      break;
 732   2              case INPUT_DVI:         //target R040:2A R041:11. Note:DtvInitDVI() overwite R040.
 733   2                      InputSetSource(INPUT_PATH_DTV,INPUT_FORMAT_RGB);                
 734   2                      break;
 735   2              case INPUT_HDMIPC:
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 13  

 736   2              case INPUT_HDMITV:      //target R040: R041:
 737   2                      InputSetSource(INPUT_PATH_DTV,INPUT_FORMAT_RGB);                
 738   2                      break;
 739   2              case INPUT_BT656:       //target R040:2A R041:00
 740   2                      InputSetSource(INPUT_PATH_BT656,INPUT_FORMAT_YCBCR);     
 741   2                      break;
 742   2              }
 743   1      
 744   1              //InMux
 745   1              InMuxSetInput(InputMain);
 746   1      
 747   1              //Decoder       
 748   1              DecoderFreerun(DECODER_FREERUN_AUTO);   //component,pc,dvi removed
 749   1      
 750   1              //aRGB(VAdc)
 751   1              VAdcSetDefaultFor();
 752   1      
 753   1              if(InputMain==INPUT_BT656)
 754   1                      BT656OutputEnable(ON,0);                        //R007[3]=1.DataInitNTSC clear it.
 755   1              else
 756   1                      BT656OutputEnable(OFF, 1);
 757   1      
 758   1              //BT656Input
 759   1              switch(InputMain) {
 760   2              case INPUT_CVBS:
 761   2              case INPUT_SVIDEO:
 762   2              case INPUT_COMP:
 763   2              case INPUT_PC:
 764   2                      break;
 765   2              case INPUT_DVI:
 766   2                      BT656InputFreerunClk(OFF, OFF);         //BT656 turnoff FreeRun
 767   2                      break;
 768   2              case INPUT_HDMIPC:
 769   2              case INPUT_HDMITV:
 770   2                      BT656InputFreerunClk(OFF, OFF);         //BT656 turnoff FreeRun
 771   2                      break;
 772   2              case INPUT_BT656:
 773   2                      BT656InputFreerunClk(OFF, ON);          //off freerun, on invert_clk
 774   2                      break;
 775   2              }
 776   1      
 777   1              //DTV
 778   1              switch(InputMain) {
 779   2              case INPUT_CVBS:
 780   2              case INPUT_SVIDEO:
 781   2              case INPUT_COMP:
 782   2              case INPUT_PC:
 783   2                      break;
 784   2      #ifdef SUPPORT_DVI
                      case INPUT_DVI:
                              DtvSetClockDelay(1);
                              DtvSetVSyncDelay(4);
              
                              DtvSetFieldDetectionRegion(ON,0x11);    // set Det field by WIN
                              DtvSetPolarity(0,0);
                              DtvSetRouteFormat(DTV_ROUTE_YPbPr,DTV_FORMAT_RGB565);
              #ifdef MODEL_TW8835FPGA
                              SetExtVAdcI2C(0x9A, 0); //AD9883. VGA
                      //      SetExtVAdcI2C(0x9A, 6);         //480P
              #endif
                              break;
              #endif
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 14  

 798   2              case INPUT_HDMIPC:
 799   2              case INPUT_HDMITV:
 800   2      #if defined(SUPPORT_HDMI_EP9351) || defined(SUPPORT_HDMI_SiIRX)
              
              #ifdef SUPPORT_HDMI_EP9351 
                              //default is RGB565. test RGB24.
              #ifdef SUPPORT_HDMI_24BIT
                              DtvSetRouteFormat(DTV_ROUTE_PrYPb,DTV_FORMAT_RGB); //RGB24. 120720
              #else
                              DtvSetRouteFormat(DTV_ROUTE_YPbPr,DTV_FORMAT_RGB565);
              #endif
              #endif
              #ifdef SUPPORT_HDMI_SiIRX
                              DtvSetRouteFormat(DTV_ROUTE_RGB, DTV_FORMAT_RGB);
              #endif
              #ifdef MODEL_TW8835FPGA
                              SetExtVAdcI2C(0x9A, 0); //AD9883. VGA
                      //      SetExtVAdcI2C(0x9A, 6);         //480P
              #endif
                              DtvSetClockDelay(1);    //BK111201
                              DtvSetVSyncDelay(4);    //BK111201
              
                              DtvSetFieldDetectionRegion(ON,0x11);    // set Det field by WIN
              #endif
 822   2                      break;
 823   2              case INPUT_BT656:
 824   2      #ifdef SUPPORT_BT656
 825   2                      DtvSetRouteFormat(DTV_ROUTE_PrYPb,DTV_FORMAT_INTERLACED_ITU656);
 826   2      #endif
 827   2      #ifdef MODEL_TW8835FPGA
                              SetExtVAdcI2C(0x9A, 0); //AD9883. VGA
                      //      SetExtVAdcI2C(0x9A, 6);         //480P
              #endif
 831   2                      break;
 832   2              }
 833   1      //BKTODO:120423. power down the external chip.
 834   1      //#if defined(SUPPORT_HDMI_EP9351)
 835   1      //      if(InputMain != INPUT_HDMIPC && InputMain != INPUT_HDMITV) {
 836   1      //              //power down
 837   1      //      }
 838   1      //#endif
 839   1      
 840   1      
 841   1              //scaler
 842   1              ScalerSetFreerunManual( OFF );          //component,pc,dvi removed
 843   1      
 844   1              //measure
 845   1              switch(InputMain) {
 846   2              case INPUT_CVBS:
 847   2              case INPUT_SVIDEO:
 848   2              case INPUT_COMP:
 849   2              case INPUT_PC:
 850   2                      //BKFYI. CVBS&SVIDEO was MeasSetWindow( 0, 0, 2200,1125 );
 851   2                      MeasSetWindow( 0, 0, 0xfff, 0xfff );    //set dummy window. 1600x600
 852   2                      MeasSetField(2);                                                // field:Both
 853   2                      MeasEnableDeMeasure(OFF);                               // Disable DE Measure
 854   2                      MeasSetThreshold(0x40);                                 // Threshold active detection
 855   2                      break;
 856   2              case INPUT_DVI:
 857   2              case INPUT_HDMIPC:
 858   2              case INPUT_HDMITV:
 859   2                      MeasSetWindow( 0, 0, 0xfff, 0xfff );    //set dummy window. 1600x600
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 15  

 860   2                      MeasSetField(2);                                                //field:Both
 861   2                      MeasEnableDeMeasure(ON);                                //Enable DE Measure
 862   2                      MeasSetThreshold(0x40);                                 //Threshold active detection
 863   2                      MeasSetErrTolerance(4);                                 //tolerance set to 32
 864   2                      MeasEnableChangedDetection(ON);                 //set EN. Changed Detection
 865   2                      break;
 866   2              case INPUT_BT656:
 867   2                      break;
 868   2              }
 869   1      
 870   1              //image effect
 871   1              SetImage(InputMain);    //set saved image effect(contrast,....)
 872   1      }
 873          
 874          
 875          //-----------------------------------------------------------------------------
 876          /**
 877          * enable video Output 
 878          *
 879          * call when CheckAndSet[Input] is successed.
 880          */
 881          void VInput_enableOutput(BYTE fRecheck)
 882          {
 883   1              if(fRecheck) {
 884   2                      dPrintf("====Found Recheck:%d",VH_Loss_Changed);
 885   2                      // do not turn on here. We need a retry.
 886   2              }
 887   1              else {
 888   2                      ScalerSetMuteManual( OFF );             //TurnOn Video Output. Remove Black Video
 889   2                      ScalerSetFreerunManual( OFF );  //FreeRunOff,UseVideoInputSource
 890   2                      ScalerSetFreerunValue(0);               //caclulate freerun value
 891   2      
 892   2                      SpiOsdSetDeValue();
 893   2                      FOsdSetDeValue();
 894   2      
 895   2                      LedBackLight(ON);                               //TurnOn Display
 896   2              }
 897   1              TaskNoSignal_setCmd(TASK_CMD_DONE);
 898   1              
 899   1              Interrupt_enableVideoDetect(ON);
 900   1      
 901   1              if(InputMain == INPUT_DVI
 902   1              || InputMain == INPUT_HDMIPC
 903   1              || InputMain == INPUT_HDMITV
 904   1              || InputMain == INPUT_BT656 ) { 
 905   2                      //digital input.
 906   2                      ; //SKIP
 907   2              }
 908   1              else
 909   1                      Interrupt_enableSyncDetect(ON);
 910   1      #ifdef PICO_GENERIC
                      FLCOS_toggle();
              #endif
 913   1      }
 914          
 915          //-----------------------------------------------------------------------------
 916          /**
 917          * goto Freerun move
 918          *
 919          * call when CheckAndSet[Input] is failed.
 920          * oldname: VInputGotoFreerun
 921          * input
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 16  

 922          *       reason
 923          *               0: No Signal
 924          *               1: No STD
 925          *               2: Out of range
 926          */
 927          void VInput_gotoFreerun(BYTE reason)
 928          {
 929   1              ScalerCheckPanelFreerunValue();
 930   1      
 931   1              //Freerun
 932   1              if(InputMain == INPUT_BT656) {
 933   2                      //??WHY
 934   2              }
 935   1              else {
 936   2                      DecoderFreerun(DECODER_FREERUN_60HZ);
 937   2              }
 938   1              ScalerSetFreerunManual( ON );
 939   1      
 940   1              if(InputMain == INPUT_HDMIPC 
 941   1              || InputMain == INPUT_HDMITV
 942   1              || InputMain == INPUT_BT656) {
 943   2                      //??WHY
 944   2              }
 945   1              else {
 946   2                      ScalerSetMuteManual( ON );
 947   2              }
 948   1              // Prepare NoSignal Task...
 949   1              if(reason==0 && MenuGetLevel()==0) { //0:NoSignal 1:NO STD,...
 950   2                      if(access) {
 951   3                              FOsdSetDeValue();
 952   3                              FOsdIndexMsgPrint(FOSD_STR2_NOSIGNAL);
 953   3                              tic_task = 0;
 954   3      
 955   3      #ifdef NOSIGNAL_LOGO
 956   3                              if(getNoSignalLogoStatus() == 0)
 957   3                                      InitLogo1();                                            
 958   3      #endif
 959   3                              TaskNoSignal_setCmd(TASK_CMD_WAIT_VIDEO);
 960   3                      }
 961   2              }
 962   1      
 963   1              if(InputMain == INPUT_PC) {
 964   2                      //BK111019. I need a default RGB_START,RGB_VDE value for position menu.
 965   2                      RGB_HSTART = InputGetHStart();
 966   2                      RGB_VDE = ScalerReadVDEReg();
 967   2              }
 968   1      
 969   1              LedBackLight(ON);
 970   1      
 971   1              Interrupt_enableVideoDetect(ON);
 972   1      }
 973          
 974          
 975          //=============================================================================
 976          // Change to DECODER. (CVBS & SVIDEO)
 977          //=============================================================================
 978          
 979          //-----------------------------------------------------------------------------
 980          /**
 981          * check and set the decoder input
 982          *
 983          * @return
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 17  

 984          *       0: success
 985          *       1: VDLOSS
 986          *       2: No Standard
 987          *       3: Not Support Mode
 988          *
 989          * extern
 990          *       InputSubMode
 991          */
 992          BYTE CheckAndSetDecoderScaler( void )
 993          {
 994   1              BYTE    mode;
 995   1              DWORD   vPeriod, vDelay;
 996   1              BYTE vDelayAdd;
 997   1              DWORD x_ratio, y_ratio;
 998   1      
 999   1              dPrintf("\nCheckAndSetDecoderScaler start.");
1000   1      
1001   1              if ( DecoderCheckVDLOSS(100) ) {
1002   2                      ePuts("\nCheckAndSetDecoderScaler VDLOSS");
1003   2                      DecoderFreerun(DECODER_FREERUN_60HZ);
1004   2                      ScalerSetFreerunManual( ON );
1005   2                      return( 1 );
1006   2              }
1007   1              //get standard
1008   1              mode = DecoderCheckSTD(100);
1009   1              if ( mode == 0x80 ) {
1010   2                  ePrintf("\nCheckAndSetDecoderScaler NoSTD");
1011   2                      return( 2 );
1012   2              }
1013   1              mode >>= 4;
1014   1              InputSubMode = mode;
1015   1      
1016   1              VideoAspect = GetAspectModeEE();
1017   1      
1018   1              //read VSynch Time+VBackPorch value
1019   1              vDelay = DecoderGetVDelay();
1020   1      
1021   1              //reduce VPeriod to scale up.
1022   1              //and adjust V-DE start.
1023   1      
1024   1              //720x240 => 800x480
1025   1              x_ratio = PANEL_H;
1026   1              x_ratio *=100;
1027   1              x_ratio /= 720;
1028   1              y_ratio = PANEL_V;
1029   1              y_ratio *=100;
1030   1              y_ratio /= 480;
1031   1              dPrintf("\nXYRatio X:%ld Y:%ld",x_ratio,y_ratio);
1032   1      
1033   1              if(VideoAspect==VIDEO_ASPECT_ZOOM) {
1034   2                      if(x_ratio > y_ratio) {
1035   3                              dPrintf(" use x. adjust Y");
1036   3                              y_ratio = 0;
1037   3                      }
1038   2                      else {
1039   3                              dPrintf(" use y. adjust X");    
1040   3                              x_ratio = 0;
1041   3                      }
1042   2              }
1043   1              else if(VideoAspect==VIDEO_ASPECT_NORMAL) {
1044   2                      if(x_ratio > y_ratio) {
1045   3                              dPrintf(" use y. adjust X");
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 18  

1046   3                              x_ratio = 0;
1047   3                      }
1048   2                      else {
1049   3                              dPrintf(" use x. adjust Y");
1050   3                              y_ratio = 0;
1051   3                      }
1052   2              }
1053   1              else {
1054   2                      x_ratio = 0;
1055   2                      y_ratio = 0;
1056   2              }
1057   1              //720x288 => 800x480
1058   1      
1059   1              if ( mode == 0 ) {                              // NTSC(M)
1060   2                      vPeriod = 228;                          // NTSC line number.(reduced from 240 to 228)
1061   2                      //vDelay += 12;                         // (6 = ( 240-228 ) / 2) times 2 because. 240->480
1062   2                      //vDelay += 27;                         // for V Back Porch & V top border
1063   2                      vDelayAdd = 39;
1064   2      
1065   2                      if(VideoAspect==VIDEO_ASPECT_ZOOM) {
1066   3                              vDelayAdd += 30;
1067   3                              vDelayAdd += 5; //???
1068   3                      }
1069   2      
1070   2                      DecoderSetVActive(240);         //set:240 0x0F0
1071   2      
1072   2                      //prepare info
1073   2                      FOsdSetInputMainString2FOsdMsgBuff();   //GetInputMainString(FOsdMsgBuff);                                                                              
1074   2                      TWstrcat(FOsdMsgBuff," NTSC");                  //BK110811. call FOsdCopyMsgBuff2Osdram(OFF); to draw
1075   2              }
1076   1              else if ( mode == 1 ) {                  //PAL(B,D,G,H,I)
1077   2                      vPeriod = 275;                          // PAL line number,(Reduced from 288 to 275)
1078   2      #if 0
                              //vDelay += 7;                          // 6.7 = ( 288-275 ) / 2
                              //vDelay += 2;                          // add some more for V Back Porch & V Top border
                              vDelayAdd = 25;
              #else
1083   2                      //vDelay += 14;                         // (6.7 = ( 288-275 ) / 2  ) * 2
1084   2                      //vDelay += 25;                         // add some more for V Back Porch & V Top border
1085   2                      vDelayAdd = 39;
1086   2      #endif
1087   2                      if(VideoAspect==VIDEO_ASPECT_ZOOM)
1088   2                              vDelayAdd += 33;
1089   2      
1090   2                      DecoderSetVActive(288);         //set:288. 0x120
1091   2                       
1092   2                      //prepare info
1093   2                      FOsdSetInputMainString2FOsdMsgBuff();   //GetInputMainString(FOsdMsgBuff);                                                                              
1094   2                      TWstrcat(FOsdMsgBuff," PAL");                   //BK110811. call FOsdCopyMsgBuff2Osdram(OFF); to draw
1095   2              }
1096   1              //BKTODO: Support more mode
1097   1              //0 = NTSC(M)          
1098   1              //1 = PAL (B,D,G,H,I)          
1099   1              //2 = SECAM          
1100   1              //3 = NTSC4.43
1101   1              //4 = PAL (M)            
1102   1              //5 = PAL (CN)                     
1103   1              //6 = PAL 60  
1104   1              else if ( mode == 3 //MTSC4
1105   1                         || mode == 4 //PAL-M
1106   1                     || mode == 6 //PAL-60                     
1107   1              ) {                             
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 19  

1108   2                      vPeriod = 228;
1109   2                      vDelayAdd = 39;
1110   2                      if(VideoAspect==VIDEO_ASPECT_ZOOM) {
1111   3                              vDelayAdd += 30;
1112   3                              vDelayAdd += 5; //???
1113   3                      }
1114   2                      DecoderSetVActive(240);         //set:240 0x0F0
1115   2      
1116   2                      //prepare info
1117   2                      FOsdSetInputMainString2FOsdMsgBuff();                                                                           
1118   2                      if(mode==3) TWstrcat(FOsdMsgBuff," NTSC4");             
1119   2                      if(mode==4) TWstrcat(FOsdMsgBuff," PAL-M");             
1120   2                      if(mode==6) TWstrcat(FOsdMsgBuff," PAL-60");            
1121   2         }     
1122   1              else if ( mode == 2 //SECAM
1123   1                        ||  mode == 4 //PAL-CN
1124   1              ) {     
1125   2                      vPeriod = 275;
1126   2                      vDelayAdd = 39;                 
1127   2                      if(VideoAspect==VIDEO_ASPECT_ZOOM)
1128   2                              vDelayAdd += 33;
1129   2      
1130   2                      DecoderSetVActive(288);         //set:288. 0x120
1131   2                       
1132   2                      //prepare info
1133   2                      FOsdSetInputMainString2FOsdMsgBuff();                                                                           
1134   2                      if(mode==2) TWstrcat(FOsdMsgBuff," SECAM");
1135   2                      if(mode==4) TWstrcat(FOsdMsgBuff," PAL-CN");
1136   2              }
1137   1              else {
1138   2                      ePrintf( "\nCheckAndSetDecoderScaler Input Mode %bd does not support now", mode );
1139   2                      return(3);
1140   2              }
1141   1              
1142   1              ScalerSetLineBufferSize(720);   //BK120116      - temp location. pls remove
1143   1      
1144   1              if(y_ratio) ScalerSetHScaleWithRatio(720, (WORD)y_ratio);
1145   1              else            ScalerSetHScale(720);                                   //PC->CVBS need it.
1146   1              if(x_ratio)     ScalerSetVScaleWithRatio(vPeriod, (WORD)x_ratio);
1147   1              else            ScalerSetVScale(vPeriod);                               //R206[7:0]R205[7:0]    = vPeriod
1148   1              
1149   1              ScalerWriteVDEReg(vDelay+vDelayAdd);                    //R215[7:0]=vDelay, R217[3:0]R216[7:0]=PANEL_V
1150   1      
1151   1              //dPrintf( "\nInput_Mode:%02bx VDE_width:%ld, vBackPorch:%ld", mode, vPeriod, vDelay );
1152   1              ePrintf( "\nInput_Mode:%s VDE_width_for_scaler:%ld, V-DE:%ld+%bd", mode ? "PAL":"NTSC", vPeriod, vDelay,v
             -DelayAdd );
1153   1              
1154   1              return(0);
1155   1      }
1156          
1157          
1158          //-----------------------------------------------------------------------------
1159          /**
1160          * Change to Decoder
1161          *
1162          * extern
1163          *       InputMain
1164          *       InputSubMode
1165          * @param
1166          *       fSVIDEO         0:CVBS, 1:SVIDEO
1167          * @return
1168          *       - 0: success
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 20  

1169          *       - 1: No Update happen
1170          *       - 2: No Signal or unknown video sidnal.
1171          *       - 3: NO STD
1172          * @see InitInputAsDefault
1173          * @see CheckAndSetDecoderScaler
1174          * @see VInput_enableOutput
1175          * @see VInput_gotoFreerun
1176          */
1177          BYTE ChangeDecoder(BYTE fSVIDEO)
1178          {
1179   1              BYTE ret;
1180   1      
1181   1              if(fSVIDEO) {
1182   2                      if ( InputMain == INPUT_SVIDEO ) {
1183   3                              dPrintf("\nSkip ChangeSVIDEO");
1184   3                              return(1);
1185   3                      }
1186   2                      InputMain = INPUT_SVIDEO;
1187   2              }
1188   1              else {
1189   2                      if ( InputMain == INPUT_CVBS ) {
1190   3                              dPrintf("\nSkip ChangeCVBS");
1191   3                              return(1);
1192   3                      }
1193   2                      InputMain = INPUT_CVBS;
1194   2              }
1195   1              InputSubMode = 7; //N/A
1196   1      
1197   1              if(GetInputEE() != InputMain)   
1198   1                      SaveInputEE( InputMain );
1199   1      
1200   1              //----------------
1201   1              // initialize video input
1202   1              InitInputAsDefault();
1203   1      
1204   1      
1205   1              //BKFYI: We need a delay before call DecoderCheckVDLOSS() on CheckAndSetDecoderScaler()
1206   1              //But, if fRCDMode, InputMode comes from others, not CVBS, not SVIDEO. We don't need a delay 
1207   1              delay1ms(350);
1208   1      
1209   1              //
1210   1              // Check and Set 
1211   1              //
1212   1              ret = CheckAndSetDecoderScaler();       //same as CheckAndSetInput()
1213   1              if(ret==ERR_SUCCESS) {
1214   2                      //success
1215   2                      VInput_enableOutput(0);
1216   2                      return 0;
1217   2              }
1218   1              //------------------
1219   1              // NO SIGNAL
1220   1              //------------------
1221   1              VInput_gotoFreerun(ret-1);      //1->0:NoSignal 2->1:NO STD
1222   1      
1223   1              return (ret+1);  //2:NoSignal 3:NO STD
1224   1      }
1225          
1226          //-----------------------------------------------------------------------------
1227          /**
1228          * Change to CVBS
1229          *
1230          * @return
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 21  

1231          *       - 0: success
1232          *       - 1: No Update happen
1233          *       - 2: No Signal or unknown video sidnal.
1234          *       - 3: NO STD
1235          * @see ChangeDecoder
1236          */
1237          BYTE ChangeCVBS( void )
1238          {
1239   1              return ChangeDecoder(0);
1240   1      }
1241          
1242          //-----------------------------------------------------------------------------
1243          /**
1244          * Change to SVIDEO
1245          *
1246          * @return
1247          *       - 0: success
1248          *       - 1: No Update happen
1249          *       - 2: No Signal or unknown video sidnal.
1250          *       - 3: NO STD
1251          * @see ChangeDecoder
1252          */
1253          BYTE    ChangeSVIDEO( void )
1254          {
1255   1              return ChangeDecoder(1);
1256   1      }
1257          
1258          //=============================================================================
1259          // Change to COMPONENT (YPBPR)
1260          //=============================================================================
1261          
1262          
1263          #ifdef SUPPORT_COMPONENT
1264          //-----------------------------------------------------------------------------
1265          /**
1266          * Change to Component
1267          *
1268          * @return
1269          *       - 0: success
1270          *       - 1: No Update happen
1271          *       - 2: No Signal or unknown video sidnal.
1272          */
1273          BYTE    ChangeCOMPONENT( void )
1274          {
1275   1              BYTE ret;
1276   1      
1277   1              if ( InputMain == INPUT_COMP ) {
1278   2                      dPrintf("\nSkip ChangeCOMPONENT");
1279   2                      return(1);
1280   2              }
1281   1                      
1282   1              InputMain = INPUT_COMP;
1283   1              InputSubMode = 7; //N/A.Note:7 is a correct value.
1284   1      
1285   1              if(GetInputEE() != InputMain)
1286   1                      SaveInputEE( InputMain );
1287   1      
1288   1              //----------------
1289   1              // initialize video input
1290   1              InitInputAsDefault();
1291   1      
1292   1              //
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 22  

1293   1              // Check and Set with measure
1294   1              //
1295   1              //
1296   1              // Check and Set VADC,mesaure,Scaler for Component input
1297   1              //
1298   1              ret = CheckAndSetComponent();           //same as CheckAndSetInput()
1299   1              if(ret==ERR_SUCCESS) {
1300   2                      //success
1301   2                      VInput_enableOutput(0);
1302   2                      return 0;
1303   2              }
1304   1              //------------------
1305   1              // NO SIGNAL
1306   1      
1307   1              //InputVAdcMode = 0;
1308   1      
1309   1              //start recover & force some test image.
1310   1              VInput_gotoFreerun(0);
1311   1      
1312   1              return(2);  //fail
1313   1      }
1314          #endif
1315          //=============================================================================
1316          // Change to PC
1317          //=============================================================================
1318          
1319          
1320          //-----------------------------------------------------------------------------
1321          //BYTE last_position_h;
1322          //BYTE last_position_v;
1323          //BYTE temp_position_h;
1324          //BYTE temp_position_v;
1325          #ifdef SUPPORT_PC
1326          //-----------------------------------------------------------------------------
1327          /**
1328          * Change to PC
1329          *
1330          * @return
1331          *       - 0: success
1332          *       - 1: No Update happen
1333          *       - 2: No Signal or unknown video sidnal.
1334          */
1335          BYTE ChangePC( void )
1336          {
1337   1              BYTE ret;
1338   1      
1339   1              if ( InputMain == INPUT_PC ) {
1340   2                      dPrintf("\nSkip ChangePC");
1341   2                      return(1);
1342   2              }
1343   1      
1344   1              InputMain = INPUT_PC;
1345   1              InputSubMode = 0; //N/A
1346   1      
1347   1              if(GetInputEE() != InputMain)
1348   1                      SaveInputEE( InputMain );
1349   1      
1350   1              //----------------
1351   1              // initialize video input
1352   1              InitInputAsDefault();
1353   1      
1354   1              //
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 23  

1355   1              // Check and Set VADC,mesaure,Scaler for Analog PC input
1356   1              //
1357   1              ret = CheckAndSetPC();          //same as CheckAndSetInput()
1358   1              if(ret==ERR_SUCCESS) {
1359   2                      //success
1360   2                      VInput_enableOutput(0);
1361   2                      return 0;
1362   2              }
1363   1      
1364   1      
1365   1              //------------------
1366   1              // NO SIGNAL
1367   1              // Prepare NoSignal Task...
1368   1      
1369   1      
1370   1              //free run              
1371   1              //start recover & force some test image.
1372   1              VInput_gotoFreerun(0);
1373   1      
1374   1      
1375   1              return 2;       //fail..
1376   1      }
1377          #endif
1378          
1379          //=============================================================================
1380          // Change to DVI
1381          //=============================================================================
1382          
1383          #ifdef SUPPORT_DVI
              //-----------------------------------------------------------------------------
              /**
              * Change to DVI
              *
              * linked with SIL151
              * @return
              *       - 0: success
              *       - 1: No Update happen
              *       - 2: No Signal or unknown video sidnal.
              */
              BYTE    ChangeDVI( void )
              {
                      BYTE ret;
              
                      if ( InputMain == INPUT_DVI ) {
                              dPrintf("\nSkip ChangeDVI");
                              return(1);
                      }
              
                      InputMain = INPUT_DVI;
              
                      if(GetInputEE() != InputMain)
                              SaveInputEE( InputMain );
              
                      //----------------
                      // initialize video input
                      InitInputAsDefault();
              
                      //
                      // Check and Set VADC,mesaure,Scaler for Analog PC input
                      //
                      ret = CheckAndSetDVI();         //same as CheckAndSetInput()
                      if(ret==0) {
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 24  

                              //success
                              VInput_enableOutput(0);
                              return 0;
                      }
              
                      //------------------
                      // NO SIGNAL
                      // Prepare NoSignal Task...
                      VInput_gotoFreerun(0);
              
                      //dPrintf("\nChangeDVI--END");
                      return(2);
              }
              #endif
1431          
1432          //=============================================================================
1433          // Change to HDMI
1434          //=============================================================================
1435          
1436          //-----------------------------------------------------------------------------
1437          /**
1438          * Change to HDMI
1439          *
1440          * linked with EP9351
1441          * @return
1442          *       - 0: success
1443          *       - 1: No Update happen
1444          *       - 2: No Signal or unknown video sidnal.
1445          */
1446          BYTE ChangeHDMI(void)
1447          {
1448   1              BYTE ret;
1449   1      #ifdef SUPPORT_HDMI_EP9351
              //      BYTE i;
              //      volatile BYTE r3C, r3D;
              #endif
1453   1      
1454   1              if ( InputMain == INPUT_HDMIPC || InputMain == INPUT_HDMITV ) {
1455   2                      dPrintf("\nSkip ChangeHDMI");
1456   2                      return(1);
1457   2              }
1458   1      
1459   1              if(GetHdmiModeEE())  InputMain = INPUT_HDMITV;
1460   1              else                             InputMain = INPUT_HDMIPC;
1461   1      
1462   1              if(GetInputEE() != InputMain)
1463   1                      SaveInputEE( InputMain );
1464   1      
1465   1              dPrintf("\nChangeHDMI InputMain:%02bx",InputMain);
1466   1      
1467   1              //----------------
1468   1              // initialize video input
1469   1              InitInputAsDefault();
1470   1      
1471   1      #ifdef SUPPORT_HDMI_SiIRX
                      HdmiCheckDeviceId();
                      HdmiInitReceiverChip();
              #endif
1475   1      #ifdef SUPPORT_HDMI_EP9351
                      //wakeup(turn off the power down)
                      HdmiInitEp9351Chip();
              #endif
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 25  

1479   1      
1480   1              //
1481   1              // Check and Set 
1482   1              //
1483   1      #if defined(SUPPORT_HDMI_EP9351) || defined(SUPPORT_HDMI_SiIRX)
                      ret = CheckAndSetHDMI();
              #else
1486   1              ret=ERR_FAIL;
1487   1      #endif
1488   1              if(ret==ERR_SUCCESS) {
1489   2                      //success
1490   2                      VInput_enableOutput(0);
1491   2                      return 0;
1492   2              }
1493   1      
1494   1              //------------------
1495   1              // NO SIGNAL
1496   1              // Prepare NoSignal Task...
1497   1              VInput_gotoFreerun(0);
1498   1              //dPrintf("\nChangeHDMI--END");
1499   1              return(2);
1500   1      }
1501          
1502          
1503          //=============================================================================
1504          // Change to BT656
1505          //=============================================================================
1506          #ifdef SUPPORT_BT656
1507          //-----------------------------------------------------------------------------
1508          /**
1509          * Check and Set BT656
1510          *
1511          * @return
1512          *       - 0: success
1513          *       - other: error
1514          * @todo REG04A[0] does not work.
1515          */
1516          BYTE CheckAndSetBT656(void)
1517          {
1518   1              BYTE value;
1519   1      
1520   1      #if 0
                      WriteTW88Page(PAGE0_BT656);
                      value=ReadTW88(REG04A);
                      if(value & 0x01)        return 1;       //NO Signal
                      else                            return 0;       //found signal
              #else
1526   1      
1527   1              value = ScalerCalcHDE();
1528   1              ScalerWriteHDEReg(value+3);
1529   1      
1530   1              //R04A[0] is not working
1531   1              return 0;
1532   1      #endif
1533   1      }
1534          #endif
1535          
1536          //-----------------------------------------------------------------------------
1537          //              BYTE    ChangeBT656( void )
1538          //-----------------------------------------------------------------------------
1539          #ifdef SUPPORT_BT656
1540          //-----------------------------------------------------------------------------
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 26  

1541          /**
1542          * Change to BT656
1543          *
1544          * @return
1545          *       - 0: success
1546          *       - 1: No Update happen
1547          *       - 2: No Signal or unknown video sidnal.
1548          */
1549          BYTE ChangeBT656(void)
1550          {
1551   1              BYTE ret;
1552   1      
1553   1              if ( InputMain == INPUT_BT656 ) {
1554   2                      dPrintf("\nSkip ChangeBT656");
1555   2                      return(1);
1556   2              }
1557   1              InputMain = INPUT_BT656;
1558   1      
1559   1              if(GetInputEE() != InputMain)
1560   1                      SaveInputEE( InputMain );
1561   1      
1562   1              //----------------
1563   1              // initialize video input
1564   1              InitInputAsDefault();
1565   1      
1566   1              //
1567   1              // Check and Set VADC,mesaure,Scaler for Analog PC input
1568   1              //
1569   1              ret = CheckAndSetBT656();               //same as CheckAndSetInput()
1570   1              //dPrintf("\nBT656 input Detect: %s", ret ? "No" : "Yes" );
1571   1      
1572   1              if(ret==0) {
1573   2                      //success
1574   2                      VInput_enableOutput(0);
1575   2      
1576   2                      return 0;
1577   2              }
1578   1      
1579   1              //------------------
1580   1              // NO SIGNAL
1581   1              // Prepare NoSignal Task...
1582   1      
1583   1              VInput_gotoFreerun(0);
1584   1      
1585   1              return(2);
1586   1      }
1587          #endif
1588          
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 27  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00EF (BEGIN)
0000         L?0240:
0000 FF                MOV     R7,A
0001 E500        E     MOV     A,regTW88+01H
0003 2440              ADD     A,#040H
0005 F582              MOV     DPL,A
0007 E4                CLR     A
0008 3500        E     ADDC    A,regTW88
000A F583              MOV     DPH,A
000C E0                MOVX    A,@DPTR
000D 543F              ANL     A,#03FH
000F 4F                ORL     A,R7
0010         L?0241:
0010 FF                MOV     R7,A
0011         L?0242:
0011 E500        E     MOV     A,regTW88+01H
0013 2440              ADD     A,#040H
0015         L?0243:
0015 F582              MOV     DPL,A
0017 E4                CLR     A
0018 3500        E     ADDC    A,regTW88
001A F583              MOV     DPH,A
001C 22                RET     
001D         L?0244:
001D 120000      E     LCALL   ?C?LSTXDATA
0020         L?0245:
0020 900000      R     MOV     DPTR,#y_ratio
0023         L?0246:
0023 E0                MOVX    A,@DPTR
0024 FC                MOV     R4,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FD                MOV     R5,A
0028         L?0247:
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FE                MOV     R6,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 22                RET     
002F         L?0251:
002F         L?0252:
002F 900000      R     MOV     DPTR,#vDelayAdd
0032 7427              MOV     A,#027H
0034 F0                MOVX    @DPTR,A
0035 900000      E     MOV     DPTR,#VideoAspect
0038 E0                MOVX    A,@DPTR
0039 22                RET     
003A         L?0253:
003A         L?0254:
003A AE07              MOV     R6,AR7
003C 900000      R     MOV     DPTR,#InputMain
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 6E                XRL     A,R6
0042 22                RET     
0043         L?0255:
0043 900000      R     MOV     DPTR,#x_ratio
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 28  

0046 E0                MOVX    A,@DPTR
0047 F8                MOV     R0,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A F9                MOV     R1,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FA                MOV     R2,A
004E A3                INC     DPTR
004F E0                MOVX    A,@DPTR
0050 FB                MOV     R3,A
0051 D3                SETB    C
0052 120000      E     LCALL   ?C?ULCMP
0055 7BFF              MOV     R3,#0FFH
0057 22                RET     
0058         L?0256:
0058         L?0257:
0058 900000      E     MOV     DPTR,#?_TWstrcat?BYTE+03H
005B 74FF              MOV     A,#0FFH
005D F0                MOVX    @DPTR,A
005E A3                INC     DPTR
005F 22                RET     
0060         L?0258:
0060         L?0259:
0060 850082      E     MOV     DPL,regTW88+01H
0063 850083      E     MOV     DPH,regTW88
0066 A3                INC     DPTR
0067 A3                INC     DPTR
0068 22                RET     
0069         L?0260:
0069 E500        E     MOV     A,regTW88+01H
006B 24E1              ADD     A,#0E1H
006D F582              MOV     DPL,A
006F E500        E     MOV     A,regTW88
0071 3404              ADDC    A,#04H
0073 F583              MOV     DPH,A
0075 22                RET     
0076         L?0261:
0076 7BFF              MOV     R3,#0FFH
0078 E0                MOVX    A,@DPTR
0079 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
007C F0                MOVX    @DPTR,A
007D 22                RET     
007E         L?0262:
007E 900000      R     MOV     DPTR,#vDelayAdd
0081 E0                MOVX    A,@DPTR
0082 241E              ADD     A,#01EH
0084 F0                MOVX    @DPTR,A
0085 E0                MOVX    A,@DPTR
0086 2405              ADD     A,#05H
0088 F0                MOVX    @DPTR,A
0089 22                RET     
008A         L?0265:
008A E4                CLR     A
008B 7B64              MOV     R3,#064H
008D FA                MOV     R2,A
008E F9                MOV     R1,A
008F F8                MOV     R0,A
0090 020000      E     LJMP    ?C?LMUL
             ; FUNCTION Com00EF (END)

             ; FUNCTION GetInputMain (BEGIN)
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 29  

                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
0000 900000      R     MOV     DPTR,#InputMain
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 117
0005         ?C0001:
0005 22                RET     
             ; FUNCTION GetInputMain (END)

             ; FUNCTION _SetInputMain (BEGIN)
                                           ; SOURCE LINE # 124
;---- Variable 'input' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
0000 900000      R     MOV     DPTR,#InputMain
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
0005 22                RET     
             ; FUNCTION _SetInputMain (END)

             ; FUNCTION _WaitVBlank (BEGIN)
                                           ; SOURCE LINE # 143
0000 900000      R     MOV     DPTR,#cnt
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 152
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
0008         ?C0003:
0008 900000      R     MOV     DPTR,#cnt
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F C3                CLR     C
0010 9F                SUBB    A,R7
0011 502F              JNC     ?C0009
                                           ; SOURCE LINE # 153
0013 120000      R     LCALL   L?0258
0016 74FF              MOV     A,#0FFH
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
;---- Variable 'loop' assigned to Register 'R6/R7' ----
0019 E4                CLR     A
001A FF                MOV     R7,A
001B FE                MOV     R6,A
001C         ?C0006:
                                           ; SOURCE LINE # 155
001C 120000      R     LCALL   L?0258
001F E0                MOVX    A,@DPTR
0020 20E617            JB      ACC.6,?C0005
                                           ; SOURCE LINE # 157
0023 0F                INC     R7
0024 BF0001            CJNE    R7,#00H,?C0193
0027 0E                INC     R6
0028         ?C0193:
                                           ; SOURCE LINE # 158
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 30  

0028 D3                SETB    C
0029 EF                MOV     A,R7
002A 94FE              SUBB    A,#0FEH
002C EE                MOV     A,R6
002D 94FF              SUBB    A,#0FFH
002F 40EB              JC      ?C0006
                                           ; SOURCE LINE # 159
0031 7BFF              MOV     R3,#0FFH
0033 7A00        R     MOV     R2,#HIGH ?SC_0
0035 7900        R     MOV     R1,#LOW ?SC_0
0037 120000      E     LCALL   _wPrintf
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
003A         ?C0005:
003A 900000      R     MOV     DPTR,#i
003D E0                MOVX    A,@DPTR
003E 04                INC     A
003F F0                MOVX    @DPTR,A
0040 80C6              SJMP    ?C0003
                                           ; SOURCE LINE # 165
0042         ?C0009:
0042 22                RET     
             ; FUNCTION _WaitVBlank (END)

             ; FUNCTION Wait1VBlank (BEGIN)
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 181
0000 120000      R     LCALL   L?0259
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
;---- Variable 'loop' assigned to Register 'R6/R7' ----
0006 E4                CLR     A
0007 FF                MOV     R7,A
0008 FE                MOV     R6,A
0009         ?C0010:
                                           ; SOURCE LINE # 183
0009 120000      R     LCALL   L?0259
000C E0                MOVX    A,@DPTR
000D 20E617            JB      ACC.6,?C0013
                                           ; SOURCE LINE # 185
0010 0F                INC     R7
0011 BF0001            CJNE    R7,#00H,?C0194
0014 0E                INC     R6
0015         ?C0194:
                                           ; SOURCE LINE # 186
0015 D3                SETB    C
0016 EF                MOV     A,R7
0017 94FE              SUBB    A,#0FEH
0019 EE                MOV     A,R6
001A 94FF              SUBB    A,#0FFH
001C 40EB              JC      ?C0010
                                           ; SOURCE LINE # 187
001E 7BFF              MOV     R3,#0FFH
0020 7A00        R     MOV     R2,#HIGH ?SC_0
0022 7900        R     MOV     R1,#LOW ?SC_0
0024 120000      E     LCALL   _wPrintf
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 189
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 31  

                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 192
0027         ?C0013:
0027 22                RET     
             ; FUNCTION Wait1VBlank (END)

             ; FUNCTION _InputSetSource (BEGIN)
                                           ; SOURCE LINE # 211
;---- Variable 'path' assigned to Register 'R1' ----
0000 A907              MOV     R1,AR7
;---- Variable 'format' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 216
0002 120000      R     LCALL   L?0242
0005 E0                MOVX    A,@DPTR
0006 54E8              ANL     A,#0E8H
0008 FE                MOV     R6,A
0009 900000      R     MOV     DPTR,#r040
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
000D E500        E     MOV     A,regTW88+01H
000F 2441              ADD     A,#041H
0011 120000      R     LCALL   L?0243
0014 E0                MOVX    A,@DPTR
0015 54C0              ANL     A,#0C0H
0017 FC                MOV     R4,A
0018 900000      R     MOV     DPTR,#r041
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
001C EE                MOV     A,R6
001D 4F                ORL     A,R7
001E 900000      R     MOV     DPTR,#r040
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
0022 EC                MOV     A,R4
0023 4D                ORL     A,R5
0024 A3                INC     DPTR
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
0026 E9                MOV     A,R1
0027 7003              JNZ     ?C0014
                                           ; SOURCE LINE # 222
0029 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 223
002A 8029              SJMP    ?C0204
002C         ?C0014:
                                           ; SOURCE LINE # 224
002C E9                MOV     A,R1
002D 6401              XRL     A,#01H
002F 7029              JNZ     ?C0016
                                           ; SOURCE LINE # 225
0031 900000      R     MOV     DPTR,#r040
0034 E0                MOVX    A,@DPTR
0035 4410              ORL     A,#010H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
0038 900000      R     MOV     DPTR,#InputMain
003B E0                MOVX    A,@DPTR
003C 900000      R     MOV     DPTR,#r041
003F B4020F            CJNE    A,#02H,?C0017
                                           ; SOURCE LINE # 227
0042 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 32  

0043 4420              ORL     A,#020H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
0046 4410              ORL     A,#010H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
0049 440C              ORL     A,#0CH
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
004C 4402              ORL     A,#02H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
004F 8019              SJMP    ?C0015
0051         ?C0017:
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 234
0051 E0                MOVX    A,@DPTR
0052 4410              ORL     A,#010H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 235
0055         ?C0204:
0055 440C              ORL     A,#0CH
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
0058 8010              SJMP    ?C0015
005A         ?C0016:
                                           ; SOURCE LINE # 238
005A E9                MOV     A,R1
005B B4020C            CJNE    A,#02H,?C0020
                                           ; SOURCE LINE # 240
005E 900000      R     MOV     DPTR,#r040
0061 E0                MOVX    A,@DPTR
0062 4408              ORL     A,#08H
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 242
0065 A3                INC     DPTR
0066 E0                MOVX    A,@DPTR
0067 4410              ORL     A,#010H
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
006A         ?C0020:
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 247
006A         ?C0015:
                                           ; SOURCE LINE # 248
006A 7A00        R     MOV     R2,#HIGH ?SC_16
006C 7900        R     MOV     R1,#LOW ?SC_16
006E 900000      R     MOV     DPTR,#r040
0071 120000      R     LCALL   L?0261
0074 900000      R     MOV     DPTR,#r041
0077 E0                MOVX    A,@DPTR
0078 900000      E     MOV     DPTR,#?_dPrintf?BYTE+04H
007B F0                MOVX    @DPTR,A
007C 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 249
007F 900000      R     MOV     DPTR,#r040
0082 E0                MOVX    A,@DPTR
0083 120000      R     LCALL   L?0241
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 250
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 33  

0088 900000      R     MOV     DPTR,#r041
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D E500        E     MOV     A,regTW88+01H
008F 2441              ADD     A,#041H
0091 120000      R     LCALL   L?0243
0094 EF                MOV     A,R7
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
0096 22                RET     
             ; FUNCTION _InputSetSource (END)

             ; FUNCTION _InputSetFieldPolarity (BEGIN)
                                           ; SOURCE LINE # 320
;---- Variable 'fInv' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 325
0000 E500        E     MOV     A,regTW88+01H
0002 2441              ADD     A,#041H
0004 120000      R     LCALL   L?0243
0007 E0                MOVX    A,@DPTR
0008 FE                MOV     R6,A
;---- Variable 'r041' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 326
0009 EF                MOV     A,R7
000A 6005              JZ      ?C0024
000C EE                MOV     A,R6
000D 4402              ORL     A,#02H
000F 8003              SJMP    ?C0205
0011         ?C0024:
                                           ; SOURCE LINE # 327
0011 EE                MOV     A,R6
0012 54FD              ANL     A,#0FDH
0014         ?C0205:
0014 FF                MOV     R7,A
0015 E500        E     MOV     A,regTW88+01H
0017 2441              ADD     A,#041H
0019 120000      R     LCALL   L?0243
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
001E         ?C0026:
001E 22                RET     
             ; FUNCTION _InputSetFieldPolarity (END)

             ; FUNCTION _InputSetCrop (BEGIN)
                                           ; SOURCE LINE # 362
0000 900000      R     MOV     DPTR,#y
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#x
000B EE                MOV     A,R6
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
;---- Variable 'w' assigned to Register 'R2/R3' ----
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 366
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 34  

0010 EE                MOV     A,R6
0011 5403              ANL     A,#03H
0013 FE                MOV     R6,A
0014 E4                CLR     A
0015 7802              MOV     R0,#02H
0017         ?C0195:
0017 CE                XCH     A,R6
0018 C3                CLR     C
0019 13                RRC     A
001A CE                XCH     A,R6
001B 13                RRC     A
001C D8F9              DJNZ    R0,?C0195
001E 120000      R     LCALL   L?0240
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
0023 900000      R     MOV     DPTR,#x
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 E500        E     MOV     A,regTW88+01H
002B 2445              ADD     A,#045H
002D 120000      R     LCALL   L?0243
0030 EF                MOV     A,R7
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
0032 900000      R     MOV     DPTR,#y
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 E500        E     MOV     A,regTW88+01H
003A 2443              ADD     A,#043H
003C 120000      R     LCALL   L?0243
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
0041 900000      R     MOV     DPTR,#h
0044 E0                MOVX    A,@DPTR
0045 540F              ANL     A,#0FH
0047 C4                SWAP    A
0048 F8                MOV     R0,A
0049 54F0              ANL     A,#0F0H
004B C8                XCH     A,R0
004C E4                CLR     A
004D C4                SWAP    A
004E 540F              ANL     A,#0FH
0050 48                ORL     A,R0
0051 FD                MOV     R5,A
0052 EA                MOV     A,R2
0053 4D                ORL     A,R5
0054 FF                MOV     R7,A
0055 E500        E     MOV     A,regTW88+01H
0057 2442              ADD     A,#042H
0059 120000      R     LCALL   L?0243
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
005E 900000      R     MOV     DPTR,#h
0061 A3                INC     DPTR
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
0064 E500        E     MOV     A,regTW88+01H
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 35  

0066 2444              ADD     A,#044H
0068 120000      R     LCALL   L?0243
006B EF                MOV     A,R7
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
006D E500        E     MOV     A,regTW88+01H
006F 2446              ADD     A,#046H
0071 120000      R     LCALL   L?0243
0074 EB                MOV     A,R3
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
0076 22                RET     
             ; FUNCTION _InputSetCrop (END)

             ; FUNCTION _InputSetHStart (BEGIN)
                                           ; SOURCE LINE # 395
;---- Variable 'x' assigned to Register 'R4/R5' ----
0000 AD07              MOV     R5,AR7
0002 AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 399
0004 EC                MOV     A,R4
0005 540F              ANL     A,#0FH
0007 FE                MOV     R6,A
0008 E4                CLR     A
0009 7802              MOV     R0,#02H
000B         ?C0196:
000B CE                XCH     A,R6
000C C3                CLR     C
000D 13                RRC     A
000E CE                XCH     A,R6
000F 13                RRC     A
0010 D8F9              DJNZ    R0,?C0196
0012 120000      R     LCALL   L?0240
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
0017 E500        E     MOV     A,regTW88+01H
0019 2445              ADD     A,#045H
001B 120000      R     LCALL   L?0243
001E ED                MOV     A,R5
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
0020 22                RET     
             ; FUNCTION _InputSetHStart (END)

             ; FUNCTION InputGetHStart (BEGIN)
                                           ; SOURCE LINE # 409
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 414
0000 120000      R     LCALL   L?0242
0003 E0                MOVX    A,@DPTR
0004 54C0              ANL     A,#0C0H
0006 FF                MOV     R7,A
0007 7E00              MOV     R6,#00H
;---- Variable 'wValue' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 415
0009 7802              MOV     R0,#02H
000B         ?C0197:
000B C3                CLR     C
000C 33                RLC     A
000D CE                XCH     A,R6
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 36  

000E 33                RLC     A
000F CE                XCH     A,R6
0010 D8F9              DJNZ    R0,?C0197
0012 FF                MOV     R7,A
                                           ; SOURCE LINE # 416
0013 E500        E     MOV     A,regTW88+01H
0015 2445              ADD     A,#045H
0017 120000      R     LCALL   L?0243
001A E0                MOVX    A,@DPTR
001B FD                MOV     R5,A
001C EF                MOV     A,R7
001D 4D                ORL     A,R5
001E FF                MOV     R7,A
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
001F         ?C0029:
001F 22                RET     
             ; FUNCTION InputGetHStart (END)

             ; FUNCTION _BT656InputFreerunClk (BEGIN)
                                           ; SOURCE LINE # 487
;---- Variable 'fInvClk' assigned to Register 'R5' ----
;---- Variable 'fFreerun' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 491
0000 E500        E     MOV     A,regTW88+01H
0002 2447              ADD     A,#047H
0004 120000      R     LCALL   L?0243
0007 E0                MOVX    A,@DPTR
0008 FE                MOV     R6,A
;---- Variable 'value' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 492
0009 EF                MOV     A,R7
000A 6006              JZ      ?C0030
000C EE                MOV     A,R6
000D 4480              ORL     A,#080H
000F FE                MOV     R6,A
0010 8004              SJMP    ?C0031
0012         ?C0030:
                                           ; SOURCE LINE # 493
0012 EE                MOV     A,R6
0013 547F              ANL     A,#07FH
0015 FE                MOV     R6,A
0016         ?C0031:
                                           ; SOURCE LINE # 495
0016 ED                MOV     A,R5
0017 6006              JZ      ?C0032
0019 EE                MOV     A,R6
001A 4420              ORL     A,#020H
001C FE                MOV     R6,A
001D 8004              SJMP    ?C0033
001F         ?C0032:
                                           ; SOURCE LINE # 496
001F EE                MOV     A,R6
0020 54DF              ANL     A,#0DFH
0022 FE                MOV     R6,A
0023         ?C0033:
                                           ; SOURCE LINE # 497
0023 E500        E     MOV     A,regTW88+01H
0025 2447              ADD     A,#047H
0027 120000      R     LCALL   L?0243
002A EE                MOV     A,R6
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 37  

002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 498
002C 22                RET     
             ; FUNCTION _BT656InputFreerunClk (END)

             ; FUNCTION _PrintfInput (BEGIN)
                                           ; SOURCE LINE # 504
0000 900000      R     MOV     DPTR,#Input
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
;---- Variable 'debug' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 506
0005 ED                MOV     A,R5
0006 6403              XRL     A,#03H
0008 6003              JZ      $ + 5H
000A 020000      R     LJMP    ?C0035
                                           ; SOURCE LINE # 507
000D 7BFF              MOV     R3,#0FFH
000F 7A00        R     MOV     R2,#HIGH ?SC_50
0011 7900        R     MOV     R1,#LOW ?SC_50
0013 120000      E     LCALL   _dPuts
                                           ; SOURCE LINE # 508
0016 900000      R     MOV     DPTR,#Input
0019 E0                MOVX    A,@DPTR
001A B40800            CJNE    A,#08H,?C0198
001D         ?C0198:
001D 505F              JNC     ?C0045
001F 900000      R     MOV     DPTR,#?C0199
0022 F8                MOV     R0,A
0023 28                ADD     A,R0
0024 28                ADD     A,R0
0025 73                JMP     @A+DPTR
0026         ?C0199:
0026 020000      R     LJMP    ?C0037
0029 020000      R     LJMP    ?C0038
002C 020000      R     LJMP    ?C0039
002F 020000      R     LJMP    ?C0040
0032 020000      R     LJMP    ?C0041
0035 020000      R     LJMP    ?C0042
0038 020000      R     LJMP    ?C0043
003B 020000      R     LJMP    ?C0044
                                           ; SOURCE LINE # 509
003E         ?C0037:
003E 7BFF              MOV     R3,#0FFH
0040 7A00        R     MOV     R2,#HIGH ?SC_58
0042 7900        R     MOV     R1,#LOW ?SC_58
0044 8042              SJMP    ?C0213
                                           ; SOURCE LINE # 510
0046         ?C0038:
0046 7BFF              MOV     R3,#0FFH
0048 7A00        R     MOV     R2,#HIGH ?SC_63
004A 7900        R     MOV     R1,#LOW ?SC_63
004C         ?C0206:
004C 803A              SJMP    ?C0213
                                           ; SOURCE LINE # 511
004E         ?C0039:
004E 7BFF              MOV     R3,#0FFH
0050 7A00        R     MOV     R2,#HIGH ?SC_70
0052 7900        R     MOV     R1,#LOW ?SC_70
0054         ?C0207:
0054 8032              SJMP    ?C0213
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 38  

                                           ; SOURCE LINE # 512
0056         ?C0040:
0056 7BFF              MOV     R3,#0FFH
0058 7A00        R     MOV     R2,#HIGH ?SC_80
005A 7900        R     MOV     R1,#LOW ?SC_80
005C         ?C0208:
005C 802A              SJMP    ?C0213
                                           ; SOURCE LINE # 513
005E         ?C0041:
005E 7BFF              MOV     R3,#0FFH
0060 7A00        R     MOV     R2,#HIGH ?SC_83
0062 7900        R     MOV     R1,#LOW ?SC_83
0064         ?C0209:
0064 8022              SJMP    ?C0213
                                           ; SOURCE LINE # 514
0066         ?C0042:
0066 7BFF              MOV     R3,#0FFH
0068 7A00        R     MOV     R2,#HIGH ?SC_87
006A 7900        R     MOV     R1,#LOW ?SC_87
006C         ?C0210:
006C 801A              SJMP    ?C0213
                                           ; SOURCE LINE # 515
006E         ?C0043:
006E 7BFF              MOV     R3,#0FFH
0070 7A00        R     MOV     R2,#HIGH ?SC_94
0072 7900        R     MOV     R1,#LOW ?SC_94
0074         ?C0211:
0074 8012              SJMP    ?C0213
                                           ; SOURCE LINE # 516
0076         ?C0044:
0076 7BFF              MOV     R3,#0FFH
0078 7A00        R     MOV     R2,#HIGH ?SC_101
007A 7900        R     MOV     R1,#LOW ?SC_101
007C         ?C0212:
007C 800A              SJMP    ?C0213
                                           ; SOURCE LINE # 517
007E         ?C0045:
007E 7A00        R     MOV     R2,#HIGH ?SC_107
0080 7900        R     MOV     R1,#LOW ?SC_107
0082 900000      R     MOV     DPTR,#Input
0085 120000      R     LCALL   L?0261
0088         ?C0213:
0088 020000      E     LJMP    _dPrintf
                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 519
008B         ?C0035:
                                           ; SOURCE LINE # 520
                                           ; SOURCE LINE # 521
008B 7BFF              MOV     R3,#0FFH
008D 7A00        R     MOV     R2,#HIGH ?SC_50
008F 7900        R     MOV     R1,#LOW ?SC_50
0091 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 522
0094 900000      R     MOV     DPTR,#Input
0097 E0                MOVX    A,@DPTR
0098 B40800            CJNE    A,#08H,?C0200
009B         ?C0200:
009B 505F              JNC     ?C0056
009D 900000      R     MOV     DPTR,#?C0201
00A0 F8                MOV     R0,A
00A1 28                ADD     A,R0
00A2 28                ADD     A,R0
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 39  

00A3 73                JMP     @A+DPTR
00A4         ?C0201:
00A4 020000      R     LJMP    ?C0048
00A7 020000      R     LJMP    ?C0049
00AA 020000      R     LJMP    ?C0050
00AD 020000      R     LJMP    ?C0051
00B0 020000      R     LJMP    ?C0052
00B3 020000      R     LJMP    ?C0053
00B6 020000      R     LJMP    ?C0054
00B9 020000      R     LJMP    ?C0055
                                           ; SOURCE LINE # 523
00BC         ?C0048:
00BC 7BFF              MOV     R3,#0FFH
00BE 7A00        R     MOV     R2,#HIGH ?SC_58
00C0 7900        R     MOV     R1,#LOW ?SC_58
00C2 8046              SJMP    ?C0221
                                           ; SOURCE LINE # 524
00C4         ?C0049:
00C4 7BFF              MOV     R3,#0FFH
00C6 7A00        R     MOV     R2,#HIGH ?SC_63
00C8 7900        R     MOV     R1,#LOW ?SC_63
00CA         ?C0214:
00CA 803E              SJMP    ?C0221
                                           ; SOURCE LINE # 525
00CC         ?C0050:
00CC 7BFF              MOV     R3,#0FFH
00CE 7A00        R     MOV     R2,#HIGH ?SC_70
00D0 7900        R     MOV     R1,#LOW ?SC_70
00D2         ?C0215:
00D2 8036              SJMP    ?C0221
                                           ; SOURCE LINE # 526
00D4         ?C0051:
00D4 7BFF              MOV     R3,#0FFH
00D6 7A00        R     MOV     R2,#HIGH ?SC_80
00D8 7900        R     MOV     R1,#LOW ?SC_80
00DA         ?C0216:
00DA 802E              SJMP    ?C0221
                                           ; SOURCE LINE # 527
00DC         ?C0052:
00DC 7BFF              MOV     R3,#0FFH
00DE 7A00        R     MOV     R2,#HIGH ?SC_83
00E0 7900        R     MOV     R1,#LOW ?SC_83
00E2         ?C0217:
00E2 8026              SJMP    ?C0221
                                           ; SOURCE LINE # 528
00E4         ?C0053:
00E4 7BFF              MOV     R3,#0FFH
00E6 7A00        R     MOV     R2,#HIGH ?SC_87
00E8 7900        R     MOV     R1,#LOW ?SC_87
00EA         ?C0218:
00EA 801E              SJMP    ?C0221
                                           ; SOURCE LINE # 529
00EC         ?C0054:
00EC 7BFF              MOV     R3,#0FFH
00EE 7A00        R     MOV     R2,#HIGH ?SC_94
00F0 7900        R     MOV     R1,#LOW ?SC_94
00F2         ?C0219:
00F2 8016              SJMP    ?C0221
                                           ; SOURCE LINE # 530
00F4         ?C0055:
00F4 7BFF              MOV     R3,#0FFH
00F6 7A00        R     MOV     R2,#HIGH ?SC_101
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 40  

00F8 7900        R     MOV     R1,#LOW ?SC_101
00FA         ?C0220:
00FA 800E              SJMP    ?C0221
                                           ; SOURCE LINE # 531
00FC         ?C0056:
00FC 7BFF              MOV     R3,#0FFH
00FE 7A00        R     MOV     R2,#HIGH ?SC_107
0100 7900        R     MOV     R1,#LOW ?SC_107
0102 900000      R     MOV     DPTR,#Input
0105 E0                MOVX    A,@DPTR
0106 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0109 F0                MOVX    @DPTR,A
010A         ?C0221:
010A 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
010D         ?C0057:
010D 22                RET     
             ; FUNCTION _PrintfInput (END)

             ; FUNCTION _ChangeInput (BEGIN)
                                           ; SOURCE LINE # 551
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 553
0005 7BFF              MOV     R3,#0FFH
0007 7A00        R     MOV     R2,#HIGH ?SC_121
0009 7900        R     MOV     R1,#LOW ?SC_121
000B 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
000E F0                MOVX    @DPTR,A
000F 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 555
0012 120000      E     LCALL   getNoSignalLogoStatus
0015 EF                MOV     A,R7
0016 6003              JZ      ?C0058
                                           ; SOURCE LINE # 556
0018 120000      E     LCALL   RemoveLogo
001B         ?C0058:
                                           ; SOURCE LINE # 559
001B 900000      R     MOV     DPTR,#mode
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 7D03              MOV     R5,#03H
0022 120000      R     LCALL   _PrintfInput
                                           ; SOURCE LINE # 560
0025 900000      R     MOV     DPTR,#mode
0028 E0                MOVX    A,@DPTR
0029 14                DEC     A
002A 600E              JZ      ?C0061
002C 14                DEC     A
002D 600E              JZ      ?C0062
002F 14                DEC     A
0030 600E              JZ      ?C0063
0032 24FC              ADD     A,#0FCH
0034 600D              JZ      ?C0064
0036 2407              ADD     A,#07H
                                           ; SOURCE LINE # 562
0038         ?C0060:
                                           ; SOURCE LINE # 563
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 41  

                                           ; SOURCE LINE # 564
0038 800C              SJMP    ?C0222
                                           ; SOURCE LINE # 567
003A         ?C0061:
                                           ; SOURCE LINE # 568
003A 020000      R     LJMP    ChangeSVIDEO
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 572
003D         ?C0062:
                                           ; SOURCE LINE # 573
003D 020000      R     LJMP    ChangeCOMPONENT
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 577
0040         ?C0063:
                                           ; SOURCE LINE # 578
0040 020000      R     LJMP    ChangePC
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 593
0043         ?C0064:
                                           ; SOURCE LINE # 594
0043 020000      R     LJMP    ChangeBT656
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 597
0046         ?C0222:
0046 120000      R     LCALL   ChangeCVBS
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
                                           ; SOURCE LINE # 601
0049         ?C0066:
0049 22                RET     
             ; FUNCTION _ChangeInput (END)

             ; FUNCTION InputModeNext (BEGIN)
                                           ; SOURCE LINE # 606
                                           ; SOURCE LINE # 607
                                           ; SOURCE LINE # 615
0000 900000      R     MOV     DPTR,#InputMain
0003 E0                MOVX    A,@DPTR
0004 04                INC     A
0005 FF                MOV     R7,A
;---- Variable 'next_input' assigned to Register 'R7' ----
0006         ?C0069:
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 618
0006 EF                MOV     A,R7
0007 B40902            CJNE    A,#09H,?C0070
                                           ; SOURCE LINE # 619
000A E4                CLR     A
000B FF                MOV     R7,A
000C         ?C0070:
                                           ; SOURCE LINE # 637
000C EF                MOV     A,R7
000D B40401            CJNE    A,#04H,?C0067
                                           ; SOURCE LINE # 638
0010 0F                INC     R7
                                           ; SOURCE LINE # 655
0011         ?C0067:
0011 EF                MOV     A,R7
0012 6409              XRL     A,#09H
0014 60F0              JZ      ?C0069
                                           ; SOURCE LINE # 657
0016 020000      R     LJMP    _ChangeInput
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 42  

             ; FUNCTION InputModeNext (END)

             ; FUNCTION InitInputAsDefault (BEGIN)
                                           ; SOURCE LINE # 678
                                           ; SOURCE LINE # 679
                                           ; SOURCE LINE # 685
0000 7F05              MOV     R7,#05H
0002 120000      E     LCALL   _FOsdIndexMsgPrint
                                           ; SOURCE LINE # 687
0005 120000      E     LCALL   LinkCheckAndSetInput
                                           ; SOURCE LINE # 688
0008 E4                CLR     A
0009 FF                MOV     R7,A
000A 120000      E     LCALL   _Interrupt_enableVideoDetect
                                           ; SOURCE LINE # 689
000D 120000      E     LCALL   _TaskNoSignal_setCmd
                                           ; SOURCE LINE # 690
0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 120000      E     LCALL   _LedBackLight
                                           ; SOURCE LINE # 698
0015 7BFF              MOV     R3,#0FFH
0017 7A00        R     MOV     R2,#HIGH ?SC_140
0019 7900        R     MOV     R1,#LOW ?SC_140
001B 120000      E     LCALL   _dPuts
                                           ; SOURCE LINE # 699
001E 7BFF              MOV     R3,#0FFH
0020 7A00        E     MOV     R2,#HIGH DataInitNTSC
0022 7900        E     MOV     R1,#LOW DataInitNTSC
0024 E4                CLR     A
0025 FD                MOV     R5,A
0026 120000      E     LCALL   _I2CDeviceInitialize
                                           ; SOURCE LINE # 705
0029 900000      E     MOV     DPTR,#SpiFlashVendor
002C E0                MOVX    A,@DPTR
002D B4010E            CJNE    A,#01H,?C0073
                                           ; SOURCE LINE # 707
0030 120000      R     LCALL   L?0260
0033 E0                MOVX    A,@DPTR
0034 54F8              ANL     A,#0F8H
0036 4402              ORL     A,#02H
0038 FF                MOV     R7,A
0039 120000      R     LCALL   L?0260
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 708
003E         ?C0073:
                                           ; SOURCE LINE # 721
003E 900000      R     MOV     DPTR,#InputMain
0041 E0                MOVX    A,@DPTR
0042 B40800            CJNE    A,#08H,?C0202
0045         ?C0202:
0045 5043              JNC     ?C0074
0047 900000      R     MOV     DPTR,#?C0203
004A F8                MOV     R0,A
004B 28                ADD     A,R0
004C 28                ADD     A,R0
004D 73                JMP     @A+DPTR
004E         ?C0203:
004E 020000      R     LJMP    ?C0076
0051 020000      R     LJMP    ?C0076
0054 020000      R     LJMP    ?C0077
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 43  

0057 020000      R     LJMP    ?C0078
005A 020000      R     LJMP    ?C0079
005D 020000      R     LJMP    ?C0081
0060 020000      R     LJMP    ?C0081
0063 020000      R     LJMP    ?C0082
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 723
0066         ?C0076:
                                           ; SOURCE LINE # 724
0066 E4                CLR     A
0067 FD                MOV     R5,A
0068 FF                MOV     R7,A
                                           ; SOURCE LINE # 725
0069 801C              SJMP    ?C0227
                                           ; SOURCE LINE # 726
006B         ?C0077:
                                           ; SOURCE LINE # 727
006B E4                CLR     A
006C FD                MOV     R5,A
006D 7F01              MOV     R7,#01H
006F         ?C0223:
                                           ; SOURCE LINE # 728
006F 8016              SJMP    ?C0227
                                           ; SOURCE LINE # 729
0071         ?C0078:
                                           ; SOURCE LINE # 730
0071 7D01              MOV     R5,#01H
0073 7F01              MOV     R7,#01H
0075         ?C0224:
                                           ; SOURCE LINE # 731
0075 8010              SJMP    ?C0227
                                           ; SOURCE LINE # 732
0077         ?C0079:
                                           ; SOURCE LINE # 733
0077 7D01              MOV     R5,#01H
0079 7F02              MOV     R7,#02H
007B         ?C0225:
                                           ; SOURCE LINE # 734
007B 800A              SJMP    ?C0227
                                           ; SOURCE LINE # 735
                                           ; SOURCE LINE # 736
007D         ?C0081:
                                           ; SOURCE LINE # 737
007D 7D01              MOV     R5,#01H
007F 7F02              MOV     R7,#02H
0081         ?C0226:
                                           ; SOURCE LINE # 738
0081 8004              SJMP    ?C0227
                                           ; SOURCE LINE # 739
0083         ?C0082:
                                           ; SOURCE LINE # 740
0083 E4                CLR     A
0084 FD                MOV     R5,A
0085 7F06              MOV     R7,#06H
0087         ?C0227:
0087 120000      R     LCALL   _InputSetSource
                                           ; SOURCE LINE # 741
                                           ; SOURCE LINE # 742
008A         ?C0074:
                                           ; SOURCE LINE # 745
008A 900000      R     MOV     DPTR,#InputMain
008D E0                MOVX    A,@DPTR
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 44  

008E FF                MOV     R7,A
008F 120000      E     LCALL   _InMuxSetInput
                                           ; SOURCE LINE # 748
0092 E4                CLR     A
0093 FF                MOV     R7,A
0094 120000      E     LCALL   _DecoderFreerun
                                           ; SOURCE LINE # 751
0097 120000      E     LCALL   VAdcSetDefaultFor
                                           ; SOURCE LINE # 753
009A 900000      R     MOV     DPTR,#InputMain
009D E0                MOVX    A,@DPTR
009E B40706            CJNE    A,#07H,?C0083
                                           ; SOURCE LINE # 754
00A1 E4                CLR     A
00A2 FD                MOV     R5,A
00A3 7F01              MOV     R7,#01H
00A5 8004              SJMP    ?C0228
00A7         ?C0083:
                                           ; SOURCE LINE # 756
00A7 7D01              MOV     R5,#01H
00A9 E4                CLR     A
00AA FF                MOV     R7,A
00AB         ?C0228:
00AB 120000      E     LCALL   _BT656OutputEnable
00AE         ?C0084:
                                           ; SOURCE LINE # 759
00AE 900000      R     MOV     DPTR,#InputMain
00B1 E0                MOVX    A,@DPTR
00B2 24FB              ADD     A,#0FBH
00B4 600C              JZ      ?C0092
00B6 14                DEC     A
00B7 6009              JZ      ?C0092
00B9 14                DEC     A
00BA 600A              JZ      ?C0093
00BC 2403              ADD     A,#03H
00BE 700D              JNZ     ?C0085
                                           ; SOURCE LINE # 760
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 763
                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 765
00C0         ?C0090:
                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
00C0 8000              SJMP    ?C0229
                                           ; SOURCE LINE # 768
                                           ; SOURCE LINE # 769
00C2         ?C0092:
                                           ; SOURCE LINE # 770
00C2         ?C0229:
00C2 E4                CLR     A
00C3 FD                MOV     R5,A
                                           ; SOURCE LINE # 771
00C4 8003              SJMP    ?C0230
                                           ; SOURCE LINE # 772
00C6         ?C0093:
                                           ; SOURCE LINE # 773
00C6 7D01              MOV     R5,#01H
00C8 E4                CLR     A
00C9         ?C0230:
00C9 FF                MOV     R7,A
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 45  

00CA 120000      R     LCALL   _BT656InputFreerunClk
                                           ; SOURCE LINE # 774
                                           ; SOURCE LINE # 775
00CD         ?C0085:
                                           ; SOURCE LINE # 778
00CD 900000      R     MOV     DPTR,#InputMain
00D0 E0                MOVX    A,@DPTR
00D1 24F9              ADD     A,#0F9H
00D3 6002              JZ      ?C0101
00D5 8006              SJMP    ?C0094
                                           ; SOURCE LINE # 779
                                           ; SOURCE LINE # 780
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 782
                                           ; SOURCE LINE # 783
                                           ; SOURCE LINE # 798
                                           ; SOURCE LINE # 799
                                           ; SOURCE LINE # 822
                                           ; SOURCE LINE # 823
00D7         ?C0101:
                                           ; SOURCE LINE # 825
00D7 E4                CLR     A
00D8 FD                MOV     R5,A
00D9 FF                MOV     R7,A
00DA 120000      E     LCALL   _DtvSetRouteFormat
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
00DD         ?C0094:
                                           ; SOURCE LINE # 842
00DD E4                CLR     A
00DE FF                MOV     R7,A
00DF 120000      E     LCALL   _ScalerSetFreerunManual
                                           ; SOURCE LINE # 845
00E2 900000      R     MOV     DPTR,#InputMain
00E5 E0                MOVX    A,@DPTR
00E6 24FC              ADD     A,#0FCH
00E8 5006              JNC     ?C0106
00EA 24FD              ADD     A,#0FDH
00EC 5011              JNC     ?C0109
00EE 8026              SJMP    ?C0102
                                           ; SOURCE LINE # 846
                                           ; SOURCE LINE # 847
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 849
00F0         ?C0106:
                                           ; SOURCE LINE # 851
                                           ; SOURCE LINE # 852
00F0 120000      R     LCALL   L?0249
                                           ; SOURCE LINE # 853
00F3 E4                CLR     A
00F4 FF                MOV     R7,A
00F5 120000      E     LCALL   _MeasEnableDeMeasure
                                           ; SOURCE LINE # 854
00F8 7F40              MOV     R7,#040H
00FA 120000      E     LCALL   _MeasSetThreshold
                                           ; SOURCE LINE # 855
00FD 8017              SJMP    ?C0102
                                           ; SOURCE LINE # 856
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 858
00FF         ?C0109:
                                           ; SOURCE LINE # 859
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 46  

                                           ; SOURCE LINE # 860
00FF 120000      R     LCALL   L?0249
                                           ; SOURCE LINE # 861
0102 7F01              MOV     R7,#01H
0104 120000      E     LCALL   _MeasEnableDeMeasure
                                           ; SOURCE LINE # 862
0107 7F40              MOV     R7,#040H
0109 120000      E     LCALL   _MeasSetThreshold
                                           ; SOURCE LINE # 863
010C 7F04              MOV     R7,#04H
010E 120000      E     LCALL   _MeasSetErrTolerance
                                           ; SOURCE LINE # 864
0111 7F01              MOV     R7,#01H
0113 120000      E     LCALL   _MeasEnableChangedDetection
                                           ; SOURCE LINE # 865
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 867
                                           ; SOURCE LINE # 868
0116         ?C0102:
                                           ; SOURCE LINE # 871
0116 900000      R     MOV     DPTR,#InputMain
0119 E0                MOVX    A,@DPTR
011A FF                MOV     R7,A
011B 020000      E     LJMP    _SetImage
                                           ; SOURCE LINE # 872
011E         L?0249:
011E 900000      E     MOV     DPTR,#?_MeasSetWindow?BYTE+06H
0121 740F              MOV     A,#0FH
0123 F0                MOVX    @DPTR,A
0124 A3                INC     DPTR
0125 74FF              MOV     A,#0FFH
0127 F0                MOVX    @DPTR,A
0128 FB                MOV     R3,A
0129 7A0F              MOV     R2,#0FH
012B E4                CLR     A
012C FD                MOV     R5,A
012D FC                MOV     R4,A
012E FF                MOV     R7,A
012F FE                MOV     R6,A
0130 120000      E     LCALL   _MeasSetWindow
0133 7F02              MOV     R7,#02H
0135 120000      E     LCALL   _MeasSetField
0138 22                RET     
             ; FUNCTION InitInputAsDefault (END)

             ; FUNCTION _VInput_enableOutput (BEGIN)
                                           ; SOURCE LINE # 881
;---- Variable 'fRecheck' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 882
                                           ; SOURCE LINE # 883
0000 EF                MOV     A,R7
0001 6015              JZ      ?C0112
                                           ; SOURCE LINE # 884
0003 7BFF              MOV     R3,#0FFH
0005 7A00        R     MOV     R2,#HIGH ?SC_166
0007 7900        R     MOV     R1,#LOW ?SC_166
0009 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
000C E500        E     MOV     A,VH_Loss_Changed
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 E500        E     MOV     A,VH_Loss_Changed+01H
0012 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 47  

0013 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 886
0016 8019              SJMP    ?C0113
0018         ?C0112:
                                           ; SOURCE LINE # 887
                                           ; SOURCE LINE # 888
0018 E4                CLR     A
0019 FF                MOV     R7,A
001A 120000      E     LCALL   _ScalerSetMuteManual
                                           ; SOURCE LINE # 889
001D E4                CLR     A
001E FF                MOV     R7,A
001F 120000      E     LCALL   _ScalerSetFreerunManual
                                           ; SOURCE LINE # 890
0022 E4                CLR     A
0023 120000      E     LCALL   _ScalerSetFreerunValue
                                           ; SOURCE LINE # 892
0026 120000      E     LCALL   SpiOsdSetDeValue
                                           ; SOURCE LINE # 893
0029 120000      E     LCALL   FOsdSetDeValue
                                           ; SOURCE LINE # 895
002C 7F01              MOV     R7,#01H
002E 120000      E     LCALL   _LedBackLight
                                           ; SOURCE LINE # 896
0031         ?C0113:
                                           ; SOURCE LINE # 897
0031 E4                CLR     A
0032 FF                MOV     R7,A
0033 120000      E     LCALL   _TaskNoSignal_setCmd
                                           ; SOURCE LINE # 899
0036 7F01              MOV     R7,#01H
0038 120000      E     LCALL   _Interrupt_enableVideoDetect
                                           ; SOURCE LINE # 901
003B 900000      R     MOV     DPTR,#InputMain
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 6404              XRL     A,#04H
0042 6014              JZ      ?C0117
0044 EF                MOV     A,R7
0045 6405              XRL     A,#05H
0047 600F              JZ      ?C0117
0049 EF                MOV     A,R7
004A 6406              XRL     A,#06H
004C 600A              JZ      ?C0117
004E EF                MOV     A,R7
004F 6407              XRL     A,#07H
0051 6005              JZ      ?C0117
                                           ; SOURCE LINE # 904
                                           ; SOURCE LINE # 907
0053         ?C0114:
                                           ; SOURCE LINE # 909
0053 7F01              MOV     R7,#01H
0055 120000      E     LCALL   _Interrupt_enableSyncDetect
                                           ; SOURCE LINE # 913
0058         ?C0117:
0058 22                RET     
             ; FUNCTION _VInput_enableOutput (END)

             ; FUNCTION _VInput_gotoFreerun (BEGIN)
                                           ; SOURCE LINE # 927
0000 900000      R     MOV     DPTR,#reason
0003 EF                MOV     A,R7
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 48  

0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 928
                                           ; SOURCE LINE # 929
0005 120000      E     LCALL   ScalerCheckPanelFreerunValue
                                           ; SOURCE LINE # 932
0008 900000      R     MOV     DPTR,#InputMain
000B E0                MOVX    A,@DPTR
000C 6407              XRL     A,#07H
000E 6005              JZ      ?C0119
                                           ; SOURCE LINE # 934
0010         ?C0118:
                                           ; SOURCE LINE # 935
                                           ; SOURCE LINE # 936
0010 7F02              MOV     R7,#02H
0012 120000      E     LCALL   _DecoderFreerun
                                           ; SOURCE LINE # 937
0015         ?C0119:
                                           ; SOURCE LINE # 938
0015 7F01              MOV     R7,#01H
0017 120000      E     LCALL   _ScalerSetFreerunManual
                                           ; SOURCE LINE # 940
001A 900000      R     MOV     DPTR,#InputMain
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 6405              XRL     A,#05H
0021 600F              JZ      ?C0122
0023 EF                MOV     A,R7
0024 6406              XRL     A,#06H
0026 600A              JZ      ?C0122
0028 EF                MOV     A,R7
0029 6407              XRL     A,#07H
002B 6005              JZ      ?C0122
                                           ; SOURCE LINE # 942
                                           ; SOURCE LINE # 944
002D         ?C0120:
                                           ; SOURCE LINE # 945
                                           ; SOURCE LINE # 946
002D 7F01              MOV     R7,#01H
002F 120000      E     LCALL   _ScalerSetMuteManual
                                           ; SOURCE LINE # 947
0032         ?C0122:
                                           ; SOURCE LINE # 949
0032 900000      R     MOV     DPTR,#reason
0035 E0                MOVX    A,@DPTR
0036 7024              JNZ     ?C0123
0038 120000      E     LCALL   MenuGetLevel
003B EF                MOV     A,R7
003C 701E              JNZ     ?C0123
                                           ; SOURCE LINE # 950
003E 30001B      E     JNB     access,?C0123
                                           ; SOURCE LINE # 951
0041 120000      E     LCALL   FOsdSetDeValue
                                           ; SOURCE LINE # 952
0044 7F02              MOV     R7,#02H
0046 120000      E     LCALL   _FOsdIndexMsgPrint
                                           ; SOURCE LINE # 953
0049 E4                CLR     A
004A F500        E     MOV     tic_task,A
004C F500        E     MOV     tic_task+01H,A
                                           ; SOURCE LINE # 956
004E 120000      E     LCALL   getNoSignalLogoStatus
0051 EF                MOV     A,R7
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 49  

0052 7003              JNZ     ?C0125
                                           ; SOURCE LINE # 957
0054 120000      E     LCALL   InitLogo1
0057         ?C0125:
                                           ; SOURCE LINE # 959
0057 7F01              MOV     R7,#01H
0059 120000      E     LCALL   _TaskNoSignal_setCmd
                                           ; SOURCE LINE # 960
                                           ; SOURCE LINE # 961
005C         ?C0123:
                                           ; SOURCE LINE # 963
005C 900000      R     MOV     DPTR,#InputMain
005F E0                MOVX    A,@DPTR
0060 B40313            CJNE    A,#03H,?C0126
                                           ; SOURCE LINE # 965
0063 120000      R     LCALL   InputGetHStart
0066 900000      E     MOV     DPTR,#RGB_HSTART
0069 EE                MOV     A,R6
006A F0                MOVX    @DPTR,A
006B A3                INC     DPTR
006C EF                MOV     A,R7
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 966
006E 120000      E     LCALL   ScalerReadVDEReg
0071 900000      E     MOV     DPTR,#RGB_VDE
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 967
0076         ?C0126:
                                           ; SOURCE LINE # 969
0076 7F01              MOV     R7,#01H
0078 120000      E     LCALL   _LedBackLight
                                           ; SOURCE LINE # 971
007B 7F01              MOV     R7,#01H
007D 020000      E     LJMP    _Interrupt_enableVideoDetect
             ; FUNCTION _VInput_gotoFreerun (END)

             ; FUNCTION CheckAndSetDecoderScaler (BEGIN)
                                           ; SOURCE LINE # 992
                                           ; SOURCE LINE # 993
                                           ; SOURCE LINE # 999
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_187
0004 7900        R     MOV     R1,#LOW ?SC_187
0006 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1001
0009 7F64              MOV     R7,#064H
000B 120000      E     LCALL   _DecoderCheckVDLOSS
000E EF                MOV     A,R7
000F 6013              JZ      ?C0128
                                           ; SOURCE LINE # 1002
0011 7BFF              MOV     R3,#0FFH
0013 7A00        R     MOV     R2,#HIGH ?SC_220
0015 7900        R     MOV     R1,#LOW ?SC_220
0017 120000      E     LCALL   _ePuts
                                           ; SOURCE LINE # 1003
001A 7F02              MOV     R7,#02H
001C 120000      E     LCALL   _DecoderFreerun
                                           ; SOURCE LINE # 1004
001F 7F01              MOV     R7,#01H
0021 020000      E     LJMP    _ScalerSetFreerunManual
                                           ; SOURCE LINE # 1005
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 50  

                                           ; SOURCE LINE # 1006
0024         ?C0128:
                                           ; SOURCE LINE # 1008
0024 7F64              MOV     R7,#064H
0026 120000      E     LCALL   _DecoderCheckSTD
0029 900000      R     MOV     DPTR,#mode
002C EF                MOV     A,R7
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1009
002E BF800C            CJNE    R7,#080H,?C0130
                                           ; SOURCE LINE # 1010
0031 7BFF              MOV     R3,#0FFH
0033 7A00        R     MOV     R2,#HIGH ?SC_253
0035 7900        R     MOV     R1,#LOW ?SC_253
0037 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 1011
003A 7F02              MOV     R7,#02H
003C 22                RET     
                                           ; SOURCE LINE # 1012
003D         ?C0130:
                                           ; SOURCE LINE # 1013
003D 900000      R     MOV     DPTR,#mode
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 C4                SWAP    A
0043 540F              ANL     A,#0FH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1014
0046 900000      R     MOV     DPTR,#InputSubMode
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1016
004A 120000      E     LCALL   GetAspectModeEE
004D 900000      E     MOV     DPTR,#VideoAspect
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1019
0052 120000      E     LCALL   DecoderGetVDelay
0055 E4                CLR     A
0056 FC                MOV     R4,A
0057 FD                MOV     R5,A
0058 900000      R     MOV     DPTR,#vDelay
005B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1025
005E 900000      R     MOV     DPTR,#x_ratio
0061 120000      E     LCALL   ?C?LSTKXDATA
0064 00                DB      00H
0065 00                DB      00H
0066 03                DB      03H
0067 20                DB      020H
                                           ; SOURCE LINE # 1026
0068 900000      R     MOV     DPTR,#x_ratio
006B 120000      R     LCALL   L?0246
006E 120000      R     LCALL   L?0265
0071 900000      R     MOV     DPTR,#x_ratio
0074 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1027
0077 900000      R     MOV     DPTR,#x_ratio
007A 120000      R     LCALL   L?0246
007D E4                CLR     A
007E 7BD0              MOV     R3,#0D0H
0080 7A02              MOV     R2,#02H
0082 F9                MOV     R1,A
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 51  

0083 F8                MOV     R0,A
0084 120000      E     LCALL   ?C?ULDIV
0087 900000      R     MOV     DPTR,#x_ratio
008A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1028
008D 900000      R     MOV     DPTR,#y_ratio
0090 120000      E     LCALL   ?C?LSTKXDATA
0093 00                DB      00H
0094 00                DB      00H
0095 01                DB      01H
0096 E0                DB      0E0H
                                           ; SOURCE LINE # 1029
0097 120000      R     LCALL   L?0245
009A 120000      R     LCALL   L?0265
009D 900000      R     MOV     DPTR,#y_ratio
                                           ; SOURCE LINE # 1030
00A0 120000      R     LCALL   L?0244
00A3 E4                CLR     A
00A4 7BE0              MOV     R3,#0E0H
00A6 7A01              MOV     R2,#01H
00A8 F9                MOV     R1,A
00A9 F8                MOV     R0,A
00AA 120000      E     LCALL   ?C?ULDIV
00AD 900000      R     MOV     DPTR,#y_ratio
00B0 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1031
00B3 7BFF              MOV     R3,#0FFH
00B5 7A00        R     MOV     R2,#HIGH ?SC_285
00B7 7900        R     MOV     R1,#LOW ?SC_285
00B9 900000      R     MOV     DPTR,#x_ratio
00BC 120000      R     LCALL   L?0246
00BF 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
00C2 120000      R     LCALL   L?0244
00C5 900000      E     MOV     DPTR,#?_dPrintf?BYTE+07H
00C8 120000      E     LCALL   ?C?LSTXDATA
00CB 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1033
00CE 900000      E     MOV     DPTR,#VideoAspect
00D1 E0                MOVX    A,@DPTR
00D2 6401              XRL     A,#01H
00D4 700A              JNZ     ?C0131
                                           ; SOURCE LINE # 1034
00D6 120000      R     LCALL   L?0245
00D9 120000      R     LCALL   L?0255
00DC 4010              JC      ?C0232
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1036
                                           ; SOURCE LINE # 1037
00DE 801A              SJMP    ?C0231
00E0         ?C0131:
                                           ; SOURCE LINE # 1043
00E0 900000      E     MOV     DPTR,#VideoAspect
00E3 E0                MOVX    A,@DPTR
00E4 7020              JNZ     ?C0135
                                           ; SOURCE LINE # 1044
00E6 120000      R     LCALL   L?0245
00E9 120000      R     LCALL   L?0255
00EC 400C              JC      ?C0136
                                           ; SOURCE LINE # 1045
00EE         ?C0232:
00EE 7A00        R     MOV     R2,#HIGH ?SC_323
00F0 7900        R     MOV     R1,#LOW ?SC_323
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 52  

00F2 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1046
00F5 900000      R     MOV     DPTR,#x_ratio
                                           ; SOURCE LINE # 1047
00F8 8019              SJMP    ?C0234
00FA         ?C0136:
                                           ; SOURCE LINE # 1048
                                           ; SOURCE LINE # 1049
00FA         ?C0231:
00FA 7A00        R     MOV     R2,#HIGH ?SC_306
00FC 7900        R     MOV     R1,#LOW ?SC_306
00FE 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1050
0101 900000      R     MOV     DPTR,#y_ratio
0104         ?C0233:
                                           ; SOURCE LINE # 1051
                                           ; SOURCE LINE # 1052
0104 800D              SJMP    ?C0234
0106         ?C0135:
                                           ; SOURCE LINE # 1053
                                           ; SOURCE LINE # 1054
0106 900000      R     MOV     DPTR,#x_ratio
0109 120000      E     LCALL   ?C?LSTKXDATA
010C 00                DB      00H
010D 00                DB      00H
010E 00                DB      00H
010F 00                DB      00H
                                           ; SOURCE LINE # 1055
0110 900000      R     MOV     DPTR,#y_ratio
0113         ?C0234:
0113 120000      E     LCALL   ?C?LSTKXDATA
0116 00                DB      00H
0117 00                DB      00H
0118 00                DB      00H
0119 00                DB      00H
                                           ; SOURCE LINE # 1056
011A         ?C0134:
                                           ; SOURCE LINE # 1059
011A 900000      R     MOV     DPTR,#mode
011D E0                MOVX    A,@DPTR
011E 7021              JNZ     ?C0139
                                           ; SOURCE LINE # 1060
0120 A3                INC     DPTR
0121 120000      E     LCALL   ?C?LSTKXDATA
0124 00                DB      00H
0125 00                DB      00H
0126 00                DB      00H
0127 E4                DB      0E4H
                                           ; SOURCE LINE # 1063
                                           ; SOURCE LINE # 1065
0128 120000      R     LCALL   L?0251
012B B40103            CJNE    A,#01H,?C0140
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1067
012E 120000      R     LCALL   L?0262
                                           ; SOURCE LINE # 1068
0131         ?C0140:
                                           ; SOURCE LINE # 1070
0131 7FF0              MOV     R7,#0F0H
0133 7E00              MOV     R6,#00H
                                           ; SOURCE LINE # 1073
                                           ; SOURCE LINE # 1074
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 53  

0135 120000      R     LCALL   L?0248
0138 7400        R     MOV     A,#HIGH ?SC_340
013A F0                MOVX    @DPTR,A
013B A3                INC     DPTR
013C 7400        R     MOV     A,#LOW ?SC_340
                                           ; SOURCE LINE # 1075
013E 020000      R     LJMP    ?C0237
0141         ?C0139:
                                           ; SOURCE LINE # 1076
0141 900000      R     MOV     DPTR,#mode
0144 E0                MOVX    A,@DPTR
0145 6401              XRL     A,#01H
0147 7025              JNZ     ?C0142
                                           ; SOURCE LINE # 1077
0149 A3                INC     DPTR
014A 120000      E     LCALL   ?C?LSTKXDATA
014D 00                DB      00H
014E 00                DB      00H
014F 01                DB      01H
0150 13                DB      013H
                                           ; SOURCE LINE # 1085
                                           ; SOURCE LINE # 1087
0151 120000      R     LCALL   L?0251
0154 B40107            CJNE    A,#01H,?C0143
                                           ; SOURCE LINE # 1088
0157 900000      R     MOV     DPTR,#vDelayAdd
015A E0                MOVX    A,@DPTR
015B 2421              ADD     A,#021H
015D F0                MOVX    @DPTR,A
015E         ?C0143:
                                           ; SOURCE LINE # 1090
015E 7F20              MOV     R7,#020H
0160 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 1093
                                           ; SOURCE LINE # 1094
0162 120000      R     LCALL   L?0248
0165 7400        R     MOV     A,#HIGH ?SC_346
0167 F0                MOVX    @DPTR,A
0168 A3                INC     DPTR
0169 7400        R     MOV     A,#LOW ?SC_346
016B         ?C0235:
                                           ; SOURCE LINE # 1095
016B 020000      R     LJMP    ?C0237
016E         ?C0142:
                                           ; SOURCE LINE # 1104
016E 900000      R     MOV     DPTR,#mode
0171 E0                MOVX    A,@DPTR
0172 FF                MOV     R7,A
0173 6403              XRL     A,#03H
0175 600A              JZ      ?C0146
0177 EF                MOV     A,R7
0178 6404              XRL     A,#04H
017A 6005              JZ      ?C0146
017C EF                MOV     A,R7
017D 6406              XRL     A,#06H
017F 704D              JNZ     ?C0145
0181         ?C0146:
                                           ; SOURCE LINE # 1107
                                           ; SOURCE LINE # 1108
0181 900000      R     MOV     DPTR,#vPeriod
0184 120000      E     LCALL   ?C?LSTKXDATA
0187 00                DB      00H
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 54  

0188 00                DB      00H
0189 00                DB      00H
018A E4                DB      0E4H
                                           ; SOURCE LINE # 1109
                                           ; SOURCE LINE # 1110
018B 120000      R     LCALL   L?0252
018E B40103            CJNE    A,#01H,?C0147
                                           ; SOURCE LINE # 1111
                                           ; SOURCE LINE # 1112
0191 120000      R     LCALL   L?0262
                                           ; SOURCE LINE # 1113
0194         ?C0147:
                                           ; SOURCE LINE # 1114
0194 7FF0              MOV     R7,#0F0H
0196 7E00              MOV     R6,#00H
                                           ; SOURCE LINE # 1117
                                           ; SOURCE LINE # 1118
0198 120000      R     LCALL   L?0263
019B B4030B            CJNE    A,#03H,?C0148
019E 120000      R     LCALL   L?0256
01A1 7400        R     MOV     A,#HIGH ?SC_351
01A3 F0                MOVX    @DPTR,A
01A4 7400        R     MOV     A,#LOW ?SC_351
01A6 120000      R     LCALL   L?0250
01A9         ?C0148:
                                           ; SOURCE LINE # 1119
01A9 900000      R     MOV     DPTR,#mode
01AC E0                MOVX    A,@DPTR
01AD B4040B            CJNE    A,#04H,?C0149
01B0 120000      R     LCALL   L?0256
01B3 7400        R     MOV     A,#HIGH ?SC_358
01B5 F0                MOVX    @DPTR,A
01B6 7400        R     MOV     A,#LOW ?SC_358
01B8 120000      R     LCALL   L?0250
01BB         ?C0149:
                                           ; SOURCE LINE # 1120
01BB 900000      R     MOV     DPTR,#mode
01BE E0                MOVX    A,@DPTR
01BF 6406              XRL     A,#06H
01C1 7070              JNZ     ?C0141
01C3 120000      R     LCALL   L?0257
01C6 7400        R     MOV     A,#HIGH ?SC_365
01C8 F0                MOVX    @DPTR,A
01C9 A3                INC     DPTR
01CA 7400        R     MOV     A,#LOW ?SC_365
01CC         ?C0236:
                                           ; SOURCE LINE # 1121
01CC 804C              SJMP    ?C0237
01CE         ?C0145:
                                           ; SOURCE LINE # 1122
01CE 900000      R     MOV     DPTR,#mode
01D1 E0                MOVX    A,@DPTR
01D2 FF                MOV     R7,A
01D3 6402              XRL     A,#02H
01D5 6005              JZ      ?C0153
01D7 EF                MOV     A,R7
01D8 6404              XRL     A,#04H
01DA 7043              JNZ     ?C0152
01DC         ?C0153:
                                           ; SOURCE LINE # 1124
                                           ; SOURCE LINE # 1125
01DC 900000      R     MOV     DPTR,#vPeriod
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 55  

01DF 120000      E     LCALL   ?C?LSTKXDATA
01E2 00                DB      00H
01E3 00                DB      00H
01E4 01                DB      01H
01E5 13                DB      013H
                                           ; SOURCE LINE # 1126
                                           ; SOURCE LINE # 1127
01E6 120000      R     LCALL   L?0252
01E9 B40107            CJNE    A,#01H,?C0154
                                           ; SOURCE LINE # 1128
01EC 900000      R     MOV     DPTR,#vDelayAdd
01EF E0                MOVX    A,@DPTR
01F0 2421              ADD     A,#021H
01F2 F0                MOVX    @DPTR,A
01F3         ?C0154:
                                           ; SOURCE LINE # 1130
01F3 7F20              MOV     R7,#020H
01F5 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 1133
                                           ; SOURCE LINE # 1134
01F7 120000      R     LCALL   L?0263
01FA B4020C            CJNE    A,#02H,?C0155
01FD 120000      R     LCALL   L?0257
0200 7400        R     MOV     A,#HIGH ?SC_373
0202 F0                MOVX    @DPTR,A
0203 A3                INC     DPTR
0204 7400        R     MOV     A,#LOW ?SC_373
0206 120000      R     LCALL   L?0264
0209         ?C0155:
                                           ; SOURCE LINE # 1135
0209 900000      R     MOV     DPTR,#mode
020C E0                MOVX    A,@DPTR
020D 6404              XRL     A,#04H
020F 7022              JNZ     ?C0141
0211 120000      R     LCALL   L?0257
0214 7400        R     MOV     A,#HIGH ?SC_380
0216 F0                MOVX    @DPTR,A
0217 A3                INC     DPTR
0218 7400        R     MOV     A,#LOW ?SC_380
021A         ?C0237:
021A 120000      R     LCALL   L?0264
                                           ; SOURCE LINE # 1136
021D 8014              SJMP    ?C0141
021F         ?C0152:
                                           ; SOURCE LINE # 1137
                                           ; SOURCE LINE # 1138
021F 7BFF              MOV     R3,#0FFH
0221 7A00        R     MOV     R2,#HIGH ?SC_388
0223 7900        R     MOV     R1,#LOW ?SC_388
0225 900000      R     MOV     DPTR,#mode
0228 E0                MOVX    A,@DPTR
0229 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
022C F0                MOVX    @DPTR,A
022D 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 1139
0230 7F03              MOV     R7,#03H
0232 22                RET     
                                           ; SOURCE LINE # 1140
0233         ?C0141:
                                           ; SOURCE LINE # 1142
0233 7FD0              MOV     R7,#0D0H
0235 7E02              MOV     R6,#02H
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 56  

0237 120000      E     LCALL   _ScalerSetLineBufferSize
                                           ; SOURCE LINE # 1144
023A 120000      R     LCALL   L?0245
023D EC                MOV     A,R4
023E 4D                ORL     A,R5
023F 4E                ORL     A,R6
0240 4F                ORL     A,R7
0241 6013              JZ      ?C0158
0243 900000      R     MOV     DPTR,#y_ratio
0246 A3                INC     DPTR
0247 A3                INC     DPTR
0248 A3                INC     DPTR
0249 E0                MOVX    A,@DPTR
024A FD                MOV     R5,A
024B AC06              MOV     R4,AR6
024D 7FD0              MOV     R7,#0D0H
024F 7E02              MOV     R6,#02H
0251 120000      E     LCALL   _ScalerSetHScaleWithRatio
0254 8007              SJMP    ?C0159
0256         ?C0158:
                                           ; SOURCE LINE # 1145
0256 7FD0              MOV     R7,#0D0H
0258 7E02              MOV     R6,#02H
025A 120000      E     LCALL   _ScalerSetHScale
025D         ?C0159:
                                           ; SOURCE LINE # 1146
025D 900000      R     MOV     DPTR,#x_ratio
0260 120000      R     LCALL   L?0246
0263 EC                MOV     A,R4
0264 4D                ORL     A,R5
0265 4E                ORL     A,R6
0266 4F                ORL     A,R7
0267 900000      R     MOV     DPTR,#vPeriod
026A 6019              JZ      ?C0160
026C A3                INC     DPTR
026D 120000      R     LCALL   L?0247
0270 C006              PUSH    AR6
0272 900000      R     MOV     DPTR,#x_ratio
0275 A3                INC     DPTR
0276 A3                INC     DPTR
0277 E0                MOVX    A,@DPTR
0278 FE                MOV     R6,A
0279 A3                INC     DPTR
027A E0                MOVX    A,@DPTR
027B FD                MOV     R5,A
027C AC06              MOV     R4,AR6
027E D006              POP     AR6
0280 120000      E     LCALL   _ScalerSetVScaleWithRatio
0283 8007              SJMP    ?C0161
0285         ?C0160:
                                           ; SOURCE LINE # 1147
0285 A3                INC     DPTR
0286 120000      R     LCALL   L?0247
0289 120000      E     LCALL   _ScalerSetVScale
028C         ?C0161:
                                           ; SOURCE LINE # 1149
028C 900000      R     MOV     DPTR,#vDelay
028F A3                INC     DPTR
0290 A3                INC     DPTR
0291 A3                INC     DPTR
0292 E0                MOVX    A,@DPTR
0293 FF                MOV     R7,A
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 57  

0294 A3                INC     DPTR
0295 E0                MOVX    A,@DPTR
0296 2F                ADD     A,R7
0297 FF                MOV     R7,A
0298 120000      E     LCALL   _ScalerWriteVDEReg
                                           ; SOURCE LINE # 1152
029B 900000      R     MOV     DPTR,#mode
029E E0                MOVX    A,@DPTR
029F 7BFF              MOV     R3,#0FFH
02A1 6006              JZ      ?C0162
02A3 7A00        R     MOV     R2,#HIGH ?SC_504
02A5 7900        R     MOV     R1,#LOW ?SC_504
02A7 8004              SJMP    ?C0163
02A9         ?C0162:
02A9 7A00        R     MOV     R2,#HIGH ?SC_508
02AB 7900        R     MOV     R1,#LOW ?SC_508
02AD         ?C0163:
02AD 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
02B0 EB                MOV     A,R3
02B1 F0                MOVX    @DPTR,A
02B2 A3                INC     DPTR
02B3 EA                MOV     A,R2
02B4 F0                MOVX    @DPTR,A
02B5 A3                INC     DPTR
02B6 E9                MOV     A,R1
02B7 F0                MOVX    @DPTR,A
02B8 900000      R     MOV     DPTR,#vPeriod
02BB 120000      R     LCALL   L?0246
02BE 900000      E     MOV     DPTR,#?_ePrintf?BYTE+06H
02C1 120000      E     LCALL   ?C?LSTXDATA
02C4 900000      R     MOV     DPTR,#vDelay
02C7 120000      R     LCALL   L?0246
02CA 900000      E     MOV     DPTR,#?_ePrintf?BYTE+0AH
02CD 120000      E     LCALL   ?C?LSTXDATA
02D0 900000      R     MOV     DPTR,#vDelayAdd
02D3 E0                MOVX    A,@DPTR
02D4 900000      E     MOV     DPTR,#?_ePrintf?BYTE+0EH
02D7 F0                MOVX    @DPTR,A
02D8 7BFF              MOV     R3,#0FFH
02DA 7A00        R     MOV     R2,#HIGH ?SC_450
02DC 7900        R     MOV     R1,#LOW ?SC_450
02DE 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 1154
02E1 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1155
02E3         ?C0129:
02E3 22                RET     
02E4         L?0248:
02E4 120000      E     LCALL   _DecoderSetVActive
02E7 120000      E     LCALL   FOsdSetInputMainString2FOsdMsgBuff
02EA 900000      E     MOV     DPTR,#?_TWstrcat?BYTE+03H
02ED 74FF              MOV     A,#0FFH
02EF F0                MOVX    @DPTR,A
02F0 A3                INC     DPTR
02F1 22                RET     
02F2         L?0250:
02F2 A3                INC     DPTR
02F3 F0                MOVX    @DPTR,A
02F4 7B01              MOV     R3,#01H
02F6 7A00        E     MOV     R2,#HIGH FOsdMsgBuff
02F8 7900        E     MOV     R1,#LOW FOsdMsgBuff
02FA 120000      E     LCALL   _TWstrcat
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 58  

02FD 22                RET     
02FE         L?0263:
02FE 120000      E     LCALL   _DecoderSetVActive
0301 120000      E     LCALL   FOsdSetInputMainString2FOsdMsgBuff
0304 900000      R     MOV     DPTR,#mode
0307 E0                MOVX    A,@DPTR
0308 22                RET     
0309         L?0264:
0309 F0                MOVX    @DPTR,A
030A 7B01              MOV     R3,#01H
030C 7A00        E     MOV     R2,#HIGH FOsdMsgBuff
030E 7900        E     MOV     R1,#LOW FOsdMsgBuff
0310 120000      E     LCALL   _TWstrcat
0313 22                RET     
             ; FUNCTION CheckAndSetDecoderScaler (END)

             ; FUNCTION _ChangeDecoder (BEGIN)
                                           ; SOURCE LINE # 1177
;---- Variable 'fSVIDEO' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1178
                                           ; SOURCE LINE # 1181
0000 EF                MOV     A,R7
0001 6017              JZ      ?C0164
                                           ; SOURCE LINE # 1182
0003 900000      R     MOV     DPTR,#InputMain
0006 E0                MOVX    A,@DPTR
0007 B40108            CJNE    A,#01H,?C0165
                                           ; SOURCE LINE # 1183
000A 7BFF              MOV     R3,#0FFH
000C 7A00        R     MOV     R2,#HIGH ?SC_513
000E 7900        R     MOV     R1,#LOW ?SC_513
                                           ; SOURCE LINE # 1184
0010 8014              SJMP    ?C0238
                                           ; SOURCE LINE # 1185
0012         ?C0165:
                                           ; SOURCE LINE # 1186
0012 900000      R     MOV     DPTR,#InputMain
0015 7401              MOV     A,#01H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1187
0018 8017              SJMP    ?C0167
001A         ?C0164:
                                           ; SOURCE LINE # 1188
                                           ; SOURCE LINE # 1189
001A 900000      R     MOV     DPTR,#InputMain
001D E0                MOVX    A,@DPTR
001E 700C              JNZ     ?C0168
                                           ; SOURCE LINE # 1190
0020 7BFF              MOV     R3,#0FFH
0022 7A00        R     MOV     R2,#HIGH ?SC_532
0024 7900        R     MOV     R1,#LOW ?SC_532
0026         ?C0238:
0026 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1191
0029 7F01              MOV     R7,#01H
002B 22                RET     
                                           ; SOURCE LINE # 1192
002C         ?C0168:
                                           ; SOURCE LINE # 1193
002C E4                CLR     A
002D 900000      R     MOV     DPTR,#InputMain
0030 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 59  

                                           ; SOURCE LINE # 1194
0031         ?C0167:
                                           ; SOURCE LINE # 1195
0031 900000      R     MOV     DPTR,#InputSubMode
0034 7407              MOV     A,#07H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1197
0037 120000      E     LCALL   GetInputEE
003A 120000      R     LCALL   L?0253
003D 6003              JZ      ?C0169
                                           ; SOURCE LINE # 1198
003F 120000      E     LCALL   _SaveInputEE
0042         ?C0169:
                                           ; SOURCE LINE # 1202
0042 120000      R     LCALL   InitInputAsDefault
                                           ; SOURCE LINE # 1207
0045 7F5E              MOV     R7,#05EH
0047 7E01              MOV     R6,#01H
0049 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 1212
004C 120000      R     LCALL   CheckAndSetDecoderScaler
004F 900000      R     MOV     DPTR,#ret
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1213
0054 7007              JNZ     ?C0170
                                           ; SOURCE LINE # 1215
0056 FF                MOV     R7,A
0057 120000      R     LCALL   _VInput_enableOutput
                                           ; SOURCE LINE # 1216
005A 7F00              MOV     R7,#00H
005C 22                RET     
                                           ; SOURCE LINE # 1217
005D         ?C0170:
                                           ; SOURCE LINE # 1221
005D 900000      R     MOV     DPTR,#ret
0060 E0                MOVX    A,@DPTR
0061 14                DEC     A
0062 FF                MOV     R7,A
0063 120000      R     LCALL   _VInput_gotoFreerun
                                           ; SOURCE LINE # 1223
0066 900000      R     MOV     DPTR,#ret
0069 E0                MOVX    A,@DPTR
006A 04                INC     A
006B FF                MOV     R7,A
                                           ; SOURCE LINE # 1224
006C         ?C0166:
006C 22                RET     
             ; FUNCTION _ChangeDecoder (END)

             ; FUNCTION ChangeCVBS (BEGIN)
                                           ; SOURCE LINE # 1237
                                           ; SOURCE LINE # 1238
                                           ; SOURCE LINE # 1239
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 120000      R     LCALL   _ChangeDecoder
                                           ; SOURCE LINE # 1240
0005         ?C0171:
0005 22                RET     
             ; FUNCTION ChangeCVBS (END)

C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 60  

             ; FUNCTION ChangeSVIDEO (BEGIN)
                                           ; SOURCE LINE # 1253
                                           ; SOURCE LINE # 1254
                                           ; SOURCE LINE # 1255
0000 7F01              MOV     R7,#01H
0002 120000      R     LCALL   _ChangeDecoder
                                           ; SOURCE LINE # 1256
0005         ?C0172:
0005 22                RET     
             ; FUNCTION ChangeSVIDEO (END)

             ; FUNCTION ChangeCOMPONENT (BEGIN)
                                           ; SOURCE LINE # 1273
                                           ; SOURCE LINE # 1274
                                           ; SOURCE LINE # 1277
0000 900000      R     MOV     DPTR,#InputMain
0003 E0                MOVX    A,@DPTR
0004 B4020C            CJNE    A,#02H,?C0173
                                           ; SOURCE LINE # 1278
0007 7BFF              MOV     R3,#0FFH
0009 7A00        R     MOV     R2,#HIGH ?SC_549
000B 7900        R     MOV     R1,#LOW ?SC_549
000D 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1279
0010 7F01              MOV     R7,#01H
0012 22                RET     
                                           ; SOURCE LINE # 1280
0013         ?C0173:
                                           ; SOURCE LINE # 1282
0013 900000      R     MOV     DPTR,#InputMain
0016 7402              MOV     A,#02H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1283
0019 A3                INC     DPTR
001A 7407              MOV     A,#07H
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1285
001D 120000      E     LCALL   GetInputEE
0020 120000      R     LCALL   L?0253
0023 6003              JZ      ?C0175
                                           ; SOURCE LINE # 1286
0025 120000      E     LCALL   _SaveInputEE
0028         ?C0175:
                                           ; SOURCE LINE # 1290
0028 120000      R     LCALL   InitInputAsDefault
                                           ; SOURCE LINE # 1298
002B 120000      E     LCALL   CheckAndSetComponent
;---- Variable 'ret' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1299
002E EF                MOV     A,R7
002F 7007              JNZ     ?C0176
                                           ; SOURCE LINE # 1301
0031 FF                MOV     R7,A
0032 120000      R     LCALL   _VInput_enableOutput
                                           ; SOURCE LINE # 1302
0035 7F00              MOV     R7,#00H
0037 22                RET     
                                           ; SOURCE LINE # 1303
0038         ?C0176:
                                           ; SOURCE LINE # 1310
0038 E4                CLR     A
0039 FF                MOV     R7,A
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 61  

003A 120000      R     LCALL   _VInput_gotoFreerun
                                           ; SOURCE LINE # 1312
003D 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 1313
003F         ?C0174:
003F 22                RET     
             ; FUNCTION ChangeCOMPONENT (END)

             ; FUNCTION ChangePC (BEGIN)
                                           ; SOURCE LINE # 1335
                                           ; SOURCE LINE # 1336
                                           ; SOURCE LINE # 1339
0000 900000      R     MOV     DPTR,#InputMain
0003 E0                MOVX    A,@DPTR
0004 B4030C            CJNE    A,#03H,?C0177
                                           ; SOURCE LINE # 1340
0007 7BFF              MOV     R3,#0FFH
0009 7A00        R     MOV     R2,#HIGH ?SC_571
000B 7900        R     MOV     R1,#LOW ?SC_571
000D 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1341
0010 7F01              MOV     R7,#01H
0012 22                RET     
                                           ; SOURCE LINE # 1342
0013         ?C0177:
                                           ; SOURCE LINE # 1344
0013 900000      R     MOV     DPTR,#InputMain
0016 7403              MOV     A,#03H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1345
0019 E4                CLR     A
001A A3                INC     DPTR
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1347
001C 120000      E     LCALL   GetInputEE
001F 120000      R     LCALL   L?0254
0022 6003              JZ      ?C0179
                                           ; SOURCE LINE # 1348
0024 120000      E     LCALL   _SaveInputEE
0027         ?C0179:
                                           ; SOURCE LINE # 1352
0027 120000      R     LCALL   InitInputAsDefault
                                           ; SOURCE LINE # 1357
002A 120000      E     LCALL   CheckAndSetPC
;---- Variable 'ret' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1358
002D EF                MOV     A,R7
002E 7007              JNZ     ?C0180
                                           ; SOURCE LINE # 1360
0030 FF                MOV     R7,A
0031 120000      R     LCALL   _VInput_enableOutput
                                           ; SOURCE LINE # 1361
0034 7F00              MOV     R7,#00H
0036 22                RET     
                                           ; SOURCE LINE # 1362
0037         ?C0180:
                                           ; SOURCE LINE # 1372
0037 E4                CLR     A
0038 FF                MOV     R7,A
0039 120000      R     LCALL   _VInput_gotoFreerun
                                           ; SOURCE LINE # 1375
003C 7F02              MOV     R7,#02H
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 62  

                                           ; SOURCE LINE # 1376
003E         ?C0178:
003E 22                RET     
             ; FUNCTION ChangePC (END)

             ; FUNCTION ChangeHDMI (BEGIN)
                                           ; SOURCE LINE # 1446
                                           ; SOURCE LINE # 1447
                                           ; SOURCE LINE # 1454
0000 900000      R     MOV     DPTR,#InputMain
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 6405              XRL     A,#05H
0007 6004              JZ      ?C0182
0009 EF                MOV     A,R7
000A B4060C            CJNE    A,#06H,?C0181
000D         ?C0182:
                                           ; SOURCE LINE # 1455
000D 7BFF              MOV     R3,#0FFH
000F 7A00        R     MOV     R2,#HIGH ?SC_586
0011 7900        R     MOV     R1,#LOW ?SC_586
0013 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1456
0016 7F01              MOV     R7,#01H
0018 22                RET     
                                           ; SOURCE LINE # 1457
0019         ?C0181:
                                           ; SOURCE LINE # 1459
0019 120000      E     LCALL   GetHdmiModeEE
001C EF                MOV     A,R7
001D 900000      R     MOV     DPTR,#InputMain
0020 6005              JZ      ?C0184
0022 7406              MOV     A,#06H
0024 F0                MOVX    @DPTR,A
0025 8003              SJMP    ?C0185
0027         ?C0184:
                                           ; SOURCE LINE # 1460
0027 7405              MOV     A,#05H
0029 F0                MOVX    @DPTR,A
002A         ?C0185:
                                           ; SOURCE LINE # 1462
002A 120000      E     LCALL   GetInputEE
002D 120000      R     LCALL   L?0254
0030 6003              JZ      ?C0186
                                           ; SOURCE LINE # 1463
0032 120000      E     LCALL   _SaveInputEE
0035         ?C0186:
                                           ; SOURCE LINE # 1465
0035 7BFF              MOV     R3,#0FFH
0037 7A00        R     MOV     R2,#HIGH ?SC_603
0039 7900        R     MOV     R1,#LOW ?SC_603
003B 900000      R     MOV     DPTR,#InputMain
003E E0                MOVX    A,@DPTR
003F 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0042 F0                MOVX    @DPTR,A
0043 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1469
0046 120000      R     LCALL   InitInputAsDefault
                                           ; SOURCE LINE # 1486
;---- Variable 'ret' assigned to Register 'R7' ----
0049 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1488
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 63  

004B EF                MOV     A,R7
004C 7007              JNZ     ?C0187
                                           ; SOURCE LINE # 1490
004E 1F                DEC     R7
004F 120000      R     LCALL   _VInput_enableOutput
                                           ; SOURCE LINE # 1491
0052 7F00              MOV     R7,#00H
0054 22                RET     
                                           ; SOURCE LINE # 1492
0055         ?C0187:
                                           ; SOURCE LINE # 1497
0055 E4                CLR     A
0056 FF                MOV     R7,A
0057 120000      R     LCALL   _VInput_gotoFreerun
                                           ; SOURCE LINE # 1499
005A 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 1500
005C         ?C0183:
005C 22                RET     
             ; FUNCTION ChangeHDMI (END)

             ; FUNCTION CheckAndSetBT656 (BEGIN)
                                           ; SOURCE LINE # 1516
                                           ; SOURCE LINE # 1517
                                           ; SOURCE LINE # 1527
0000 120000      E     LCALL   ScalerCalcHDE
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1528
0003 EF                MOV     A,R7
0004 2403              ADD     A,#03H
0006 FF                MOV     R7,A
0007 120000      E     LCALL   _ScalerWriteHDEReg
                                           ; SOURCE LINE # 1531
000A 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1533
000C         ?C0188:
000C 22                RET     
             ; FUNCTION CheckAndSetBT656 (END)

             ; FUNCTION ChangeBT656 (BEGIN)
                                           ; SOURCE LINE # 1549
                                           ; SOURCE LINE # 1550
                                           ; SOURCE LINE # 1553
0000 900000      R     MOV     DPTR,#InputMain
0003 E0                MOVX    A,@DPTR
0004 B4070C            CJNE    A,#07H,?C0189
                                           ; SOURCE LINE # 1554
0007 7BFF              MOV     R3,#0FFH
0009 7A00        R     MOV     R2,#HIGH ?SC_631
000B 7900        R     MOV     R1,#LOW ?SC_631
000D 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1555
0010 7F01              MOV     R7,#01H
0012 22                RET     
                                           ; SOURCE LINE # 1556
0013         ?C0189:
                                           ; SOURCE LINE # 1557
0013 900000      R     MOV     DPTR,#InputMain
0016 7407              MOV     A,#07H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1559
0019 120000      E     LCALL   GetInputEE
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 64  

001C 120000      R     LCALL   L?0254
001F 6003              JZ      ?C0191
                                           ; SOURCE LINE # 1560
0021 120000      E     LCALL   _SaveInputEE
0024         ?C0191:
                                           ; SOURCE LINE # 1564
0024 120000      R     LCALL   InitInputAsDefault
                                           ; SOURCE LINE # 1569
0027 120000      R     LCALL   CheckAndSetBT656
;---- Variable 'ret' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1572
002A EF                MOV     A,R7
002B 7007              JNZ     ?C0192
                                           ; SOURCE LINE # 1574
002D FF                MOV     R7,A
002E 120000      R     LCALL   _VInput_enableOutput
                                           ; SOURCE LINE # 1576
0031 7F00              MOV     R7,#00H
0033 22                RET     
                                           ; SOURCE LINE # 1577
0034         ?C0192:
                                           ; SOURCE LINE # 1583
0034 E4                CLR     A
0035 FF                MOV     R7,A
0036 120000      R     LCALL   _VInput_gotoFreerun
                                           ; SOURCE LINE # 1585
0039 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 1586
003B         ?C0190:
003B 22                RET     
             ; FUNCTION ChangeBT656 (END)

C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 65  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


getNoSignalLogoStatus. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VAdcSetDefaultFor. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ChangeCOMPONENT. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
ChangeBT656. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_InputSetFieldPolarity . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fInv . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  r041 . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
_ChangeDecoder . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fSVIDEO. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
FOsdSetInputMainString2FOsdMsgBuff . .  EXTERN   CODE   PROC     -----  -----
RemoveLogo . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_LedBackLight. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MeasSetErrTolerance . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_DecoderCheckSTD . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_PrintfInput . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Input. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  debug. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
Wait1VBlank. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  loop . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_ScalerSetMuteManual . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
st_animation . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  53
  active . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  current. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  speed. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  vcnt . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  srcx . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000DH  20
  srcy . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0021H  20
InputGetHStart . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  wValue . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
ScalerCheckPanelFreerunValue . . . . .  EXTERN   CODE   PROC     -----  -----
SpiFlashVendor . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
menu_fitem_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  winno. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  osdram . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  zoom_h . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  zoom_v . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  BPP1Color. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  BPP3_palette . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  BPP3_color . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
_dPuts . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
menu_fitem_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  15
  winno. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  osdram . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 66  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  zoom_h . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  zoom_v . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  BPP1Color. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  BPP3_palette . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  BPP3_color . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
_SetImage. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerSetLineBufferSize . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ePuts . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RGB_HSTART . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
ChangeSVIDEO . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_DecoderFreerun. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetAspectModeEE. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
menu_page_info_s . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  focus. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  select . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  item_start . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  item_total . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  items. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  texts. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0008H  3
_BT656OutputEnable . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
menu_page_info_t . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  11
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  focus. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  select . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  item_start . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  item_total . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  items. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  texts. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0008H  3
InputMain. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
RGB_VDE. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_InputSetHStart. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  x. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
_Interrupt_enableSyncDetect. . . . . .  EXTERN   CODE   PROC     -----  -----
FOsdMsgBuff. . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  40
_MeasSetField. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
menu_sitem_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  23
  osd_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  p. . . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  align. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  image. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
  image1 . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
  image_type . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  lut. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  up . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  down . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0016H  1
_DecoderSetVActive . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
menu_sitem_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  23
  osd_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 67  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  p. . . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  align. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  image. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
  image1 . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
  image_type . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  lut. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  up . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  down . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0016H  1
_FOsdIndexMsgPrint . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_delay1ms. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ScalerCalcHDE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DecoderGetVDelay . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MeasEnableChangedDetection. . . . . .  EXTERN   CODE   PROC     -----  -----
InitInputAsDefault . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
fosd_menu_item_s . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  12
  ram. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  zoom . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  ch_space_low . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  color. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  alpha_value. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  alpha_color_index. . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  reserved9. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  reserved10 . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  reserved11 . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
_I2CDeviceInitialize . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SpiOsdSetDeValue . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SaveInputEE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VH_Loss_Changed. . . . . . . . . . . .  EXTERN   DATA   U_INT    -----  2
_MeasSetWindow . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MenuGetLevel . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_InMuxSetInput . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_PCMODEDATA. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  han. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  van. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  vfreq. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  htotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  vtotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  hsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  vsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  offseth. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0010H  2
  offsetv. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0012H  2
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  dummy2 . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 68  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  dummy3 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0018H  1
_InputSetSource. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  path . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  format . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  r040 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  r041 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
CheckAndSetPC. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetHdmiModeEE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
InputModeNext. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  next_input . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
GetInputMain . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CheckAndSetDecoderScaler . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  vPeriod. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0001H  4
  vDelay . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0005H  4
  vDelayAdd. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0009H  1
  x_ratio. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   000AH  4
  y_ratio. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   000EH  4
menu_image_header_s. . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  lut_loc. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  image_loc. . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  bpp. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  lut_size . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
menu_image_header_t. . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  17
  lut_loc. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  image_loc. . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  bpp. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  lut_size . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
GetInputEE . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerSetHScale . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_TWstrcat. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_BT656InputFreerunClk. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fFreerun . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  fInvClk. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
InputSubMode . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0001H  1
FOsdSetDeValue . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetInputMain. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  input. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
LinkCheckAndSetInput . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_VInput_enableOutput . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fRecheck . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_ScalerSetFreerunManual. . . . . . . .  EXTERN   CODE   PROC     -----  -----
DataInitNTSC . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_ScalerSetVScale . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_RLE_HEADER. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  id . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 69  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  cp . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bmp. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
SPIIMAGE . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  top. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  bottom . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
_MeasEnableDeMeasure . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
tic_task . . . . . . . . . . . . . . .  EXTERN   DATA   U_INT    -----  2
_InputSetCrop. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  x. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  y. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  w. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
  h. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
SLIDEIMAGE . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
_WaitVBlank. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  cnt. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  loop . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
InitLogo1. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dPrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ePrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
regTW88. . . . . . . . . . . . . . . .  EXTERN   DATA   PTR      -----  2
CheckAndSetBT656 . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
ChangePC . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_ChangeInput . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
ScalerReadVDEReg . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_DtvSetRouteFormat . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CheckAndSetComponent . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VideoAspect. . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_ScalerWriteHDEReg . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_VInput_gotoFreerun. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  reason . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_ScalerSetHScaleWithRatio. . . . . . .  EXTERN   CODE   PROC     -----  -----
FONT_SPI_INFO_s. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 70  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
image_info_s . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
FONT_SPI_INFO_t. . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
image_info_t . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
_ScalerSetFreerunValue . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MeasSetThreshold. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
ChangeHDMI . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_ScalerWriteVDEReg . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_wPrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ScalerSetVScaleWithRatio. . . . . . .  EXTERN   CODE   PROC     -----  -----
access . . . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Interrupt_enableVideoDetect . . . . .  EXTERN   CODE   PROC     -----  -----
ChangeCVBS . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
image_item_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  9
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  info . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  alpha. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
_DecoderCheckVDLOSS. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_TaskNoSignal_setCmd . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
image_item_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  info . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  alpha. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2778    ----
   CONSTANT SIZE    =    649    ----
   XDATA SIZE       =      2      34
C51 COMPILER V9.00   INPUTCTRL                                                             05/31/2013 20:18:30 PAGE 71  

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
