C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TOUCHKEY
OBJECT MODULE PLACED IN .\Output\TouchKey.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE TouchKey.c LARGE OPTIMIZE(9,SPEED) REGFILE(.\Output\TW8835_REV31.ORC) BROWS
                    -E MODDP2 DEFINE(EVB_30,EVB_31,nullFn=//) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\List\TouchKey.lst) OBJECT(.\Output\Touc
                    -hKey.obj)

line level    source

   1          /**
   2           * @file
   3           * TouchKey.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *      Copyright (C) 2011~2012 Intersil Corporation
   8           * @section DESCRIPTION
   9           *      Touch and Keypad
  10          */
  11          //*****************************************************************************
  12          //
  13          //  ADC(or AUX)
  14          //      KeyPad
  15          //      Touch
  16          
  17          #include "Config.h"
  18          #include "reg.h"
  19          #include "typedefs.h"
  20          #include "TW8835.h"
  21          
  22          #include "Global.h"
  23          #include "CPU.h"
  24          #include "Printf.h"
  25          #include "util.h"
  26          #include "Monitor.h"
  27          
  28          #include "I2C.h"
  29          #include "spi.h"
  30          
  31          #include "SOsd.h"
  32          #include "FOsd.h"
  33          #include "TouchKey.h"
  34          #include "EEPROM.h"
  35          //#include "SOsdMenu.h"
  36          
  37          #ifdef DEBUG_TOUCH_SW
                      #define TscPrintf       Printf
                      #define TscPuts         Puts    
                      #define dTscPrintf      dPrintf
                      #define dTscPuts        dPuts   
              #else
  43                  #define TscPrintf       nullFn
  44                  #define TscPuts         nullFn  
  45                  #define dTscPrintf      nullFn
  46                  #define dTscPuts        nullFn  
  47          #endif
  48          
  49          #define ADC_MODE_X              0
  50          #define ADC_MODE_Z1             1
  51          #define ADC_MODE_Z2             2
  52          #define ADC_MODE_Y              3
  53          #define ADC_MODE_AUX0   4
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 2   

  54          #define ADC_MODE_AUX1   5
  55          #define ADC_MODE_AUX2   6
  56          #define ADC_MODE_AUX3   7
  57          
  58          
  59          WORD    OldPosX, OldPosY;
  60          BYTE    TouchStatus, LastTouchStatus;
  61          DWORD   veloX, veloY;
  62          
  63          DWORD TscTimeStart, TscTimeEnd, TscTimeLastEnd;
  64          BYTE TscHwReady=0;
  65          
  66          
  67          //#define MOVE_MIN      20
  68          #define TSC_MOVE_MIN_THRESHOLD          10              //5:NG
  69          #define TSC_LONGCLICK_THRESHOLD         1000    //10sec
  70          #define TSC_DCLICK_THRESHOLD            100             //1sec
  71          #define TSC_PRESS_RECOVER_THRESHOLD     100             //1sec
  72          #define TSC_Z_THRESHOLD                         220
  73          #define TSC_MOVED_THRESHOLD             50              //500msec
  74          
  75          
  76          #define         RES_X   800
  77          #define         RES_Y   480
  78          
  79          BYTE    TouchStatus;
  80          WORD    TouchX, TouchY, TouchZ1, TouchZ2;
  81          WORD    PosX, PosY, StartX, StartY;
  82          WORD    TouchLeft = 200;   TouchRight = 3900; 
  83          WORD    TouchTop = 3600; TouchBottom = 340;  
  84          WORD    TouchCenterX = 2100; TouchCenterY = 2000;
  85          bit             TouchAuto = 0, TraceAuto = 0;
  86          bit             tsc_debug = 0;
  87          
  88          bit     TouchPressedOld=0;
  89          BYTE    TouchChangedOld=0;
  90          
  91          
  92          //=============================================================================
  93          //              AUX 
  94          //=============================================================================
  95          
  96          //internal
  97          #ifdef SUPPORT_DIPSW
              WORD GetAUX( BYTE channel )
              {
                      WORD    ADC;
                      BYTE    page;
              
                      ReadTW88Page(page);
                      WriteTW88Page(PAGE0_TOUCH );
                      WriteTW88(REG0B4, 0x03 );                                               // clock sel div16
              #if 0
                      WriteTW88(REG0B0, 0x0c + channel );                             // write Start, erase Ready,
                      delay1ms(1);
                      WriteTW88(REG0B0, 0x24 + channel );                             // write Start, erase Ready,
                      while (( ReadTW88(REG0B0 ) & 8 ) != 8 ) ;
                      ADC = ( ReadTW88(REG0B2 ) << 4 ) + ReadTW88(REG0B3 ) ;
                      //dPrintf( "\nAUX Value: %d", ADC );
              #else
                      ADC = _TscGetAdcDataOutput(0x40+ channel);
              #endif
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 3   

                      WriteTW88Page(page );
                      return ( ADC );
              }
              #endif
 120          
 121          //internal
 122          #ifdef SUPPORT_ANALOG_SENSOR_NEED_VERIFY
              BYTE GetAUXBYTE( BYTE channel )
              {
                      BYTE    ADC;
                      WORD    wADC;
                      BYTE    page;
              
                      ReadTW88Page(page);
                      WriteTW88Page(PAGE0_TOUCH );
                      WriteTW88(REG0B4, 0x03 );                                               // clock sel div16
                      wADC = _TscGetAdcDataOutput(0x40+ channel);
                      ADC = (wADC >> 4);      //only MSB 8 bits[11:4]
                      WriteTW88Page(page );
                      return ( ADC );
              }
              #endif
 138          
 139          #if 0
              WORD GetAuxWord(BYTE mode)
              {...}
              #endif
 143          
 144          //=============================================================================
 145          //DIP
 146          //=============================================================================
 147          #ifdef SUPPORT_DIPSW
              // code WORD DIP_MEASURE[] = { 0, 282, 525, 745, 891, 1056, 1223, 1369, 1454, 1574, 1680, 1781, 1851, 1936
             -, 2014, 2094 }; real measure
              code WORD DIP_MEASURE[] = { 141, 403, 635, 818, 973, 1138, 1302, 1414, 1514, 1630, 1731, 1815, 1980, 2050 
             -};
              
              BYTE    DipSW( void )
              {
                      WORD    i;
                      BYTE    j;
              
                      i = GetAUX( 1 );
              
                      j = 0;
                      for ( j=0; j<15; j++ ) {
                              if ( i < DIP_MEASURE[j] ) return (j);
                      }
                      return ( 15 );
              }
              #endif
 165          
 166          //===========================================
 167          // KeyPad
 168          //===========================================
 169          bit                     RepeatKey, KeyReady;
 170          DATA BYTE       Key;
 171          
 172          DATA BYTE       keytic;
 173          
 174          #if defined(MODEL_TW8835) || defined(MODEL_TW8836)
 175          #define KEYPAD_INPUT    3
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 4   

 176          #else
              #define KEYPAD_INPUT    0
              #endif
 179          
 180          #ifdef SUPPORT_ANALOG_SENSOR
 181          
 182          
 183          //#define KEY_RIGHT                     1
 184          //#define KEY_UP                        2
 185          //#define KEY_MENU                      3
 186          //#define KEY_DOWN                      4
 187          //#define KEY_LEFT                      5
 188          //#define       KEY_INPUT               6
 189          
 190          // key sampleing values
 191          //  key name    average     range
 192          //  ----------  ------- -----------
 193          //      input key:      0x0200  0x100~0x2FF
 194          //      menu key:       0x0400  0x300~0x4FF
 195          //      up key:         0x0600  0x500~0x6FF
 196          //      down key:       0x0800  0x700~0x9FF
 197          //      right key:      0x0C00  0x900~
 198          //------------------------------
 199          BYTE    KeyPadMap[] = { 0, KEY_INPUT, KEY_MENU, KEY_UP, KEY_DOWN, KEY_RIGHT, KEY_LEFT, 0 };
 200          #ifdef MODEL_TW8835_EXTI2C
              //BKTODO:Now SUPPORT_HOST do not using ISR.
              //       we cannnot use old method.
              BYTE ReadKeyPad( void ) 
              {
                      static BYTE key_counter = 0;
                      static BYTE key_changed = 0;
                      static BYTE last_key=0;
                      WORD key_in;
                      BYTE temp;
              
                      if(CpuAUX3_Changed==key_changed)
                              return (0);
                      key_changed = CpuAUX3_Changed; 
              
                      if(CpuAUX3 < 0x100) {
                              key_counter = 0;
                              last_key = 0;
                              return (0);
                      }
              
                      key_counter++;
                      key_in = CpuAUX3;
              
              #ifdef DEBUG_KEYREMO
                      Printf("\nReadKeyPad %bd key_in:%X", key_counter, key_in);
              #endif
                      temp = (key_in >> 8);
                      temp++;  //round up
                      temp /= 2;
              #ifdef DEBUG_KEYREMO
                      Printf(" temp:%bd ",temp);
                      switch(temp) {
                      case 0: Puts("KEY_0");                  break;
                      case 1: Puts("KEY_INPUT");              break;
                      case 2: Puts("KEY_MENU");               break;
                      case 3: Puts("KEY_UP");                 break;
                      case 4: Puts("KEY_DOWN");               break;
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 5   

                      case 5: Puts("KEY_RIGHT");              break;
                      case 6: Puts("KEY_LEFT");               break;
                      default: Printf("KEY#%d",temp); break;
                      }
              #endif
                      key_counter = 0;
                      key_changed = CpuAUX3_Changed = 0;
              
                      if(last_key == KeyPadMap[temp]) {
              #ifdef DEBUG_KEYREMO
                              Puts("-RepeatKey");
              #endif
                              //TODO: add repeat key process routine.
                              return (0);
                      }
                      last_key = KeyPadMap[temp];
                      return (last_key);
                      //return (0);   //for test
              }
              #else
 258          /**
 259          * read keypad value
 260          */
 261          BYTE ReadKeyPad( void ) 
 262          {
 263   1              WORD    i, j;
 264   1              WORD    min, max;
 265   1              BYTE    temp;
 266   1              WORD    key_in;
 267   1      
 268   1              i = CpuAUX3;
 269   1              temp = CpuAUX3_Changed;
 270   1              if ( i<100 ) return (0);
 271   1      
 272   1              key_in = i;
 273   1      
 274   1              min = i; max = i;
 275   1              for ( j=0; j<9; j++ ) {
 276   2                      while ( temp == CpuAUX3_Changed ) ;                             // wait new measurement
 277   2                      temp = CpuAUX3_Changed;
 278   2                      i = CpuAUX3;
 279   2                      if ( i<100 ) return (0);
 280   2                      key_in += i;
 281   2                      if ( i < min ) min = i;
 282   2                      else if ( i > max ) max = i;
 283   2              }
 284   1              key_in -= min;
 285   1              key_in -= max;
 286   1      
 287   1              key_in /= 8;                    // divided by 8 for averaging
 288   1              temp = (key_in >> 8);
 289   1      
 290   1      
 291   1      //      dPrintf("\r\nKeyIn ADC Value is: 0x%4x, last: 0x%04x", (WORD)key_in, i );
 292   1              temp++;
 293   1              temp /= 2;
 294   1              return (KeyPadMap[temp]);
 295   1      }
 296          #endif
 297          #endif
 298          
 299          /**
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 6   

 300          * get keypad input
 301          *
 302          * extern 
 303          *       Key: keep pressed key value.
 304          *       keytic: key tic counter
 305          *       KeyReady
 306          *       RepeatKey
 307          */
 308          BYTE GetKey(BYTE repeat)
 309          {
 310   1      BYTE    i;
 311   1      #ifdef SUPPORT_ANALOG_SENSOR
 312   1              i = repeat;
 313   1              i = ReadKeyPad();
 314   1              if ( i == 0 ) {
 315   2                      RepeatKey = 0;
 316   2                      Key = 0;
 317   2                      KeyReady = 0;
 318   2                      keytic = 0;
 319   2                      return (0);
 320   2              }
 321   1              if ( Key == 0 ) {                       // first pressed?
 322   2                      Key = i;
 323   2                      keytic++;
 324   2                      return (i);
 325   2              }
 326   1              else if ( i != Key) {           //diff key value when Key has a value.          
 327   2                      RepeatKey = 0;
 328   2                      KeyReady = 0;
 329   2                      keytic = 0;
 330   2                      return (0);
 331   2              }
 332   1              else {                                          // same key pressed check for repeat function
 333   2                      keytic++;
 334   2                      if ( keytic < 20 ) {
 335   3                              return (0);
 336   3                      }
 337   2                      else {
 338   3                              RepeatKey = 1;
 339   3                              KeyReady = 1;
 340   3                              keytic = 18;
 341   3                              return (i);
 342   3                      }
 343   2              }
 344   1      #else
                      i = repeat;
                      keytic = 0;
                      return 0;
              #endif
 349   1      }
 350          
 351          
 352          //===========================================
 353          // TOUCH
 354          //===========================================
 355          
 356          
 357          #ifdef SUPPORT_TOUCH
 358             //extern
 359          //      TraceAuto
 360          //      TouchAuto
 361          /**
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 7   

 362          * set TouchAuto flag. only for test
 363          */
 364          void SetTouchAuto( BYTE on )
 365          {
 366   1              TraceAuto = 0;
 367   1              if ( on )
 368   1                      TouchAuto = 1;
 369   1              else
 370   1                      TouchAuto = 0;
 371   1      }
 372          /**
 373          * set traceauto flag. only for test
 374          */
 375          void SetTraceAuto( BYTE on )
 376          {
 377   1              TouchAuto = 0;
 378   1              if ( on )
 379   1                      TraceAuto = 1;
 380   1              else
 381   1                      TraceAuto = 0;
 382   1      }
 383          #endif
 384          
 385          
 386          
 387          /*
 388                    +-----------------+---------------------+
 389                | 0(80x48)        |        1(720x48)        |
 390                    |                                     |                                         |
 391                    +--------------4(400x240)---------------+
 392                    |                                     |                                         |
 393                |  3(80x432)      |        2(720x432)       |
 394                +-----------------+---------------------+
 395          */
 396          
 397          #define TSC_ZONE_TOPLEFT                0
 398          #define TSC_ZONE_TOPRIGHT               1
 399          #define TSC_ZONE_BOTTOMRIGHT    2
 400          #define TSC_ZONE_BOTTOMLEFT             3
 401          #define TSC_ZONE_CENTER                 4
 402          
 403                   WORD   CalibDataX[]=           { 80,   720,  720,  80,  400  };
 404                   WORD   CalibDataY[]=           { 48,   48,   432,  432, 240  };
 405          
 406          code WORD       Def_TouchCalibX[] = { 478,  3583, 3580, 496, 2029 };
 407          code WORD       Def_TouchCalibY[] = { 3432, 3421, 593,  604, 2008 };
 408                   WORD   TouchCalibX[] =         { 478,  3583, 3580, 496, 2029 };
 409                   WORD   TouchCalibY[] =         { 3432, 3421, 593,  604, 2008 };
 410                   WORD   Temp_TouchCalibX[]= { 478,  3583, 3580, 496, 2029 };
 411                   WORD   Temp_TouchCalibY[]= { 3432, 3421, 593,  604, 2008 };
 412          
 413          //=============================================================================
 414          //              _TscGetScreenPos 
 415          //              ScrrenPosX = (TouchX - CalibDataX[4]) / (CalibData[n] - CalibDataX[4]) / (TouchCalibX[n] - TouchCalibX
             -[4])
 416          //=============================================================================
 417          #ifdef SUPPORT_TOUCH
 418          /**
 419          * update PosX,PosY.
 420          *
 421          * input
 422          *       TouchX,TouchY
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 8   

 423          * output
 424          *       PosX,PosY
 425          */
 426          void _TscGetScreenPos( void )
 427          {
 428   1              DWORD calcX, calcY;
 429   1      
 430   1              if ( TouchX < TouchCalibX[4] ) {                                // center of 
 431   2                      if ( TouchY > TouchCalibY[4] ) {
 432   3                              // GetZone0;
 433   3                              //calc = (TouchCalibX[4] - TouchX) / (TouchCalibX[4] - TouchCalibX[0]) / (CalibDataX[4] - CalibDataX[0]
             -);
 434   3                              calcX = TouchCalibX[4] - TouchX;
 435   3                              calcX *= (DWORD)( CalibDataX[4] - CalibDataX[0] );
 436   3                              calcX /= (DWORD)( TouchCalibX[4] - TouchCalibX[0] );
 437   3                              if ( calcX >= CalibDataX[4] )   PosX = 0;
 438   3                              else                                                    PosX = CalibDataX[4] - calcX;
 439   3      
 440   3                              calcY = TouchY - TouchCalibY[4];
 441   3                              calcY *= ( CalibDataY[4] - CalibDataY[0] );
 442   3                              calcY /= ( TouchCalibY[0] - TouchCalibY[4] );
 443   3                              if ( calcY >= CalibDataY[4] )   PosY = 0;
 444   3                              else                                                    PosY = CalibDataY[4] - calcY;
 445   3                      }
 446   2                      else {
 447   3                              //GetZone3
 448   3                              //calc = (TouchCalibX[4] - TouchX) / (TouchCalibX[4] - TouchCalibX[3]) / (CalibDataX[4] - CalibDataX[3]
             -);
 449   3                              calcX = TouchCalibX[4] - TouchX;
 450   3                              calcX *= (DWORD)( CalibDataX[4] - CalibDataX[3] );
 451   3                              calcX /= (DWORD)( TouchCalibX[4] - TouchCalibX[3] );
 452   3                              if ( calcX >= CalibDataX[4] )   PosX = 0;
 453   3                              else                                                    PosX = CalibDataX[4] - calcX;
 454   3      
 455   3                              calcY = TouchCalibY[4] - TouchY;
 456   3                              calcY *= (DWORD)( CalibDataY[3] - CalibDataY[4] );
 457   3                              calcY /= (DWORD)( TouchCalibY[4] - TouchCalibY[3] );
 458   3                              if ( calcY >= CalibDataY[4] )   PosY = RES_Y - 1;
 459   3                              else                                                    PosY = CalibDataY[4] + calcY;
 460   3                      }
 461   2              }
 462   1              else {   
 463   2                      if ( TouchY > TouchCalibY[4] )  {
 464   3                              //GetZone1
 465   3                              calcX = TouchX - TouchCalibX[4];
 466   3                              calcX *= ( CalibDataX[1] - CalibDataX[4] );
 467   3                              calcX /= ( TouchCalibX[1] - TouchCalibX[4] );
 468   3                              if ( calcX >= CalibDataX[4] )   PosX = RES_X - 1;
 469   3                              else                                                    PosX = CalibDataX[4] + calcX;
 470   3      
 471   3                              calcY = TouchY - TouchCalibY[4];
 472   3                              calcY *= ( CalibDataY[4] - CalibDataY[1] );
 473   3                              calcY /= ( TouchCalibY[1] - TouchCalibY[4] );
 474   3                              if ( calcY >= CalibDataY[4] )   PosY = 0;
 475   3                              else                                                    PosY = CalibDataY[4] - calcY;
 476   3                      }
 477   2                      else  {
 478   3                              //GetZone2
 479   3                              calcX = TouchX - TouchCalibX[4];
 480   3                              calcX *= ( CalibDataX[2] - CalibDataX[4] );
 481   3                              calcX /= ( TouchCalibX[2] - TouchCalibX[4] );
 482   3                              if ( calcX >= CalibDataX[4] )   PosX = RES_X - 1;
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 9   

 483   3                              else                                                    PosX = CalibDataX[4] + calcX;
 484   3      
 485   3                              calcY = TouchCalibY[4] - TouchY;
 486   3                              calcY *= ( CalibDataY[2] - CalibDataY[4] );
 487   3                              calcY /= ( TouchCalibY[4] - TouchCalibY[2] );
 488   3                              if ( calcY >= CalibDataY[4] )   PosY = RES_Y - 1;
 489   3                              else                                                    PosY = CalibDataY[4] + calcY;
 490   3                      }
 491   2              }
 492   1              //dPrintf("\n_TscGetScreenPos XY:%dx%d from Touch XY:%dx%d",PosX,PosY, TouchX, TouchY); //WORD
 493   1      }
 494          #endif
 495          
 496          
 497          //=============================================================================
 498          //       
 499          //=============================================================================
 500          #ifdef SUPPORT_TOUCH
 501          /**
 502          * init Touch
 503          */
 504          void InitTouch( void )
 505          {
 506   1              BYTE val;
 507   1              dPuts("\nInitTouch");
 508   1      
 509   1              TscTimeStart = TscTimeEnd = TscTimeLastEnd = 0;;
 510   1      
 511   1      
 512   1              WriteTW88Page(PAGE0_TOUCH );
 513   1              CpuTouchStep = 0;
 514   1              WriteTW88(REG0B0, 0x02 );                               //power up. with Z2 measure
 515   1      //#ifdef MODEL_TW8835_EXTI2C
 516   1              WriteTW88(REG0B1, 0xF8 );                               //TODO:Touch Ready & Touch Pen is not implemented yet.
 517   1                                                                                              // 
 518   1      //#else
 519   1      //      WriteTW88(REG0B1, 0x38 );                               // ready interrupt enable, pen intr enable. ,disable ADC test mode. 
 520   1      //#endif
 521   1      
 522   1              //--------------------------------------------
 523   1              //Check connector
 524   1              WriteTW88(REG0B4, 0x02 ); 
 525   1              WriteTW88(REG0B0, 0x20 | ReadTW88(REG0B0) );    //need a start command
 526   1              delay1ms(1);    //need more then 1CLK cycle.
 527   1              val = ReadTW88(REG0B2);
 528   1              if( val < 0x80  ) {
 529   2                      dPrintf("--FAIL.%bx",val);
 530   2                      // do not power down. Still you need a keypad.
 531   2                      TscHwReady = 0;
 532   2              }
 533   1              else {
 534   2                      dPrintf("--OK.%bx",val);
 535   2                      TscHwReady = 1;
 536   2              }
 537   1              WriteTW88(REG0B0, ~0x20 & ReadTW88(REG0B0) );
 538   1      
 539   1      
 540   1      
 541   1      #if 1   //120323 Touch Spec. can support from div8~64 : 4MHz~320K.
 542   1              WriteTW88(REG0B4, 0x0A );                               // div 8, rsel=10k, continuous sensing mode
 543   1      #else
                      WriteTW88(REG0B4, 0x0C );                               // div 32, rsel=10k, continuous sensing mode
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 10  

              #endif
 546   1      
 547   1      
 548   1              SFR_EINT6 = 0;
 549   1              CpuTouchPressed = 0;
 550   1      
 551   1              SFR_TL1 = SFR_TH1;
 552   1              CpuTouchSkipCount = 0;
 553   1              SFR_ET1 = 1;
 554   1      }
 555          #else
              void InitTouch( void )
              {
                      dPuts("\nInitTouch-removed");
              }
              #endif
 561          
 562          
 563          
 564          //return
 565          //      success: if need an Action
 566          #ifdef SUPPORT_TOUCH
 567          /**
 568          * get Touch2
 569          */
 570          BYTE GetTouch2(void)
 571          {
 572   1              BYTE ret;
 573   1              short movX,movY;
 574   1              BYTE TC;                 //Touch change counter
 575   1              bit      TP;             //pressed status
 576   1              DWORD dt_start,dt_end;
 577   1              DWORD TscTimeCurr;
 578   1              BYTE new_status;
 579   1      
 580   1              //update value 
 581   1              SFR_EA = 0;
 582   1              TC = CpuTouchChanged;
 583   1              TP = CpuTouchPressed;
 584   1              TouchX = CpuTouchX;
 585   1              TouchY = CpuTouchY;
 586   1              SFR_EA = 1;
 587   1      
 588   1      #if 0
                      if(CpuTouchSkipCount)
                              Printf("\nCpuTouchSkipCount:%d", CpuTouchSkipCount);
                      //Printf("\nGetTouch2() TC:%bx TP:%bx step:%bx ",TC, TP ? 1:0, CpuTouchStep);
                      if(TP) {
                              Printf("\nTP:%dx%d", TouchX,TouchY);
                      }
                      //else {
                      //      WriteTW88Page(0);
                      //      Printf(" %02bx%01bx", ReadTW88(REG0B2), ReadTW88(REG0B3) & 0x0F);
                      //      //#define ReadTscData(TscData) TscData = ReadTW88(REG0B2); TscData <<= 4; TscData += ReadTW88(REG0B3) 
                      //
                      //}
              #endif
 602   1      
 603   1              if ( TouchChangedOld == TC ) {
 604   2                      if(TouchStatus==TOUCHMOVED && ((TscTimeEnd + TSC_MOVED_THRESHOLD) < SystemClock)) {                     //500msec delay
 605   3                              dTscPrintf("\nTouch TOUCHMOVED Action dt:%ld", SystemClock - TscTimeEnd);
 606   3                              return 1;                       
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 11  

 607   3                      }
 608   2                      return 0;                       // no measurement
 609   2              }
 610   1      
 611   1              ret = 0;
 612   1              TscTimeCurr = SystemClock;
 613   1      
 614   1              if(TouchPressedOld) {
 615   2                      if(TP) {
 616   3      //-----------
 617   3      LABEL_TP11: /* Pressed=>Pressed */
 618   3      //-----------
 619   3                              new_status = TSC_PRESS; 
 620   3                              _TscGetScreenPos();
 621   3                              //--------------------
 622   3                              //_TscGetDirection();
 623   3                              //--------------------
 624   3                              movX = PosX - OldPosX;
 625   3                              movY = PosY - OldPosY;
 626   3                              if(TWabsShort(movX) <= TSC_MOVE_MIN_THRESHOLD) {
 627   4                                      if(TouchStatus >= TOUCHMOVE)
 628   4                                              new_status |= TSC_MOVE; 
 629   4                              }
 630   3                              else {
 631   4                                      new_status |= TSC_MOVE;
 632   4                                      if(movX > 0) new_status |= TSC_MOVEXPLUS;       //right
 633   4                                      else         new_status |= TSC_MOVEX;           //left
 634   4                              }
 635   3                              if(TWabsShort(movY) <= TSC_MOVE_MIN_THRESHOLD) {
 636   4                                      if(TouchStatus >= TOUCHMOVE)
 637   4                                              new_status |= TSC_MOVE; 
 638   4                              }
 639   3                              else {
 640   4                                      new_status |= TSC_MOVE;
 641   4                                      if(movY > 0) new_status |= TSC_MOVEYPLUS;       //down
 642   4                                      else         new_status |= TSC_MOVEY;           //up
 643   4                              }
 644   3                              if(TouchStatus == new_status) {
 645   4                                      dTscPrintf("\nTSC keep Stat:%bx", TouchStatus);
 646   4                              }
 647   3                              else {
 648   4                                      PrintTouchStatusParam(new_status);
 649   4                                      PrintTouchStatus(0,new_status);
 650   4                                      TscUpdateStatus(new_status);
 651   4                              }
 652   3                              dTscPrintf(" xypos=%dx%d",PosX, PosY);
 653   3                              dTscPrintf(" z:%d(0x%x-0x%x)",CpuZ2-CpuZ1,CpuZ2,CpuZ1);
 654   3      
 655   3                              if(new_status & (TSC_MOVEX | TSC_MOVEY)) { //move X or Y
 656   4                                      OldPosX = PosX;
 657   4                                      OldPosY = PosY;
 658   4                              }
 659   3                              //...
 660   3                              ret = 1;
 661   3                      }
 662   2                      else {
 663   3      //-----------
 664   3      //LABEL_TP10: /*Press=>Detached */
 665   3      //-----------
 666   3                              //NOTE:update TscTimeEnd
 667   3      
 668   3                              dt_start = TscTimeCurr - TscTimeStart;  //pressed position(previous)
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 12  

 669   3                              dt_end   = TscTimeCurr - TscTimeEnd;    //detached position(previous)
 670   3      
 671   3      
 672   3                              if(LastTouchStatus>=TOUCHMOVE) {
 673   4                                      PrintTouchStatus(1, TOUCHMOVED);
 674   4                                      TscUpdateStatus(TOUCHMOVED);
 675   4                                      ret=0;
 676   4                              }
 677   3                              else if(dt_start > TSC_LONGCLICK_THRESHOLD) {   //more then 10sec
 678   4                                      PrintTouchStatus(1, TOUCHLONGCLICK);
 679   4                                      TscUpdateStatus(TOUCHLONGCLICK);
 680   4                                      ret = 1;
 681   4                              }
 682   3                              else if(dt_end < TSC_DCLICK_THRESHOLD) {
 683   4                                      if(TouchStatus >= TOUCHMOVE) {
 684   5                                              PrintTouchStatus(1, TOUCHMOVED);
 685   5                                              TscUpdateStatus(TOUCHMOVED);     dTscPuts("(DCLK->MOVED)");
 686   5                                              ret = 0;
 687   5                                      }
 688   4                                      else { 
 689   5                                              PrintTouchStatus(1, TOUCHDOUBLECLICK);
 690   5                                              TscUpdateStatus(TOUCHDOUBLECLICK);
 691   5                                              ret = 1;
 692   5                                      }
 693   4                              }
 694   3                              else {
 695   4                                      if(TouchStatus >= TOUCHMOVE) {
 696   5                                              PrintTouchStatus(1, TOUCHMOVED);
 697   5                                              TscUpdateStatus(TOUCHMOVED);     dTscPuts("(CLK->MOVED)");
 698   5                                              ret = 0;
 699   5                                      }
 700   4                                      else {
 701   5                                              PrintTouchStatus(1, TOUCHCLICK); 
 702   5                                              TscUpdateStatus(TOUCHCLICK);
 703   5                                              ret = 1;
 704   5                                      }
 705   4                              }
 706   3                              dTscPrintf(" xypos=%dx%d",PosX, PosY);
 707   3                              dTscPrintf(" z:%d(0x%x-0x%x)",CpuZ2-CpuZ1,CpuZ2);
 708   3                              dTscPrintf(" dt_start:%ld dt_end:%ld",dt_start,dt_end);
 709   3      
 710   3                              if(TouchStatus == TOUCHMOVED) {
 711   4                                      movX = OldPosX - StartX;
 712   4                                      movX = TWabsShort(movX);
 713   4                                      movY = OldPosY - StartY;
 714   4                                      movY = TWabsShort(movY);
 715   4      
 716   4                                      veloX = 1000;
 717   4                                      veloX *= movX;
 718   4                                      veloX /= dt_start;
 719   4                                      veloY = 1000;
 720   4                                      veloY *= movY;
 721   4                                      veloY /= dt_start;
 722   4                                      dTscPrintf(" Velocity X:%ld Y:%ld", veloX,veloY );
 723   4                              }
 724   3                              TscTimeEnd = TscTimeCurr;
 725   3                      }
 726   2              }
 727   1              else {
 728   2                      if(TP) {
 729   3      //-----------
 730   3      //LABEL_TP01: /*Detached=>Pressed.*/
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 13  

 731   3      //-----------
 732   3                              //NOTE:update TscTimeStart. StartX,StartY
 733   3                              dt_end   = TscTimeCurr - TscTimeEnd;    //detached position(previous)
 734   3      
 735   3                              if(TouchStatus==TOUCHMOVED) {
 736   4                                      //if TP0_MOVED, TouchStatus=TOUCHMOVE and then goto LABEL_TP11.
 737   4                                      //Touch is pressed before TSC_MOVED_THRESHOLD. It will ignore the previous unpress state.
 738   4                                      PrintTouchStatus(1,TOUCHMOVE); dTscPuts(" RECOVER1 ");
 739   4                                      TscUpdateStatus(TOUCHMOVE);
 740   4                                      goto LABEL_TP11;
 741   4                              }
 742   3                              else if(LastTouchStatus==TOUCHMOVED && dt_end < TSC_PRESS_RECOVER_THRESHOLD) {   //assume TouchStatus==T
             -OUCHEND
 743   4                                      PrintTouchStatus(1,TOUCHMOVE); dTscPuts(" RECOVER2 ");
 744   4                                      TscUpdateStatus(TOUCHMOVE);
 745   4                                      goto LABEL_TP11;
 746   4                              }
 747   3                              else {
 748   4                                      PrintTouchStatus(1,TOUCHPRESS);
 749   4                                      TscUpdateStatus(TOUCHPRESS);
 750   4                                      _TscGetScreenPos();
 751   4                                      OldPosX = StartX = PosX;
 752   4                                      OldPosY = StartY = PosY;
 753   4                                      TscTimeLastEnd = TscTimeEnd; //NOTE
 754   4                                      TscTimeStart = TscTimeCurr;
 755   4                                      dTscPrintf(" xypos=%dx%d",PosX, PosY);
 756   4                                      dTscPrintf(" z:%d(0x%x-0x%x)",CpuZ2-CpuZ1,CpuZ2);       
 757   4                              }
 758   3                              ret = 1;
 759   3                      }
 760   2                      else {
 761   3      //-----------
 762   3      //LABEL_TP00: /*Deteched=>Deteched */
 763   3      //-----------
 764   3                              //something happen.But, ignore.
 765   3                              //dTscPrintf("\nTouch TC:%bd dt_start:%ld dt_end:%ld",
 766   3                              //      TC > TouchChangedOld ? TC-TouchChangedOld : 0x100 - TC + TouchChangedOld), dt_start,dt_end);
 767   3                      }
 768   2              }
 769   1              TouchChangedOld = TC;
 770   1              TouchPressedOld = TP;
 771   1      
 772   1              return ret;
 773   1      }
 774          #endif
 775          
 776          //=============================================================================
 777          //              TraceTouch 
 778          //=============================================================================
 779          #ifdef SUPPORT_TOUCH
 780          /**
 781          * trace Touch. only for debug
 782          */
 783          void TraceTouch( void )
 784          {
 785   1              bit TouchPressedOld;
 786   1      
 787   1              SFR_EA = 0;
 788   1              TouchPressedOld = CpuTouchPressed;
 789   1              TouchX = CpuTouchX;
 790   1              TouchY = CpuTouchY;
 791   1              SFR_EA = 1;
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 14  

 792   1      
 793   1              //CheckTouch();
 794   1      
 795   1              if ( TouchPressedOld ) {                // before it pressed with start
 796   2                      if ( CpuTouchPressed ) {
 797   3                              _TscGetScreenPos();
 798   3                              FOsdWinScreenXY( 0, PosX, PosY);
 799   3                              FOsdWinScreenWH( 0, 1, 1 );
 800   3                      }
 801   2                      else {
 802   3                              //Prompt();
 803   3                      }
 804   2              }
 805   1              else {
 806   2                      if ( CpuTouchPressed ) {
 807   3                              _TscGetScreenPos();
 808   3                              FOsdWinScreenXY( 0, PosX, PosY);
 809   3                              FOsdWinScreenWH( 0, 1, 1 );
 810   3                      }
 811   2                      else {
 812   3                      }
 813   2              }
 814   1      }
 815          #endif
 816          
 817          
 818          
 819          //=============================================================================
 820          //              Print Status 
 821          //=============================================================================
 822          #if defined(SUPPORT_TOUCH)
 823          /**
 824          * print TouchStatus
 825          */
 826          void PrintTouchStatusParam(BYTE TscStatus)
 827          {
 828   1      #if !defined(DEBUG_TOUCH_SW)
 829   1              BYTE temp = TscStatus;
 830   1      #else
                      dPuts("\nTSC ");
                      if(TscStatus & 0x80) {
                              dPuts("PRESS ");
                              if(TscStatus & 0x40) {
                                      dPuts("MOVE ");
                                      if(TscStatus & 0x02) {
                                              if(     TscStatus & 0x01)       dPuts("DN ");
                                              else                    dPuts("UP ");
                                      } 
                                      if(TscStatus & 0x08) {
                                              if(     TscStatus & 0x04)       dPuts("RIGHT ");
                                              else                    dPuts("LEFT ");
                                      } 
                              }
                      }
                      else {
                              if(TscStatus & 0x40) {
                                      dPuts("MOVED ");
                                      if(TscStatus & 0x02) {
                                              if(     TscStatus & 0x01)       dPuts("DN ");
                                              else                    dPuts("UP ");
                                      } 
                                      if(TscStatus & 0x08) {
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 15  

                                              if(     TscStatus & 0x04)       dPuts("RIGHT ");
                                              else                    dPuts("LEFT ");
                                      } 
                              }       
                              else {
                                      switch(TscStatus & 0x07) {
                                      case 0: dPuts("END "); break;
                                      case 1: dPuts("CLK "); break;
                                      case 2: dPuts("DCLK "); break;
                                      case 4: dPuts("LONGCLK "); break;
                                      default: dPrintf("unknown:%bx ",TscStatus); break;
                                      }
                              }
                      }
              #endif
 869   1      }
 870          /**
 871          * print touch status
 872          */
 873          void PrintTouchStatus(BYTE new, BYTE NewTscStatus)
 874          {
 875   1      #if !defined(DEBUG_TOUCH_SW)
 876   1              BYTE temp;
 877   1              temp = new;
 878   1              temp = NewTscStatus;
 879   1      #else
                      if(new) dPuts("\nTSC stat:");
                      dPrintf("%bx=>%bx=>%bx ",       LastTouchStatus,TouchStatus,NewTscStatus);
              #endif
 883   1      }
 884          #endif
 885          
 886          
 887          //=============================================================================
 888          //              WaitTouchButtonUp 
 889          //=============================================================================
 890          #ifdef SUPPORT_TOUCH
 891          /**
 892          * wait until touch is detached
 893          */
 894          void WaitTouchButtonUp( void )
 895          {
 896   1              dPuts("\nWaitTouchButtonUp start");
 897   1              do {
 898   2                      GetTouch2();
 899   2      #ifdef MODEL_TW8835_EXTI2C
                              if(timer1_intr_count)
                                      TscPseudoISR();
                              else
              #endif
 904   2                      delay1ms(10);
 905   2              } while (( TouchStatus != TOUCHCLICK ) 
 906   1                    && ( TouchStatus != TOUCHDOUBLECLICK ) 
 907   1                        && ( TouchStatus != TOUCHLONGCLICK )
 908   1                        && ( TouchStatus != TOUCHMOVED )
 909   1                        && ( TouchStatus != TOUCHEND ));
 910   1              dPuts("===>END");
 911   1      }
 912          #endif
 913          //=============================================================================
 914          //              SetTouchStatus 
 915          //              SetTouchStatus 
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 16  

 916          //=============================================================================
 917          #ifdef SUPPORT_TOUCH
 918          /**
 919          * set TouchStatus
 920          */
 921          void SetTouchStatus( BYTE ts )
 922          {
 923   1              dTscPrintf("\nSetTouchStatus(%bx)",ts);
 924   1              if(TouchStatus != ts) {
 925   2                      LastTouchStatus = TouchStatus;
 926   2                      TouchStatus = ts;
 927   2              }
 928   1      }
 929          /**
 930          * update Touch Status
 931          */
 932          void TscUpdateStatus(BYTE TscStat)
 933          {
 934   1              //dTscPrintf("\nTouch Stat:%bx->%bx->%bx",LastTouchStatus,TouchStatus,TscStat);  
 935   1              if(TouchStatus != TscStat) {
 936   2                      LastTouchStatus = TouchStatus;
 937   2                      TouchStatus = TscStat;  
 938   2              }
 939   1      }
 940          /**
 941          * set Last Touch Status
 942          */
 943          void SetLastTouchStatus( BYTE ts )
 944          {
 945   1              dTscPrintf("\nSetLastTouchStatus(%bd)",ts);
 946   1              LastTouchStatus = ts;
 947   1      }
 948          #endif
 949          //=============================================================================
 950          //              CalibTouch 
 951          //=============================================================================
 952          
 953          //@param
 954          // flag         
 955          //      0:update TouchCalibX/TouchCalibY from Default
 956          //      1:update TouchCalibX/TouchCalibY from temp
 957          //      other:normal.  
 958          #ifdef SUPPORT_TOUCH
 959          /**
 960          * save the calibrated touch data to EEPROM
 961          */
 962          void SaveCalibDataToEE(BYTE flag)
 963          {
 964   1              BYTE i;
 965   1              WORD value;
 966   1      
 967   1              if(flag==0) {
 968   2                      for(i=0; i < 5; i++) {
 969   3                              TouchCalibX[i] = Def_TouchCalibX[i];
 970   3                              TouchCalibY[i] = Def_TouchCalibY[i];
 971   3                      }
 972   2              }
 973   1              else if(flag==1) {
 974   2                      for(i=0; i < 5; i++) {
 975   3                              TouchCalibX[i] = Temp_TouchCalibX[i];
 976   3                              TouchCalibY[i] = Temp_TouchCalibY[i];
 977   3                      }
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 17  

 978   2              }
 979   1      
 980   1              for(i=0; i < 5; i++) {
 981   2                      value = TouchCalibX[i];
 982   2                      EE_Write( EEP_TOUCH_CALIB_X + i*2, value >> 8);
 983   2                      EE_Write( EEP_TOUCH_CALIB_X + i*2+1, (BYTE)value);
 984   2              }
 985   1              for(i=0; i < 5; i++) {
 986   2                      value = TouchCalibY[i];
 987   2                      EE_Write( EEP_TOUCH_CALIB_Y + i*2, value >> 8);
 988   2                      EE_Write( EEP_TOUCH_CALIB_Y + i*2+1, (BYTE)value);
 989   2              }
 990   1      }
 991          /**
 992          * read calibrated touch data from EEPROM
 993          */
 994          void ReadCalibDataFromEE(void)
 995          {
 996   1              BYTE i;
 997   1              WORD value;
 998   1      
 999   1              for(i=0; i < 5; i++) {
1000   2                      value = (BYTE)EE_Read( EEP_TOUCH_CALIB_X + i*2);
1001   2                      value <<= 8;
1002   2                      value |= (BYTE)EE_Read( EEP_TOUCH_CALIB_X + i*2+1);
1003   2                      TouchCalibX[i] = value;
1004   2              }
1005   1              for(i=0; i < 5; i++) {
1006   2                      value = (BYTE)EE_Read( EEP_TOUCH_CALIB_Y + i*2);
1007   2                      value <<= 8;
1008   2                      value |= (BYTE)EE_Read( EEP_TOUCH_CALIB_Y + i*2+1);
1009   2                      TouchCalibY[i] = value;
1010   2              }
1011   1      }
1012          #endif
1013          
1014          #ifdef SUPPORT_TOUCH
1015          /**
1016          * print Calibrated data
1017          */
1018          void PrintCalibData(void)
1019          {
1020   1              BYTE i;
1021   1              WORD value;
1022   1              Puts("\nPrintCalibData");
1023   1              Puts("\ndefault:");
1024   1              for(i=0; i < 5; i++) {
1025   2                      Printf("%dx%d\t",Def_TouchCalibX[i],Def_TouchCalibY[i]);
1026   2              }
1027   1              Puts("\ncurrent:");
1028   1              for(i=0; i < 5; i++) {
1029   2                      Printf("%dx%d\t",TouchCalibX[i],TouchCalibY[i]);
1030   2              }
1031   1              Puts("\neeprom :");
1032   1              for(i=0; i < 5; i++) {
1033   2                      //Printf("%dx%d\t",TouchCalibX[i],TouchCalibY[i]);
1034   2                      value = (BYTE)EE_Read( EEP_TOUCH_CALIB_X + i*2);
1035   2                      value <<= 8;
1036   2                      value |= (BYTE)EE_Read( EEP_TOUCH_CALIB_X + i*2+1);
1037   2                      Printf("%dx",value);
1038   2                      value = (BYTE)EE_Read( EEP_TOUCH_CALIB_Y + i*2);
1039   2                      value <<= 8;
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 18  

1040   2                      value |= (BYTE)EE_Read( EEP_TOUCH_CALIB_Y + i*2+1);
1041   2                      Printf("%d\t",value);
1042   2              }
1043   1      }
1044          #endif
1045          
1046          
1047          
1048          #ifdef SUPPORT_TOUCH
1049          /**
1050          * calibrate Touch
1051          */
1052          void CalibTouch( BYTE n )
1053          {
1054   1              bit TouchPressedOld;
1055   1              DWORD   CalibX, CalibY;
1056   1              WORD    count;
1057   1      
1058   1              dTscPrintf("\nCalibTouch(%bd)",n);
1059   1      
1060   1      #ifdef MODEL_TW8835_EXTI2C
                      if(timer1_intr_count)
                              TscPseudoISR();
              #endif
1064   1              GetTouch2();
1065   1      
1066   1              TouchPressedOld = CpuTouchPressed;
1067   1              CalibX = 0;
1068   1              CalibY = 0;
1069   1              count = 0;
1070   1              
1071   1              while (count < 100 /*32768*/) {
1072   2      #ifdef MODEL_TW8835_EXTI2C
                              if(timer1_intr_count)
                                      TscPseudoISR();
              #endif
1076   2                      if ( TouchChangedOld == CpuTouchChanged ) continue;
1077   2                      TouchPressedOld = CpuTouchPressed;
1078   2                      GetTouch2();
1079   2      
1080   2                      if ( TouchPressedOld ) {                // before it pressed with start
1081   3                              if ( CpuTouchPressed ) {
1082   4                                      CalibX += TouchX;
1083   4                                      CalibY += TouchY;
1084   4                                      count++;
1085   4                              }
1086   3                              else {
1087   4                                      TouchPressedOld = CpuTouchPressed;
1088   4                                      dTscPrintf("\nTouch End: %d, %d", TouchX, TouchY );
1089   4                                      break;
1090   4                              }
1091   3                      }
1092   2                      else {
1093   3                              if ( CpuTouchPressed ) {
1094   4                                      dTscPrintf("\nTouch Start with: %d, %d", TouchX, TouchY );
1095   4                                      TouchPressedOld = CpuTouchPressed;
1096   4                              }
1097   3                              else {
1098   4                              }
1099   3                      }
1100   2              }
1101   1              CalibX /= (DWORD)count;
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 19  

1102   1              CalibY /= (DWORD)count;
1103   1              dTscPrintf("\nCalibration data %bd: (%d, %d) --> (%ld, %ld)", n, TouchCalibX[n], TouchCalibY[n], CalibX, 
             -CalibY );
1104   1              Temp_TouchCalibX[n] = CalibX;
1105   1              Temp_TouchCalibY[n] = CalibY;
1106   1      
1107   1              dTscPrintf("====>END");
1108   1      
1109   1              //BKTODO: Save CalibDataX[n] and CalibDataY[n] to EEPROM
1110   1      }
1111          #endif
1112          
1113          //=============================================================================
1114          //              TouchDump : for checking Touch ADC character 
1115          //=============================================================================
1116          #ifdef SUPPORT_TOUCH
1117          void TouchDump( void )
1118          {
1119   1      }
1120          #endif
1121          
1122          
1123          #ifdef MODEL_TW8835_EXTI2C
              //BKTODO::Use Block command, ReadI2C(TW88I2CAddress,REG0B2,2); it is faster then two ReadI2CByte()
              #define ReadTscData(TscData) TscData = ReadTW88(REG0B2); TscData <<= 4; TscData += ReadTW88(REG0B3) 
              //need verify
              /*
              BYTE TempByte[2];
              #define ReadTscData(TscData) ReadI2C(TW88I2CAddress,REG0B2,TempByte, 2); \
                                                                      TscData=TempByte[0];    \
                                                                      TscData <<= 4; \
                                                                      TscData += TempByte[1]
              */
              
              
              void TscPseudoISR(void)
              {
                      DECLARE_LOCAL_page
                      BYTE diff;
                      WORD TscData;
                      BYTE TscByte, TscZ1;
                      static BYTE static_timer1_intr_count=0xFF;
              
                      //if SW request to skip, do skip
                      if(CpuTouchSkipCount) {
                              CpuTouchSkipCount--;
                              return;
                      }
              
                      //if loop is faster then timer1, just skip.
                      if(timer1_intr_count==static_timer1_intr_count)
                              return;
                      static_timer1_intr_count = timer1_intr_count;
              
              //PORT_DEBUG=0;
                      ReadTW88Page(page);
                      WriteTW88Page(PAGE0_TOUCH);
              
                      if(timer1_intr_count >=10) {
                              //check keypad every 100ms.(if timer 1 is 10ms)
              
                              timer1_intr_count = 0;
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 20  

                              //---------------------
                              //read KeyPad value.
                              WriteTW88(REG0B0, 0x07);        //mode_aux3
                              ReadTscData(TscData);
                              CpuAUX3_Changed++;
                              CpuAUX3 = TscData;
              #ifdef DEBUG_KEYREMO
                              if(TscData >= 0x100) {          //press_threshold
                                      Printf("\nTscPseudoISR Key:%x CpuAUX_Changed:%bx",TscData,CpuAUX3_Changed);
                              }
              #endif
                      }
              #ifdef MODEL_TW8835_EXTI2C
                      if(TscHwReady==0) {
                              //if Tsc is not connected, skip.
                              //We already checked Z2 on InitTouch().
              //PORT_DEBUG=1;
                              WriteTW88Page(page);
                              return;
                      }
              #endif
              
                      WriteTW88(REG0B0, 0x01);                //mode_z1
                      TscByte = ReadTW88(REG0B2);             //read [11:4]
                      if(TscByte < 0x10) {                    //check pressed value
                              if(CpuTouchPressed) {
                                      CpuTouchPressed = 0;
                                      CpuTouchChanged++;
              #ifdef DEBUG_TOUCH_HW
                                      Printf("\nTscPseudoISR 1->0 Z1:%bx CpuTouchChanged:%bd",TscByte,CpuTouchChanged);
              #endif
                              }       
                              WriteTW88Page(page);
              //PORT_DEBUG=1;
                              return;
                      }
                      //-------------------------
                      // Touch is pressed
                      //-------------------------
                      TscZ1 = TscByte;
              
                      WriteTW88(REG0B0, 0x00);                //mode_X
                      ReadTscData(CpuTouchX);                 //ReadTscData(TscData); CpuTouchX = TscData;
              
                      WriteTW88(REG0B0, 0x03);                //mode_Y
                      ReadTscData(CpuTouchY);                 //ReadTscData(TscData); CpuTouchY = TscData;
              
                                                                                      //check z1 again
                      WriteTW88(REG0B0, 0x01);                //mode_z1
                      TscByte = ReadTW88(REG0B2);             //read [11:4]
                      if(TscByte < 0x10  ) {                  //check pressed value
              #ifdef DEBUG_TOUCH_HW
                              Printf("\tTscPseudoISR Z1:%bx->%bx CpuTouchChanged:%bd ignore",TscZ1,TscByte,CpuTouchChanged);
              #endif
                              WriteTW88Page(page);
              //PORT_DEBUG=1;
                              return;
                      }
                      if ( TscZ1 > TscByte )  diff = TscZ1 - TscByte;
                      else                                diff = TscByte - TscZ1;
              
                      if ( diff > 0x08 ) {
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 21  

              #ifdef DEBUG_TOUCH_HW
                              Printf("\n\tTscPseudoISR Z1 diff %bx:%bx ignore",TscZ1,TscByte);
              #endif
                              WriteTW88Page(page);
              //PORT_DEBUG=1;
                              return;
                      }
                      WriteTW88Page(page);
              
              
                      //-----------------
                      //success
              
              #ifdef DEBUG_TOUCH_HW
                      if(CpuTouchPressed == 0)
                              Printf("\nTscPseudoISR 0->1);
                      else
                              Printf("\nTscPseudoISR 1");
              #endif
              
                      //-----------------
                      //update
                      CpuTouchChanged++;
                      CpuTouchPressed = 1;
              //PORT_DEBUG=1;
              
              #ifdef DEBUG_TOUCH_HW
                      Printf(" Z1:%bx CpuTouchChanged:%bd", TscZ1, CpuTouchChanged); 
              
                      Printf(" X:%x Y:%x",TscZ1,TscByte, CpuTouchX,CpuTouchY);
                      TouchX = CpuTouchX;
                      TouchY = CpuTouchY;
                      _TscGetScreenPos();
                      Printf(" XY:%dx%d",PosX,PosY);
              #endif
              }
              #undef ReadTscData
              #endif //.. MODEL_TW8835_EXTI2C
1263          
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 22  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00AA (BEGIN)
0000         L?0171:
0000         L?0172:
0000 120000      E     LCALL   ?C?ULDIV
0003 900000      R     MOV     DPTR,#calcX
0006 120000      E     LCALL   ?C?LSTXDATA
0009 900000      R     MOV     DPTR,#CalibDataX+08H
000C E0                MOVX    A,@DPTR
000D FE                MOV     R6,A
000E A3                INC     DPTR
000F E0                MOVX    A,@DPTR
0010 900000      R     MOV     DPTR,#calcX
0013         L?0173:
0013 FF                MOV     R7,A
0014 E4                CLR     A
0015 FC                MOV     R4,A
0016 FD                MOV     R5,A
0017         L?0174:
0017 E0                MOVX    A,@DPTR
0018 F8                MOV     R0,A
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B F9                MOV     R1,A
001C         L?0175:
001C A3                INC     DPTR
001D E0                MOVX    A,@DPTR
001E FA                MOV     R2,A
001F A3                INC     DPTR
0020 E0                MOVX    A,@DPTR
0021 FB                MOV     R3,A
0022 22                RET     
0023         L?0176:
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 C3                CLR     C
0029 900000      R     MOV     DPTR,#CalibDataX+09H
002C E0                MOVX    A,@DPTR
002D 900000      R     MOV     DPTR,#CalibDataX+08H
0030         L?0177:
0030 9F                SUBB    A,R7
0031 FF                MOV     R7,A
0032         L?0178:
0032 E0                MOVX    A,@DPTR
0033 9E                SUBB    A,R6
0034 FE                MOV     R6,A
0035 E4                CLR     A
0036 FC                MOV     R4,A
0037 FD                MOV     R5,A
0038 120000      E     LCALL   ?C?LMUL
003B 900000      R     MOV     DPTR,#calcX
003E 120000      E     LCALL   ?C?LSTXDATA
0041 900000      R     MOV     DPTR,#calcX
0044         L?0179:
0044 E0                MOVX    A,@DPTR
0045 FC                MOV     R4,A
0046 A3                INC     DPTR
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 23  

0047 E0                MOVX    A,@DPTR
0048 FD                MOV     R5,A
0049         L?0180:
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B FE                MOV     R6,A
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F 22                RET     
0050         L?0181:
0050 900000      R     MOV     DPTR,#TouchCalibY+08H
0053 E0                MOVX    A,@DPTR
0054 FE                MOV     R6,A
0055 A3                INC     DPTR
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 C3                CLR     C
0059 900000      R     MOV     DPTR,#TouchY+01H
005C E0                MOVX    A,@DPTR
005D 900000      R     MOV     DPTR,#TouchY
0060         L?0182:
0060 9F                SUBB    A,R7
0061 FF                MOV     R7,A
0062         L?0183:
0062 E0                MOVX    A,@DPTR
0063 900000      R     MOV     DPTR,#calcY
0066         L?0184:
0066 9E                SUBB    A,R6
0067 FE                MOV     R6,A
0068 E4                CLR     A
0069 FC                MOV     R4,A
006A FD                MOV     R5,A
006B 020000      E     LJMP    ?C?LSTXDATA
006E         L?0185:
006E         L?0186:
006E 900000      R     MOV     DPTR,#TouchCalibX+08H
0071         L?0187:
0071 E0                MOVX    A,@DPTR
0072 FE                MOV     R6,A
0073 A3                INC     DPTR
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
0076 C3                CLR     C
0077 22                RET     
0078         L?0188:
0078 900000      R     MOV     DPTR,#CalibDataY+09H
007B E0                MOVX    A,@DPTR
007C 900000      R     MOV     DPTR,#CalibDataY+08H
007F         L?0189:
007F 9F                SUBB    A,R7
0080 FF                MOV     R7,A
0081         L?0190:
0081 E0                MOVX    A,@DPTR
0082 9E                SUBB    A,R6
0083 FE                MOV     R6,A
0084 E4                CLR     A
0085 FC                MOV     R4,A
0086 FD                MOV     R5,A
0087 120000      E     LCALL   ?C?LMUL
008A         L?0191:
008A 900000      R     MOV     DPTR,#calcY
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 24  

008D 020000      E     LJMP    ?C?LSTXDATA
0090         L?0192:
0090 900000      R     MOV     DPTR,#TouchCalibX+09H
0093 E0                MOVX    A,@DPTR
0094 900000      R     MOV     DPTR,#TouchCalibX+08H
0097         L?0193:
0097 9F                SUBB    A,R7
0098 FF                MOV     R7,A
0099         L?0194:
0099 E0                MOVX    A,@DPTR
009A 9E                SUBB    A,R6
009B AB07              MOV     R3,AR7
009D FA                MOV     R2,A
009E E4                CLR     A
009F F9                MOV     R1,A
00A0 F8                MOV     R0,A
00A1 22                RET     
00A2         L?0195:
00A2         L?0196:
00A2 900000      R     MOV     DPTR,#TscTimeCurr
00A5 E0                MOVX    A,@DPTR
00A6 FC                MOV     R4,A
00A7 A3                INC     DPTR
00A8 E0                MOVX    A,@DPTR
00A9 FD                MOV     R5,A
00AA A3                INC     DPTR
00AB E0                MOVX    A,@DPTR
00AC FE                MOV     R6,A
00AD A3                INC     DPTR
00AE E0                MOVX    A,@DPTR
00AF C3                CLR     C
00B0 9B                SUBB    A,R3
00B1 FF                MOV     R7,A
00B2 EE                MOV     A,R6
00B3 9A                SUBB    A,R2
00B4 FE                MOV     R6,A
00B5 ED                MOV     A,R5
00B6 99                SUBB    A,R1
00B7 FD                MOV     R5,A
00B8 EC                MOV     A,R4
00B9 98                SUBB    A,R0
00BA FC                MOV     R4,A
00BB 22                RET     
00BC         L?0199:
00BC E0                MOVX    A,@DPTR
00BD FF                MOV     R7,A
00BE         L?0200:
00BE 25E0              ADD     A,ACC
00C0 2400        R     ADD     A,#LOW TouchCalibX
00C2 F582              MOV     DPL,A
00C4 E4                CLR     A
00C5 3400        R     ADDC    A,#HIGH TouchCalibX
00C7 F583              MOV     DPH,A
00C9 22                RET     
00CA         L?0201:
00CA F0                MOVX    @DPTR,A
00CB         L?0202:
00CB E500        E     MOV     A,regTW88+01H
00CD 24B0              ADD     A,#0B0H
00CF         L?0203:
00CF F582              MOV     DPL,A
00D1 E4                CLR     A
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 25  

00D2 3500        E     ADDC    A,regTW88
00D4 F583              MOV     DPH,A
00D6 22                RET     
00D7         L?0204:
00D7 EF                MOV     A,R7
00D8         L?0205:
00D8 25E0              ADD     A,ACC
00DA 2400        R     ADD     A,#LOW TouchCalibY
00DC F582              MOV     DPL,A
00DE E4                CLR     A
00DF 3400        R     ADDC    A,#HIGH TouchCalibY
00E1 F583              MOV     DPH,A
00E3 22                RET     
00E4         L?0206:
00E4 900000      R     MOV     DPTR,#TouchX+01H
00E7 E0                MOVX    A,@DPTR
00E8 9F                SUBB    A,R7
00E9 FF                MOV     R7,A
00EA 900000      R     MOV     DPTR,#TouchX
00ED E0                MOVX    A,@DPTR
00EE 9E                SUBB    A,R6
00EF         L?0207:
00EF FE                MOV     R6,A
00F0 E4                CLR     A
00F1 FC                MOV     R4,A
00F2 FD                MOV     R5,A
00F3 900000      R     MOV     DPTR,#calcX
00F6 120000      E     LCALL   ?C?LSTXDATA
00F9 900000      R     MOV     DPTR,#calcX
00FC 22                RET     
00FD         L?0210:
00FD         L?0211:
00FD 900000      R     MOV     DPTR,#CalibDataY+08H
0100         L?0212:
0100 E0                MOVX    A,@DPTR
0101 FE                MOV     R6,A
0102 A3                INC     DPTR
0103 E0                MOVX    A,@DPTR
0104 FF                MOV     R7,A
0105 E4                CLR     A
0106 FC                MOV     R4,A
0107 FD                MOV     R5,A
0108 22                RET     
0109         L?0214:
0109 C3                CLR     C
010A 900000      R     MOV     DPTR,#CalibDataX+09H
010D E0                MOVX    A,@DPTR
010E 9F                SUBB    A,R7
010F FF                MOV     R7,A
0110 900000      R     MOV     DPTR,#CalibDataX+08H
0113 E0                MOVX    A,@DPTR
0114 9E                SUBB    A,R6
0115         L?0215:
0115 900000      R     MOV     DPTR,#PosX
0118 F0                MOVX    @DPTR,A
0119 A3                INC     DPTR
011A EF                MOV     A,R7
011B F0                MOVX    @DPTR,A
011C 22                RET     
011D         L?0218:
011D         L?0219:
011D EC                MOV     A,R4
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 26  

011E F0                MOVX    @DPTR,A
011F A3                INC     DPTR
0120 ED                MOV     A,R5
0121 F0                MOVX    @DPTR,A
0122 900000      R     MOV     DPTR,#i
0125 E0                MOVX    A,@DPTR
0126 22                RET     
0127         L?0221:
0127 EB                MOV     A,R3
0128 2F                ADD     A,R7
0129 FF                MOV     R7,A
012A EA                MOV     A,R2
012B 3E                ADDC    A,R6
012C FE                MOV     R6,A
012D ED                MOV     A,R5
012E 39                ADDC    A,R1
012F FD                MOV     R5,A
0130 EC                MOV     A,R4
0131 38                ADDC    A,R0
0132 FC                MOV     R4,A
0133 020000      E     LJMP    ?C?LSTXDATA
0136         L?0222:
0136 E0                MOVX    A,@DPTR
0137 FD                MOV     R5,A
0138 A3                INC     DPTR
0139 E0                MOVX    A,@DPTR
013A 900000      R     MOV     DPTR,#value
013D CD                XCH     A,R5
013E F0                MOVX    @DPTR,A
013F A3                INC     DPTR
0140 ED                MOV     A,R5
0141 F0                MOVX    @DPTR,A
0142 EF                MOV     A,R7
0143 75F002            MOV     B,#02H
0146 A4                MUL     AB
0147 22                RET     
0148         L?0224:
0148         L?0225:
0148 900000      R     MOV     DPTR,#TouchCalibY+09H
014B E0                MOVX    A,@DPTR
014C 9F                SUBB    A,R7
014D FF                MOV     R7,A
014E 900000      R     MOV     DPTR,#TouchCalibY+08H
0151 22                RET     
0152         L?0226:
0152         L?0227:
0152 900000      R     MOV     DPTR,#TouchStatus
0155 E0                MOVX    A,@DPTR
0156 C3                CLR     C
0157 94C0              SUBB    A,#0C0H
0159 22                RET     
015A         L?0228:
015A         L?0229:
015A 900000      R     MOV     DPTR,#new_status
015D E0                MOVX    A,@DPTR
015E 4440              ORL     A,#040H
0160 F0                MOVX    @DPTR,A
0161 22                RET     
0162         L?0230:
0162 E0                MOVX    A,@DPTR
0163 FE                MOV     R6,A
0164 A3                INC     DPTR
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 27  

0165 E0                MOVX    A,@DPTR
0166 FF                MOV     R7,A
0167 EE                MOV     A,R6
0168 33                RLC     A
0169 95E0              SUBB    A,ACC
016B FD                MOV     R5,A
016C FC                MOV     R4,A
016D 020000      E     LJMP    ?C?LMUL
0170         L?0231:
0170 25E0              ADD     A,ACC
0172 2400        R     ADD     A,#LOW Def_TouchCalibX
0174 F582              MOV     DPL,A
0176 E4                CLR     A
0177 3400        R     ADDC    A,#HIGH Def_TouchCalibX
0179 F583              MOV     DPH,A
017B E4                CLR     A
017C 93                MOVC    A,@A+DPTR
017D 22                RET     
017E         L?0232:
017E 25E0              ADD     A,ACC
0180 2400        R     ADD     A,#LOW Def_TouchCalibY
0182 F582              MOV     DPL,A
0184 E4                CLR     A
0185 3400        R     ADDC    A,#HIGH Def_TouchCalibY
0187 F583              MOV     DPH,A
0189 E4                CLR     A
018A 93                MOVC    A,@A+DPTR
018B 22                RET     
018C         L?0234:
018C 900000      R     MOV     DPTR,#CalibDataX+09H
018F E0                MOVX    A,@DPTR
0190 2F                ADD     A,R7
0191 FF                MOV     R7,A
0192 900000      R     MOV     DPTR,#CalibDataX+08H
0195 E0                MOVX    A,@DPTR
0196 3E                ADDC    A,R6
0197 22                RET     
0198         L?0235:
0198 9400              SUBB    A,#00H
019A E0                MOVX    A,@DPTR
019B 6480              XRL     A,#080H
019D 9480              SUBB    A,#080H
019F 900000      R     MOV     DPTR,#new_status
01A2 E0                MOVX    A,@DPTR
01A3 22                RET     
01A4         L?0236:
01A4 900000      R     MOV     DPTR,#OldPosX
01A7 F0                MOVX    @DPTR,A
01A8 A3                INC     DPTR
01A9 EF                MOV     A,R7
01AA F0                MOVX    @DPTR,A
01AB 900000      R     MOV     DPTR,#PosY
01AE E0                MOVX    A,@DPTR
01AF 22                RET     
01B0         L?0237:
01B0 25E0              ADD     A,ACC
01B2 2400        R     ADD     A,#LOW Temp_TouchCalibX
01B4 F582              MOV     DPL,A
01B6 E4                CLR     A
01B7 3400        R     ADDC    A,#HIGH Temp_TouchCalibX
01B9 F583              MOV     DPH,A
01BB 22                RET     
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 28  

01BC         L?0238:
01BC 25E0              ADD     A,ACC
01BE 2400        R     ADD     A,#LOW Temp_TouchCalibY
01C0 F582              MOV     DPL,A
01C2 E4                CLR     A
01C3 3400        R     ADDC    A,#HIGH Temp_TouchCalibY
01C5 F583              MOV     DPH,A
01C7 22                RET     
01C8         L?0239:
01C8 EE                MOV     A,R6
01C9 F0                MOVX    @DPTR,A
01CA A3                INC     DPTR
01CB EF                MOV     A,R7
01CC F0                MOVX    @DPTR,A
01CD 900000      R     MOV     DPTR,#i
01D0 E0                MOVX    A,@DPTR
01D1 04                INC     A
01D2 F0                MOVX    @DPTR,A
01D3 22                RET     
01D4         L?0240:
01D4 900000      R     MOV     DPTR,#TouchY+01H
01D7 E0                MOVX    A,@DPTR
01D8 9F                SUBB    A,R7
01D9 900000      R     MOV     DPTR,#TouchY
01DC E0                MOVX    A,@DPTR
01DD 9E                SUBB    A,R6
01DE 22                RET     
01DF         L?0241:
01DF 900000      R     MOV     DPTR,#PosX
01E2 7403              MOV     A,#03H
01E4 F0                MOVX    @DPTR,A
01E5 A3                INC     DPTR
01E6 741F              MOV     A,#01FH
01E8 F0                MOVX    @DPTR,A
01E9 22                RET     
01EA         L?0242:
01EA 900000      R     MOV     DPTR,#movY
01ED F0                MOVX    @DPTR,A
01EE A3                INC     DPTR
01EF EF                MOV     A,R7
01F0 F0                MOVX    @DPTR,A
01F1 22                RET     
01F2         L?0243:
01F2 900000      R     MOV     DPTR,#LastTouchStatus
01F5 EE                MOV     A,R6
01F6 F0                MOVX    @DPTR,A
01F7 900000      R     MOV     DPTR,#TouchStatus
01FA EF                MOV     A,R7
01FB F0                MOVX    @DPTR,A
01FC 22                RET     
01FD         L?0244:
01FD E0                MOVX    A,@DPTR
01FE FE                MOV     R6,A
01FF A3                INC     DPTR
0200 E0                MOVX    A,@DPTR
0201 FB                MOV     R3,A
0202 AA06              MOV     R2,AR6
0204 E4                CLR     A
0205 F9                MOV     R1,A
0206 F8                MOV     R0,A
0207 22                RET     
0208         L?0245:
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 29  

0208 E4                CLR     A
0209 7F64              MOV     R7,#064H
020B FE                MOV     R6,A
020C FD                MOV     R5,A
020D FC                MOV     R4,A
020E 900000      R     MOV     DPTR,#dt_end
0211 22                RET     
0212         L?0246:
0212 7BFF              MOV     R3,#0FFH
0214 7A00        R     MOV     R2,#HIGH ?SC_90
0216 7900        R     MOV     R1,#LOW ?SC_90
0218 900000      R     MOV     DPTR,#i
021B 22                RET     
             ; FUNCTION Com00AA (END)

             ; FUNCTION ReadKeyPad (BEGIN)
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 268
0000 900000      E     MOV     DPTR,#CpuAUX3
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
;---- Variable 'i' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 269
0008 900000      E     MOV     DPTR,#CpuAUX3_Changed
000B E0                MOVX    A,@DPTR
;---- Variable 'temp' assigned to Register 'R1' ----
000C F9                MOV     R1,A
                                           ; SOURCE LINE # 270
000D C3                CLR     C
000E EF                MOV     A,R7
000F 9464              SUBB    A,#064H
0011 EE                MOV     A,R6
0012 9400              SUBB    A,#00H
0014 5003              JNC     ?C0001
0016 7F00              MOV     R7,#00H
0018 22                RET     
0019         ?C0001:
                                           ; SOURCE LINE # 272
0019 900000      R     MOV     DPTR,#key_in
001C EE                MOV     A,R6
001D F0                MOVX    @DPTR,A
001E A3                INC     DPTR
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
0021 900000      R     MOV     DPTR,#min
0024 EE                MOV     A,R6
0025 F0                MOVX    @DPTR,A
0026 A3                INC     DPTR
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
0029 A3                INC     DPTR
002A EE                MOV     A,R6
002B F0                MOVX    @DPTR,A
002C A3                INC     DPTR
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 275
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 30  

;---- Variable 'j' assigned to Register 'R4/R5' ----
002F E4                CLR     A
0030 FD                MOV     R5,A
0031 FC                MOV     R4,A
0032         ?C0003:
0032         ?C0006:
                                           ; SOURCE LINE # 276
0032 900000      E     MOV     DPTR,#CpuAUX3_Changed
0035 E0                MOVX    A,@DPTR
0036 69                XRL     A,R1
0037 60F9              JZ      ?C0006
0039         ?C0007:
                                           ; SOURCE LINE # 277
0039 900000      E     MOV     DPTR,#CpuAUX3_Changed
003C E0                MOVX    A,@DPTR
003D F9                MOV     R1,A
                                           ; SOURCE LINE # 278
003E 900000      E     MOV     DPTR,#CpuAUX3
                                           ; SOURCE LINE # 279
0041 120000      R     LCALL   L?0187
0044 9464              SUBB    A,#064H
0046 EE                MOV     A,R6
0047 9400              SUBB    A,#00H
0049 5003              JNC     ?C0008
004B 7F00              MOV     R7,#00H
004D 22                RET     
004E         ?C0008:
                                           ; SOURCE LINE # 280
004E 900000      R     MOV     DPTR,#key_in+01H
0051 E0                MOVX    A,@DPTR
0052 2F                ADD     A,R7
0053 F0                MOVX    @DPTR,A
0054 900000      R     MOV     DPTR,#key_in
0057 E0                MOVX    A,@DPTR
0058 3E                ADDC    A,R6
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
005A D3                SETB    C
005B 900000      R     MOV     DPTR,#min+01H
005E E0                MOVX    A,@DPTR
005F 9F                SUBB    A,R7
0060 900000      R     MOV     DPTR,#min
0063 E0                MOVX    A,@DPTR
0064 9E                SUBB    A,R6
0065 4002              JC      ?C0009
0067 800D              SJMP    ?C0156
0069         ?C0009:
                                           ; SOURCE LINE # 282
0069 C3                CLR     C
006A 900000      R     MOV     DPTR,#max+01H
006D E0                MOVX    A,@DPTR
006E 9F                SUBB    A,R7
006F 900000      R     MOV     DPTR,#max
0072 E0                MOVX    A,@DPTR
0073 9E                SUBB    A,R6
0074 5005              JNC     ?C0005
0076         ?C0156:
0076 EE                MOV     A,R6
0077 F0                MOVX    @DPTR,A
0078 A3                INC     DPTR
0079 EF                MOV     A,R7
007A F0                MOVX    @DPTR,A
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 31  

                                           ; SOURCE LINE # 283
007B         ?C0005:
007B 0D                INC     R5
007C BD0001            CJNE    R5,#00H,?C0153
007F 0C                INC     R4
0080         ?C0153:
0080 ED                MOV     A,R5
0081 6409              XRL     A,#09H
0083 4C                ORL     A,R4
0084 70AC              JNZ     ?C0003
0086         ?C0004:
                                           ; SOURCE LINE # 284
0086 900000      R     MOV     DPTR,#min
0089 120000      R     LCALL   L?0187
008C 900000      R     MOV     DPTR,#key_in+01H
008F E0                MOVX    A,@DPTR
0090 9F                SUBB    A,R7
0091 FF                MOV     R7,A
0092 900000      R     MOV     DPTR,#key_in
0095 E0                MOVX    A,@DPTR
0096 9E                SUBB    A,R6
0097 FE                MOV     R6,A
0098 F0                MOVX    @DPTR,A
0099 A3                INC     DPTR
009A EF                MOV     A,R7
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
009C 900000      R     MOV     DPTR,#max
009F E0                MOVX    A,@DPTR
00A0 FC                MOV     R4,A
00A1 A3                INC     DPTR
00A2 E0                MOVX    A,@DPTR
00A3 FD                MOV     R5,A
00A4 C3                CLR     C
00A5 EF                MOV     A,R7
00A6 9D                SUBB    A,R5
00A7 FF                MOV     R7,A
00A8 EE                MOV     A,R6
00A9 9C                SUBB    A,R4
00AA A3                INC     DPTR
00AB F0                MOVX    @DPTR,A
00AC A3                INC     DPTR
00AD EF                MOV     A,R7
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
00AF 900000      R     MOV     DPTR,#key_in
00B2 E0                MOVX    A,@DPTR
00B3 FE                MOV     R6,A
00B4 A3                INC     DPTR
00B5 E0                MOVX    A,@DPTR
00B6 7803              MOV     R0,#03H
00B8         ?C0154:
00B8 CE                XCH     A,R6
00B9 C3                CLR     C
00BA 13                RRC     A
00BB CE                XCH     A,R6
00BC 13                RRC     A
00BD D8F9              DJNZ    R0,?C0154
00BF F0                MOVX    @DPTR,A
00C0 EE                MOV     A,R6
00C1 900000      R     MOV     DPTR,#key_in
00C4 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 32  

                                           ; SOURCE LINE # 288
00C5 E0                MOVX    A,@DPTR
00C6 F9                MOV     R1,A
                                           ; SOURCE LINE # 292
00C7 09                INC     R1
                                           ; SOURCE LINE # 293
00C8 E9                MOV     A,R1
00C9 C3                CLR     C
00CA 13                RRC     A
                                           ; SOURCE LINE # 294
00CB 2400        R     ADD     A,#LOW KeyPadMap
00CD F582              MOV     DPL,A
00CF E4                CLR     A
00D0 3400        R     ADDC    A,#HIGH KeyPadMap
00D2 F583              MOV     DPH,A
00D4 E0                MOVX    A,@DPTR
00D5 FF                MOV     R7,A
                                           ; SOURCE LINE # 295
00D6         ?C0002:
00D6 22                RET     
             ; FUNCTION ReadKeyPad (END)

             ; FUNCTION _GetKey (BEGIN)
                                           ; SOURCE LINE # 308
;---- Variable 'repeat' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 312
;---- Variable 'i' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 313
0000 120000      R     LCALL   ReadKeyPad
                                           ; SOURCE LINE # 314
0003 EF                MOV     A,R7
0004 7008              JNZ     ?C0012
                                           ; SOURCE LINE # 315
0006 C200        R     CLR     RepeatKey
                                           ; SOURCE LINE # 316
0008 F500        R     MOV     Key,A
                                           ; SOURCE LINE # 317
000A C200        R     CLR     KeyReady
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
000C 8013              SJMP    ?C0157
                                           ; SOURCE LINE # 320
000E         ?C0012:
                                           ; SOURCE LINE # 321
000E E500        R     MOV     A,Key
0010 7005              JNZ     ?C0014
                                           ; SOURCE LINE # 322
0012 8F00        R     MOV     Key,R7
                                           ; SOURCE LINE # 323
0014 0500        R     INC     keytic
                                           ; SOURCE LINE # 324
0016 22                RET     
                                           ; SOURCE LINE # 325
0017         ?C0014:
                                           ; SOURCE LINE # 326
0017 EF                MOV     A,R7
0018 6500        R     XRL     A,Key
001A 6009              JZ      ?C0016
                                           ; SOURCE LINE # 327
001C C200        R     CLR     RepeatKey
                                           ; SOURCE LINE # 328
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 33  

001E C200        R     CLR     KeyReady
                                           ; SOURCE LINE # 329
0020 E4                CLR     A
0021         ?C0157:
0021 F500        R     MOV     keytic,A
                                           ; SOURCE LINE # 330
0023 FF                MOV     R7,A
0024 22                RET     
                                           ; SOURCE LINE # 331
0025         ?C0016:
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 333
0025 0500        R     INC     keytic
                                           ; SOURCE LINE # 334
0027 E500        R     MOV     A,keytic
0029 C3                CLR     C
002A 9414              SUBB    A,#014H
002C 5003              JNC     ?C0018
                                           ; SOURCE LINE # 335
002E 7F00              MOV     R7,#00H
0030 22                RET     
                                           ; SOURCE LINE # 336
0031         ?C0018:
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 338
0031 D200        R     SETB    RepeatKey
                                           ; SOURCE LINE # 339
0033 D200        R     SETB    KeyReady
                                           ; SOURCE LINE # 340
0035 750012      R     MOV     keytic,#012H
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 349
0038         ?C0013:
0038 22                RET     
             ; FUNCTION _GetKey (END)

             ; FUNCTION _SetTouchAuto (BEGIN)
                                           ; SOURCE LINE # 364
;---- Variable 'on' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 365
                                           ; SOURCE LINE # 366
0000 C200        R     CLR     TraceAuto
                                           ; SOURCE LINE # 367
0002 EF                MOV     A,R7
0003 6003              JZ      ?C0020
                                           ; SOURCE LINE # 368
0005 D200        R     SETB    TouchAuto
0007 22                RET     
0008         ?C0020:
                                           ; SOURCE LINE # 370
0008 C200        R     CLR     TouchAuto
                                           ; SOURCE LINE # 371
000A         ?C0022:
000A 22                RET     
             ; FUNCTION _SetTouchAuto (END)

             ; FUNCTION _SetTraceAuto (BEGIN)
                                           ; SOURCE LINE # 375
;---- Variable 'on' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 376
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 34  

                                           ; SOURCE LINE # 377
0000 C200        R     CLR     TouchAuto
                                           ; SOURCE LINE # 378
0002 EF                MOV     A,R7
0003 6003              JZ      ?C0023
                                           ; SOURCE LINE # 379
0005 D200        R     SETB    TraceAuto
0007 22                RET     
0008         ?C0023:
                                           ; SOURCE LINE # 381
0008 C200        R     CLR     TraceAuto
                                           ; SOURCE LINE # 382
000A         ?C0025:
000A 22                RET     
             ; FUNCTION _SetTraceAuto (END)

             ; FUNCTION _TscGetScreenPos (BEGIN)
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 430
0000 900000      R     MOV     DPTR,#TouchCalibX+08H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 900000      R     MOV     DPTR,#TouchX
000B E0                MOVX    A,@DPTR
000C FC                MOV     R4,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FD                MOV     R5,A
0010 C3                CLR     C
0011 9F                SUBB    A,R7
0012 EC                MOV     A,R4
0013 9E                SUBB    A,R6
0014 4003              JC      $ + 5H
0016 020000      R     LJMP    ?C0026
                                           ; SOURCE LINE # 431
0019 900000      R     MOV     DPTR,#TouchCalibY+08H
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 120000      R     LCALL   L?0240
0024 5003              JNC     $ + 5H
0026 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 434
0029 900000      R     MOV     DPTR,#TouchCalibX+09H
002C E0                MOVX    A,@DPTR
002D 9D                SUBB    A,R5
002E FF                MOV     R7,A
002F 900000      R     MOV     DPTR,#TouchCalibX+08H
0032 E0                MOVX    A,@DPTR
0033 9C                SUBB    A,R4
                                           ; SOURCE LINE # 435
0034 120000      R     LCALL   L?0207
0037 120000      R     LCALL   L?0174
003A 900000      R     MOV     DPTR,#CalibDataX
                                           ; SOURCE LINE # 436
003D 120000      R     LCALL   L?0176
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 35  

0040 C006              PUSH    AR6
0042 C007              PUSH    AR7
0044 900000      R     MOV     DPTR,#TouchCalibX
0047 120000      R     LCALL   L?0187
004A 120000      R     LCALL   L?0192
004D D007              POP     AR7
004F D006              POP     AR6
                                           ; SOURCE LINE # 437
0051 120000      R     LCALL   L?0171
0054 C3                CLR     C
0055 120000      E     LCALL   ?C?ULCMP
0058 4009              JC      ?C0028
005A E4                CLR     A
005B 900000      R     MOV     DPTR,#PosX
005E F0                MOVX    @DPTR,A
005F A3                INC     DPTR
0060 F0                MOVX    @DPTR,A
0061 800A              SJMP    ?C0029
0063         ?C0028:
                                           ; SOURCE LINE # 438
0063 900000      R     MOV     DPTR,#calcX
0066 A3                INC     DPTR
0067 120000      R     LCALL   L?0180
006A 120000      R     LCALL   L?0214
006D         ?C0029:
                                           ; SOURCE LINE # 440
006D 120000      R     LCALL   L?0181
                                           ; SOURCE LINE # 441
0070 900000      R     MOV     DPTR,#calcY
0073 120000      R     LCALL   L?0174
0076 900000      R     MOV     DPTR,#CalibDataY
0079 120000      R     LCALL   L?0187
007C 120000      R     LCALL   L?0188
                                           ; SOURCE LINE # 442
007F 900000      R     MOV     DPTR,#calcY
0082 120000      R     LCALL   L?0179
0085 C006              PUSH    AR6
0087 C007              PUSH    AR7
0089 900000      R     MOV     DPTR,#TouchCalibY+08H
008C 120000      R     LCALL   L?0187
008F 900000      R     MOV     DPTR,#TouchCalibY+01H
0092 E0                MOVX    A,@DPTR
0093 900000      R     MOV     DPTR,#TouchCalibY
0096 120000      R     LCALL   L?0193
0099 D007              POP     AR7
009B D006              POP     AR6
009D 120000      E     LCALL   ?C?ULDIV
00A0 120000      R     LCALL   L?0191
                                           ; SOURCE LINE # 443
00A3 900000      R     MOV     DPTR,#CalibDataY+08H
00A6 E0                MOVX    A,@DPTR
00A7 FE                MOV     R6,A
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA 900000      R     MOV     DPTR,#calcY
00AD 120000      R     LCALL   L?0173
00B0 C3                CLR     C
00B1 120000      E     LCALL   ?C?ULCMP
00B4 4003              JC      ?C0030
00B6 020000      R     LJMP    ?C0158
00B9         ?C0030:
                                           ; SOURCE LINE # 444
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 36  

                                           ; SOURCE LINE # 445
00B9 020000      R     LJMP    ?C0159
00BC         ?C0027:
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 449
00BC 900000      R     MOV     DPTR,#TouchX
00BF 120000      R     LCALL   L?0187
00C2 900000      R     MOV     DPTR,#TouchCalibX+09H
00C5 E0                MOVX    A,@DPTR
00C6 9F                SUBB    A,R7
00C7 FF                MOV     R7,A
00C8 900000      R     MOV     DPTR,#TouchCalibX+08H
00CB E0                MOVX    A,@DPTR
00CC 900000      R     MOV     DPTR,#calcX
00CF 120000      R     LCALL   L?0184
                                           ; SOURCE LINE # 450
00D2 900000      R     MOV     DPTR,#calcX
00D5 120000      R     LCALL   L?0174
00D8 900000      R     MOV     DPTR,#CalibDataX+06H
                                           ; SOURCE LINE # 451
00DB 120000      R     LCALL   L?0176
00DE C006              PUSH    AR6
00E0 C007              PUSH    AR7
00E2 900000      R     MOV     DPTR,#TouchCalibX+06H
00E5 120000      R     LCALL   L?0187
00E8 120000      R     LCALL   L?0192
00EB D007              POP     AR7
00ED D006              POP     AR6
                                           ; SOURCE LINE # 452
00EF 120000      R     LCALL   L?0171
00F2 C3                CLR     C
00F3 120000      E     LCALL   ?C?ULCMP
00F6 4009              JC      ?C0033
00F8 E4                CLR     A
00F9 900000      R     MOV     DPTR,#PosX
00FC F0                MOVX    @DPTR,A
00FD A3                INC     DPTR
00FE F0                MOVX    @DPTR,A
00FF 800A              SJMP    ?C0034
0101         ?C0033:
                                           ; SOURCE LINE # 453
0101 900000      R     MOV     DPTR,#calcX
0104 A3                INC     DPTR
0105 120000      R     LCALL   L?0180
0108 120000      R     LCALL   L?0214
010B         ?C0034:
                                           ; SOURCE LINE # 455
010B 900000      R     MOV     DPTR,#TouchY
010E 120000      R     LCALL   L?0187
0111 900000      R     MOV     DPTR,#TouchCalibY+09H
0114 E0                MOVX    A,@DPTR
0115 900000      R     MOV     DPTR,#TouchCalibY+08H
0118 120000      R     LCALL   L?0182
                                           ; SOURCE LINE # 456
011B 900000      R     MOV     DPTR,#calcY
011E 120000      R     LCALL   L?0174
0121 900000      R     MOV     DPTR,#CalibDataY+08H
0124 120000      R     LCALL   L?0187
0127 900000      R     MOV     DPTR,#CalibDataY+07H
012A E0                MOVX    A,@DPTR
012B 900000      R     MOV     DPTR,#CalibDataY+06H
012E 120000      R     LCALL   L?0189
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 37  

                                           ; SOURCE LINE # 457
0131 900000      R     MOV     DPTR,#calcY
0134 120000      R     LCALL   L?0179
0137 C006              PUSH    AR6
0139 C007              PUSH    AR7
013B 900000      R     MOV     DPTR,#TouchCalibY+06H
013E 120000      R     LCALL   L?0187
0141 120000      R     LCALL   L?0224
0144 120000      R     LCALL   L?0194
0147 D007              POP     AR7
0149 D006              POP     AR6
014B 120000      E     LCALL   ?C?ULDIV
014E 120000      R     LCALL   L?0191
                                           ; SOURCE LINE # 458
0151 120000      R     LCALL   L?0210
0154 900000      R     MOV     DPTR,#calcY
0157 120000      R     LCALL   L?0174
015A C3                CLR     C
015B 120000      E     LCALL   ?C?ULCMP
015E 4003              JC      ?C0035
0160 020000      R     LJMP    ?C0160
0163         ?C0035:
                                           ; SOURCE LINE # 459
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 461
0163 020000      R     LJMP    ?C0161
0166         ?C0026:
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
0166 900000      R     MOV     DPTR,#TouchCalibY+08H
0169 E0                MOVX    A,@DPTR
016A FE                MOV     R6,A
016B A3                INC     DPTR
016C E0                MOVX    A,@DPTR
016D FF                MOV     R7,A
016E D3                SETB    C
016F 120000      R     LCALL   L?0240
0172 5003              JNC     $ + 5H
0174 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 465
0177 900000      R     MOV     DPTR,#TouchCalibX+08H
017A E0                MOVX    A,@DPTR
017B FE                MOV     R6,A
017C A3                INC     DPTR
017D E0                MOVX    A,@DPTR
017E FF                MOV     R7,A
                                           ; SOURCE LINE # 466
017F 120000      R     LCALL   L?0206
0182 120000      R     LCALL   L?0174
0185 900000      R     MOV     DPTR,#CalibDataX+08H
0188 120000      R     LCALL   L?0187
018B 900000      R     MOV     DPTR,#CalibDataX+03H
018E E0                MOVX    A,@DPTR
018F 900000      R     MOV     DPTR,#CalibDataX+02H
                                           ; SOURCE LINE # 467
0192 120000      R     LCALL   L?0177
0195 C006              PUSH    AR6
0197 C007              PUSH    AR7
0199 120000      R     LCALL   L?0185
019C 900000      R     MOV     DPTR,#TouchCalibX+03H
019F E0                MOVX    A,@DPTR
01A0 9F                SUBB    A,R7
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 38  

01A1 FF                MOV     R7,A
01A2 900000      R     MOV     DPTR,#TouchCalibX+02H
01A5 120000      R     LCALL   L?0194
01A8 D007              POP     AR7
01AA D006              POP     AR6
                                           ; SOURCE LINE # 468
01AC 120000      R     LCALL   L?0172
01AF C3                CLR     C
01B0 120000      E     LCALL   ?C?ULCMP
01B3 4005              JC      ?C0039
01B5 120000      R     LCALL   L?0241
01B8 800D              SJMP    ?C0040
01BA         ?C0039:
                                           ; SOURCE LINE # 469
01BA 900000      R     MOV     DPTR,#calcX
01BD A3                INC     DPTR
01BE 120000      R     LCALL   L?0180
01C1 120000      R     LCALL   L?0234
01C4 120000      R     LCALL   L?0215
01C7         ?C0040:
                                           ; SOURCE LINE # 471
01C7 120000      R     LCALL   L?0181
                                           ; SOURCE LINE # 472
01CA 900000      R     MOV     DPTR,#calcY
01CD 120000      R     LCALL   L?0174
01D0 900000      R     MOV     DPTR,#CalibDataY+02H
01D3 120000      R     LCALL   L?0187
01D6 120000      R     LCALL   L?0188
                                           ; SOURCE LINE # 473
01D9 900000      R     MOV     DPTR,#calcY
01DC 120000      R     LCALL   L?0179
01DF C006              PUSH    AR6
01E1 C007              PUSH    AR7
01E3 900000      R     MOV     DPTR,#TouchCalibY+08H
01E6 120000      R     LCALL   L?0187
01E9 900000      R     MOV     DPTR,#TouchCalibY+03H
01EC E0                MOVX    A,@DPTR
01ED 9F                SUBB    A,R7
01EE FF                MOV     R7,A
01EF 900000      R     MOV     DPTR,#TouchCalibY+02H
01F2 120000      R     LCALL   L?0194
01F5 D007              POP     AR7
01F7 D006              POP     AR6
01F9 120000      E     LCALL   ?C?ULDIV
01FC 120000      R     LCALL   L?0191
                                           ; SOURCE LINE # 474
01FF 120000      R     LCALL   L?0210
0202 900000      R     MOV     DPTR,#calcY
0205 120000      R     LCALL   L?0174
0208 C3                CLR     C
0209 120000      E     LCALL   ?C?ULCMP
020C 4008              JC      ?C0041
020E         ?C0158:
020E E4                CLR     A
020F 900000      R     MOV     DPTR,#PosY
0212 F0                MOVX    @DPTR,A
0213 A3                INC     DPTR
0214 F0                MOVX    @DPTR,A
0215 22                RET     
0216         ?C0041:
                                           ; SOURCE LINE # 475
0216         ?C0159:
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 39  

0216 900000      R     MOV     DPTR,#calcY
0219 A3                INC     DPTR
021A 120000      R     LCALL   L?0180
021D C3                CLR     C
021E 900000      R     MOV     DPTR,#CalibDataY+09H
0221 E0                MOVX    A,@DPTR
0222 9F                SUBB    A,R7
0223 FF                MOV     R7,A
0224 900000      R     MOV     DPTR,#CalibDataY+08H
0227 E0                MOVX    A,@DPTR
0228 9E                SUBB    A,R6
                                           ; SOURCE LINE # 476
0229 020000      R     LJMP    ?C0162
022C         ?C0038:
                                           ; SOURCE LINE # 477
                                           ; SOURCE LINE # 479
022C 120000      R     LCALL   L?0185
                                           ; SOURCE LINE # 480
022F 120000      R     LCALL   L?0206
0232 120000      R     LCALL   L?0174
0235 900000      R     MOV     DPTR,#CalibDataX+08H
0238 120000      R     LCALL   L?0187
023B 900000      R     MOV     DPTR,#CalibDataX+05H
023E E0                MOVX    A,@DPTR
023F 9F                SUBB    A,R7
0240 FF                MOV     R7,A
0241 900000      R     MOV     DPTR,#CalibDataX+04H
                                           ; SOURCE LINE # 481
0244 120000      R     LCALL   L?0178
0247 C006              PUSH    AR6
0249 C007              PUSH    AR7
024B 120000      R     LCALL   L?0186
024E 900000      R     MOV     DPTR,#TouchCalibX+05H
0251 E0                MOVX    A,@DPTR
0252 9F                SUBB    A,R7
0253 FF                MOV     R7,A
0254 900000      R     MOV     DPTR,#TouchCalibX+04H
0257 120000      R     LCALL   L?0194
025A D007              POP     AR7
025C D006              POP     AR6
                                           ; SOURCE LINE # 482
025E 120000      R     LCALL   L?0172
0261 C3                CLR     C
0262 120000      E     LCALL   ?C?ULCMP
0265 4005              JC      ?C0044
0267 120000      R     LCALL   L?0241
026A 800D              SJMP    ?C0045
026C         ?C0044:
                                           ; SOURCE LINE # 483
026C 900000      R     MOV     DPTR,#calcX
026F A3                INC     DPTR
0270 120000      R     LCALL   L?0180
0273 120000      R     LCALL   L?0234
0276 120000      R     LCALL   L?0215
0279         ?C0045:
                                           ; SOURCE LINE # 485
0279 900000      R     MOV     DPTR,#TouchY
027C 120000      R     LCALL   L?0187
027F 120000      R     LCALL   L?0224
0282 120000      R     LCALL   L?0183
                                           ; SOURCE LINE # 486
0285 900000      R     MOV     DPTR,#calcY
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 40  

0288 120000      R     LCALL   L?0174
028B 900000      R     MOV     DPTR,#CalibDataY+08H
028E 120000      R     LCALL   L?0187
0291 900000      R     MOV     DPTR,#CalibDataY+05H
0294 E0                MOVX    A,@DPTR
0295 9F                SUBB    A,R7
0296 FF                MOV     R7,A
0297 900000      R     MOV     DPTR,#CalibDataY+04H
029A 120000      R     LCALL   L?0190
                                           ; SOURCE LINE # 487
029D 900000      R     MOV     DPTR,#calcY
02A0 120000      R     LCALL   L?0179
02A3 C006              PUSH    AR6
02A5 C007              PUSH    AR7
02A7 900000      R     MOV     DPTR,#TouchCalibY+04H
02AA 120000      R     LCALL   L?0187
02AD 120000      R     LCALL   L?0225
02B0 120000      R     LCALL   L?0194
02B3 D007              POP     AR7
02B5 D006              POP     AR6
02B7 120000      E     LCALL   ?C?ULDIV
02BA 120000      R     LCALL   L?0191
                                           ; SOURCE LINE # 488
02BD 120000      R     LCALL   L?0211
02C0 900000      R     MOV     DPTR,#calcY
02C3 120000      R     LCALL   L?0174
02C6 C3                CLR     C
02C7 120000      E     LCALL   ?C?ULCMP
02CA 400B              JC      ?C0046
02CC         ?C0160:
02CC 900000      R     MOV     DPTR,#PosY
02CF 7401              MOV     A,#01H
02D1 F0                MOVX    @DPTR,A
02D2 A3                INC     DPTR
02D3 74DF              MOV     A,#0DFH
02D5 F0                MOVX    @DPTR,A
02D6 22                RET     
02D7         ?C0046:
                                           ; SOURCE LINE # 489
02D7         ?C0161:
02D7 900000      R     MOV     DPTR,#calcY
02DA A3                INC     DPTR
02DB 120000      R     LCALL   L?0180
02DE 900000      R     MOV     DPTR,#CalibDataY+09H
02E1 E0                MOVX    A,@DPTR
02E2 2F                ADD     A,R7
02E3 FF                MOV     R7,A
02E4 900000      R     MOV     DPTR,#CalibDataY+08H
02E7 E0                MOVX    A,@DPTR
02E8 3E                ADDC    A,R6
02E9         ?C0162:
02E9 900000      R     MOV     DPTR,#PosY
02EC F0                MOVX    @DPTR,A
02ED A3                INC     DPTR
02EE EF                MOV     A,R7
02EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 490
                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 493
02F0         ?C0048:
02F0 22                RET     
             ; FUNCTION _TscGetScreenPos (END)
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 41  


             ; FUNCTION InitTouch (BEGIN)
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 507
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_0
0004 7900        R     MOV     R1,#LOW ?SC_0
0006 120000      E     LCALL   _dPuts
                                           ; SOURCE LINE # 509
0009 900000      R     MOV     DPTR,#TscTimeLastEnd
000C 120000      E     LCALL   ?C?LSTKXDATA
000F 00                DB      00H
0010 00                DB      00H
0011 00                DB      00H
0012 00                DB      00H
0013 900000      R     MOV     DPTR,#TscTimeEnd
0016 120000      E     LCALL   ?C?LSTKXDATA
0019 00                DB      00H
001A 00                DB      00H
001B 00                DB      00H
001C 00                DB      00H
001D 900000      R     MOV     DPTR,#TscTimeStart
0020 120000      E     LCALL   ?C?LSTKXDATA
0023 00                DB      00H
0024 00                DB      00H
0025 00                DB      00H
0026 00                DB      00H
                                           ; SOURCE LINE # 513
0027 E4                CLR     A
0028 900000      E     MOV     DPTR,#CpuTouchStep
                                           ; SOURCE LINE # 514
002B 120000      R     LCALL   L?0201
002E 7402              MOV     A,#02H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 516
0031 E500        E     MOV     A,regTW88+01H
0033 24B1              ADD     A,#0B1H
0035 120000      R     LCALL   L?0203
0038 74F8              MOV     A,#0F8H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 524
003B E500        E     MOV     A,regTW88+01H
003D 24B4              ADD     A,#0B4H
003F 120000      R     LCALL   L?0203
0042 7402              MOV     A,#02H
                                           ; SOURCE LINE # 525
0044 120000      R     LCALL   L?0201
0047 E0                MOVX    A,@DPTR
0048 4420              ORL     A,#020H
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
004B 7F01              MOV     R7,#01H
004D 7E00              MOV     R6,#00H
004F 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 527
0052 E500        E     MOV     A,regTW88+01H
0054 24B2              ADD     A,#0B2H
0056 120000      R     LCALL   L?0203
0059 E0                MOVX    A,@DPTR
005A 900000      R     MOV     DPTR,#val
005D F0                MOVX    @DPTR,A
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 42  

                                           ; SOURCE LINE # 528
005E C3                CLR     C
005F 9480              SUBB    A,#080H
0061 7BFF              MOV     R3,#0FFH
0063 5013              JNC     ?C0049
                                           ; SOURCE LINE # 529
0065 7A00        R     MOV     R2,#HIGH ?SC_11
0067 7900        R     MOV     R1,#LOW ?SC_11
0069 E0                MOVX    A,@DPTR
006A 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
006D F0                MOVX    @DPTR,A
006E 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 531
0071 E4                CLR     A
0072 900000      R     MOV     DPTR,#TscHwReady
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 532
0076 8015              SJMP    ?C0050
0078         ?C0049:
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
0078 7A00        R     MOV     R2,#HIGH ?SC_22
007A 7900        R     MOV     R1,#LOW ?SC_22
007C 900000      R     MOV     DPTR,#val
007F E0                MOVX    A,@DPTR
0080 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0083 F0                MOVX    @DPTR,A
0084 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 535
0087 900000      R     MOV     DPTR,#TscHwReady
008A 7401              MOV     A,#01H
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 536
008D         ?C0050:
                                           ; SOURCE LINE # 537
008D 120000      R     LCALL   L?0202
0090 E0                MOVX    A,@DPTR
0091 54DF              ANL     A,#0DFH
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 542
0094 E500        E     MOV     A,regTW88+01H
0096 24B4              ADD     A,#0B4H
0098 120000      R     LCALL   L?0203
009B 740A              MOV     A,#0AH
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 548
009E C2EC              CLR     SFR_EINT6
                                           ; SOURCE LINE # 549
00A0 C200        E     CLR     CpuTouchPressed
                                           ; SOURCE LINE # 551
00A2 858D8B            MOV     SFR_TL1,SFR_TH1
                                           ; SOURCE LINE # 552
00A5 E4                CLR     A
00A6 900000      E     MOV     DPTR,#CpuTouchSkipCount
00A9 F0                MOVX    @DPTR,A
00AA A3                INC     DPTR
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 553
00AC D2AB              SETB    SFR_ET1
                                           ; SOURCE LINE # 554
00AE 22                RET     
             ; FUNCTION InitTouch (END)
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 43  


             ; FUNCTION GetTouch2 (BEGIN)
                                           ; SOURCE LINE # 570
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 581
0000 C2AF              CLR     SFR_EA
                                           ; SOURCE LINE # 582
0002 900000      E     MOV     DPTR,#CpuTouchChanged
0005 E0                MOVX    A,@DPTR
0006 FF                MOV     R7,A
0007 900000      R     MOV     DPTR,#TC
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 583
000B A200        E     MOV     C,CpuTouchPressed
000D 9200        R     MOV     TP,C
                                           ; SOURCE LINE # 584
000F 900000      E     MOV     DPTR,#CpuTouchX
0012 E0                MOVX    A,@DPTR
0013 FD                MOV     R5,A
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 900000      R     MOV     DPTR,#TouchX
0019 CD                XCH     A,R5
001A F0                MOVX    @DPTR,A
001B A3                INC     DPTR
001C ED                MOV     A,R5
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 585
001E 900000      E     MOV     DPTR,#CpuTouchY
0021 E0                MOVX    A,@DPTR
0022 FD                MOV     R5,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 900000      R     MOV     DPTR,#TouchY
0028 CD                XCH     A,R5
0029 F0                MOVX    @DPTR,A
002A A3                INC     DPTR
002B ED                MOV     A,R5
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 586
002D D2AF              SETB    SFR_EA
                                           ; SOURCE LINE # 603
002F 900000      R     MOV     DPTR,#TouchChangedOld
0032 E0                MOVX    A,@DPTR
0033 6F                XRL     A,R7
0034 7034              JNZ     ?C0052
                                           ; SOURCE LINE # 604
0036 900000      R     MOV     DPTR,#TouchStatus
0039 E0                MOVX    A,@DPTR
003A B4402A            CJNE    A,#040H,?C0053
003D 900000      R     MOV     DPTR,#TscTimeEnd
0040 E0                MOVX    A,@DPTR
0041 FC                MOV     R4,A
0042 A3                INC     DPTR
0043 E0                MOVX    A,@DPTR
0044 FD                MOV     R5,A
0045 A3                INC     DPTR
0046 E0                MOVX    A,@DPTR
0047 FE                MOV     R6,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A 2432              ADD     A,#032H
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 44  

004C FF                MOV     R7,A
004D E4                CLR     A
004E 3E                ADDC    A,R6
004F FE                MOV     R6,A
0050 E4                CLR     A
0051 3D                ADDC    A,R5
0052 FD                MOV     R5,A
0053 E4                CLR     A
0054 3C                ADDC    A,R4
0055 FC                MOV     R4,A
0056 AB00        E     MOV     R3,SystemClock+03H
0058 AA00        E     MOV     R2,SystemClock+02H
005A A900        E     MOV     R1,SystemClock+01H
005C A800        E     MOV     R0,SystemClock
005E D3                SETB    C
005F 120000      E     LCALL   ?C?ULCMP
0062 4003              JC      ?C0053
                                           ; SOURCE LINE # 606
0064 7F01              MOV     R7,#01H
0066 22                RET     
                                           ; SOURCE LINE # 607
0067         ?C0053:
                                           ; SOURCE LINE # 608
0067 7F00              MOV     R7,#00H
0069 22                RET     
                                           ; SOURCE LINE # 609
006A         ?C0052:
                                           ; SOURCE LINE # 611
006A E4                CLR     A
006B 900000      R     MOV     DPTR,#ret
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 612
006F AF00        E     MOV     R7,SystemClock+03H
0071 AE00        E     MOV     R6,SystemClock+02H
0073 AD00        E     MOV     R5,SystemClock+01H
0075 AC00        E     MOV     R4,SystemClock
0077 900000      R     MOV     DPTR,#TscTimeCurr
007A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 614
007D 200003      R     JB      TouchPressedOld,$ + 6H
0080 020000      R     LJMP    ?C0055
                                           ; SOURCE LINE # 615
0083 200003      R     JB      TP,$ + 6H
0086 020000      R     LJMP    ?C0056
                                           ; SOURCE LINE # 617
0089         LABEL_TP11:
                                           ; SOURCE LINE # 619
0089 900000      R     MOV     DPTR,#new_status
008C 7480              MOV     A,#080H
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 620
008F 120000      R     LCALL   _TscGetScreenPos
                                           ; SOURCE LINE # 624
0092 900000      R     MOV     DPTR,#OldPosX
0095 120000      R     LCALL   L?0187
0098 900000      R     MOV     DPTR,#PosX+01H
009B E0                MOVX    A,@DPTR
009C 9F                SUBB    A,R7
009D FF                MOV     R7,A
009E 900000      R     MOV     DPTR,#PosX
00A1 E0                MOVX    A,@DPTR
00A2 9E                SUBB    A,R6
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 45  

00A3 900000      R     MOV     DPTR,#movX
00A6 F0                MOVX    @DPTR,A
00A7 FA                MOV     R2,A
00A8 A3                INC     DPTR
00A9 EF                MOV     A,R7
00AA F0                MOVX    @DPTR,A
00AB FB                MOV     R3,A
                                           ; SOURCE LINE # 625
00AC 900000      R     MOV     DPTR,#OldPosY
00AF 120000      R     LCALL   L?0187
00B2 900000      R     MOV     DPTR,#PosY+01H
00B5 E0                MOVX    A,@DPTR
00B6 9F                SUBB    A,R7
00B7 FF                MOV     R7,A
00B8 900000      R     MOV     DPTR,#PosY
00BB E0                MOVX    A,@DPTR
00BC 9E                SUBB    A,R6
00BD 120000      R     LCALL   L?0242
                                           ; SOURCE LINE # 626
00C0 AF03              MOV     R7,AR3
00C2 AE02              MOV     R6,AR2
00C4 120000      R     LCALL   L?0233
00C7 500A              JNC     ?C0058
                                           ; SOURCE LINE # 627
00C9 120000      R     LCALL   L?0226
00CC 401D              JC      ?C0060
                                           ; SOURCE LINE # 628
00CE 120000      R     LCALL   L?0228
                                           ; SOURCE LINE # 629
00D1 8018              SJMP    ?C0060
00D3         ?C0058:
                                           ; SOURCE LINE # 630
                                           ; SOURCE LINE # 631
00D3 120000      R     LCALL   L?0228
                                           ; SOURCE LINE # 632
00D6 D3                SETB    C
00D7 900000      R     MOV     DPTR,#movX+01H
00DA E0                MOVX    A,@DPTR
00DB 900000      R     MOV     DPTR,#movX
00DE 120000      R     LCALL   L?0235
00E1 4005              JC      ?C0061
00E3 440C              ORL     A,#0CH
00E5 F0                MOVX    @DPTR,A
00E6 8003              SJMP    ?C0060
00E8         ?C0061:
                                           ; SOURCE LINE # 633
00E8 4408              ORL     A,#08H
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 634
00EB         ?C0060:
                                           ; SOURCE LINE # 635
00EB 900000      R     MOV     DPTR,#movY
00EE E0                MOVX    A,@DPTR
00EF FE                MOV     R6,A
00F0 A3                INC     DPTR
00F1 E0                MOVX    A,@DPTR
00F2 FF                MOV     R7,A
00F3 120000      R     LCALL   L?0233
00F6 500A              JNC     ?C0063
                                           ; SOURCE LINE # 636
00F8 120000      R     LCALL   L?0226
00FB 401D              JC      ?C0065
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 46  

                                           ; SOURCE LINE # 637
00FD 120000      R     LCALL   L?0229
                                           ; SOURCE LINE # 638
0100 8018              SJMP    ?C0065
0102         ?C0063:
                                           ; SOURCE LINE # 639
                                           ; SOURCE LINE # 640
0102 120000      R     LCALL   L?0229
                                           ; SOURCE LINE # 641
0105 D3                SETB    C
0106 900000      R     MOV     DPTR,#movY+01H
0109 E0                MOVX    A,@DPTR
010A 900000      R     MOV     DPTR,#movY
010D 120000      R     LCALL   L?0235
0110 4005              JC      ?C0066
0112 4403              ORL     A,#03H
0114 F0                MOVX    @DPTR,A
0115 8003              SJMP    ?C0065
0117         ?C0066:
                                           ; SOURCE LINE # 642
0117 4402              ORL     A,#02H
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 643
011A         ?C0065:
                                           ; SOURCE LINE # 644
011A 900000      R     MOV     DPTR,#new_status
011D E0                MOVX    A,@DPTR
011E FF                MOV     R7,A
011F 900000      R     MOV     DPTR,#TouchStatus
0122 E0                MOVX    A,@DPTR
0123 6F                XRL     A,R7
0124 6015              JZ      ?C0069
                                           ; SOURCE LINE # 646
0126         ?C0068:
                                           ; SOURCE LINE # 647
                                           ; SOURCE LINE # 648
0126 120000      R     LCALL   _PrintTouchStatusParam
                                           ; SOURCE LINE # 649
0129 900000      R     MOV     DPTR,#new_status
012C E0                MOVX    A,@DPTR
012D FD                MOV     R5,A
012E E4                CLR     A
012F FF                MOV     R7,A
0130 120000      R     LCALL   _PrintTouchStatus
                                           ; SOURCE LINE # 650
0133 900000      R     MOV     DPTR,#new_status
0136 E0                MOVX    A,@DPTR
0137 FF                MOV     R7,A
0138 120000      R     LCALL   _TscUpdateStatus
                                           ; SOURCE LINE # 651
013B         ?C0069:
                                           ; SOURCE LINE # 655
013B 900000      R     MOV     DPTR,#new_status
013E E0                MOVX    A,@DPTR
013F 540A              ANL     A,#0AH
0141 6016              JZ      ?C0070
                                           ; SOURCE LINE # 656
0143 900000      R     MOV     DPTR,#PosX
0146 E0                MOVX    A,@DPTR
0147 FF                MOV     R7,A
0148 A3                INC     DPTR
0149 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 47  

014A CF                XCH     A,R7
                                           ; SOURCE LINE # 657
014B 120000      R     LCALL   L?0236
014E FF                MOV     R7,A
014F A3                INC     DPTR
0150 E0                MOVX    A,@DPTR
0151 900000      R     MOV     DPTR,#OldPosY
0154 CF                XCH     A,R7
0155 F0                MOVX    @DPTR,A
0156 A3                INC     DPTR
0157 EF                MOV     A,R7
0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 658
0159         ?C0070:
                                           ; SOURCE LINE # 660
                                           ; SOURCE LINE # 661
0159 020000      R     LJMP    ?C0163
015C         ?C0056:
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 668
015C 900000      R     MOV     DPTR,#TscTimeStart
015F 120000      R     LCALL   L?0174
0162 120000      R     LCALL   L?0195
0165 900000      R     MOV     DPTR,#dt_start
0168 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 669
016B 900000      R     MOV     DPTR,#TscTimeEnd
016E 120000      R     LCALL   L?0174
0171 120000      R     LCALL   L?0195
0174 900000      R     MOV     DPTR,#dt_end
0177 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 672
017A 900000      R     MOV     DPTR,#LastTouchStatus
017D E0                MOVX    A,@DPTR
017E C3                CLR     C
017F 94C0              SUBB    A,#0C0H
0181 4002              JC      ?C0072
                                           ; SOURCE LINE # 673
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 675
                                           ; SOURCE LINE # 676
0183 8041              SJMP    ?C0166
0185         ?C0072:
                                           ; SOURCE LINE # 677
0185 E4                CLR     A
0186 7FE8              MOV     R7,#0E8H
0188 7E03              MOV     R6,#03H
018A FD                MOV     R5,A
018B FC                MOV     R4,A
018C 900000      R     MOV     DPTR,#dt_start
018F 120000      R     LCALL   L?0174
0192 D3                SETB    C
0193 120000      E     LCALL   ?C?ULCMP
0196 400B              JC      ?C0074
                                           ; SOURCE LINE # 678
0198 7D04              MOV     R5,#04H
019A 7F01              MOV     R7,#01H
019C 120000      R     LCALL   _PrintTouchStatus
                                           ; SOURCE LINE # 679
019F 7F04              MOV     R7,#04H
                                           ; SOURCE LINE # 680
                                           ; SOURCE LINE # 681
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 48  

01A1 803F              SJMP    ?C0167
01A3         ?C0074:
                                           ; SOURCE LINE # 682
01A3 120000      R     LCALL   L?0245
01A6 120000      R     LCALL   L?0174
01A9 C3                CLR     C
01AA 120000      E     LCALL   ?C?ULCMP
01AD 5012              JNC     ?C0076
                                           ; SOURCE LINE # 683
01AF 120000      R     LCALL   L?0227
01B2 4002              JC      ?C0077
                                           ; SOURCE LINE # 684
01B4         ?C0164:
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 687
01B4 8010              SJMP    ?C0166
01B6         ?C0077:
                                           ; SOURCE LINE # 688
                                           ; SOURCE LINE # 689
01B6 7D02              MOV     R5,#02H
01B8 7F01              MOV     R7,#01H
01BA 120000      R     LCALL   _PrintTouchStatus
                                           ; SOURCE LINE # 690
01BD 7F02              MOV     R7,#02H
01BF         ?C0165:
                                           ; SOURCE LINE # 691
                                           ; SOURCE LINE # 692
                                           ; SOURCE LINE # 693
01BF 8021              SJMP    ?C0167
01C1         ?C0076:
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 695
01C1 120000      R     LCALL   L?0227
01C4 4013              JC      ?C0080
                                           ; SOURCE LINE # 696
01C6         ?C0166:
01C6 7D40              MOV     R5,#040H
01C8 7F01              MOV     R7,#01H
01CA 120000      R     LCALL   _PrintTouchStatus
                                           ; SOURCE LINE # 697
01CD 7F40              MOV     R7,#040H
01CF 120000      R     LCALL   _TscUpdateStatus
                                           ; SOURCE LINE # 698
01D2 E4                CLR     A
01D3 900000      R     MOV     DPTR,#ret
01D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 699
01D7 8012              SJMP    ?C0073
01D9         ?C0080:
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 701
01D9 7D01              MOV     R5,#01H
01DB 7F01              MOV     R7,#01H
01DD 120000      R     LCALL   _PrintTouchStatus
                                           ; SOURCE LINE # 702
01E0 7F01              MOV     R7,#01H
01E2         ?C0167:
01E2 120000      R     LCALL   _TscUpdateStatus
                                           ; SOURCE LINE # 703
01E5 900000      R     MOV     DPTR,#ret
01E8 7401              MOV     A,#01H
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 49  

01EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 704
                                           ; SOURCE LINE # 705
01EB         ?C0073:
                                           ; SOURCE LINE # 710
01EB 900000      R     MOV     DPTR,#TouchStatus
01EE E0                MOVX    A,@DPTR
01EF 6440              XRL     A,#040H
01F1 6003              JZ      $ + 5H
01F3 020000      R     LJMP    ?C0082
                                           ; SOURCE LINE # 711
01F6 900000      R     MOV     DPTR,#StartX
01F9 120000      R     LCALL   L?0187
01FC 900000      R     MOV     DPTR,#OldPosX+01H
01FF E0                MOVX    A,@DPTR
0200 9F                SUBB    A,R7
0201 FF                MOV     R7,A
0202 900000      R     MOV     DPTR,#OldPosX
0205 E0                MOVX    A,@DPTR
0206 9E                SUBB    A,R6
0207 FE                MOV     R6,A
0208 900000      R     MOV     DPTR,#movX
020B F0                MOVX    @DPTR,A
020C A3                INC     DPTR
020D EF                MOV     A,R7
020E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 712
020F 120000      E     LCALL   _TWabsShort
0212 900000      R     MOV     DPTR,#movX
0215 EE                MOV     A,R6
0216 F0                MOVX    @DPTR,A
0217 A3                INC     DPTR
0218 EF                MOV     A,R7
0219 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 713
021A 900000      R     MOV     DPTR,#StartY
021D 120000      R     LCALL   L?0187
0220 900000      R     MOV     DPTR,#OldPosY+01H
0223 E0                MOVX    A,@DPTR
0224 9F                SUBB    A,R7
0225 FF                MOV     R7,A
0226 900000      R     MOV     DPTR,#OldPosY
0229 E0                MOVX    A,@DPTR
022A 9E                SUBB    A,R6
022B FE                MOV     R6,A
022C 120000      R     LCALL   L?0242
                                           ; SOURCE LINE # 714
022F 120000      E     LCALL   _TWabsShort
0232 900000      R     MOV     DPTR,#movY
0235 EE                MOV     A,R6
0236 F0                MOVX    @DPTR,A
0237 A3                INC     DPTR
0238 EF                MOV     A,R7
0239 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 716
023A 900000      R     MOV     DPTR,#veloX
023D 120000      E     LCALL   ?C?LSTKXDATA
0240 00                DB      00H
0241 00                DB      00H
0242 03                DB      03H
0243 E8                DB      0E8H
                                           ; SOURCE LINE # 717
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 50  

0244 900000      R     MOV     DPTR,#veloX
0247 120000      R     LCALL   L?0174
024A 900000      R     MOV     DPTR,#movX
024D 120000      R     LCALL   L?0230
0250 900000      R     MOV     DPTR,#veloX
0253 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 718
0256 900000      R     MOV     DPTR,#veloX
0259 120000      R     LCALL   L?0179
025C 900000      R     MOV     DPTR,#dt_start
025F 120000      R     LCALL   L?0174
0262 120000      E     LCALL   ?C?ULDIV
0265 900000      R     MOV     DPTR,#veloX
0268 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 719
026B 900000      R     MOV     DPTR,#veloY
026E 120000      E     LCALL   ?C?LSTKXDATA
0271 00                DB      00H
0272 00                DB      00H
0273 03                DB      03H
0274 E8                DB      0E8H
                                           ; SOURCE LINE # 720
0275 900000      R     MOV     DPTR,#veloY
0278 120000      R     LCALL   L?0174
027B 900000      R     MOV     DPTR,#movY
027E 120000      R     LCALL   L?0230
0281 900000      R     MOV     DPTR,#veloY
0284 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 721
0287 900000      R     MOV     DPTR,#veloY
028A 120000      R     LCALL   L?0179
028D 900000      R     MOV     DPTR,#dt_start
0290 120000      R     LCALL   L?0174
0293 120000      E     LCALL   ?C?ULDIV
0296 900000      R     MOV     DPTR,#veloY
0299 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 723
029C         ?C0082:
                                           ; SOURCE LINE # 724
029C 900000      R     MOV     DPTR,#TscTimeCurr
029F 120000      R     LCALL   L?0179
02A2 900000      R     MOV     DPTR,#TscTimeEnd
02A5 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 726
02A8 020000      R     LJMP    ?C0083
02AB         ?C0055:
                                           ; SOURCE LINE # 727
                                           ; SOURCE LINE # 728
02AB 200003      R     JB      TP,$ + 6H
02AE 020000      R     LJMP    ?C0083
                                           ; SOURCE LINE # 733
02B1 900000      R     MOV     DPTR,#TscTimeEnd
02B4 120000      R     LCALL   L?0174
02B7 120000      R     LCALL   L?0196
02BA 900000      R     MOV     DPTR,#dt_end
02BD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 735
02C0 900000      R     MOV     DPTR,#TouchStatus
02C3 E0                MOVX    A,@DPTR
02C4 B44002            CJNE    A,#040H,?C0085
                                           ; SOURCE LINE # 738
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 51  

                                           ; SOURCE LINE # 739
                                           ; SOURCE LINE # 740
02C7 8013              SJMP    ?C0168
                                           ; SOURCE LINE # 741
02C9         ?C0085:
                                           ; SOURCE LINE # 742
02C9 900000      R     MOV     DPTR,#LastTouchStatus
02CC E0                MOVX    A,@DPTR
02CD B4401B            CJNE    A,#040H,?C0087
02D0 120000      R     LCALL   L?0245
02D3 120000      R     LCALL   L?0174
02D6 C3                CLR     C
02D7 120000      E     LCALL   ?C?ULCMP
02DA 500F              JNC     ?C0087
                                           ; SOURCE LINE # 743
02DC         ?C0168:
02DC 7DC0              MOV     R5,#0C0H
02DE 7F01              MOV     R7,#01H
02E0 120000      R     LCALL   _PrintTouchStatus
                                           ; SOURCE LINE # 744
02E3 7FC0              MOV     R7,#0C0H
02E5 120000      R     LCALL   _TscUpdateStatus
                                           ; SOURCE LINE # 745
02E8 020000      R     LJMP    LABEL_TP11
                                           ; SOURCE LINE # 746
02EB         ?C0087:
                                           ; SOURCE LINE # 747
                                           ; SOURCE LINE # 748
02EB 7D80              MOV     R5,#080H
02ED 7F01              MOV     R7,#01H
02EF 120000      R     LCALL   _PrintTouchStatus
                                           ; SOURCE LINE # 749
02F2 7F80              MOV     R7,#080H
02F4 120000      R     LCALL   _TscUpdateStatus
                                           ; SOURCE LINE # 750
02F7 120000      R     LCALL   _TscGetScreenPos
                                           ; SOURCE LINE # 751
02FA 900000      R     MOV     DPTR,#PosX
02FD E0                MOVX    A,@DPTR
02FE FE                MOV     R6,A
02FF A3                INC     DPTR
0300 E0                MOVX    A,@DPTR
0301 FF                MOV     R7,A
0302 900000      R     MOV     DPTR,#StartX
0305 EE                MOV     A,R6
0306 F0                MOVX    @DPTR,A
0307 A3                INC     DPTR
0308 EF                MOV     A,R7
0309 F0                MOVX    @DPTR,A
030A EE                MOV     A,R6
                                           ; SOURCE LINE # 752
030B 120000      R     LCALL   L?0236
030E FE                MOV     R6,A
030F A3                INC     DPTR
0310 E0                MOVX    A,@DPTR
0311 FF                MOV     R7,A
0312 900000      R     MOV     DPTR,#StartY
0315 EE                MOV     A,R6
0316 F0                MOVX    @DPTR,A
0317 A3                INC     DPTR
0318 EF                MOV     A,R7
0319 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 52  

031A 900000      R     MOV     DPTR,#OldPosY
031D EE                MOV     A,R6
031E F0                MOVX    @DPTR,A
031F A3                INC     DPTR
0320 EF                MOV     A,R7
0321 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 753
0322 900000      R     MOV     DPTR,#TscTimeEnd
0325 120000      R     LCALL   L?0179
0328 900000      R     MOV     DPTR,#TscTimeLastEnd
032B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 754
032E 900000      R     MOV     DPTR,#TscTimeCurr
0331 120000      R     LCALL   L?0179
0334 900000      R     MOV     DPTR,#TscTimeStart
0337 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 757
033A         ?C0086:
                                           ; SOURCE LINE # 758
033A         ?C0163:
033A 900000      R     MOV     DPTR,#ret
033D 7401              MOV     A,#01H
033F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 759
                                           ; SOURCE LINE # 760
                                           ; SOURCE LINE # 767
                                           ; SOURCE LINE # 768
0340         ?C0083:
                                           ; SOURCE LINE # 769
0340 900000      R     MOV     DPTR,#TC
0343 E0                MOVX    A,@DPTR
0344 900000      R     MOV     DPTR,#TouchChangedOld
0347 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 770
0348 A200        R     MOV     C,TP
034A 9200        R     MOV     TouchPressedOld,C
                                           ; SOURCE LINE # 772
034C 900000      R     MOV     DPTR,#ret
034F E0                MOVX    A,@DPTR
0350 FF                MOV     R7,A
                                           ; SOURCE LINE # 773
0351         ?C0054:
0351 22                RET     
0352         L?0233:
0352 120000      E     LCALL   _TWabsShort
0355 D3                SETB    C
0356 EF                MOV     A,R7
0357 940A              SUBB    A,#0AH
0359 EE                MOV     A,R6
035A 6480              XRL     A,#080H
035C 9480              SUBB    A,#080H
035E 22                RET     
             ; FUNCTION GetTouch2 (END)

             ; FUNCTION TraceTouch (BEGIN)
                                           ; SOURCE LINE # 783
                                           ; SOURCE LINE # 784
                                           ; SOURCE LINE # 787
0000 C2AF              CLR     SFR_EA
                                           ; SOURCE LINE # 788
0002 A200        E     MOV     C,CpuTouchPressed
0004 9200        R     MOV     TouchPressedOld,C
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 53  

                                           ; SOURCE LINE # 789
0006 900000      E     MOV     DPTR,#CpuTouchX
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B A3                INC     DPTR
000C E0                MOVX    A,@DPTR
000D 900000      R     MOV     DPTR,#TouchX
0010 CF                XCH     A,R7
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 790
0015 900000      E     MOV     DPTR,#CpuTouchY
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A A3                INC     DPTR
001B E0                MOVX    A,@DPTR
001C 900000      R     MOV     DPTR,#TouchY
001F CF                XCH     A,R7
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 791
0024 D2AF              SETB    SFR_EA
                                           ; SOURCE LINE # 795
0026 300005      R     JNB     TouchPressedOld,?C0090
                                           ; SOURCE LINE # 796
0029 300021      E     JNB     CpuTouchPressed,?C0096
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 798
                                           ; SOURCE LINE # 799
                                           ; SOURCE LINE # 800
002C 8003              SJMP    ?C0169
                                           ; SOURCE LINE # 801
                                           ; SOURCE LINE # 803
                                           ; SOURCE LINE # 804
002E         ?C0090:
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 806
002E 30001C      E     JNB     CpuTouchPressed,?C0096
                                           ; SOURCE LINE # 807
0031         ?C0169:
0031 120000      R     LCALL   _TscGetScreenPos
                                           ; SOURCE LINE # 808
0034 900000      R     MOV     DPTR,#PosX
0037 E0                MOVX    A,@DPTR
0038 FC                MOV     R4,A
0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B FD                MOV     R5,A
003C 120000      R     LCALL   L?0175
003F E4                CLR     A
0040 FF                MOV     R7,A
0041 120000      E     LCALL   _FOsdWinScreenXY
                                           ; SOURCE LINE # 809
0044 7B01              MOV     R3,#01H
0046 7D01              MOV     R5,#01H
0048 E4                CLR     A
0049 FF                MOV     R7,A
004A 120000      E     LCALL   _FOsdWinScreenWH
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 54  

                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 811
                                           ; SOURCE LINE # 812
                                           ; SOURCE LINE # 813
                                           ; SOURCE LINE # 814
004D         ?C0096:
004D 22                RET     
             ; FUNCTION TraceTouch (END)

             ; FUNCTION _PrintTouchStatusParam (BEGIN)
                                           ; SOURCE LINE # 826
;---- Variable 'TscStatus' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 827
                                           ; SOURCE LINE # 829
0000 900000      R     MOV     DPTR,#temp
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 869
0005 22                RET     
             ; FUNCTION _PrintTouchStatusParam (END)

             ; FUNCTION _PrintTouchStatus (BEGIN)
                                           ; SOURCE LINE # 873
;---- Variable 'NewTscStatus' assigned to Register 'R5' ----
;---- Variable 'new' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 874
                                           ; SOURCE LINE # 877
;---- Variable 'temp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 883
0000 22                RET     
             ; FUNCTION _PrintTouchStatus (END)

             ; FUNCTION WaitTouchButtonUp (BEGIN)
                                           ; SOURCE LINE # 894
                                           ; SOURCE LINE # 895
                                           ; SOURCE LINE # 896
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_31
0004 7900        R     MOV     R1,#LOW ?SC_31
0006 120000      E     LCALL   _dPuts
0009         ?C0101:
                                           ; SOURCE LINE # 897
                                           ; SOURCE LINE # 898
0009 120000      R     LCALL   GetTouch2
                                           ; SOURCE LINE # 904
000C 7F0A              MOV     R7,#0AH
000E 7E00              MOV     R6,#00H
0010 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 905
0013 900000      R     MOV     DPTR,#TouchStatus
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 6401              XRL     A,#01H
001A 6012              JZ      ?C0100
001C EF                MOV     A,R7
001D 6402              XRL     A,#02H
001F 600D              JZ      ?C0100
0021 EF                MOV     A,R7
0022 6404              XRL     A,#04H
0024 6008              JZ      ?C0100
0026 EF                MOV     A,R7
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 55  

0027 6440              XRL     A,#040H
0029 6003              JZ      ?C0100
002B EF                MOV     A,R7
002C 70DB              JNZ     ?C0101
002E         ?C0100:
                                           ; SOURCE LINE # 910
002E 7BFF              MOV     R3,#0FFH
0030 7A00        R     MOV     R2,#HIGH ?SC_56
0032 7900        R     MOV     R1,#LOW ?SC_56
0034 020000      E     LJMP    _dPuts
             ; FUNCTION WaitTouchButtonUp (END)

             ; FUNCTION _SetTouchStatus (BEGIN)
                                           ; SOURCE LINE # 921
;---- Variable 'ts' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 922
                                           ; SOURCE LINE # 924
0000 900000      R     MOV     DPTR,#TouchStatus
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 6F                XRL     A,R7
0006 6003              JZ      ?C0105
                                           ; SOURCE LINE # 925
                                           ; SOURCE LINE # 926
0008 120000      R     LCALL   L?0243
                                           ; SOURCE LINE # 927
                                           ; SOURCE LINE # 928
000B         ?C0105:
000B 22                RET     
             ; FUNCTION _SetTouchStatus (END)

             ; FUNCTION _TscUpdateStatus (BEGIN)
                                           ; SOURCE LINE # 932
;---- Variable 'TscStat' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 933
                                           ; SOURCE LINE # 935
0000 900000      R     MOV     DPTR,#TouchStatus
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 6F                XRL     A,R7
0006 6003              JZ      ?C0107
                                           ; SOURCE LINE # 936
                                           ; SOURCE LINE # 937
0008 120000      R     LCALL   L?0243
                                           ; SOURCE LINE # 938
                                           ; SOURCE LINE # 939
000B         ?C0107:
000B 22                RET     
             ; FUNCTION _TscUpdateStatus (END)

             ; FUNCTION _SetLastTouchStatus (BEGIN)
                                           ; SOURCE LINE # 943
;---- Variable 'ts' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 944
                                           ; SOURCE LINE # 946
0000 900000      R     MOV     DPTR,#LastTouchStatus
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 947
0005 22                RET     
             ; FUNCTION _SetLastTouchStatus (END)

C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 56  

             ; FUNCTION _SaveCalibDataToEE (BEGIN)
                                           ; SOURCE LINE # 962
;---- Variable 'flag' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 963
                                           ; SOURCE LINE # 967
0000 EF                MOV     A,R7
0001 7030              JNZ     ?C0109
                                           ; SOURCE LINE # 968
0003 900000      R     MOV     DPTR,#i
0006 F0                MOVX    @DPTR,A
0007         ?C0110:
                                           ; SOURCE LINE # 969
0007 900000      R     MOV     DPTR,#i
000A E0                MOVX    A,@DPTR
000B FE                MOV     R6,A
000C 120000      R     LCALL   L?0231
000F FC                MOV     R4,A
0010 7401              MOV     A,#01H
0012 93                MOVC    A,@A+DPTR
0013 FD                MOV     R5,A
0014 EE                MOV     A,R6
0015 120000      R     LCALL   L?0200
                                           ; SOURCE LINE # 970
0018 120000      R     LCALL   L?0218
001B FE                MOV     R6,A
001C 120000      R     LCALL   L?0232
001F FC                MOV     R4,A
0020 7401              MOV     A,#01H
0022 93                MOVC    A,@A+DPTR
0023 FD                MOV     R5,A
0024 EE                MOV     A,R6
0025 120000      R     LCALL   L?0205
                                           ; SOURCE LINE # 971
0028 120000      R     LCALL   L?0218
002B 04                INC     A
002C F0                MOVX    @DPTR,A
002D E0                MOVX    A,@DPTR
002E B405D6            CJNE    A,#05H,?C0110
0031 8032              SJMP    ?C0113
                                           ; SOURCE LINE # 972
0033         ?C0109:
                                           ; SOURCE LINE # 973
0033 EF                MOV     A,R7
0034 6401              XRL     A,#01H
0036 702D              JNZ     ?C0113
                                           ; SOURCE LINE # 974
0038 900000      R     MOV     DPTR,#i
003B F0                MOVX    @DPTR,A
003C         ?C0115:
                                           ; SOURCE LINE # 975
003C 900000      R     MOV     DPTR,#i
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 120000      R     LCALL   L?0237
0044 E0                MOVX    A,@DPTR
0045 FC                MOV     R4,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 FD                MOV     R5,A
0049 EF                MOV     A,R7
004A 120000      R     LCALL   L?0200
                                           ; SOURCE LINE # 976
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 57  

004D 120000      R     LCALL   L?0219
0050 FF                MOV     R7,A
0051 120000      R     LCALL   L?0238
0054 E0                MOVX    A,@DPTR
0055 FC                MOV     R4,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 FD                MOV     R5,A
0059 120000      R     LCALL   L?0204
                                           ; SOURCE LINE # 977
005C 120000      R     LCALL   L?0219
005F 04                INC     A
0060 F0                MOVX    @DPTR,A
0061 E0                MOVX    A,@DPTR
0062 B405D7            CJNE    A,#05H,?C0115
                                           ; SOURCE LINE # 978
0065         ?C0113:
                                           ; SOURCE LINE # 980
0065 E4                CLR     A
0066 900000      R     MOV     DPTR,#i
0069 F0                MOVX    @DPTR,A
006A         ?C0118:
                                           ; SOURCE LINE # 981
006A 900000      R     MOV     DPTR,#i
006D 120000      R     LCALL   L?0199
                                           ; SOURCE LINE # 982
0070 120000      R     LCALL   L?0222
0073 2480              ADD     A,#080H
                                           ; SOURCE LINE # 983
0075 120000      R     LCALL   L?0213
0078 75F002            MOV     B,#02H
007B A4                MUL     AB
007C 2481              ADD     A,#081H
                                           ; SOURCE LINE # 984
007E 120000      R     LCALL   L?0216
0081 C3                CLR     C
0082 9405              SUBB    A,#05H
0084 40E4              JC      ?C0118
0086         ?C0119:
                                           ; SOURCE LINE # 985
0086 E4                CLR     A
0087 900000      R     MOV     DPTR,#i
008A F0                MOVX    @DPTR,A
008B         ?C0121:
                                           ; SOURCE LINE # 986
008B 900000      R     MOV     DPTR,#i
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
0090 120000      R     LCALL   L?0205
                                           ; SOURCE LINE # 987
0093 120000      R     LCALL   L?0222
0096 248A              ADD     A,#08AH
                                           ; SOURCE LINE # 988
0098 120000      R     LCALL   L?0213
009B 75F002            MOV     B,#02H
009E A4                MUL     AB
009F 248B              ADD     A,#08BH
                                           ; SOURCE LINE # 989
00A1 120000      R     LCALL   L?0216
00A4 C3                CLR     C
00A5 9405              SUBB    A,#05H
00A7 40E2              JC      ?C0121
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 58  

                                           ; SOURCE LINE # 990
00A9         ?C0124:
00A9 22                RET     
00AA         L?0213:
00AA FF                MOV     R7,A
00AB E4                CLR     A
00AC 35F0              ADDC    A,B
00AE FE                MOV     R6,A
00AF 900000      R     MOV     DPTR,#value
00B2 E0                MOVX    A,@DPTR
00B3 FD                MOV     R5,A
00B4 120000      E     LCALL   _EE_Write
00B7 900000      R     MOV     DPTR,#i
00BA E0                MOVX    A,@DPTR
00BB 22                RET     
00BC         L?0216:
00BC FF                MOV     R7,A
00BD E4                CLR     A
00BE 35F0              ADDC    A,B
00C0 FE                MOV     R6,A
00C1 A3                INC     DPTR
00C2 A3                INC     DPTR
00C3 E0                MOVX    A,@DPTR
00C4 FD                MOV     R5,A
00C5 120000      E     LCALL   _EE_Write
00C8 900000      R     MOV     DPTR,#i
00CB E0                MOVX    A,@DPTR
00CC 04                INC     A
00CD F0                MOVX    @DPTR,A
00CE E0                MOVX    A,@DPTR
00CF 22                RET     
             ; FUNCTION _SaveCalibDataToEE (END)

             ; FUNCTION ReadCalibDataFromEE (BEGIN)
                                           ; SOURCE LINE # 994
                                           ; SOURCE LINE # 995
                                           ; SOURCE LINE # 999
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#i
0004 F0                MOVX    @DPTR,A
0005         ?C0125:
0005 900000      R     MOV     DPTR,#i
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A C3                CLR     C
000B 9405              SUBB    A,#05H
000D 5017              JNC     ?C0126
                                           ; SOURCE LINE # 1000
000F EF                MOV     A,R7
0010 75F002            MOV     B,#02H
0013 A4                MUL     AB
0014 2480              ADD     A,#080H
                                           ; SOURCE LINE # 1001
                                           ; SOURCE LINE # 1002
0016 120000      R     LCALL   L?0208
0019 2481              ADD     A,#081H
                                           ; SOURCE LINE # 1003
001B 120000      R     LCALL   L?0197
001E 120000      R     LCALL   L?0200
                                           ; SOURCE LINE # 1004
0021 120000      R     LCALL   L?0239
0024 80DF              SJMP    ?C0125
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 59  

0026         ?C0126:
                                           ; SOURCE LINE # 1005
0026 E4                CLR     A
0027 900000      R     MOV     DPTR,#i
002A F0                MOVX    @DPTR,A
002B         ?C0128:
002B 900000      R     MOV     DPTR,#i
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 C3                CLR     C
0031 9405              SUBB    A,#05H
0033 5017              JNC     ?C0131
                                           ; SOURCE LINE # 1006
0035 EF                MOV     A,R7
0036 75F002            MOV     B,#02H
0039 A4                MUL     AB
003A 248A              ADD     A,#08AH
                                           ; SOURCE LINE # 1007
                                           ; SOURCE LINE # 1008
003C 120000      R     LCALL   L?0208
003F 248B              ADD     A,#08BH
                                           ; SOURCE LINE # 1009
0041 120000      R     LCALL   L?0197
0044 120000      R     LCALL   L?0205
                                           ; SOURCE LINE # 1010
0047 120000      R     LCALL   L?0239
004A 80DF              SJMP    ?C0128
                                           ; SOURCE LINE # 1011
004C         ?C0131:
004C 22                RET     
004D         L?0197:
004D FF                MOV     R7,A
004E E4                CLR     A
004F 35F0              ADDC    A,B
0051 FE                MOV     R6,A
0052 120000      E     LCALL   _EE_Read
0055 900000      R     MOV     DPTR,#value
0058 E0                MOVX    A,@DPTR
0059 FE                MOV     R6,A
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C 4F                ORL     A,R7
005D FF                MOV     R7,A
005E 900000      R     MOV     DPTR,#value
0061 EE                MOV     A,R6
0062 F0                MOVX    @DPTR,A
0063 FE                MOV     R6,A
0064 A3                INC     DPTR
0065 EF                MOV     A,R7
0066 F0                MOVX    @DPTR,A
0067 900000      R     MOV     DPTR,#i
006A E0                MOVX    A,@DPTR
006B 22                RET     
006C         L?0208:
006C FF                MOV     R7,A
006D E4                CLR     A
006E 35F0              ADDC    A,B
0070 FE                MOV     R6,A
0071 120000      E     LCALL   _EE_Read
0074 900000      R     MOV     DPTR,#value
0077 E4                CLR     A
0078 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 60  

0079 A3                INC     DPTR
007A EF                MOV     A,R7
007B F0                MOVX    @DPTR,A
007C E0                MOVX    A,@DPTR
007D F8                MOV     R0,A
007E E4                CLR     A
007F F0                MOVX    @DPTR,A
0080 E8                MOV     A,R0
0081 900000      R     MOV     DPTR,#value
0084 F0                MOVX    @DPTR,A
0085 900000      R     MOV     DPTR,#i
0088 E0                MOVX    A,@DPTR
0089 75F002            MOV     B,#02H
008C A4                MUL     AB
008D 22                RET     
             ; FUNCTION ReadCalibDataFromEE (END)

             ; FUNCTION PrintCalibData (BEGIN)
                                           ; SOURCE LINE # 1018
                                           ; SOURCE LINE # 1019
                                           ; SOURCE LINE # 1022
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_64
0004 7900        R     MOV     R1,#LOW ?SC_64
0006 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1023
0009 7A00        R     MOV     R2,#HIGH ?SC_80
000B 7900        R     MOV     R1,#LOW ?SC_80
                                           ; SOURCE LINE # 1024
000D 120000      R     LCALL   L?0223
0010         ?C0132:
                                           ; SOURCE LINE # 1025
0010 120000      R     LCALL   L?0246
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 120000      R     LCALL   L?0231
0018 FD                MOV     R5,A
0019 7401              MOV     A,#01H
001B 93                MOVC    A,@A+DPTR
001C 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
001F CD                XCH     A,R5
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
0022 ED                MOV     A,R5
0023 F0                MOVX    @DPTR,A
0024 EF                MOV     A,R7
0025 120000      R     LCALL   L?0232
0028 FF                MOV     R7,A
0029 7401              MOV     A,#01H
002B 93                MOVC    A,@A+DPTR
                                           ; SOURCE LINE # 1026
002C 120000      R     LCALL   L?0220
002F 40DF              JC      ?C0132
0031         ?C0133:
                                           ; SOURCE LINE # 1027
0031 7A00        R     MOV     R2,#HIGH ?SC_97
0033 7900        R     MOV     R1,#LOW ?SC_97
                                           ; SOURCE LINE # 1028
0035 120000      R     LCALL   L?0223
0038         ?C0135:
                                           ; SOURCE LINE # 1029
0038 120000      R     LCALL   L?0246
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 61  

003B 120000      R     LCALL   L?0199
003E E0                MOVX    A,@DPTR
003F FD                MOV     R5,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0045 CD                XCH     A,R5
0046 F0                MOVX    @DPTR,A
0047 A3                INC     DPTR
0048 ED                MOV     A,R5
0049 F0                MOVX    @DPTR,A
004A 120000      R     LCALL   L?0204
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F A3                INC     DPTR
0050 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 1030
0051 120000      R     LCALL   L?0220
0054 40E2              JC      ?C0135
0056         ?C0136:
                                           ; SOURCE LINE # 1031
0056 7BFF              MOV     R3,#0FFH
0058 7A00        R     MOV     R2,#HIGH ?SC_107
005A 7900        R     MOV     R1,#LOW ?SC_107
005C 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1032
005F E4                CLR     A
0060 900000      R     MOV     DPTR,#i
0063 F0                MOVX    @DPTR,A
0064         ?C0138:
0064 900000      R     MOV     DPTR,#i
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 C3                CLR     C
006A 9405              SUBB    A,#05H
006C 5030              JNC     ?C0141
                                           ; SOURCE LINE # 1034
006E EF                MOV     A,R7
006F 75F002            MOV     B,#02H
0072 A4                MUL     AB
0073 2480              ADD     A,#080H
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1036
0075 120000      R     LCALL   L?0198
0078 2481              ADD     A,#081H
007A 120000      R     LCALL   L?0217
                                           ; SOURCE LINE # 1037
007D 7A00        R     MOV     R2,#HIGH ?SC_117
007F 7900        R     MOV     R1,#LOW ?SC_117
                                           ; SOURCE LINE # 1038
0081 120000      R     LCALL   L?0209
0084 75F002            MOV     B,#02H
0087 A4                MUL     AB
0088 248A              ADD     A,#08AH
                                           ; SOURCE LINE # 1039
                                           ; SOURCE LINE # 1040
008A 120000      R     LCALL   L?0198
008D 248B              ADD     A,#08BH
008F 120000      R     LCALL   L?0217
                                           ; SOURCE LINE # 1041
0092 7A00        R     MOV     R2,#HIGH ?SC_121
0094 7900        R     MOV     R1,#LOW ?SC_121
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 62  

                                           ; SOURCE LINE # 1042
0096 120000      R     LCALL   L?0209
0099 04                INC     A
009A F0                MOVX    @DPTR,A
009B 020000      R     LJMP    ?C0138
                                           ; SOURCE LINE # 1043
009E         ?C0141:
009E 22                RET     
009F         L?0198:
009F FF                MOV     R7,A
00A0 E4                CLR     A
00A1 35F0              ADDC    A,B
00A3 FE                MOV     R6,A
00A4 120000      E     LCALL   _EE_Read
00A7 900000      R     MOV     DPTR,#value
00AA E4                CLR     A
00AB F0                MOVX    @DPTR,A
00AC A3                INC     DPTR
00AD EF                MOV     A,R7
00AE F0                MOVX    @DPTR,A
00AF E0                MOVX    A,@DPTR
00B0 F8                MOV     R0,A
00B1 E4                CLR     A
00B2 F0                MOVX    @DPTR,A
00B3 E8                MOV     A,R0
00B4 900000      R     MOV     DPTR,#value
00B7 F0                MOVX    @DPTR,A
00B8 900000      R     MOV     DPTR,#i
00BB E0                MOVX    A,@DPTR
00BC 75F002            MOV     B,#02H
00BF A4                MUL     AB
00C0 22                RET     
00C1         L?0209:
00C1 7BFF              MOV     R3,#0FFH
00C3 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
00C6 EE                MOV     A,R6
00C7 F0                MOVX    @DPTR,A
00C8 A3                INC     DPTR
00C9 EF                MOV     A,R7
00CA F0                MOVX    @DPTR,A
00CB 120000      E     LCALL   _Printf
00CE 900000      R     MOV     DPTR,#i
00D1 E0                MOVX    A,@DPTR
00D2 22                RET     
00D3         L?0217:
00D3 FF                MOV     R7,A
00D4 E4                CLR     A
00D5 35F0              ADDC    A,B
00D7 FE                MOV     R6,A
00D8 120000      E     LCALL   _EE_Read
00DB 900000      R     MOV     DPTR,#value
00DE E0                MOVX    A,@DPTR
00DF FE                MOV     R6,A
00E0 A3                INC     DPTR
00E1 E0                MOVX    A,@DPTR
00E2 4F                ORL     A,R7
00E3 FF                MOV     R7,A
00E4 900000      R     MOV     DPTR,#value
00E7 EE                MOV     A,R6
00E8 F0                MOVX    @DPTR,A
00E9 FE                MOV     R6,A
00EA A3                INC     DPTR
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 63  

00EB EF                MOV     A,R7
00EC F0                MOVX    @DPTR,A
00ED 22                RET     
00EE         L?0220:
00EE 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
00F1 CF                XCH     A,R7
00F2 F0                MOVX    @DPTR,A
00F3 A3                INC     DPTR
00F4 EF                MOV     A,R7
00F5 F0                MOVX    @DPTR,A
00F6 120000      E     LCALL   _Printf
00F9 900000      R     MOV     DPTR,#i
00FC E0                MOVX    A,@DPTR
00FD 04                INC     A
00FE F0                MOVX    @DPTR,A
00FF E0                MOVX    A,@DPTR
0100 C3                CLR     C
0101 9405              SUBB    A,#05H
0103 22                RET     
0104         L?0223:
0104 7BFF              MOV     R3,#0FFH
0106 120000      E     LCALL   _Puts
0109 E4                CLR     A
010A 900000      R     MOV     DPTR,#i
010D F0                MOVX    @DPTR,A
010E 22                RET     
             ; FUNCTION PrintCalibData (END)

             ; FUNCTION _CalibTouch (BEGIN)
                                           ; SOURCE LINE # 1052
0000 900000      R     MOV     DPTR,#n
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1053
                                           ; SOURCE LINE # 1064
0005 120000      R     LCALL   GetTouch2
                                           ; SOURCE LINE # 1066
0008 A200        E     MOV     C,CpuTouchPressed
000A 9200        R     MOV     TouchPressedOld,C
                                           ; SOURCE LINE # 1067
000C 900000      R     MOV     DPTR,#CalibX
000F 120000      E     LCALL   ?C?LSTKXDATA
0012 00                DB      00H
0013 00                DB      00H
0014 00                DB      00H
0015 00                DB      00H
                                           ; SOURCE LINE # 1068
0016 900000      R     MOV     DPTR,#CalibY
0019 120000      E     LCALL   ?C?LSTKXDATA
001C 00                DB      00H
001D 00                DB      00H
001E 00                DB      00H
001F 00                DB      00H
                                           ; SOURCE LINE # 1069
0020 E4                CLR     A
0021 900000      R     MOV     DPTR,#count
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 F0                MOVX    @DPTR,A
0027         ?C0142:
                                           ; SOURCE LINE # 1071
0027 C3                CLR     C
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 64  

0028 900000      R     MOV     DPTR,#count+01H
002B E0                MOVX    A,@DPTR
002C 9464              SUBB    A,#064H
002E 900000      R     MOV     DPTR,#count
0031 E0                MOVX    A,@DPTR
0032 9400              SUBB    A,#00H
0034 505E              JNC     ?C0143
                                           ; SOURCE LINE # 1076
0036 900000      E     MOV     DPTR,#CpuTouchChanged
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B 900000      R     MOV     DPTR,#TouchChangedOld
003E E0                MOVX    A,@DPTR
003F 6F                XRL     A,R7
0040 60E5              JZ      ?C0142
0042         ?C0144:
                                           ; SOURCE LINE # 1077
0042 A200        E     MOV     C,CpuTouchPressed
0044 9200        R     MOV     TouchPressedOld,C
                                           ; SOURCE LINE # 1078
0046 120000      R     LCALL   GetTouch2
                                           ; SOURCE LINE # 1080
0049 30003E      R     JNB     TouchPressedOld,?C0145
                                           ; SOURCE LINE # 1081
004C 300035      E     JNB     CpuTouchPressed,?C0146
                                           ; SOURCE LINE # 1082
004F 900000      R     MOV     DPTR,#CalibX
0052 120000      R     LCALL   L?0174
0055 900000      R     MOV     DPTR,#TouchX
0058 120000      R     LCALL   L?0212
005B 900000      R     MOV     DPTR,#CalibX
005E 120000      R     LCALL   L?0221
                                           ; SOURCE LINE # 1083
0061 900000      R     MOV     DPTR,#CalibY
0064 120000      R     LCALL   L?0174
0067 900000      R     MOV     DPTR,#TouchY
006A 120000      R     LCALL   L?0212
006D 900000      R     MOV     DPTR,#CalibY
0070 120000      R     LCALL   L?0221
                                           ; SOURCE LINE # 1084
0073 900000      R     MOV     DPTR,#count+01H
0076 E0                MOVX    A,@DPTR
0077 04                INC     A
0078 F0                MOVX    @DPTR,A
0079 70AC              JNZ     ?C0142
007B 900000      R     MOV     DPTR,#count
007E E0                MOVX    A,@DPTR
007F 04                INC     A
0080 F0                MOVX    @DPTR,A
0081         ?C0155:
                                           ; SOURCE LINE # 1085
0081 020000      R     LJMP    ?C0142
0084         ?C0146:
                                           ; SOURCE LINE # 1086
                                           ; SOURCE LINE # 1087
0084 A200        E     MOV     C,CpuTouchPressed
0086 9200        R     MOV     TouchPressedOld,C
                                           ; SOURCE LINE # 1089
0088 800A              SJMP    ?C0143
                                           ; SOURCE LINE # 1090
                                           ; SOURCE LINE # 1091
008A         ?C0145:
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 65  

                                           ; SOURCE LINE # 1092
                                           ; SOURCE LINE # 1093
008A 30009A      E     JNB     CpuTouchPressed,?C0142
                                           ; SOURCE LINE # 1095
008D A200        E     MOV     C,CpuTouchPressed
008F 9200        R     MOV     TouchPressedOld,C
                                           ; SOURCE LINE # 1096
0091 020000      R     LJMP    ?C0142
                                           ; SOURCE LINE # 1097
                                           ; SOURCE LINE # 1098
                                           ; SOURCE LINE # 1099
                                           ; SOURCE LINE # 1100
0094         ?C0143:
                                           ; SOURCE LINE # 1101
0094 900000      R     MOV     DPTR,#CalibX
0097 120000      R     LCALL   L?0179
009A C006              PUSH    AR6
009C C007              PUSH    AR7
009E 900000      R     MOV     DPTR,#count
00A1 120000      R     LCALL   L?0244
00A4 D007              POP     AR7
00A6 D006              POP     AR6
00A8 120000      E     LCALL   ?C?ULDIV
00AB 900000      R     MOV     DPTR,#CalibX
00AE 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1102
00B1 900000      R     MOV     DPTR,#CalibY
00B4 120000      R     LCALL   L?0179
00B7 C006              PUSH    AR6
00B9 C007              PUSH    AR7
00BB A3                INC     DPTR
00BC 120000      R     LCALL   L?0244
00BF D007              POP     AR7
00C1 D006              POP     AR6
00C3 120000      E     LCALL   ?C?ULDIV
00C6 900000      R     MOV     DPTR,#CalibY
00C9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1104
00CC 900000      R     MOV     DPTR,#CalibX
00CF A3                INC     DPTR
00D0 120000      R     LCALL   L?0180
00D3 900000      R     MOV     DPTR,#n
00D6 E0                MOVX    A,@DPTR
00D7 FB                MOV     R3,A
00D8 120000      R     LCALL   L?0237
00DB EE                MOV     A,R6
00DC F0                MOVX    @DPTR,A
00DD A3                INC     DPTR
00DE EF                MOV     A,R7
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1105
00E0 900000      R     MOV     DPTR,#CalibY
00E3 A3                INC     DPTR
00E4 120000      R     LCALL   L?0180
00E7 EB                MOV     A,R3
00E8 120000      R     LCALL   L?0238
00EB EE                MOV     A,R6
00EC F0                MOVX    @DPTR,A
00ED A3                INC     DPTR
00EE EF                MOV     A,R7
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1110
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 66  

00F0 22                RET     
             ; FUNCTION _CalibTouch (END)

             ; FUNCTION TouchDump (BEGIN)
                                           ; SOURCE LINE # 1117
                                           ; SOURCE LINE # 1118
                                           ; SOURCE LINE # 1119
0000 22                RET     
             ; FUNCTION TouchDump (END)

C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 67  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TouchBottom. . . . . . . . . . . . . .  PUBLIC   XDATA  INT      0000H  2
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
TouchPressedOld. . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
TouchRight . . . . . . . . . . . . . .  PUBLIC   XDATA  INT      0002H  2
CpuTouchX. . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
CpuTouchY. . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
PosX . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    0004H  2
CpuTouchPressed. . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
keytic . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0000H  1
PosY . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    0006H  2
TraceAuto. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
TouchStatus. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0008H  1
st_animation . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  53
  active . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  current. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  speed. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  vcnt . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  srcx . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000DH  20
  srcy . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0021H  20
RepeatKey. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0002H  1
veloX. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_LONG   0009H  4
TouchZ1. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    000DH  2
veloY. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_LONG   000FH  4
TouchZ2. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    0013H  2
_dPuts . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TouchLeft. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    0015H  2
_PrintTouchStatusParam . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  TscStatus. . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
SFR_ET1. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
SFR_TH1. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
_TscUpdateStatus . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  TscStat. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
InitTouch. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
SFR_TL1. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
TouchDump. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_PrintTouchStatus. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  new. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  NewTscStatus . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
TouchAuto. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0003H  1
KeyReady . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0004H  1
_FOsdWinScreenWH . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_delay1ms. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LastTouchStatus. . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0017H  1
Key. . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0001H  1
OldPosX. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    0018H  2
Def_TouchCalibX. . . . . . . . . . . .  PUBLIC   CODE   ARRAY    007DH  10
OldPosY. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    001AH  2
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Def_TouchCalibY. . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0087H  10
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 68  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CalibDataX . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    001CH  10
CalibDataY . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0026H  10
SFR_EINT6. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
_FOsdWinScreenXY . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
Temp_TouchCalibX . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0030H  10
tsc_debug. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0005H  1
_PCMODEDATA. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  han. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  van. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  vfreq. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  htotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  vtotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  hsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  vsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  offseth. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0010H  2
  offsetv. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0012H  2
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  dummy2 . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  dummy3 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0018H  1
Temp_TouchCalibY . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    003AH  10
TouchTop . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    0044H  2
_SetTraceAuto. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  on . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_SaveCalibDataToEE . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  flag . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  value. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
TouchCalibX. . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0046H  10
_SetTouchStatus. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ts . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
TouchCalibY. . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0050H  10
ReadKeyPad . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  j. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  min. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  max. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  key_in . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
TouchCenterX . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    005AH  2
TouchCenterY . . . . . . . . . . . . .  PUBLIC   XDATA  INT      005CH  2
_TscGetScreenPos . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  calcX. . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
  calcY. . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0004H  4
_GetKey. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  repeat . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CpuAUX3. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
TscTimeStart . . . . . . . . . . . . .  PUBLIC   XDATA  U_LONG   005EH  4
_RLE_HEADER. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  id . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 69  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  cp . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bmp. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
CpuTouchStep . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_SetTouchAuto. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  on . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SPIIMAGE . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  top. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  bottom . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
SFR_EA . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
_SetLastTouchStatus. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ts . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
TouchChangedOld. . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0062H  1
TscTimeEnd . . . . . . . . . . . . . .  PUBLIC   XDATA  U_LONG   0063H  4
CpuTouchSkipCount. . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
SLIDEIMAGE . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
GetTouch2. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  movX . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0001H  2
  movY . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0003H  2
  TC . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  TP . . . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  dt_start . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0006H  4
  dt_end . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   000AH  4
  TscTimeCurr. . . . . . . . . . . . .  AUTO     XDATA  U_LONG   000EH  4
  new_status . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0012H  1
  LABEL_TP11 . . . . . . . . . . . . .  LABEL    CODE   LABEL    -----  -----
_dPrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CpuAUX3_Changed. . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
regTW88. . . . . . . . . . . . . . . .  EXTERN   DATA   PTR      -----  2
TouchX . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    0067H  2
CpuTouchChanged. . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
TouchY . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    0069H  2
KeyPadMap. . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    006BH  8
TscHwReady . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0073H  1
_CalibTouch. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  TouchPressedOld. . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  CalibX . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0001H  4
  CalibY . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0005H  4
  count. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0009H  2
WaitTouchButtonUp. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
FONT_SPI_INFO_s. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
C51 COMPILER V9.00   TOUCHKEY                                                              05/31/2013 20:18:30 PAGE 70  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
FONT_SPI_INFO_t. . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
_EE_Read . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
StartX . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    0074H  2
StartY . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    0076H  2
PrintCalibData . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  value. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
TscTimeLastEnd . . . . . . . . . . . .  PUBLIC   XDATA  U_LONG   0078H  4
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_TWabsShort. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TraceTouch . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  TouchPressedOld. . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
_EE_Write. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SystemClock. . . . . . . . . . . . . .  EXTERN   DATA   U_LONG   -----  4
ReadCalibDataFromEE. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  value. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3658    ----
   CONSTANT SIZE    =    145    ----
   XDATA SIZE       =    124      55
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
