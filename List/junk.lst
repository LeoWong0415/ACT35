C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE JUNK
OBJECT MODULE PLACED IN .\Output\junk.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE junk.c LARGE OPTIMIZE(9,SPEED) REGFILE(.\Output\TW8835_REV31.ORC) BROWSE MO
                    -DDP2 DEFINE(EVB_30,EVB_31,nullFn=//) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\List\junk.lst) OBJECT(.\Output\junk.obj)

line level    source

   1          /**
   2           * @file
   3           * junk.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *      Copyright (C) 2011~2012 Intersil Corporation
   8           * @section DESCRIPTION
   9           *      junk yard
  10          */
  11          
  12          #if 0
              /*BKFYI. 
              If you want to execute the code at the end of code area, add this dummy code.
              It will add a big blank code at the front of code area.
              */
              code BYTE dummy_code[1023*5] = {
              };
              #endif
  20          
  21          #if 0 //==============================
              #ifdef I2C_ASSEMBLER
              static void I2CWriteData(BYTE value)
              {
                      //BYTE error;
              
                      I2CD = value;
              
              #pragma asm
              ;----------------
              ;
              ;----------------
              ;       clr EA
              
                      clr     I2C_SCL
                      mov     c, I2CD7
                      mov I2C_SDA, c
                      lcall ddH0      ;;;
                      setb I2C_SCL
                      lcall ddH
              
                      clr     I2C_SCL
                      mov     c, I2CD6
                      mov I2C_SDA, c
                      lcall ddH0      ;;;
                      setb I2C_SCL
                      lcall ddH
              
                      clr     I2C_SCL
                      mov     c, I2CD5
                      mov I2C_SDA, c
                      lcall ddH0      ;;;
                      setb I2C_SCL
                      lcall ddH
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 2   

              
                      clr     I2C_SCL
                      mov     c, I2CD4
                      mov I2C_SDA, c
                      lcall ddH0      ;;;
                      setb I2C_SCL
                      lcall ddH
              
                      clr     I2C_SCL
                      mov     c, I2CD3
                      mov I2C_SDA, c
                      lcall ddH0      ;;;
                      setb I2C_SCL
                      lcall ddH
              
                      clr     I2C_SCL
                      mov     c, I2CD2
                      mov I2C_SDA, c
                      lcall ddH0      ;;;
                      setb I2C_SCL
                      lcall ddH
              
                      clr     I2C_SCL
                      mov     c, I2CD1
                      mov I2C_SDA, c
                      lcall ddH0      ;;;
                      setb I2C_SCL
                      lcall ddH
              
                      clr     I2C_SCL
                      mov     c, I2CD0
                      mov I2C_SDA, c
                      lcall ddH0      ;;;
                      setb I2C_SCL
                      lcall ddH
              
              ;----------------
              ;
              ;----------------
              ;       setb EA
              
              #pragma endasm
              
                      I2C_SCL=0;      ddH();
                      I2C_SDA = 1;    //listen for ACK
              
                      I2C_SCL=1;      ddH();
                      I2C_SCL=0;
              }
              #endif //..#ifdef I2C_ASSEMBLER
              #ifdef I2C_ASSEMBLER
              static BYTE I2CReadData(BYTE fLast)
              {
                      I2C_SDA = 1;
              
              #pragma asm
              
              ;       clr             EA
              
                      clr             I2C_SCL
                      lcall   ddH
                      setb    I2C_SCL
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 3   

                      lcall   ddH
                      mov             c, I2C_SDA
                      mov             I2CD7, c
              
                      clr             I2C_SCL
                      lcall   ddH
                      setb    I2C_SCL
                      lcall   ddH
                      mov             c, I2C_SDA
                      mov             I2CD6, c
              
                      clr             I2C_SCL
                      lcall   ddH
                      setb    I2C_SCL
                      lcall   ddH
                      mov             c, I2C_SDA
                      mov             I2CD5, c
              
                      clr             I2C_SCL
                      lcall   ddH
                      setb    I2C_SCL
                      lcall   ddH
                      mov             c, I2C_SDA
                      mov             I2CD4, c
              
                      clr             I2C_SCL
                      lcall   ddH
                      setb    I2C_SCL
                      lcall   ddH
                      mov             c, I2C_SDA
                      mov             I2CD3, c
              
                      clr             I2C_SCL
                      lcall   ddH
                      setb    I2C_SCL
                      lcall   ddH
                      mov             c, I2C_SDA
                      mov             I2CD2, c
              
                      clr             I2C_SCL
                      lcall   ddH
                      setb    I2C_SCL
                      lcall   ddH
                      mov             c, I2C_SDA
                      mov             I2CD1, c
              
                      clr             I2C_SCL
                      lcall   ddH
                      setb    I2C_SCL
                      lcall   ddH
                      mov             c, I2C_SDA
                      mov             I2CD0, c
              
              ;       setb    EA
              
              #pragma endasm
              
                      I2C_SCL=1;      ddH();
                      I2C_SCL=0;
              
                      //return I2CD;
              }
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 4   

              #endif //..#ifdef I2C_ASSEMBLER
              #endif //======================================================
 181          //===================JUNK CODE============================
 182          
 183          #ifdef UNCALLED_CODE
              void HDMIPowerDown(void)
              {
                      ReadI2CByte(I2CID_EP9351,EP9351_General_Control_0, ReadI2C(I2CID_EP9351,EP9351_General_Control_0) |0x04);
                      delay1ms(500);
              }
              #endif
 190          
 191          // call from CheckAndSetHDMI
 192          //BKTODO:Remove it.
 193          #if 0
              BYTE CheckAndSet_EP9351(void)
              {
                      volatile BYTE vTemp;
                      BYTE TempByte[20];
                      BYTE i;
              
              #if 0
                      //Hot Boot needs Soft Reset.  TODO:Need Verify. I don't know why it need.
                      bTemp = ReadI2C(I2CID_EP9351, EP9351_Status_Register_0 );
                      if ( (bTemp & 0x1C) != 0x1C ) {
                              Printf("\nEP9351 $%bx read:%bx. Do SWReset",EP9351_Status_Register_0,bTemp);
                              bTemp = ReadI2C(I2CID_EP9351,EP9351_General_Control_0);
                              bTemp |= EP9351_General_Control_0__PWR_DWN;
                              ReadI2CByte(I2CID_EP9351,EP9351_General_Control_0, bTemp);                              // set to 0x40, Soft reset
                              delay1ms(500);
                              bTemp &= ~EP9351_General_Control_0__PWR_DWN;
                              ReadI2CByte(I2CID_EP9351,EP9351_General_Control_0, bTemp);                              // set to NORMAL
                              Printf("=>read:%bx",ReadI2C(I2CID_EP9351, EP9351_Status_Register_0 ));
                      }
              #endif
                      ReadI2CByte(I2CID_EP9351, EP9351_General_Control_1, ReadI2C(I2CID_EP9351,EP9351_General_Control_1) );           //
             - make Positive polarity always
                      ReadI2CByte(I2CID_EP9351, EP9351_General_Control_9, 0x01);                              // enable EQ_GAIN
              
                      for(i=0; i < 100; i++) {
                              delay1ms(10);
                              vTemp = ReadI2C(I2CID_EP9351,EP9351_Status_Register_0);
                              if(vTemp)
                                      Printf("\n%bd:check status : %bx",i,vTemp);
              
                              vTemp = ReadI2C(I2CID_EP9351,EP9351_HDMI_INT);
                              if((vTemp & EP9351_HDMI_INT__AVI)) {
                                      //Printf("\ncheck INT end : %bd",i);
                                      break;
                              }
                      }
                      if(i==100) {
                              Printf("\nCheckAndSet_EP9351 FAIL");
                              return ERR_FAIL;        //NO AVI_F
                      }
              
              
                      Printf("\nInit_HDMI read %bx:%bx @%bd",EP9351_HDMI_INT,vTemp,i);
              
                      //read AVI InfoFrame at 0x2A
                      ReadI2C(I2CID_EP9351, EP9351_AVI_InfoFrame, TempByte, 15);
                      DBG_PrintAviInfoFrame();
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 5   

              
                      //color convert to RGB
                      Puts("\nInput HDMI format ");
                      i = (TempByte[2] & 0x60) >> 5;
                      if(i == 0)      {
                              Puts("RGB");
                              ReadI2CByte(I2CID_EP9351, EP9351_General_Control_2, 0x00 ); //0x42
                      }
                      else if (i==1)          {
                              Puts("YUV(422)");
                              ReadI2CByte(I2CID_EP9351, EP9351_General_Control_2, 0x50 );
                      }
                      else if (i==2)          {
                              Puts("YUV(444)");
                              ReadI2CByte(I2CID_EP9351, EP9351_General_Control_2, 0x10 );
                      }
              
                      //dump control register
                      Puts("\nEP9351 General Control:");
                      for(i=0; i < 10; i++) {
                              Printf("%2bx ",ReadI2C(I2CID_EP9351,0x40+i));
                      }
              
                      ReadI2CByte(I2CID_EP9351,EP9351_General_Control_9, 0x09);                               // enable EQ_GAIN. use 40uA PUMP.
                      Printf( "=>%02bx", ReadI2C(I2CID_EP9351,EP9351_General_Control_9) );
              
              
                      return 0;
              }
              #endif
 270          
 271          #if 0
              BYTE Init_HDMI_EP9X53__OLD(void)
              {       
                      BYTE i, cVal[15];
                      volatile BYTE value;
                      BYTE j;
              
              
              #if 1   //Hot Boot need it. BK120319
                      i = ReadI2C(I2CID_EP9351, EP9351_Status_Register_0 );
              //      if ( (i & 0x1C) != 0x1C ) {
                              ReadI2CByte(I2CID_EP9351,EP9351_General_Control_0, EP9351_General_Control_0__PWR_DWN);                          // set to 0x4
             -0, Soft reset
                              delay1ms(500);
                              ReadI2CByte(I2CID_EP9351,EP9351_General_Control_0, 0x00);                               // set to NORMAL
              //      }
                      delay1ms(500);
              
                      //while ( ReadI2C(I2CID_EP9351,EP9351_General_Control_0) ) ;                    // wait till correct val
                      ReadI2CByte(I2CID_EP9351, EP9351_General_Control_1, ReadI2C(I2CID_EP9351,EP9351_General_Control_1) );           //
             - make Positive polarity always
                      ReadI2CByte(I2CID_EP9351, EP9351_General_Control_9, 0x01);                              // enable EQ_GAIN
              
                      cVal[13] = ReadI2C(I2CID_EP9351,EP9351_HDMI_INT);                                       //$29 interrupt flag
                      cVal[14] = ReadI2C(I2CID_EP9351,EP9351_Status_Register_0);                      //$3C   status0
                      ReadI2C(I2CID_EP9351, EP9351_Timing_Registers, cVal, 13);               //$3B
                      DBG_PrintTimingRegister();      //HDMI_DumpTimingRegister(cVal);
                      Printf("\nR29:%bx,R3C:%bx",cVal[13],cVal[14]);
              #endif
                      for(i=0; i < 100; i++) {
                              delay1ms(10);
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 6   

                              value = ReadI2C(I2CID_EP9351,EP9351_Status_Register_0);
                              if(value)
                                      Printf("\n%bd:check status : %bx",i,value);
              
                              value = ReadI2C(I2CID_EP9351,EP9351_HDMI_INT);
                              if((value & EP9351_HDMI_INT__AVI)) {
                                      //Printf("\ncheck INT end : %bd",i);
                                      break;
                              }
                      }
                      if(i==100) {
                              return ERR_FAIL;        //NO AVI_F
                      }
              
                      Printf("\nInit_HDMI read %bx:%bx @%bd",EP9351_HDMI_INT,value,i);
              
                      //read AVI InfoFrame at 0x2A
                      ReadI2C(I2CID_EP9351, EP9351_AVI_InfoFrame, cVal, 15);
                      DBG_PrintAviInfoFrame();
              
                      //color convert to RGB
                      Puts("\nInput HDMI format ");
                      i = (cVal[2] & 0x60) >> 5;
                      if(i == 0)      {
                              Puts("RGB");
                              ReadI2CByte(I2CID_EP9351, EP9351_General_Control_2, 0x00 ); //0x42
                      }
                      else if (i==1)          {
                              Puts("YUV(422)");
                              ReadI2CByte(I2CID_EP9351, EP9351_General_Control_2, 0x50 );
                      }
                      else if (i==2)          {
                              Puts("YUV(444)");
                              ReadI2CByte(I2CID_EP9351, EP9351_General_Control_2, 0x10 );
                      }
              
                      //dump control register
                      Puts("\nEP9351 General Control:");
                      for(i=0; i < 10; i++) {
                              Printf("%2bx ",ReadI2C(I2CID_EP9351,0x40+i));
                      }
              
                      ReadI2CByte(I2CID_EP9351,EP9351_General_Control_9, 0x09);                               // enable EQ_GAIN. use 40uA PUMP.
                      Printf( "=>%02bx", ReadI2C(I2CID_EP9351,EP9351_General_Control_9) );
              
                      return ERR_SUCCESS;
              }
              #endif
 348          
 349          //--------------------------------------------------------------------------------------------------------
             ---------------
 350          #if 0
              void EP9351_Interrupt()
              {
                      // Interrupt Flags Register
                      Event_HDMI_Info = 1;    
              }
              #endif
 357          
 358          #if 0
              BYTE EP9351_Task(void)
              {
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 7   

                      status0 = ReadI2C(I2CID_EP9351, EP9351_Status_Register_0);
                      status1 = ReadI2C(I2CID_EP9351, EP9351_Status_Register_1);
              
                      if((status1 & 0xC0 == 0xC0) && !(is_powerdown)) {
                              if(!is_Valid_Signal) {
                                      //No Signal -> Signal Valid
                                      is_Valid_Signal = 1;
              
                                      //VideoMuteDisable
              
                                      if(status0 & EP9351_Status_Register_0__HDMI) {
                                      }
                                      else {
                                      }
              
                              }
                      }
                      else {
                              if(is_Valid_Signal) {
                                      is_Valid_Signal = 0;
                              }
                      }
              
                      if(is_NoSignal_Reset) {
                      }
              
                      if(is_HDMI) {
                              ReadInterruptFlags();
                      }
              
              }
              #endif
 393          
 394          
 395          //-----------------------------------------------------------------------------
 396          //desc
 397          //parameter
 398          //      number of bytes
 399          //      read bytes
 400          //      register
 401          //      write cmd data
 402          //return
 403          #if 0 //BK111118
              BYTE SPI_cmd_protocol(BYTE max, ...)
              {
                      va_list ap;
                      BYTE page;
                      BYTE temp;
                      BYTE r_cnt, w_cnt, i;
                      BYTE w_cmd[5];
                      BYTE ret;
              
                      //-------------------
                      ret=0xff;
                      if(max < 2)
                              return 0xff;
                      
                      va_start(ap, max);
              
                      w_cnt = max-1;
                      r_cnt = va_arg(ap, BYTE);               //r_cnt
                      for(i=0; i < w_cnt; i++) {
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 8   

                              w_cmd[i]=va_arg(ap, BYTE);              //reg
                      }
                      Printf("\nSPICMD[%bd] r:%bd w:%bd reg:%bx",max, r_cnt, w_cnt-1, w_cmd[0]);
              
                      ReadTW88Page(page);             //save
                      WriteTW88Page(PAGE4_SPI );
              
                      WriteTW88(REG4C3, 0x40+w_cnt);
                      Write2TW88(REG4C6,REG4C7, 0x04d0);                      // DMA Page & Index. indecate DMA read/write Buffer at 0x04D0.
                      WriteTW88(REG4DA,0 );                                   // DMA Length high
                      Write2TW88(REG4C8,REG4C9, r_cnt);                       // DMA Length middle & low
              
                      //write 
                      for(i=0; i < w_cnt; i++)
                              WriteTW88(REG4CA+i, w_cmd[i] );         // write cmd1
                      if(r_cnt) {
                              WriteTW88(REG4C4, 0x01 );                               // start
                              //delay1ms(2);
                              for(i=0; i < 100; i++)
                                      _nop_();
              
                      }
                      else {  
                              WriteTW88(REG4C4, 0x07 );                               // start, with write, with busycheck
                      }
              
                      //read
                      if(r_cnt)       Puts("\tREAD:");        
                      for(i=0; i < r_cnt; i++) {
                              temp = ReadTW88(REG4D0+i );
                              Printf("%02bx ",temp);
                              if(i==0)
                                      ret = temp;
                      }                                                       
              
                      WriteTW88Page(page );   //restore
                      //-------------------
                      va_end(ap);
              
                      return ret;
              }
              #endif
 465          #if 0 //test CRC8
              
              //#define GP  0x107   /* x^8 + x^2 + x + 1 CRC-8-CCITT */
              //#define DI  0x07
              
              //#define GP  0x131   /* x^8 + x^5 + x^4 + 1 CRC-8 Dallas/Maxim */
              //#define DI  0x31
              
              #define GP  0x1D5   /* x^8 + x^7 + x^6 + x^4 + x^2 + 1 CRC-8 */
              #define DI  0xD5
              
              //#define GP  0x19B   /* x^8 + x^7 + x^4 + x^3 + x + 1 CRC-8-WCDMA */
              //#define DI  0x9B
              
              
              static unsigned char crc8_table[256];     /* 8-bit table */
              /*
              * Should be called before any other crc function.  
              */
              static void init_crc8()
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 9   

              {
                      int i,j;
                      unsigned char crc;
                      
                      for (i=0; i<256; i++) {
                              crc = i;
                              for (j=0; j<8; j++)
                                      crc = (crc << 1) ^ ((crc & 0x80) ? DI : 0);
                              crc8_table[i] = crc & 0xFF;
                      }
                      //for(i=0; i < 16; i++) {
                      //      Printf("\n%x:",i);
                      //      for(j=0; j <16; j++) {
                      //              Printf(" %02bx", crc8_table[i*16+j]); 
                      //      }
                      //}
                      //Puts("\n");
              
              }
              
              void crc8(unsigned char *crc, unsigned char m)
                   /*
                    * For a byte array whose accumulated crc value is stored in *crc, computes
                    * resultant crc obtained by appending m to the byte array
                    */
              {
                      *crc = crc8_table[(*crc) ^ m];
                      *crc &= 0xFF;
              }
              
              
              void TestCrC8(void)
              {
                      BYTE crc;
              
                      init_crc8();
                      crc = 0;
                      crc8(&crc, 0xF6 );
                      crc8(&crc, 0x8B );
                      crc8(&crc, 0x3D );
                      crc8(&crc, 0x11 );
                      crc8(&crc, 0x5D );
                      crc8(&crc, 0xB6 );
                      crc8(&crc, 0x7B );
              
                      Printf("\nCRC8 %bx",crc);
              }
              #endif //test CRC8
 533          
 534          //=============================================================================
 535          //                                                                           
 536          //=============================================================================
 537          /*
 538          #ifdef DEBUG
 539          BYTE Getch(void)
 540          {
 541                  while(!RS_ready());
 542                  return RS_rx();
 543          }
 544          #endif
 545          */
 546          /*
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 10  

 547          BYTE Getche(void)
 548          {
 549                  BYTE ch;
 550          
 551                  while(!RS_ready());
 552                  ch = RS_rx();
 553                  RS_tx(ch);
 554          
 555                  return ch;
 556          }
 557          */
 558          #if 0
                      Puts("\nINTR ");
                      if(SFR_EX0)                     Puts(" 0:ext0");
                      if(SFR_ET0)                     Puts(" 1:timer0");
                      if(SFR_EX1)                     Puts(" 2:ext1");
                      if(SFR_ET1)                     Puts(" 3:timer1");
                      if(SFR_ES)                      Puts(" 4:uart0");
              
                      if(SFR_ET2)                     Puts(" 5:timer2");
                      if(SFR_ES1)                     Puts(" 6:uart1");
              
                      if(SFR_EINT2)           Puts(" 7:ext2");
                      if(SFR_EINT3)           Puts(" 8:ext3");
                      if(SFR_EINT4)           Puts(" 9:ext4");
                      if(SFR_EINT5)           Puts(" 10:ext5");
                      if(SFR_EINT6)           Puts(" 11:ext6");
                      if(SFR_EWDI)            Puts(" 12:watchdog");
                      if(SFR_E2IE & 0x01)     Puts(" 13:ext7");
                      if(SFR_E2IE & 0x02)     Puts(" 14:ext8");
                      if(SFR_E2IE & 0x04)     Puts(" 15:ext9");
                      if(SFR_E2IE & 0x08)     Puts(" 16:ext10");
                      if(SFR_E2IE & 0x10)     Puts(" 17:ext11");
                      if(SFR_E2IE & 0x20)     Puts(" 18:ext12");
                      if(SFR_E2IE & 0x40)     Puts(" 19:ext13");
                      if(SFR_E2IE & 0x80)     Puts(" 20:ext14");
              #endif
 584          
 585          
 586          #if 0 //#ifdef MODEL_TW8835_EXTI2C
                      //base 27MHz MCU clock. 1 clk cycle: 37nSec
                      //SCLK:367kHz. almost 400kHz. one I2C read use 196uS.
                      #define I2CDelay_1              _nop_(); _nop_()
                      #define I2CDelay_3              dd(1*5)                 //
                      #define I2CDelay_4              dd(1*5)                 //need 100
                      #define I2CDelay_5              _nop_(); _nop_()
                      #define I2CDelay_6              _nop_(); _nop_()
                      #define I2CDelay_7              dd(1*5)                 //need 100
                      #define I2CDelay_8              dd(2*5)                 //need 200
                      #define I2CDelay_9              _nop_()
                      #define I2CDelay_ACK    dd(1*5)
              #endif
 599          #if 0
                      //base 72MHz MCU clock. 1 Clk cycle: 13.89nS
                      //SCLK:???kHz. one I2C read use ???uS.
              #define I2CDelay_1              N_O_P_20        //6
              #define I2CDelay_3              N_O_P_100       //??
              #define I2CDelay_4              N_O_P_50        //27
              #define I2CDelay_5              N_O_P_10        //4               5:NG
              #define I2CDelay_6              N_O_P_20        //6
              #define I2CDelay_7              N_O_P_50        //27
              #define I2CDelay_8              N_O_P_100       //53
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 11  

              #define I2CDelay_9              N_O_P_5 //_nop_()
              #define I2CDelay_ACK    N_O_P_100
              #endif
 612          #if 0
                      //base 72MHz MCU clock. 1 Clk cycle: 13.88nS
                      //SCLK:???kHz. one I2C read use ???uS.
              #define I2CDelay_1              dd(1)
              #define I2CDelay_2              dd(10)
              #define I2CDelay_3              dd(5)
              #define I2CDelay_4              dd(5)
              #define I2CDelay_5              dd(5)
              #define I2CDelay_6              
              #define I2CDelay_7              dd(3)
              #define I2CDelay_8              dd(10)
              #define I2CDelay_9              dd(10)
              #define I2CDelay_ACK    dd(10)
              #endif
 626          
 627          //=============================================================================
 628          // REMOVED
 629          //=============================================================================
 630          #if 0
              //new 110909
              void LoDecoderMode(BYTE mode)
              {
                      BYTE value;
                      WriteTW88Page(PAGE1_DECODER);
                      value = ReadTW88(REG102) & 0xCF;
                      value |= (mode << 4);
                      WriteTW88(REG102, value);
              }
              
              void InMuxPowerDown(BYTE Y, BYTE C, BYTE V)
              {
                      BYTE value;
                      WriteTW88Page(PAGE1_DECODER);
                      value = ReadTW88(REG106) & 0xF8;
                      if(Y)   value |= 0x04;
                      if(C)   value |= 0x02;
                      if(V)   value |= 0x01;
                      WriteTW88(REG106,value);                
              }
              //assume R102[6]=1;
              void InMuxInput(BYTE Y, BYTE C, BYTE V)
              {
                      BYTE value;
                      WriteTW88Page(PAGE1_DECODER);
                      value = ReadTW88(REG102) & ~0x8F;
                      value |= (Y << 2);
                      if(C >= 2)              value |= 0x80;
                      if(C & 0x01)    value |= 0x02;
                      value |= V;
                      WriteTW88(REG102,value);
                      
              }
              void AFESelectDecoderAndClock(BYTE fLoDecoder)
              {
                      BYTE r105,r1c0;
              
                      WriteTW88Page(PAGE1_DECODER);
                      r105 = ReadTW88(REG105) & 0xFE;
                      r1c0 = ReadTW88(REG1C0) & 0xFE;
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 12  

                      if(fLoDecoder) {
                              r105 |= 0x01;   //set decoder
                              r1c0 |= 0x01;   //decoder use 27MHz
                      }
                      WriteTW88(REG105,r105);
                      WriteTW88(REG1C0,r1c0);
                       
              }
              
              //      InputPort               PowerDown       AntiAliasingFilter
              //      ----                    ----            ----
              //Y     R102[3:2]               R106[2]         R105[3]
              //C     R102[7]R102[1]  R106[1]         R105[2]
              //V     R102[0]                 R106[0]         R105[1]
              //
              // input                InputPort       PowerDown       AFE Path        ADC Clock       PGA select
              // -----                ---------       ---------       ----            ----            ----    
              // CVBS                 Y0                      C&V                     LoDecoder       27M                     LowSpeed
              // SVIDEO               Y1,C0           V                       LoDecoder       27M                     LowSpeed
              // Component    Y2,C1,V0                                HiDecoder       LLPLL           HighSpeed
              // aPC                  Y2,C1,V0                                HiDecoder       LLPLL           HighSpeed
              void AFESetInMuxInput_____TEST(BYTE InputMode)
              {
                      BYTE use_highspeed_path;
              
                      use_highspeed_path = 0; 
                      switch(InputMode) {
                      case INPUT_CVBS:
                              InMuxInput(0,0,0);
                              InMuxPowerDown(0,1,1);
                              LoDecoderMode(0);
                              break;
                      case INPUT_SVIDEO:
                              InMuxInput(1,0,0);
                              InMuxPowerDown(0,0,1);
                              LoDecoderMode(1);
                              break;
                      case INPUT_COMP:
                              InMuxInput(2,1,0);
                              InMuxPowerDown(0,0,0);
                              LoDecoderMode(0);
                              use_highspeed_path = 1;
                              break;
                      case INPUT_PC:
                              InMuxInput(2,1,0);
                              InMuxPowerDown(0,0,0);
                              LoDecoderMode(0);
                              use_highspeed_path = 1;
                              break;
                      case INPUT_DVI:
                      case INPUT_HDMIPC:
                      case INPUT_HDMITV:
                              InMuxInput(0,0,0);
                              InMuxPowerDown(0,0,0);
                              LoDecoderMode(0);
                              break;
                      case INPUT_BT656:
                              InMuxInput(0,0,0);
                              InMuxPowerDown(0,1,1);
                              LoDecoderMode(0);
                              break;
                      }
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 13  

                      AFESelectDecoderAndClock(!use_highspeed_path);
              }
              #endif
 736          #if 0
              void AFESetInMuxYOUT()
              {}
              void AFEClampStartEnd(BYTE start, BYTE end)
              {}
              void AFEClampPosition(BYTE position)
              {}
              void AFEClampSetMode(BYTE mode)
              {}
              #endif
 746          
 747          //===========================================
 748          // TW9900
 749          //===========================================
 750          //---------------------------------------------
 751          //              BYTE    CheckTW9900VDLOSS( BYTE n )
 752          //---------------------------------------------
 753          #ifdef USE_TW9900
              BYTE    CheckTW9900VDLOSS( BYTE n )
              {..}
              
              //---------------------------------------------
              //              BYTE    CheckTW9900STD( BYTE n )
              //---------------------------------------------
              BYTE    CheckTW9900STD( BYTE n )
              {..}
              #endif
 763          
 764          //====================================
 765          // VADC.C
 766          //====================================
 767          //The unit is sysclk
 768          //480i(SOY) = 140 (92~213)
 769          //576i(SOY) = 140 (92~213)
 770          //480p(SOY) = 52  (30~83)
 771          //576p(SOY) = 58  (30~83)
 772          //1080i(SOY)= 24  (14~44)
 773          //720p(SOY) = 38  (18~67)
 774          //H/Vsync = 0
 775          #if 0
              //                                                               720    720    720    720       1920   1280   1920
              //                                                           480i,  576i,  480p, 576p,  1080i, 720p,  1080p
              code    BYTE    ClampPos[]   = { 140,   140,   52,    58,    24,    38,    24 };
              #endif
 780          
 781          
 782          
 783          //for bank issue
 784          #if 0
              BYTE GetInputVAdcMode(void)
              {...}
              #endif
 788          
 789          #if 0
              //!void VAdcAdjustPhase(BYTE mode)
              //!{
              //!     //WriteTW88Page(PAGE1_VADC );
              //!     if(InputVAdcMode >= EE_YUVDATA_START) {
              //!     }
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 14  

              //!     else {
              //!             if(mode==10) VAdcSetPhase(3, 0);        //WriteTW88(REG1C5, 3); 
              //!             if(mode==18) VAdcSetPhase(17, 0);        
              //!     }
              //!}
              #endif
 801          
 802          //!#if !defined(SUPPORT_COMPONENT) && !defined(SUPPORT_PC)
 803          //!//----------------------------
 804          //!//Trick for Bank Code Segment
 805          //!//----------------------------
 806          //CODE BYTE DUMMY_VADC_CODE;
 807          //void Dummy_VADC_func(void)
 808          //{
 809          //      BYTE temp;
 810          //      temp = DUMMY_VADC_CODE;
 811          //}
 812          //!#else //..!defined(SUPPORT_COMPONENT) && !defined(SUPPORT_PC)
 813          //! other real code
 814          //!#endif
 815          
 816          
 817                                                                  //       1      2       3      4      5      6      7      8      9     10
 818                                                                  //      480i,  576i,   480p, 576p,1080i50,1080i60,720p50,720p60,1080p5,1080p6
 819          #if 0
              //scaled
              code    WORD    YUVDividerPLL[] = { 858,   864,   858,   864,   2460,  2200,  1980,  1650,  2640,  2200 };
              code    WORD    YUVVtotal[]     = { 262,   312,   525,   625,   562,   562,   750,   750,   1124,  1124 };
              
              code    BYTE    YUVClampPos[]   = { 128,   128,   64,    58,    40,    32,    38,    38,    14,    14 };                // 0x1
             -D7
              
              code    WORD    YUVCropH[]      = { 720,   720,   720,   720,   1920,  1920,  1280,  1280,  1920,  1920 };
              code    WORD    YUVCropV[]      = { 240,   288,   480,   576,   540,   540,   720,   720,   1080,  1080 };
              code    WORD    YUVDisplayH[]   = { 700,   700,   700,   700,   1880,  1880,  1260,  1260,  1880,  1880 };              // 0
             -x042[3:0],0x046
              code    WORD    YUVDisplayV[]   = { 230,   278,   460,   556,   520,   520,   696,   696,   1040,  1040 };              // 0
             -x042[6:4],0x044
              
              code    WORD    YUVStartH[]     = { 112,   126,   114,   123,   230,   233,   293,   293,   233,   233 };               // 0x
             -040[7:6],0x045 InputCrop
              code    WORD    YUVStartV[]     = { 1,     1,     2,     2,     2,     2,     2,     2,     2,     2 };                 // 0x0
             -43 InputCrop
              code    BYTE    YUVOffsetH[]    = { 5,     4,     10,    6,     40,    40,    20,    20,    30,    30 };
              code    BYTE    YUVOffsetV[]    = { 48,    48,    48,    48,    28,    26,    24,    25,    26,    26 };                // use
             - as V-DE 0x215        
              code    BYTE    YUVScaleVoff[]  = { 128,   128,   0,     0,     128,   128,   0,     0,     0,     0 };
              
              code    WORD    MYStartH[]      = { 121,   131,   121,   131,   
                      235-44,   
                      235-44,   
                      299-40,   
                      299-40,   
                      235-44,   
                      235-44 };               // 0x040[7:6],0x045 InputCrop
              code    WORD    MYStartV[]      = { 19,   21,   38,   44,   
                      20,     20,   
                      25, 25,   
                      41, 41 };       
              
              #endif //.#else
 850          #if 0
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 15  

                                                                      //      480i,  576i,   480p, 576p,1080i50,1080i60,720p50,720p60,1080p5,1080p6
              //total scan pixel & line
              code    WORD    YUVDividerPLL[] = { 858,   864,   858,   864,   2460,  2200,  1980,  1650,  2640,  2200 };              //to
             -tal horizontal pixels
              code    WORD    YUVVtotal[]     = { 262,   312,   525,   625,   562,   562,   750,   750,   1124,  1124 };              //to
             -tal vertical scan line
              
              code    BYTE    YUVClampPos[]   = { 140,   140,   52,    58,    24,    32,    38,    38,    14,    14 };                //R1D7
             -. clamp position offset.
              
              //reduced resolution.
              code    WORD    YUVDisplayH[]   = { 720,   720,   720,   720,   1920,  1920,  1280,  1280,  1920,  1920 };              // R
             -042[3:0]R046[7:0] for overscan
              code    WORD    YUVDisplayV[]   = { 240,   288,   480,   576,   540,   540,   720,   720,   1080,  1080 };              // R
             -042[6:4]R044[7:0] for overscan
              
              //resolution
              code    WORD    YUVCropH[]      = { 720,   720,   720,   720,   1920,  1920,  1280,  1280,  1920,  1920 };              // h
             -orizontal resolution
              code    WORD    YUVCropV[]      = { 240,   288,   480,   576,   540,   540,   720,   720,   1080,  1080 };              // v
             -ertical resolution
              
              code    WORD    YUVStartH[]     = { 121-16,131-16,121-16,131-16,235-16,235-16,299-16,299-16,   235-16,235-16 }; 
             -        // 0x040[7:6],0x045 InputCrop
              code    WORD    YUVStartV[]     = { 1,     1,     2,     2,     2,     2,     2,     2,     2,     2 };                 // 0x0
             -43 InputCrop
              
              code    BYTE    YUVOffsetH[]    = { 5,     4,     10,    6,     40,    40,    20,    20,    30,    30 };
              code    BYTE    YUVOffsetV[]    = { 42,    40,    40,    38,    20,    20,    18,    18,    10,    10 };                // use
             - as V-DE 0x215        
              //=>VDE value
                                                                      //      480i,  576i,   480p, 576p,1080i50,1080i60,720p50,720p60,1080p5,1080p6
              code    BYTE  YUV_VDE_NOSCALE[] = { 21,    24,    40,    46,    22,    22,    27,    27,    22,    22 };                // 
             -use as V-DE 0x215     
              
              
              
              code    BYTE    YUVScaleVoff[]  = { 128,   128,   0,     0,     128,   128,   0,     0,     0,     0 };
              
              
              code    WORD    MYStartH[]      = { 121,   131,   121,   131,   
                      235-44,   
                      235-44,   
                      299-40,   
                      299-40,   
                      235-44,   
                      235-44 };               // 0x040[7:6],0x045 InputCrop
              code    WORD    MYStartV[]      = { 19,   21,   38,   44,   
                      20,     20,   
                      25, 25,   
                      41, 41 };       
              #endif
 892          
 893          //=============================================================================
 894          // REMOVED
 895          //=============================================================================
 896          
 897          //void SPI_cmd_protocol(BYTE max, ...)
 898          #if 0
              BYTE SPI_QUADInit_Test(void)
              {
                      BYTE ret;
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 16  

                      BYTE temp;
                      ret = SFLASH_VENDOR_MICRON;
              
                      SPI_cmd_protocol(2,     3, 0x9f);
                      SPI_cmd_protocol(2,     1,5);
                      SPI_cmd_protocol(5,     8,3,0,0,0);      //BUGBUG......
              
                      temp=SPI_cmd_protocol(2,        1,0x85);
                      if((temp&0xF0)==0x60)
                              Puts("\nOK.6 dummy clock @V");
                      else
                              Puts("\nFAIL.6 dummy clock @V");
              
                      temp=SPI_cmd_protocol(2,        1,0x65);
                      if(temp&0x80)
                              Puts("\nFAIL.QuadIO@VE");
                      else
                              Puts("\nOK.QuadIO@VE");
              
                      SPI_cmd_protocol(2,     2,0xB5);
              
                      WriteTW88Page(PAGE4_SPI);
                      temp = ReadTW88(REG4D0);
                      if((temp&0xF0)==0x60)
                              Puts("\nOK.6 dummy clock @NV");
              
                      temp = ReadTW88(REG4D1);
                      if(temp&0x04)
                              Puts("\nFAIL. QuadIO@NV");
                      else
                              Puts("\nOK.QuadIO@NV");
              #if 0
                      temp = SPI_cmd_protocol(2,      1,0xB5);                        //read NV cof reg
                      SPI_cmd_protocol(2,     0,6);                                           //write enable
                      SPI_cmd_protocol(3,     0,0xB1, temp & ~0x08);          //update NV cof reg with Quid Input
                      SPI_cmd_protocol(2,     1,0xB5);                                        //read NV cof reg
              #endif
              
              #if 0
                      temp = SPI_cmd_protocol(2,      1,0x85);                        //read V cof reg
                      SPI_cmd_protocol(2,     0,6);                                           //write enable
                      SPI_cmd_protocol(3,     0,0x81, temp & ~0x08);          //update V cof reg with Quid Input
                      SPI_cmd_protocol(2,     1,0x85);                                        //read V cof reg
              #endif
              
              #if 0
                      temp = SPI_cmd_protocol(2,      1,0x65);                        //read VE cof reg
                      SPI_cmd_protocol(2,     0,6);                                           //write enable
                      SPI_cmd_protocol(2,     0,0x61, temp & ~0x80);          //update VE cof reg with Quid Input
                      SPI_cmd_protocol(2,     1,0x65);                                        //read VE cof reg
              #endif
                      return 0;
              }
              #endif
 956          
 957          //=============================================================================
 958          //=============================================================================
 959          // REMOVED
 960          //=============================================================================
 961          //=============================================================================
 962          #if 0 //BK111013
              //BKTODO111013 I don't know why it use a fixed value ????
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 17  

              void ScalerSetDeOnFreerun(void)
              {
                      BYTE fOn=OFF;
                      BYTE HDE_value = 40;
                      BYTE VDE_value = 48;
                      WORD VTotal;
              
                      switch(InputMain) {
                      case INPUT_CVBS:
                      case INPUT_SVIDEO:
                              break;
                      case INPUT_COMP:
                      //V-DE:0
              //!             wTemp = ScalerCalcHDE();
              //!             ScalerWriteHDEReg(wTemp, PANEL_H);
              //!             wTemp = FPGA_GetVDE();
              //!             if(wTemp < 1)
              //!                     wTemp = 1;
              //!             ScalerSetVDEPosHeight(wTemp,  PANEL_V);
                              HDE_value = 40;
                              VDE_value = 48;
                              HDE_value=ScalerReadHDEReg();
                              VDE_value=ScalerReadVDEReg();
                              fOn = ON;
                              break;
                      case INPUT_PC:
                      //V-DE:0
              //!             wTemp = ScalerCalcHDE();
              //!             ScalerWriteHDEReg(wTemp, PANEL_H);
              //!             //----------------------
              //!             //wTemp = FPGA_GetVDE();
              //!             //if(wTemp<1)    //temp
              //!             //      wTemp=1;
              //!             //----------------------
              //!             wTemp = ScalerCalcVDE();
              //!             ScalerSetVDEPosHeight(wTemp,  PANEL_V);
                              HDE_value = 40;
                              VDE_value = 48;
                              fOn = ON;
                              break;
                      case INPUT_DVI:
              //!             wTemp = ScalerCalcHDE();
              //!             ScalerWriteHDEReg(wTemp, PANEL_H);
              //!             wTemp = FPGA_GetVDE();
              //!             ScalerSetVDEPosHeight(wTemp,  PANEL_V);
                              HDE_value = 40;
                              VDE_value = 48;
                              fOn = ON;
                              break;
                      case INPUT_HDMIPC:
                      case INPUT_HDMITV:
              //!             wTemp = ScalerCalcHDE();
              //!             ScalerWriteHDEReg(wTemp, PANEL_H);
              //!             wTemp = FPGA_GetVDE();
              //!     wTemp = 35;
              //!             ScalerSetVDEPosHeight(wTemp,  PANEL_V);
                              HDE_value = 40;
                              VDE_value = 48;
                              fOn = ON;
                              break;
                      case INPUT_BT656:
              //!             wTemp = ScalerCalcHDE();
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 18  

              //!             ScalerWriteHDEReg(wTemp, PANEL_H);
              //!             wTemp = FPGA_GetVDE();
              //!             if(wTemp < 3)
              //!                     wTemp = 2;
              //!             ScalerSetVDEPosHeight(wTemp,  PANEL_V);
                              HDE_value = 40;
                              VDE_value = 48;
                              fOn = ON;
                              break;
                      default:
                              break;
                      }
              
                      dPrintf("\nScalerSetDeOnFreerun HDE:%bd VDE:%bd",       ScalerReadHDEReg(),ScalerReadVDEReg());
              
              
              
                      if(fOn) {
                      
                              VTotal = ScalerReadFreerunVtotal();
                              if(VDE_value >= (VTotal - PANEL_V)) {
                                      VDE_value = VTotal - PANEL_V -1;
                              }
                              WaitVBlank(1);  //InitLogo1 need it
              
                              ScalerWriteHDEReg(HDE_value);
                              ScalerWriteVDEReg(VDE_value);
                              SpiOsdSetDeValue();     //InitLogo1 need it
                      }
              }
              #endif
1057          
1058          
1059          #if 0
              //use x100 value for floating point
              void ScalerSetHScale100(WORD Length)    
              {
                      DWORD   temp;
              
                      WriteTW88Page(PAGE2_SCALER);
              
                      if(PANEL_H >= (Length/100)) {                                   
                              //UP SCALE
                              temp = (DWORD)Length * 0x2000L;
                              temp /= 100;
                              temp /= PANEL_H;
                              ScalerWriteXUpReg(temp);                                //set up scale
                              ScalerWriteXDownReg(0x0400);                    //clear down scale
                              dPrintf("\nScalerSetHScale100(%d) UP:0x0400 DN:0x%04lx",Length, temp);
                      }
                      else {                                                                          
                              //DOWN SCALE
                              temp = (DWORD)Length * 0x0400L;                                         
                              temp /= 100;
                              temp /= PANEL_H;
                              ScalerWriteXUpReg(0x2000);                      //clear up scale
                              ScalerWriteXDownReg(temp);                      //set down scale
                              dPrintf("\nScalerSetHScale100(%d) UP:0x%04lx DN:0x2000",Length, temp);
                      }
              }
              #endif
1087          
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 19  

1088          #ifdef UNCALLED_SEGMENT
              WORD GetHScaledRatio(WORD length)
              {...}
              #endif
1092          
1093          #if 0
              //use x100 for floating point
              void ScalerSetVScale100(WORD Length)
              {
                      DWORD   temp;
              
                      WriteTW88Page(PAGE2_SCALER);
              
                      temp = Length * 0x2000L;
                      temp += (PANEL_V / 2);
                      temp /= PANEL_V;
                      temp /= 100;
                      dPrintf("\nScalerSetVScale(%d) 0x%04lx",Length, temp);
              
                      ScalerWriteVScaleReg(temp);
              }
              #endif
1110          
1111          //BKTODO: It comes from TW8823.
1112          //      use ScalerSetVScale() & ScalerSetVDEPosHeight() with GetVScaledRatio()
1113          //offset for V back porch
1114          #ifdef UNCALLED_SEGMENT
              void ScalerSetVScaleWithOffset(WORD Length, BYTE offset)
              {
                      DWORD   temp;
              
                      WriteTW88Page(PAGE2_SCALER);
              
                      temp = Length * 0x2000L;
                      temp /= PANEL_V;
                      temp += offset;
              
                      dPrintf("\nScalerSetVScale(%d,%bd) 0x%04lx",Length, offset, temp);
              
                      ScalerWriteVScaleReg(temp);
              }
              #endif
1130          
1131          #if 0
              WORD GetVScaledRatio(WORD length)
              {
                      DWORD dTemp;
                      WORD wTemp;
                      WORD wResult;
                      WORD wTest;
              
                      dPrintf("\nGetVScaledRatio(%d)",length);
              
                      dTemp = length * 0x2000L;
                      wTemp = ScalerReadVScaleReg();
                      dPrintf(" ratio:        8192/%d",wTemp);
              
                      wResult = (WORD)(dTemp / wTemp);
                      dTemp += 0x1000L; //add (0x2000/2)  ..roundup..
                      wTest = (WORD)(dTemp / wTemp);
              
                      dPrintf(" result:%d test:%d",wResult,wTest);
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 20  

                      return wResult;
              }
              #endif
1153          
1154          
1155          //old name: WORD FPGA_GetHDE(void)
1156          #if 0
              WORD ScalerCalcHDE___OLD(void)
              {
                      WORD wTemp;
                      BYTE PCLKO;
              
                      WriteTW88Page(PAGE2_SCALER );
                      wTemp = ReadTW88(REG20b);
                      PCLKO = ReadTW88(REG20d) & 0x03;
                      if(PCLKO==3)
                              PCLKO = 2;
              
              #if 0
                      return wTemp+32;
              #else //new 110624
                      return wTemp+33 - PCLKO;
              #endif
              }
              #endif
1175          
1176          //Note: it is available after meas.
1177          
1178          /*
1179          VStart = REG(0x536[7:0],0x537[7:0])
1180          VPulse = REG(0x52a[7:0],0x52b[7:0])
1181          VPol = REG(0x041[3:3])
1182          VScale = REG(0x206[7:0],0x205[7:0])
1183          
1184          result = ((VStart - (VPulse * VPol)) * 8192 / VScale) + 1
1185          */
1186          
1187          #if 0
              WORD ScalerCalcVDE___OLD(void)
              {
                      BYTE VPol;
                      WORD VStart,VPulse,VScale;
                      WORD wResult;
              
                      WriteTW88Page(PAGE5_MEAS);
                      Read2TW88(REG536,REG537, VStart);
                      Read2TW88(REG52A,REG52B, VPulse);
              
                      WriteTW88Page(PAGE0_INPUT);
                      VPol = ReadTW88(REG041) & 0x08 ? 1: 0;
                      
                      VScale = ScalerReadVScaleReg();
              
                      wResult = ((DWORD)(VStart - (VPulse * VPol)) * 8192 / VScale) + 1;
                      return wResult;
              }
              #endif
1207          
1208          #if 0
              WORD GetCalcVDEStart(void)              ??sameas ScalerCalcVDE
              {
                      WORD VStart,VPulse,VScale;
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 21  

                      BYTE VPol;
                      WORD wResult;
                      DWORD dTemp;
              
                      dPrintf("\nGetVScaledRatio()");
              
                      WriteTW88Page(PAGE2_SCALER);
                      Read2TW88(REG206,REG207, VScale);
              
                      WriteTW88Page(PAGE5_MEAS);
                      Read2TW88(REG536,REG537, VStart);
                      Read2TW88(REG52a,REG52B, VPulse);
              
                      
                      WriteTW88Page(PAGE0_INPUT);
                      VPol = ReadTW88(REG041) & 0x08 ? 1: 0;
              
                      dPrintf("VStart:%d VPulse:%d VPol:%bd VScale:%d ",VStart,VPulse,VPol,VScale);
              
                      //wResult = ((VStart - (VPulse*VPol)) * 8192 / VScale) + 1;
                      dTemp = VStart - (VPulse*VPol);
                      dTemp *= 8192;
                      dTemp /= VScale;
                      dTemp += 1;
                      wResult = (WORD)dTemp;
                      dPrintf(" result:%d",wResult);
                      
                      return wResult;
              }
              #endif
1242          
1243          //===================================================================
1244          //
1245          //===================================================================
1246          
1247          #ifdef UNCALLED_SEGMENT
              //parameter
              //      type - input
              //                      0:CVBS+NTSC
              //                      1:CVBS+PAL
              //                      2:RGB + SVGA
              void ScalerSetDefault(BYTE type)
              {
                      if(type==0) {
                              //CVBS+NTSC             720x480
                              ScalerSetHScale(720);           //input:720. line_buff:720 output:Panel:800 
                              ScalerSetVScale(240-15);        //??-15 ScalerSetVScale(240);   //480 with interlaced.
              
                              ScalerSetLineBuffer(0x62, 720);         //98, 720
                              ScalerWriteOutputHBlank(2);
              
                              ScalerWriteHDEReg(0x84);                        // position:132, size:0x320=800(PANEL_H)
                              ScalerWriteVDEReg(0x30);                        //ScalerSetVDEPosHeight(0x2c, PANEL_V);         // 44, 0x1e0=480(PANEL_V)
                              //ScalerSetOutputWidthAndHeight(PANEL_H,PANEL_V);
                              ScalerSetHSyncPosLen(0, 1);                             //ScalerSetHSyncPosLen(0, 4);                           //position:0 len:4
                              ScalerSetVSyncPosLen(0,5);
                              ScalerSetOutputFixedVline(OFF /*,0*/);                  //off
                              ScalerSetVDEMask(0,0);
                      }
                      else if(type==1) {
                              //CVBS+PAL              720x576
              
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 22  

                              //need a default settings
              
                              ScalerSetHScale(720);
                              ScalerSetVScale(288);   //576 with interlaced.
              
                              ScalerSetLineBuffer(0x62, 720);         //98, 720
                              ScalerWriteOutputHBlank(2);
              
                              ScalerWriteHDEReg(0x84);                                        //
                              ScalerWriteVDEReg(0x30);                                        //28
                              //ScalerSetOutputWidthAndHeight(PANEL_H,PANEL_V);
                              ScalerSetHSyncPosLen(0, 1);                             //ScalerSetHSyncPosLen(0, 4);                           //position:0 len:4
                              ScalerSetVSyncPosLen(0,5);
                              ScalerSetOutputFixedVline(OFF /*,0*/);                  //off
                              ScalerSetVDEMask(0,0);
                      }
                      else /* if(type==2) */ {        //RGB + SVGA
              
                              //need a default settings
              
                              ScalerSetHScale(PANEL_H);
                              ScalerSetVScale(PANEL_V);
              
                              ScalerSetLineBuffer(0x32, PANEL_H);     // 50, 800
                              ScalerWriteOutputHBlank(2);
              
                              ScalerWriteHDEReg(0x53);                                        //83
                              ScalerWriteVDEReg(0x1c);                                        //28
                              //ScalerSetOutputWidthAndHeight(PANEL_H,PANEL_V);
                              ScalerSetHSyncPosLen(0, 1);                             //ScalerSetHSyncPosLen(0, 4);                           //position:0 len:4
                              ScalerSetVSyncPosLen(0, 1);
                      }
              }
              #endif
1308          
1309          
1310          //R202
1311          
1312          //R207, R208
1313          
1314          //called from measure
1315          //BKTODO - it is a TW8823 version
1316          //parameter
1317          //      length: HAN(HorizontalActiveNumber)
1318          #if 0
              void    SetHScaleFull( WORD Length, WORD VPeriod, DWORD VPeriod27 )
              {
                      dPrintf( "\nSetHScaleFull(Length:%d, VPeriod:%d, VPeriod27:%ld)", Length, VPeriod, VPeriod27 );
              }
              #endif
1324          
1325          
1326          //=============================================================================
1327          //      YPbPr Table
1328          //=============================================================================
1329          //                                                               720    720    720    720       1920   1280   1920
1330          //                                                           480i,  576i,  480p, 576p,  1080i, 720p,  1080p
1331          //code  BYTE    ClampPos[]   = { 140,   140,   52,    58,    24,    38,    24 };                //BKTODO:I need it for aPC a
             -lso.
1332          
1333          /*
1334          
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 23  

1335          SDTV 480i/60M
1336                   576i/50        
1337                   480p SMPTE 267M-1995
1338          HDTV 1080i/60M
1339                   1080i/50
1340                   720p/60M
1341                   720p/50
1342                   1080p = SMPTE 274M-1995 1080p/24 & 1080p/24M
1343                                           1080p/50 1080p/60M
1344          
1345          
1346                                  scan lines       field1 field2   half
1347          480i/60M        525                      23~262 285~524  142x
1348          576i/50         625                      23~310 335~622
1349          1080i           1125
1350          720p            750
1351          
1352          standard
1353          480i/60M        SMPTE 170M-1994.
1354                                  ITU-R BT.601-4
1355                                  SMPTE 125M-1995
1356                                  SMPTE 259M-1997
1357          */
1358          
1359          //=============================================================================
1360          //JUNK
1361          //=============================================================================
1362          //test 2BPP intersil
1363          //!code WORD consolas16x26_606C90_2BPP[4] = {
1364          //!     0xF7DE,0x0000,0x5AAB,0xC000
1365          //!}; 
1366          //!void FOsdIntersil(BYTE winno)
1367          //!{
1368          //!     BYTE palette;
1369          //!     DECLARE_LOCAL_page
1370          //!     BYTE i;
1371          //!
1372          //!     ReadTW88Page(page);
1373          //!
1374          //!     WaitVBlank(1);
1375          //!     FOsdWinEnable(winno,OFF);       //winno disable
1376          //!
1377          //!     FOsdWinScreenXY(winno, 0,26);   //start 0x,0x  4 colums 1 line
1378          //!     FOsdWinScreenWH(winno, 4, 1);   //start 0x,0x  4 colums 1 line
1379          //!     FOsdWinZoom(winno, 0, 0);                       //zoom 1,1
1380          //!     FOsdWinMulticolor(winno, ON);
1381          //!
1382          //!     WriteTW88Page(PAGE3_FOSD );
1383          //!
1384          //!     palette = 40;
1385          //!     FOsdSetPaletteColorArray(palette,consolas16x26_606C90_2BPP,4, 0);
1386          //!     FOsdRamSetAddrAttr(120, palette>>2);    //addr,palette,mode
1387          //!     for(i=0; i < 4; i++) {
1388          //!             WriteTW88(REG307, BPP2_START+4 + i*2);  //intersil icon
1389          //!     }
1390          //!
1391          //!     FOsdWinEnable(winno,ON);                //winno enable
1392          //!     WriteTW88Page(page);
1393          //!}
1394          
1395          
1396          //=============================================================================
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 24  

1397          // 
1398          //=============================================================================
1399          //!#if 0
1400          //!void FOsdRam_Set(WORD index, BYTE ch, BYTE attr, BYTE len)
1401          //!{
1402          //!     BYTE i,bTemp;
1403          //!     WORD addr;
1404          //!     
1405          //!     WriteTW88(REG304, ReadTW88(REG304) & ~0x0D);
1406          //!     for(i=0; i < len; i++) {
1407          //!             addr = index + i;
1408          //!             bTemp = ReadTW88(REG305) & 0xFE;
1409          //!             if(addr > 0x100)
1410          //!                     bTemp |= 0x01;
1411          //!             WriteTW88(REG305, bTemp);
1412          //!
1413          //!             WriteTW88(REG306, (BYTE)addr);  //FOsdRamSetAddress(OsdRamAddr);
1414          //!             WriteTW88(REG307, ch);
1415          //!
1416          //!             WriteTW88(REG306, (BYTE)addr);  //FOsdRamSetAddress(OsdRamAddr);
1417          //!             WriteTW88(REG308, attr );       
1418          //!     }
1419          //!}
1420          //!
1421          //!void FOsdRam_Clear(WORD index, BYTE bg_color_index, BYTE len)
1422          //!{
1423          //!     FOsdRam_Set(index,FOSD_ASCII_BLANK,bg_color_index,len);
1424          //!}
1425          //!#endif
1426          
1427          //!struct FWIN_s {
1428          //!     BYTE no;
1429          //!     BYTE col, row;
1430          //!     BYTE attr;
1431          //!     WORD start;
1432          //!     WORD addr;
1433          //!} fwin;
1434          
1435          //assume bank3. AutoInc
1436          //!#if 0
1437          //!static void FOsdRam_goto(BYTE win, BYTE w,BYTE y)
1438          //!{
1439          //!     WORD addr;
1440          //!     BYTE bTemp;
1441          //!
1442          //!     addr = fwin.start+fwin.col*y+w;
1443          //!     fwin.addr = addr;
1444          //!
1445          //!     FOsdRamSetAddress(addr);
1446          //!}
1447          //!
1448          //!static void FOsdRam_setAttr(BYTE attr, BYTE cnt, BYTE auto_mode )
1449          //!{
1450          //!     WORD addr;
1451          //!     BYTE i,j;
1452          //!
1453          //!     addr = fwin.addr;
1454          //!     fwin.attr = attr;
1455          //!
1456          //!     FOsdSetAccessMode(FOSD_OSDRAM_WRITE_AUTO);      //WriteTW88(REG304, (ReadTW88(REG304)&0xF3)|0x04); // Auto 
             -addr increment with D or A
1457          //!     FOsdRamSetAddress(addr);
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 25  

1458          //!
1459          //!     if(cnt) {
1460          //!             for (i=0; i<(cnt/8); i++) {
1461          //!                     for ( j=0; j<8; j++ )
1462          //!                             WriteTW88(REG308, attr);
1463          //!                     delay1ms(1);
1464          //!             }
1465          //!             for ( j=0; j<(cnt%8); j++ )
1466          //!                     WriteTW88(REG308, attr);
1467          //!     }
1468          //!     else {
1469          //!             WriteTW88(REG308, attr);
1470          //!     }
1471          //!
1472          //!     if(auto_mode==3) {
1473          //!         //reset addr for data
1474          //!             WriteTW88(REG304, ReadTW88(REG304) | 0x0C); // Auto addr increment with wit previous attr
1475          //!             FOsdRamSetAddress(addr); 
1476          //!     }
1477          //!}
1478          //!#endif
1479          //!
1480          //!//assume bank3.
1481          //!#if 0
1482          //!static void FOsdRam_putch(WORD ch)
1483          //!{
1484          //!     if(ch < 0x100)
1485          //!             WriteTW88(REG304,ReadTW88(REG304) & ~0x20);     //lower 
1486          //!     else
1487          //!             WriteTW88(REG304,ReadTW88(REG304) | 0x20);      //UP256
1488          //!     WriteTW88(REG307, (BYTE)ch);    
1489          //!}
1490          //!#endif
1491          //!
1492          //!#if 0
1493          //!static void FOsdRam_puts(WORD *s)
1494          //!{
1495          //!     BYTE hi = 0;
1496          //!
1497          //!     if(*s < 0x100) {
1498          //!             WriteTW88(REG304,ReadTW88(REG304) & ~0x20);     //lower 
1499          //!     }
1500          //!     while(*s) {
1501          //!             if(hi==0 && *s >= 0x100) {
1502          //!                     hi=1;
1503          //!                     WriteTW88(REG304,ReadTW88(REG304) | 0x20); //UP256
1504          //!             }
1505          //!             WriteTW88(REG307,(BYTE)*s++);
1506          //!     }
1507          //!}
1508          //!#endif
1509          
1510          
1511          //!#if 0
1512          //!void FOsdDownloadFontCode( void )
1513          //!{
1514          //!#ifdef SUPPORT_UDFONT
1515          //!BYTE i, j
1516          //!#endif
1517          //!BYTE    page;
1518          //!
1519          //!     ReadTW88Page(page);
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 26  

1520          //!     WaitVBlank(1);  
1521          //!     McuSpiClkToPclk(0x02);  //with divider 1=1.5(72MHz). try 2
1522          //!
1523          //!     WriteTW88Page(PAGE3_FOSD );
1524          //!
1525          //!     WriteTW88(REG350, 0x09 );                                       // default FONT height: 18 = 9*2
1526          //!
1527          //!     WriteTW88(REG300, ReadTW88(REG300) & 0xFD ); // turn OFF bypass for Font RAM
1528          //!     WriteTW88(REG309, 0x00 ); //Font Addr
1529          //!
1530          //!     FOsdSetAccessMode(FOSD_ACCESS_FONTRAM); 
1531          //!
1532          //!=======================
1533          //!#ifdef SUPPORT_UDFONT
1534          //!     FOsdFontWrite(0x00,&ROMFONTDATA[0][0], 27, 0xA0);
1535          //!     FOsdFontWrite(0xA0,&RAMFONTDATA[0][0], 27, 0x22);
1536          //!     FOsdFontWrite(0xC2,&RAMFONTDATA[0x82][0], 27, 0x60-0x22);
1537          //!#endif
1538          //!========================
1539          //!
1540          //!
1541          //!#ifdef SUPPORT_UDFONT
1542          //!     i = 0;
1543          //!     for ( i=0; i<0xA0; i++ ) {
1544          //!             WriteTW88(REG309, i);
1545          //!
1546          //!             for ( j = 0; j<27; j++ ) {
1547          //!                     WriteTW88(REG30A, ROMFONTDATA[i][j] );
1548          //!             }
1549          //!     }
1550          //!     for ( i=0; i<0x22; i++ ) {
1551          //!             WriteTW88(REG309, i+0xa0);
1552          //!
1553          //!             for ( j = 0; j<27; j++ ) {
1554          //!                     WriteTW88(REG30A, RAMFONTDATA[i][j] );
1555          //!             }
1556          //!     }
1557          //!     for ( i=0; i<(0x60-0x22); i++ ) {
1558          //!             WriteTW88(REG309, i+0x22+0xa0);
1559          //!
1560          //!             for ( j = 0; j<27; j++ ) {
1561          //!                     WriteTW88(REG30A, RAMFONTDATA[i+0x82][j] );
1562          //!             }
1563          //!     }
1564          //!#endif
1565          //!     FOsdSetAccessMode(FOSD_ACCESS_OSDRAM);  
1566          //!
1567          //!     WriteTW88(REG30B, 0xF0 );                                               // 2bit color font start
1568          //!     WriteTW88(REG_FOSD_MADD3, 0xF0 );
1569          //!     WriteTW88(REG_FOSD_MADD4, 0xF0 );
1570          //!
1571          //!     McuSpiClkRestore();
1572          //!     WriteTW88Page(page );
1573          //!}
1574          //!#endif
1575          //!
1576          //!#if 0
1577          //!void FOsdDownloadFont2Code( void )
1578          //!{
1579          //!BYTE i, j, page;
1580          //!
1581          //!     ReadTW88Page(page);
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 27  

1582          //!     WaitVBlank(1);  
1583          //!     McuSpiClkToPclk(0x02);  //with divider 1=1.5(72MHz). try 2
1584          //!
1585          //!     WriteTW88Page(PAGE3_FOSD );
1586          //!
1587          //!     WriteTW88(REG_FOSD_CHEIGHT, 0x09 );                                     // default FONT height: 18 = 9*2
1588          //!
1589          //!     WriteTW88(REG300, ReadTW88(REG300) & 0xFD ); // turn OFF bypass for Font RAM
1590          //!     WriteTW88(REG309, 0x00 ); //Font Addr
1591          //!
1592          //!     i = 0;
1593          //!     FOsdSetAccessMode(FOSD_ACCESS_FONTRAM); 
1594          //!#ifdef SUPPORT_UDFONT
1595          //!     for ( i=0; i<0xA0; i++ ) {
1596          //!             WriteTW88(REG309, i);
1597          //!
1598          //!             for ( j = 0; j<27; j++ ) {
1599          //!                     WriteTW88(REG30A, RAMFONTDATA[i][j] );
1600          //!             }
1601          //!     }
1602          //!#endif
1603          //!     FOsdSetAccessMode(FOSD_ACCESS_OSDRAM);
1604          //!
1605          //!     WriteTW88(REG30B, 0xF0 );                                               // 2bit color font start
1606          //!     WriteTW88(REG_FOSD_MADD3, 0xF0 );
1607          //!     WriteTW88(REG_FOSD_MADD4, 0xF0 );
1608          //!
1609          //!     McuSpiClkRestore();
1610          //!     WriteTW88Page(page );
1611          //!}
1612          //!#endif
1613          //!
1614          //!
1615          //!
1616          //!
1617          //!
1618          //!
1619          //!//with Attr
1620          //!//without Attr
1621          //!//void FOsdRamWriteStr(WORD addr, BYTE *str, BYTE len)
1622          //!//{
1623          //!//}
1624          //!
1625          //!//void FontOsdWinChangeBackColor(BYTE index, WORD color)
1626          //!//{
1627          //!//}
1628          //!
1629          //!
1630          //!//bank issue
1631          //!//ex:
1632          //!//   for(i=0; i < 8; i++)
1633          //!//           FontOsdBpp3Alpha_setLutOffset(i,your_table[i]); 
1634          //!#if 0
1635          //!void FontOsdBpp3Alpha_setLutOffset(BYTE i, BYTE order)
1636          //!{
1637          //!     BPP3_alpha_lut_offset[i] = order;
1638          //!}
1639          //!#endif
1640          //!
1641          //!#ifdef UNCALLED_SEGMENT_CODE
1642          //!void FontOsdWinAlphaGroup(BYTE winno, BYTE level)
1643          //!{
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 28  

1644          //!}
1645          //!#endif
1646          //!
1647          //!
1648          //!
1649          //!#if 0
1650          //!void FOsdWriteAllPalette(WORD color)
1651          //!{
1652          //!     BYTE i;
1653          //!     BYTE r30c;
1654          //!     BYTE page;
1655          //!
1656          //!     ReadTW88Page(page);
1657          //!
1658          //!     McuSpiClkToPclk(CLKPLL_DIV_2P0);
1659          //!
1660          //!     WriteTW88Page(PAGE3_FOSD );
1661          //!     r30c = ReadTW88(REG30C) & 0xC0;
1662          //!     for(i=0; i < 64; i++) {
1663          //!             WriteTW88(REG30C, r30c | i );
1664          //!             WriteTW88(REG30D, (BYTE)(color>>8));
1665          //!             WriteTW88(REG30E, (BYTE)color);
1666          //!     }
1667          //!     
1668          //!     McuSpiClkRestore();
1669          //!             
1670          //!     WriteTW88Page(page);
1671          //!}
1672          //!#endif
1673          
1674          //void SPI_ReadData2xdata     ( DWORD spiaddr, BYTE *ptr, DWORD cnt );
1675          //==>SpiFlashDmaRead(DMA_DEST_MCU_XMEM,(WORD)(BYTE *)ptr, DWORD spiaddr, DWORD cnt);
1676          #if 0
              // TODO: pls use, (dest,src,len)
              void SPI_ReadData2xdata( DWORD spiaddr, BYTE *ptr, DWORD cnt )
              {
                      WORD xaddr;
              
                      xaddr = (WORD)ptr;
              
                      WriteTW88Page(PAGE4_SPI );                                      // Set Page=4
              
              #ifdef FAST_SPIFLASH
                      WriteTW88(REG4C3, 0xC0 | CMD_x_BYTES);  //DMAMODE_R_XDATA );            // Mode = SPI -> incremental xdata
                      WriteTW88(REG4CA, CMD_x_READ );                 // Read Command
              
                      WriteTW88(REG4CB, spiaddr>>16 );                        // SPI address
                      WriteTW88(REG4CC, spiaddr>>8 );                         // SPI address
                      WriteTW88(REG4CD, spiaddr );                            // SPI address
              
                      WriteTW88(REG4C6, xaddr>>8 );                           // Buffer address
                      WriteTW88(REG4C7, xaddr );                                      // Buffer address
              
                      WriteTW88(REG4DA, cnt>>16 );                            // Read count
                      WriteTW88(REG4C8, cnt>>8 );                                     // Read count
                      WriteTW88(REG4C9, cnt );                                        // Read count
              
                      WriteTW88(REG4C4, 0x01);                                        //DMA-Read start
              #else
              
                      
              
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 29  

                      //dPrintf("\nSPI_ReadData2xdata(%lx,,%lx)",spiaddr,cnt);
                      //dPrintf(" CMD:%02bx cmdlen:%bd",CMD_x_READ,CMD_x_BYTES);
              
                      SpiFlashDmaDestType(DMA_DEST_MCU_XMEM,0);
                      SpiFlashCmd(SPICMD_x_READ, SPICMD_x_BYTES);
                      SpiFlashDmaFlashAddr(spiaddr);
                      SpiFlashDmaBuffAddr(xaddr);
                      SpiFlashDmaReadLen(cnt);
                      SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
              #endif
              }
              #endif
1718          
1719          //=============================================================================
1720          //
1721          //=============================================================================
1722          
1723          //void SPI_quadio(void)
1724          //{
1725          //      SPI_WriteEnable();
1726          //  
1727          //      WriteTW88Page(PAGE4_SPI );                      // Set Page=4
1728          //
1729          //      WriteTW88(REG4C3, 0x42 );                       // Mode = command write, Len=2
1730          //      WriteTW88(REG4CA, 0x01 );                       // SPI Command = WRITE_ENABLE
1731          //      WriteTW88(REG4C8, 0x40 );                       // Read count
1732          //      WriteTW88(REG4C4, 0x03 );                       // DMA-Write start
1733          //}
1734          
1735          
1736          //=============================================================================
1737          //              SPI DMA (SPI --> Fixed Register)
1738          //=============================================================================
1739          #if 0
              void SPI_ReadData2Reg( WORD index, DWORD spiaddr, DWORD size )
              {
                      WriteTW88Page(PAGE4_SPI);
              #if 0
                      WriteTW88(REG403, DMAMODE_RW_FIX_REG);          // Mode = SPI -> fixed register
              
                      WriteTW88(REG40a, SPICMD_x_READ );                      // Read Command
              
                      WriteTW88(REG40b, spiaddr>>16 );                        // SPI address
                      WriteTW88(REG40c, spiaddr>>8 );                         // SPI address
                      WriteTW88(REG40d, spiaddr );                            // SPI address
              
                      WriteTW88(REG406, index>>8 );                           // Buffer address
                      WriteTW88(REG407, index );                                      // Buffer address
              
                      WriteTW88(REG41a, size>>16 );                                   // Read count
                      WriteTW88(REG408, size>>8 );                                    // Read count
                      WriteTW88(REG409, size );                                               // Read count
                      
                      WriteTW88(REG404, 0x01 );                                       // DMA-Read start
              #else
              //      SpiFlashDmaDestType(dest_type,0);
              //BUGBUG: only support slow & fast.
                      SpiFlashCmd(SPICMD_x_READ, SPICMD_x_BYTES);
                      SpiFlashDmaFlashAddr(spiaddr);
                      SpiFlashDmaBuffAddr(index);
                      SpiFlashDmaReadLen(size);                                               
                      SpiFlashDmaStart(SPIDMA_READ, SPIDMA_BUSYCHECK, __LINE__);
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 30  

              #endif
              }
              #endif
1771          //=============================================================================
1772          //              SPI DMA (SPI --> Incremental Register)
1773          //=============================================================================
1774          /*
1775          void SPI_ReadData2RegInc( WORD index, DWORD spiaddr, DWORD cnt )
1776          {
1777                  WriteTW88Page(PAGE4_SPI );                              // Set Page=5
1778          
1779                  WriteTW88(REG403, DMAMODE_RW_INC_REG );         // Mode = SPI -> incremental register
1780                  WriteTW88(REG40a, SPICMD_x_READ );                              // Read Command
1781                  WriteTW88(REG40b, spiaddr>>16 );                                // SPI address
1782                  WriteTW88(REG40c, spiaddr>>8 );                         // SPI address
1783                  WriteTW88(REG40d, spiaddr );                                    // SPI address
1784                  WriteTW88(REG406, index>>8 );                           // Buffer address
1785                  WriteTW88(REG407, index );                                      // Buffer address
1786                  WriteTW88(REG41a, cnt>>16 );                                    // Read count
1787                  WriteTW88(REG408, cnt>>8 );                                     // Read count
1788                  WriteTW88(REG409, cnt );                                                // Read count
1789          
1790                  WriteTW88(REG404, 0x01 );                                       // DMA-Read start
1791          }
1792          */
1793          
1794          //=============================================================================
1795          //              SPI DMA (SPI --> Incremental XDATA)
1796          //=============================================================================
1797          //#include <intrins.h>
1798          //      _nop_();
1799          
1800          //---------------------------------------------
1801          //description
1802          //      input data format selection
1803          //      if input is PC(aRGB),DVI,HDMI, you have to set.
1804          //@param
1805          //      0:YCbCr 1:RGB
1806          //
1807          //CVBS:0x40
1808          //SVIDEO:0x54. IFSET:SVIDEO, YSEL:YIN1
1809          //---------------------------------------------
1810          #if 0
              void DecoderSetPath(BYTE path)
              {
                      WriteTW88Page(PAGE1_DECODER );  
                      WriteTW88(REG102, path );               
              }
              #endif
1817          
1818          //---------------------------------------------
1819          //
1820          //@param
1821          //      input_mode      0:RGB mode, 1:decoder mode
1822          //register
1823          //      R105
1824          //---------------------------------------------
1825          #if 0
              void DecoderSetAFE(BYTE input_mode)
              {
                      WriteTW88Page(PAGE1_DECODER );  
                      if(input_mode==0) {
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 31  

                              WriteTW88(REG105, (ReadTW88(REG105) & 0xF0) | 0x04);    //? C is for decoder, not RGB   
                      }
                      else {
                              WriteTW88(REG105, (ReadTW88(REG105) | 0x0F));   
                      }
              }
              #endif
1837          
1838          #if 0
              void DumpRegister(BYTE page)
              {
              #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      BYTE i,j;
                      WORD linestart;
                      WriteTW88Page(page);
              
                      Printf("\nP%02bd",page);
                      for(i=0; i < 16; i++)
                              Printf("-%01bx-", i);
              
                      for(i=0; i < 16; i++) {
                              linestart = page << 4;
                              linestart += i;
                              linestart <<= 4;
                              Printf("\n%03x:",linestart);
                              for(j=0; j < 16; j++) {
                                      Printf("%02bx ",ReadTW88(i*16+j));
                              }
                      }
              #else
                      BYTE i,j;
                      WORD linestart;
                      WORD addr;
              
                      Printf("\nP%02bd",page);
                      for(i=0; i < 16; i++)
                              Printf("-%01bx-", i);
              
                      for(i=0; i < 16; i++) {
                              linestart = page << 4;
                              linestart += i;
                              linestart <<= 4;
                              Printf("\n%03x:",linestart);
                              addr = page;
                              addr <<= 8;
                              for(j=0; j < 16; j++) {
                                      Printf("%02bx ",ReadTW88(addr+(i*16+j)));
                              }
                      }
              #endif
              }
              #endif
1882          
1883          
1884          //=============================================================================
1885          // REMOVED
1886          //=============================================================================
1887          
1888          //===========================================
1889          // ADC(AUX)
1890          //===========================================
1891          //internal
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 32  

1892          //note: NO PAGE change. Parent have to take care.
1893          #ifdef SUPPORT_ANALOG_SENSOR
              #ifdef SUPPORT_TOUCH
              //desc: Read ADC value
              //@param
              //      0:X position
              //      1:Z1 position
              //      2:Z2 position
              //      3:Y position
              //      4: Aux0 value
              //      5: AUX1 value
              //      6: AUX2 value
              //      7: AUX3 value
              //register
              //      R0B0
              //      R0B2[7:0]R0B3[3:0]      TSC ADC Data
              //internal
              #ifdef TEST_BK111109
              #endif
              #endif
              #endif
1913          
1914          
1915          #ifdef SUPPORT_TOUCH
              #ifdef TEST_BK111109
              //??//desc:Read Z (presure) data.
              //??//return
              //??//  presure data
              //??//  if fail, return 0xFF;
              //??//Note:assuem page 0.
              //??BYTE _TscGetZ(void)
              //??{
              //??    WORD z1, z2;
              //??    z1 = _TscGetAdcDataOutput(ADC_MODE_Z1);
              //??    if(z1 == 0) return (255);
              //??    
              //??    z2 = _TscGetAdcDataOutput(ADC_MODE_Z2);
              //??
              //??    dPrintf("\nTouch Z1:%d, Z2:%d", z1, z2 );
              //??    Z1 = z1;
              //??    Z2 = z2;
              //??    return (z2 - z1);               
              //??}
              //??//desc:Read X position value
              //??//global
              //??//  TouchX : Latest pressed X position value
              //??//Note:assuem page 0.
              //??void _TscGetX(void)
              //??{
              //??    TouchX = _TscGetAdcDataOutput(ADC_MODE_X);
              //??    //dPrintf("\nTouch X:%d", TouchX );
              //??}
              //??//desc:Read Y position value
              //??//global
              //??//  TouchX : Latest pressed Y position value
              //??//Note:assuem page 0.
              //??void _TscGetY(void)
              //??{
              //??    TouchY = _TscGetAdcDataOutput(ADC_MODE_Y);
              //??    //dPrintf("\nTouch Y:%d", TouchY );
              //??}
              #endif
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 33  

              #endif //..
1955          
1956          //=============================================================================
1957          //              AUX 
1958          //=============================================================================
1959          #if 0 
              //#ifdef SUPPORT_KEYPAD
              void InitTscAdc(BYTE mode)
              {
                       WriteTW88Page(PAGE0_TOUCH );
                       WriteTW88(REG0B0, mode );                              // 0000-0xxx & mode
                       if(mode & 0x04) {
                              //aux
                              WriteTW88(REG0B1, 0x00 );                       // enable the ready interrupt
                              WriteTW88(REG0B4, 0x08 | 0x04 );        // div32.Continuous sampling for TSC_ADC regardless of the START comman
             -d 
                       }
                       else {
                              //touch
                              WriteTW88(REG0B1, 0x80 );                       // disable the ready interrupt
                              WriteTW88(REG0B4, 0x08 );                       // div2. Continuous sampling for TSC_ADC regardless of the START command
                       }
              }
              #endif
1977          
1978          //global --BKTODO:see InitTouch also..
1979          //@param
1980          //      auxn: 0~3
1981          #if 0
              //#ifdef SUPPORT_TOUCH
              //#ifdef SUPPORT_KEYPAD
              void InitAUX( BYTE auxn )
              {
              #if 0
                       WriteTW88Page(PAGE0_TOUCH );
                       WriteTW88(REG0B0, 0x04 | auxn);                        //  
                       WriteTW88(REG0B1, 0x00 );                              // enable Ready Interrupt
                       WriteTW88(REG0B4, 0x08 | 0x04 );               // continuous sampling. div32  
              #endif
                      //init AUX0
                      InitTscAdc(auxn | 0x04);        
              }
              #endif
1996          
1997          
1998          #ifdef SUPPORT_TOUCH
              //desc
              //      Check the touch presure (Z value) and update TouchX and TouchY.
              //update
              //      TouchPressed
              //      TouchDown
              //      TouchX & TouchY
              #ifdef TEST_BK111109
              #endif //..TEST_BK111109
              #endif
2008          
2009          #if 0
              void UpdateTouchCalibXY(BYTE index,WORD x, WORD y)
              {
                      TouchCalibX[index] = x;
                      TouchCalibY[index] = y;
              }
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 34  

              #endif
2016          //WORD TouchGetCalibedX(BYTE index) { return TouchCalibX[index]; }
2017          //WORD TouchGetCalibedY(BYTE index) { return TouchCalibY[index]; }
2018          //void TouchSetCalibedXY(BYTE index, WORD x, WORD y) 
2019          //{
2020          //      TouchCalibX[index] = x;
2021          //      TouchCalibY[index] = y;
2022          //}
2023          
2024          //=============================================================================
2025          //              SenseTouch 
2026          //=============================================================================
2027          //return
2028          //      1:Yes. return the position info
2029          //      0:No input.
2030          #ifdef SUPPORT_TOUCH
              //return
              //      1: success
              //      0: fail
              #ifdef TEST_BK111109
              //!BYTE SenseTouch( WORD *xpos, WORD *ypos)
              //!{
              //!     bit TouchPressedOld;
              //!
              //!     TouchPressedOld = TouchPressed;
              //!
              //!     CheckTouch();
              //!     if (!TouchPressed ) {
              //!             if(TouchPressedOld)
              //!                     dTscPuts("\nTsc UP");
              //!             return(0);
              //!     }
              //!     //
              //!     //
              //!     //
              //!     if ( TouchPressedOld ) {                // before it pressed with start
              //!             _TscGetScreenPos();
              //!             *xpos = PosX;
              //!             *ypos = PosY;
              //!             dPuts("\nSenseTouch:");
              //!             if(TouchPressedOld)     dPuts(" OLD ");
              //!             if(TouchPressed) dPuts(" NEW");
              //!             if(TouchDown) dPuts(" DN"); 
              //!             return (1);
              //!     }
              //!     else {
              //!             _TscGetScreenPos();
              //!             *xpos = PosX;
              //!             *ypos = PosY;
              //!             dPuts("\nSenseTouch:");
              //!             if(TouchPressedOld)     dPuts(" OLD ");
              //!             if(TouchPressed) dPuts(" NEW"); 
              //!             if(TouchDown) dPuts(" DN"); 
              //!             return (1);
              //!     }
              //!     return ( 0 );
              //!}
              #endif //..TEST_BK111109
              #endif
2074          
2075          //=============================================================================
2076          //              GetTouch 
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 35  

2077          //=============================================================================
2078          #ifdef SUPPORT_TOUCH
              //!void GetTouch( void )
              //!{
              //!     WORD movX, movY; //move value
              //!     BYTE dirX, dirY; //move direction
              //!     BYTE TC;                 //Touch change counter
              //!     bit      TP;             //pressed status
              //!WORD /*pressEndTime,*/ tsc_dt;
              //!
              //!     //update value 
              //!     EA = 0;
              //!     TC = CpuTouchChanged;
              //!     TP = CpuTouchPressed;
              //!     TouchX = CpuTouchX;
              //!     TouchY = CpuTouchY;
              //!     EA = 1;
              //!
              //!     if ( TouchChangedOld == TC ) return;                    // no measurement
              //!     TouchChangedOld = TC;
              //!
              //!     if ( TouchPressedOld ) {                // before it pressed with start
              //!             //pressed->
              //!             if ( TP ) {
              //!                     //pressed->pressed
              //!                     //pressEndTime = tic01;  
              //!                     TscTimeEnd = SystemClock;
              //!                     _TscGetScreenPos();
              //!                     //direction. 
              //!                     if ( OldPosX > PosX ) {
              //!                             dirX = 0;                                       // decrease
              //!                             movX = OldPosX - PosX;
              //!                     }
              //!                     else {
              //!                             dirX = 1;                                       // increase
              //!                             movX = PosX - OldPosX;
              //!                     }
              //!                     if ( OldPosY > PosY ) {
              //!                             dirY = 0;                                       // decrease
              //!                             movY = OldPosY - PosY;
              //!                     }
              //!                     else {
              //!                             dirY = 1;                                       // increase
              //!                             movY = PosY - OldPosY;
              //!                     }
              //!                     if ( TouchStatus > TOUCHMOVE ) {
              //!#if 1         //BK111109
              //!                             //update direction
              //!                             if ( movX > movY ) {
              //!                                     if (( movX / movY ) > 2) {
              //!                                             if (dirX)
              //!                                                     TouchStatus = TOUCHMOVERIGHT;
              //!                                             else
              //!                                                     TouchStatus = TOUCHMOVELEFT;
              //!                                     }
              //!                             }
              //!                             else {
              //!                                     if (( movY / movX ) > 2) {
              //!                                             if (dirY)
              //!                                                     TouchStatus = TOUCHMOVEDOWN;
              //!                                             else
              //!                                                     TouchStatus = TOUCHMOVEUP;
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 36  

              //!                                     }
              //!                             }
              //!#endif
              //!                             OldPosX = PosX;
              //!                             OldPosY = PosY;
              //!                     }
              //!                     else 
              //!                     if (( movX > TSC_MOVE_MIN ) || ( movY > TSC_MOVE_MIN )) {
              //!                             if ( movX > movY ) {
              //!                                     if (( movX / movY ) > 2) {
              //!                                             if (dirX)
              //!                                                     TouchStatus = TOUCHMOVERIGHT;
              //!                                             else
              //!                                                     TouchStatus = TOUCHMOVELEFT;
              //!                                     }
              //!                             }
              //!                             else {
              //!                                     if (( movY / movX ) > 2) {
              //!                                             if (dirY)
              //!                                                     TouchStatus = TOUCHMOVEDOWN;
              //!                                             else
              //!                                                     TouchStatus = TOUCHMOVEUP;
              //!                                     }
              //!                             }
              //!                             OldPosX = PosX;
              //!                             OldPosY = PosY;
              //!                     }
              //!                     //TscPrintf("\nTouch Postion: xpos=%d, ypos=%d, endTime:%d", PosX, PosY, pressEndTime );
              //!//                   TscPrintf("\rTouch Postion: xpos=%d ypos=%d %dx%d  z1:%d endTime:%d", PosX, PosY, TouchX, TouchY, 
             -Z1, pressEndTime );
              //!//                   TscPrintf("\nTouch Postion: xpos=%d ypos=%d %dx%d  z1:%d endTime:%d", PosX, PosY, TouchX, TouchY, 
             -Z1, pressEndTime );
              //!//                   dTscPrintf("\nTouch Postion: xpos=%d ypos=%d %dx%d  z:%d(0x%x-0x%x) endTime:%ld", PosX, PosY, Touc
             -hX, TouchY, Z2-Z1,Z2,Z1, TscTimeEnd - TscTimeStart );
              //!//                   dTscPrintf("\nTouch Postion: xpos=%d ypos=%d %dx%d  z:%d(0x%x-0x%x) endTime:%ld", PosX, PosY, Touc
             -hX, TouchY, CpuZ2-CpuZ1,CpuZ2,CpuZ1, TscTimeEnd - TscTimeStart );
              //!//                   dTscPrintf("\nTouch Postion: xpos=%d ypos=%d %dx%d  z:%d endTime:%ld", PosX, PosY, TouchX, TouchY,
             - CpuZ1, TscTimeEnd - TscTimeStart );
              //!                     dTscPrintf("\nTouch Position:xypos=%dx%d TouchXY=%dx%d  z:%d(0x%x-0x%x) endTime:%ld", PosX, PosY, To
             -uchX, TouchY, CpuZ2-CpuZ1,CpuZ2,CpuZ1, TscTimeEnd - TscTimeStart );
              //!                     PrintTouchStatus(TouchStatus,0,0,0);    
              //!                     //OsdWinScreen( 0, PosX, PosY, 10, 10 );
              //!             }
              //!             else {
              //!                     //pressed->detached
              //!                     //TouchStatus
              //!                     //      TOUCHMOVE|TOUCHMOVED=>TOUCHEND  
              //!                     //      TOUCHCLICK=>TOUCHDOUBLECLICK
              //!                     //      ?=>TOUCHCLICK
              //!
              //!                     //use previous TscTimeEnd that is saved at the last pressed state.
              //!
              //!                     dTscPrintf("\nTouchEndTime:%ld", TscTimeEnd);
              //!                     if(TscTimeEnd < TscTimeStart) {
              //!                             //overflow
              //!                             tsc_dt = 0xFFFFFFFF - TscTimeStart + TscTimeEnd;
              //!                     }
              //!                     else
              //!                             tsc_dt = TscTimeEnd - TscTimeStart;
              //!                     dTscPrintf("  Touch duration:%d", tsc_dt); //max 65536ms.
              //!
              //!                     if ( OldPosX > StartX ) {
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 37  

              //!                             dirX = 0;                                       // decrease
              //!                             movX = OldPosX - StartX;
              //!                     }
              //!                     else {
              //!                             dirX = 1;                                       // increase
              //!                             movX = StartX - OldPosX;
              //!                     }
              //!                     if ( OldPosY > StartY ) {
              //!                             dirY = 0;                                       // decrease
              //!                             movY = OldPosY - StartY;
              //!                     }
              //!                     else {
              //!                             dirY = 1;                                       // increase
              //!                             movY = StartY - OldPosY;
              //!                     }
              //!                     veloX = 1000;
              //!                     veloX *= movX;
              //!                     veloX /= tsc_dt;
              //!                     veloY = 1000;
              //!                     veloY *= movY;
              //!                     veloY /= tsc_dt;
              //!                     dTscPrintf("\nVelocity X:%ld Y:%ld", veloX,veloY );
              //!
              //!#if 0 //BK111108
              //!                     if (( TouchStatus >= TOUCHMOVE) || ( TouchStatus == TOUCHMOVED ))
              //!                             TouchStatus = TOUCHEND;
              //!#else
              //!                     if (TouchStatus >= TOUCHMOVE) {
              //!                             TouchStatus = TOUCHMOVED;
              //!                     }
              //!#endif
              //!                     else    {
              //!                             if((TscTimeLastEnd + 10) > TscTimeStart) {
              //!                                     TouchStatus = TOUCHCLICK;
              //!                             }
              //!                             else if((TscTimeLastEnd + 100) > TscTimeStart) {
              //!                                     TouchStatus = TOUCHDOUBLECLICK;
              //!                             }
              //!                             else {
              //!                                     if(tsc_dt > 1000)       TouchStatus = TOUCHLONGCLICK;           //more then 10sec, it is a special..
              //!                                     else    TouchStatus = TOUCHCLICK;
              //!                             }
              //!                     }
              //!                     //EndX = OldPosX;
              //!                     //EndY = OldPosY;
              //!                     //dTscPrintf("\nTouch Postion: xpos=%d, ypos=%d", OldPosX, OldPosY);
              //!                     //dTscPrintf("\nTouch Move: movx=(%bd)%d, movy=(%bd)%d", dirX, movX, dirY, movY);
              //!                     //dTscPrintf("\nTouch Velocity: vx=%ld, vy=%ld", veloX, veloY );
              //!                     //dTscPrintf("\nTouchEndTime:%d", pressEndTime);
              //!                     LastTouchStatus = TouchStatus;
              //!
              //!
              //!                     //dTscPrintf("\nTouch End:  OLDxypos=%dx%d TouchXY=%dx%d  z:%d(0x%x-0x%x) endTime:%ld", OldPosX, Old
             -PosY, TouchX, TouchY, CpuZ2-CpuZ1,CpuZ2,CpuZ1, TscTimeEnd - TscTimeStart );
              //!                     //dTscPrintf("\nTouch End:  OLDxypos=%dx%d Move: movx=%s%d, movy=%s%d Velocity: vx=%ld, vy=%ld Touch
             -EndTime:%d", 
              //!                     //      OldPosX, OldPosY, 
              //!                     //      dirX ? "+" : "-", movX, 
              //!                     //      dirY ? "+" : "-", movY, 
              //!                     //      veloX, veloY, 
              //!                     //      pressEndTime );
              //!                     dTscPrintf("\nTouch End:  OLDxypos=%dx%d Move: movx=%s%d, movy=%s%d Velocity: vx=%ld, vy=%ld", 
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 38  

              //!                             OldPosX, OldPosY, 
              //!                             dirX ? "+" : "-", movX, 
              //!                             dirY ? "+" : "-", movY, 
              //!                             veloX, veloY);
              //!                     PrintTouchStatus(TouchStatus,0,0,0);
              //!             }
              //!     }
              //!     else {
              //!             //normal ->
              //!             if ( TP ) {
              //!                     //OLD: normal->pressed
              //!                     //if((TouchStatus==TOUCHMOVED) & ((TscTimeLastEnd + 10) > TscTimeStart)) {
              //!                     if(((TouchStatus==TOUCHMOVED) || (TouchStatus==TOUCHEND && LastTouchStatus==TOUCHMOVED) )
              //!                     & ((TscTimeLastEnd + 10) > SystemClock)) {
              //!                             TouchStatus = TOUCHMOVE;        
              //!
              //!
              //!                             _TscGetScreenPos();
              //!                             /*OldPosX = StartX = PosX; */
              //!                             /*OldPosY = StartY = PosY; */
              //!                             dTscPrintf("\nTouch MOVE_AGAIN:xypos=%dx%d TouchXY=%dx%d  z:%d(0x%x-0x%x) endTime:%ld", PosX, PosY,
             - TouchX, TouchY, CpuZ2-CpuZ1,CpuZ2,CpuZ1, TscTimeEnd - TscTimeStart );
              //!                     }
              //!                     else if ((TscTimeEnd+10) > SystemClock && TouchStatus==TOUCHMOVED ) {
              //!                             dTscPrintf("\nTouch MOVE_AGAIN: dt:%ld",SystemClock- TscTimeEnd);
              //!                             TouchStatus = TOUCHMOVE;
              //!                     }
              //!                     else {
              //!                             //normal->pressed
              //!                             TouchStatus = TOUCHPRESS;
              //!                             /*pressEndTime =*/ /*pressStartTime = tic01; */
              //!                             TscTimeLastEnd = TscTimeEnd;
              //!                             TscTimeStart = /*TscTimeEnd =*/ SystemClock;
              //!                             _TscGetScreenPos();
              //!                             OldPosX = StartX = PosX;
              //!                             OldPosY = StartY = PosY;
              //!     //                      TscPrintf("\nTouch Start with: xpos=%d, ypos=%d, startTime:%d", StartX, StartY, pressStartTime );
              //!     //                      TscPrintf("\rTouch Start : xpos=%d ypos=%d %dx%d  z1:%d startTime:%d", StartX, StartY, TouchX, To
             -uchY, Z1, pressStartTime );
              //!     //                      TscPrintf("\rTouch Start : xpos=%d ypos=%d %dx%d  z1:%d startTime:%d", StartX, StartY, TouchX, To
             -uchY, Z1, pressStartTime );
              //!     //                      dTscPrintf("\nTouch Start : xpos=%d ypos=%d %dx%d  z:%d startTime:%d", StartX, StartY, TouchX, To
             -uchY, CpuZ1, pressStartTime );
              //!                             //OsdWinScreen( 0, PosX, PosY, 10, 10 );
              //!                             dTscPrintf("\nTouch Start:   xypos=%dx%d TouchXY=%dx%d  z:%d(0x%x-0x%x) endTime:%ld", PosX, PosY, T
             -ouchX, TouchY, CpuZ2-CpuZ1,CpuZ2,CpuZ1, TscTimeEnd - TscTimeStart );
              //!                     }
              //!             }
              //!             else {
              //!             }
              //!     }
              //!     TouchPressedOld = TP;
              //!}
              //!
              #endif  //..SUPPORT_TOUCH
2305          
2306          //=============================================================================
2307          //              GetVeloX 
2308          //              GetVeloY 
2309          //=============================================================================
2310          #ifdef UNCALLED_SEGMENT
              WORD GetVeloX( void )
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 39  

              {...}
              WORD GetVeloY( void )
              {...}
              #endif
2316          
2317          //=============================================================================
2318          //              CheckTouchStatus 
2319          //=============================================================================
2320          #ifdef TEST_BK111109
              //!BYTE CheckTouchStatus( WORD *xpos, WORD *ypos)
              //!{
              //!     static BYTE old_TouchStatus;
              //!
              //!     GetTouch();
              //!     *xpos = OldPosX;
              //!     *ypos = OldPosY;
              //!     if(old_TouchStatus != TouchStatus) {
              //!             PrintTouchStatus(TouchStatus,OldPosX,OldPosY, 1);
              //!#if 0
              //!             switch(TouchStatus) {
              //!             case TOUCHPRESS:                dPrintf("\nTOUCHPRESS xpos=%d ypos=%d",OldPosX,OldPosY); break;
              //!             case TOUCHMOVED:                dPuts  ("\nTOUCHMOVED"); break;
              //!             case TOUCHEND:                  dPuts  ("\nTOUCHEND"); break;
              //!             case TOUCHCLICK:                dPrintf("\nTOUCHCLICK xpos=%d ypos=%d",OldPosX,OldPosY); break;
              //!             case TOUCHDOUBLECLICK:  dPrintf("\nTOUCHDOUBLECLICK xpos=%d ypos=%d",OldPosX,OldPosY); break;
              //!             case TOUCHMOVE:                 dPuts  ("\nTOUCHMOVE"); break;
              //!             case TOUCHMOVEUP:               dPuts  ("\nTOUCHMOVEUP"); break;
              //!             case TOUCHMOVEDOWN:     dPuts  ("\nTOUCHMOVEDOWN"); break;
              //!             case TOUCHMOVELEFT:     dPuts  ("\nTOUCHMOVELEFT"); break;
              //!             case TOUCHMOVERIGHT:    dPuts  ("\nTOUCHMOVERIGHT"); break;
              //!             default:                                dPrintf("\nTOUCH UNKNOWN:%bd", TouchStatus); break;
              //!             }
              //!#endif
              //!             old_TouchStatus = TouchStatus;
              //!     }
              //!     return( TouchStatus );
              //!}
              #endif
2350          
2351          #if 0  //remove 110207
              //LutOffset. 0, 64, 126,...255
              //size 256 table with 8bpp will be 256*4 = 0x400
              //BK110207: LUT 256->512. Need 9bit
              void SpiOsdLoadLUTS(WORD LutOffset, WORD size, DWORD    address )
              {
              }
              #endif
2359          
2360          //#include "Data\DataInitCVBSFull.inc"
2361          #if 0
              code BYTE default_register[] = {
              // cmd  reg             mask    value
                      w, 0xFF, 0x00,
                      r,      0x02,   0x00,   0x00,
                      r,      0x03,   0x00,   0xFF,
                      r,      0x04,   0xF0,   0x00,
                      r,      0x06,   0x00,   0x00,
                      r,      0x07,   0x00,   0x00,
              };
              void CheckHWDefaultRegister()
              {
              }
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 40  

              #endif
C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 41  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


C51 COMPILER V9.00   JUNK                                                                  06/05/2014 15:35:09 PAGE 42  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
