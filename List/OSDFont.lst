C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE OSDFONT
OBJECT MODULE PLACED IN .\Output\OSDFont.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE OSDFont.c LARGE OPTIMIZE(9,SPEED) REGFILE(.\Output\TW8835_REV31.ORC) BROWSE
                    - MODDP2 DEFINE(EVB_30,EVB_31,nullFn=//) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\List\OSDFont.lst) OBJECT(.\Output\OSDFon
                    -t.obj)

line level    source

   1          /**
   2           * @file
   3           * OSDFont.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *      Copyright (C) 2011~2012 Intersil Corporation
   8           * @section DESCRIPTION
   9           *      low level FontOSD layer
  10           *
  11           * errata
  12           *      MultiFont can not be overlapped.
  13           *
  14           *
  15           *
  16           */
  17          #include "config.h"
  18          #include "reg.h"
  19          #include "typedefs.h"
  20          #include "TW8835.h"
  21          #include "global.h"
  22          
  23          #include "CPU.h"
  24          #include "printf.h"
  25          #include "Util.h"
  26          
  27          #include "i2c.h"
  28          #include "spi.h"
  29          
  30          #include "FOsd.h"
  31          #include "SpiFlashMap.h"
  32          #include "SOsdMenu.h"
  33          #include "settings.h"
  34          #include "inputCtrl.h"
  35          
  36          
  37          //=====================================
  38          // default LUT(palette) color
  39          //=====================================
  40          /**
  41          * FOSD HW 16 default color table
  42          */
  43          code WORD FOsdHwDefPaletteBpp1[16] = {
  44                  /*0:Black*/                     FOSD_COLOR_VALUE_BLACK,
  45                  /*1:DarkBlue*/          FOSD_COLOR_VALUE_DBLUE,
  46                  /*2:Green*/                     FOSD_COLOR_VALUE_GREEN,
  47                  /*3:DarkCyan*/          FOSD_COLOR_VALUE_DCYAN,
  48                  /*4:DarkRed*/           FOSD_COLOR_VALUE_DRED,
  49                  /*5:DarkMagenta*/       FOSD_COLOR_VALUE_DMAGENTA,
  50                  /*6:DarkYellow*/        FOSD_COLOR_VALUE_DYELLOW,
  51                  /*7:Gray*/                      FOSD_COLOR_VALUE_GRAY,
  52                  /*8:Silver*/            FOSD_COLOR_VALUE_SILVER,
  53                  /*9:Blue*/                      FOSD_COLOR_VALUE_BLUE,
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 2   

  54                  /*A:Lime*/                      FOSD_COLOR_VALUE_LIME,
  55                  /*B:Cyan*/                      FOSD_COLOR_VALUE_CYAN,
  56                  /*V:Red*/                       FOSD_COLOR_VALUE_RED,
  57                  /*D:Magenta*/           FOSD_COLOR_VALUE_MAGENTA,
  58                  /*E:Yellow*/            FOSD_COLOR_VALUE_YELLOW,
  59                  /*F:White*/                     FOSD_COLOR_VALUE_WHITE 
  60          };
  61          /**
  62          * FOSD SW 16 default color table
  63          */
  64          code WORD FOsdSwDefPaletteBpp1[16] = {
  65                  /*0:Black*/                     FOSD_COLOR_VALUE_BLACK,
  66                  /*9:Blue*/                      FOSD_COLOR_VALUE_BLUE,
  67                  /*A:Lime*/                      FOSD_COLOR_VALUE_LIME,
  68                  /*B:Cyan*/                      FOSD_COLOR_VALUE_CYAN,
  69                  /*V:Red*/                       FOSD_COLOR_VALUE_RED,
  70                  /*D:Magenta*/           FOSD_COLOR_VALUE_MAGENTA,
  71                  /*E:Yellow*/            FOSD_COLOR_VALUE_YELLOW,
  72                  /*F:White*/                     FOSD_COLOR_VALUE_WHITE, 
  73          
  74                  /*7:Gray*/                      FOSD_COLOR_VALUE_GRAY,
  75                  /*1:DarkBlue*/          FOSD_COLOR_VALUE_DBLUE,
  76                  /*2:Green*/                     FOSD_COLOR_VALUE_GREEN,
  77                  /*3:DarkCyan*/          FOSD_COLOR_VALUE_DCYAN,
  78                  /*4:DarkRed*/           FOSD_COLOR_VALUE_DRED,
  79                  /*5:DarkMagenta*/       FOSD_COLOR_VALUE_DMAGENTA,
  80                  /*6:DarkYellow*/        FOSD_COLOR_VALUE_DYELLOW,
  81                  /*8:Silver*/            FOSD_COLOR_VALUE_SILVER
  82          };
  83          /**
  84          * FOSD 2 BPP default color table
  85          */
  86          code WORD FOsdDefPaletteBpp2[4] = {     
  87                  0xF7DE,0x0000,0x5AAB,0xC000
  88          }; 
  89          
  90          /**
  91          * FOSD 3 BPP default color table
  92          */
  93          code WORD FOsdDefPaletteBpp3[8] = {     
  94                  0xFFFF,0x0000,0xDEDB,0x9492,0x6B6D,0xB5B6,0x4A49,0x2124         //consolas22_16x26
  95          };
  96          /**
  97          * FOSD 3 BPP Alpha default color table
  98          */
  99          code BYTE FOsdDefPaletteBpp3Alpha[8] = { 1,7,6,4,3,5,2,0 };             //consolas22_16x26
 100           
 101          /**
 102          * FOSD 3 BPP default color table
 103          */
 104          code WORD FOsdDefPaletteBpp4[16] = {
 105                  0xD6BA,0x20E3,0xF79E,0x62E8,0xE104,0xA944,0x39A6,0x7BAC,
 106                  0x51A6,0xC617,0x9CD1,0xB5B5,0x9BC9,0xDD85,0xF643,0xAC87
 107          };
 108          
 109          
 110          #ifdef SUPPORT_UDFONT
              #include "data/RamFontData.inc"
              #endif
 113          
 114          
 115          /**
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 3   

 116          * FOSD FontInfo_s
 117          */
 118          struct FontInfo_s {
 119                  char name[16];  //con, con+gray, def
 120                  BYTE w,h;
 121                  BYTE bpp;
 122                  BYTE loc;               //fontram location
 123          
 124                  WORD bpp2,bpp3,bpp4,max;                                                                
 125                                                                          
 126                  BYTE bpp2_attr;         //for MultiBPP  (LUT index >> 2)
 127                  BYTE bpp3_attr;         //for MultiBPP  (LUT index >> 2)
 128                  BYTE bpp4_attr;         //for MultiBPP  (LUT index >> 2)
 129          };
 130          
 131          /**
 132          * FOSD FontWinInfo_s
 133          */
 134          struct FontWinInfo_s {
 135                  WORD osdram;            //osdram start offset, 0~511.
 136                  WORD sx,sy;                     //pixel base
 137                  BYTE column,line;       //char base
 138                  BYTE x,y;                       //last position. char base.
 139          
 140                  BYTE bpp1_attr;         //(bgColor << 4) | fgColor
 141          };
 142          
 143          /**
 144          * FOSD FontOsdInfo_s
 145          */
 146          struct FontOsdInfo_s {
 147                  struct FontInfo_s font;
 148                  struct FontWinInfo_s win[FOSD_MAX_OSDWIN];
 149          } FontOsdInfo;
 150          
 151          
 152          //R307[7:0]R308[7:0]    OSD RAM Data Port
 153          //R309                                  Font RAM Address
 154          //R30A                                  Font RAM Data Port
 155          //R30B                                  Multi-Color Start Position
 156          //R30C                                  Font OSD Control
 157          //R30D[7:0]R30E[7:0]    Character Color Look-up table data port
 158          
 159          
 160          #define DMA_SIZE        0x8000L
 161          
 162          #define FONTWIN1_ST             REG310
 163          #define FONTWIN2_ST             REG320
 164          #define FONTWIN3_ST             REG330
 165          #define FONTWIN4_ST             REG340
 166          #define FONTWIN5_ST             REG350
 167          #define FONTWIN6_ST             REG360
 168          #define FONTWIN7_ST             REG370
 169          #define FONTWIN8_ST             REG380
 170          
 171          #define FONTWIN_ENABLE  0X00
 172          #define FONT_ALPHA              0x01
 173          
 174          #ifdef SUPPORT_8BIT_CHIP_ACCESS
              code    BYTE    FOSDWinBase[] = { FONTWIN1_ST, FONTWIN2_ST, FONTWIN3_ST, FONTWIN4_ST };
              #else
 177          #ifdef MODEL_TW8836
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 4   

              code    WORD    FOSDWinBase[] = { FONTWIN1_ST, FONTWIN2_ST, FONTWIN3_ST, FONTWIN4_ST, FONTWIN5_ST, FONTWIN6_ST, 
             -FONTWIN7_ST, FONTWIN8_ST };
              #else
 180          code    WORD    FOSDWinBase[] = { FONTWIN1_ST, FONTWIN2_ST, FONTWIN3_ST, FONTWIN4_ST };
 181          #endif
 182          #endif
 183          
 184          //BKTODO: move default font in this bank. 
 185          //it have a BANK issue.
 186                   BYTE BPP3_alpha_lut_offset[8];                                 //need base_lut to use.
 187          code BYTE BPP3_alpha_value[8]={0,2,3,4,5,6,7,8};
 188          
 189          
 190          /**
 191          * print FontInfo
 192          */
 193          void DumpFontInfo(void)
 194          {
 195   1              ePrintf("\nFont:%s",FontOsdInfo.font.name);
 196   1              ePrintf(" %bdx%bd", FontOsdInfo.font.w,FontOsdInfo.font.h);
 197   1              ePrintf(" bpp2:%x",FontOsdInfo.font.bpp2);
 198   1              ePrintf(" bpp3:%x",FontOsdInfo.font.bpp3);
 199   1              ePrintf(" bpp4:%x",FontOsdInfo.font.bpp4);
 200   1              ePrintf(" end:%x",FontOsdInfo.font.max);
 201   1      }
 202          
 203          //=============================================================================
 204          //r300[0]
 205          //=============================================================================
 206          /**
 207          * set FOSD OsdRam FIFO
 208          *
 209          * OsdRam uses a PCLK domain.
 210          *
 211          * If FIFO is ONed, HW has a 8 FIFO, and updata OsdRam on HBlank(Horizontal).
 212          * If FW wants to update the OsdRam related registers more than 8,
 213          * FW has to wait one HBlank.
 214          *
 215          * If FIFO is OFFed, FW has to execute the updata on VBlank(Vertical).
 216          * If FW turns on FIFO before HW updates a OsdRam related registers,
 217          * HW can write data|attr at the ramdom position.
 218          * So, FW has to wait 1 VBlank.
 219          *
 220          * oldname:FOsdRamFifoBypass
 221          * 
 222          * HW default: FIFO ON
 223          * SW prefer: FIFO OFF
 224          *
 225          *       register
 226          *       r300[0] 1:Bypass OSD RAM FIFO.
 227          */
 228          void FOsdRamSetFifo(BYTE fOn, BYTE vdelay)
 229          {
 230   1              if(vdelay)
 231   1                      WaitVBlank(vdelay);
 232   1      
 233   1              WriteTW88Page(PAGE3_FOSD);
 234   1              if(fOn) WriteTW88(REG300, ReadTW88(REG300) & ~0x01);    //turn off bypass, so FIFO will be ON.
 235   1              else    WriteTW88(REG300, ReadTW88(REG300) | 0x01);             //turn on bypass, so FIFO will be OFF.
 236   1      }
 237          
 238          
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 5   

 239          /**
 240          * set FOSD FontRam Fifo
 241          *
 242          * FIFO has to be OFF if FW uses a DMA.
 243          * If FW uses IO method, FW has to wait HBlank every 8 data.
 244          *
 245          * HW default: FIFO ON
 246          * SW default: FIFO OFF
 247          *
 248          *       register
 249          *       r300[1] 1:Bypass FONTRAM FIFO
 250          * 
 251          */
 252          void FOsdFontSetFifo(BYTE fOn)
 253          {
 254   1              WriteTW88Page(PAGE3_FOSD);
 255   1              if(fOn) WriteTW88(REG300, ReadTW88(REG300) & ~0x02);    //turn off bypass, so FIFO will be ON.
 256   1              else    WriteTW88(REG300, ReadTW88(REG300) |  0x02);    //turn on bypass, so FIFO will be OFF.
 257   1      }
 258          
 259          /**
 260          * set FONT Width & Height
 261          *
 262          *       r300[4]         0: CharWidth 12. 1:CharWidth 18.
 263          *       r350[4:0]       (Font OSD Char Height ) >> 1
 264          *       r351[6:0]       Sub-Font Total Count. used bytes for one font. if 12x18, use 27.
 265          */
 266          void FOsdSetFontWidthHeight(BYTE width, BYTE height)
 267          {
 268   1              BYTE value;
 269   1              WriteTW88Page(PAGE3_FOSD );
 270   1      
 271   1              value = ReadTW88(REG300);       
 272   1              if(width==16)   value |= 0x10;                                  //width 16
 273   1              else                    value &= 0xEF;                                  //   or 12
 274   1              WriteTW88(REG300, value ); 
 275   1      
 276   1              WriteTW88(REG_FOSD_CHEIGHT, height >> 1 );                                      //Font height(2~32)
 277   1              WriteTW88(REG_FOSD_MUL_CON, (width >> 2) * (height >> 1));      //sub-font total count.
 278   1      }
 279          
 280          
 281          //-------------------------------------------------------------------
 282          /**
 283          * calculate and set FontOSD DE value
 284          *
 285          * Font OSD DE delay calculation 
 286          * HDE = REG(0x210[7:0])
 287          * PCLKO = REG(0x20d[1:0]) {0,1,1,1}
 288          * Mixing = REG(0x400[1:1])
 289          *       
 290          * result = HDE + PCLKO - (Mixing*2 + 36)
 291          *
 292          * NOTE: minimum DE value.
 293          *       - 1BPP: 3
 294          *       - 2BPP: 4
 295          *       - 3BPP: 5
 296          *       - 4BPP: 6
 297          *
 298          *       r303[7:0]
 299          */ 
 300          void FOsdSetDeValue(void)
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 6   

 301          {
 302   1      #if 1 //NEW, But NG
 303   1              XDATA BYTE temp;
 304   1              BYTE HDE,PCLKO,Mixing;
 305   1      
 306   1              WriteTW88Page(PAGE2_SCALER );
 307   1              HDE = ReadTW88(REG210 );                                // HDE
 308   1              PCLKO = ReadTW88(REG20D) & 0x03;
 309   1              //if(PCLKO == 3)
 310   1                      PCLKO = 1;
 311   1      
 312   1              WriteTW88Page(PAGE4_SOSD );
 313   1              Mixing = ReadTW88(REG400) & 0x02 ? 1 : 0;
 314   1      
 315   1              if((HDE + PCLKO) < (Mixing*2 + 36) ) { //I don't want a negative value.
 316   2                      //temp = 0;
 317   2                      temp = (Mixing*2 + 36) - HDE - PCLKO + 1;
 318   2              }
 319   1              else
 320   1                      temp = HDE + PCLKO - (Mixing*2 + 36);
 321   1      
 322   1              WriteTW88Page(PAGE3_FOSD );
 323   1              WriteTW88(REG303, temp );                               // write FONT OSD DE value
 324   1              dPrintf("\nFontOsdDE:%02bx",temp);
 325   1      #else //Old, But Working
                      XDATA   WORD temp;
              
                      WriteTW88Page(PAGE2_SCALER );
                      temp = ReadTW88(REG210 );                               // HDE
                      if( ReadTW88(REG20d) & 0x03 )
                              temp += 1;
              
                      temp -= 37;
                      WriteTW88Page(PAGE4_SOSD );
                      if ( ReadTW88(REG400 ) & 2 ) {                  // check Mixing
                              temp -= 2;
                      }       
              
                      WriteTW88Page(PAGE3_FOSD );
                      WriteTW88(REG303, temp );                               // write FONT OSD DE value
                      dPrintf("\nFontOsdDE:%04x",temp);
              #endif
 343   1      }
 344          
 345          
 346          
 347          //=============================================================================
 348          //=============================================================================
 349          
 350          /**
 351          * set FOSD blink attribute
 352          *
 353          * this will effect only when FW writes data on OsdRam.
 354          * the background color will fill out when it blink.
 355          *
 356          *       r304[7] Blink
 357          */
 358          void FOsdBlinkOnOff(BYTE fOn)
 359          {
 360   1              WriteTW88Page(PAGE3_FOSD);
 361   1              if(fOn) WriteTW88(REG304, ReadTW88(REG304) | 0x80);
 362   1              else    WriteTW88(REG304, ReadTW88(REG304) & ~0x80);
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 7   

 363   1      }
 364          
 365          #if 0
              //please do not use it. it has lot of bugs.
              //desc: enable the char effect(border or Shadow)
              //              this will effect only when you write data on OsdRam.
              // r304[4]
              void FOsdEnableCharEffect(BYTE fOn)
              {
              ..
              }
              #endif
 375          
 376          /**
 377          * set FOSD OsdRam Write Mode
 378          *
 379          * @param fMode
 380          *       0:Normal, 1:DataOrAttr, 3:Data(with prev attr)
 381          *
 382          *       register
 383          *       r304[3:2] 00:Normal. 01:Data or Attr Addr auto mode. 11:Font Data auto mode
 384          */
 385          void FOsdRamSetWriteMode(BYTE fMode)
 386          {
 387   1              BYTE value;
 388   1              WriteTW88Page(PAGE3_FOSD);
 389   1              value = ReadTW88(REG304) & 0xF3;
 390   1              value |= (fMode << 2);
 391   1              WriteTW88(REG304, value);
 392   1      }
 393          #if 0
              /**
              * get FOSD OsdRam Write Mode
              *
              */
              BYTE FOsdRamGetWriteMode(void)
              {
                      WriteTW88Page(PAGE3_FOSD);
                      return (ReadTW88(REG304) >> 2) & 0x03;
              }
              #endif
 404          
 405          #if 0
              /**
              * Clear all data as 0 with current attr value at r308[7:0].
              *
              * If customer wants to use this feature, the font 0 has to be a blank data.
              *
              *       r304[1]
              */
              void FOsdRamClearAllData(void)
              {
                      WriteTW88Page(PAGE3_FOSD);
                      WriteTW88(REG304, ReadTW88(REG304) | 0x02);
              }
              #endif
 419          
 420          /**
 421          * set FOSD AccessMode
 422          *
 423          * FW selects FontRAM before it starts a FontRam download
 424          * and selects OsdRam when it finish a FontRam download.
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 8   

 425          *
 426          * @param fType   
 427          *       - 0: OSD Ram Access.  default
 428          *       - 1: FONT RAM access
 429          *
 430          *       register
 431          *       r304[0]
 432          */
 433          void FOsdSetAccessMode(BYTE fType)
 434          {
 435   1              WriteTW88Page(PAGE3_FOSD);
 436   1      
 437   1              if(fType)       WriteTW88(REG304, ReadTW88(REG304)| 0x01);      // Font Ram Access
 438   1              else            WriteTW88(REG304, ReadTW88(REG304)& 0xFE);      // Osd Ram Access
 439   1      }
 440          
 441          /**
 442          * set OsdRam address
 443          *
 444          * @param addr max 511.
 445          *       r305[0]r306[7:0]
 446          */
 447          void FOsdRamSetAddress(WORD addr)
 448          {
 449   1              WriteTW88Page(PAGE3_FOSD);
 450   1              WriteTW88(REG305, (ReadTW88(REG305) & 0xFE) | (addr >> 8));
 451   1              WriteTW88(REG306, (BYTE)addr);
 452   1      }
 453          /**
 454          * set OsdRam data
 455          *
 456          *       r304[5]r307[7:0]
 457          *       NOTE:FontRam also use r304[5]
 458          */
 459          void FOsdRamSetData(WORD dat)
 460          {
 461   1              WriteTW88Page(PAGE3_FOSD);
 462   1              if(dat&0x100)   WriteTW88(REG304,ReadTW88(REG304) |  0x20); 
 463   1              else                    WriteTW88(REG304,ReadTW88(REG304) & ~0x20);
 464   1              WriteTW88(REG307, (BYTE)dat);
 465   1      }
 466          
 467          /**
 468          * set OsdRam attribute
 469          *
 470          *       r308[7:0]
 471          *       1BPP:   r308[7:4] bgColor
 472          *                       r308[3:0] fgColor
 473          *       MBPP:   r308[3:0] (LUT offset / 4)
 474          */ 
 475          void FOsdRamSetAttr(BYTE attr)
 476          {
 477   1              WriteTW88Page(PAGE3_FOSD);
 478   1              WriteTW88(REG308, attr);
 479   1      }
 480          #if 0
              /**
              *       FontRam Serial write
              *
              * NOTE: You need FOsdSetAccessMode(FOSD_ACCESS_FONTRAM),
              *       FOsdSetAccessMode(FOSD_ACCESS_OSDRAM)
              * NOTE: You need a FIFO delay if you are using FIFO. 
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 9   

              *       So, the better higher function is a FOsdDownloadFontBySerial().
              *
              *       r304[5]r309[7:0]                //NOTE: OsdRam also use r304[5] 
              *       r30A[7:0]
              */
              void FOsdFontWrite(WORD start, BYTE *dat, BYTE bytesperfont, BYTE size)
              {
                      BYTE i,j;
                      WORD addr;
              
                      WriteTW88Page(PAGE3_FOSD);
                      addr = start;
                      for(i=0; i < size; i++) {
                              if(addr & 0x100)        WriteTW88(REG304, ReadTW88(REG304) |  0x20);    //Upper256
                              else                            WriteTW88(REG304, ReadTW88(REG304) & ~0x20);
                              WriteTW88(REG309, (BYTE)addr);
                              for(j=0; j < bytesperfont; j++)
                                      WriteTW88(REG30A, *dat++);
                              addr++;         
                      }
              }
              #endif
 509          
 510          //r30B[7:0]
 511          //      MADD2
 512          
 513          //-------------------------------------------------------------------
 514          /**
 515          * OnOff FontOSD
 516          *
 517          *       r30C[6]
 518          *
 519          * @return
 520          *       - 1: changed
 521          */
 522          BYTE FOsdOnOff(BYTE fOnOff, BYTE vdelay)
 523          {
 524   1              BYTE value;
 525   1              
 526   1              WriteTW88Page(PAGE3_FOSD);
 527   1              value = ReadTW88(REG30C);
 528   1              if(fOnOff) {
 529   2                      if(value & 0x40) {
 530   3                              if(vdelay)
 531   3                                      WaitVBlank(vdelay);
 532   3                              WriteTW88(REG30C, value & ~0x40);
 533   3                              return 1;
 534   3                      }
 535   2              }
 536   1              else {
 537   2                      if((value & 0x40) == 0) {
 538   3                              if(vdelay)
 539   3                                      WaitVBlank(vdelay);
 540   3                              WriteTW88(REG30C, value | 0x40);
 541   3                              return 1;
 542   3                      }
 543   2              }
 544   1              return 0;
 545   1      }
 546          
 547          
 548          //r30C[5:0]
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 10  

 549          //r30D[7:0]
 550          //r30E[7:0]
 551          //=============================================================================
 552          // FOsdPalette
 553          //=============================================================================
 554          /**
 555          * set FOSD Palette color
 556          *
 557          * old code use index 2 for normal foreground       Now 6bit.(64).
 558          * TW8835 needs PCLK divider2
 559          */
 560          void FOsdSetPaletteColor(BYTE start, WORD color, BYTE size, BYTE vdelay)
 561          {
 562   1              BYTE i;
 563   1              BYTE r30c;
 564   1      
 565   1              if(vdelay)
 566   1                      WaitVBlank(vdelay);
 567   1      
 568   1              McuSpiClkToPclk(CLKPLL_DIV_2P0);
 569   1      
 570   1              WriteTW88Page(PAGE3_FOSD);
 571   1              r30c = ReadTW88(REG30C) & 0xC0;
 572   1              for(i=start; i < (start+size); i++) {
 573   2                      WriteTW88(REG30C, r30c | i );
 574   2                      WriteTW88(REG30D, (BYTE)(color>>8));
 575   2                      WriteTW88(REG30E, (BYTE)color);
 576   2              }
 577   1              
 578   1              McuSpiClkRestore();
 579   1      }
 580          /**
 581          * set FOSD Palette color
 582          *
 583          * TW8835 needs PCLK divider2
 584          */
 585          void FOsdSetPaletteColorArray(BYTE index, WORD *array, BYTE size, BYTE vdelay)
 586          {
 587   1              BYTE i;
 588   1              BYTE r30c;
 589   1      
 590   1              //dPrintf("\nFOsdSetPaletteColorArray index:%bd",index);
 591   1              //for(i=0; i < size; i++)
 592   1              //      dPrintf(" %04x",array[i]);
 593   1      
 594   1              if(vdelay)
 595   1                      WaitVBlank(vdelay);
 596   1      
 597   1      #if defined(MODEL_TW8836FPGA) || defined(MODEL_TW8835FPGA)
                      //BK120615. for test clock source
              #else
 600   1              McuSpiClkToPclk(CLKPLL_DIV_2P0);
 601   1      #endif
 602   1      
 603   1              WriteTW88Page(PAGE3_FOSD);
 604   1              r30c = ReadTW88(REG30C) & 0xC0;
 605   1              for(i=0; i < size; i++) {
 606   2                      WriteTW88(REG30C, (index+i) | r30c);
 607   2                      WriteTW88(REG30D, (BYTE)(array[i] >> 8));
 608   2                      WriteTW88(REG30E, (BYTE)array[i]);
 609   2              }
 610   1      #if defined(MODEL_TW8836FPGA) || defined(MODEL_TW8835FPGA)
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 11  

                      //BK120615. for test clock source
              #else
 613   1              McuSpiClkRestore();
 614   1      #endif
 615   1      }
 616          
 617          
 618          
 619          /**
 620          * set Address and Attribute
 621          *
 622          * we assign the attr and then wirte a start font index.
 623          * after this, you can just assign the font index data. 
 624          * @param OsdRamAddr 0 to 511
 625          * @param attr
 626          *       - attr for 1BPP:        (bgColor << 4) | fgColor
 627          *       - attr for MultiBPP     (LUT index >> 2)
 628          */
 629          void FOsdRamSetAddrAttr(WORD OsdRamAddr, BYTE attr)
 630          {
 631   1              FOsdRamSetWriteMode(FOSD_OSDRAM_WRITE_NORMAL);
 632   1              FOsdRamSetAddress(OsdRamAddr); 
 633   1              FOsdRamSetAttr(attr);                                                                                                                                                   
 634   1      
 635   1              FOsdRamSetWriteMode(FOSD_OSDRAM_WRITE_DATA);
 636   1              FOsdRamSetAddress(OsdRamAddr);  //NOTE: HW needs it.
 637   1              //                                                      
 638   1              //now use FOsdRamSetData(dat).  
 639   1      }
 640          /**
 641          * write BYTE string to OsdRam
 642          *
 643          * assume low char  
 644          * assume FIFO OFF
 645          */
 646          void FOsdRamWriteByteStr(BYTE *str, BYTE len)
 647          {
 648   1              BYTE i;
 649   1              BYTE w_count;
 650   1      
 651   1              WriteTW88Page(PAGE3_FOSD);
 652   1              WriteTW88(REG304, ReadTW88(REG304) & ~0x20);
 653   1              
 654   1              w_count = 1;
 655   1              for(i=0; i < len; i++) {
 656   2                      WriteTW88(REG307, *str++);
 657   2                      w_count++;
 658   2                      if(w_count==6/*8*/) {    //NOTE
 659   3                              delay1ms(1);
 660   3                              w_count=0;
 661   3                      }
 662   2              }
 663   1      }
 664          #if 0
              /**
              * Write data on ByPassFIFO mode.
              *
              * example
              *       FOsdRamSetFifo(OFF,0)
              *       FOsdRamSetAddrAttr(,);
              *       FOsdRamWriteByteStrBypassFifo("   ",len);
              *       FOsdRamSetFifo(ON,1)
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 12  

              */
              void FOsdRamWriteByteStrBypassFifo(BYTE *str, BYTE len)
              {
                      BYTE i;
                      BYTE w_count;
              
                      WriteTW88Page(PAGE3_FOSD);
                      WriteTW88(REG304, ReadTW88(REG304)& ~0x20);
                      
                      for(i=0; i < len; i++) {
                              WriteTW88(REG307, *str++);
                      }
              }
              #endif
 687          
 688          
 689          //=============================================================================
 690          // FOsdWin
 691          //=============================================================================
 692          /**
 693          * enable FOSD Window
 694          *
 695          *       R310[7],R320[7],,,
 696          */
 697          void FOsdWinEnable(BYTE winno, BYTE en)
 698          {
 699   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      XDATA   BYTE index;
              #else
 702   1              XDATA   WORD index;
 703   1      #endif
 704   1              XDATA   BYTE dat;
 705   1      
 706   1              index = FOSDWinBase[winno] + FONTWIN_ENABLE;
 707   1      
 708   1              WriteTW88Page(PAGE3_FOSD);
 709   1              dat = ReadTW88(index);
 710   1              if( en ) dat |= 0x80;
 711   1              else     dat &= 0x7F;
 712   1              WriteTW88(index, dat);
 713   1      }
 714          
 715          /**
 716          * toggle FOSD Window enable bit
 717          *
 718          * @see FOsdWinEnable
 719          */
 720          void FOsdWinToggleEnable(BYTE winno)
 721          {
 722   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      XDATA   BYTE index;
              #else
 725   1              XDATA   WORD index;
 726   1      #endif
 727   1              XDATA   BYTE dat;
 728   1      
 729   1              index = FOSDWinBase[winno] + FONTWIN_ENABLE;
 730   1      
 731   1              WriteTW88Page(PAGE3_FOSD );
 732   1              dat = ReadTW88(index);
 733   1              if( dat & 0x80 )        WriteTW88(index, dat & 0x7F);   //ON->OFF
 734   1              else                            WriteTW88(index, dat | 0x80);   //OFF->ON
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 13  

 735   1      }
 736          
 737          /**
 738          * turn off all FontOSD Window
 739          */
 740          void FOsdWinOffAll(void)
 741          {
 742   1              BYTE i;
 743   1              for(i=0; i< FOSD_MAX_OSDWIN; i++)
 744   1                      FOsdWinEnable(i, OFF);
 745   1      }
 746          
 747          /**
 748          * enable MultiColor attribute
 749          *
 750          * pls, DO NOT TURN OFF
 751          *
 752          *       R310[6],R320[6],,,
 753          */
 754          void FOsdWinMulticolor(BYTE winno, BYTE en)
 755          {
 756   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      XDATA   BYTE index;
              #else
 759   1              XDATA   WORD index;
 760   1      #endif
 761   1              XDATA   BYTE dat;
 762   1      
 763   1              index = FOSDWinBase[winno] + FONTWIN_ENABLE;
 764   1      
 765   1              WriteTW88Page(PAGE3_FOSD );
 766   1              dat = ReadTW88(index);
 767   1              if( en ) dat |= 0x40;
 768   1              else     dat &= 0xBF;    
 769   1              WriteTW88(index, dat);
 770   1      }
 771          
 772          //R310[5],R320[5],,,
 773          #if 0
              void FOsdWinEnableVerticalExtensior(BYTE fOn)
              { .. }
              #endif
 777          
 778          /**
 779          * set Horizontal Vertical Zoom
 780          *
 781          *       R310[3:2],R320[3:2],,,
 782          *       R310[1:0],R320[1:0],,,
 783          */
 784          void FOsdWinZoom(BYTE winno, BYTE zoomH, BYTE zoomV)
 785          {
 786   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      XDATA   BYTE index;
              #else
 789   1              XDATA WORD index;
 790   1      #endif
 791   1              XDATA BYTE temp;
 792   1      
 793   1              index = FOSDWinBase[winno];
 794   1      
 795   1              WriteTW88Page(PAGE3_FOSD );
 796   1      
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 14  

 797   1              temp = (zoomH << 2) + zoomV;
 798   1              temp += (ReadTW88(index ) & 0xf0);
 799   1              WriteTW88(index, temp );
 800   1      }
 801          
 802          //------------------------------------------------------------------------
 803          //              void FOsdWinAlphaPixel(BYTE winno, BYTE color, BYTE alpha)
 804          //------------------------------------------------------------------------
 805          /**
 806          * set FOSD Window Alpha color and Amount
 807          *
 808          *       r311[3:0] r321[3:0] & r352[]
 809          *
 810          * @todo divide it with AlphaColor & AlphaAmount
 811          */
 812          void FOsdWinAlphaPixel(BYTE winno, BYTE lut, BYTE alpha)
 813          {
 814   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      BYTE    index = FOSDWinBase[winno] + FONT_ALPHA;
              #else
 817   1              WORD    index = FOSDWinBase[winno] + FONT_ALPHA;
 818   1      #endif
 819   1      
 820   1              WriteTW88Page(PAGE3_FOSD );
 821   1              WriteTW88(REG352,  lut );                               // first, select color index
 822   1              WriteTW88(index, alpha );                               // second, write alpha value
 823   1      }
 824          
 825          //array { index , alpha}
 826          #if 0
              //we have a bank issue(we can not use the call by reference on CodeSegment).
              //so, pls use FontOsdBpp3Alpha_setLutOffset() and FOsdWinSetBpp3Alpha()
              void FOsdWinAlphaPixelArray(BYTE winno, BYTE *array, BYTE size)
              {
              #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      BYTE index = FOSDWinBase[winno] + FONT_ALPHA;
              #else
                      WORD index = FOSDWinBase[winno] + FONT_ALPHA;
              #endif
                      BYTE i;
              
                      WriteTW88Page(PAGE3_FOSD );
                      for(i=0; i < size; i++) {
                              WriteTW88(REG_FOSD_ALPHA_SEL, array[i*2]);      // first, select color index
                              WriteTW88(index,   array[i*2+1] );                      // second, write alpha value
                      }
              }
              #endif
 845          
 846          /**
 847          * set alpah value for 3BPP Alpha font
 848          *
 849          * extern
 850          * BPP3_alpha_lut_offset[].
 851          * BPP3_alpha_value[].
 852          *       
 853          * @param base_lut: start position of LUT
 854          */
 855          void FOsdWinSetBpp3Alpha(BYTE winno, BYTE base_lut)
 856          {
 857   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      BYTE index = FOSDWinBase[winno] + FONT_ALPHA;
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 15  

              #else
 860   1              WORD index = FOSDWinBase[winno] + FONT_ALPHA;
 861   1      #endif
 862   1              BYTE i;
 863   1      
 864   1              WriteTW88Page(PAGE3_FOSD );
 865   1              for(i=0; i < 8; i++) {
 866   2                      WriteTW88(REG_FOSD_ALPHA_SEL,  base_lut+BPP3_alpha_lut_offset[i] );     // first, select color index
 867   2                      WriteTW88(index, BPP3_alpha_value[i] );                                                         // second, write alpha value
 868   2              }
 869   1      }
 870          /**
 871          * set Screen Position
 872          *
 873          *       r312[6:4]r313[7:0]      H-Start
 874          *       r312[1:0]r314[7:0]      V-Start
 875          */      
 876          void FOsdWinScreenXY(BYTE winno, WORD x, WORD y)
 877          {
 878   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      XDATA   BYTE index;
              #else
 881   1              XDATA WORD index;
 882   1      #endif
 883   1              XDATA BYTE temp;
 884   1      
 885   1              index = FOSDWinBase[winno];
 886   1      
 887   1              WriteTW88Page(PAGE3_FOSD );
 888   1      
 889   1              temp = x >> 8;
 890   1              temp <<= 4;
 891   1              temp += ( y >> 8 );
 892   1              WriteTW88(index+2,  temp );                     // upper bit for position x, y
 893   1              WriteTW88(index+3, x );                         // position x
 894   1              WriteTW88(index+4, y );                         // position y
 895   1      
 896   1              FontOsdInfo.win[winno].sx = x;
 897   1              FontOsdInfo.win[winno].sy = y;
 898   1      }
 899          
 900          /**
 901          * set screen width and height
 902          *
 903          *       r315[5:0]                       V-Height
 904          *       r316[5:0]                       H-width
 905          */
 906          void FOsdWinScreenWH(BYTE winno, BYTE w, BYTE h)
 907          {
 908   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      XDATA   BYTE index;
              #else
 911   1              XDATA WORD index;
 912   1      #endif
 913   1      
 914   1              index = FOSDWinBase[winno];
 915   1      
 916   1              WriteTW88Page(PAGE3_FOSD );
 917   1              WriteTW88(index+5, h );
 918   1              WriteTW88(index+6, w );
 919   1      
 920   1              FontOsdInfo.win[winno].column = w;
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 16  

 921   1              FontOsdInfo.win[winno].line = h;
 922   1      }
 923          
 924          
 925          //-----------------------------------------------------------------------------
 926          //              WORD FOsdWinGetX(BYTE winno)                    : winno 1~4
 927          //              void FOsdWinSetX(BYTE winno, WORD x)    : winno 1~4
 928          //              WORD FOsdWinGetY(BYTE winno)                    : winno 1~4
 929          //              void FOsdWinSetY(BYTE winno, WORD y)    : winno 1~4
 930          //              void FOsdWinSetW(BYTE winno, WORD w)    : winno 1~4
 931          //-----------------------------------------------------------------------------
 932          #ifdef SUPPORT_FOSD_MENU
              /**
              * get window x position
              */
              WORD FOsdWinGetX(BYTE winno)
              {
                      WORD    Pos;
              
                      WriteTW88Page(PAGE3_FOSD );
                      Pos = ReadTW88(FOSDWinBase[winno]+2)&0x70;
                      Pos <<= 4;
                      Pos += ReadTW88(FOSDWinBase[winno]+3);
              
                      return (Pos);
              }
              
              #if 0
              void FOsdWinSetX(BYTE winno, WORD x)
              {
              #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      BYTE    index;
              #else
                      WORD index;
              #endif
              
                      //dPrintf("\nFOsdWinSetX( %bd, %d )", winno, x );
              
                      WriteTW88Page(PAGE3_FOSD );
                      index = FOSDWinBase[winno];
                      WriteTW88(index+2, (ReadTW88(index+2)&0x8F) | ((x>>4)&0x70));
                      WriteTW88(index+3, x);
              }
              #endif
              
              /**
              * get window Y position
              */
              WORD FOsdWinGetY(BYTE winno)
              {
              #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      BYTE    index;
              #else
                      WORD index;
              #endif
                      WORD    Pos;
              
                      WriteTW88Page(PAGE3_FOSD );
                      index = FOSDWinBase[winno];
                      Pos = ReadTW88(index+2)&0x03;
                      Pos <<= 8;
                      Pos += ReadTW88(index+4);
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 17  

                      return (Pos);
              }
              
              /**
              * set window Y position
              */
              void FOsdWinSetY(BYTE winno, WORD y)
              {
              #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      BYTE    index;
              #else
                      WORD index;
              #endif
              
                      //dPrintf("\nFOsdWinSetY( %bd, %d )", winno, y );
              
                      WriteTW88Page(PAGE3_FOSD );
                      index = FOSDWinBase[winno];
                      WriteTW88(index+2, (ReadTW88(index+2)&0xFC)|(y>>8));
                      WriteTW88(index+4, y);
              }
              
              /**
              * set window width
              */
              void FOsdWinSetW(BYTE winno, WORD w)
              {
              #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      BYTE    index;
              #else
                      WORD    index;
              #endif
              
                      //dPrintf("\nFOsdWinSetW( %bd, %d )", winno, w );
              
                      WriteTW88Page(PAGE3_FOSD );
                      index = FOSDWinBase[winno];  //????
                      WriteTW88(index+6, w);
              }
              #endif
1023          
1024          //r317[3:0]
1025          //void FOsdWinSetBorderColor(BYTe idx)
1026          
1027          //r318[7]
1028          //void FOsdWinEnableBorder(fOn)
1029          
1030          //r318[4:0]
1031          //void FOsdWinSetBorderWidth(BYTE width)
1032          
1033          //r319[6:0]
1034          //void FOsdWinSetHBorder(BYTE width)
1035          
1036          //r31A[6:0]
1037          //void FOsdWinSetVBorder(BYTE width)
1038          
1039          //r31B[7] 3D effect enable
1040          //r31B[6] 3D top effect
1041          //r31B[5] 3D effect level
1042          //                      NOTE: 3D need a Border.
1043          //r31B[4] Select BorderOrShadow. 1=Shadow
1044          //r31B[3:0]     Shadow Color
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 18  

1045          
1046          //note:winno 0~3.
1047          #ifdef SUPPORT_FOSD_MENU
              /**
              * set 3DControl
              */
              void FOsdWinSet3DControl(BYTE win, BYTE value)
              {
                      WriteTW88Page(PAGE3_FOSD);
                      WriteTW88(FOSDWinBase[win]+0x0B,value);         
              }
              #endif
1057          
1058          //r31C[7]       Enable Shadow
1059          //r31C[4:0]     Shadow Width
1060          
1061          //r31C[6]r31D[7:4]              Char H-Space
1062          //r31C[5]r31D[3:0]              Char V-Space
1063          
1064          //r31E[7:4]     H/V Border Background Color
1065          
1066          //r31E[3:0]     char border/shadow color 
1067          
1068          /**
1069          * set OsdRam Start Address
1070          *
1071          *       R3X7[4],R3XF[7:0], WIN1:R317, WIN2:R327, WIN3:R337 WIN4:R347
1072          */
1073          void FOsdWinSetOsdRamStartAddr(BYTE winno, WORD addr)
1074          {
1075   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      BYTE index;
              #else
1078   1              WORD index;
1079   1      #endif
1080   1      
1081   1              WriteTW88Page(PAGE3_FOSD );
1082   1              index = FOSDWinBase[winno];
1083   1      
1084   1              if(addr >=0x100)        WriteTW88(index+0x07, ReadTW88(index+0x07) |  0x10);
1085   1              else                            WriteTW88(index+0x07, ReadTW88(index+0x07) & ~0x10);
1086   1              WriteTW88(index+0x0F, (BYTE)addr);
1087   1      
1088   1              FontOsdInfo.win[winno].osdram = addr;
1089   1      }
1090          
1091          
1092          //=============================================================================
1093          // HAL END
1094          //=============================================================================
1095          
1096          
1097          
1098          
1099          //=======================================
1100          // Initialize Functions
1101          //=======================================
1102          
1103          
1104          //-------------------------------------------------------------------
1105          /**
1106          * Init FontOSD
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 19  

1107          */
1108          void FontOsdInit(void)
1109          {
1110   1              BYTE winno;
1111   1              BYTE columns=40;
1112   1              BYTE lines = 1;
1113   1      
1114   1              FOsdOnOff(OFF, 0);      
1115   1      
1116   1              //download font set & init Multi-BPP location
1117   1              InitFontRamByNum(FONT_NUM_CONGRAY16X28, 0);     // set consolas & graynum and calculate 3BPP alpha
1118   1      
1119   1              //init all fontosd windows attributes
1120   1              for(winno = 0; winno < FOSD_MAX_OSDWIN; winno++) {
1121   2                      FOsdWinInit(winno);
1122   2      
1123   2                      FontOsdInfo.win[winno].bpp1_attr = 0x1A;                                        //BG|FG
1124   2                      FOsdWinAlphaPixel(winno, FOSD_COLOR_IDX_BLANK, 0x0F);           //BG color alpha
1125   2      
1126   2                      FOsdWinScreenXY(winno, 0,30*winno);
1127   2                      FOsdWinScreenWH(winno, columns, 1/*lines*/);            //0x20, 0x10);          //max 512 = 32x16
1128   2                      FOsdWinZoom(winno, 0, 0);                               
1129   2                      FOsdWinSetOsdRamStartAddr(winno, columns*winno /*text_info->osdram*/);
1130   2              }
1131   1      
1132   1              //clear all OsdRam.
1133   1              FOsdRamClearAll(0x020, 0x0F);
1134   1      }
1135          
1136          
1137          
1138          /* calculated example value.
1139          [01:0] 
1140          [07:43] 
1141          [06:90] 
1142          [04:133] 
1143          [03:180] 
1144          [05:223] 
1145          [02:270] 
1146          [00:313]
1147          */
1148          //code BYTE calculated_3BPP_alpha_table[8] = { 1,7,6,4,3,5,2,0 };
1149          
1150          //read value from FontEditor and place it here.
1151          //code WORD consolas22_16x26_3BPP[8] = {
1152          //      0xFFFF,0x0000,0xDEDB,0x9492,0x6B6D,0xB5B6,0x4A49,0x2124
1153          //}; 
1154          
1155          /**
1156          * init 3BPP Alpha table
1157          *
1158          * after download font.
1159          * prepare alpha table for 3BPP
1160          */
1161          void FOsdInitBpp3AlphaTable(BYTE fCalculate)
1162          {
1163   1              BYTE i,j,k;
1164   1              WORD Y;
1165   1              WORD value;
1166   1              WORD alpha_table_Y[8];
1167   1      
1168   1              if(fCalculate==0) {
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 20  

1169   2                      //use the calculated table and save a time.
1170   2                      for(i=0; i < 8; i++)
1171   2                              BPP3_alpha_lut_offset[i]=FOsdDefPaletteBpp3Alpha[i];    
1172   2              }
1173   1              else {
1174   2                      //prepare alpha
1175   2                      for(i=0; i < 8; i++) {
1176   3                              value= FOsdDefPaletteBpp3[i];
1177   3                              //B =   value >> 11;
1178   3                              //G = (value & 0x07E0) >> 5;
1179   3                              //R = value & 0x001F;
1180   3                              //Y = B;
1181   3                              //Y += (G * 3); //*6 / 2
1182   3                              //Y += (R * 3);
1183   3                              j = value >> 11;                                //B
1184   3                              Y = j;
1185   3                              j = (value & 0x07E0) >> 5;              //G
1186   3                              Y += (j * 3);                                   //*6 / 2
1187   3                              j = value & 0x001F;                             //R
1188   3                              Y += (j * 3);
1189   3              
1190   3                              //dPrintf("\ni:%02bx BGR:%04X Y:%d",i,FOsdDefPaletteBpp3[i],Y);
1191   3              
1192   3                              if(i) {
1193   4                                      BPP3_alpha_lut_offset[i]=i;
1194   4                                      alpha_table_Y[i]=Y;
1195   4              
1196   4                                      for(j=0; j < i; j++) {
1197   5                                              if(Y < alpha_table_Y[j]) {
1198   6                                                      k    =BPP3_alpha_lut_offset[i];
1199   6                                                      value=alpha_table_Y[i];
1200   6              
1201   6                                                      BPP3_alpha_lut_offset[i] = BPP3_alpha_lut_offset[j];
1202   6                                                      alpha_table_Y[i] = alpha_table_Y[j];
1203   6              
1204   6                                                      BPP3_alpha_lut_offset[j] = k;                                                           
1205   6                                                      alpha_table_Y[j] = value;
1206   6                                                      Y = value;
1207   6                                              }
1208   5                                      }
1209   4              
1210   4                                      //dPrintf("\n  ");
1211   4                                      //for(j=0; j <= i; j++) {
1212   4                                      //      dPrintf(" %bx:%d",BPP3_alpha_lut_offset[j], alpha_table_Y[j]);          
1213   4                                      //}
1214   4                              }
1215   3                              else {
1216   4                                      BPP3_alpha_lut_offset[0]=0;
1217   4                                      alpha_table_Y[0]=Y;
1218   4                              }
1219   3                      }
1220   2                      //result
1221   2                      //dPuts("\n3BPP Alpha");
1222   2                      //for(i=0; i < 8; i++) {
1223   2                      //      dPrintf(" [%bx:%d]",BPP3_alpha_lut_offset[i], alpha_table_Y[i]);
1224   2                      //}
1225   2              }
1226   1      }
1227          
1228          //=======================================
1229          //=======================================
1230          
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 21  

1231          
1232          //=======================================
1233          // Windows Functions
1234          //=======================================
1235          
1236          
1237          
1238          /**
1239          * init FOSD Window register
1240          *
1241          * @param winno  from 0 to 3. TW8836 use 0 to 7
1242          * NOTE: OsdRamAddr      from 0 to 511
1243          */
1244          void FOsdWinInit(BYTE winno)
1245          {
1246   1      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      BYTE index;
              #else
1249   1              WORD index;
1250   1      #endif
1251   1      
1252   1              WriteTW88Page(PAGE3_FOSD );
1253   1      
1254   1              index = FOSDWinBase[winno];
1255   1              //init all fontosd attributes
1256   1              WriteTW88(index, (ReadTW88(index) & 0x7F) | 0x40 );             //FOsdWinEnable(winno, OFF) & Enable Multi-Color
1257   1      
1258   1              WriteTW88(index+0x07, 0x00 );
1259   1              WriteTW88(index+0x08, 0x00 );
1260   1              WriteTW88(index+0x09, 0x00 );
1261   1              WriteTW88(index+0x0A, 0x00 );
1262   1              WriteTW88(index+0x0B, 0x00 );
1263   1              WriteTW88(index+0x0C, 0x00 );
1264   1              WriteTW88(index+0x0D, 0x00 );
1265   1              WriteTW88(index+0x0E, 0x00 );
1266   1              WriteTW88(index+0x0F, 0x00 );
1267   1      
1268   1              //clear alpha
1269   1              FOsdWinAlphaPixel(winno,FOSD_COLOR_IDX_BLANK,0);
1270   1      }
1271          
1272          
1273          
1274          //=======================================
1275          // Palette Functions
1276          //=======================================
1277          /**
1278          * set default Palette color
1279          */
1280          void FOsdSetDefPaletteColor(BYTE mode)
1281          {
1282   1              if(mode==0) {
1283   2                      FOsdSetPaletteColorArray(0,                                                                     FOsdHwDefPaletteBpp1,16, 0);
1284   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP2_ALPHA_A_START,       FOsdDefPaletteBpp2,      4, 0);
1285   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP2_ALPHA_B_START,       FOsdDefPaletteBpp2,      4, 0);
1286   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP3_ALPHA_G_START,       FOsdDefPaletteBpp3,      8, 0);
1287   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP2_START-4,                     FOsdDefPaletteBpp2,      4, 0);
1288   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP2_START,                       FOsdDefPaletteBpp2,      4, 0);
1289   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP3_START,                       FOsdDefPaletteBpp3,      8, 0);
1290   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP4_START,                       FOsdDefPaletteBpp4,     16, 0);
1291   2              }
1292   1              else if(mode==1) {
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 22  

1293   2                      FOsdSetPaletteColorArray(0,                                                                     FOsdSwDefPaletteBpp1,8, 0);
1294   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP3_ALPHA_R_START,       FOsdDefPaletteBpp3,8, 0);
1295   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP3_ALPHA_B_START,       FOsdDefPaletteBpp3,8, 0);
1296   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP3_ALPHA_G_START,       FOsdDefPaletteBpp3,8, 0);
1297   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP2_START-4,                     FOsdDefPaletteBpp2,4, 0);
1298   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP2_START,                       FOsdDefPaletteBpp2,4, 0);
1299   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP3_START,                       FOsdDefPaletteBpp3,8, 0);
1300   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP4_START,                       FOsdDefPaletteBpp4,16, 0);
1301   2              }
1302   1              else if(mode==2) {
1303   2                      FOsdSetPaletteColorArray(0,                                                                     FOsdSwDefPaletteBpp1,16, 0);
1304   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP2_ALPHA_A_START,       FOsdDefPaletteBpp2,4, 0);
1305   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP2_ALPHA_B_START,       FOsdDefPaletteBpp2,4, 0);
1306   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP3_ALPHA_G_START,       FOsdDefPaletteBpp3,8, 0);
1307   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP2_START-4,                     FOsdDefPaletteBpp2,4, 0);
1308   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP2_START,                       FOsdDefPaletteBpp2,4, 0);
1309   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP3_START,                       FOsdDefPaletteBpp3,8, 0);
1310   2                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP4_START,                       FOsdDefPaletteBpp4,16, 0);
1311   2              }
1312   1      }
1313          
1314          
1315          
1316          
1317          
1318          //=======================================
1319          // FontRam Functions
1320          //=======================================
1321          
1322          
1323          
1324          /**
1325          * download font set
1326          *
1327          * the dest font index starts from 0.
1328          *
1329          * width: 12 or 16
1330          * height: 2~32
1331          *
1332          * note: use PCLK.
1333          *       turns off FontRAM FIFO and uses PCLK.
1334          *
1335          * @param dest: start addr on FontRam.(0~10*1024) ..Need to Verify
1336          * @param src_loc: location on SpiFlash.
1337          * @param size
1338          */
1339          void FOsdDownloadFontByDMA(WORD dest_loc, DWORD src_loc, WORD size)
1340          {
1341   1              dPrintf("\nFOsdDownloadFontByDMA(%x,%lx,%x)",dest_loc, src_loc, size);
1342   1      
1343   1              //save clock mode & select PCLK
1344   1              WaitVBlank(1);  
1345   1      #if defined(MODEL_TW8836FPGA) || defined(MODEL_TW8835FPGA)
                      //BK120615. for test clock source
              #else
1348   1              McuSpiClkToPclk(CLKPLL_DIV_2P0);                                //with divider 1=1.5(72MHz). try 2
1349   1      #endif
1350   1      
1351   1              FOsdFontSetFifo(OFF);                                                   //Turn Off FontRam FIFO.
1352   1              FOsdSetAccessMode(FOSD_ACCESS_FONTRAM);                 //FontRam Access
1353   1      
1354   1              SpiFlashDmaRead(DMA_DEST_FONTRAM, dest_loc, src_loc, size);
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 23  

1355   1      
1356   1              WaitVBlank(1);  
1357   1              FOsdFontSetFifo(ON);                                            //Turn On FontRam FIFO. return to default
1358   1              FOsdSetAccessMode(FOSD_ACCESS_OSDRAM);          //OsdRam Access Mode. return to default
1359   1      
1360   1              //restore clock mode
1361   1      #if defined(MODEL_TW8836FPGA) || defined(MODEL_TW8835FPGA)
                      //BK120615. for test clock source
              #else
1364   1              McuSpiClkRestore();
1365   1      #endif
1366   1      }
1367          
1368          #ifdef SUPPORT_UDFONT
              //use FIFO. We don't need to use PCLK domain.
              //param
              //      unit_size: if 12x18 font, it is a 27 = 12x18/8
              void FOsdDownloadFontBySerial(WORD dest_font_index, BYTE *dat, BYTE unit_size, BYTE unit_num)
              {
                      BYTE value;
                      BYTE w_cnt;
                      BYTE i,j;
                      WORD addr;
              
                      //assume FontRam FIFO ON.
                      FOsdSetAccessMode(FOSD_ACCESS_FONTRAM);         //Select FontRam Access
              
                      addr =  dest_font_index;
                      w_cnt=0;
                      WriteTW88Page(PAGE3_FOSD);
                      for(i=0; i < unit_num; i++) {
                              if(w_cnt>=(8-2)) {
                                      delay1ms(1);
                                      w_cnt = 0;
                              }
                              value = ReadTW88(REG304);
                              if(addr & 0x100)        value |=  0x20;         //UPPER256
                              else                            value &= ~0x20;
                              WriteTW88(REG304, value);
                              WriteTW88(REG309, (BYTE)addr );                 //Font Addr
                              addr++;
                              w_cnt += 2;
              
                              for(j=0; j < unit_size; j++) {
                                      WriteTW88(REG30A, *dat++);
                                      w_cnt++;
                                      if(w_cnt>=8) {
                                              delay1ms(1);
                                              w_cnt = 0;
                                      }
                              }
                      }
                      FOsdSetAccessMode(FOSD_ACCESS_OSDRAM);          //Select OSDRam Access. restore to default
              }
              #endif
1410          
1411          #ifdef SUPPORT_UDFONT
              void FOsdDownloadUDFontBySerial(void)
              {
                      FOsdDownloadFontBySerial(0, &RAMFONTDATA[0][0], 27, 0x80);
              }
              #endif
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 24  

1417          
1418          /**
1419          * replace FontRam
1420          */
1421          void ReplaceFontRam(WORD dest_font_index, FONT_SPI_INFO_t *font, char *sName)
1422          {
1423   1              WORD addr;
1424   1              dPrintf("\nReplaceFontRam(%x,,%s",dest_font_index,sName);
1425   1              addr = dest_font_index *(font->width >> 2) * (font->height >> 1);
1426   1              FOsdDownloadFontByDMA(addr, font->loc, font->size);
1427   1      }
1428          
1429          /**
1430          *       download fontset and adjust Multi-font start address
1431          */
1432          void InitFontRam(WORD dest_font_index, FONT_SPI_INFO_t *font, char *sName)
1433          {
1434   1              BYTE value;
1435   1              WORD addr;
1436   1      
1437   1              dPrintf("\nInitFontRam(%x,,%s",dest_font_index,sName);
1438   1              FOsdSetFontWidthHeight(font->width, font->height);
1439   1      
1440   1              //download font
1441   1              addr = dest_font_index *(font->width >> 2) * (font->height >> 1);
1442   1              FOsdDownloadFontByDMA(addr, font->loc, font->size);
1443   1      
1444   1      
1445   1              //assign Multi-Color start address.
1446   1          WriteTW88Page(PAGE3_FOSD );
1447   1              value = ReadTW88(REG305) & 0xF1;
1448   1              if((font->bpp2 +dest_font_index) & 0x100)       value |= 0x02;  // 2bit-multi-font start. 8th address
1449   1              if((font->bpp3 +dest_font_index) & 0x100)       value |= 0x04;  // 3bit-multi-font start. 8th address
1450   1              if((font->bpp4 +dest_font_index) & 0x100)       value |= 0x08;  // 4bit-multi-font start. 8th address
1451   1              WriteTW88(REG305, value);       
1452   1              WriteTW88(REG30B, (BYTE)(font->bpp2 + dest_font_index) );                       // 2bit-multi-font start
1453   1              WriteTW88(REG_FOSD_MADD3, (BYTE)(font->bpp3 +dest_font_index));         // 3bit-multi-font start
1454   1              WriteTW88(REG_FOSD_MADD4, (BYTE)(font->bpp4 +dest_font_index));         // 4bit-multi-font start
1455   1      
1456   1      
1457   1              //link palette
1458   1              FOsdSetPaletteColorArray(0,     FOsdHwDefPaletteBpp1,16, 0);
1459   1              if(font->palette_bpp2 != NULL)
1460   1                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP2_START,(WORD *)font->palette_bpp2,4, 0);
1461   1              if(font->palette_bpp3 != NULL)
1462   1                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP3_START,(WORD *)font->palette_bpp3,8, 0);
1463   1              if(font->palette_bpp4 != NULL)
1464   1                      FOsdSetPaletteColorArray(FOSD_LUT_MAP_BPP4_START,(WORD *)font->palette_bpp4,16, 0);
1465   1      
1466   1              //..USE_FONTOSDINFO
1467   1              if(sName != NULL) TWstrcpy(FontOsdInfo.font.name,sName);
1468   1              else              TWstrcpy(FontOsdInfo.font.name,"unknown");
1469   1              FontOsdInfo.font.w = font->width;
1470   1              FontOsdInfo.font.h = font->height;
1471   1      
1472   1              FontOsdInfo.font.bpp2 = font->bpp2 +dest_font_index;
1473   1              FontOsdInfo.font.bpp3 = font->bpp3 +dest_font_index;
1474   1              FontOsdInfo.font.bpp4 = font->bpp4 +dest_font_index;
1475   1              FontOsdInfo.font.max  = font->max  +dest_font_index;
1476   1      
1477   1              DumpFontInfo();
1478   1      }
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 25  

1479          
1480          /**
1481          * test InitFontRam routine
1482          */
1483          void TestInitFontRam(WORD start)
1484          {
1485   1              InitFontRam(start, &consolas16x26_graynum,"gray");              //set default font set
1486   1      }
1487          
1488          
1489          
1490          //=====================
1491          // OsdRam function
1492          //=====================
1493          
1494          
1495          
1496          
1497          //========================
1498          // FOsdMsg Functions
1499          //========================
1500          
1501          
1502          
1503          //indicate which font.
1504          
1505          //BYTE FOsdMsg_win;
1506          //BYTE FOsdMsg_sx;
1507          //BYTE FOsdMsg_sy;
1508          
1509          //global
1510          
1511          //110727. Use FIFO with delay
1512          /**
1513          * copy message to OsdRam
1514          */
1515          void FOsdCopyMsgBuff2Osdram(BYTE fOn)
1516          {
1517   1      //      BYTE i;
1518   1              BYTE len;
1519   1              BYTE columns=40;
1520   1              BYTE attr;
1521   1              WORD osdram;
1522   1      //      DECLARE_LOCAL_page
1523   1      
1524   1              len = TWstrlen(FOsdMsgBuff);
1525   1      //      dPrintf("\nFOsdCopyMsgBuff2Osdram len:%bd ",len);
1526   1      //      for(i=0; i < len; i++) {
1527   1      //              attr=FOsdMsgBuff[i];
1528   1      //              if(attr >= 0x20 && attr <= 0x7F)
1529   1      //                      dPrintf("%c",attr);
1530   1      //              else
1531   1      //              dPrintf(" %02bx ",attr);
1532   1      //      }
1533   1              if(len==0)
1534   1                      return;
1535   1      
1536   1              columns = FontOsdInfo.win[FOSD_MSG_WIN].column;
1537   1              attr =    FontOsdInfo.win[FOSD_MSG_WIN].bpp1_attr;
1538   1              osdram =  FontOsdInfo.win[FOSD_MSG_WIN].osdram;
1539   1      
1540   1      //      dPrintf(" col:%bd attr:%02bx osdram:%x ",columns, attr, osdram);
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 26  

1541   1      
1542   1      
1543   1              //cut end of line
1544   1              FOsdWinScreenWH(FOSD_MSG_WIN, len,1);
1545   1      
1546   1              //print string
1547   1              WaitVBlank(1); //pls. finish within one vblank.
1548   1              FOsdRamSetAddrAttr(osdram, attr);       //osdram address, fg|bg, mode:auto
1549   1              FOsdRamWriteByteStr(FOsdMsgBuff,len);
1550   1      
1551   1              FOsdWinEnable(FOSD_MSG_WIN,fOn);        //WINn enable
1552   1      }
1553          
1554          /**
1555          * print the indexed message
1556          */
1557          void FOsdIndexMsgPrint(BYTE index)
1558          {
1559   1              if(MenuGetLevel())
1560   1                      return;
1561   1      
1562   1              switch(index) {
1563   2              case FOSD_STR0_GOOD:    
1564   2                      FOsdSetInputMainString2FOsdMsgBuff();   //GetInputMainString(FOsdMsgBuff);
1565   2                      TWstrcat(FOsdMsgBuff,"..Good!");                
1566   2                      break;
1567   2              case FOSD_STR1_TW8835:
1568   2                      TWstrcpy(FOsdMsgBuff,"Intersil TW8835.");
1569   2                      break;
1570   2              case FOSD_STR2_NOSIGNAL:
1571   2                      FOsdSetInputMainString2FOsdMsgBuff();   //GetInputMainString(FOsdMsgBuff);
1572   2                      TWstrcat(FOsdMsgBuff," No Signal");
1573   2                      break;
1574   2              case FOSD_STR3_OUTRANGE:
1575   2                      FOsdSetInputMainString2FOsdMsgBuff();   //GetInputMainString(FOsdMsgBuff);
1576   2                      TWstrcat(FOsdMsgBuff," Out of Range");          
1577   2                      break;
1578   2              case FOSD_STR4_INIT_EEPROM:
1579   2                      TWstrcpy(FOsdMsgBuff,"Initialize EEPROM");
1580   2                      break;
1581   2              case FOSD_STR5_INPUTMAIN:
1582   2                      FOsdSetInputMainString2FOsdMsgBuff();   //GetInputMainString(FOsdMsgBuff);
1583   2                      break;
1584   2              default:
1585   2                      TWstrcpy(FOsdMsgBuff,"Unknown");
1586   2                      break;  
1587   2              }
1588   1              FOsdCopyMsgBuff2Osdram(ON);
1589   1      }
1590          
1591          #define TEST_OSDRAM_ADDR        120 
1592          /**
1593          * dump the Palette table
1594          */
1595          void FOsdDumpPalette(BYTE winno)
1596          {
1597   1              BYTE palette_group;
1598   1      
1599   1              WaitVBlank(1);
1600   1              FOsdWinEnable(winno,OFF);       //winno disable
1601   1      
1602   1              FOsdWinScreenXY(winno, 0x70,0); //start 0,0  16 colums 1 line
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 27  

1603   1              FOsdWinScreenWH(winno, 16, 2);  //start 0,0  16 colums 1 line
1604   1              FOsdWinZoom(winno, 1, 0);                       //zoom 1,1
1605   1              FOsdWinAlphaPixel(winno, 1, 0x00);      //BG color alpha => removed
1606   1              FOsdWinMulticolor(winno, ON);
1607   1              FOsdWinSetOsdRamStartAddr(winno,TEST_OSDRAM_ADDR);
1608   1      
1609   1              for(palette_group=0; palette_group < 16; palette_group++) {
1610   2                      //first line
1611   2                      FOsdRamSetAddrAttr(TEST_OSDRAM_ADDR+palette_group, palette_group);
1612   2                      FOsdRamSetData(CH_2BPP_BAR);
1613   2      
1614   2                      //second line
1615   2                      FOsdRamSetAddrAttr(120+palette_group+16, ((palette_group) << 4) | palette_group+1);
1616   2                      WriteTW88(REG304,ReadTW88(REG304) & ~0x20);
1617   2                      if(palette_group < 0xA) WriteTW88(REG307, '0'+palette_group);
1618   2                      else                                    WriteTW88(REG307, 'A'+palette_group-0x0A);
1619   2      
1620   2                      delay1ms(1);
1621   2              }
1622   1      
1623   1              FOsdWinEnable(winno,ON);                //winno enable
1624   1      }
1625          
1626          
1627          //=============================================================================
1628          // 
1629          //=============================================================================
1630          /**
1631          * prepare InputMain String
1632          */
1633          char *GetInputMainString(char *p_itoa_buff)
1634          {
1635   1              BYTE InputMainIndex;
1636   1              BYTE len;
1637   1      
1638   1              InputMainIndex = GetInputMain();
1639   1      
1640   1              switch(InputMainIndex) {
1641   2              case INPUT_CVBS:        TWstrcpy(p_itoa_buff,"CVBS");           break;
1642   2              case INPUT_SVIDEO:      TWstrcpy(p_itoa_buff,"SVIDEO");         break;
1643   2              case INPUT_COMP:        TWstrcpy(p_itoa_buff,"Component");      break;
1644   2              case INPUT_PC:          TWstrcpy(p_itoa_buff,"PC");                     break;
1645   2              case INPUT_DVI:         TWstrcpy(p_itoa_buff,"DVI");            break;
1646   2              case INPUT_HDMIPC:      TWstrcpy(p_itoa_buff,"HDMI_PC");        break;
1647   2              case INPUT_HDMITV:      TWstrcpy(p_itoa_buff,"HDMI_TV");        break;
1648   2              case INPUT_BT656:       TWstrcpy(p_itoa_buff,"BT656");          break;
1649   2              case INPUT_LVDS:        TWstrcpy(p_itoa_buff,"LVDS");           break;
1650   2              default:                        TWstrcpy(p_itoa_buff,"UNKNOWN");        break;
1651   2              }
1652   1              len = TWstrlen(p_itoa_buff);
1653   1              return p_itoa_buff+len;
1654   1      }
1655          
1656          /**
1657          * set InputMain String
1658          *
1659          * for Bank issue
1660          */
1661          void FOsdSetInputMainString2FOsdMsgBuff(void)
1662          {
1663   1              GetInputMainString(FOsdMsgBuff);
1664   1      }
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 28  

1665          
1666          
1667          //=============================
1668          // comes from FOsdBasic.c
1669          //=============================
1670          //===============================================================================
1671          //  void WriteStringToAddr(BYTE addr, BYTE *str, BYTE cnt)
1672          //===============================================================================
1673          
1674          
1675          //FOsdPuts()
1676          //FOsdPutch
1677          
1678          //BKTODO:addr need 9bit
1679          #ifdef SUPPORT_FOSD_MENU
              /**
              * write string to Address
              */
              void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt)
              {
                      BYTE i;
                      BYTE w_cnt;
                      WORD dat,start;
              
                      //Printf("\nWriteStringToAddr(%x,,%bx)\n",addr,cnt);
                      w_cnt = 0;
                      start = 0;
              
                      //default::FOsdSetAccessMode(FOSD_ACCESS_OSDRAM);
                      FOsdRamSetWriteMode(FOSD_OSDRAM_WRITE_NORMAL);
              
                      WriteTW88Page(PAGE3_FOSD );
                      w_cnt = 2;
              
                      for ( i=0; i<cnt; i++ ) {
              
                              if(*str >= 0xF0) {
                                      //we have a escape code
                                      if(*str == FONT_RAM)            start = FONT_RAM_START;
                                      else if(*str == FONT_ROM)       start = 0;
                                      else if(*str == FONT_2BPP)      start = FONT_2BPP_START;
                                      else if(*str == FONT_3BPP)      start = FONT_3BPP_START;
                                      else if(*str == FONT_4BPP)      start = FONT_4BPP_START;
                                      else                                            start = 0;
                                      str++;
                                      continue;
                              }
                              dat = start + *str++;
                              if(w_cnt >=3) {
                                      delay1ms(1);
                                      w_cnt = 0;
                              }
                              //Printf("A:%X D:%X ",addr,dat);
              
                              //addr
                              FOsdRamSetAddress(addr);
                              //data
                              FOsdRamSetData(dat);
                              //attr
                              if(start==FONT_2BPP_START)
                                      WriteTW88(REG308, FOSD_LUT_MAP_BPP2_START >>2);
                              else if(start==FONT_3BPP_START)
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 29  

                                      WriteTW88(REG308, FOSD_LUT_MAP_BPP3_START >>2);
                              else if(start==FONT_4BPP_START)
                                      WriteTW88(REG308, FOSD_LUT_MAP_BPP4_START >>2);
                              addr++;
              
                              w_cnt += 5;
                      }
              }
              #endif
1736          
1737          //===============================================================================
1738          //  void FOsdRamMemsetAttr(BYTE addr, BYTE color, BYTE cnt)
1739          //===============================================================================
1740          #ifdef SUPPORT_FOSD_MENU
              /**
              * write only attr.
              *
              * assume:
              *       - FOSD_ACCESS_OSDRAM.
              *       - FIFO on
              * NOTE:FOsdRamFifo has 8 buffer.
              */
              void FOsdRamMemsetAttr(WORD addr, BYTE attr, BYTE len)
              {
                      BYTE    i;
                      BYTE w_count;
              
                      //Printf("\nFOsdRamMemsetAttr(%bx,%bx,%bx)",addr,color,cnt);
                      FOsdRamSetWriteMode(FOSD_OSDRAM_WRITE_AUTO);
                      FOsdRamSetAddress(addr);
                      delay1ms(1);
              
                      w_count = 0;
                      for(i=0; i < len; i++) {
                              WriteTW88(REG308, attr);
                              w_count++;
                              if(w_count==6/*8*/) {   //NOTE
                                      delay1ms(1);
                                      w_count=0;
                              }
                      }
              }
              /**
              * write only data.
              *
              * assume:
              *       - FOSD_ACCESS_OSDRAM.
              *       - FIFO on
              */
              void FOsdRamMemsetData(WORD addr, WORD dat, BYTE len)
              {
                      BYTE    i;
                      BYTE w_count;
              
                      FOsdRamSetWriteMode(FOSD_OSDRAM_WRITE_AUTO);
                      FOsdRamSetAddress(addr);
                      delay1ms(1);
                      
                      WriteTW88Page(PAGE3_FOSD);
                      if(dat < 0x100) WriteTW88(REG304, ReadTW88(REG304)& ~0x20);                     // clear Upper 256 it
                      else                    WriteTW88(REG304, ReadTW88(REG304)| 0x20);                      // upper 256
                      w_count = 1;
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 30  

                      for(i=0; i < len; i++) {
                              WriteTW88(REG307, (BYTE)dat);
                              w_count++;
                              if(w_count==6/*8*/) {   //NOTE
                                      delay1ms(1);
                                      w_count=0;
                              }
                      }
              }
              /**
              * memset for OsdRam
              */
              void FOsdRamMemset(WORD addr, WORD dat, BYTE attr, BYTE len)
              {
                      BYTE    i;
                      BYTE w_count;
              
                      FOsdRamSetAddrAttr(addr,attr);
                      delay1ms(1);
                      
                      WriteTW88Page(PAGE3_FOSD);
                      if(dat < 0x100) WriteTW88(REG304, ReadTW88(REG304)& ~0x20);                     // clear Upper 256 it
                      else                    WriteTW88(REG304, ReadTW88(REG304)| 0x20);                      // upper 256
                      w_count = 1;
                      for(i=0; i < len; i++) {
                              WriteTW88(REG307, (BYTE)dat);
                              w_count++;
                              if(w_count==6/*8*/) {   //NOTE
                                      delay1ms(1);
                                      w_count=0;
                              }
                      }
              }
              #endif
1823          
1824          /**
1825          * clear all OsdRam data
1826          *
1827          * NOTE:I will use FOsdRamClearAllData.
1828          *       ex:
1829          *       FOsdRamSetAttr(attr);
1830          *       FOsdRamClearAllData();
1831          */                      
1832          void FOsdRamClearAll(WORD dat, BYTE attr)
1833          {
1834   1              WORD i;
1835   1              FOsdRamSetFifo(OFF,0);
1836   1              FOsdRamSetAddrAttr(0, attr);
1837   1              WriteTW88Page(PAGE3_FOSD);
1838   1              if(dat&0x100)   WriteTW88(REG304,ReadTW88(REG304) |  0x20); 
1839   1              else                    WriteTW88(REG304,ReadTW88(REG304) & ~0x20);
1840   1              for(i=0; i < FOSD_MAX_OSDRAM_SIZE; i++) {
1841   2                      WriteTW88(REG307, dat);
1842   2              }
1843   1              FOsdRamSetFifo(ON,1);           //with vdelay 1
1844   1      }
1845          
1846          
1847          //=============================================================================
1848          //                      Init Menu Window Data initialize 
1849          //=============================================================================
1850          #ifdef SUPPORT_FOSD_MENU
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 31  

              // counter
              //              reg win
              //              data
              // 0 
              /**
              * init FOSD Menu Window
              */
              void InitFOsdMenuWindow(BYTE *ptr)
              {
              #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      BYTE index;
              #else
                      WORD index;
              #endif
                      BYTE data_cnt;
                              
                      WriteTW88Page(PAGE3_FOSD );
              
                      //debug message
              #if 0
                      data_cnt = *ptr;          //read counter
                  while( data_cnt ) {
                              ptr++;
                              dPrintf("\nOSD data down counts: %bd, WindowNo: %bd", data_cnt, *ptr);
                              index = FOSDWinBase[*ptr];                              // start register address
                              ptr++;
                              do {
              #ifdef SUPPORT_8BIT_CHIP_ACCESS
                                      dPrintf("\nOSD data down: 0x%02bx - 0x%02bx", index, *ptr);
              #else
                                      dPrintf("\nOSD data down: 0x%03x - 0x%02bx", index, *ptr);
              #endif
                                      index++; 
                                      ptr++;
                                      data_cnt--;
                              } while(data_cnt);
                              data_cnt = *ptr;        //read counter
                  };
              #endif
              
              
                      data_cnt = *ptr;          //read counter
                  while( data_cnt ) {
                              ptr++;
                              index = FOSDWinBase[*ptr];                              // start register address
                              ptr++;
                              do {
                                      WriteTW88(index, *ptr );
                                      index++; 
                                      ptr++;
                                      data_cnt--;
                              } while(data_cnt);
                              data_cnt = *ptr;        //read counter
                  };
              }
              #endif
1907          
1908          
1909          
1910          
1911          //=============================================================================
1912          //                                 void FontLUT( void )
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 32  

1913          //=============================================================================
1914          #ifdef SUPPORT_FOSD_MENU
              //Bank issue  
              void FOsdDefaultLUT( void )
              {
                      FOsdSetPaletteColorArray(0,FOsdHwDefPaletteBpp1,16, 1); //with 1 vdelay
              }
              #endif
1921          
1922          
1923          
1924          
1925          //=============================================================================
1926          //=============================================================================
1927          /**
1928          * init FontRam by number
1929          *
1930          * bank issue
1931          */
1932          void InitFontRamByNum(BYTE FontMode, WORD start)
1933          {
1934   1              switch ( FontMode ) {
1935   2                      case 0:
1936   2                              InitFontRam(start, &default_font,"def");
1937   2                              //FOsdSetDefPaletteColor(0);
1938   2                              break;
1939   2                      case 1:
1940   2                              //InitFontRam(0, &SPI_FONT1_TEMP, "FONT1");
1941   2                              //FOsdSetPaletteColorArray(16, SPI_FONT1, 40 , 1);
1942   2                              InitFontRam(start, &consolas16x26_606C90, "con");
1943   2                              break;
1944   2                      case 2:
1945   2                              //InitFontRam(0, &SPI_LOGO_TEMP, "LOGO");
1946   2                              InitFontRam(start, &consolas16x26_graynum,"con+gray");
1947   2                              FOsdInitBpp3AlphaTable(0);
1948   2                              break;
1949   2                      case 3:
1950   2                              InitFontRam(start, &consolas16x26_606C90, "con");
1951   2                              InitFontRam(start+0x80, &consolas16x26_graynum,"con+gray");
1952   2                              FOsdInitBpp3AlphaTable(0);
1953   2                              //FOsdSetDefPaletteColor(1);
1954   2                              break;
1955   2                      case 4:
1956   2                              InitFontRam(start, &default_font,"def");
1957   2                              ReplaceFontRam(start+0xA0, &kor_font,"def+kor");
1958   2                              break;
1959   2                      default:
1960   2                              //dPuts("\nDOWNLOAD SPI_FONT0");
1961   2                              //InitFontRam(0, &SPI_FONT0_TEMP,"FONT0");
1962   2                              InitFontRam(start, &default_font,"def");
1963   2                              break;
1964   2              }
1965   1      }
1966          /**
1967          * print Font Info
1968          */
1969          static void FontInfo(WORD start, FONT_SPI_INFO_t *font)
1970          {
1971   1              BYTE i;
1972   1              WORD *wptr;
1973   1      
1974   1              Printf("\nLoc:%lx",font->loc );
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 33  

1975   1              Printf(" size:%x",font->size);
1976   1              Printf(" %bdx%bd",font->width, font->height);
1977   1              Printf(" 2BPP:%x 3BPP:%x 4BPP:%x MAX:%x",font->bpp2+start,font->bpp3+start,font->bpp4+start,font->max+sta
             -rt);
1978   1              if(font->palette_bpp2 != NULL) {
1979   2                      Printf("\n\t2BPP:");
1980   2                      wptr = (WORD *)font->palette_bpp2;
1981   2                      for(i=0; i < 4; i++)
1982   2                              Printf("%04x ",*wptr++);
1983   2              }
1984   1              if(font->palette_bpp3 != NULL) {
1985   2                      Printf("\n\t3BPP:");
1986   2                      wptr = (WORD *)font->palette_bpp3;
1987   2                      for(i=0; i < 8; i++)
1988   2                              Printf("%04x ",*wptr++);
1989   2              }
1990   1              if(font->palette_bpp4 != NULL) {
1991   2                      Printf("\n\t4BPP:");
1992   2                      wptr = (WORD *)font->palette_bpp4;
1993   2                      for(i=0; i < 8; i++)
1994   2                              Printf("%04x ",*wptr++);
1995   2                      Printf("\n\t    :");
1996   2                      for(i=0; i < 8; i++)
1997   2                              Printf("%04x ",*wptr++);
1998   2              }
1999   1      }
2000          
2001          /**
2002          * print Font Info by number
2003          */
2004          void FontInfoByNum(BYTE FontMode)
2005          {
2006   1              switch ( FontMode ) {
2007   2                      case 0: 
2008   2                              Puts("\ndefailt_font");
2009   2                              FontInfo(0, &default_font);                     
2010   2                              break;
2011   2                      case 1:
2012   2                              Puts("\nconsolas");
2013   2                              FontInfo(0, &consolas16x26_606C90);
2014   2                              break;
2015   2                      case 2:
2016   2                              Puts("\nconsolas_graynum");
2017   2                              FontInfo(0, &consolas16x26_graynum);
2018   2                              break;
2019   2                      case 3:
2020   2                              Puts("\nconsolas+graynum");
2021   2                              FontInfo(0, &consolas16x26_606C90);
2022   2                              FontInfo(0+0x80, &consolas16x26_graynum);
2023   2                              break;
2024   2                      case 4:
2025   2                              Puts("\ndef+kor");
2026   2                              FontInfo(0, &default_font);
2027   2                              FontInfo(0+0xA0, &kor_font);
2028   2                              break;
2029   2                      default:
2030   2                              break;
2031   2              }
2032   1      }
2033          /**
2034          * dump current downloaded font
2035          */
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 34  

2036          void DumpFont(void)
2037          {
2038   1              WORD start,next,size;
2039   1              WORD dat,addr;
2040   1              BYTE value;
2041   1              BYTE w_cnt;
2042   1              WORD Y;
2043   1      
2044   1              Printf("\nname:%s", FontOsdInfo.font.name);
2045   1              Printf(" %bdx%bd",      FontOsdInfo.font.w,FontOsdInfo.font.h);
2046   1      
2047   1              //WIN0 for 1BPP
2048   1              FOsdWinInit(0);
2049   1              start = 0;
2050   1              next = FontOsdInfo.font.bpp2;
2051   1              size = next - start;
2052   1              Printf("\n1BPP start:%d end:%d size:%d",start,next-1,size);
2053   1              FOsdRamSetAddrAttr(start, 0x0F);
2054   1              delay1ms(1);
2055   1              w_cnt = 0;
2056   1              for(addr=0; addr < next; addr++) {
2057   2                      FOsdRamSetData(addr); //same as data
2058   2                      w_cnt++;
2059   2                      if(w_cnt==4) {
2060   3                              w_cnt = 0;
2061   3                              delay1ms(1);
2062   3                      }
2063   2              }
2064   1              FOsdWinScreenXY(0, 0,0);
2065   1              FOsdWinScreenWH(0, (size >=16 ? 16: size), (size >> 4) + (size & 0x0F ? 1 : 0));        Y = ((size >> 4) + 1)* F
             -ontOsdInfo.font.h + 10;
2066   1              FOsdWinZoom(0, 1/*0*/,0);
2067   1              FOsdWinMulticolor(0, ON);
2068   1              FOsdWinSetOsdRamStartAddr(0,start);
2069   1              FOsdWinEnable(0, ON);
2070   1      
2071   1              //WIN1 for 2BPP
2072   1              FOsdWinInit(1);
2073   1              start = next;
2074   1              next = FontOsdInfo.font.bpp3;
2075   1              size = next - start;
2076   1              size /= 2;
2077   1              Printf("\n2BPP start:%d end:%d size:%d",start,next,size);
2078   1              FOsdRamSetAddrAttr(start, 36>>2);
2079   1              for(addr=start,dat=start; dat < next; addr++,dat+=2) {
2080   2                      FOsdRamSetAddress(addr);
2081   2                      FOsdRamSetAttr(36>>2);
2082   2                      FOsdRamSetAddress(addr);
2083   2                      FOsdRamSetData(dat);    
2084   2                      delay1ms(1);
2085   2              }
2086   1              FOsdWinScreenXY(1, 0,Y);
2087   1              FOsdWinScreenWH(1, (size >=16 ? 16: size), (size >> 4) + (size & 0x0F ? 1 : 0));        Y += ((size >> 4) + 1)* 
             -FontOsdInfo.font.h + 10;
2088   1              FOsdWinZoom(1, 1/*0*/,0);
2089   1              FOsdWinMulticolor(1, ON);
2090   1              FOsdWinSetOsdRamStartAddr(1,start);
2091   1              FOsdWinEnable(1, ON);
2092   1      
2093   1              //WIN2 for 3BPP
2094   1              FOsdWinInit(2);
2095   1              start = next;
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 35  

2096   1              next = FontOsdInfo.font.bpp4;
2097   1              size = next - start;
2098   1              size /= 3;
2099   1              Printf("\n3BPP start:%d end:%d size:%d",start,next,size);
2100   1              FOsdRamSetWriteMode(FOSD_OSDRAM_WRITE_NORMAL);
2101   1              for(addr=start,dat=start; dat < next; addr++, dat+=3) {
2102   2                      FOsdRamSetAddress(addr);
2103   2                      FOsdRamSetAttr(40>>2);
2104   2                      FOsdRamSetAddress(addr);
2105   2                      FOsdRamSetData(dat);    
2106   2                      delay1ms(1);
2107   2              }
2108   1              FOsdWinScreenXY(2, 0,Y);
2109   1              FOsdWinScreenWH(2, (size >=16 ? 16: size), (size >> 4) + (size & 0x0F ? 1 : 0));        Y += ((size >> 4) + 1)* 
             -FontOsdInfo.font.h + 10;
2110   1              FOsdWinZoom(2, 1/*0*/,0);
2111   1              FOsdWinMulticolor(2, ON);
2112   1              FOsdWinSetOsdRamStartAddr(2,start);
2113   1              FOsdWinEnable(2, ON);
2114   1      
2115   1      
2116   1              //WIN3 for 4BPP
2117   1              FOsdWinInit(3);
2118   1              start = next;
2119   1              value = ReadTW88(REG_FOSD_MUL_CON) & 0x7F; //bytes per font
2120   1              next = 10*1024 / value;
2121   1              size = next - start;
2122   1              size /= 4;
2123   1              Printf("\n4BPP start:%d end:%d size:%d",start,next,size);
2124   1              FOsdRamSetAddrAttr(start, 48>>2);
2125   1              for(addr=start,dat=start; dat < next; addr++, dat+=4) {
2126   2                      FOsdRamSetAddress(addr);
2127   2                      FOsdRamSetAttr(48>>2);
2128   2                      FOsdRamSetAddress(addr);
2129   2                      FOsdRamSetData(dat);    
2130   2                      delay1ms(1);
2131   2              }
2132   1              FOsdWinScreenXY(3, 0,Y);
2133   1              FOsdWinScreenWH(3, (size >=16 ? 16: size), (size >> 4) + (size & 0x0F ? 1 : 0));
2134   1              FOsdWinZoom(3, 2,3/*0,0*/);
2135   1              FOsdWinMulticolor(3, ON);
2136   1              FOsdWinSetOsdRamStartAddr(3,start);
2137   1              FOsdWinEnable(3, ON);
2138   1      }
2139          
2140          
2141          
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 36  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0101 (BEGIN)
0000         L?0258:
0000         L?0259:
0000 E500        E     MOV     A,regTW88+01H
0002 2404              ADD     A,#04H
0004         L?0260:
0004 F582              MOV     DPL,A
0006 E500        E     MOV     A,regTW88
0008 3403              ADDC    A,#03H
000A F583              MOV     DPH,A
000C 22                RET     
000D         L?0261:
000D F0                MOVX    @DPTR,A
000E         L?0262:
000E 900000      R     MOV     DPTR,#font
0011         L?0263:
0011 E0                MOVX    A,@DPTR
0012 FB                MOV     R3,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FA                MOV     R2,A
0016 A3                INC     DPTR
0017 E0                MOVX    A,@DPTR
0018 F9                MOV     R1,A
0019 22                RET     
001A         L?0265:
001A 2407              ADD     A,#07H
001C         L?0266:
001C FD                MOV     R5,A
001D E4                CLR     A
001E 3E                ADDC    A,R6
001F         L?0267:
001F FC                MOV     R4,A
0020 E500        E     MOV     A,regTW88+01H
0022 2D                ADD     A,R5
0023         L?0268:
0023 F582              MOV     DPL,A
0025 E500        E     MOV     A,regTW88
0027 3C                ADDC    A,R4
0028 F583              MOV     DPH,A
002A 22                RET     
002B         L?0269:
002B         L?0270:
002B 7A00        R     MOV     R2,#HIGH FOsdDefPaletteBpp3
002D 7900        R     MOV     R1,#LOW FOsdDefPaletteBpp3
002F         L?0271:
002F 7BFF              MOV     R3,#0FFH
0031         L?0272:
0031 7408              MOV     A,#08H
0033         L?0273:
0033 900000      R     MOV     DPTR,#?_FOsdSetPaletteColorArray?BYTE+04H
0036 F0                MOVX    @DPTR,A
0037 E4                CLR     A
0038 A3                INC     DPTR
0039 F0                MOVX    @DPTR,A
003A 22                RET     
003B         L?0274:
003B EF                MOV     A,R7
003C 240F              ADD     A,#0FH
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 37  

003E         L?0275:
003E FF                MOV     R7,A
003F E4                CLR     A
0040 3E                ADDC    A,R6
0041         L?0276:
0041 FE                MOV     R6,A
0042         L?0277:
0042 E500        E     MOV     A,regTW88+01H
0044 2F                ADD     A,R7
0045         L?0278:
0045 F582              MOV     DPL,A
0047 E500        E     MOV     A,regTW88
0049 3E                ADDC    A,R6
004A F583              MOV     DPH,A
004C 22                RET     
004D         L?0280:
004D F0                MOVX    @DPTR,A
004E A3                INC     DPTR
004F EB                MOV     A,R3
0050 F0                MOVX    @DPTR,A
0051         L?0281:
0051 A907              MOV     R1,AR7
0053         L?0282:
0053 E9                MOV     A,R1
0054         L?0283:
0054 25E0              ADD     A,ACC
0056 2400        R     ADD     A,#LOW FOSDWinBase
0058 F582              MOV     DPL,A
005A E4                CLR     A
005B 3400        R     ADDC    A,#HIGH FOSDWinBase
005D F583              MOV     DPH,A
005F 22                RET     
0060         L?0287:
0060         L?0288:
0060 EE                MOV     A,R6
0061 F0                MOVX    @DPTR,A
0062 A3                INC     DPTR
0063         L?0289:
0063 EF                MOV     A,R7
0064 F0                MOVX    @DPTR,A
0065 A3                INC     DPTR
0066         L?0290:
0066 EB                MOV     A,R3
0067         L?0291:
0067 F0                MOVX    @DPTR,A
0068 A3                INC     DPTR
0069 EA                MOV     A,R2
006A F0                MOVX    @DPTR,A
006B A3                INC     DPTR
006C E9                MOV     A,R1
006D F0                MOVX    @DPTR,A
006E 22                RET     
006F         L?0292:
006F         L?0293:
006F 900000      R     MOV     DPTR,#size
0072 E0                MOVX    A,@DPTR
0073 FA                MOV     R2,A
0074 A3                INC     DPTR
0075 E0                MOVX    A,@DPTR
0076 FB                MOV     R3,A
0077 EA                MOV     A,R2
0078 C4                SWAP    A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 38  

0079 F8                MOV     R0,A
007A 54F0              ANL     A,#0F0H
007C C8                XCH     A,R0
007D EB                MOV     A,R3
007E C4                SWAP    A
007F 540F              ANL     A,#0FH
0081 48                ORL     A,R0
0082 FF                MOV     R7,A
0083 EB                MOV     A,R3
0084 540F              ANL     A,#0FH
0086 22                RET     
0087         L?0294:
0087         L?0295:
0087 7A00        R     MOV     R2,#HIGH FOsdDefPaletteBpp2
0089 7900        R     MOV     R1,#LOW FOsdDefPaletteBpp2
008B 7404              MOV     A,#04H
008D         L?0296:
008D 7BFF              MOV     R3,#0FFH
008F 900000      R     MOV     DPTR,#?_FOsdSetPaletteColorArray?BYTE+04H
0092 F0                MOVX    @DPTR,A
0093 E4                CLR     A
0094 A3                INC     DPTR
0095 F0                MOVX    @DPTR,A
0096 22                RET     
0097         L?0297:
0097         L?0298:
0097 900000      E     MOV     DPTR,#?_TWstrcpy?BYTE+03H
009A 74FF              MOV     A,#0FFH
009C F0                MOVX    @DPTR,A
009D A3                INC     DPTR
009E 22                RET     
009F         L?0299:
009F FF                MOV     R7,A
00A0 ED                MOV     A,R5
00A1 2F                ADD     A,R7
00A2 FE                MOV     R6,A
00A3 EC                MOV     A,R4
00A4 35F0              ADDC    A,B
00A6 F0                MOVX    @DPTR,A
00A7 A3                INC     DPTR
00A8 CE                XCH     A,R6
00A9 F0                MOVX    @DPTR,A
00AA 22                RET     
00AB         L?0300:
00AB 120000      R     LCALL   _FOsdRamSetAddrAttr
00AE         L?0301:
00AE 900000      R     MOV     DPTR,#start
00B1 E0                MOVX    A,@DPTR
00B2 FE                MOV     R6,A
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 900000      R     MOV     DPTR,#addr
00B9 EE                MOV     A,R6
00BA F0                MOVX    @DPTR,A
00BB A3                INC     DPTR
00BC EF                MOV     A,R7
00BD F0                MOVX    @DPTR,A
00BE 900000      R     MOV     DPTR,#dat
00C1 EE                MOV     A,R6
00C2 F0                MOVX    @DPTR,A
00C3 A3                INC     DPTR
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 39  

00C4 EF                MOV     A,R7
00C5 F0                MOVX    @DPTR,A
00C6 22                RET     
00C7         L?0303:
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9         L?0304:
00C9 ED                MOV     A,R5
00CA         L?0305:
00CA 25E0              ADD     A,ACC
00CC 2400        R     ADD     A,#LOW alpha_table_Y
00CE F582              MOV     DPL,A
00D0 E4                CLR     A
00D1 3400        R     ADDC    A,#HIGH alpha_table_Y
00D3 F583              MOV     DPH,A
00D5 22                RET     
00D6         L?0306:
00D6         L?0307:
00D6 900000      R     MOV     DPTR,#start
00D9 E0                MOVX    A,@DPTR
00DA FE                MOV     R6,A
00DB A3                INC     DPTR
00DC E0                MOVX    A,@DPTR
00DD FF                MOV     R7,A
00DE         L?0308:
00DE 900000      R     MOV     DPTR,#?_InitFontRam?BYTE+05H
00E1 74FF              MOV     A,#0FFH
00E3 F0                MOVX    @DPTR,A
00E4 A3                INC     DPTR
00E5 22                RET     
00E6         L?0309:
00E6 FF                MOV     R7,A
00E7 ED                MOV     A,R5
00E8 2F                ADD     A,R7
00E9 FE                MOV     R6,A
00EA EC                MOV     A,R4
00EB 35F0              ADDC    A,B
00ED F0                MOVX    @DPTR,A
00EE A3                INC     DPTR
00EF CE                XCH     A,R6
00F0 F0                MOVX    @DPTR,A
00F1 22                RET     
00F2         L?0310:
00F2 7BFF              MOV     R3,#0FFH
00F4         L?0311:
00F4 E0                MOVX    A,@DPTR
00F5 FF                MOV     R7,A
00F6 A3                INC     DPTR
00F7 E0                MOVX    A,@DPTR
00F8 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
00FB CF                XCH     A,R7
00FC F0                MOVX    @DPTR,A
00FD A3                INC     DPTR
00FE EF                MOV     A,R7
00FF F0                MOVX    @DPTR,A
0100 22                RET     
0101         L?0312:
0101         L?0313:
0101 900000      R     MOV     DPTR,#next
0104 E0                MOVX    A,@DPTR
0105 FE                MOV     R6,A
0106 A3                INC     DPTR
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 40  

0107 E0                MOVX    A,@DPTR
0108 FF                MOV     R7,A
0109 C3                CLR     C
010A 900000      R     MOV     DPTR,#dat+01H
010D E0                MOVX    A,@DPTR
010E 9F                SUBB    A,R7
010F 900000      R     MOV     DPTR,#dat
0112 E0                MOVX    A,@DPTR
0113 9E                SUBB    A,R6
0114 22                RET     
0115         L?0314:
0115 F0                MOVX    @DPTR,A
0116 A3                INC     DPTR
0117 EB                MOV     A,R3
0118 F0                MOVX    @DPTR,A
0119 7400        R     MOV     A,#LOW BPP3_alpha_lut_offset
011B 2C                ADD     A,R4
011C         L?0315:
011C F582              MOV     DPL,A
011E E4                CLR     A
011F 3400        R     ADDC    A,#HIGH BPP3_alpha_lut_offset
0121 F583              MOV     DPH,A
0123 22                RET     
0124         L?0317:
0124 13                RRC     A
0125 13                RRC     A
0126 543F              ANL     A,#03FH
0128 FF                MOV     R7,A
0129 7E00              MOV     R6,#00H
012B E0                MOVX    A,@DPTR
012C FC                MOV     R4,A
012D A3                INC     DPTR
012E E0                MOVX    A,@DPTR
012F FD                MOV     R5,A
0130 120000      E     LCALL   ?C?IMUL
0133 900007            MOV     DPTR,#07H
0136 120000      E     LCALL   ?C?CLDOPTR
0139 C3                CLR     C
013A 13                RRC     A
013B         L?0318:
013B FD                MOV     R5,A
013C 7C00              MOV     R4,#00H
013E 020000      E     LJMP    ?C?IMUL
0141         L?0319:
0141 120000      E     LCALL   ?C?LLDPTR
0144 900000      R     MOV     DPTR,#?_FOsdDownloadFontByDMA?BYTE+02H
0147 120000      E     LCALL   ?C?LSTXDATA
014A 900004            MOV     DPTR,#04H
014D 120000      E     LCALL   ?C?ILDOPTR
0150 900000      R     MOV     DPTR,#?_FOsdDownloadFontByDMA?BYTE+06H
0153         L?0320:
0153 FF                MOV     R7,A
0154 E5F0              MOV     A,B
0156 F0                MOVX    @DPTR,A
0157 A3                INC     DPTR
0158 EF                MOV     A,R7
0159 F0                MOVX    @DPTR,A
015A 22                RET     
015B         L?0322:
015B         L?0323:
015B 120000      R     LCALL   _FOsdWinMulticolor
015E 900000      R     MOV     DPTR,#start
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 41  

0161 E0                MOVX    A,@DPTR
0162 FC                MOV     R4,A
0163 A3                INC     DPTR
0164 E0                MOVX    A,@DPTR
0165 FD                MOV     R5,A
0166 22                RET     
0167         L?0326:
0167         L?0327:
0167 E4                CLR     A
0168         L?0328:
0168 F0                MOVX    @DPTR,A
0169 900000      R     MOV     DPTR,#index
016C E0                MOVX    A,@DPTR
016D FE                MOV     R6,A
016E A3                INC     DPTR
016F E0                MOVX    A,@DPTR
0170 22                RET     
0171         L?0329:
0171         L?0330:
0171 900008            MOV     DPTR,#08H
0174         L?0331:
0174 120000      E     LCALL   ?C?ILDOPTR
0177 FF                MOV     R7,A
0178 900000      R     MOV     DPTR,#dest_font_index
017B 22                RET     
017C         L?0332:
017C FF                MOV     R7,A
017D ED                MOV     A,R5
017E 2F                ADD     A,R7
017F FE                MOV     R6,A
0180 EC                MOV     A,R4
0181 35F0              ADDC    A,B
0183 F0                MOVX    @DPTR,A
0184 A3                INC     DPTR
0185 CE                XCH     A,R6
0186 F0                MOVX    @DPTR,A
0187 22                RET     
0188         L?0334:
0188         L?0335:
0188 E0                MOVX    A,@DPTR
0189 FE                MOV     R6,A
018A A3                INC     DPTR
018B         L?0336:
018B E0                MOVX    A,@DPTR
018C FF                MOV     R7,A
018D E9                MOV     A,R1
018E 75F00B            MOV     B,#0BH
0191 A4                MUL     AB
0192 22                RET     
0193         L?0337:
0193         L?0338:
0193 E0                MOVX    A,@DPTR
0194 FF                MOV     R7,A
0195 A3                INC     DPTR
0196 E0                MOVX    A,@DPTR
0197 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
019A CF                XCH     A,R7
019B F0                MOVX    @DPTR,A
019C A3                INC     DPTR
019D EF                MOV     A,R7
019E F0                MOVX    @DPTR,A
019F 22                RET     
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 42  

01A0         L?0339:
01A0 900010            MOV     DPTR,#010H
01A3         L?0340:
01A3 120000      E     LCALL   ?C?PLDOPTR
01A6 E9                MOV     A,R1
01A7 4A                ORL     A,R2
01A8 4B                ORL     A,R3
01A9 22                RET     
01AA         L?0341:
01AA         L?0342:
01AA E4                CLR     A
01AB 93                MOVC    A,@A+DPTR
01AC FE                MOV     R6,A
01AD 7401              MOV     A,#01H
01AF 93                MOVC    A,@A+DPTR
01B0 FF                MOV     R7,A
01B1 22                RET     
01B2         L?0343:
01B2 75F003            MOV     B,#03H
01B5 A4                MUL     AB
01B6 FF                MOV     R7,A
01B7 AEF0              MOV     R6,B
01B9 900000      R     MOV     DPTR,#Y+01H
01BC E0                MOVX    A,@DPTR
01BD 2F                ADD     A,R7
01BE F0                MOVX    @DPTR,A
01BF 900000      R     MOV     DPTR,#Y
01C2 E0                MOVX    A,@DPTR
01C3 3E                ADDC    A,R6
01C4 F0                MOVX    @DPTR,A
01C5 22                RET     
01C6         L?0344:
01C6 FD                MOV     R5,A
01C7 2F                ADD     A,R7
01C8 FE                MOV     R6,A
01C9 EC                MOV     A,R4
01CA 35F0              ADDC    A,B
01CC F0                MOVX    @DPTR,A
01CD A3                INC     DPTR
01CE CE                XCH     A,R6
01CF F0                MOVX    @DPTR,A
01D0         L?0345:
01D0 90000A            MOV     DPTR,#0AH
01D3 020000      E     LJMP    ?C?ILDOPTR
01D6         L?0346:
01D6 7400        R     MOV     A,#HIGH ?SC_304
01D8 F0                MOVX    @DPTR,A
01D9 A3                INC     DPTR
01DA 7400        R     MOV     A,#LOW ?SC_304
01DC F0                MOVX    @DPTR,A
01DD         L?0347:
01DD 7BFF              MOV     R3,#0FFH
01DF 7A00        E     MOV     R2,#HIGH consolas16x26_606C90
01E1 7900        E     MOV     R1,#LOW consolas16x26_606C90
01E3 22                RET     
01E4         L?0348:
01E4 7400        R     MOV     A,#HIGH ?SC_300
01E6 F0                MOVX    @DPTR,A
01E7 A3                INC     DPTR
01E8 7400        R     MOV     A,#LOW ?SC_300
01EA F0                MOVX    @DPTR,A
01EB         L?0349:
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 43  

01EB 7BFF              MOV     R3,#0FFH
01ED 7A00        E     MOV     R2,#HIGH default_font
01EF 7900        E     MOV     R1,#LOW default_font
01F1 22                RET     
01F2         L?0350:
01F2 E0                MOVX    A,@DPTR
01F3 FC                MOV     R4,A
01F4 A3                INC     DPTR
01F5 E0                MOVX    A,@DPTR
01F6 FD                MOV     R5,A
01F7 900000      R     MOV     DPTR,#next
01FA EC                MOV     A,R4
01FB F0                MOVX    @DPTR,A
01FC A3                INC     DPTR
01FD ED                MOV     A,R5
01FE F0                MOVX    @DPTR,A
01FF C3                CLR     C
0200 9F                SUBB    A,R7
0201 FF                MOV     R7,A
0202 EC                MOV     A,R4
0203 9E                SUBB    A,R6
0204 22                RET     
0205         L?0351:
0205 FE                MOV     R6,A
0206 900000      R     MOV     DPTR,#Y+01H
0209 E0                MOVX    A,@DPTR
020A 2F                ADD     A,R7
020B F0                MOVX    @DPTR,A
020C 900000      R     MOV     DPTR,#Y
020F E0                MOVX    A,@DPTR
0210 3E                ADDC    A,R6
0211 F0                MOVX    @DPTR,A
0212 E4                CLR     A
0213 FB                MOV     R3,A
0214 7D01              MOV     R5,#01H
0216 22                RET     
0217         L?0354:
0217 900000      R     MOV     DPTR,#i
021A E0                MOVX    A,@DPTR
021B 75F002            MOV     B,#02H
021E A4                MUL     AB
021F F582              MOV     DPL,A
0221 85F083            MOV     DPH,B
0224 020000      E     LJMP    ?C?ILDOPTR
0227         L?0355:
0227 F0                MOVX    @DPTR,A
0228         L?0356:
0228 7B01              MOV     R3,#01H
022A 7A00        E     MOV     R2,#HIGH FOsdMsgBuff
022C 7900        E     MOV     R1,#LOW FOsdMsgBuff
022E 22                RET     
022F         L?0357:
022F         L?0358:
022F 900006            MOV     DPTR,#06H
0232 020000      E     LJMP    ?C?CLDOPTR
0235         L?0359:
0235 FF                MOV     R7,A
0236         L?0360:
0236 E0                MOVX    A,@DPTR
0237 FC                MOV     R4,A
0238 A3                INC     DPTR
0239 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 44  

023A 2500        E     ADD     A,regTW88+01H
023C 22                RET     
023D         L?0361:
023D 900000      R     MOV     DPTR,#src_loc
0240 E0                MOVX    A,@DPTR
0241 FC                MOV     R4,A
0242 A3                INC     DPTR
0243 E0                MOVX    A,@DPTR
0244 FD                MOV     R5,A
0245 A3                INC     DPTR
0246 E0                MOVX    A,@DPTR
0247 FE                MOV     R6,A
0248 A3                INC     DPTR
0249 E0                MOVX    A,@DPTR
024A FF                MOV     R7,A
024B 22                RET     
024C         L?0362:
024C A3                INC     DPTR
024D F0                MOVX    @DPTR,A
024E         L?0363:
024E 7BFF              MOV     R3,#0FFH
0250 7A00        E     MOV     R2,#HIGH consolas16x26_graynum
0252 7900        E     MOV     R1,#LOW consolas16x26_graynum
0254 22                RET     
0255         L?0364:
0255 900000      R     MOV     DPTR,#next
0258         L?0365:
0258 EE                MOV     A,R6
0259 F0                MOVX    @DPTR,A
025A FC                MOV     R4,A
025B A3                INC     DPTR
025C EF                MOV     A,R7
025D F0                MOVX    @DPTR,A
025E FD                MOV     R5,A
025F 22                RET     
0260         L?0366:
0260 7401              MOV     A,#01H
0262 F0                MOVX    @DPTR,A
0263 A3                INC     DPTR
0264 7400        R     MOV     A,#HIGH FontOsdInfo
0266 F0                MOVX    @DPTR,A
0267 A3                INC     DPTR
0268 7400        R     MOV     A,#LOW FontOsdInfo
026A F0                MOVX    @DPTR,A
026B 7BFF              MOV     R3,#0FFH
026D 22                RET     
026E         L?0367:
026E 7410              MOV     A,#010H
0270         L?0368:
0270 900000      R     MOV     DPTR,#?_FOsdSetPaletteColorArray?BYTE+04H
0273 F0                MOVX    @DPTR,A
0274 E4                CLR     A
0275 A3                INC     DPTR
0276 F0                MOVX    @DPTR,A
0277 22                RET     
0278         L?0369:
0278         L?0370:
0278 F0                MOVX    @DPTR,A
0279 900000      R     MOV     DPTR,#dat
027C E0                MOVX    A,@DPTR
027D 3400              ADDC    A,#00H
027F F0                MOVX    @DPTR,A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 45  

0280 22                RET     
0281         L?0372:
0281         L?0373:
0281 E4                CLR     A
0282 93                MOVC    A,@A+DPTR
0283 FF                MOV     R7,A
0284 7401              MOV     A,#01H
0286 93                MOVC    A,@A+DPTR
0287 22                RET     
0288         L?0374:
0288 A3                INC     DPTR
0289 F0                MOVX    @DPTR,A
028A CE                XCH     A,R6
028B         L?0375:
028B A3                INC     DPTR
028C F0                MOVX    @DPTR,A
028D 900000      R     MOV     DPTR,#size
0290 E0                MOVX    A,@DPTR
0291 22                RET     
0292         L?0376:
0292         L?0377:
0292 900000      R     MOV     DPTR,#addr
0295 E0                MOVX    A,@DPTR
0296 04                INC     A
0297 F0                MOVX    @DPTR,A
0298 22                RET     
0299         L?0378:
0299         L?0379:
0299 F583              MOV     DPH,A
029B EE                MOV     A,R6
029C F0                MOVX    @DPTR,A
029D A3                INC     DPTR
029E EF                MOV     A,R7
029F F0                MOVX    @DPTR,A
02A0 22                RET     
02A1         L?0380:
02A1 E0                MOVX    A,@DPTR
02A2 F9                MOV     R1,A
02A3 A3                INC     DPTR
02A4 E0                MOVX    A,@DPTR
02A5 FA                MOV     R2,A
02A6 A3                INC     DPTR
02A7 E0                MOVX    A,@DPTR
02A8 900000      E     MOV     DPTR,#?_dPrintf?BYTE+05H
02AB C9                XCH     A,R1
02AC 22                RET     
02AD         L?0381:
02AD 7BFF              MOV     R3,#0FFH
02AF 7A00        R     MOV     R2,#HIGH ?SC_9
02B1 7900        R     MOV     R1,#LOW ?SC_9
02B3 900000      R     MOV     DPTR,#FontOsdInfo+010H
02B6 E0                MOVX    A,@DPTR
02B7 22                RET     
02B8         L?0382:
02B8 7401              MOV     A,#01H
02BA 93                MOVC    A,@A+DPTR
02BB 2401              ADD     A,#01H
02BD FE                MOV     R6,A
02BE E4                CLR     A
02BF 93                MOVC    A,@A+DPTR
02C0 3400              ADDC    A,#00H
02C2 22                RET     
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 46  

02C3         L?0383:
02C3 120000      E     LCALL   ?C?LSTXDATA
02C6 900000      R     MOV     DPTR,#size
02C9 E0                MOVX    A,@DPTR
02CA FF                MOV     R7,A
02CB A3                INC     DPTR
02CC E0                MOVX    A,@DPTR
02CD 22                RET     
02CE         L?0384:
02CE F0                MOVX    @DPTR,A
02CF         L?0385:
02CF 900007            MOV     DPTR,#07H
02D2 020000      E     LJMP    ?C?CLDOPTR
02D5         L?0386:
02D5         L?0387:
02D5 90000C            MOV     DPTR,#0CH
02D8 020000      E     LJMP    ?C?ILDOPTR
02DB         L?0388:
02DB         L?0389:
02DB A3                INC     DPTR
02DC E0                MOVX    A,@DPTR
02DD 2F                ADD     A,R7
02DE FF                MOV     R7,A
02DF E500        E     MOV     A,regTW88+01H
02E1 22                RET     
02E2         L?0390:
02E2         L?0391:
02E2 900000      R     MOV     DPTR,#winno
02E5 E0                MOVX    A,@DPTR
02E6 FF                MOV     R7,A
02E7 E4                CLR     A
02E8 22                RET     
02E9         L?0392:
02E9         L?0393:
02E9 120000      E     LCALL   ?C?PLDOPTR
02EC 900000      R     MOV     DPTR,#wptr
02EF 22                RET     
             ; FUNCTION Com0101 (END)

             ; FUNCTION DumpFontInfo (BEGIN)
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
0000 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
0003 120000      R     LCALL   L?0366
0006 7A00        R     MOV     R2,#HIGH ?SC_0
0008 7900        R     MOV     R1,#LOW ?SC_0
000A 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 196
000D 120000      R     LCALL   L?0381
0010 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
0013 F0                MOVX    @DPTR,A
0014 900000      R     MOV     DPTR,#FontOsdInfo+011H
0017 E0                MOVX    A,@DPTR
0018 900000      E     MOV     DPTR,#?_ePrintf?BYTE+04H
001B F0                MOVX    @DPTR,A
001C 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 197
001F 7A00        R     MOV     R2,#HIGH ?SC_18
0021 7900        R     MOV     R1,#LOW ?SC_18
0023 900000      R     MOV     DPTR,#FontOsdInfo+014H
0026 120000      R     LCALL   L?0310
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 47  

0029 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 198
002C 7A00        R     MOV     R2,#HIGH ?SC_27
002E 7900        R     MOV     R1,#LOW ?SC_27
0030 900000      R     MOV     DPTR,#FontOsdInfo+016H
0033 120000      R     LCALL   L?0310
0036 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 199
0039 7BFF              MOV     R3,#0FFH
003B 7A00        R     MOV     R2,#HIGH ?SC_36
003D 7900        R     MOV     R1,#LOW ?SC_36
003F 900000      R     MOV     DPTR,#FontOsdInfo+018H
0042 120000      R     LCALL   L?0311
0045 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 200
0048 7BFF              MOV     R3,#0FFH
004A 7A00        R     MOV     R2,#HIGH ?SC_45
004C 7900        R     MOV     R1,#LOW ?SC_45
004E 900000      R     MOV     DPTR,#FontOsdInfo+01AH
0051 120000      R     LCALL   L?0311
0054 020000      E     LJMP    _ePrintf
             ; FUNCTION DumpFontInfo (END)

             ; FUNCTION _FOsdRamSetFifo (BEGIN)
                                           ; SOURCE LINE # 228
0000 900000      R     MOV     DPTR,#fOn
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
;---- Variable 'vdelay' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
0005 ED                MOV     A,R5
0006 6004              JZ      ?C0002
                                           ; SOURCE LINE # 231
0008 FF                MOV     R7,A
0009 120000      E     LCALL   _WaitVBlank
000C         ?C0002:
                                           ; SOURCE LINE # 234
000C 900000      R     MOV     DPTR,#fOn
000F E0                MOVX    A,@DPTR
0010 600B              JZ      ?C0003
0012 E4                CLR     A
0013 2500        E     ADD     A,regTW88+01H
0015 120000      R     LCALL   L?0260
0018 E0                MOVX    A,@DPTR
0019 54FE              ANL     A,#0FEH
001B F0                MOVX    @DPTR,A
001C 22                RET     
001D         ?C0003:
                                           ; SOURCE LINE # 235
001D E4                CLR     A
001E 2500        E     ADD     A,regTW88+01H
0020 120000      R     LCALL   L?0260
0023 E0                MOVX    A,@DPTR
0024 4401              ORL     A,#01H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
0027         ?C0005:
0027 22                RET     
             ; FUNCTION _FOsdRamSetFifo (END)

             ; FUNCTION _FOsdFontSetFifo (BEGIN)
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 48  

                                           ; SOURCE LINE # 252
;---- Variable 'fOn' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 255
0000 EF                MOV     A,R7
0001 600B              JZ      ?C0006
0003 E4                CLR     A
0004 2500        E     ADD     A,regTW88+01H
0006 120000      R     LCALL   L?0260
0009 E0                MOVX    A,@DPTR
000A 54FD              ANL     A,#0FDH
000C F0                MOVX    @DPTR,A
000D 22                RET     
000E         ?C0006:
                                           ; SOURCE LINE # 256
000E E4                CLR     A
000F 2500        E     ADD     A,regTW88+01H
0011 120000      R     LCALL   L?0260
0014 E0                MOVX    A,@DPTR
0015 4402              ORL     A,#02H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
0018         ?C0008:
0018 22                RET     
             ; FUNCTION _FOsdFontSetFifo (END)

             ; FUNCTION _FOsdSetFontWidthHeight (BEGIN)
                                           ; SOURCE LINE # 266
;---- Variable 'height' assigned to Register 'R5' ----
;---- Variable 'width' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 271
0000 E4                CLR     A
0001 2500        E     ADD     A,regTW88+01H
0003 120000      R     LCALL   L?0260
0006 E0                MOVX    A,@DPTR
0007 FE                MOV     R6,A
;---- Variable 'value' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 272
0008 EF                MOV     A,R7
0009 B41006            CJNE    A,#010H,?C0009
000C EE                MOV     A,R6
000D 4410              ORL     A,#010H
000F FE                MOV     R6,A
0010 8004              SJMP    ?C0010
0012         ?C0009:
                                           ; SOURCE LINE # 273
0012 EE                MOV     A,R6
0013 54EF              ANL     A,#0EFH
0015 FE                MOV     R6,A
0016         ?C0010:
                                           ; SOURCE LINE # 274
0016 E4                CLR     A
0017 2500        E     ADD     A,regTW88+01H
0019 120000      R     LCALL   L?0260
001C EE                MOV     A,R6
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 276
001E ED                MOV     A,R5
001F C3                CLR     C
0020 13                RRC     A
0021 FE                MOV     R6,A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 49  

0022 E500        E     MOV     A,regTW88+01H
0024 2450              ADD     A,#050H
0026 120000      R     LCALL   L?0260
0029 EE                MOV     A,R6
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
002B EF                MOV     A,R7
002C 13                RRC     A
002D 13                RRC     A
002E 543F              ANL     A,#03FH
0030 8EF0              MOV     B,R6
0032 A4                MUL     AB
0033 FF                MOV     R7,A
0034 E500        E     MOV     A,regTW88+01H
0036 2451              ADD     A,#051H
0038 120000      R     LCALL   L?0260
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
003D 22                RET     
             ; FUNCTION _FOsdSetFontWidthHeight (END)

             ; FUNCTION FOsdSetDeValue (BEGIN)
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 307
0000 E500        E     MOV     A,regTW88+01H
0002 2410              ADD     A,#010H
0004 F582              MOV     DPL,A
0006 E500        E     MOV     A,regTW88
0008 3402              ADDC    A,#02H
000A F583              MOV     DPH,A
000C E0                MOVX    A,@DPTR
;---- Variable 'HDE' assigned to Register 'R1' ----
000D F9                MOV     R1,A
                                           ; SOURCE LINE # 308
000E E500        E     MOV     A,regTW88+01H
0010 240D              ADD     A,#0DH
0012 F582              MOV     DPL,A
0014 E500        E     MOV     A,regTW88
0016 3402              ADDC    A,#02H
0018 F583              MOV     DPH,A
;---- Variable 'PCLKO' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 310
001A 7D01              MOV     R5,#01H
                                           ; SOURCE LINE # 313
001C E4                CLR     A
001D 2500        E     ADD     A,regTW88+01H
001F F582              MOV     DPL,A
0021 E500        E     MOV     A,regTW88
0023 3404              ADDC    A,#04H
0025 F583              MOV     DPH,A
0027 E0                MOVX    A,@DPTR
0028 30E104            JNB     ACC.1,?C0012
002B 7F01              MOV     R7,#01H
002D 8002              SJMP    ?C0013
002F         ?C0012:
002F 7F00              MOV     R7,#00H
0031         ?C0013:
;---- Variable 'Mixing' assigned to Register 'R4' ----
0031 AC07              MOV     R4,AR7
                                           ; SOURCE LINE # 315
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 50  

0033 ED                MOV     A,R5
0034 FF                MOV     R7,A
0035 E9                MOV     A,R1
0036 2F                ADD     A,R7
0037 FB                MOV     R3,A
0038 E4                CLR     A
0039 33                RLC     A
003A FA                MOV     R2,A
003B EC                MOV     A,R4
003C 75F002            MOV     B,#02H
003F A4                MUL     AB
0040 2424              ADD     A,#024H
0042 FF                MOV     R7,A
0043 E4                CLR     A
0044 35F0              ADDC    A,B
0046 FE                MOV     R6,A
0047 C3                CLR     C
0048 EB                MOV     A,R3
0049 9F                SUBB    A,R7
004A EE                MOV     A,R6
004B 6480              XRL     A,#080H
004D F8                MOV     R0,A
004E EA                MOV     A,R2
004F 6480              XRL     A,#080H
0051 98                SUBB    A,R0
0052 EC                MOV     A,R4
0053 500A              JNC     ?C0014
                                           ; SOURCE LINE # 317
0055 25E0              ADD     A,ACC
0057 C3                CLR     C
0058 99                SUBB    A,R1
0059 C3                CLR     C
005A 9D                SUBB    A,R5
005B 2425              ADD     A,#025H
                                           ; SOURCE LINE # 318
005D 800B              SJMP    ?C0230
005F         ?C0014:
                                           ; SOURCE LINE # 320
005F 25E0              ADD     A,ACC
0061 2424              ADD     A,#024H
0063 FF                MOV     R7,A
0064 AE05              MOV     R6,AR5
0066 E9                MOV     A,R1
0067 2E                ADD     A,R6
0068 C3                CLR     C
0069 9F                SUBB    A,R7
006A         ?C0230:
006A 900000      R     MOV     DPTR,#temp
006D F0                MOVX    @DPTR,A
006E         ?C0015:
                                           ; SOURCE LINE # 323
006E 900000      R     MOV     DPTR,#temp
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 E500        E     MOV     A,regTW88+01H
0075 2403              ADD     A,#03H
0077 120000      R     LCALL   L?0260
007A EF                MOV     A,R7
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
007C 7BFF              MOV     R3,#0FFH
007E 7A00        R     MOV     R2,#HIGH ?SC_53
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 51  

0080 7900        R     MOV     R1,#LOW ?SC_53
0082 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
0087 020000      E     LJMP    _dPrintf
             ; FUNCTION FOsdSetDeValue (END)

             ; FUNCTION _FOsdBlinkOnOff (BEGIN)
                                           ; SOURCE LINE # 358
;---- Variable 'fOn' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 361
0000 EF                MOV     A,R7
0001 6008              JZ      ?C0017
0003 120000      R     LCALL   L?0258
0006 E0                MOVX    A,@DPTR
0007 4480              ORL     A,#080H
0009 F0                MOVX    @DPTR,A
000A 22                RET     
000B         ?C0017:
                                           ; SOURCE LINE # 362
000B 120000      R     LCALL   L?0258
000E E0                MOVX    A,@DPTR
000F 547F              ANL     A,#07FH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
0012         ?C0019:
0012 22                RET     
             ; FUNCTION _FOsdBlinkOnOff (END)

             ; FUNCTION _FOsdRamSetWriteMode (BEGIN)
                                           ; SOURCE LINE # 385
;---- Variable 'fMode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 389
0000 120000      R     LCALL   L?0259
0003 E0                MOVX    A,@DPTR
0004 54F3              ANL     A,#0F3H
0006 FE                MOV     R6,A
;---- Variable 'value' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 390
0007 EF                MOV     A,R7
0008 25E0              ADD     A,ACC
000A 25E0              ADD     A,ACC
000C 4E                ORL     A,R6
                                           ; SOURCE LINE # 391
000D FF                MOV     R7,A
000E 120000      R     LCALL   L?0259
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 392
0013 22                RET     
             ; FUNCTION _FOsdRamSetWriteMode (END)

             ; FUNCTION _FOsdSetAccessMode (BEGIN)
                                           ; SOURCE LINE # 433
;---- Variable 'fType' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 437
0000 EF                MOV     A,R7
0001 6008              JZ      ?C0021
0003 120000      R     LCALL   L?0259
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 52  

0006 E0                MOVX    A,@DPTR
0007 4401              ORL     A,#01H
0009 F0                MOVX    @DPTR,A
000A 22                RET     
000B         ?C0021:
                                           ; SOURCE LINE # 438
000B 120000      R     LCALL   L?0259
000E E0                MOVX    A,@DPTR
000F 54FE              ANL     A,#0FEH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
0012         ?C0023:
0012 22                RET     
             ; FUNCTION _FOsdSetAccessMode (END)

             ; FUNCTION L?0324 (BEGIN)
0000         L?0325:
0000 900000      R     MOV     DPTR,#addr
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
             ; FUNCTION _FOsdRamSetAddress (BEGIN)
                                           ; SOURCE LINE # 447
;---- Variable 'addr' assigned to Register 'R4/R5' ----
0008 AD07              MOV     R5,AR7
000A AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 448
                                           ; SOURCE LINE # 450
000C EC                MOV     A,R4
000D FF                MOV     R7,A
000E E500        E     MOV     A,regTW88+01H
0010 2405              ADD     A,#05H
0012 120000      R     LCALL   L?0260
0015 E0                MOVX    A,@DPTR
0016 54FE              ANL     A,#0FEH
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A E500        E     MOV     A,regTW88+01H
001C 2405              ADD     A,#05H
001E 120000      R     LCALL   L?0260
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 451
0023 E500        E     MOV     A,regTW88+01H
0025 2406              ADD     A,#06H
0027 120000      R     LCALL   L?0260
002A ED                MOV     A,R5
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
002C 22                RET     
             ; FUNCTION _FOsdRamSetAddress (END)

             ; FUNCTION _FOsdRamSetData (BEGIN)
                                           ; SOURCE LINE # 459
;---- Variable 'dat' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 462
0000 EE                MOV     A,R6
0001 30E009            JNB     ACC.0,?C0025
0004 120000      R     LCALL   L?0259
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 53  

0007 E0                MOVX    A,@DPTR
0008 4420              ORL     A,#020H
000A F0                MOVX    @DPTR,A
000B 8007              SJMP    ?C0026
000D         ?C0025:
                                           ; SOURCE LINE # 463
000D 120000      R     LCALL   L?0259
0010 E0                MOVX    A,@DPTR
0011 54DF              ANL     A,#0DFH
0013 F0                MOVX    @DPTR,A
0014         ?C0026:
                                           ; SOURCE LINE # 464
0014 E500        E     MOV     A,regTW88+01H
0016 2407              ADD     A,#07H
0018 120000      R     LCALL   L?0260
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
001D 22                RET     
             ; FUNCTION _FOsdRamSetData (END)

             ; FUNCTION _FOsdRamSetAttr (BEGIN)
                                           ; SOURCE LINE # 475
;---- Variable 'attr' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 478
0000 E500        E     MOV     A,regTW88+01H
0002 2408              ADD     A,#08H
0004 120000      R     LCALL   L?0260
0007 EF                MOV     A,R7
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 479
0009 22                RET     
             ; FUNCTION _FOsdRamSetAttr (END)

             ; FUNCTION _FOsdOnOff (BEGIN)
                                           ; SOURCE LINE # 522
0000 900000      R     MOV     DPTR,#vdelay
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
;---- Variable 'fOnOff' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 527
0005 E500        E     MOV     A,regTW88+01H
0007 240C              ADD     A,#0CH
0009 120000      R     LCALL   L?0260
000C E0                MOVX    A,@DPTR
000D 900000      R     MOV     DPTR,#value
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
0011 EF                MOV     A,R7
0012 6016              JZ      ?C0029
                                           ; SOURCE LINE # 529
0014 E0                MOVX    A,@DPTR
0015 30E636            JNB     ACC.6,?C0033
                                           ; SOURCE LINE # 530
0018 900000      R     MOV     DPTR,#vdelay
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D 6003              JZ      ?C0031
                                           ; SOURCE LINE # 531
001F 120000      E     LCALL   _WaitVBlank
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 54  

0022         ?C0031:
                                           ; SOURCE LINE # 532
0022 900000      R     MOV     DPTR,#value
0025 E0                MOVX    A,@DPTR
0026 54BF              ANL     A,#0BFH
                                           ; SOURCE LINE # 533
0028 8017              SJMP    ?C0231
                                           ; SOURCE LINE # 534
                                           ; SOURCE LINE # 535
002A         ?C0029:
                                           ; SOURCE LINE # 536
                                           ; SOURCE LINE # 537
002A 900000      R     MOV     DPTR,#value
002D E0                MOVX    A,@DPTR
002E 20E61D            JB      ACC.6,?C0033
                                           ; SOURCE LINE # 538
0031 900000      R     MOV     DPTR,#vdelay
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 6003              JZ      ?C0035
                                           ; SOURCE LINE # 539
0038 120000      E     LCALL   _WaitVBlank
003B         ?C0035:
                                           ; SOURCE LINE # 540
003B 900000      R     MOV     DPTR,#value
003E E0                MOVX    A,@DPTR
003F 4440              ORL     A,#040H
0041         ?C0231:
0041 FF                MOV     R7,A
0042 E500        E     MOV     A,regTW88+01H
0044 240C              ADD     A,#0CH
0046 120000      R     LCALL   L?0260
0049 EF                MOV     A,R7
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
004B 7F01              MOV     R7,#01H
004D 22                RET     
                                           ; SOURCE LINE # 542
                                           ; SOURCE LINE # 543
004E         ?C0033:
                                           ; SOURCE LINE # 544
004E 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 545
0050         ?C0032:
0050 22                RET     
             ; FUNCTION _FOsdOnOff (END)

             ; FUNCTION _FOsdSetPaletteColor (BEGIN)
                                           ; SOURCE LINE # 560
0000 900000      R     MOV     DPTR,#start
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 561
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 55  

                                           ; SOURCE LINE # 565
000E A3                INC     DPTR
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 6003              JZ      ?C0036
                                           ; SOURCE LINE # 566
0013 120000      E     LCALL   _WaitVBlank
0016         ?C0036:
                                           ; SOURCE LINE # 568
0016 7F02              MOV     R7,#02H
0018 120000      E     LCALL   _McuSpiClkToPclk
                                           ; SOURCE LINE # 571
001B E500        E     MOV     A,regTW88+01H
001D 240C              ADD     A,#0CH
001F 120000      R     LCALL   L?0260
0022 E0                MOVX    A,@DPTR
0023 54C0              ANL     A,#0C0H
;---- Variable 'r30c' assigned to Register 'R5' ----
0025 FD                MOV     R5,A
                                           ; SOURCE LINE # 572
0026 900000      R     MOV     DPTR,#start
0029 E0                MOVX    A,@DPTR
;---- Variable 'i' assigned to Register 'R4' ----
002A FC                MOV     R4,A
002B         ?C0037:
002B 900000      R     MOV     DPTR,#size
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#start
0033 E0                MOVX    A,@DPTR
0034 2F                ADD     A,R7
0035 FF                MOV     R7,A
0036 E4                CLR     A
0037 33                RLC     A
0038 FE                MOV     R6,A
0039 EC                MOV     A,R4
003A C3                CLR     C
003B 9F                SUBB    A,R7
003C EE                MOV     A,R6
003D 6480              XRL     A,#080H
003F F8                MOV     R0,A
0040 7480              MOV     A,#080H
0042 98                SUBB    A,R0
0043 502C              JNC     ?C0038
                                           ; SOURCE LINE # 573
0045 ED                MOV     A,R5
0046 4C                ORL     A,R4
0047 FF                MOV     R7,A
0048 E500        E     MOV     A,regTW88+01H
004A 240C              ADD     A,#0CH
004C 120000      R     LCALL   L?0260
004F EF                MOV     A,R7
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 574
0051 900000      R     MOV     DPTR,#color
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 E500        E     MOV     A,regTW88+01H
0058 240D              ADD     A,#0DH
005A 120000      R     LCALL   L?0260
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 56  

                                           ; SOURCE LINE # 575
005F 900000      R     MOV     DPTR,#color
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 E500        E     MOV     A,regTW88+01H
0067 240E              ADD     A,#0EH
0069 120000      R     LCALL   L?0260
006C EF                MOV     A,R7
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 576
006E 0C                INC     R4
006F 80BA              SJMP    ?C0037
0071         ?C0038:
                                           ; SOURCE LINE # 578
0071 020000      E     LJMP    McuSpiClkRestore
             ; FUNCTION _FOsdSetPaletteColor (END)

             ; FUNCTION _FOsdSetPaletteColorArray (BEGIN)
                                           ; SOURCE LINE # 585
0000 900000      R     MOV     DPTR,#index
0003 120000      R     LCALL   L?0289
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 594
0006 900000      R     MOV     DPTR,#vdelay
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B 6003              JZ      ?C0041
                                           ; SOURCE LINE # 595
000D 120000      E     LCALL   _WaitVBlank
0010         ?C0041:
                                           ; SOURCE LINE # 600
0010 7F02              MOV     R7,#02H
0012 120000      E     LCALL   _McuSpiClkToPclk
                                           ; SOURCE LINE # 604
0015 E500        E     MOV     A,regTW88+01H
0017 240C              ADD     A,#0CH
0019 120000      R     LCALL   L?0260
001C E0                MOVX    A,@DPTR
001D 54C0              ANL     A,#0C0H
001F 900000      R     MOV     DPTR,#r30c
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 605
0023 E4                CLR     A
0024 900000      R     MOV     DPTR,#i
0027 F0                MOVX    @DPTR,A
0028         ?C0042:
0028 900000      R     MOV     DPTR,#size
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D 900000      R     MOV     DPTR,#i
0030 E0                MOVX    A,@DPTR
0031 FE                MOV     R6,A
0032 C3                CLR     C
0033 9F                SUBB    A,R7
0034 503F              JNC     ?C0043
                                           ; SOURCE LINE # 606
0036 900000      R     MOV     DPTR,#index
0039 E0                MOVX    A,@DPTR
003A 2E                ADD     A,R6
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#r30c
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 57  

003F E0                MOVX    A,@DPTR
0040 4F                ORL     A,R7
0041 FF                MOV     R7,A
0042 E500        E     MOV     A,regTW88+01H
0044 240C              ADD     A,#0CH
0046 120000      R     LCALL   L?0260
0049 EF                MOV     A,R7
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 607
004B 900000      R     MOV     DPTR,#array
004E 120000      R     LCALL   L?0263
0051 120000      R     LCALL   L?0354
0054 E5F0              MOV     A,B
0056 FF                MOV     R7,A
0057 E500        E     MOV     A,regTW88+01H
0059 240D              ADD     A,#0DH
005B 120000      R     LCALL   L?0260
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 608
0060 120000      R     LCALL   L?0354
0063 FF                MOV     R7,A
0064 E500        E     MOV     A,regTW88+01H
0066 240E              ADD     A,#0EH
0068 120000      R     LCALL   L?0260
006B EF                MOV     A,R7
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 609
006D 900000      R     MOV     DPTR,#i
0070 E0                MOVX    A,@DPTR
0071 04                INC     A
0072 F0                MOVX    @DPTR,A
0073 80B3              SJMP    ?C0042
0075         ?C0043:
                                           ; SOURCE LINE # 613
0075 020000      E     LJMP    McuSpiClkRestore
             ; FUNCTION _FOsdSetPaletteColorArray (END)

             ; FUNCTION _FOsdRamSetAddrAttr (BEGIN)
                                           ; SOURCE LINE # 629
;---- Variable 'OsdRamAddr' assigned to Register 'R2/R3' ----
0000 AB07              MOV     R3,AR7
0002 AA06              MOV     R2,AR6
;---- Variable 'attr' assigned to Register 'R1' ----
0004 A905              MOV     R1,AR5
                                           ; SOURCE LINE # 630
                                           ; SOURCE LINE # 631
0006 E4                CLR     A
0007 FF                MOV     R7,A
0008 120000      R     LCALL   _FOsdRamSetWriteMode
                                           ; SOURCE LINE # 632
000B AF03              MOV     R7,AR3
000D AE02              MOV     R6,AR2
000F 120000      R     LCALL   _FOsdRamSetAddress
                                           ; SOURCE LINE # 633
0012 AF01              MOV     R7,AR1
0014 120000      R     LCALL   _FOsdRamSetAttr
                                           ; SOURCE LINE # 635
0017 7F03              MOV     R7,#03H
0019 120000      R     LCALL   _FOsdRamSetWriteMode
                                           ; SOURCE LINE # 636
001C AE02              MOV     R6,AR2
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 58  

001E AF03              MOV     R7,AR3
0020 020000      R     LJMP    _FOsdRamSetAddress
             ; FUNCTION _FOsdRamSetAddrAttr (END)

             ; FUNCTION _FOsdRamWriteByteStr (BEGIN)
                                           ; SOURCE LINE # 646
0000 900000      R     MOV     DPTR,#str
0003 120000      R     LCALL   L?0290
0006 A3                INC     DPTR
0007 ED                MOV     A,R5
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 647
                                           ; SOURCE LINE # 652
0009 120000      R     LCALL   L?0259
000C E0                MOVX    A,@DPTR
000D 54DF              ANL     A,#0DFH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 654
0010 900000      R     MOV     DPTR,#w_count
0013 7401              MOV     A,#01H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 655
0016 E4                CLR     A
0017 900000      R     MOV     DPTR,#i
001A F0                MOVX    @DPTR,A
001B         ?C0047:
001B 900000      R     MOV     DPTR,#len
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 C3                CLR     C
0023 9F                SUBB    A,R7
0024 5038              JNC     ?C0051
                                           ; SOURCE LINE # 656
0026 900000      R     MOV     DPTR,#str
0029 E0                MOVX    A,@DPTR
002A FB                MOV     R3,A
002B A3                INC     DPTR
002C E4                CLR     A
002D 75F001            MOV     B,#01H
0030 120000      E     LCALL   ?C?ILDIX
0033 A9F0              MOV     R1,B
0035 FA                MOV     R2,A
0036 120000      E     LCALL   ?C?CLDPTR
0039 FF                MOV     R7,A
003A E500        E     MOV     A,regTW88+01H
003C 2407              ADD     A,#07H
003E 120000      R     LCALL   L?0260
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 657
0043 900000      R     MOV     DPTR,#w_count
0046 E0                MOVX    A,@DPTR
0047 04                INC     A
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 658
0049 E0                MOVX    A,@DPTR
004A B40609            CJNE    A,#06H,?C0049
                                           ; SOURCE LINE # 659
004D 7F01              MOV     R7,#01H
004F 7E00              MOV     R6,#00H
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 59  

0051 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 660
0054 E4                CLR     A
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 661
                                           ; SOURCE LINE # 662
0056         ?C0049:
0056 900000      R     MOV     DPTR,#i
0059 E0                MOVX    A,@DPTR
005A 04                INC     A
005B F0                MOVX    @DPTR,A
005C 80BD              SJMP    ?C0047
                                           ; SOURCE LINE # 663
005E         ?C0051:
005E 22                RET     
             ; FUNCTION _FOsdRamWriteByteStr (END)

             ; FUNCTION _FOsdWinEnable (BEGIN)
                                           ; SOURCE LINE # 697
;---- Variable 'en' assigned to Register 'R1' ----
0000 A905              MOV     R1,AR5
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 706
0002 EF                MOV     A,R7
0003 120000      R     LCALL   L?0283
0006 120000      R     LCALL   L?0341
;---- Variable 'index' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 709
0009 2500        E     ADD     A,regTW88+01H
000B 120000      R     LCALL   L?0278
000E E0                MOVX    A,@DPTR
000F FD                MOV     R5,A
;---- Variable 'dat' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 710
0010 E9                MOV     A,R1
0011 6006              JZ      ?C0052
0013 ED                MOV     A,R5
0014 4480              ORL     A,#080H
0016 FD                MOV     R5,A
0017 8004              SJMP    ?C0053
0019         ?C0052:
                                           ; SOURCE LINE # 711
0019 ED                MOV     A,R5
001A 547F              ANL     A,#07FH
001C FD                MOV     R5,A
001D         ?C0053:
                                           ; SOURCE LINE # 712
001D 120000      R     LCALL   L?0277
0020 ED                MOV     A,R5
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 713
0022 22                RET     
             ; FUNCTION _FOsdWinEnable (END)

             ; FUNCTION _FOsdWinToggleEnable (BEGIN)
                                           ; SOURCE LINE # 720
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 729
0000 EF                MOV     A,R7
0001 120000      R     LCALL   L?0283
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 60  

0004 120000      R     LCALL   L?0372
0007 900000      R     MOV     DPTR,#index
000A CF                XCH     A,R7
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 732
000F 900000      R     MOV     DPTR,#index
0012 E0                MOVX    A,@DPTR
0013 FE                MOV     R6,A
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 2500        E     ADD     A,regTW88+01H
0018 120000      R     LCALL   L?0278
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
;---- Variable 'dat' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 733
001D 30E704            JNB     ACC.7,?C0055
0020 547F              ANL     A,#07FH
0022 8003              SJMP    ?C0232
0024         ?C0055:
                                           ; SOURCE LINE # 734
0024 EF                MOV     A,R7
0025 4480              ORL     A,#080H
0027         ?C0232:
0027 900000      R     MOV     DPTR,#index
002A 120000      R     LCALL   L?0359
002D 120000      R     LCALL   L?0268
0030 EF                MOV     A,R7
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 735
0032         ?C0057:
0032 22                RET     
             ; FUNCTION _FOsdWinToggleEnable (END)

             ; FUNCTION FOsdWinOffAll (BEGIN)
                                           ; SOURCE LINE # 740
                                           ; SOURCE LINE # 741
                                           ; SOURCE LINE # 743
;---- Variable 'i' assigned to Register 'R4' ----
0000 E4                CLR     A
0001 FC                MOV     R4,A
0002         ?C0058:
                                           ; SOURCE LINE # 744
0002 AF04              MOV     R7,AR4
0004 E4                CLR     A
0005 FD                MOV     R5,A
0006 120000      R     LCALL   _FOsdWinEnable
0009 0C                INC     R4
000A EC                MOV     A,R4
000B B404F4            CJNE    A,#04H,?C0058
                                           ; SOURCE LINE # 745
000E         ?C0061:
000E 22                RET     
             ; FUNCTION FOsdWinOffAll (END)

             ; FUNCTION _FOsdWinMulticolor (BEGIN)
                                           ; SOURCE LINE # 754
;---- Variable 'en' assigned to Register 'R1' ----
0000 A905              MOV     R1,AR5
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 61  

;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 755
                                           ; SOURCE LINE # 763
0002 EF                MOV     A,R7
0003 120000      R     LCALL   L?0283
0006 120000      R     LCALL   L?0341
;---- Variable 'index' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 766
0009 2500        E     ADD     A,regTW88+01H
000B 120000      R     LCALL   L?0278
000E E0                MOVX    A,@DPTR
000F FD                MOV     R5,A
;---- Variable 'dat' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 767
0010 E9                MOV     A,R1
0011 6006              JZ      ?C0062
0013 ED                MOV     A,R5
0014 4440              ORL     A,#040H
0016 FD                MOV     R5,A
0017 8004              SJMP    ?C0063
0019         ?C0062:
                                           ; SOURCE LINE # 768
0019 ED                MOV     A,R5
001A 54BF              ANL     A,#0BFH
001C FD                MOV     R5,A
001D         ?C0063:
                                           ; SOURCE LINE # 769
001D 120000      R     LCALL   L?0277
0020 ED                MOV     A,R5
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 770
0022 22                RET     
             ; FUNCTION _FOsdWinMulticolor (END)

             ; FUNCTION _FOsdWinZoom (BEGIN)
                                           ; SOURCE LINE # 784
;---- Variable 'winno' assigned to Register 'R7' ----
;---- Variable 'zoomV' assigned to Register 'R3' ----
;---- Variable 'zoomH' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 785
                                           ; SOURCE LINE # 793
0000 EF                MOV     A,R7
0001 120000      R     LCALL   L?0283
0004 120000      R     LCALL   L?0372
0007 900000      R     MOV     DPTR,#index
000A CF                XCH     A,R7
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 797
000F AF05              MOV     R7,AR5
0011 EF                MOV     A,R7
0012 25E0              ADD     A,ACC
0014 25E0              ADD     A,ACC
0016 2B                ADD     A,R3
;---- Variable 'temp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 798
0017 900000      R     MOV     DPTR,#index
001A 120000      R     LCALL   L?0359
001D 120000      R     LCALL   L?0268
0020 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 62  

0021 54F0              ANL     A,#0F0H
0023 2F                ADD     A,R7
0024 FF                MOV     R7,A
                                           ; SOURCE LINE # 799
0025 900000      R     MOV     DPTR,#index
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A 2500        E     ADD     A,regTW88+01H
002C 120000      R     LCALL   L?0268
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 800
0031 22                RET     
             ; FUNCTION _FOsdWinZoom (END)

             ; FUNCTION _FOsdWinAlphaPixel (BEGIN)
                                           ; SOURCE LINE # 812
;---- Variable 'winno' assigned to Register 'R7' ----
;---- Variable 'alpha' assigned to Register 'R3' ----
;---- Variable 'lut' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 813
                                           ; SOURCE LINE # 817
0000 EF                MOV     A,R7
0001 120000      R     LCALL   L?0283
0004 120000      R     LCALL   L?0382
0007 900000      R     MOV     DPTR,#index
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C CE                XCH     A,R6
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 821
000E E500        E     MOV     A,regTW88+01H
0010 2452              ADD     A,#052H
0012 120000      R     LCALL   L?0260
0015 ED                MOV     A,R5
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 822
0017 900000      R     MOV     DPTR,#index
001A 120000      R     LCALL   L?0360
001D 120000      R     LCALL   L?0268
0020 EB                MOV     A,R3
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 823
0022 22                RET     
             ; FUNCTION _FOsdWinAlphaPixel (END)

             ; FUNCTION _FOsdWinSetBpp3Alpha (BEGIN)
                                           ; SOURCE LINE # 855
0000 900000      R     MOV     DPTR,#base_lut
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 856
                                           ; SOURCE LINE # 860
0005 EF                MOV     A,R7
0006 120000      R     LCALL   L?0283
0009 120000      R     LCALL   L?0382
000C 900000      R     MOV     DPTR,#index
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 CE                XCH     A,R6
0012 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 63  

                                           ; SOURCE LINE # 865
;---- Variable 'i' assigned to Register 'R1' ----
0013 E4                CLR     A
0014 F9                MOV     R1,A
0015         ?C0067:
                                           ; SOURCE LINE # 866
0015 7400        R     MOV     A,#LOW BPP3_alpha_lut_offset
0017 29                ADD     A,R1
0018 120000      R     LCALL   L?0315
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D 900000      R     MOV     DPTR,#base_lut
0020 E0                MOVX    A,@DPTR
0021 2F                ADD     A,R7
0022 FF                MOV     R7,A
0023 E500        E     MOV     A,regTW88+01H
0025 2452              ADD     A,#052H
0027 120000      R     LCALL   L?0260
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 867
002C E9                MOV     A,R1
002D 900000      R     MOV     DPTR,#BPP3_alpha_value
0030 93                MOVC    A,@A+DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#index
0035 120000      R     LCALL   L?0360
0038 120000      R     LCALL   L?0268
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 868
003D 09                INC     R1
003E E9                MOV     A,R1
003F B408D3            CJNE    A,#08H,?C0067
                                           ; SOURCE LINE # 869
0042         ?C0070:
0042 22                RET     
             ; FUNCTION _FOsdWinSetBpp3Alpha (END)

             ; FUNCTION _FOsdWinScreenXY (BEGIN)
                                           ; SOURCE LINE # 876
0000 900000      R     MOV     DPTR,#x
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EA                MOV     A,R2
;---- Variable 'winno' assigned to Register 'R1' ----
                                           ; SOURCE LINE # 877
                                           ; SOURCE LINE # 885
000A 120000      R     LCALL   L?0280
000D 120000      R     LCALL   L?0342
0010 900000      R     MOV     DPTR,#index
0013 120000      R     LCALL   L?0365
                                           ; SOURCE LINE # 889
0016 900000      R     MOV     DPTR,#x
0019 E0                MOVX    A,@DPTR
;---- Variable 'temp' assigned to Register 'R3' ----
                                           ; SOURCE LINE # 890
001A C4                SWAP    A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 64  

001B 54F0              ANL     A,#0F0H
001D FB                MOV     R3,A
                                           ; SOURCE LINE # 891
001E 900000      R     MOV     DPTR,#y
0021 E0                MOVX    A,@DPTR
0022 2B                ADD     A,R3
                                           ; SOURCE LINE # 892
0023 FF                MOV     R7,A
0024 ED                MOV     A,R5
0025 2402              ADD     A,#02H
0027 FD                MOV     R5,A
0028 E4                CLR     A
0029 3C                ADDC    A,R4
002A 120000      R     LCALL   L?0267
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 893
002F 900000      R     MOV     DPTR,#x
0032 A3                INC     DPTR
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#index+01H
0038 E0                MOVX    A,@DPTR
0039 2403              ADD     A,#03H
003B FD                MOV     R5,A
003C 900000      R     MOV     DPTR,#index
003F E0                MOVX    A,@DPTR
0040 3400              ADDC    A,#00H
0042 120000      R     LCALL   L?0267
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 894
0047 900000      R     MOV     DPTR,#y
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D 900000      R     MOV     DPTR,#index+01H
0050 E0                MOVX    A,@DPTR
0051 2404              ADD     A,#04H
0053 FD                MOV     R5,A
0054 900000      R     MOV     DPTR,#index
0057 E0                MOVX    A,@DPTR
0058 3400              ADDC    A,#00H
005A 120000      R     LCALL   L?0267
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 896
005F 900000      R     MOV     DPTR,#x
0062 120000      R     LCALL   L?0334
0065 2400        R     ADD     A,#LOW FontOsdInfo+021H
0067 F582              MOV     DPL,A
0069 E4                CLR     A
006A 3400        R     ADDC    A,#HIGH FontOsdInfo+021H
006C 120000      R     LCALL   L?0378
                                           ; SOURCE LINE # 897
006F 900000      R     MOV     DPTR,#y
0072 120000      R     LCALL   L?0334
0075 2400        R     ADD     A,#LOW FontOsdInfo+023H
0077 F582              MOV     DPL,A
0079 E4                CLR     A
007A 3400        R     ADDC    A,#HIGH FontOsdInfo+023H
007C 120000      R     LCALL   L?0378
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 65  

                                           ; SOURCE LINE # 898
007F 22                RET     
             ; FUNCTION _FOsdWinScreenXY (END)

             ; FUNCTION _FOsdWinScreenWH (BEGIN)
                                           ; SOURCE LINE # 906
0000 900000      R     MOV     DPTR,#w
0003 ED                MOV     A,R5
;---- Variable 'winno' assigned to Register 'R1' ----
                                           ; SOURCE LINE # 907
                                           ; SOURCE LINE # 914
0004 120000      R     LCALL   L?0280
0007 120000      R     LCALL   L?0342
000A 900000      R     MOV     DPTR,#index
000D EE                MOV     A,R6
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 917
0012 900000      R     MOV     DPTR,#h
0015 E0                MOVX    A,@DPTR
0016 FD                MOV     R5,A
0017 EF                MOV     A,R7
0018 2405              ADD     A,#05H
001A 120000      R     LCALL   L?0275
001D ED                MOV     A,R5
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 918
001F 900000      R     MOV     DPTR,#w
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 900000      R     MOV     DPTR,#index+01H
0027 E0                MOVX    A,@DPTR
0028 2406              ADD     A,#06H
002A FD                MOV     R5,A
002B 900000      R     MOV     DPTR,#index
002E E0                MOVX    A,@DPTR
002F 3400              ADDC    A,#00H
0031 120000      R     LCALL   L?0267
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 920
0036 E9                MOV     A,R1
0037 75F00B            MOV     B,#0BH
003A A4                MUL     AB
003B 2400        R     ADD     A,#LOW FontOsdInfo+025H
003D F582              MOV     DPL,A
003F E4                CLR     A
0040 3400        R     ADDC    A,#HIGH FontOsdInfo+025H
0042 F583              MOV     DPH,A
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 921
0046 900000      R     MOV     DPTR,#h
0049 120000      R     LCALL   L?0336
004C 2400        R     ADD     A,#LOW FontOsdInfo+026H
004E F582              MOV     DPL,A
0050 E4                CLR     A
0051 3400        R     ADDC    A,#HIGH FontOsdInfo+026H
0053 F583              MOV     DPH,A
0055 EF                MOV     A,R7
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 66  

0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 922
0057 22                RET     
             ; FUNCTION _FOsdWinScreenWH (END)

             ; FUNCTION _FOsdWinSetOsdRamStartAddr (BEGIN)
                                           ; SOURCE LINE # 1073
;---- Variable 'winno' assigned to Register 'R1' ----
0000 A907              MOV     R1,AR7
0002 900000      R     MOV     DPTR,#addr
0005 EC                MOV     A,R4
0006 F0                MOVX    @DPTR,A
0007 A3                INC     DPTR
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1074
                                           ; SOURCE LINE # 1082
000A 120000      R     LCALL   L?0282
000D 120000      R     LCALL   L?0342
;---- Variable 'index' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1084
0010 C3                CLR     C
0011 EC                MOV     A,R4
0012 9401              SUBB    A,#01H
0014 EF                MOV     A,R7
0015 4009              JC      ?C0073
0017 120000      R     LCALL   L?0265
001A E0                MOVX    A,@DPTR
001B 4410              ORL     A,#010H
001D F0                MOVX    @DPTR,A
001E 8007              SJMP    ?C0074
0020         ?C0073:
                                           ; SOURCE LINE # 1085
0020 120000      R     LCALL   L?0265
0023 E0                MOVX    A,@DPTR
0024 54EF              ANL     A,#0EFH
0026 F0                MOVX    @DPTR,A
0027         ?C0074:
                                           ; SOURCE LINE # 1086
0027 900000      R     MOV     DPTR,#addr
002A A3                INC     DPTR
002B E0                MOVX    A,@DPTR
002C FD                MOV     R5,A
002D 120000      R     LCALL   L?0274
0030 ED                MOV     A,R5
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1088
0032 900000      R     MOV     DPTR,#addr
0035 120000      R     LCALL   L?0335
0038 2400        R     ADD     A,#LOW FontOsdInfo+01FH
003A F582              MOV     DPL,A
003C E4                CLR     A
003D 3400        R     ADDC    A,#HIGH FontOsdInfo+01FH
003F 120000      R     LCALL   L?0379
                                           ; SOURCE LINE # 1089
0042 22                RET     
             ; FUNCTION _FOsdWinSetOsdRamStartAddr (END)

             ; FUNCTION FontOsdInit (BEGIN)
                                           ; SOURCE LINE # 1108
                                           ; SOURCE LINE # 1109
                                           ; SOURCE LINE # 1111
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 67  

0000 900000      R     MOV     DPTR,#columns
0003 7428              MOV     A,#028H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1112
0006 A3                INC     DPTR
0007 7401              MOV     A,#01H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1114
000A E4                CLR     A
000B FD                MOV     R5,A
000C FF                MOV     R7,A
000D 120000      R     LCALL   _FOsdOnOff
                                           ; SOURCE LINE # 1117
0010 E4                CLR     A
0011 FD                MOV     R5,A
0012 FC                MOV     R4,A
0013 7F03              MOV     R7,#03H
0015 120000      R     LCALL   _InitFontRamByNum
                                           ; SOURCE LINE # 1120
0018 E4                CLR     A
0019 900000      R     MOV     DPTR,#winno
001C F0                MOVX    @DPTR,A
001D         ?C0076:
001D 900000      R     MOV     DPTR,#winno
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 C3                CLR     C
0023 9404              SUBB    A,#04H
0025 5065              JNC     ?C0077
                                           ; SOURCE LINE # 1121
0027 120000      R     LCALL   _FOsdWinInit
                                           ; SOURCE LINE # 1123
002A 900000      R     MOV     DPTR,#winno
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 75F00B            MOV     B,#0BH
0032 A4                MUL     AB
0033 2400        R     ADD     A,#LOW FontOsdInfo+029H
0035 F582              MOV     DPL,A
0037 E4                CLR     A
0038 3400        R     ADDC    A,#HIGH FontOsdInfo+029H
003A F583              MOV     DPH,A
003C 741A              MOV     A,#01AH
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1124
003F 7B0F              MOV     R3,#0FH
0041 7D01              MOV     R5,#01H
0043 120000      R     LCALL   _FOsdWinAlphaPixel
                                           ; SOURCE LINE # 1126
0046 900000      R     MOV     DPTR,#winno
0049 E0                MOVX    A,@DPTR
004A F9                MOV     R1,A
004B 75F01E            MOV     B,#01EH
004E A4                MUL     AB
004F FB                MOV     R3,A
0050 AAF0              MOV     R2,B
0052 AF01              MOV     R7,AR1
0054 E4                CLR     A
0055 1D                DEC     R5
0056 FC                MOV     R4,A
0057 120000      R     LCALL   _FOsdWinScreenXY
                                           ; SOURCE LINE # 1127
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 68  

005A 900000      R     MOV     DPTR,#winno
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 FD                MOV     R5,A
0062 7B01              MOV     R3,#01H
0064 120000      R     LCALL   _FOsdWinScreenWH
                                           ; SOURCE LINE # 1128
0067 900000      R     MOV     DPTR,#winno
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
006C E4                CLR     A
006D 1B                DEC     R3
006E FD                MOV     R5,A
006F 120000      R     LCALL   _FOsdWinZoom
                                           ; SOURCE LINE # 1129
0072 900000      R     MOV     DPTR,#winno
0075 E0                MOVX    A,@DPTR
0076 FB                MOV     R3,A
0077 A3                INC     DPTR
0078 E0                MOVX    A,@DPTR
0079 8BF0              MOV     B,R3
007B A4                MUL     AB
007C FD                MOV     R5,A
007D ACF0              MOV     R4,B
007F AF03              MOV     R7,AR3
0081 120000      R     LCALL   _FOsdWinSetOsdRamStartAddr
                                           ; SOURCE LINE # 1130
0084 900000      R     MOV     DPTR,#winno
0087 E0                MOVX    A,@DPTR
0088 04                INC     A
0089 F0                MOVX    @DPTR,A
008A 8091              SJMP    ?C0076
008C         ?C0077:
                                           ; SOURCE LINE # 1133
008C 7D0F              MOV     R5,#0FH
008E 7F20              MOV     R7,#020H
0090 7E00              MOV     R6,#00H
0092 020000      R     LJMP    _FOsdRamClearAll
             ; FUNCTION FontOsdInit (END)

             ; FUNCTION _FOsdInitBpp3AlphaTable (BEGIN)
                                           ; SOURCE LINE # 1161
;---- Variable 'i' assigned to Register 'R5' ----
;---- Variable 'fCalculate' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1162
                                           ; SOURCE LINE # 1168
0000 EF                MOV     A,R7
0001 7015              JNZ     ?C0080
                                           ; SOURCE LINE # 1170
0003 FD                MOV     R5,A
0004         ?C0081:
                                           ; SOURCE LINE # 1171
0004 ED                MOV     A,R5
0005 900000      R     MOV     DPTR,#FOsdDefPaletteBpp3Alpha
0008 93                MOVC    A,@A+DPTR
0009 FF                MOV     R7,A
000A 7400        R     MOV     A,#LOW BPP3_alpha_lut_offset
000C 2D                ADD     A,R5
000D 120000      R     LCALL   L?0315
0010 EF                MOV     A,R7
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 69  

0011 F0                MOVX    @DPTR,A
0012 0D                INC     R5
0013 ED                MOV     A,R5
0014 B408ED            CJNE    A,#08H,?C0081
0017 22                RET     
                                           ; SOURCE LINE # 1172
0018         ?C0080:
                                           ; SOURCE LINE # 1173
                                           ; SOURCE LINE # 1175
0018 E4                CLR     A
0019 FD                MOV     R5,A
001A         ?C0085:
                                           ; SOURCE LINE # 1176
001A ED                MOV     A,R5
001B 25E0              ADD     A,ACC
001D 2400        R     ADD     A,#LOW FOsdDefPaletteBpp3
001F F582              MOV     DPL,A
0021 E4                CLR     A
0022 3400        R     ADDC    A,#HIGH FOsdDefPaletteBpp3
0024 F583              MOV     DPH,A
0026 120000      R     LCALL   L?0373
0029 900000      R     MOV     DPTR,#value
002C CF                XCH     A,R7
002D F0                MOVX    @DPTR,A
002E A3                INC     DPTR
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1183
0031 900000      R     MOV     DPTR,#value
0034 E0                MOVX    A,@DPTR
0035 FA                MOV     R2,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 FB                MOV     R3,A
0039 EA                MOV     A,R2
003A 13                RRC     A
003B 13                RRC     A
003C 13                RRC     A
003D 541F              ANL     A,#01FH
;---- Variable 'j' assigned to Register 'R4' ----
003F FC                MOV     R4,A
                                           ; SOURCE LINE # 1184
0040 FF                MOV     R7,A
0041 900000      R     MOV     DPTR,#Y
0044 E4                CLR     A
0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1185
0049 EA                MOV     A,R2
004A 5407              ANL     A,#07H
004C FE                MOV     R6,A
004D EB                MOV     A,R3
004E 54E0              ANL     A,#0E0H
0050 7805              MOV     R0,#05H
0052         ?C0213:
0052 CE                XCH     A,R6
0053 C3                CLR     C
0054 13                RRC     A
0055 CE                XCH     A,R6
0056 13                RRC     A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 70  

0057 D8F9              DJNZ    R0,?C0213
                                           ; SOURCE LINE # 1186
0059 120000      R     LCALL   L?0343
                                           ; SOURCE LINE # 1187
005C 900000      R     MOV     DPTR,#value
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 541F              ANL     A,#01FH
                                           ; SOURCE LINE # 1188
0063 120000      R     LCALL   L?0343
                                           ; SOURCE LINE # 1192
0066 ED                MOV     A,R5
0067 7003              JNZ     $ + 5H
0069 020000      R     LJMP    ?C0088
                                           ; SOURCE LINE # 1193
006C 2400        R     ADD     A,#LOW BPP3_alpha_lut_offset
006E 120000      R     LCALL   L?0315
0071 ED                MOV     A,R5
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1194
0073 900000      R     MOV     DPTR,#Y
0076 E0                MOVX    A,@DPTR
0077 FE                MOV     R6,A
0078 A3                INC     DPTR
0079 120000      R     LCALL   L?0303
007C EE                MOV     A,R6
007D F0                MOVX    @DPTR,A
007E A3                INC     DPTR
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1196
0081 E4                CLR     A
0082 FC                MOV     R4,A
0083         ?C0089:
0083 EC                MOV     A,R4
0084 C3                CLR     C
0085 9D                SUBB    A,R5
0086 5077              JNC     ?C0087
                                           ; SOURCE LINE # 1197
0088 EC                MOV     A,R4
0089 120000      R     LCALL   L?0305
008C E0                MOVX    A,@DPTR
008D FE                MOV     R6,A
008E A3                INC     DPTR
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
0091 C3                CLR     C
0092 900000      R     MOV     DPTR,#Y+01H
0095 E0                MOVX    A,@DPTR
0096 9F                SUBB    A,R7
0097 900000      R     MOV     DPTR,#Y
009A E0                MOVX    A,@DPTR
009B 9E                SUBB    A,R6
009C 5049              JNC     ?C0091
                                           ; SOURCE LINE # 1198
009E 7400        R     MOV     A,#LOW BPP3_alpha_lut_offset
00A0 2D                ADD     A,R5
00A1 120000      R     LCALL   L?0315
;---- Variable 'k' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1199
00A4 120000      R     LCALL   L?0303
00A7 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 71  

00A8 FB                MOV     R3,A
00A9 A3                INC     DPTR
00AA E0                MOVX    A,@DPTR
00AB 900000      R     MOV     DPTR,#value
00AE CB                XCH     A,R3
                                           ; SOURCE LINE # 1201
00AF 120000      R     LCALL   L?0314
00B2 E0                MOVX    A,@DPTR
00B3 FE                MOV     R6,A
00B4 7400        R     MOV     A,#LOW BPP3_alpha_lut_offset
00B6 2D                ADD     A,R5
00B7 120000      R     LCALL   L?0315
00BA EE                MOV     A,R6
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1202
00BC EC                MOV     A,R4
00BD 120000      R     LCALL   L?0305
00C0 E0                MOVX    A,@DPTR
00C1 FA                MOV     R2,A
00C2 A3                INC     DPTR
00C3 E0                MOVX    A,@DPTR
00C4 FB                MOV     R3,A
00C5 120000      R     LCALL   L?0304
00C8 EA                MOV     A,R2
                                           ; SOURCE LINE # 1204
00C9 120000      R     LCALL   L?0314
00CC EF                MOV     A,R7
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1205
00CE 900000      R     MOV     DPTR,#value
00D1 E0                MOVX    A,@DPTR
00D2 FE                MOV     R6,A
00D3 A3                INC     DPTR
00D4 E0                MOVX    A,@DPTR
00D5 FF                MOV     R7,A
00D6 EC                MOV     A,R4
00D7 120000      R     LCALL   L?0305
00DA EE                MOV     A,R6
00DB F0                MOVX    @DPTR,A
00DC A3                INC     DPTR
00DD EF                MOV     A,R7
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1206
00DF 900000      R     MOV     DPTR,#Y
00E2 EE                MOV     A,R6
00E3 F0                MOVX    @DPTR,A
00E4 A3                INC     DPTR
00E5 EF                MOV     A,R7
00E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1207
                                           ; SOURCE LINE # 1208
00E7         ?C0091:
00E7 0C                INC     R4
00E8 020000      R     LJMP    ?C0089
                                           ; SOURCE LINE # 1214
00EB         ?C0088:
                                           ; SOURCE LINE # 1215
                                           ; SOURCE LINE # 1216
00EB E4                CLR     A
00EC 900000      R     MOV     DPTR,#BPP3_alpha_lut_offset
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1217
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 72  

00F0 900000      R     MOV     DPTR,#Y
00F3 E0                MOVX    A,@DPTR
00F4 FF                MOV     R7,A
00F5 A3                INC     DPTR
00F6 E0                MOVX    A,@DPTR
00F7 900000      R     MOV     DPTR,#alpha_table_Y
00FA CF                XCH     A,R7
00FB F0                MOVX    @DPTR,A
00FC A3                INC     DPTR
00FD EF                MOV     A,R7
00FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1218
                                           ; SOURCE LINE # 1219
00FF         ?C0087:
00FF 0D                INC     R5
0100 ED                MOV     A,R5
0101 6408              XRL     A,#08H
0103 6003              JZ      $ + 5H
0105 020000      R     LJMP    ?C0085
                                           ; SOURCE LINE # 1225
                                           ; SOURCE LINE # 1226
0108         ?C0094:
0108 22                RET     
             ; FUNCTION _FOsdInitBpp3AlphaTable (END)

             ; FUNCTION _FOsdWinInit (BEGIN)
                                           ; SOURCE LINE # 1244
;---- Variable 'winno' assigned to Register 'R1' ----
                                           ; SOURCE LINE # 1245
                                           ; SOURCE LINE # 1254
0000 120000      R     LCALL   L?0281
0003 120000      R     LCALL   L?0373
0006 900000      R     MOV     DPTR,#index
0009 CF                XCH     A,R7
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EF                MOV     A,R7
                                           ; SOURCE LINE # 1256
000D 120000      R     LCALL   L?0328
0010 2500        E     ADD     A,regTW88+01H
0012 120000      R     LCALL   L?0278
0015 E0                MOVX    A,@DPTR
0016 547F              ANL     A,#07FH
0018 4440              ORL     A,#040H
001A FF                MOV     R7,A
001B 900000      R     MOV     DPTR,#index
001E E0                MOVX    A,@DPTR
001F FC                MOV     R4,A
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 FD                MOV     R5,A
0023 2500        E     ADD     A,regTW88+01H
0025 120000      R     LCALL   L?0268
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1258
002A ED                MOV     A,R5
002B 2407              ADD     A,#07H
002D FF                MOV     R7,A
002E E4                CLR     A
002F 3C                ADDC    A,R4
0030 120000      R     LCALL   L?0276
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 73  

                                           ; SOURCE LINE # 1259
0033 120000      R     LCALL   L?0326
0036 FF                MOV     R7,A
0037 2408              ADD     A,#08H
0039 120000      R     LCALL   L?0266
003C E4                CLR     A
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1260
003E EF                MOV     A,R7
003F 2409              ADD     A,#09H
0041 120000      R     LCALL   L?0275
                                           ; SOURCE LINE # 1261
0044 120000      R     LCALL   L?0326
0047 FF                MOV     R7,A
0048 240A              ADD     A,#0AH
004A 120000      R     LCALL   L?0266
004D E4                CLR     A
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1262
004F EF                MOV     A,R7
0050 240B              ADD     A,#0BH
0052 120000      R     LCALL   L?0275
                                           ; SOURCE LINE # 1263
0055 120000      R     LCALL   L?0327
0058 FF                MOV     R7,A
0059 240C              ADD     A,#0CH
005B 120000      R     LCALL   L?0266
005E E4                CLR     A
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1264
0060 EF                MOV     A,R7
0061 240D              ADD     A,#0DH
0063 120000      R     LCALL   L?0275
                                           ; SOURCE LINE # 1265
0066 120000      R     LCALL   L?0327
0069 FF                MOV     R7,A
006A 240E              ADD     A,#0EH
006C 120000      R     LCALL   L?0266
006F E4                CLR     A
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1266
0071 120000      R     LCALL   L?0274
0074 E4                CLR     A
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1269
0076 AF01              MOV     R7,AR1
0078 FB                MOV     R3,A
0079 7D01              MOV     R5,#01H
007B 020000      R     LJMP    _FOsdWinAlphaPixel
             ; FUNCTION _FOsdWinInit (END)

             ; FUNCTION _FOsdSetDefPaletteColor (BEGIN)
                                           ; SOURCE LINE # 1280
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1281
                                           ; SOURCE LINE # 1282
0005 7008              JNZ     ?C0096
                                           ; SOURCE LINE # 1283
0007 7BFF              MOV     R3,#0FFH
0009 7A00        R     MOV     R2,#HIGH FOsdHwDefPaletteBpp1
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 74  

000B 7900        R     MOV     R1,#LOW FOsdHwDefPaletteBpp1
                                           ; SOURCE LINE # 1284
                                           ; SOURCE LINE # 1285
                                           ; SOURCE LINE # 1286
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1288
                                           ; SOURCE LINE # 1289
                                           ; SOURCE LINE # 1290
                                           ; SOURCE LINE # 1291
000D 8030              SJMP    ?C0233
000F         ?C0096:
                                           ; SOURCE LINE # 1292
000F 900000      R     MOV     DPTR,#mode
0012 E0                MOVX    A,@DPTR
0013 6401              XRL     A,#01H
0015 701A              JNZ     ?C0098
                                           ; SOURCE LINE # 1293
0017 7A00        R     MOV     R2,#HIGH FOsdSwDefPaletteBpp1
0019 7900        R     MOV     R1,#LOW FOsdSwDefPaletteBpp1
001B 120000      R     LCALL   L?0271
001E FF                MOV     R7,A
001F 120000      R     LCALL   _FOsdSetPaletteColorArray
                                           ; SOURCE LINE # 1294
0022 120000      R     LCALL   L?0269
0025 7F08              MOV     R7,#08H
0027 120000      R     LCALL   _FOsdSetPaletteColorArray
                                           ; SOURCE LINE # 1295
002A 120000      R     LCALL   L?0269
002D 7F10              MOV     R7,#010H
                                           ; SOURCE LINE # 1296
                                           ; SOURCE LINE # 1297
                                           ; SOURCE LINE # 1298
                                           ; SOURCE LINE # 1299
                                           ; SOURCE LINE # 1300
                                           ; SOURCE LINE # 1301
002F 8024              SJMP    ?C0234
0031         ?C0098:
                                           ; SOURCE LINE # 1302
0031 900000      R     MOV     DPTR,#mode
0034 E0                MOVX    A,@DPTR
0035 6402              XRL     A,#02H
0037 704D              JNZ     ?C0101
                                           ; SOURCE LINE # 1303
0039 7BFF              MOV     R3,#0FFH
003B 7A00        R     MOV     R2,#HIGH FOsdSwDefPaletteBpp1
003D 7900        R     MOV     R1,#LOW FOsdSwDefPaletteBpp1
003F         ?C0233:
003F 7410              MOV     A,#010H
0041 120000      R     LCALL   L?0273
0044 FF                MOV     R7,A
0045 120000      R     LCALL   _FOsdSetPaletteColorArray
                                           ; SOURCE LINE # 1304
0048 120000      R     LCALL   L?0294
004B 7F10              MOV     R7,#010H
004D 120000      R     LCALL   _FOsdSetPaletteColorArray
                                           ; SOURCE LINE # 1305
0050 120000      R     LCALL   L?0294
0053 7F14              MOV     R7,#014H
0055         ?C0234:
0055 120000      R     LCALL   _FOsdSetPaletteColorArray
                                           ; SOURCE LINE # 1306
0058 120000      R     LCALL   L?0270
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 75  

005B 7F18              MOV     R7,#018H
005D 120000      R     LCALL   _FOsdSetPaletteColorArray
                                           ; SOURCE LINE # 1307
0060 120000      R     LCALL   L?0295
0063 7F20              MOV     R7,#020H
0065 120000      R     LCALL   _FOsdSetPaletteColorArray
                                           ; SOURCE LINE # 1308
0068 120000      R     LCALL   L?0295
006B 7F24              MOV     R7,#024H
006D 120000      R     LCALL   _FOsdSetPaletteColorArray
                                           ; SOURCE LINE # 1309
0070 120000      R     LCALL   L?0270
0073 7F28              MOV     R7,#028H
0075 120000      R     LCALL   _FOsdSetPaletteColorArray
                                           ; SOURCE LINE # 1310
0078 7A00        R     MOV     R2,#HIGH FOsdDefPaletteBpp4
007A 7900        R     MOV     R1,#LOW FOsdDefPaletteBpp4
007C 7410              MOV     A,#010H
007E 120000      R     LCALL   L?0296
0081 7F30              MOV     R7,#030H
0083 120000      R     LCALL   _FOsdSetPaletteColorArray
                                           ; SOURCE LINE # 1311
                                           ; SOURCE LINE # 1312
0086         ?C0101:
0086 22                RET     
             ; FUNCTION _FOsdSetDefPaletteColor (END)

             ; FUNCTION _FOsdDownloadFontByDMA (BEGIN)
                                           ; SOURCE LINE # 1339
0000 900000      R     MOV     DPTR,#dest_loc
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1340
                                           ; SOURCE LINE # 1341
0008 7BFF              MOV     R3,#0FFH
000A 7A00        R     MOV     R2,#HIGH ?SC_70
000C 7900        R     MOV     R1,#LOW ?SC_70
000E 900000      R     MOV     DPTR,#dest_loc
0011 120000      R     LCALL   L?0337
0014 120000      R     LCALL   L?0361
0017 900000      E     MOV     DPTR,#?_dPrintf?BYTE+05H
001A 120000      R     LCALL   L?0383
001D 900000      E     MOV     DPTR,#?_dPrintf?BYTE+09H
0020 CF                XCH     A,R7
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
0025 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1344
0028 7F01              MOV     R7,#01H
002A 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 1348
002D 7F02              MOV     R7,#02H
002F 120000      E     LCALL   _McuSpiClkToPclk
                                           ; SOURCE LINE # 1351
0032 E4                CLR     A
0033 FF                MOV     R7,A
0034 120000      R     LCALL   _FOsdFontSetFifo
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 76  

                                           ; SOURCE LINE # 1352
0037 0F                INC     R7
0038 120000      R     LCALL   _FOsdSetAccessMode
                                           ; SOURCE LINE # 1354
003B 120000      R     LCALL   L?0361
003E 900000      E     MOV     DPTR,#?_SpiFlashDmaRead?BYTE+03H
0041 120000      R     LCALL   L?0383
0044 900000      E     MOV     DPTR,#?_SpiFlashDmaRead?BYTE+07H
0047 CF                XCH     A,R7
0048 F0                MOVX    @DPTR,A
0049 A3                INC     DPTR
004A EF                MOV     A,R7
004B F0                MOVX    @DPTR,A
004C 900000      R     MOV     DPTR,#dest_loc
004F E0                MOVX    A,@DPTR
0050 FC                MOV     R4,A
0051 A3                INC     DPTR
0052 E0                MOVX    A,@DPTR
0053 FD                MOV     R5,A
0054 E4                CLR     A
0055 FF                MOV     R7,A
0056 120000      E     LCALL   _SpiFlashDmaRead
                                           ; SOURCE LINE # 1356
0059 7F01              MOV     R7,#01H
005B 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 1357
005E 7F01              MOV     R7,#01H
0060 120000      R     LCALL   _FOsdFontSetFifo
                                           ; SOURCE LINE # 1358
0063 1F                DEC     R7
0064 120000      R     LCALL   _FOsdSetAccessMode
                                           ; SOURCE LINE # 1364
0067 020000      E     LJMP    McuSpiClkRestore
             ; FUNCTION _FOsdDownloadFontByDMA (END)

             ; FUNCTION _ReplaceFontRam (BEGIN)
                                           ; SOURCE LINE # 1421
0000 900000      R     MOV     DPTR,#dest_font_index
0003 120000      R     LCALL   L?0287
                                           ; SOURCE LINE # 1422
                                           ; SOURCE LINE # 1424
0006 900000      R     MOV     DPTR,#dest_font_index
0009 120000      R     LCALL   L?0337
000C 900000      R     MOV     DPTR,#sName
000F 120000      R     LCALL   L?0380
0012 120000      R     LCALL   L?0291
0015 7BFF              MOV     R3,#0FFH
0017 7A00        R     MOV     R2,#HIGH ?SC_104
0019 7900        R     MOV     R1,#LOW ?SC_104
001B 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1425
001E 900000      R     MOV     DPTR,#font
0021 120000      R     LCALL   L?0263
0024 120000      R     LCALL   L?0357
0027 900000      R     MOV     DPTR,#dest_font_index
002A 120000      R     LCALL   L?0317
;---- Variable 'addr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1426
002D C006              PUSH    AR6
002F C007              PUSH    AR7
0031 120000      R     LCALL   L?0319
0034 D007              POP     AR7
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 77  

0036 D006              POP     AR6
0038 020000      R     LJMP    _FOsdDownloadFontByDMA
             ; FUNCTION _ReplaceFontRam (END)

             ; FUNCTION _InitFontRam (BEGIN)
                                           ; SOURCE LINE # 1432
0000 900000      R     MOV     DPTR,#dest_font_index
0003 120000      R     LCALL   L?0287
                                           ; SOURCE LINE # 1433
                                           ; SOURCE LINE # 1437
0006 900000      R     MOV     DPTR,#dest_font_index
0009 120000      R     LCALL   L?0338
000C 900000      R     MOV     DPTR,#sName
000F 120000      R     LCALL   L?0380
0012 120000      R     LCALL   L?0291
0015 7BFF              MOV     R3,#0FFH
0017 7A00        R     MOV     R2,#HIGH ?SC_127
0019 7900        R     MOV     R1,#LOW ?SC_127
001B 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1438
001E 120000      R     LCALL   L?0262
0021 120000      R     LCALL   L?0357
0024 FF                MOV     R7,A
0025 120000      R     LCALL   L?0385
0028 FD                MOV     R5,A
0029 120000      R     LCALL   _FOsdSetFontWidthHeight
                                           ; SOURCE LINE # 1441
002C 120000      R     LCALL   L?0262
002F 120000      R     LCALL   L?0358
0032 900000      R     MOV     DPTR,#dest_font_index
0035 120000      R     LCALL   L?0317
;---- Variable 'addr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1442
0038 C006              PUSH    AR6
003A C007              PUSH    AR7
003C 120000      R     LCALL   L?0319
003F D007              POP     AR7
0041 D006              POP     AR6
0043 120000      R     LCALL   _FOsdDownloadFontByDMA
                                           ; SOURCE LINE # 1447
0046 E500        E     MOV     A,regTW88+01H
0048 2405              ADD     A,#05H
004A 120000      R     LCALL   L?0260
004D E0                MOVX    A,@DPTR
004E 54F1              ANL     A,#0F1H
0050 900000      R     MOV     DPTR,#value
                                           ; SOURCE LINE # 1448
0053 120000      R     LCALL   L?0261
0056 120000      R     LCALL   L?0329
0059 E0                MOVX    A,@DPTR
005A FC                MOV     R4,A
005B A3                INC     DPTR
005C E0                MOVX    A,@DPTR
005D FD                MOV     R5,A
005E 2F                ADD     A,R7
005F EC                MOV     A,R4
0060 35F0              ADDC    A,B
0062 30E007            JNB     ACC.0,?C0104
0065 900000      R     MOV     DPTR,#value
0068 E0                MOVX    A,@DPTR
0069 4402              ORL     A,#02H
006B F0                MOVX    @DPTR,A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 78  

006C         ?C0104:
                                           ; SOURCE LINE # 1449
006C 120000      R     LCALL   L?0345
006F 2D                ADD     A,R5
0070 EC                MOV     A,R4
0071 35F0              ADDC    A,B
0073 30E007            JNB     ACC.0,?C0105
0076 900000      R     MOV     DPTR,#value
0079 E0                MOVX    A,@DPTR
007A 4404              ORL     A,#04H
007C F0                MOVX    @DPTR,A
007D         ?C0105:
                                           ; SOURCE LINE # 1450
007D 120000      R     LCALL   L?0386
0080 FF                MOV     R7,A
0081 900000      R     MOV     DPTR,#dest_font_index+01H
0084 E0                MOVX    A,@DPTR
0085 2F                ADD     A,R7
0086 900000      R     MOV     DPTR,#dest_font_index
0089 E0                MOVX    A,@DPTR
008A 35F0              ADDC    A,B
008C 30E007            JNB     ACC.0,?C0106
008F 900000      R     MOV     DPTR,#value
0092 E0                MOVX    A,@DPTR
0093 4408              ORL     A,#08H
0095 F0                MOVX    @DPTR,A
0096         ?C0106:
                                           ; SOURCE LINE # 1451
0096 900000      R     MOV     DPTR,#value
0099 E0                MOVX    A,@DPTR
009A FF                MOV     R7,A
009B E500        E     MOV     A,regTW88+01H
009D 2405              ADD     A,#05H
009F 120000      R     LCALL   L?0260
00A2 EF                MOV     A,R7
                                           ; SOURCE LINE # 1452
00A3 120000      R     LCALL   L?0261
00A6 120000      R     LCALL   L?0329
00A9 120000      R     LCALL   L?0388
00AC 240B              ADD     A,#0BH
00AE 120000      R     LCALL   L?0260
00B1 EF                MOV     A,R7
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1453
00B3 90000A            MOV     DPTR,#0AH
00B6 120000      R     LCALL   L?0331
00B9 120000      R     LCALL   L?0388
00BC 2453              ADD     A,#053H
00BE 120000      R     LCALL   L?0260
00C1 EF                MOV     A,R7
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1454
00C3 90000C            MOV     DPTR,#0CH
00C6 120000      R     LCALL   L?0331
00C9 120000      R     LCALL   L?0389
00CC 2454              ADD     A,#054H
00CE 120000      R     LCALL   L?0260
00D1 EF                MOV     A,R7
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1458
00D3 7BFF              MOV     R3,#0FFH
00D5 7A00        R     MOV     R2,#HIGH FOsdHwDefPaletteBpp1
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 79  

00D7 7900        R     MOV     R1,#LOW FOsdHwDefPaletteBpp1
00D9 120000      R     LCALL   L?0367
00DC FF                MOV     R7,A
00DD 120000      R     LCALL   _FOsdSetPaletteColorArray
                                           ; SOURCE LINE # 1459
00E0 120000      R     LCALL   L?0262
00E3 120000      R     LCALL   L?0339
00E6 6013              JZ      ?C0107
                                           ; SOURCE LINE # 1460
00E8 120000      R     LCALL   L?0262
00EB 900010            MOV     DPTR,#010H
00EE 120000      E     LCALL   ?C?PLDOPTR
00F1 7404              MOV     A,#04H
00F3 120000      R     LCALL   L?0368
00F6 7F24              MOV     R7,#024H
00F8 120000      R     LCALL   _FOsdSetPaletteColorArray
00FB         ?C0107:
                                           ; SOURCE LINE # 1461
00FB 120000      R     LCALL   L?0262
00FE 900013            MOV     DPTR,#013H
0101 120000      R     LCALL   L?0340
0104 6011              JZ      ?C0108
                                           ; SOURCE LINE # 1462
0106 120000      R     LCALL   L?0262
0109 900013            MOV     DPTR,#013H
010C 120000      E     LCALL   ?C?PLDOPTR
010F 120000      R     LCALL   L?0272
0112 7F28              MOV     R7,#028H
0114 120000      R     LCALL   _FOsdSetPaletteColorArray
0117         ?C0108:
                                           ; SOURCE LINE # 1463
0117 120000      R     LCALL   L?0262
011A 900016            MOV     DPTR,#016H
011D 120000      R     LCALL   L?0340
0120 6011              JZ      ?C0109
                                           ; SOURCE LINE # 1464
0122 120000      R     LCALL   L?0262
0125 900016            MOV     DPTR,#016H
0128 120000      E     LCALL   ?C?PLDOPTR
012B 120000      R     LCALL   L?0367
012E 7F30              MOV     R7,#030H
0130 120000      R     LCALL   _FOsdSetPaletteColorArray
0133         ?C0109:
                                           ; SOURCE LINE # 1467
0133 900000      R     MOV     DPTR,#sName
0136 E0                MOVX    A,@DPTR
0137 FB                MOV     R3,A
0138 A3                INC     DPTR
0139 E0                MOVX    A,@DPTR
013A FA                MOV     R2,A
013B A3                INC     DPTR
013C E0                MOVX    A,@DPTR
013D 4A                ORL     A,R2
013E 4B                ORL     A,R3
013F 6013              JZ      ?C0110
0141 900000      R     MOV     DPTR,#sName
0144 A3                INC     DPTR
0145 A3                INC     DPTR
0146 E0                MOVX    A,@DPTR
0147 F9                MOV     R1,A
0148 900000      E     MOV     DPTR,#?_TWstrcpy?BYTE+03H
014B EB                MOV     A,R3
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 80  

014C F0                MOVX    @DPTR,A
014D A3                INC     DPTR
014E EA                MOV     A,R2
014F F0                MOVX    @DPTR,A
0150 A3                INC     DPTR
0151 E9                MOV     A,R1
0152 8009              SJMP    ?C0235
0154         ?C0110:
                                           ; SOURCE LINE # 1468
0154 120000      R     LCALL   L?0297
0157 7400        R     MOV     A,#HIGH ?SC_147
0159 F0                MOVX    @DPTR,A
015A A3                INC     DPTR
015B 7400        R     MOV     A,#LOW ?SC_147
015D         ?C0235:
015D F0                MOVX    @DPTR,A
015E 7B01              MOV     R3,#01H
0160 7A00        R     MOV     R2,#HIGH FontOsdInfo
0162 7900        R     MOV     R1,#LOW FontOsdInfo
0164 120000      E     LCALL   _TWstrcpy
0167         ?C0111:
                                           ; SOURCE LINE # 1469
0167 120000      R     LCALL   L?0262
016A 120000      R     LCALL   L?0358
016D 900000      R     MOV     DPTR,#FontOsdInfo+010H
                                           ; SOURCE LINE # 1470
0170 120000      R     LCALL   L?0384
0173 900000      R     MOV     DPTR,#FontOsdInfo+011H
0176 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1472
0177 120000      R     LCALL   L?0330
017A E0                MOVX    A,@DPTR
017B FC                MOV     R4,A
017C A3                INC     DPTR
017D E0                MOVX    A,@DPTR
017E 900000      R     MOV     DPTR,#FontOsdInfo+014H
                                           ; SOURCE LINE # 1473
0181 120000      R     LCALL   L?0344
0184 900000      R     MOV     DPTR,#FontOsdInfo+016H
0187 120000      R     LCALL   L?0299
                                           ; SOURCE LINE # 1474
018A 120000      R     LCALL   L?0386
018D 900000      R     MOV     DPTR,#FontOsdInfo+018H
0190 120000      R     LCALL   L?0299
                                           ; SOURCE LINE # 1475
0193 90000E            MOV     DPTR,#0EH
0196 120000      E     LCALL   ?C?ILDOPTR
0199 900000      R     MOV     DPTR,#FontOsdInfo+01AH
019C 120000      R     LCALL   L?0309
                                           ; SOURCE LINE # 1477
019F 020000      R     LJMP    DumpFontInfo
             ; FUNCTION _InitFontRam (END)

             ; FUNCTION _TestInitFontRam (BEGIN)
                                           ; SOURCE LINE # 1483
;---- Variable 'start' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1484
                                           ; SOURCE LINE # 1485
0000 120000      R     LCALL   L?0308
0003 7400        R     MOV     A,#HIGH ?SC_155
0005 F0                MOVX    @DPTR,A
0006 7400        R     MOV     A,#LOW ?SC_155
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 81  

0008 120000      R     LCALL   L?0362
000B 020000      R     LJMP    _InitFontRam
             ; FUNCTION _TestInitFontRam (END)

             ; FUNCTION _FOsdCopyMsgBuff2Osdram (BEGIN)
                                           ; SOURCE LINE # 1515
0000 900000      R     MOV     DPTR,#fOn
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1516
                                           ; SOURCE LINE # 1519
;---- Variable 'columns' assigned to Register 'R5' ----
0005 7D28              MOV     R5,#028H
                                           ; SOURCE LINE # 1524
0007 120000      R     LCALL   L?0356
000A 120000      E     LCALL   _TWstrlen
000D 900000      R     MOV     DPTR,#len
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1533
0012 604D              JZ      ?C0115
0014         ?C0114:
                                           ; SOURCE LINE # 1536
                                           ; SOURCE LINE # 1537
0014 900000      R     MOV     DPTR,#FontOsdInfo+029H
0017 E0                MOVX    A,@DPTR
0018 900000      R     MOV     DPTR,#attr
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1538
001C 900000      R     MOV     DPTR,#FontOsdInfo+01FH
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
0023 900000      R     MOV     DPTR,#osdram
0026 CF                XCH     A,R7
0027 F0                MOVX    @DPTR,A
0028 A3                INC     DPTR
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1544
002B 900000      R     MOV     DPTR,#len
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 7B01              MOV     R3,#01H
0032 E4                CLR     A
0033 FF                MOV     R7,A
0034 120000      R     LCALL   _FOsdWinScreenWH
                                           ; SOURCE LINE # 1547
0037 7F01              MOV     R7,#01H
0039 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 1548
003C 900000      R     MOV     DPTR,#osdram
003F E0                MOVX    A,@DPTR
0040 FE                MOV     R6,A
0041 A3                INC     DPTR
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 900000      R     MOV     DPTR,#attr
0047 E0                MOVX    A,@DPTR
0048 FD                MOV     R5,A
0049 120000      R     LCALL   _FOsdRamSetAddrAttr
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 82  

                                           ; SOURCE LINE # 1549
004C 120000      R     LCALL   L?0356
004F 900000      R     MOV     DPTR,#len
0052 E0                MOVX    A,@DPTR
0053 FD                MOV     R5,A
0054 120000      R     LCALL   _FOsdRamWriteByteStr
                                           ; SOURCE LINE # 1551
0057 900000      R     MOV     DPTR,#fOn
005A E0                MOVX    A,@DPTR
005B FD                MOV     R5,A
005C E4                CLR     A
005D FF                MOV     R7,A
005E 120000      R     LCALL   _FOsdWinEnable
                                           ; SOURCE LINE # 1552
0061         ?C0115:
0061 22                RET     
             ; FUNCTION _FOsdCopyMsgBuff2Osdram (END)

             ; FUNCTION _FOsdIndexMsgPrint (BEGIN)
                                           ; SOURCE LINE # 1557
;---- Variable 'index' assigned to Register 'R6' ----
0000 AE07              MOV     R6,AR7
                                           ; SOURCE LINE # 1558
                                           ; SOURCE LINE # 1559
0002 120000      E     LCALL   MenuGetLevel
0005 EF                MOV     A,R7
0006 7071              JNZ     ?C0117
0008         ?C0116:
                                           ; SOURCE LINE # 1562
0008 EE                MOV     A,R6
0009 14                DEC     A
000A 601B              JZ      ?C0120
000C 14                DEC     A
000D 6023              JZ      ?C0121
000F 14                DEC     A
0010 602B              JZ      ?C0122
0012 14                DEC     A
0013 6040              JZ      ?C0123
0015 14                DEC     A
0016 6048              JZ      ?C0124
0018 2405              ADD     A,#05H
001A 7049              JNZ     ?C0125
                                           ; SOURCE LINE # 1563
001C         ?C0119:
                                           ; SOURCE LINE # 1564
                                           ; SOURCE LINE # 1565
001C 120000      R     LCALL   L?0352
001F 7400        R     MOV     A,#HIGH ?SC_160
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 7400        R     MOV     A,#LOW ?SC_160
                                           ; SOURCE LINE # 1566
0025 8026              SJMP    ?C0238
                                           ; SOURCE LINE # 1567
0027         ?C0120:
                                           ; SOURCE LINE # 1568
0027 120000      R     LCALL   L?0297
002A 7400        R     MOV     A,#HIGH ?SC_168
002C F0                MOVX    @DPTR,A
002D A3                INC     DPTR
002E 7400        R     MOV     A,#LOW ?SC_168
                                           ; SOURCE LINE # 1569
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 83  

0030 803C              SJMP    ?C0239
                                           ; SOURCE LINE # 1570
0032         ?C0121:
                                           ; SOURCE LINE # 1571
                                           ; SOURCE LINE # 1572
0032 120000      R     LCALL   L?0352
0035 7400        R     MOV     A,#HIGH ?SC_185
0037 F0                MOVX    @DPTR,A
0038 A3                INC     DPTR
0039 7400        R     MOV     A,#LOW ?SC_185
003B         ?C0236:
                                           ; SOURCE LINE # 1573
003B 8010              SJMP    ?C0238
                                           ; SOURCE LINE # 1574
003D         ?C0122:
                                           ; SOURCE LINE # 1575
003D 120000      R     LCALL   FOsdSetInputMainString2FOsdMsgBuff
                                           ; SOURCE LINE # 1576
0040 900000      E     MOV     DPTR,#?_TWstrcat?BYTE+03H
0043 74FF              MOV     A,#0FFH
0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 7400        R     MOV     A,#HIGH ?SC_196
0049 F0                MOVX    @DPTR,A
004A A3                INC     DPTR
004B 7400        R     MOV     A,#LOW ?SC_196
004D         ?C0238:
004D 120000      R     LCALL   L?0355
0050 120000      E     LCALL   _TWstrcat
                                           ; SOURCE LINE # 1577
0053 801F              SJMP    ?C0118
                                           ; SOURCE LINE # 1578
0055         ?C0123:
                                           ; SOURCE LINE # 1579
0055 120000      R     LCALL   L?0298
0058 7400        R     MOV     A,#HIGH ?SC_210
005A F0                MOVX    @DPTR,A
005B A3                INC     DPTR
005C 7400        R     MOV     A,#LOW ?SC_210
005E         ?C0237:
                                           ; SOURCE LINE # 1580
005E 800E              SJMP    ?C0239
                                           ; SOURCE LINE # 1581
0060         ?C0124:
                                           ; SOURCE LINE # 1582
0060 120000      R     LCALL   FOsdSetInputMainString2FOsdMsgBuff
                                           ; SOURCE LINE # 1583
0063 800F              SJMP    ?C0118
                                           ; SOURCE LINE # 1584
0065         ?C0125:
                                           ; SOURCE LINE # 1585
0065 120000      R     LCALL   L?0298
0068 7400        R     MOV     A,#HIGH ?SC_228
006A F0                MOVX    @DPTR,A
006B A3                INC     DPTR
006C 7400        R     MOV     A,#LOW ?SC_228
006E         ?C0239:
006E 120000      R     LCALL   L?0355
0071 120000      E     LCALL   _TWstrcpy
                                           ; SOURCE LINE # 1586
                                           ; SOURCE LINE # 1587
0074         ?C0118:
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 84  

                                           ; SOURCE LINE # 1588
0074 7F01              MOV     R7,#01H
0076 120000      R     LCALL   _FOsdCopyMsgBuff2Osdram
                                           ; SOURCE LINE # 1589
0079         ?C0117:
0079 22                RET     
007A         L?0352:
007A 120000      R     LCALL   FOsdSetInputMainString2FOsdMsgBuff
007D 900000      E     MOV     DPTR,#?_TWstrcat?BYTE+03H
0080 74FF              MOV     A,#0FFH
0082 F0                MOVX    @DPTR,A
0083 A3                INC     DPTR
0084 22                RET     
             ; FUNCTION _FOsdIndexMsgPrint (END)

             ; FUNCTION _FOsdDumpPalette (BEGIN)
                                           ; SOURCE LINE # 1595
0000 900000      R     MOV     DPTR,#winno
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1596
                                           ; SOURCE LINE # 1599
0005 7F01              MOV     R7,#01H
0007 120000      E     LCALL   _WaitVBlank
                                           ; SOURCE LINE # 1600
000A 120000      R     LCALL   L?0390
000D FD                MOV     R5,A
000E 120000      R     LCALL   _FOsdWinEnable
                                           ; SOURCE LINE # 1602
0011 120000      R     LCALL   L?0390
0014 FB                MOV     R3,A
0015 FA                MOV     R2,A
0016 7D70              MOV     R5,#070H
0018 FC                MOV     R4,A
0019 120000      R     LCALL   _FOsdWinScreenXY
                                           ; SOURCE LINE # 1603
001C 900000      R     MOV     DPTR,#winno
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 7B02              MOV     R3,#02H
0023 7D10              MOV     R5,#010H
0025 120000      R     LCALL   _FOsdWinScreenWH
                                           ; SOURCE LINE # 1604
0028 120000      R     LCALL   L?0391
002B FB                MOV     R3,A
002C 7D01              MOV     R5,#01H
002E 120000      R     LCALL   _FOsdWinZoom
                                           ; SOURCE LINE # 1605
0031 900000      R     MOV     DPTR,#winno
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 120000      R     LCALL   _FOsdWinAlphaPixel
                                           ; SOURCE LINE # 1606
0039 900000      R     MOV     DPTR,#winno
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E 120000      R     LCALL   _FOsdWinMulticolor
                                           ; SOURCE LINE # 1607
0041 900000      R     MOV     DPTR,#winno
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 7D78              MOV     R5,#078H
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 85  

0048 7C00              MOV     R4,#00H
004A 120000      R     LCALL   _FOsdWinSetOsdRamStartAddr
                                           ; SOURCE LINE # 1609
004D E4                CLR     A
004E 900000      R     MOV     DPTR,#palette_group
0051 F0                MOVX    @DPTR,A
0052         ?C0126:
                                           ; SOURCE LINE # 1611
0052 900000      R     MOV     DPTR,#palette_group
0055 E0                MOVX    A,@DPTR
0056 FD                MOV     R5,A
0057 2478              ADD     A,#078H
0059 FF                MOV     R7,A
005A E4                CLR     A
005B 33                RLC     A
005C FE                MOV     R6,A
005D 120000      R     LCALL   _FOsdRamSetAddrAttr
                                           ; SOURCE LINE # 1612
0060 7F00              MOV     R7,#00H
0062 7E01              MOV     R6,#01H
0064 120000      R     LCALL   _FOsdRamSetData
                                           ; SOURCE LINE # 1615
0067 900000      R     MOV     DPTR,#palette_group
006A E0                MOVX    A,@DPTR
006B FD                MOV     R5,A
006C 1E                DEC     R6
006D 2488              ADD     A,#088H
006F FF                MOV     R7,A
0070 EE                MOV     A,R6
0071 33                RLC     A
0072 FE                MOV     R6,A
0073 ED                MOV     A,R5
0074 C4                SWAP    A
0075 54F0              ANL     A,#0F0H
0077 FD                MOV     R5,A
0078 E0                MOVX    A,@DPTR
0079 04                INC     A
007A 4D                ORL     A,R5
007B FD                MOV     R5,A
007C 120000      R     LCALL   _FOsdRamSetAddrAttr
                                           ; SOURCE LINE # 1616
007F 120000      R     LCALL   L?0259
0082 E0                MOVX    A,@DPTR
0083 54DF              ANL     A,#0DFH
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1617
0086 900000      R     MOV     DPTR,#palette_group
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B C3                CLR     C
008C 940A              SUBB    A,#0AH
008E 5005              JNC     ?C0129
0090 EF                MOV     A,R7
0091 2430              ADD     A,#030H
0093 8006              SJMP    ?C0240
0095         ?C0129:
                                           ; SOURCE LINE # 1618
0095 900000      R     MOV     DPTR,#palette_group
0098 E0                MOVX    A,@DPTR
0099 2437              ADD     A,#037H
009B         ?C0240:
009B FF                MOV     R7,A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 86  

009C E500        E     MOV     A,regTW88+01H
009E 2407              ADD     A,#07H
00A0 120000      R     LCALL   L?0260
00A3 EF                MOV     A,R7
00A4 F0                MOVX    @DPTR,A
00A5         ?C0130:
                                           ; SOURCE LINE # 1620
00A5 7F01              MOV     R7,#01H
00A7 7E00              MOV     R6,#00H
00A9 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 1621
00AC 900000      R     MOV     DPTR,#palette_group
00AF E0                MOVX    A,@DPTR
00B0 04                INC     A
00B1 F0                MOVX    @DPTR,A
00B2 E0                MOVX    A,@DPTR
00B3 C3                CLR     C
00B4 9410              SUBB    A,#010H
00B6 409A              JC      ?C0126
00B8         ?C0127:
                                           ; SOURCE LINE # 1623
00B8 900000      R     MOV     DPTR,#winno
00BB E0                MOVX    A,@DPTR
00BC FF                MOV     R7,A
00BD 7D01              MOV     R5,#01H
00BF 020000      R     LJMP    _FOsdWinEnable
             ; FUNCTION _FOsdDumpPalette (END)

             ; FUNCTION _GetInputMainString (BEGIN)
                                           ; SOURCE LINE # 1633
0000 900000      R     MOV     DPTR,#p_itoa_buff
0003 120000      R     LCALL   L?0290
                                           ; SOURCE LINE # 1634
                                           ; SOURCE LINE # 1638
0006 120000      E     LCALL   GetInputMain
;---- Variable 'InputMainIndex' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1640
0009 EF                MOV     A,R7
000A B40900            CJNE    A,#09H,?C0218
000D         ?C0218:
000D 4003              JC      $ + 5H
000F 020000      R     LJMP    ?C0142
0012 900000      R     MOV     DPTR,#?C0219
0015 F8                MOV     R0,A
0016 28                ADD     A,R0
0017 28                ADD     A,R0
0018 73                JMP     @A+DPTR
0019         ?C0219:
0019 020000      R     LJMP    ?C0133
001C 020000      R     LJMP    ?C0134
001F 020000      R     LJMP    ?C0135
0022 020000      R     LJMP    ?C0136
0025 020000      R     LJMP    ?C0137
0028 020000      R     LJMP    ?C0138
002B 020000      R     LJMP    ?C0139
002E 020000      R     LJMP    ?C0140
0031 020000      R     LJMP    ?C0141
                                           ; SOURCE LINE # 1641
0034         ?C0133:
0034 120000      R     LCALL   L?0298
0037 7400        R     MOV     A,#HIGH ?SC_236
0039 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 87  

003A A3                INC     DPTR
003B 7400        R     MOV     A,#LOW ?SC_236
003D 020000      R     LJMP    ?C0249
                                           ; SOURCE LINE # 1642
0040         ?C0134:
0040 120000      R     LCALL   L?0298
0043 7400        R     MOV     A,#HIGH ?SC_241
0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 7400        R     MOV     A,#LOW ?SC_241
0049         ?C0241:
0049 8056              SJMP    ?C0249
                                           ; SOURCE LINE # 1643
004B         ?C0135:
004B 120000      R     LCALL   L?0298
004E 7400        R     MOV     A,#HIGH ?SC_248
0050 F0                MOVX    @DPTR,A
0051 A3                INC     DPTR
0052 7400        R     MOV     A,#LOW ?SC_248
0054         ?C0242:
0054 804B              SJMP    ?C0249
                                           ; SOURCE LINE # 1644
0056         ?C0136:
0056 120000      R     LCALL   L?0298
0059 7400        R     MOV     A,#HIGH ?SC_258
005B F0                MOVX    @DPTR,A
005C A3                INC     DPTR
005D 7400        R     MOV     A,#LOW ?SC_258
005F         ?C0243:
005F 8040              SJMP    ?C0249
                                           ; SOURCE LINE # 1645
0061         ?C0137:
0061 120000      R     LCALL   L?0298
0064 7400        R     MOV     A,#HIGH ?SC_261
0066 F0                MOVX    @DPTR,A
0067 A3                INC     DPTR
0068 7400        R     MOV     A,#LOW ?SC_261
006A         ?C0244:
006A 8035              SJMP    ?C0249
                                           ; SOURCE LINE # 1646
006C         ?C0138:
006C 120000      R     LCALL   L?0298
006F 7400        R     MOV     A,#HIGH ?SC_265
0071 F0                MOVX    @DPTR,A
0072 A3                INC     DPTR
0073 7400        R     MOV     A,#LOW ?SC_265
0075         ?C0245:
0075 802A              SJMP    ?C0249
                                           ; SOURCE LINE # 1647
0077         ?C0139:
0077 120000      R     LCALL   L?0298
007A 7400        R     MOV     A,#HIGH ?SC_273
007C F0                MOVX    @DPTR,A
007D A3                INC     DPTR
007E 7400        R     MOV     A,#LOW ?SC_273
0080         ?C0246:
0080 801F              SJMP    ?C0249
                                           ; SOURCE LINE # 1648
0082         ?C0140:
0082 120000      R     LCALL   L?0298
0085 7400        R     MOV     A,#HIGH ?SC_281
0087 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 88  

0088 A3                INC     DPTR
0089 7400        R     MOV     A,#LOW ?SC_281
008B         ?C0247:
008B 8014              SJMP    ?C0249
                                           ; SOURCE LINE # 1649
008D         ?C0141:
008D 120000      R     LCALL   L?0298
0090 7400        R     MOV     A,#HIGH ?SC_287
0092 F0                MOVX    @DPTR,A
0093 A3                INC     DPTR
0094 7400        R     MOV     A,#LOW ?SC_287
0096         ?C0248:
0096 8009              SJMP    ?C0249
                                           ; SOURCE LINE # 1650
0098         ?C0142:
0098 120000      R     LCALL   L?0298
009B 7400        R     MOV     A,#HIGH ?SC_292
009D F0                MOVX    @DPTR,A
009E A3                INC     DPTR
009F 7400        R     MOV     A,#LOW ?SC_292
00A1         ?C0249:
00A1 F0                MOVX    @DPTR,A
00A2 900000      R     MOV     DPTR,#p_itoa_buff
00A5 120000      R     LCALL   L?0263
00A8 120000      E     LCALL   _TWstrcpy
                                           ; SOURCE LINE # 1651
00AB         ?C0132:
                                           ; SOURCE LINE # 1652
00AB 900000      R     MOV     DPTR,#p_itoa_buff
00AE 120000      R     LCALL   L?0263
00B1 120000      E     LCALL   _TWstrlen
;---- Variable 'len' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1653
00B4 900000      R     MOV     DPTR,#p_itoa_buff
00B7 E0                MOVX    A,@DPTR
00B8 FB                MOV     R3,A
00B9 A3                INC     DPTR
00BA E0                MOVX    A,@DPTR
00BB FA                MOV     R2,A
00BC A3                INC     DPTR
00BD E0                MOVX    A,@DPTR
00BE 7E00              MOV     R6,#00H
00C0 2F                ADD     A,R7
00C1 F9                MOV     R1,A
00C2 EE                MOV     A,R6
00C3 3A                ADDC    A,R2
00C4 FA                MOV     R2,A
                                           ; SOURCE LINE # 1654
00C5         ?C0143:
00C5 22                RET     
             ; FUNCTION _GetInputMainString (END)

             ; FUNCTION FOsdSetInputMainString2FOsdMsgBuff (BEGIN)
                                           ; SOURCE LINE # 1661
                                           ; SOURCE LINE # 1662
                                           ; SOURCE LINE # 1663
0000 120000      R     LCALL   L?0356
0003 020000      R     LJMP    _GetInputMainString
             ; FUNCTION FOsdSetInputMainString2FOsdMsgBuff (END)

             ; FUNCTION _FOsdRamClearAll (BEGIN)
                                           ; SOURCE LINE # 1832
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 89  

0000 900000      R     MOV     DPTR,#dat
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1833
                                           ; SOURCE LINE # 1835
000B E4                CLR     A
000C FD                MOV     R5,A
000D FF                MOV     R7,A
000E 120000      R     LCALL   _FOsdRamSetFifo
                                           ; SOURCE LINE # 1836
0011 900000      R     MOV     DPTR,#attr
0014 E0                MOVX    A,@DPTR
0015 FD                MOV     R5,A
0016 E4                CLR     A
0017 FF                MOV     R7,A
0018 FE                MOV     R6,A
0019 120000      R     LCALL   _FOsdRamSetAddrAttr
                                           ; SOURCE LINE # 1838
001C 900000      R     MOV     DPTR,#dat
001F E0                MOVX    A,@DPTR
0020 30E009            JNB     ACC.0,?C0145
0023 120000      R     LCALL   L?0259
0026 E0                MOVX    A,@DPTR
0027 4420              ORL     A,#020H
0029 F0                MOVX    @DPTR,A
002A 8007              SJMP    ?C0146
002C         ?C0145:
                                           ; SOURCE LINE # 1839
002C 120000      R     LCALL   L?0259
002F E0                MOVX    A,@DPTR
0030 54DF              ANL     A,#0DFH
0032 F0                MOVX    @DPTR,A
0033         ?C0146:
                                           ; SOURCE LINE # 1840
;---- Variable 'i' assigned to Register 'R6/R7' ----
0033 E4                CLR     A
0034 FF                MOV     R7,A
0035 FE                MOV     R6,A
0036         ?C0147:
                                           ; SOURCE LINE # 1841
0036 900000      R     MOV     DPTR,#dat
0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B FD                MOV     R5,A
003C E500        E     MOV     A,regTW88+01H
003E 2407              ADD     A,#07H
0040 120000      R     LCALL   L?0260
0043 ED                MOV     A,R5
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1842
0045 0F                INC     R7
0046 BF0001            CJNE    R7,#00H,?C0220
0049 0E                INC     R6
004A         ?C0220:
004A E4                CLR     A
004B B507E8            CJNE    A,AR7,?C0147
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 90  

004E EE                MOV     A,R6
004F B402E4            CJNE    A,#02H,?C0147
0052         ?C0148:
                                           ; SOURCE LINE # 1843
0052 7D01              MOV     R5,#01H
0054 7F01              MOV     R7,#01H
0056 020000      R     LJMP    _FOsdRamSetFifo
             ; FUNCTION _FOsdRamClearAll (END)

             ; FUNCTION _InitFontRamByNum (BEGIN)
                                           ; SOURCE LINE # 1932
0000 900000      R     MOV     DPTR,#start
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
;---- Variable 'FontMode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1933
                                           ; SOURCE LINE # 1934
0008 EF                MOV     A,R7
0009 14                DEC     A
000A 600E              JZ      ?C0153
000C 14                DEC     A
000D 6014              JZ      ?C0154
000F 14                DEC     A
0010 601B              JZ      ?C0155
0012 14                DEC     A
0013 6042              JZ      ?C0156
0015 2404              ADD     A,#04H
                                           ; SOURCE LINE # 1935
0017         ?C0152:
                                           ; SOURCE LINE # 1936
                                           ; SOURCE LINE # 1938
0017 020000      R     LJMP    ?C0250
                                           ; SOURCE LINE # 1939
001A         ?C0153:
                                           ; SOURCE LINE # 1942
001A 120000      R     LCALL   L?0306
001D 120000      R     LCALL   L?0346
                                           ; SOURCE LINE # 1943
0020 020000      R     LJMP    ?C0251
                                           ; SOURCE LINE # 1944
0023         ?C0154:
                                           ; SOURCE LINE # 1946
0023 900000      R     MOV     DPTR,#start
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
                                           ; SOURCE LINE # 1947
                                           ; SOURCE LINE # 1948
002B 8017              SJMP    ?C0252
                                           ; SOURCE LINE # 1949
002D         ?C0155:
                                           ; SOURCE LINE # 1950
002D 120000      R     LCALL   L?0306
0030 120000      R     LCALL   L?0346
0033 120000      R     LCALL   _InitFontRam
                                           ; SOURCE LINE # 1951
0036 900000      R     MOV     DPTR,#start+01H
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 91  

0039 E0                MOVX    A,@DPTR
003A 2480              ADD     A,#080H
003C FF                MOV     R7,A
003D 900000      R     MOV     DPTR,#start
0040 E0                MOVX    A,@DPTR
0041 3400              ADDC    A,#00H
0043 FE                MOV     R6,A
0044         ?C0252:
0044 120000      R     LCALL   L?0308
0047 7400        R     MOV     A,#HIGH ?SC_308
0049 F0                MOVX    @DPTR,A
004A 7400        R     MOV     A,#LOW ?SC_308
004C 120000      R     LCALL   L?0362
004F 120000      R     LCALL   _InitFontRam
                                           ; SOURCE LINE # 1952
0052 E4                CLR     A
0053 FF                MOV     R7,A
0054 020000      R     LJMP    _FOsdInitBpp3AlphaTable
                                           ; SOURCE LINE # 1954
                                           ; SOURCE LINE # 1955
0057         ?C0156:
                                           ; SOURCE LINE # 1956
0057 120000      R     LCALL   L?0307
005A 120000      R     LCALL   L?0348
005D 120000      R     LCALL   _InitFontRam
                                           ; SOURCE LINE # 1957
0060 900000      R     MOV     DPTR,#start+01H
0063 E0                MOVX    A,@DPTR
0064 24A0              ADD     A,#0A0H
0066 FF                MOV     R7,A
0067 900000      R     MOV     DPTR,#start
006A E0                MOVX    A,@DPTR
006B 3400              ADDC    A,#00H
006D FE                MOV     R6,A
006E 900000      R     MOV     DPTR,#?_ReplaceFontRam?BYTE+05H
0071 74FF              MOV     A,#0FFH
0073 F0                MOVX    @DPTR,A
0074 A3                INC     DPTR
0075 7400        R     MOV     A,#HIGH ?SC_317
0077 F0                MOVX    @DPTR,A
0078 A3                INC     DPTR
0079 7400        R     MOV     A,#LOW ?SC_317
007B F0                MOVX    @DPTR,A
007C 7BFF              MOV     R3,#0FFH
007E 7A00        E     MOV     R2,#HIGH kor_font
0080 7900        E     MOV     R1,#LOW kor_font
0082 020000      R     LJMP    _ReplaceFontRam
                                           ; SOURCE LINE # 1958
                                           ; SOURCE LINE # 1959
0085         ?C0250:
0085 120000      R     LCALL   L?0307
0088 120000      R     LCALL   L?0348
008B         ?C0251:
008B 120000      R     LCALL   _InitFontRam
                                           ; SOURCE LINE # 1963
                                           ; SOURCE LINE # 1964
                                           ; SOURCE LINE # 1965
008E         ?C0158:
008E 22                RET     
             ; FUNCTION _InitFontRamByNum (END)

             ; FUNCTION _FontInfo (BEGIN)
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 92  

                                           ; SOURCE LINE # 1969
0000 900000      R     MOV     DPTR,#start
0003 120000      R     LCALL   L?0288
                                           ; SOURCE LINE # 1970
                                           ; SOURCE LINE # 1974
0006 900000      R     MOV     DPTR,#font
0009 120000      R     LCALL   L?0263
000C 120000      E     LCALL   ?C?LLDPTR
000F 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0012 120000      E     LCALL   ?C?LSTXDATA
0015 7A00        R     MOV     R2,#HIGH ?SC_325
0017 7900        R     MOV     R1,#LOW ?SC_325
                                           ; SOURCE LINE # 1975
0019 120000      R     LCALL   L?0316
001C 120000      R     LCALL   L?0263
001F 900004            MOV     DPTR,#04H
0022 120000      E     LCALL   ?C?ILDOPTR
0025 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0028 120000      R     LCALL   L?0320
002B 7A00        R     MOV     R2,#HIGH ?SC_334
002D 7900        R     MOV     R1,#LOW ?SC_334
                                           ; SOURCE LINE # 1976
002F 120000      R     LCALL   L?0316
0032 120000      R     LCALL   L?0263
0035 120000      R     LCALL   L?0358
0038 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
003B 120000      R     LCALL   L?0384
003E 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
0041 F0                MOVX    @DPTR,A
0042 7A00        R     MOV     R2,#HIGH ?SC_9
0044 7900        R     MOV     R1,#LOW ?SC_9
                                           ; SOURCE LINE # 1977
0046 120000      R     LCALL   L?0333
0049 120000      R     LCALL   L?0263
004C 900008            MOV     DPTR,#08H
004F 120000      E     LCALL   ?C?ILDOPTR
0052 FF                MOV     R7,A
0053 900000      R     MOV     DPTR,#start
0056 E0                MOVX    A,@DPTR
0057 FC                MOV     R4,A
0058 A3                INC     DPTR
0059 E0                MOVX    A,@DPTR
005A 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
005D 120000      R     LCALL   L?0344
0060 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
0063 120000      R     LCALL   L?0309
0066 120000      R     LCALL   L?0387
0069 900000      E     MOV     DPTR,#?_Printf?BYTE+07H
006C 120000      R     LCALL   L?0332
006F 90000E            MOV     DPTR,#0EH
0072 120000      E     LCALL   ?C?ILDOPTR
0075 900000      E     MOV     DPTR,#?_Printf?BYTE+09H
0078 120000      R     LCALL   L?0332
007B 7A00        R     MOV     R2,#HIGH ?SC_343
007D 7900        R     MOV     R1,#LOW ?SC_343
                                           ; SOURCE LINE # 1978
007F 120000      R     LCALL   L?0333
0082 120000      R     LCALL   L?0263
0085 120000      R     LCALL   L?0339
0088 601F              JZ      ?C0159
                                           ; SOURCE LINE # 1979
008A 7A00        R     MOV     R2,#HIGH ?SC_375
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 93  

008C 7900        R     MOV     R1,#LOW ?SC_375
                                           ; SOURCE LINE # 1980
008E 120000      R     LCALL   L?0371
0091 120000      R     LCALL   L?0263
0094 900010            MOV     DPTR,#010H
0097 120000      R     LCALL   L?0392
009A 120000      R     LCALL   L?0290
                                           ; SOURCE LINE # 1981
009D E4                CLR     A
009E 900000      R     MOV     DPTR,#i
00A1 F0                MOVX    @DPTR,A
00A2         ?C0160:
                                           ; SOURCE LINE # 1982
00A2 120000      R     LCALL   L?0264
00A5 9404              SUBB    A,#04H
00A7 40F9              JC      ?C0160
                                           ; SOURCE LINE # 1983
00A9         ?C0159:
                                           ; SOURCE LINE # 1984
00A9 900000      R     MOV     DPTR,#font
00AC 120000      R     LCALL   L?0263
00AF 900013            MOV     DPTR,#013H
00B2 120000      R     LCALL   L?0340
00B5 601F              JZ      ?C0163
                                           ; SOURCE LINE # 1985
00B7 7A00        R     MOV     R2,#HIGH ?SC_389
00B9 7900        R     MOV     R1,#LOW ?SC_389
                                           ; SOURCE LINE # 1986
00BB 120000      R     LCALL   L?0371
00BE 120000      R     LCALL   L?0263
00C1 900013            MOV     DPTR,#013H
00C4 120000      R     LCALL   L?0392
00C7 120000      R     LCALL   L?0290
                                           ; SOURCE LINE # 1987
00CA E4                CLR     A
00CB 900000      R     MOV     DPTR,#i
00CE F0                MOVX    @DPTR,A
00CF         ?C0164:
                                           ; SOURCE LINE # 1988
00CF 120000      R     LCALL   L?0264
00D2 9408              SUBB    A,#08H
00D4 40F9              JC      ?C0164
                                           ; SOURCE LINE # 1989
00D6         ?C0163:
                                           ; SOURCE LINE # 1990
00D6 900000      R     MOV     DPTR,#font
00D9 120000      R     LCALL   L?0263
00DC 900016            MOV     DPTR,#016H
00DF 120000      R     LCALL   L?0340
00E2 6035              JZ      ?C0174
                                           ; SOURCE LINE # 1991
00E4 7BFF              MOV     R3,#0FFH
00E6 7A00        R     MOV     R2,#HIGH ?SC_397
00E8 7900        R     MOV     R1,#LOW ?SC_397
00EA 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1992
00ED 900000      R     MOV     DPTR,#font
00F0 120000      R     LCALL   L?0263
00F3 900016            MOV     DPTR,#016H
00F6 120000      R     LCALL   L?0393
00F9 120000      R     LCALL   L?0290
                                           ; SOURCE LINE # 1993
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 94  

00FC E4                CLR     A
00FD 900000      R     MOV     DPTR,#i
0100 F0                MOVX    @DPTR,A
0101         ?C0168:
                                           ; SOURCE LINE # 1994
0101 120000      R     LCALL   L?0302
0104 40FB              JC      ?C0168
0106         ?C0169:
                                           ; SOURCE LINE # 1995
0106 7BFF              MOV     R3,#0FFH
0108 7A00        R     MOV     R2,#HIGH ?SC_405
010A 7900        R     MOV     R1,#LOW ?SC_405
010C 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1996
010F E4                CLR     A
0110 900000      R     MOV     DPTR,#i
0113 F0                MOVX    @DPTR,A
0114         ?C0171:
                                           ; SOURCE LINE # 1997
0114 120000      R     LCALL   L?0302
0117 40FB              JC      ?C0171
                                           ; SOURCE LINE # 1998
                                           ; SOURCE LINE # 1999
0119         ?C0174:
0119 22                RET     
011A         L?0264:
011A 900000      R     MOV     DPTR,#wptr
011D E0                MOVX    A,@DPTR
011E FB                MOV     R3,A
011F A3                INC     DPTR
0120 E4                CLR     A
0121 75F002            MOV     B,#02H
0124 120000      E     LCALL   ?C?ILDIX
0127 A9F0              MOV     R1,B
0129 FA                MOV     R2,A
012A 120000      E     LCALL   ?C?ILDPTR
012D FF                MOV     R7,A
012E 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0131 E5F0              MOV     A,B
0133 F0                MOVX    @DPTR,A
0134 A3                INC     DPTR
0135 EF                MOV     A,R7
0136 F0                MOVX    @DPTR,A
0137 7BFF              MOV     R3,#0FFH
0139 7A00        R     MOV     R2,#HIGH ?SC_383
013B 7900        R     MOV     R1,#LOW ?SC_383
013D 120000      E     LCALL   _Printf
0140 900000      R     MOV     DPTR,#i
0143 E0                MOVX    A,@DPTR
0144 04                INC     A
0145 F0                MOVX    @DPTR,A
0146 E0                MOVX    A,@DPTR
0147 C3                CLR     C
0148 22                RET     
0149         L?0302:
0149 900000      R     MOV     DPTR,#wptr
014C E0                MOVX    A,@DPTR
014D FB                MOV     R3,A
014E A3                INC     DPTR
014F E4                CLR     A
0150 75F002            MOV     B,#02H
0153 120000      E     LCALL   ?C?ILDIX
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 95  

0156 A9F0              MOV     R1,B
0158 FA                MOV     R2,A
0159 120000      E     LCALL   ?C?ILDPTR
015C FF                MOV     R7,A
015D 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0160 E5F0              MOV     A,B
0162 F0                MOVX    @DPTR,A
0163 A3                INC     DPTR
0164 EF                MOV     A,R7
0165 F0                MOVX    @DPTR,A
0166 7BFF              MOV     R3,#0FFH
0168 7A00        R     MOV     R2,#HIGH ?SC_383
016A 7900        R     MOV     R1,#LOW ?SC_383
016C 120000      E     LCALL   _Printf
016F 900000      R     MOV     DPTR,#i
0172 E0                MOVX    A,@DPTR
0173 04                INC     A
0174 F0                MOVX    @DPTR,A
0175 E0                MOVX    A,@DPTR
0176 C3                CLR     C
0177 9408              SUBB    A,#08H
0179 22                RET     
017A         L?0316:
017A 7BFF              MOV     R3,#0FFH
017C 120000      E     LCALL   _Printf
017F 900000      R     MOV     DPTR,#font
0182 22                RET     
0183         L?0333:
0183 7BFF              MOV     R3,#0FFH
0185 120000      E     LCALL   _Printf
0188 900000      R     MOV     DPTR,#font
018B 22                RET     
018C         L?0371:
018C 7BFF              MOV     R3,#0FFH
018E 120000      E     LCALL   _Printf
0191 900000      R     MOV     DPTR,#font
0194 22                RET     
             ; FUNCTION _FontInfo (END)

             ; FUNCTION _FontInfoByNum (BEGIN)
                                           ; SOURCE LINE # 2004
;---- Variable 'FontMode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2005
                                           ; SOURCE LINE # 2006
0000 EF                MOV     A,R7
0001 14                DEC     A
0002 601B              JZ      ?C0177
0004 14                DEC     A
0005 6026              JZ      ?C0178
0007 14                DEC     A
0008 6034              JZ      ?C0179
000A 14                DEC     A
000B 604C              JZ      ?C0180
000D 2404              ADD     A,#04H
000F 7067              JNZ     ?C0182
                                           ; SOURCE LINE # 2007
0011         ?C0176:
                                           ; SOURCE LINE # 2008
0011 7BFF              MOV     R3,#0FFH
0013 7A00        R     MOV     R2,#HIGH ?SC_413
0015 7900        R     MOV     R1,#LOW ?SC_413
0017 120000      E     LCALL   _Puts
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 96  

                                           ; SOURCE LINE # 2009
001A 120000      R     LCALL   L?0349
                                           ; SOURCE LINE # 2010
001D 801A              SJMP    ?C0254
                                           ; SOURCE LINE # 2011
001F         ?C0177:
                                           ; SOURCE LINE # 2012
001F 7BFF              MOV     R3,#0FFH
0021 7A00        R     MOV     R2,#HIGH ?SC_427
0023 7900        R     MOV     R1,#LOW ?SC_427
0025 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 2013
0028 120000      R     LCALL   L?0347
002B         ?C0253:
                                           ; SOURCE LINE # 2014
002B 800C              SJMP    ?C0254
                                           ; SOURCE LINE # 2015
002D         ?C0178:
                                           ; SOURCE LINE # 2016
002D 7BFF              MOV     R3,#0FFH
002F 7A00        R     MOV     R2,#HIGH ?SC_437
0031 7900        R     MOV     R1,#LOW ?SC_437
0033 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 2017
0036 120000      R     LCALL   L?0363
0039         ?C0254:
0039 E4                CLR     A
003A FF                MOV     R7,A
003B FE                MOV     R6,A
                                           ; SOURCE LINE # 2018
003C 8037              SJMP    ?C0256
                                           ; SOURCE LINE # 2019
003E         ?C0179:
                                           ; SOURCE LINE # 2020
003E 7BFF              MOV     R3,#0FFH
0040 7A00        R     MOV     R2,#HIGH ?SC_455
0042 7900        R     MOV     R1,#LOW ?SC_455
0044 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 2021
0047 120000      R     LCALL   L?0347
004A E4                CLR     A
004B FF                MOV     R7,A
004C FE                MOV     R6,A
004D 120000      R     LCALL   _FontInfo
                                           ; SOURCE LINE # 2022
0050 120000      R     LCALL   L?0363
0053 7F80              MOV     R7,#080H
0055 7E00              MOV     R6,#00H
0057         ?C0255:
                                           ; SOURCE LINE # 2023
0057 801C              SJMP    ?C0256
                                           ; SOURCE LINE # 2024
0059         ?C0180:
                                           ; SOURCE LINE # 2025
0059 7BFF              MOV     R3,#0FFH
005B 7A00        R     MOV     R2,#HIGH ?SC_473
005D 7900        R     MOV     R1,#LOW ?SC_473
005F 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 2026
0062 120000      R     LCALL   L?0349
0065 E4                CLR     A
0066 FF                MOV     R7,A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 97  

0067 FE                MOV     R6,A
0068 120000      R     LCALL   _FontInfo
                                           ; SOURCE LINE # 2027
006B 7BFF              MOV     R3,#0FFH
006D 7A00        E     MOV     R2,#HIGH kor_font
006F 7900        E     MOV     R1,#LOW kor_font
0071 7FA0              MOV     R7,#0A0H
0073 7E00              MOV     R6,#00H
0075         ?C0256:
0075 120000      R     LCALL   _FontInfo
                                           ; SOURCE LINE # 2028
                                           ; SOURCE LINE # 2029
                                           ; SOURCE LINE # 2030
                                           ; SOURCE LINE # 2031
                                           ; SOURCE LINE # 2032
0078         ?C0182:
0078 22                RET     
             ; FUNCTION _FontInfoByNum (END)

             ; FUNCTION DumpFont (BEGIN)
                                           ; SOURCE LINE # 2036
                                           ; SOURCE LINE # 2037
                                           ; SOURCE LINE # 2044
0000 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0003 120000      R     LCALL   L?0366
0006 7A00        R     MOV     R2,#HIGH ?SC_482
0008 7900        R     MOV     R1,#LOW ?SC_482
000A 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 2045
000D 120000      R     LCALL   L?0381
0010 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0013 F0                MOVX    @DPTR,A
0014 900000      R     MOV     DPTR,#FontOsdInfo+011H
0017 E0                MOVX    A,@DPTR
0018 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
001B F0                MOVX    @DPTR,A
001C 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 2048
001F E4                CLR     A
0020 FF                MOV     R7,A
0021 120000      R     LCALL   _FOsdWinInit
                                           ; SOURCE LINE # 2049
0024 E4                CLR     A
0025 900000      R     MOV     DPTR,#start
0028 F0                MOVX    @DPTR,A
0029 A3                INC     DPTR
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2050
002B 900000      R     MOV     DPTR,#FontOsdInfo+014H
002E E0                MOVX    A,@DPTR
002F FE                MOV     R6,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 120000      R     LCALL   L?0364
                                           ; SOURCE LINE # 2051
0036 C3                CLR     C
0037 9400              SUBB    A,#00H
0039 FE                MOV     R6,A
003A EC                MOV     A,R4
003B 9400              SUBB    A,#00H
003D A3                INC     DPTR
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 98  

003E F0                MOVX    @DPTR,A
003F A3                INC     DPTR
0040 CE                XCH     A,R6
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2052
0042 7BFF              MOV     R3,#0FFH
0044 7A00        R     MOV     R2,#HIGH ?SC_491
0046 7900        R     MOV     R1,#LOW ?SC_491
0048 E4                CLR     A
0049 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
004C F0                MOVX    @DPTR,A
004D A3                INC     DPTR
004E F0                MOVX    @DPTR,A
004F ED                MOV     A,R5
0050 24FF              ADD     A,#0FFH
0052 FE                MOV     R6,A
0053 EC                MOV     A,R4
0054 34FF              ADDC    A,#0FFH
0056 120000      R     LCALL   L?0374
0059 FF                MOV     R7,A
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C 900000      E     MOV     DPTR,#?_Printf?BYTE+07H
005F CF                XCH     A,R7
0060 F0                MOVX    @DPTR,A
0061 A3                INC     DPTR
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
0064 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 2053
0067 900000      R     MOV     DPTR,#start
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F 7D0F              MOV     R5,#0FH
0071 120000      R     LCALL   _FOsdRamSetAddrAttr
                                           ; SOURCE LINE # 2054
0074 7F01              MOV     R7,#01H
0076 7E00              MOV     R6,#00H
0078 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 2055
;---- Variable 'w_cnt' assigned to Register 'R5' ----
007B E4                CLR     A
007C FD                MOV     R5,A
                                           ; SOURCE LINE # 2056
007D 900000      R     MOV     DPTR,#addr
0080 F0                MOVX    @DPTR,A
0081 A3                INC     DPTR
0082 F0                MOVX    @DPTR,A
0083         ?C0183:
0083 900000      R     MOV     DPTR,#next
0086 E0                MOVX    A,@DPTR
0087 FA                MOV     R2,A
0088 A3                INC     DPTR
0089 E0                MOVX    A,@DPTR
008A FB                MOV     R3,A
008B 900000      R     MOV     DPTR,#addr
008E E0                MOVX    A,@DPTR
008F FE                MOV     R6,A
0090 A3                INC     DPTR
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 99  

0091 E0                MOVX    A,@DPTR
0092 FF                MOV     R7,A
0093 C3                CLR     C
0094 9B                SUBB    A,R3
0095 EE                MOV     A,R6
0096 9A                SUBB    A,R2
0097 501D              JNC     ?C0184
                                           ; SOURCE LINE # 2057
0099 120000      R     LCALL   _FOsdRamSetData
                                           ; SOURCE LINE # 2058
009C 0D                INC     R5
                                           ; SOURCE LINE # 2059
009D ED                MOV     A,R5
009E B40408            CJNE    A,#04H,?C0185
                                           ; SOURCE LINE # 2060
00A1 E4                CLR     A
00A2 FD                MOV     R5,A
                                           ; SOURCE LINE # 2061
00A3 7F01              MOV     R7,#01H
00A5 FE                MOV     R6,A
00A6 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 2062
                                           ; SOURCE LINE # 2063
00A9         ?C0185:
00A9 900000      R     MOV     DPTR,#addr+01H
00AC E0                MOVX    A,@DPTR
00AD 04                INC     A
00AE F0                MOVX    @DPTR,A
00AF 70D2              JNZ     ?C0183
00B1 120000      R     LCALL   L?0376
00B4         ?C0225:
00B4 80CD              SJMP    ?C0183
00B6         ?C0184:
                                           ; SOURCE LINE # 2064
00B6 E4                CLR     A
00B7 FB                MOV     R3,A
00B8 FA                MOV     R2,A
00B9 FD                MOV     R5,A
00BA FC                MOV     R4,A
00BB FF                MOV     R7,A
                                           ; SOURCE LINE # 2065
00BC 120000      R     LCALL   L?0353
00BF 4004              JC      ?C0187
00C1 7D10              MOV     R5,#010H
00C3 8002              SJMP    ?C0188
00C5         ?C0187:
00C5 AD07              MOV     R5,AR7
00C7         ?C0188:
00C7 120000      R     LCALL   L?0292
00CA 6004              JZ      ?C0189
00CC 7E01              MOV     R6,#01H
00CE 8002              SJMP    ?C0190
00D0         ?C0189:
00D0 7E00              MOV     R6,#00H
00D2         ?C0190:
00D2 EE                MOV     A,R6
00D3 2F                ADD     A,R7
00D4 FB                MOV     R3,A
00D5 E4                CLR     A
00D6 FF                MOV     R7,A
00D7 120000      R     LCALL   _FOsdWinScreenWH
00DA 900000      R     MOV     DPTR,#size
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 100 

00DD E0                MOVX    A,@DPTR
00DE C4                SWAP    A
00DF F8                MOV     R0,A
00E0 54F0              ANL     A,#0F0H
00E2 C8                XCH     A,R0
00E3 68                XRL     A,R0
00E4 FE                MOV     R6,A
00E5 A3                INC     DPTR
00E6 E0                MOVX    A,@DPTR
00E7 C4                SWAP    A
00E8 540F              ANL     A,#0FH
00EA 48                ORL     A,R0
00EB 2401              ADD     A,#01H
00ED FF                MOV     R7,A
00EE E4                CLR     A
00EF 3E                ADDC    A,R6
00F0 FE                MOV     R6,A
00F1 900000      R     MOV     DPTR,#FontOsdInfo+011H
00F4 E0                MOVX    A,@DPTR
00F5 120000      R     LCALL   L?0318
00F8 EF                MOV     A,R7
00F9 240A              ADD     A,#0AH
00FB FF                MOV     R7,A
00FC E4                CLR     A
00FD 3E                ADDC    A,R6
00FE 900000      R     MOV     DPTR,#Y
0101 F0                MOVX    @DPTR,A
0102 A3                INC     DPTR
0103 EF                MOV     A,R7
0104 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2066
0105 E4                CLR     A
0106 FB                MOV     R3,A
0107 7D01              MOV     R5,#01H
0109 FF                MOV     R7,A
010A 120000      R     LCALL   _FOsdWinZoom
                                           ; SOURCE LINE # 2067
010D E4                CLR     A
010E FF                MOV     R7,A
                                           ; SOURCE LINE # 2068
010F 120000      R     LCALL   L?0322
0112 E4                CLR     A
0113 FF                MOV     R7,A
0114 120000      R     LCALL   _FOsdWinSetOsdRamStartAddr
                                           ; SOURCE LINE # 2069
0117 7D01              MOV     R5,#01H
0119 E4                CLR     A
011A FF                MOV     R7,A
011B 120000      R     LCALL   _FOsdWinEnable
                                           ; SOURCE LINE # 2072
011E 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2073
0120 120000      R     LCALL   L?0321
0123 A3                INC     DPTR
0124 EF                MOV     A,R7
0125 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2074
0126 900000      R     MOV     DPTR,#FontOsdInfo+016H
                                           ; SOURCE LINE # 2075
0129 120000      R     LCALL   L?0350
012C A3                INC     DPTR
012D F0                MOVX    @DPTR,A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 101 

012E EF                MOV     A,R7
                                           ; SOURCE LINE # 2076
012F 120000      R     LCALL   L?0375
0132 C3                CLR     C
0133 13                RRC     A
0134 F0                MOVX    @DPTR,A
0135 A3                INC     DPTR
0136 E0                MOVX    A,@DPTR
0137 13                RRC     A
0138 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2077
0139 7A00        R     MOV     R2,#HIGH ?SC_521
013B 7900        R     MOV     R1,#LOW ?SC_521
                                           ; SOURCE LINE # 2078
013D 120000      R     LCALL   L?0279
0140 7D09              MOV     R5,#09H
                                           ; SOURCE LINE # 2079
0142 120000      R     LCALL   L?0300
0145         ?C0191:
0145 120000      R     LCALL   L?0312
0148 5018              JNC     ?C0192
                                           ; SOURCE LINE # 2080
014A 120000      R     LCALL   L?0324
                                           ; SOURCE LINE # 2081
014D 7F09              MOV     R7,#09H
                                           ; SOURCE LINE # 2082
                                           ; SOURCE LINE # 2083
                                           ; SOURCE LINE # 2084
                                           ; SOURCE LINE # 2085
014F 120000      R     LCALL   L?0285
0152 7003              JNZ     ?C0226
0154 120000      R     LCALL   L?0376
0157         ?C0226:
0157 900000      R     MOV     DPTR,#dat+01H
015A E0                MOVX    A,@DPTR
015B 2402              ADD     A,#02H
015D 120000      R     LCALL   L?0369
0160 80E3              SJMP    ?C0191
0162         ?C0192:
                                           ; SOURCE LINE # 2086
0162 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2087
0164 120000      R     LCALL   L?0286
0167 4004              JC      ?C0194
0169 7D10              MOV     R5,#010H
016B 8002              SJMP    ?C0195
016D         ?C0194:
016D AD07              MOV     R5,AR7
016F         ?C0195:
016F 120000      R     LCALL   L?0292
0172 6004              JZ      ?C0196
0174 7E01              MOV     R6,#01H
0176 8002              SJMP    ?C0197
0178         ?C0196:
0178 7E00              MOV     R6,#00H
017A         ?C0197:
017A EE                MOV     A,R6
017B 2F                ADD     A,R7
017C 7F01              MOV     R7,#01H
017E 120000      R     LCALL   L?0284
                                           ; SOURCE LINE # 2088
0181 120000      R     LCALL   L?0351
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 102 

0184 7F01              MOV     R7,#01H
0186 120000      R     LCALL   _FOsdWinZoom
                                           ; SOURCE LINE # 2089
0189 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2090
018B 120000      R     LCALL   L?0322
018E 7F01              MOV     R7,#01H
0190 120000      R     LCALL   _FOsdWinSetOsdRamStartAddr
                                           ; SOURCE LINE # 2091
0193 7D01              MOV     R5,#01H
0195 7F01              MOV     R7,#01H
0197 120000      R     LCALL   _FOsdWinEnable
                                           ; SOURCE LINE # 2094
019A 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 2095
019C 120000      R     LCALL   L?0321
019F A3                INC     DPTR
01A0 EF                MOV     A,R7
01A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2096
01A2 900000      R     MOV     DPTR,#FontOsdInfo+018H
                                           ; SOURCE LINE # 2097
01A5 120000      R     LCALL   L?0350
01A8 FE                MOV     R6,A
01A9 A3                INC     DPTR
01AA F0                MOVX    @DPTR,A
01AB A3                INC     DPTR
01AC EF                MOV     A,R7
01AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2098
01AE 7C00              MOV     R4,#00H
01B0 7D03              MOV     R5,#03H
01B2 120000      E     LCALL   ?C?UIDIV
01B5 900000      R     MOV     DPTR,#size
01B8 EE                MOV     A,R6
01B9 F0                MOVX    @DPTR,A
01BA A3                INC     DPTR
01BB EF                MOV     A,R7
01BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2099
01BD 7BFF              MOV     R3,#0FFH
01BF 7A00        R     MOV     R2,#HIGH ?SC_551
01C1 7900        R     MOV     R1,#LOW ?SC_551
01C3 900000      R     MOV     DPTR,#start
01C6 E0                MOVX    A,@DPTR
01C7 FD                MOV     R5,A
01C8 A3                INC     DPTR
01C9 E0                MOVX    A,@DPTR
01CA 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
01CD CD                XCH     A,R5
01CE F0                MOVX    @DPTR,A
01CF A3                INC     DPTR
01D0 ED                MOV     A,R5
01D1 F0                MOVX    @DPTR,A
01D2 900000      R     MOV     DPTR,#next
01D5 E0                MOVX    A,@DPTR
01D6 FD                MOV     R5,A
01D7 A3                INC     DPTR
01D8 E0                MOVX    A,@DPTR
01D9 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
01DC CD                XCH     A,R5
01DD F0                MOVX    @DPTR,A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 103 

01DE A3                INC     DPTR
01DF ED                MOV     A,R5
01E0 F0                MOVX    @DPTR,A
01E1 A3                INC     DPTR
01E2 EE                MOV     A,R6
01E3 F0                MOVX    @DPTR,A
01E4 A3                INC     DPTR
01E5 EF                MOV     A,R7
01E6 F0                MOVX    @DPTR,A
01E7 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 2100
01EA E4                CLR     A
01EB FF                MOV     R7,A
01EC 120000      R     LCALL   _FOsdRamSetWriteMode
                                           ; SOURCE LINE # 2101
01EF 120000      R     LCALL   L?0301
01F2         ?C0198:
01F2 120000      R     LCALL   L?0312
01F5 5018              JNC     ?C0199
                                           ; SOURCE LINE # 2102
01F7 120000      R     LCALL   L?0324
                                           ; SOURCE LINE # 2103
01FA 7F0A              MOV     R7,#0AH
                                           ; SOURCE LINE # 2104
                                           ; SOURCE LINE # 2105
                                           ; SOURCE LINE # 2106
                                           ; SOURCE LINE # 2107
01FC 120000      R     LCALL   L?0285
01FF 7003              JNZ     ?C0227
0201 120000      R     LCALL   L?0377
0204         ?C0227:
0204 900000      R     MOV     DPTR,#dat+01H
0207 E0                MOVX    A,@DPTR
0208 2403              ADD     A,#03H
020A 120000      R     LCALL   L?0369
020D 80E3              SJMP    ?C0198
020F         ?C0199:
                                           ; SOURCE LINE # 2108
020F 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 2109
0211 120000      R     LCALL   L?0286
0214 4004              JC      ?C0201
0216 7D10              MOV     R5,#010H
0218 8002              SJMP    ?C0202
021A         ?C0201:
021A AD07              MOV     R5,AR7
021C         ?C0202:
021C 120000      R     LCALL   L?0293
021F 6004              JZ      ?C0203
0221 7E01              MOV     R6,#01H
0223 8002              SJMP    ?C0204
0225         ?C0203:
0225 7E00              MOV     R6,#00H
0227         ?C0204:
0227 EE                MOV     A,R6
0228 2F                ADD     A,R7
0229 7F02              MOV     R7,#02H
022B 120000      R     LCALL   L?0284
                                           ; SOURCE LINE # 2110
022E 120000      R     LCALL   L?0351
0231 7F02              MOV     R7,#02H
0233 120000      R     LCALL   _FOsdWinZoom
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 104 

                                           ; SOURCE LINE # 2111
0236 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 2112
0238 120000      R     LCALL   L?0323
023B 7F02              MOV     R7,#02H
023D 120000      R     LCALL   _FOsdWinSetOsdRamStartAddr
                                           ; SOURCE LINE # 2113
0240 7D01              MOV     R5,#01H
0242 7F02              MOV     R7,#02H
0244 120000      R     LCALL   _FOsdWinEnable
                                           ; SOURCE LINE # 2117
0247 7F03              MOV     R7,#03H
0249 120000      R     LCALL   _FOsdWinInit
                                           ; SOURCE LINE # 2118
024C 900000      R     MOV     DPTR,#next
024F E0                MOVX    A,@DPTR
0250 FE                MOV     R6,A
0251 A3                INC     DPTR
0252 E0                MOVX    A,@DPTR
0253 FF                MOV     R7,A
0254 900000      R     MOV     DPTR,#start
0257 EE                MOV     A,R6
0258 F0                MOVX    @DPTR,A
0259 FA                MOV     R2,A
025A A3                INC     DPTR
025B EF                MOV     A,R7
025C F0                MOVX    @DPTR,A
025D FB                MOV     R3,A
                                           ; SOURCE LINE # 2119
025E E500        E     MOV     A,regTW88+01H
0260 2451              ADD     A,#051H
0262 120000      R     LCALL   L?0260
0265 E0                MOVX    A,@DPTR
0266 547F              ANL     A,#07FH
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2120
0268 FD                MOV     R5,A
0269 7C00              MOV     R4,#00H
026B 7E28              MOV     R6,#028H
026D 7F00              MOV     R7,#00H
026F 120000      E     LCALL   ?C?UIDIV
0272 120000      R     LCALL   L?0364
                                           ; SOURCE LINE # 2121
0275 C3                CLR     C
0276 9B                SUBB    A,R3
0277 FE                MOV     R6,A
0278 EC                MOV     A,R4
0279 9A                SUBB    A,R2
                                           ; SOURCE LINE # 2122
027A 120000      R     LCALL   L?0374
027D FE                MOV     R6,A
027E A3                INC     DPTR
027F E0                MOVX    A,@DPTR
0280 7802              MOV     R0,#02H
0282         ?C0228:
0282 CE                XCH     A,R6
0283 C3                CLR     C
0284 13                RRC     A
0285 CE                XCH     A,R6
0286 13                RRC     A
0287 D8F9              DJNZ    R0,?C0228
0289 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 105 

028A EE                MOV     A,R6
028B 900000      R     MOV     DPTR,#size
028E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2123
028F 7A00        R     MOV     R2,#HIGH ?SC_581
0291 7900        R     MOV     R1,#LOW ?SC_581
                                           ; SOURCE LINE # 2124
0293 120000      R     LCALL   L?0279
0296 7D0C              MOV     R5,#0CH
                                           ; SOURCE LINE # 2125
0298 120000      R     LCALL   L?0300
029B         ?C0205:
029B 120000      R     LCALL   L?0313
029E 5033              JNC     ?C0206
                                           ; SOURCE LINE # 2126
02A0 120000      R     LCALL   L?0325
                                           ; SOURCE LINE # 2127
02A3 7F0C              MOV     R7,#0CH
02A5 120000      R     LCALL   _FOsdRamSetAttr
                                           ; SOURCE LINE # 2128
02A8 120000      R     LCALL   L?0325
                                           ; SOURCE LINE # 2129
02AB 900000      R     MOV     DPTR,#dat
02AE E0                MOVX    A,@DPTR
02AF FE                MOV     R6,A
02B0 A3                INC     DPTR
02B1 E0                MOVX    A,@DPTR
02B2 FF                MOV     R7,A
02B3 120000      R     LCALL   _FOsdRamSetData
                                           ; SOURCE LINE # 2130
02B6 7F01              MOV     R7,#01H
02B8 7E00              MOV     R6,#00H
02BA 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 2131
02BD 900000      R     MOV     DPTR,#addr+01H
02C0 E0                MOVX    A,@DPTR
02C1 04                INC     A
02C2 F0                MOVX    @DPTR,A
02C3 7003              JNZ     ?C0229
02C5 120000      R     LCALL   L?0377
02C8         ?C0229:
02C8 900000      R     MOV     DPTR,#dat+01H
02CB E0                MOVX    A,@DPTR
02CC 2404              ADD     A,#04H
02CE 120000      R     LCALL   L?0370
02D1 80C8              SJMP    ?C0205
02D3         ?C0206:
                                           ; SOURCE LINE # 2132
02D3 900000      R     MOV     DPTR,#Y
02D6 E0                MOVX    A,@DPTR
02D7 FA                MOV     R2,A
02D8 A3                INC     DPTR
02D9 E0                MOVX    A,@DPTR
02DA FB                MOV     R3,A
02DB E4                CLR     A
02DC FD                MOV     R5,A
02DD FC                MOV     R4,A
02DE 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 2133
02E0 120000      R     LCALL   L?0353
02E3 4004              JC      ?C0208
02E5 7D10              MOV     R5,#010H
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 106 

02E7 8002              SJMP    ?C0209
02E9         ?C0208:
02E9 AD07              MOV     R5,AR7
02EB         ?C0209:
02EB 120000      R     LCALL   L?0293
02EE 6004              JZ      ?C0210
02F0 7E01              MOV     R6,#01H
02F2 8002              SJMP    ?C0211
02F4         ?C0210:
02F4 7E00              MOV     R6,#00H
02F6         ?C0211:
02F6 EE                MOV     A,R6
02F7 2F                ADD     A,R7
02F8 FB                MOV     R3,A
02F9 7F03              MOV     R7,#03H
02FB 120000      R     LCALL   _FOsdWinScreenWH
                                           ; SOURCE LINE # 2134
02FE 7B03              MOV     R3,#03H
0300 7D02              MOV     R5,#02H
0302 7F03              MOV     R7,#03H
0304 120000      R     LCALL   _FOsdWinZoom
                                           ; SOURCE LINE # 2135
0307 1D                DEC     R5
0308 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 2136
030A 120000      R     LCALL   L?0323
030D 7F03              MOV     R7,#03H
030F 120000      R     LCALL   _FOsdWinSetOsdRamStartAddr
                                           ; SOURCE LINE # 2137
0312 7D01              MOV     R5,#01H
0314 7F03              MOV     R7,#03H
0316 020000      R     LJMP    _FOsdWinEnable
                                           ; SOURCE LINE # 2138
0319         L?0279:
0319 7BFF              MOV     R3,#0FFH
031B 900000      R     MOV     DPTR,#start
031E E0                MOVX    A,@DPTR
031F FF                MOV     R7,A
0320 A3                INC     DPTR
0321 E0                MOVX    A,@DPTR
0322 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0325 CF                XCH     A,R7
0326 F0                MOVX    @DPTR,A
0327 A3                INC     DPTR
0328 EF                MOV     A,R7
0329 F0                MOVX    @DPTR,A
032A A3                INC     DPTR
032B EC                MOV     A,R4
032C F0                MOVX    @DPTR,A
032D A3                INC     DPTR
032E ED                MOV     A,R5
032F F0                MOVX    @DPTR,A
0330 900000      R     MOV     DPTR,#size
0333 E0                MOVX    A,@DPTR
0334 FF                MOV     R7,A
0335 A3                INC     DPTR
0336 E0                MOVX    A,@DPTR
0337 900000      E     MOV     DPTR,#?_Printf?BYTE+07H
033A CF                XCH     A,R7
033B F0                MOVX    @DPTR,A
033C A3                INC     DPTR
033D EF                MOV     A,R7
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 107 

033E F0                MOVX    @DPTR,A
033F 120000      E     LCALL   _Printf
0342 900000      R     MOV     DPTR,#start
0345 E0                MOVX    A,@DPTR
0346 FE                MOV     R6,A
0347 A3                INC     DPTR
0348 E0                MOVX    A,@DPTR
0349 FF                MOV     R7,A
034A 22                RET     
034B         L?0284:
034B FB                MOV     R3,A
034C 120000      R     LCALL   _FOsdWinScreenWH
034F 900000      R     MOV     DPTR,#size
0352 E0                MOVX    A,@DPTR
0353 C4                SWAP    A
0354 F8                MOV     R0,A
0355 54F0              ANL     A,#0F0H
0357 C8                XCH     A,R0
0358 68                XRL     A,R0
0359 FE                MOV     R6,A
035A A3                INC     DPTR
035B E0                MOVX    A,@DPTR
035C C4                SWAP    A
035D 540F              ANL     A,#0FH
035F 48                ORL     A,R0
0360 2401              ADD     A,#01H
0362 FF                MOV     R7,A
0363 E4                CLR     A
0364 3E                ADDC    A,R6
0365 FE                MOV     R6,A
0366 900000      R     MOV     DPTR,#FontOsdInfo+011H
0369 E0                MOVX    A,@DPTR
036A FD                MOV     R5,A
036B 7C00              MOV     R4,#00H
036D 120000      E     LCALL   ?C?IMUL
0370 EF                MOV     A,R7
0371 240A              ADD     A,#0AH
0373 FF                MOV     R7,A
0374 E4                CLR     A
0375 3E                ADDC    A,R6
0376 22                RET     
0377         L?0285:
0377 120000      R     LCALL   _FOsdRamSetAttr
037A 900000      R     MOV     DPTR,#addr
037D E0                MOVX    A,@DPTR
037E FE                MOV     R6,A
037F A3                INC     DPTR
0380 E0                MOVX    A,@DPTR
0381 FF                MOV     R7,A
0382 120000      R     LCALL   _FOsdRamSetAddress
0385 900000      R     MOV     DPTR,#dat
0388 E0                MOVX    A,@DPTR
0389 FE                MOV     R6,A
038A A3                INC     DPTR
038B E0                MOVX    A,@DPTR
038C FF                MOV     R7,A
038D 120000      R     LCALL   _FOsdRamSetData
0390 7F01              MOV     R7,#01H
0392 7E00              MOV     R6,#00H
0394 120000      E     LCALL   _delay1ms
0397 900000      R     MOV     DPTR,#addr+01H
039A E0                MOVX    A,@DPTR
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 108 

039B 04                INC     A
039C F0                MOVX    @DPTR,A
039D 22                RET     
039E         L?0286:
039E 900000      R     MOV     DPTR,#Y
03A1 E0                MOVX    A,@DPTR
03A2 FA                MOV     R2,A
03A3 A3                INC     DPTR
03A4 E0                MOVX    A,@DPTR
03A5 FB                MOV     R3,A
03A6 E4                CLR     A
03A7 FD                MOV     R5,A
03A8 FC                MOV     R4,A
03A9 120000      R     LCALL   _FOsdWinScreenXY
03AC 900000      R     MOV     DPTR,#size
03AF E0                MOVX    A,@DPTR
03B0 FE                MOV     R6,A
03B1 A3                INC     DPTR
03B2 E0                MOVX    A,@DPTR
03B3 FF                MOV     R7,A
03B4 C3                CLR     C
03B5 9410              SUBB    A,#010H
03B7 EE                MOV     A,R6
03B8 9400              SUBB    A,#00H
03BA 22                RET     
03BB         L?0321:
03BB 120000      R     LCALL   _FOsdWinInit
03BE 900000      R     MOV     DPTR,#next
03C1 E0                MOVX    A,@DPTR
03C2 FE                MOV     R6,A
03C3 A3                INC     DPTR
03C4 E0                MOVX    A,@DPTR
03C5 FF                MOV     R7,A
03C6 900000      R     MOV     DPTR,#start
03C9 EE                MOV     A,R6
03CA F0                MOVX    @DPTR,A
03CB 22                RET     
03CC         L?0353:
03CC 120000      R     LCALL   _FOsdWinScreenXY
03CF 900000      R     MOV     DPTR,#size
03D2 E0                MOVX    A,@DPTR
03D3 FE                MOV     R6,A
03D4 A3                INC     DPTR
03D5 E0                MOVX    A,@DPTR
03D6 FF                MOV     R7,A
03D7 C3                CLR     C
03D8 9410              SUBB    A,#010H
03DA EE                MOV     A,R6
03DB 9400              SUBB    A,#00H
03DD 22                RET     
             ; FUNCTION DumpFont (END)

C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 109 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


BPP3_alpha_value . . . . . . . . . . .  PUBLIC   CODE   ARRAY    02EBH  8
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
default_font . . . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  25
FOsdSetInputMainString2FOsdMsgBuff . .  PUBLIC   CODE   PROC     0000H  -----
_FOsdSetDefPaletteColor. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_FOsdRamSetAddress . . . . . . . . . .  PUBLIC   CODE   PROC     0008H  -----
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
_FOsdWinSetBpp3Alpha . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  base_lut . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
_FOsdWinAlphaPixel . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  lut. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  alpha. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
menu_fitem_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  winno. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  osdram . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  zoom_h . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  zoom_v . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  BPP1Color. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  BPP3_palette . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  BPP3_color . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
menu_fitem_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  15
  winno. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  osdram . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  zoom_h . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  zoom_v . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  BPP1Color. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  BPP3_palette . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  BPP3_color . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
FOsdDefPaletteBpp3Alpha. . . . . . . .  PUBLIC   CODE   ARRAY    02BBH  8
_FOsdRamClearAll . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  attr . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_FontInfoByNum . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  FontMode . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_FOsdSetFontWidthHeight. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  width. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  height . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
menu_page_info_s . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  focus. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  select . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 110 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  item_start . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  item_total . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  items. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  texts. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0008H  3
consolas16x26_graynum. . . . . . . . .  EXTERN   CODE   STRUCT   -----  25
menu_page_info_t . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  11
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  focus. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  select . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  item_start . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  item_total . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  items. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  texts. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0008H  3
FOsdMsgBuff. . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  40
menu_sitem_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  23
  osd_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  p. . . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  align. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  image. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
  image1 . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
  image_type . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  lut. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  up . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  down . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0016H  1
menu_sitem_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  23
  osd_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  p. . . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  align. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  image. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
  image1 . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
  image_type . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  lut. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  up . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  down . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0016H  1
RLE2_HEADER. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  id . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  op_bmpbits . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  rledata_cnt. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  LUT_format . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  LUT_colors . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
_FOsdWinScreenWH . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 111 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  w. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  h. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
BPP3_alpha_lut_offset. . . . . . . . .  PUBLIC   XDATA  ARRAY    0000H  8
FontOsdInfo_s. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  75
  font . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  31
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    001FH  -----
_FOsdIndexMsgPrint . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
_delay1ms. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FOsdWinSetOsdRamStartAddr . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  addr . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  index. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_FontInfo. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  start. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  font . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  wptr . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0006H  3
FOsdDefPaletteBpp2 . . . . . . . . . .  PUBLIC   CODE   ARRAY    02A3H  8
FOsdDefPaletteBpp3 . . . . . . . . . .  PUBLIC   CODE   ARRAY    02ABH  16
FontWinInfo_s. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  osdram . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  sx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  sy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  column . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  line . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  bpp1_attr. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
fosd_menu_item_s . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  12
  ram. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  zoom . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  ch_space_low . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  color. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  alpha_value. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  alpha_color_index. . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  reserved9. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  reserved10 . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  reserved11 . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
FOsdDefPaletteBpp4 . . . . . . . . . .  PUBLIC   CODE   ARRAY    02C3H  32
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DumpFont . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  start. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  next . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  dat. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  addr . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0008H  2
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  w_cnt. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  Y. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000AH  2
_FOsdInitBpp3AlphaTable. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fCalculate . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 112 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  j. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  k. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  Y. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  value. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  alpha_table_Y. . . . . . . . . . . .  AUTO     XDATA  ARRAY    0004H  16
_SpiFlashDmaRead . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MenuGetLevel . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FOsdWinInit . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
_FOsdWinScreenXY . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  x. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  y. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_PCMODEDATA. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  han. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  van. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  vfreq. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  htotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  vtotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  hsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  vsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  offseth. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0010H  2
  offsetv. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0012H  2
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  dummy2 . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  dummy3 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0018H  1
_GetInputMainString. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  p_itoa_buff. . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  InputMainIndex . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_FOsdRamSetData. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_FOsdFontSetFifo . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fOn. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
GetInputMain . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FOsdBlinkOnOff. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fOn. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
menu_image_header_s. . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  lut_loc. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  image_loc. . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  bpp. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  lut_size . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
menu_image_header_t. . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  17
  lut_loc. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 113 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  image_loc. . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  bpp. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  lut_size . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
DumpFontInfo . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_InitFontRamByNum. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  FontMode . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  start. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
_TWstrcat. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_McuSpiClkToPclk . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FOsdRamSetFifo. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fOn. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  vdelay . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
_FOsdWinZoom . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  zoomH. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  zoomV. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
FOsdSetDeValue . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  HDE. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  PCLKO. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  Mixing . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
_TWstrlen. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FOsdOnOff . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fOnOff . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  vdelay . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  value. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
FontOsdInfo. . . . . . . . . . . . . .  PUBLIC   XDATA  STRUCT   0008H  75
_FOsdWinMulticolor . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  en . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  index. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
_FOsdWinToggleEnable . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_InitFontRam . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dest_font_index. . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  font . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  sName. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0005H  3
  value. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
SPIIMAGE . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  top. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  bottom . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
_FOsdRamSetWriteMode . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fMode. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 114 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
_TWstrcpy. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FOsdDownloadFontByDMA . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dest_loc . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  src_loc. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0002H  4
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
FOsdWinOffAll. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
_FOsdCopyMsgBuff2Osdram. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fOn. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  len. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  columns. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  attr . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  osdram . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
FontOsdInit. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  columns. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  lines. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
SLIDEIMAGE . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
_WaitVBlank. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
McuSpiClkRestore . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FOsdRamSetAddrAttr. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  OsdRamAddr . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
  attr . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
consolas16x26_606C90 . . . . . . . . .  EXTERN   CODE   STRUCT   -----  25
_FOsdDumpPalette . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  palette_group. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
FOSDWinBase. . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    02E3H  8
_dPrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FOsdRamSetAttr. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  attr . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_ePrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
regTW88. . . . . . . . . . . . . . . .  EXTERN   DATA   PTR      -----  2
MY_SLIDEIMAGE. . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  10
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  lut_size . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0006H  4
kor_font . . . . . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  25
FONT_SPI_INFO_s. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 115 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


image_info_s . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
FONT_SPI_INFO_t. . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
image_info_t . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
_FOsdWinEnable . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  en . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  index. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
FOsdHwDefPaletteBpp1 . . . . . . . . .  PUBLIC   CODE   ARRAY    0263H  32
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
_FOsdRamWriteByteStr . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  len. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  w_count. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
_FOsdSetPaletteColor . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  start. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  color. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  vdelay . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  r30c . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
FOsdSwDefPaletteBpp1 . . . . . . . . .  PUBLIC   CODE   ARRAY    0283H  32
_TestInitFontRam . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_FOsdSetPaletteColorArray. . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  array. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0001H  3
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  vdelay . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  r30c . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MY_RLE_INFO. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  5
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
C51 COMPILER V9.00   OSDFONT                                                               06/05/2014 15:35:00 PAGE 116 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
image_item_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  9
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  info . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  alpha. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
_FOsdSetAccessMode . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fType. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
FontInfo_s . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  31
  name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  16
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0011H  1
  bpp. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0012H  1
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0014H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0018H  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    001AH  2
  bpp2_attr. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   001CH  1
  bpp3_attr. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   001DH  1
  bpp4_attr. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   001EH  1
image_item_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  info . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  alpha. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
_ReplaceFontRam. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dest_font_index. . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  font . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  sName. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0005H  3
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5914    ----
   CONSTANT SIZE    =    755    ----
   XDATA SIZE       =     83     131
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
