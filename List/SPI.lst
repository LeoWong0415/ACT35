C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN .\Output\SPI.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE SPI.c LARGE OPTIMIZE(9,SPEED) REGFILE(.\Output\TW8835_REV31.ORC) BROWSE MOD
                    -DP2 DEFINE(EVB_30,EVB_31,nullFn=//) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\List\SPI.lst) OBJECT(.\Output\SPI.obj)

line level    source

   1          /**
   2           * @file
   3           * SPI.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *      Copyright (C) 2011~2012 Intersil Corporation
   8           * @section DESCRIPTION
   9           *      a device driver for the spi-bus interface 
  10           ******************************************************************************
  11           */
  12          #include "Config.h"
  13          #include "reg.h"
  14          #include "typedefs.h"
  15          #include "TW8835.h"
  16          
  17          #include "global.h"
  18          #include "printf.h"
  19          #include "CPU.h"
  20          #include "util.h"
  21          
  22          #include "I2C.h"
  23          #include "SPI.h"
  24          #include "host.h"
  25          
  26          
  27          //----------------- SPI Mode Definition ---------------------
  28          
  29          
  30          XDATA BYTE SPI_Buffer[SPI_BUFFER_SIZE];
  31          
  32          BYTE SPICMD_x_READ              = 0x03;
  33          BYTE SPICMD_x_BYTES                     = 5;
  34          BYTE SpiFlashVendor;
  35          
  36          //-----------------------------------------------
  37          //internal prototype
  38          //-----------------------------------------------
  39          void SpiFlashCmd2(BYTE cmd1, BYTE cmd2);
  40          void SpiFlashCmd3(BYTE cmd1, BYTE cmd2, BYTE cmd3);
  41          
  42          BYTE EE_CheckMoveDoneBank(BYTE block, BYTE bank);
  43          void EE_WriteBlock(BYTE block, BYTE *buf, BYTE *mask);
  44          void EE_WriteMoveDone(BYTE block,BYTE bank);
  45          BYTE EE_CheckBlankBank(BYTE block, BYTE bank);
  46          static void EE_ReadBlock(BYTE block, BYTE *buf, BYTE *mask);
  47          BYTE EE_CleanBlock(BYTE block, BYTE fSkipErase);
  48          
  49          #if 0
              void SpiFlashSetReadMode(BYTE mode)
              {
                      WriteTW88(REG4C0, (ReadTW88(REG4C0) & ~0x07) | mode);
              }
              BYTE SpiFlashGetReadMode(void)
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 2   

              {
                      return(ReadTW88(REG4C0) & 0x07);
              }
              #endif
  59          
  60          
  61          #ifndef MODEL_TW8835_MASTER
  62          //-----------------------------------------------------------------------------
  63          /**
  64          * stop SpiFlashDMA
  65          *
  66          */
  67          void SpiFlashDmaStop(void)
  68          {
  69   1      #ifdef MODEL_TW8835_EXTI2C
              //skip
              #else
  72   1              WriteTW88Page(PAGE4_SPI);
  73   1              //if(ReadTW88(REG4C4) & 0x01)
  74   1              //      Printf("\nLINE:%d DMA STOP at BUSY",__LINE__);
  75   1      
  76   1              WriteTW88(REG4C4, 0);
  77   1      #endif
  78   1      }
  79          #endif
  80          
  81          
  82          //-----------------------------------------------------------------------------
  83          /**
  84          * set read cmd that depend on the read mode
  85          *
  86          * same as 
  87          * SpiFlashDmaDestType(dest,0); 
  88          * SpiFlashCmd(SPICMD_x_READ, BYTE SPICMD_x_BYTES);
  89          * 
  90          */
  91          #ifndef MODEL_TW8835_MASTER
  92          void SpiFlashCmdRead(BYTE dest)
  93          {
  94   1              WriteTW88(REG4C3, dest << 6 | SPICMD_x_BYTES);
  95   1              WriteTW88(REG4CA, SPICMD_x_READ);
  96   1      }
  97          #endif
  98          
  99          //-----------------------------------------------------------------------------
 100          /**
 101          * set DMA destination
 102          *
 103          * need SpiFlashSetCmdLength()
 104          */
 105          void SpiFlashDmaDestType(BYTE dest, BYTE access_mode)
 106          {
 107   1              BYTE dat;
 108   1              dat = ReadTW88(REG4C3) & 0x0F;
 109   1              dat |= (dest << 6);
 110   1              dat |= (access_mode << 4);
 111   1              WriteTW88(REG4C3, dat);
 112   1      }
 113          
 114          //-----------------------------------------------------------------------------
 115          /**
 116          * set DMA Length
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 3   

 117          */
 118          void SpiFlashSetCmdLength(BYTE len)
 119          {
 120   1              WriteTW88(REG4C3, (ReadTW88(REG4C3) & 0xF0) | len);
 121   1      }
 122          
 123          //-----------------------------------------------------------------------------
 124          /**
 125          * wait until DMA start flag is cleared.
 126          *
 127          * SpiFlashDmaStart() call it.
 128          * If DMA was a read, we can not use a busy flag.
 129          * So, FW checks the start bit that is a self clear bit.
 130          * 
 131          * R4C4[0] : start command execution. Self cleared.
 132          */
 133          static BYTE SpiFlashDmaWait(BYTE wait, BYTE delay, WORD call_line)
 134          {
 135   1              BYTE i;
 136   1              volatile BYTE vdata;
 137   1              //------------------------
 138   1              //FYI:Assume it is a Page4
 139   1              //WriteTW88Page(4);
 140   1              //------------------------
 141   1              for(i=0; i < wait; i++) {
 142   2                      vdata = ReadTW88(REG4C4);
 143   2                      if((vdata & 0x01)==0)   //check a self clear bit
 144   2                              break;
 145   2                      if(delay)
 146   2                              delay1ms(delay);
 147   2              }
 148   1              if(i==wait) {
 149   2                      Printf("\nSpiFlashDmaWait DMA Busy. LINE:%d",call_line);
 150   2                      return ERR_FAIL;
 151   2              }
 152   1              return ERR_SUCCESS;
 153   1      }
 154          
 155          //-----------------------------------------------------------------------------
 156          /**
 157          * start SpiFlashDMA
 158          *
 159          * use REG4C1[0]=1 on ExtI2C mode.
 160          * see REG4C1[0]: At Vertical Blank
 161          *
 162          * @param fWrite
 163          *       - 0:read, 1:write
 164          * @param fBusy
 165          *       busy check. see REG4D8 and REG4D9. So, only works with a write mode
 166          * @param call_line for debug
 167          */
 168          void SpiFlashDmaStart(BYTE fWrite, BYTE fBusy, WORD call_line)
 169          {
 170   1              BYTE dat;
 171   1      
 172   1              dat = 0x01;                                     //start
 173   1              if(fWrite)      dat |= 0x02;    //write
 174   1              if(fBusy)       dat |= 0x04;    //busy
 175   1      
 176   1              WriteTW88Page(4);
 177   1              WriteTW88(REG4C4, dat);
 178   1              SpiFlashDmaWait(200,1,call_line);
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 4   

 179   1      }
 180          
 181          
 182          //-----------------------------------------------------------------------------
 183          /**
 184          * assign SpiFlashDMA buffer address
 185          */
 186          void SpiFlashDmaBuffAddr(WORD addr)
 187          {
 188   1              WriteTW88(REG4C6, (BYTE)(addr >> 8));   //page
 189   1              WriteTW88(REG4C7, (BYTE)addr);                  //index
 190   1      }
 191          #if defined(MODEL_TW8836_MASTER)
              void I2cSpiFlashDmaBuffAddr(WORD addr)
              {
                      WriteTW88(REG4F6, (BYTE)(addr >> 8));   //page
                      WriteTW88(REG4F7, (BYTE)addr);                  //index
              }
              #endif
 198          
 199          
 200          //-----------------------------------------------------------------------------
 201          /**
 202          * assign the read length
 203          */
 204          void SpiFlashDmaReadLen(DWORD len)
 205          {
 206   1              WriteTW88(REG4DA, len>>16 );
 207   1              WriteTW88(REG4C8, len>>8 );
 208   1              WriteTW88(REG4C9, len );
 209   1      }
 210          //-----------------------------------------------------------------------------
 211          /**
 212          * assign the read length (only low byte)
 213          */
 214          void SpiFlashDmaReadLenByte(BYTE len_l)
 215          {
 216   1              WriteTW88(REG4C9, len_l );
 217   1      }
 218          #if defined(MODEL_TW8836_MASTER)
              void I2cSpiFlashDmaReadLen(DWORD len)
              {
                      WriteTW88(REG4F5, len>>16 );
                      WriteTW88(REG4F8, len>>8 );
                      WriteTW88(REG4F9, len );
              }
              void I2cSpiFlashDmaReadLenByte(BYTE len_l)
              {
                      WriteTW88(REG4F9, len_l );
              }
              #endif
 230          
 231          
 232          //-----------------------------------------------------------------------------
 233          /**
 234          * assign command and command length
 235          *
 236          *       register
 237          *       R4CA - DMA Command buffer1
 238          *       R4CB - DMA Command buffer2
 239          *       R4CC - DMA Command buffer3
 240          *       R4CD - DMA Command buffer4
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 5   

 241          *       R4CE - DMA Command buffer5
 242          *       REG4C3[3:0] - Command write byte count
 243          
 244          * @see SpiFlashSetCmdLength
 245          */
 246          void SpiFlashCmd(BYTE cmd, BYTE cmd_len)
 247          {
 248   1              WriteTW88(REG4CA, cmd);
 249   1              SpiFlashSetCmdLength(cmd_len);
 250   1      }
 251          
 252          //-----------------------------------------------------------------------------
 253          /**
 254          * assign two commands
 255          *
 256          * @see SpiFlashCmd
 257          */
 258          static void SpiFlashCmd2(BYTE cmd1, BYTE cmd2)
 259          {
 260   1              WriteTW88(REG4CA, cmd1);
 261   1              WriteTW88(REG4CB, cmd2);
 262   1              SpiFlashSetCmdLength(2);
 263   1      }
 264          //-----------------------------------------------------------------------------
 265          /**
 266          * assign three commands
 267          *
 268          * @see SpiFlashCmd
 269          */
 270          static void SpiFlashCmd3(BYTE cmd1, BYTE cmd2, BYTE cmd3)
 271          {
 272   1              WriteTW88(REG4CA, cmd1);
 273   1              WriteTW88(REG4CB, cmd2);
 274   1              WriteTW88(REG4CC, cmd3);
 275   1              SpiFlashSetCmdLength(3);
 276   1      }
 277          
 278          //-----------------------------------------------------------------------------
 279          /**
 280          * assign a flash address
 281          */
 282          void SpiFlashDmaFlashAddr(DWORD addr)
 283          {
 284   1              WriteTW88(REG4CB, (BYTE)(addr >> 16));
 285   1              WriteTW88(REG4CC, (BYTE)(addr >> 8));
 286   1              WriteTW88(REG4CD, (BYTE)(addr));
 287   1      }
 288          
 289          //-----------------------------------------------------------------------------
 290          /**
 291          * read SpiFlash
 292          *
 293          * @param dest_type
 294          *       DMA_DEST_FONTRAM,DMA_DEST_CHIPREG,DMA_DEST_SOSD_LUT,DMA_DEST_MCU_XMEM
 295          * @param dest_loc
 296          *       destination location. WORD
 297          * @param src_loc source location
 298          * @param size   size
 299          */
 300          void SpiFlashDmaRead(BYTE dest_type,WORD dest_loc, DWORD src_loc, WORD size)
 301          {
 302   1      //#ifdef MODEL_TW8835_EXTI2C
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 6   

 303   1      //      if(dest_type==DMA_DEST_MCU_XMEM) {
 304   1      //              //use 8 registers and copy to XMem
 305   1      //              SpiFlashDmaReadForXMem(dest_type, dest_loc, src_loc, size);
 306   1      //              return; 
 307   1      //      }
 308   1      //#endif
 309   1              WriteTW88Page(PAGE4_SPI);
 310   1              SpiFlashDmaDestType(dest_type,0);
 311   1              SpiFlashCmd(SPICMD_x_READ, SPICMD_x_BYTES);
 312   1              SpiFlashDmaFlashAddr(src_loc);
 313   1              SpiFlashDmaBuffAddr(dest_loc);
 314   1              SpiFlashDmaReadLen(size);                                               
 315   1              SpiFlashDmaStart(SPIDMA_READ, SPIDMA_BUSYCHECK, __LINE__);
 316   1      }
 317          void SpiFlashDmaRead2XMem(BYTE * dest_loc, DWORD src_loc, WORD size)
 318          {
 319   1      #ifdef MODEL_TW8835_EXTI2C
                      //if(dest_type==DMA_DEST_MCU_XMEM) {
                              //use 8 registers and copy to XMem
                              SpiFlashDmaReadForXMem(/*DMA_DEST_MCU_XMEM,*/ dest_loc, src_loc, size);
                              return; 
                      //}
              #endif
 326   1              WriteTW88Page(PAGE4_SPI);
 327   1              SpiFlashDmaDestType(DMA_DEST_MCU_XMEM,0);
 328   1              SpiFlashCmd(SPICMD_x_READ, SPICMD_x_BYTES);
 329   1              SpiFlashDmaFlashAddr(src_loc);
 330   1              SpiFlashDmaBuffAddr((WORD)dest_loc);
 331   1              SpiFlashDmaReadLen(size);                                               
 332   1              SpiFlashDmaStart(SPIDMA_READ, SPIDMA_BUSYCHECK, __LINE__);
 333   1      }
 334          
 335          
 336          
 337          //=============================================================================
 338          //
 339          //=============================================================================
 340          //-----------------------------------------------------------------------------
 341          /**
 342          * set SpiFlash ReadMode
 343          *
 344          * updata HW and, SPICMD_x_READ and SPICMD_x_BYTES.
 345          *
 346          * @param mode
 347          *       - 0: slow       CMD:0x03        BYTE:4
 348          *       - 1: fast       CMD:0x0B        BYTE:5
 349          *       - 2: dual       CMD:0x3B        BYTE:5
 350          *       - 3: quad       CMD:0x6B        BYTE:5
 351          *       - 4: Dualo      CMD:0xBB        BYTE:5
 352          *       - 5: QuadIo     CMD:0xEB        BYTE:7
 353          */
 354          void SPI_SetReadModeByRegister( BYTE mode )
 355          {
 356   1              WriteTW88Page(PAGE4_SPI);
 357   1              WriteTW88(REG4C0, (ReadTW88(REG4C0) & ~0x07) | mode);
 358   1      
 359   1              switch( mode ) {
 360   2                      case 0: //--- Slow
 361   2                              SPICMD_x_READ   = 0x03; 
 362   2                              SPICMD_x_BYTES  = 4;    //(8+24)/8
 363   2                              break;
 364   2                      case 1: //--- Fast
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 7   

 365   2                              SPICMD_x_READ   = 0x0b; 
 366   2                              SPICMD_x_BYTES  = 5;   //(8+24+8)/8. 8 dummy
 367   2                              break;
 368   2                      case 2: //--- Dual
 369   2                              SPICMD_x_READ   = 0x3b;
 370   2                              SPICMD_x_BYTES  = 5;
 371   2                              break;
 372   2                      case 3: //--- Quad
 373   2                              SPICMD_x_READ   = 0x6b; 
 374   2                              SPICMD_x_BYTES  = 5;
 375   2                              break;
 376   2                      case 4: //--- Dual-IO
 377   2                              SPICMD_x_READ   = 0xbb; 
 378   2                              SPICMD_x_BYTES  = 5;    //(8+12*2+4*2)/8. Note:*2 means 2 lines.
 379   2                              break;
 380   2                      case 5: //--- Quad-IO
 381   2                              SPICMD_x_READ   = 0xeb;  
 382   2                              SPICMD_x_BYTES  = 7;   //(8+6*4+2*4+4*4)/8. Note:*4 means 4 lines.
 383   2                              break;
 384   2              }
 385   1      }
 386          
 387          
 388          //=============================================================================
 389          /**
 390          * SPI Write Enable
 391          *
 392          * SPI Command = WRITE_ENABLE
 393          *
 394          *       #ifdef FAST_SPIFLASH
 395          *       WriteTW88Page(PAGE4_SPI );      // Set Page=4
 396          *       WriteTW88(REG4C3, 0x41 );       // Mode = command write, Len=1
 397          *       WriteTW88(REG4CA, 0x06 );       // SPI Command = WRITE_ENABLE
 398          *       WriteTW88(REG4C8, 0x00 );       // Read count
 399          *       WriteTW88(REG4C9, 0x00 );       // Read count
 400          *       WriteTW88(REG4C4, 0x03 );       // DMA-Write start
 401          *
 402          */
 403          void SPI_WriteEnable(void)
 404          {
 405   1              WriteTW88Page(PAGE4_SPI );
 406   1              SpiFlashDmaDestType(DMA_DEST_CHIPREG,0);
 407   1              SpiFlashCmd(SPICMD_WREN, 1);                            
 408   1              SpiFlashDmaReadLen(0);
 409   1              SpiFlashDmaStart(SPIDMA_WRITE,0, __LINE__);
 410   1      }
 411          //=============================================================================
 412          /**
 413          * SPI Sector Erase
 414          *
 415          * SPI Command = SECTOR_ERASE
 416          *
 417          *       #ifdef FAST_SPIFLASH
 418          *       WriteTW88(REG4C3, 0x44 );               // Mode = command write, Len=4
 419          *       WriteTW88(REG4CA, 0x20 );               // SPI Command = SECTOR_ERASE
 420          *       WriteTW88(REG4CB, spiaddr>>16); // SPI address
 421          *       WriteTW88(REG4CC, spiaddr>>8 ); // SPI address
 422          *       WriteTW88(REG4CD, spiaddr );    // SPI address
 423          *       WriteTW88(REG4C8, 0x00 );               // Read count
 424          *       WriteTW88(REG4C9, 0x00 );               // Read count
 425          *       WriteTW88(REG4C4, 0x07 );               // DMA-Write start, Busy check
 426          *       #endif
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 8   

 427          *
 428          * @see SPI_WriteEnable
 429          */
 430          void SPI_SectorErase( DWORD spiaddr )
 431          {
 432   1              //dPrintf("\nSPI_SectorErase %06lx",spiaddr);
 433   1      
 434   1              SPI_WriteEnable();
 435   1      
 436   1              WriteTW88Page(PAGE4_SPI);
 437   1              SpiFlashDmaDestType(DMA_DEST_CHIPREG,0);
 438   1              SpiFlashCmd(SPICMD_SE, 4);
 439   1              SpiFlashDmaFlashAddr(spiaddr);
 440   1              SpiFlashDmaReadLen(0);
 441   1              SpiFlashDmaStart(SPIDMA_WRITE,SPIDMA_BUSYCHECK, __LINE__);
 442   1      }
 443          
 444          //=============================================================================
 445          /**
 446          * SPI Block Erase
 447          *
 448          * SPI Command = BLOCK_ERASE
 449          *
 450          *       #ifdef FAST_SPIFLASH
 451          *       WriteTW88(REG4C3, 0x44 );               // Mode = command write, Len=4
 452          *       WriteTW88(REG4CA, 0xd8 );               // SPI Command = BLOCK_ERASE
 453          *       WriteTW88(REG4CB, spiaddr>>16); // SPI address
 454          *       WriteTW88(REG4CC, spiaddr>>8);  // SPI address
 455          *       WriteTW88(REG4CD, spiaddr );    // SPI address
 456          *       WriteTW88(REG4C8, 0x00 );               // Read count
 457          *       WriteTW88(REG4C9, 0x00 );               // Read count
 458          *       WriteTW88(REG4C4, 0x07 );               // DMA-Write start, Busy check
 459          *       #endif
 460          *
 461          * @see SPI_WriteEnable
 462          */
 463          void SPI_BlockErase( DWORD spiaddr )
 464          {
 465   1              SPI_WriteEnable();
 466   1      
 467   1              WriteTW88Page(PAGE4_SPI);
 468   1              SpiFlashDmaDestType(DMA_DEST_CHIPREG,0);
 469   1              SpiFlashCmd(SPICMD_BE, 4);
 470   1              SpiFlashDmaFlashAddr(spiaddr);
 471   1              SpiFlashDmaReadLen(0);
 472   1              SpiFlashDmaStart(SPIDMA_WRITE,SPIDMA_BUSYCHECK, __LINE__);
 473   1      }
 474          
 475          //=============================================================================
 476          /**
 477          * SPI PageProgram
 478          *
 479          * SPI Command = PAGE_PROGRAM
 480          *
 481          *       #ifdef FAST_SPIFLASH
 482          *       WriteTW88(REG4C3, (DMA_DEST_MCU_XMEM << 6) | 4 );       // Mode = xdata, Len=4
 483          *       WriteTW88(REG4CA, SPICMD_PP );                          // SPI Command = PAGE_PROGRAM
 484          *       WriteTW88(REG4CB, spiaddr>>16 );                        // SPI address
 485          *       WriteTW88(REG4CC, spiaddr>>8 );                         // SPI address
 486          *       WriteTW88(REG4CD, spiaddr );                            // SPI address
 487          *       WriteTW88(REG4C6, xaddr>>8 );                           // Buffer address
 488          *       WriteTW88(REG4C7, xaddr );                                      // Buffer address
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 9   

 489          *       WriteTW88(REG4C8, cnt>>8 );                                     // Write count
 490          *       WriteTW88(REG4C9, cnt );                                        // Write count
 491          *       WriteTW88(REG4C4, 0x07 );                                       // DMA-Write start, Busy check
 492          *       #endif
 493          *
 494          * @see SPI_WriteEnable
 495          */
 496          void SPI_PageProgram( DWORD spiaddr, WORD xaddr, WORD cnt )
 497          {
 498   1              SPI_WriteEnable();
 499   1      
 500   1              WriteTW88Page(PAGE4_SPI );
 501   1              SpiFlashDmaDestType(DMA_DEST_MCU_XMEM,0);
 502   1              SpiFlashCmd(SPICMD_PP, 4);
 503   1              SpiFlashDmaFlashAddr(spiaddr);
 504   1              SpiFlashDmaBuffAddr(xaddr);
 505   1              SpiFlashDmaReadLen(cnt);
 506   1              SpiFlashDmaStart(SPIDMA_WRITE,SPIDMA_BUSYCHECK, __LINE__);
 507   1      }
 508          
 509          //=============================================================================
 510          /**
 511          * init QuadIO mode for MICRON chip
 512          *
 513          * dummy cycle
 514          * FAST_READ             Read Data Bytes at Higher Speed                 0x0B    8
 515          * DOFR                  Dual Output Fast Read                                   0x3B    8
 516          * DIOFR                 Dual Input/Output Fast Read                             0xBB    8
 517          * QOFR                  Quad Output Fast Read                                   0x6B    8
 518          * QIOFR                 Quad Input/Output Fast Read                             0xEB    10
 519          * ROTP                  Read OTP(Read of OTP area)                              0x4B    8
 520          */
 521          static void SPI_QuadInit_MICRON(void)
 522          {
 523   1              BYTE temp;
 524   1              //BYTE dat0;
 525   1      
 526   1              SpiFlashCmd(SPICMD_RDVREG, 1);  //cmd, read Volatile register
 527   1              SpiFlashDmaReadLenByte(1);
 528   1              SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
 529   1              temp = SPIDMA_READDATA(0);
 530   1              Printf("\nVolatile Register: %02bx", temp );
 531   1              if ( temp != 0x6B ) {
 532   2                      SpiFlashCmd(SPICMD_WREN, 1);
 533   2                      SpiFlashDmaReadLenByte(0);
 534   2                      SpiFlashDmaStart(SPIDMA_WRITE,0, __LINE__);
 535   2      
 536   2                      SpiFlashCmd2(SPICMD_WDVREG, 0x6B);              // cmd, write Volatile. set 6 dummy cycles
 537   2                      SpiFlashDmaReadLenByte(0);
 538   2                      SpiFlashDmaStart(SPIDMA_WRITE,1, __LINE__);
 539   2                      Puts("\nVolatile 6 dummy SET" );
 540   2      
 541   2                      SpiFlashCmd(SPICMD_WRDI, 1);
 542   2                      SpiFlashDmaReadLenByte(0);
 543   2                      SpiFlashDmaStart(SPIDMA_WRITE,0, __LINE__);
 544   2              }
 545   1      #if 0
                      // set non-Volatile
                      SpiFlashCmd(SPICMD_RDNVREG, 1); //cmd, read Non-Volatile register
                      SpiFlashDmaReadLenByte(2);
                      SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
                      dat0 = SPIDMA_READDATA(0);
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 10  

                      temp = SPIDMA_READDATA(1);
                      Printf("\nNon-Volatile Register: %02bx, %02bx", dat0, temp );
                      if ( temp != 0x6F ) {
                              SpiFlashCmd(SPICMD_WREN, 1);
                              SpiFlashDmaReadLenByte(0);
                              SpiFlashDmaStart(SPIDMA_WRITE,0, __LINE__);
              
                              SpiFlashCmd3(SPICMD_WDNVREG, 0xFF,0x6F);        // cmd, write Non-Volatile. B7~B0, B15~B8, set 6 dummy cycles
                              SpiFlashDmaReadLenByte(0);
                              SpiFlashDmaStart(SPIDMA_WRITE,1, __LINE__);
                              Puts("\nnon-Volatile 6 dummy SET" );
              
                              SpiFlashCmd(SPICMD_WRDI, 1);
                              SpiFlashDmaReadLenByte(0);
                              SpiFlashDmaStart(SPIDMA_WRITE,0, __LINE__);
                      }
              #endif
 568   1      }
 569          
 570          //=============================================================================
 571          /**
 572          * Init QuadIO mode
 573          *
 574          * @return
 575          *       0: fail or MX. default
 576          *       1: EON
 577          */      
 578          BYTE SPI_QUADInit(void)
 579          {
 580   1              BYTE dat0;
 581   1              //BYTE dat1;
 582   1              BYTE vid;
 583   1              BYTE cid;
 584   1              BYTE ret;
 585   1              BYTE temp;
 586   1                                                               
 587   1              WriteTW88Page(4);                                                
 588   1              SpiFlashDmaDestType(DMA_DEST_CHIPREG, 0);
 589   1              SpiFlashDmaBuffAddr(DMA_BUFF_REG_ADDR);
 590   1              SpiFlashDmaReadLen(0);  //clear high & middle bytes 
 591   1              SpiFlashCmd(SPICMD_RDID, 1);    
 592   1              SpiFlashDmaReadLenByte(3);
 593   1              SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
 594   1              vid  = ReadTW88(REG4D0);        //SPIDMA_READDATA(0);
 595   1              dat0 = ReadTW88(REG4D1);        //SPIDMA_READDATA(1);
 596   1              cid  = ReadTW88(REG4D2);        //SPIDMA_READDATA(2);
 597   1      
 598   1              Printf("\n\tSPI JEDEC ID: %02bx %02bx %02bx", vid, dat0, cid );
 599   1      
 600   1              if(vid == 0x1C)                 ret = SFLASH_VENDOR_EON;
 601   1              else if(vid == 0xC2)    ret = SFLASH_VENDOR_MX; 
 602   1              else if(vid == 0xEF)    ret = SFLASH_VENDOR_WB;
 603   1              //N25Q128: 0x20 0xBA 0x18
 604   1              else if(vid == 0x20)    ret = SFLASH_VENDOR_MICRON; //numonyx
 605   1              else {
 606   2                      Printf(" UNKNOWN SPIFLASH !!");
 607   2                      return 0;
 608   2              }
 609   1      
 610   1              if(ret==SFLASH_VENDOR_MICRON && cid==0x18) {
 611   2                      SPI_QuadInit_MICRON();
 612   2                      return ret;
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 11  

 613   2              }
 614   1      
 615   1              //----------------------------
 616   1              //read status register
 617   1              //----------------------------
 618   1      
 619   1              if (vid == 0xC2 || vid == 0x1c) {                                                       //C2:MX 1C:EON
 620   2                      SpiFlashCmd(SPICMD_RDSR, 1);
 621   2                      SpiFlashDmaReadLenByte(1);
 622   2                      SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
 623   2                      dat0 = SPIDMA_READDATA(0);
 624   2                      temp = dat0 & 0x40;     //if 0, need to enable quad
 625   2              }
 626   1              else if (vid == 0xEF) {                                 // WB
 627   2                      //if(cid == 0x18) {                             //Q128 case different status read command
 628   2                              SpiFlashCmd(SPICMD_RDSR2, 1);
 629   2                              SpiFlashDmaReadLenByte(1);
 630   2                              SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
 631   2                              dat0 = SPIDMA_READDATA(0);
 632   2                              dPrintf("\nStatus2 before QUAD: %02bx", dat0);
 633   2                              temp = dat0;                                                                      //dat0[1]:QE
 634   2                      //}
 635   2                      //else {
 636   2                      //      SpiFlashCmd(SPICMD_RDSR, 1);
 637   2                      //      SpiFlashDmaReadLenByte(2);
 638   2                      //      SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
 639   2                      //      dat0 = SPIDMA_READDATA(0);
 640   2                      //      dat1 = SPIDMA_READDATA(1);
 641   2                      //      dPrintf("\nStatus before QUAD: %02bx, %02bx", dat0, dat1 );     
 642   2                      //      temp = dat1;
 643   2                      //}
 644   2              }
 645   1      
 646   1              if(temp)
 647   1                      return ret;
 648   1      
 649   1              //----------------------------
 650   1              // enable quad
 651   1              //----------------------------
 652   1              Puts("\nEnable quad mode" );
 653   1              if (vid == 0xC2 || vid == 0x1c) {
 654   2                      SpiFlashCmd(SPICMD_WREN, 1);
 655   2                      SpiFlashDmaReadLenByte(0);
 656   2                      SpiFlashDmaStart(SPIDMA_WRITE,0, __LINE__);
 657   2      
 658   2      #ifdef DEBUG_SPIFLASH   
                              SpiFlashCmd(SPICMD_RDSR, 1);
                              SpiFlashDmaReadLenByte(1);
                              SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
                              dat0 = SPIDMA_READDATA(0);
                              Printf("\nStatus after Write enable %02bx", dat0 );
              #endif  
 665   2                      SpiFlashCmd2(SPICMD_WRSR,0x40);         //en QAUD mode
 666   2                      SpiFlashDmaReadLenByte(0);
 667   2                      SpiFlashDmaStart(SPIDMA_WRITE,1, __LINE__);     // start + write + busycheck
 668   2      
 669   2                      Puts("\nQUAD ENABLED" );
 670   2              
 671   2      #ifdef DEBUG_SPIFLASH   
                              SpiFlashCmd(SPICMD_RDSR, 1);
                              SpiFlashDmaReadLenByte(1);
                              SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 12  

                              dat0 = SPIDMA_READDATA(0);
                              Printf("\nStatus after QUAD enable %02bx", dat0 );
              #endif
 678   2                              
 679   2                      SpiFlashCmd(SPICMD_WRDI, 1);
 680   2                      SpiFlashDmaReadLenByte(0);
 681   2                      SpiFlashDmaStart(SPIDMA_WRITE,0, __LINE__);
 682   2              }
 683   1              else if(vid == 0xEF) {
 684   2                      SpiFlashCmd(SPICMD_WREN, 1);
 685   2                      SpiFlashDmaReadLenByte(0);
 686   2                      SpiFlashDmaStart(SPIDMA_WRITE,0, __LINE__);
 687   2      
 688   2                      SpiFlashCmd3(SPICMD_WRSR, 0x00, 0x02);  //cmd, en QAUD mode
 689   2                      SpiFlashDmaStart(SPIDMA_WRITE,1, __LINE__);             // start 7 busycheck
 690   2      
 691   2                      dPuts("\nQUAD ENABLED" );
 692   2      #ifdef DEBUG_SPIFLASH
                              //if(cid == 0x18) {                             //Q128 case different status read command
                                      SpiFlashCmd(SPICMD_RDSR2, 1);
                                      SpiFlashDmaReadLenByte(1);
                                      SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
                                      dat0 = SPIDMA_READDATA(0);
                                      dPrintf("\nStatus2 before QUAD: %02bx", dat0);
                              //}
                              //else {
                              //      SpiFlashCmd(SPICMD_RDSR, 1);
                              //      SpiFlashDmaReadLenByte(2);
                              //      SpiFlashDmaStart(SPIDMA_READ,0, __LINE__);
                              //      dat0 = SPIDMA_READDATA(0);
                              //      dat1 = SPIDMA_READDATA(1);
                              //      dPrintf("\nStatus before QUAD: %02bx, %02bx", dat0, dat1 );     
                              //}
              #endif
 709   2                      SpiFlashCmd(SPICMD_WRDI, 1);
 710   2                      SpiFlashDmaReadLenByte(0);
 711   2                      SpiFlashDmaStart(SPIDMA_WRITE,0, __LINE__);
 712   2              }
 713   1              return 0;
 714   1      }
 715          
 716          
 717          
 718          //*****************************************************************************
 719          //
 720          //              EEPROM Emulation
 721          //
 722          // NOTE: It uses a Host function. If it is not a EXTI2C, these will be renamed as,
 723          //
 724          //      SpiFlashHostCmdRead     => SpiFlashCmdRead
 725          //      SpiFlashHostDmaDestType => SpiFlashDmaDestType
 726          //      SpiFlashHostDmaRead     => SpiFlashDmaRead
 727          //      SPIHost_WriteEnable             => SPI_WriteEnable
 728          //      SPIHost_SectorErase             => SPI_SectorErase
 729          //      SPIHost_PageProgram             => SPI_PageProgram
 730          //
 731          //*****************************************************************************
 732          //              Format: For each 4 bytes [Index] [Index^FF] [Data] [Data^FF]
 733          //
 734          //
 735          
 736          #ifdef USE_SFLASH_EEPROM                //=============================================
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 13  

 737          
 738          BYTE EE_CurrBank[EE_BLOCKS];
 739          WORD EE_WritePos[EE_BLOCKS];
 740          BYTE EE_buf[EE_INDEX_PER_BLOCK];
 741          BYTE EE_mask[(EE_INDEX_PER_BLOCK+7)/8];
 742          
 743          //-----------------------------------------------------------------------------
 744          /**
 745          * print current E3PROM information
 746          */
 747          void EE_PrintCurrInfo(void)
 748          {
 749   1              BYTE block;
 750   1              DWORD sector_addr;
 751   1      
 752   1              for(block=0; block<EE_BLOCKS; block++) {
 753   2                      sector_addr = EE_SPI_SECTOR0 + SPI_SECTOR_SIZE*((DWORD)block*EE_SPI_BANKS+EE_CurrBank[block]);
 754   2                      Printf("\n\tBlock:%bx Bank%bx WritePos:%x Sector:%06lx", 
 755   2                              block, EE_CurrBank[block],
 756   2                              EE_WritePos[block],
 757   2                              sector_addr
 758   2                              );
 759   2              }
 760   1      }
 761          
 762          //=============================================================================
 763          /**
 764          * format E3PROM
 765          */
 766          void EE_Format(void)
 767          {
 768   1              BYTE  block,j;
 769   1              DWORD spi_addr;
 770   1      
 771   1              dPrintf("\nEE_Format start");
 772   1      
 773   1              //select the default SPI mode
 774   1              WriteHostPage(PAGE4_SPI);
 775   1              //..    
 776   1      
 777   1              for(block=0; block<EE_BLOCKS; block++) {
 778   2                      spi_addr = EE_SPI_SECTOR0 + SPI_SECTOR_SIZE*(DWORD)block*EE_SPI_BANKS;
 779   2                      for(j=0; j < EE_SPI_BANKS; j++) {
 780   3                              SPIHost_SectorErase( spi_addr );        //sameas SPI_SectorErase( spi_addr );
 781   3                              spi_addr += SPI_SECTOR_SIZE;
 782   3                      }
 783   2                      EE_CurrBank[block] = 0;
 784   2                      EE_WritePos[block] = 0;
 785   2              }
 786   1      
 787   1              dPrintf("\nEE_Format end - please call 'EE find'");
 788   1      }
 789          
 790          //=============================================================================
 791          /**
 792          * read E3PROM
 793          *
 794          *       read eeprom index data
 795          *       Work only on current bank.
 796          * @return
 797          *       indexed eeprom data.
 798          *       if no data, return 0.
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 14  

 799          */
 800          BYTE EE_Read(WORD index)
 801          {
 802   1              int i; //NOTE
 803   1              BYTE block;
 804   1              BYTE sindex;    //sub index
 805   1              DWORD sector_addr;
 806   1              WORD remain;
 807   1              BYTE read_cnt;
 808   1      
 809   1              block  = index / EE_INDEX_PER_BLOCK;
 810   1              sindex = index % EE_INDEX_PER_BLOCK;            //index in block. max 0xFF
 811   1              sector_addr = EE_SPI_SECTOR0 + ((DWORD)block*EE_SPI_BANKS + EE_CurrBank[block]) * SPI_SECTOR_SIZE;
 812   1      
 813   1              remain = EE_WritePos[block];
 814   1              while( remain ) {
 815   2                      if( remain >= EE_BUF_SIZE ) read_cnt = EE_BUF_SIZE;
 816   2                      else                        read_cnt = remain;
 817   2      #ifdef MODEL_TW8835_EXTI2C
                              SpiFlashHostDmaRead2XMem(SPI_Buffer, sector_addr+remain-read_cnt, read_cnt);    //sameas SpiFlashDmaRead
              #else
 820   2                      SpiFlashDmaRead2XMem(SPI_Buffer, sector_addr+remain-read_cnt, read_cnt);        //sameas SpiFlashDmaRead
 821   2      #endif
 822   2      
 823   2                      remain -= read_cnt;
 824   2      
 825   2                      for(i=read_cnt-4; i>=0; i-=4) {
 826   3                              if(     SPI_Buffer[i] != sindex )
 827   3                                      continue;
 828   3                              if( ((SPI_Buffer[i]+SPI_Buffer[i+1])==0xff) && ((SPI_Buffer[i+2]+SPI_Buffer[i+3])==0xff) )
 829   3                                      return SPI_Buffer[i+2];
 830   3                      }
 831   2              }
 832   1      
 833   1              ePrintf("\nCannot find EEPROM index %x data in block%bx bank%bx", index, block,EE_CurrBank[block]);
 834   1      
 835   1              return 0;
 836   1      }
 837          
 838          
 839          //=============================================================================
 840          /**
 841          * write E3PROM
 842          *
 843          *       write index & data with index+^index+data+^data format
 844          */
 845          void EE_Write(WORD index, BYTE dat)
 846          {
 847   1              BYTE block;
 848   1              BYTE sindex;
 849   1              DWORD sector_addr;
 850   1              BYTE ret;
 851   1      
 852   1              block = index / EE_INDEX_PER_BLOCK;
 853   1              sindex = index % EE_INDEX_PER_BLOCK;            //index in block. max 0xFF
 854   1      
 855   1              if(EE_WritePos[block] >= SPI_SECTOR_SIZE) {
 856   2                      ret=EE_CleanBlock(block, 1);
 857   2                      //BKFYI: EE_CurrBank[block] & EE_WritePos[block] will be updated.
 858   2                      if(ret) {
 859   3                              wPrintf("\nWarning:");
 860   3                              if(ret & 0xF0) wPrintf("BankMove ");
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 15  

 861   3                              if(ret & 0x0F) wPrintf("SectorErase ");
 862   3                              wPrintf(" in EE_Write");
 863   3                      }
 864   2              }
 865   1              sector_addr = EE_SPI_SECTOR0 + ((DWORD)block*EE_SPI_BANKS + EE_CurrBank[block]) * SPI_SECTOR_SIZE;
 866   1      
 867   1              //----- Write data
 868   1              SPI_Buffer[0] = (BYTE)sindex;
 869   1              SPI_Buffer[1] = 0xff^(BYTE)sindex;
 870   1              SPI_Buffer[2] = dat;
 871   1              SPI_Buffer[3] = 0xff^dat;
 872   1              SPIHost_PageProgram( sector_addr + EE_WritePos[block], (WORD)SPI_Buffer, 4L ); //same SPI_PageProgram
 873   1      
 874   1              EE_WritePos[block] += 4;
 875   1      }
 876          
 877          
 878          
 879          
 880          //=============================================================================
 881          /**
 882          * find E3PROM information
 883          *
 884          * Find EE_CurrBank[] and EE_WritePos[] per block.
 885          * method 3. you can use all blank sector
 886          * @return
 887          *       0:OK.
 888          *       1:Found broken banks. Need repair.
 889          */
 890          BYTE EE_FindCurrInfo(void)              
 891          {
 892   1              BYTE i, j, k;
 893   1              DWORD sector_addr;
 894   1              BYTE ret;
 895   1      
 896   1              ePrintf("\nEE_FindCurrInfo");
 897   1              ePrintf(" %06lx~%06lx",EE_SPI_SECTOR0, EE_SPI_SECTOR0 + (DWORD)SPI_SECTOR_SIZE * EE_SPI_BANKS * EE_BLOCKS
             - -1);
 898   1      
 899   1              ret = 0;
 900   1              //----- Check EEPROM corruption -------------------------
 901   1              //
 902   1              //
 903   1      
 904   1              //----- Find EE_CurrBank and EE_WritePos -------------
 905   1      
 906   1              for(i=0; i<EE_BLOCKS; i++) {
 907   2                      //
 908   2                      //get EE_CurrBank[]
 909   2                      //
 910   2                      EE_CurrBank[i] = EE_SPI_BANKS;  //start from garbage.
 911   2                      for(j=0; j < EE_SPI_BANKS; j++) {
 912   3                              sector_addr = EE_SPI_SECTOR0 + SPI_SECTOR_SIZE*((DWORD)i*EE_SPI_BANKS+j);
 913   3      #ifdef MODEL_TW8835_EXTI2C
                                      SpiFlashHostDmaRead2XMem(SPI_Buffer, sector_addr, 4L); //same SpiFlashDmaRead
              #else
 916   3                              SpiFlashDmaRead2XMem(SPI_Buffer, sector_addr, 4L); //same SpiFlashDmaRead
 917   3      #endif
 918   3      
 919   3                              //check Blank Bank
 920   3                              if((SPI_Buffer[0]==0xFF)                
 921   3                              && (SPI_Buffer[1]==0xFF)                
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 16  

 922   3                              && (SPI_Buffer[2]==0xFF)                
 923   3                              && (SPI_Buffer[3]==0xFF) ) {    
 924   4                                      //If you already have a used bank, stop here.
 925   4                                      //If it is a first blank bank after used one, stop here.
 926   4                                      if(EE_CurrBank[i] != EE_SPI_BANKS)
 927   4                                              break;
 928   4                                      //keep search
 929   4                              }
 930   3                              else {
 931   4                                      //found used bank, keep update bank number.
 932   4                                      //EE_CurrBank[i] = j;
 933   4                                      //continue check.       
 934   4                                      
 935   4                                      //check MoveDone flag at end of secotr.
 936   4                                      //sector_addr = EE_SPI_SECTOR0 + SPI_SECTOR_SIZE*((DWORD)i*EE_SPI_BANKS+j);
 937   4      #ifdef MODEL_TW8835_EXTI2C
                                              SpiFlashHostDmaRead2XMem(SPI_Buffer, sector_addr + SPI_SECTOR_SIZE-4, 4L); //same SpiFlashDmaRead
              #else
 940   4                                      SpiFlashDmaRead2XMem(SPI_Buffer, sector_addr + SPI_SECTOR_SIZE-4, 4L); //same SpiFlashDmaRead
 941   4      #endif
 942   4      
 943   4                                      if((SPI_Buffer[0]==0x00)                
 944   4                                      && (SPI_Buffer[1]==0x00)                
 945   4                                      && (SPI_Buffer[2]==0x00)                
 946   4                                      && (SPI_Buffer[3]==0x00) ) {
 947   5                                              //found MoveDone bank
 948   5                                              ; //skip this bank      
 949   5                                      }
 950   4                                      else {
 951   5                                              if(EE_CurrBank[i] != EE_SPI_BANKS) {
 952   6                                                      //we found two used banks, maybe it is a broken bank.
 953   6                                                      //But, we will use this broken bank.
 954   6                                                      //and, I am sure, this broken bank have a small items.(less then 64)
 955   6                                                      //so, we don't need to clean it yet.
 956   6                                                      wPrintf("\nFound broken bank at block%bx. %bx and %bx", i, EE_CurrBank[i],j);
 957   6                                                      ret = 1 << i;   //found broken
 958   6                                              }
 959   5                                              if(EE_CurrBank[i]==0 && j==(EE_SPI_BANKS-1)) {
 960   6                                                      //bank0 is a corrent one. do not update bank3(last bank)
 961   6                                                      ;
 962   6                                              } 
 963   5                                              else {
 964   6                                                      EE_CurrBank[i] = j;
 965   6                                              }
 966   5                                      }
 967   4                              }        
 968   3                      }
 969   2                      //if no used bank, start from 0.
 970   2                      if(EE_CurrBank[i] == EE_SPI_BANKS)
 971   2                              EE_CurrBank[i]=0;
 972   2                              
 973   2                      //      
 974   2                      //get EE_WritePos[]
 975   2                      //
 976   2                      sector_addr = EE_SPI_SECTOR0 + SPI_SECTOR_SIZE*(EE_SPI_BANKS*(DWORD)i+EE_CurrBank[i]);
 977   2                      for(j=0; j<SPI_SECTOR_SIZE/EE_BUF_SIZE; j++) {
 978   3      #ifdef MODEL_TW8835_EXTI2C
                                      SpiFlashHostDmaRead2XMem(SPI_Buffer, sector_addr + j * EE_BUF_SIZE, EE_BUF_SIZE); //same SpiFlashDmaRea
             -d
              #else
 981   3                              SpiFlashDmaRead2XMem(SPI_Buffer, sector_addr + j * EE_BUF_SIZE, EE_BUF_SIZE); //same SpiFlashDmaRead
 982   3      #endif
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 17  

 983   3      
 984   3                              EE_WritePos[i] = SPI_SECTOR_SIZE;
 985   3                              for(k=0; k<EE_BUF_SIZE; k+=4) {
 986   4                                      if( SPI_Buffer[k]==0xff && SPI_Buffer[k+1]==0xff ) {
 987   5                                              EE_WritePos[i] = j*EE_BUF_SIZE + k;
 988   5                                              j=254; //next will be 0xFF, the max BYTE number. So, we can stop.
 989   5                                              break;
 990   5                                      }
 991   4                              }
 992   3                      }
 993   2              }
 994   1      
 995   1              EE_PrintCurrInfo();
 996   1      
 997   1              if(ret)
 998   1                      wPrintf("\ntype EE repair");
 999   1      
1000   1              return ret;
1001   1      }
1002          
1003          //=============================================================================
1004          //
1005          //=============================================================================
1006          /* read E3PROM Block
1007          *
1008          *       Read index+data on buff[]
1009          *       each block have max 64 index+data pair. 
1010          *       each block have max 1024 items(4*1024 / 4).
1011          *       this function gather the valid 64 index+data pairs on current bank. 
1012          *
1013          * note: buf[] size have to be EE_INDEX_PER_BLOCK
1014          *      mask[] size have to be (EE_INDEX_PER_BLOCK/8)
1015          *
1016          * if we have a item, the bitmap mask will have a "1".
1017          * if we donot have a item, the bitmap mask will have a "0".
1018          */
1019          static void EE_ReadBlock(BYTE block, BYTE *buf, BYTE *mask)
1020          {
1021   1              BYTE i, j, ch0, ch1, ch2, ch3;
1022   1              DWORD sector_addr;
1023   1              WORD remain;
1024   1              BYTE read_cnt;
1025   1      
1026   1              //clear buffer and mask bitmap
1027   1              for(i=0; i < EE_INDEX_PER_BLOCK; i++)
1028   1                      buf[i]=0x00;
1029   1              for(i=0; i < ((EE_INDEX_PER_BLOCK+7)/8); i++)
1030   1                      mask[i]=0x00;
1031   1      
1032   1              sector_addr = EE_SPI_SECTOR0 + ((DWORD)block*EE_SPI_BANKS + EE_CurrBank[block]) * SPI_SECTOR_SIZE;
1033   1              remain = EE_WritePos[block];
1034   1      
1035   1              for(j=0; j<SPI_SECTOR_SIZE/EE_BUF_SIZE; j++) {
1036   2                      if(remain==0)
1037   2                              break;
1038   2                      if( remain >= EE_BUF_SIZE ) read_cnt = EE_BUF_SIZE;
1039   2                      else                        read_cnt = remain;
1040   2      
1041   2      #ifdef MODEL_TW8835_EXTI2C
                              SpiFlashHostDmaRead2XMem(SPI_Buffer, sector_addr + j * EE_BUF_SIZE, read_cnt); //same SpiFlashDmaRead
              #else
1044   2                      SpiFlashDmaRead2XMem(SPI_Buffer, sector_addr + j * EE_BUF_SIZE, read_cnt); //same SpiFlashDmaRead
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 18  

1045   2      #endif
1046   2      
1047   2                      remain -= read_cnt;
1048   2      
1049   2                      for(i=0; i<read_cnt; i+=4) {
1050   3                              ch0 = SPI_Buffer[i];            //index
1051   3                              ch1 = SPI_Buffer[i+1];          //^index
1052   3                              ch2 = SPI_Buffer[i+2];          //data
1053   3                              ch3 = SPI_Buffer[i+3];          //^data
1054   3      
1055   3                              if( ((ch0^ch1)==0xff) && ((ch2^ch3)==0xff) ) {
1056   4                                      mask[ch0>>3] |= (1 << (ch0 & 0x07));
1057   4                                      buf[ch0] = ch2;
1058   4                              }
1059   3                      }
1060   2              }
1061   1      }
1062          
1063          /**
1064          * fill the LostItems
1065          *
1066          *       fill out the lost item data from bank(other)
1067          *       If we already have a valid item, skip the update.
1068          */
1069          static void EE_FillLostItems(BYTE block, BYTE bank, BYTE *buf, BYTE *mask)
1070          {
1071   1              DWORD sector_addr;
1072   1              WORD remain;
1073   1              BYTE i, j;
1074   1              BYTE read_cnt;
1075   1              BYTE ch0,ch1,ch2,ch3;
1076   1      
1077   1              sector_addr = EE_SPI_SECTOR0 + ((DWORD)block*EE_SPI_BANKS + bank) * SPI_SECTOR_SIZE;
1078   1              remain = SPI_SECTOR_SIZE;
1079   1      
1080   1              for(j=0; j<SPI_SECTOR_SIZE/EE_BUF_SIZE; j++) {
1081   2                      if(remain==0)
1082   2                              break;
1083   2                      if( remain >= EE_BUF_SIZE ) read_cnt = EE_BUF_SIZE;
1084   2                      else                        read_cnt = remain;
1085   2      #ifdef MODEL_TW8835_EXTI2C
                              SpiFlashHostDmaRead2XMem(SPI_Buffer, sector_addr + j * EE_BUF_SIZE, read_cnt);  //sameas SpiFlashDmaRead
              #else
1088   2                      SpiFlashDmaRead2XMem(SPI_Buffer, sector_addr + j * EE_BUF_SIZE, read_cnt);      //sameas SpiFlashDmaRead
1089   2      #endif
1090   2      
1091   2                      remain -= read_cnt;
1092   2      
1093   2                      for(i=0; i<read_cnt; i+=4) {
1094   3                              ch0 = SPI_Buffer[i];            //index
1095   3                              ch1 = SPI_Buffer[i+1];          //^index
1096   3                              ch2 = SPI_Buffer[i+2];          //data
1097   3                              ch3 = SPI_Buffer[i+3];          //^data
1098   3      
1099   3                              if( ((ch0^ch1)==0xff) && ((ch2^ch3)==0xff) ) {
1100   4                                      //found valid item
1101   4      
1102   4                                      //now, check mask.
1103   4                                      if(mask[ch0>>3] & (1<<(ch0&0x07))) {
1104   5                                              //we already have a valid item. just skip.
1105   5                                      }
1106   4                                      else {
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 19  

1107   5                                              mask[ch0>>3] |= (1 << (ch0 & 0x07));
1108   5                                              buf[ch0] = ch2;
1109   5                                      }
1110   4                              }
1111   3                      }
1112   2              }
1113   1      }
1114          
1115          /**
1116          * write Block
1117          *
1118          * Used only in EE_MoveBank and EE_RepairMoveDone
1119          * so, I assume, we have enough space.
1120          */
1121          static void EE_WriteBlock(BYTE block, BYTE *buf, BYTE *mask)
1122          {
1123   1              DWORD sector_addr;
1124   1              BYTE idx;
1125   1              BYTE i, j;
1126   1              BYTE wptr,bptr;
1127   1      
1128   1      #ifdef DEBUG_SFLASH_EEPROM
                      dPrintf("\nEE_WriteBlock(%bd,,)",block);
              #endif
1131   1              sector_addr = EE_SPI_SECTOR0 + ((DWORD)block*EE_SPI_BANKS + EE_CurrBank[block]) * SPI_SECTOR_SIZE;
1132   1      
1133   1              //write buf to new bank.
1134   1              wptr=0;         //write pointer
1135   1              for(i=0; i<(EE_INDEX_PER_BLOCK*4) / SPI_BUFFER_SIZE; i++) {
1136   2                      bptr=0;         //SPI_Buffer pointer
1137   2                      for(j=0; j<SPI_BUFFER_SIZE/4; j++) {
1138   3                              idx = SPI_BUFFER_SIZE/4*i + j;
1139   3      
1140   3                              if(mask[idx>>3] & (1<<(idx&0x07))) {
1141   4                                      //found valid data
1142   4                                      SPI_Buffer[bptr++] = idx;
1143   4                                      SPI_Buffer[bptr++] = idx^0xff;
1144   4                                      SPI_Buffer[bptr++] = buf[idx];
1145   4                                      SPI_Buffer[bptr++] = buf[idx] ^ 0xFF;
1146   4                              }
1147   3                      }
1148   2                      if(bptr==0) {
1149   3      #ifdef DEBUG_SFLASH_EEPROM
                                      dPrintf("\n0byte. skip %bd",i);
              #endif
1152   3                              continue;
1153   3                      }
1154   2                      SPIHost_PageProgram( sector_addr + wptr, (WORD)SPI_Buffer, bptr );      //sameas SPI_PageProgram
1155   2                      wptr+= bptr;
1156   2              }
1157   1              EE_WritePos[block] = wptr;
1158   1      }
1159          
1160          
1161          /**
1162          * repair a broken bank
1163          *
1164          * If you found a broken bank, call it to repair.
1165          * After this routine, call the EE_CleanBank.
1166          * we assume, we have a enough space on current bank.  ===>WRONG
1167          * When we have a broken bank, the item number of current bank is alwasy less then 64.
1168          */
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 20  

1169          void EE_RepairMoveDone(void) //need new name
1170          {
1171   1              BYTE block;
1172   1              BYTE prev_bank;
1173   1              BYTE ret;
1174   1      
1175   1              dPrintf("\nEE_RepairBank");
1176   1      
1177   1              for(block=0; block < EE_SPI_BANKS; block++) {
1178   2                      dPrintf("\nblock%bx",block);
1179   2                      prev_bank = (EE_CurrBank[block] + EE_SPI_BANKS -1) % EE_SPI_BANKS;
1180   2                      ret = EE_CheckMoveDoneBank(block, prev_bank);
1181   2                      ret += EE_CheckBlankBank(block, prev_bank);
1182   2                      if(ret==0) {
1183   3                              dPrintf(" repair %bx->%bx", prev_bank, EE_CurrBank[block]); 
1184   3                              //prev_bank is not a MoveDone bank.
1185   3                              //we need a repair.
1186   3                              EE_ReadBlock(block, EE_buf, EE_mask);                                   //read items from current bank
1187   3                              EE_FillLostItems(block, prev_bank, EE_buf, EE_mask);    //read the lost items from prev bank
1188   3                              EE_WriteBlock(block, EE_buf, EE_mask);                          //update items.
1189   3                              EE_WriteMoveDone(block, prev_bank);
1190   3                      }
1191   2                      else {
1192   3                              dPrintf("->skip");
1193   3                      }
1194   2              }
1195   1      }
1196          
1197          /**
1198          * check a blank bank
1199          */
1200          static BYTE EE_CheckBlankBank(BYTE block, BYTE bank)
1201          {
1202   1              DWORD sector_addr;
1203   1              sector_addr = EE_SPI_SECTOR0 + ((DWORD)block*EE_SPI_BANKS + bank) * SPI_SECTOR_SIZE;
1204   1      
1205   1      #ifdef MODEL_TW8835_EXTI2C
                      SpiFlashHostDmaRead2XMem(SPI_Buffer, sector_addr, 4L); //same SpiFlashDmaRead
              #else
1208   1              SpiFlashDmaRead2XMem(SPI_Buffer, sector_addr, 4L); //same SpiFlashDmaRead
1209   1      #endif
1210   1      
1211   1              if( (SPI_Buffer[0]==0xff) && (SPI_Buffer[1]==0xff) && (SPI_Buffer[2]==0xff) && (SPI_Buffer[3]==0xff) )
1212   1                      return 1;        //TRUE
1213   1              return 0;
1214   1      }
1215          /**
1216          * check a MoveDone Bank
1217          */
1218          static BYTE EE_CheckMoveDoneBank(BYTE block, BYTE bank)
1219          {
1220   1              DWORD sector_addr;
1221   1              sector_addr = EE_SPI_SECTOR0 + ((DWORD)block*EE_SPI_BANKS + bank) * SPI_SECTOR_SIZE;
1222   1      
1223   1      #ifdef MODEL_TW8835_EXTI2C
                      SpiFlashHostDmaRead2XMem(SPI_Buffer, sector_addr + SPI_SECTOR_SIZE - 4, 4L); //same SpiFlashDmaRead
              #else
1226   1              SpiFlashDmaRead2XMem(SPI_Buffer, sector_addr + SPI_SECTOR_SIZE - 4, 4L); //same SpiFlashDmaRead
1227   1      #endif
1228   1      
1229   1              if( (SPI_Buffer[0]==0x00) && (SPI_Buffer[1]==0x00) && (SPI_Buffer[2]==0x00) && (SPI_Buffer[3]==0x00) )
1230   1                      return 1;       //TRUE
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 21  

1231   1              return 0;
1232   1      }
1233          
1234          /**
1235          * write MoveFone flag
1236          */
1237          static void EE_WriteMoveDone(BYTE block,BYTE bank)
1238          {
1239   1              DWORD sector_addr;
1240   1              sector_addr = EE_SPI_SECTOR0 + ((DWORD)block*EE_SPI_BANKS + bank) * SPI_SECTOR_SIZE;
1241   1      
1242   1              //mark it as done.
1243   1              SPI_Buffer[0] = 0;
1244   1              SPI_Buffer[1] = 0;
1245   1              SPI_Buffer[2] = 0;
1246   1              SPI_Buffer[3] = 0;
1247   1              SPIHost_PageProgram( sector_addr + SPI_SECTOR_SIZE - 4, (WORD)SPI_Buffer, 4L );
1248   1      }
1249          
1250          /**
1251          * move Bank
1252          *
1253          * @return
1254          *       1:SectorErase happen
1255          */
1256          static BYTE EE_MoveBank(BYTE block)
1257          {
1258   1              DWORD sector_addr;
1259   1              BYTE prev_bank;
1260   1              BYTE ret = 0;
1261   1      #ifdef DEBUG_SFLASH_EEPROM
                      dPrintf("\nEE_MoveBank block:%bd, bank:%bd WritePos:%d",block,EE_CurrBank[block], EE_WritePos[block]);
              #endif
1264   1      
1265   1              //read Block data to buf.
1266   1              EE_ReadBlock(block, EE_buf, EE_mask);
1267   1      
1268   1              //move to next bank
1269   1              prev_bank = EE_CurrBank[block];
1270   1              EE_CurrBank[block] = (EE_CurrBank[block] +1) % EE_SPI_BANKS;
1271   1              EE_WritePos[block] = 0;
1272   1      
1273   1              ret=EE_CheckBlankBank(block, EE_CurrBank[block]);
1274   1              if(ret==0) {
1275   2                      sector_addr = EE_SPI_SECTOR0 + ((DWORD)block*EE_SPI_BANKS + EE_CurrBank[block]) * SPI_SECTOR_SIZE;
1276   2                      SPIHost_SectorErase( sector_addr );
1277   2                      ret = 1; 
1278   2              }
1279   1      
1280   1              EE_WriteBlock(block,EE_buf,EE_mask);
1281   1      
1282   1              EE_WriteMoveDone(block,prev_bank);
1283   1      
1284   1              return ret;
1285   1      }
1286          
1287          /**
1288          *       clean block. 
1289          *
1290          *       If item is bigger then threshold, move to next bank.
1291          *       If no blank bank when it is moving, do SectorErase first.
1292          *       If fSkipErase is 0, do SectorErase for garbage banks.
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 22  

1293          * @param
1294          *       fSkipErase- to reduce SectorErase. 
1295          *       if 2, do not check the threshold.               
1296          *
1297          * If we donot have a blank bank when we move, we do SectorErase. 
1298          *       
1299          * @return
1300          *       low-nibble:     moving occur.
1301          *       high-nibble: SectorErase occur
1302          */
1303          #define EE_INDEX_THRESHOLD      (64*2*4)        //64 base items * 64 used items. remain 896 items
1304          
1305          static BYTE EE_CleanBlock(BYTE block, BYTE fSkipErase)
1306          {
1307   1              DWORD sector_addr;
1308   1              BYTE i, j;
1309   1      
1310   1              BYTE ret=0;
1311   1      
1312   1      #ifdef DEBUG_SFLASH_EEPROM
                      dPrintf("\nEE_CleanBlock(block:%bd,f:%bd) bank:%bd",block,fSkipErase,EE_CurrBank[block]);
              #endif
1315   1      
1316   1              //Do you need to move a bank ?
1317   1              if(fSkipErase==2 || EE_WritePos[block] >= EE_INDEX_THRESHOLD) {
1318   2                      ret++;
1319   2      
1320   2                      //if(EE_MoveBank(EE_CurrBank[block]))    BK110819
1321   2                      if(EE_MoveBank(block))
1322   2                              ret+= 0x10;
1323   2              }
1324   1      
1325   1              if(fSkipErase)
1326   1                      //done.
1327   1                      return ret;     //it can be 0 or 1, or 0x11.
1328   1      
1329   1              //erase the used other banks
1330   1              for(i=1; i < EE_SPI_BANKS;i++) {   //note: start from 1
1331   2                      j = (EE_CurrBank[block] + i) % EE_SPI_BANKS;            //get target bank
1332   2                      sector_addr = EE_SPI_SECTOR0 + ((DWORD)block*EE_SPI_BANKS + j) * SPI_SECTOR_SIZE;
1333   2      
1334   2      #ifdef MODEL_TW8835_EXTI2C
                              SpiFlashHostDmaRead2XMem(SPI_Buffer, sector_addr, 4L); //same SpiFlashDmaRead
              #else
1337   2                      SpiFlashDmaRead2XMem(SPI_Buffer, sector_addr, 4L); //same SpiFlashDmaRead
1338   2      #endif
1339   2      
1340   2                      if( (SPI_Buffer[0]==0xff) && (SPI_Buffer[1]==0xff) && (SPI_Buffer[2]==0xff) && (SPI_Buffer[3]==0xff) )
1341   2                              //next is blank.
1342   2                              continue;
1343   2                      SPIHost_SectorErase( sector_addr );
1344   2                      ret+=0x10;
1345   2                      
1346   2                      //debug. read back
1347   2                      //SPI_dump(sector_addr);
1348   2              }
1349   1      
1350   1              return ret;
1351   1      }
1352          
1353          
1354          /**
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 23  

1355          * clean banks
1356          */
1357          void EE_CleanBlocks(void)
1358          {
1359   1              BYTE block;
1360   1              BYTE ret;
1361   1      
1362   1              dPrintf("\nEE_CleanBlocks ");
1363   1              for(block=0; block < EE_BLOCKS; block++) {
1364   2                      //dPrintf("\n\t Block:%02bx-",block);
1365   2                      ret=EE_CleanBlock(block, 0);    //normal
1366   2                      if(ret) dPrintf(" clean");
1367   2                      else    dPrintf(" skip");
1368   2              }
1369   1      }
1370          
1371          /**
1372          * dump Banks
1373          */
1374          static void EE_DumpBlocks(void)
1375          {
1376   1              BYTE block;
1377   1              BYTE i,j;
1378   1      
1379   1              for(block=0; block < EE_BLOCKS; block++) {
1380   2                      Printf("\nBlock:%02bx Bank%d WritePos:%x", block, (WORD)EE_CurrBank[block], EE_WritePos[block]);
1381   2      
1382   2                      EE_ReadBlock(block, EE_buf, EE_mask);
1383   2                      for(i=0; i < (EE_INDEX_PER_BLOCK / 16); i++) {
1384   3                              Printf("\n%03x:",(WORD)block*EE_INDEX_PER_BLOCK+i*16);
1385   3                              for(j=0; j < 16; j++) {
1386   4                                      if(EE_mask[(i*16+j)>>3] & (1<<(j&0x07)))
1387   4                                              Printf("%02bx ",EE_buf[i*16+j]);
1388   4                                      else
1389   4                                              Printf("-- ");
1390   4                              }
1391   3                      }
1392   2              }
1393   1      }
1394          //=============================================================================
1395          //
1396          //=============================================================================
1397          /**
1398          * check E3PROM
1399          *
1400          * EEPROM check routine
1401          */
1402          void EE_Check(void)
1403          {
1404   1              BYTE block,bank;
1405   1              BYTE ret;
1406   1              WORD j;
1407   1              DWORD sector_addr;
1408   1      
1409   1              //print summary
1410   1              for(block=0; block < EE_BLOCKS; block++) {
1411   2                      Printf("\nblock%bx ",block);
1412   2                      for(bank=0; bank < EE_SPI_BANKS; bank++) {
1413   3                              ret=EE_CheckBlankBank(block,bank);
1414   3                              if(ret) {
1415   4                                      Printf("_");                    //blank
1416   4                              }
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 24  

1417   3                              else {
1418   4                                      ret=EE_CheckMoveDoneBank(block, bank);
1419   4                                      if(ret) Printf("X");    //done          
1420   4                                      else    Printf("U");    //used
1421   4                              }
1422   3                      }
1423   2              }
1424   1              //dump
1425   1              EE_DumpBlocks();
1426   1              
1427   1              //check corruptted items
1428   1              for(block=0; block < EE_BLOCKS; block++) {
1429   2                      sector_addr = EE_SPI_SECTOR0 + ((DWORD)block*EE_SPI_BANKS + EE_CurrBank[block]) * SPI_SECTOR_SIZE;
1430   2                      //read
1431   2                      for(j=0; j < SPI_SECTOR_SIZE; j+=4) {
1432   3      
1433   3                              if(j >= EE_WritePos[block])
1434   3                                      break;  
1435   3      
1436   3                              //BKTODO:Use more big buffer size. Max SPI_BUFFER_SIZE(128)
1437   3      #ifdef MODEL_TW8835_EXTI2C
                                      SpiFlashHostDmaRead2XMem(SPI_Buffer,sector_addr+j, 4L);
              #else
1440   3                              SpiFlashDmaRead2XMem(SPI_Buffer,sector_addr+j, 4L);
1441   3      #endif
1442   3      
1443   3                              //check corruption
1444   3                              if((SPI_Buffer[0]^SPI_Buffer[1]) != 0xFF || (SPI_Buffer[2]^SPI_Buffer[3]) != 0xFF) {
1445   4                                      Printf("\ncorrupted ?? Block%bx Bank%bx addr:%06lx [%02bx %02bx %02bx %02bx]",
1446   4                                              block,EE_CurrBank[block],
1447   4                                              sector_addr+j,
1448   4                                              SPI_Buffer[0], SPI_Buffer[1], SPI_Buffer[2], SPI_Buffer[3]);
1449   4                              }
1450   3                      }
1451   2              }
1452   1      }
1453          #elif defined(NO_EEPROM)        //.. USE_SFLASH_EEPROM          //=========================================
              
              
              CODE BYTE EE_dummy_DATA[0x1C0] = {
              /* 000 */ 0x54, 0x38, 0x33, 0x35, 0x00, 0x09, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
              /* 010 */ 0x32, 0x32, 0x3E, 0x32, 0x14, 0x32, 0x32, 0x3E, 0x32, 0x14, 0x32, 0x32, 0x3E, 0x32, 0x14, 0x32,
              /* 020 */ 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
              /* 030 */ 0x3E, 0x32, 0x14, 0x32, 0x32, 0x3E, 0x32, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
              /* 040 */ 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
              /* 050 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
              /* 060 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
              /* 070 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
              /* 080 */ 0x01, 0xDE, 0x0D, 0xFF, 0x0D, 0xFC, 0x01, 0xF0, 0x07, 0xED, 0x0D, 0x68, 0x0D, 0x5D, 0x02, 0x51, 
              /* 090 */ 0x02, 0x5C, 0x07, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
              /* 0A0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
              /* 0B0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 
              /* 0C0 */ 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0xFF, 0x32, 
              /* 0D0 */ 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 
              /* 0E0 */ 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
              /* 0F0 */ 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 
              /* 100 */ 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
              /* 110 */ 0x00, 0x00, 0x00, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 
              /* 120 */ 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 
              /* 130 */ 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0xFF, 0x32, 0x32, 0x32, 
              /* 140 */ 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
              /* 150 */ 0x00, 0x00, 0x00, 0x00, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 25  

              /* 160 */ 0x00, 0x00, 0x00, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
              /* 170 */ 0x00, 0x00, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 
              /* 180 */ 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 
              /* 190 */ 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 
              /* 1A0 */ 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 
              /* 1B0 */ 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x32, 0xFF, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00 
              };
              BYTE EE_Read(WORD index)
              {
                      if(index >= 0x1C0) return 0x00;
                      return EE_dummy_DATA[index];    
              }
              void EE_Write(WORD index, BYTE dat)
              {
                      Printf("\nEE_Write(%x,%bx) SKIP",index,dat);    
              } 
              #endif //.. USE_SFLASH_EEPROM           //=========================================
1496          
1497          //=============================================================================
1498          //=============================================================================
1499          
1500          
1501          
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 26  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00E8 (BEGIN)
0000         L?0233:
0000         L?0234:
0000 E0                MOVX    A,@DPTR
0001 FF                MOV     R7,A
0002         L?0235:
0002 7E00              MOV     R6,#00H
0004 7C00              MOV     R4,#00H
0006 7D04              MOV     R5,#04H
0008 120000      E     LCALL   ?C?LIMUL
000B A804              MOV     R0,AR4
000D A905              MOV     R1,AR5
000F AA06              MOV     R2,AR6
0011 AB07              MOV     R3,AR7
0013         L?0236:
0013 E0                MOVX    A,@DPTR
0014 2400        R     ADD     A,#LOW EE_CurrBank
0016 F582              MOV     DPL,A
0018 E4                CLR     A
0019 3400        R     ADDC    A,#HIGH EE_CurrBank
001B F583              MOV     DPH,A
001D         L?0237:
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F E4                CLR     A
0020 FC                MOV     R4,A
0021 FD                MOV     R5,A
0022 FE                MOV     R6,A
0023 EB                MOV     A,R3
0024 2F                ADD     A,R7
0025 FF                MOV     R7,A
0026 EE                MOV     A,R6
0027 3A                ADDC    A,R2
0028 FE                MOV     R6,A
0029 ED                MOV     A,R5
002A 39                ADDC    A,R1
002B FD                MOV     R5,A
002C EC                MOV     A,R4
002D 38                ADDC    A,R0
002E FC                MOV     R4,A
002F E4                CLR     A
0030 FB                MOV     R3,A
0031 7A10              MOV     R2,#010H
0033 F9                MOV     R1,A
0034 F8                MOV     R0,A
0035 120000      E     LCALL   ?C?LMUL
0038         L?0238:
0038 E4                CLR     A
0039 2F                ADD     A,R7
003A FF                MOV     R7,A
003B E4                CLR     A
003C 3E                ADDC    A,R6
003D FE                MOV     R6,A
003E ED                MOV     A,R5
003F 3408              ADDC    A,#08H
0041 FD                MOV     R5,A
0042 E4                CLR     A
0043 3C                ADDC    A,R4
0044 FC                MOV     R4,A
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 27  

0045 22                RET     
0046         L?0239:
0046 E500        E     MOV     A,regTW88+01H
0048 24CA              ADD     A,#0CAH
004A F582              MOV     DPL,A
004C E500        E     MOV     A,regTW88
004E 3404              ADDC    A,#04H
0050 F583              MOV     DPH,A
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
0054         L?0240:
0054 E500        E     MOV     A,regTW88+01H
0056 24CB              ADD     A,#0CBH
0058         L?0241:
0058 F582              MOV     DPL,A
005A E500        E     MOV     A,regTW88
005C 3404              ADDC    A,#04H
005E F583              MOV     DPH,A
0060 22                RET     
0061         L?0242:
0061 900000      R     MOV     DPTR,#sector_addr
0064         L?0243:
0064 7B01              MOV     R3,#01H
0066 7A00        R     MOV     R2,#HIGH SPI_Buffer
0068 7900        R     MOV     R1,#LOW SPI_Buffer
006A         L?0244:
006A E0                MOVX    A,@DPTR
006B FC                MOV     R4,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E FD                MOV     R5,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 FE                MOV     R6,A
0072 A3                INC     DPTR
0073 E0                MOVX    A,@DPTR
0074 22                RET     
0075         L?0245:
0075 900000      R     MOV     DPTR,#block
0078         L?0246:
0078 E0                MOVX    A,@DPTR
0079         L?0247:
0079 25E0              ADD     A,ACC
007B 2400        R     ADD     A,#LOW EE_WritePos
007D F582              MOV     DPL,A
007F E4                CLR     A
0080 3400        R     ADDC    A,#HIGH EE_WritePos
0082 F583              MOV     DPH,A
0084 22                RET     
0085         L?0248:
0085 900000      R     MOV     DPTR,#i
0088         L?0249:
0088 E0                MOVX    A,@DPTR
0089 FF                MOV     R7,A
008A         L?0250:
008A 2400        R     ADD     A,#LOW EE_CurrBank
008C         L?0251:
008C F582              MOV     DPL,A
008E E4                CLR     A
008F 3400        R     ADDC    A,#HIGH EE_CurrBank
0091 F583              MOV     DPH,A
0093 22                RET     
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 28  

0094         L?0252:
0094         L?0253:
0094 ED                MOV     A,R5
0095         L?0254:
0095 F0                MOVX    @DPTR,A
0096         L?0255:
0096 7E00              MOV     R6,#00H
0098 7C00              MOV     R4,#00H
009A 7D04              MOV     R5,#04H
009C 120000      E     LCALL   ?C?LIMUL
009F A804              MOV     R0,AR4
00A1 A905              MOV     R1,AR5
00A3 AA06              MOV     R2,AR6
00A5 AB07              MOV     R3,AR7
00A7 22                RET     
00A8         L?0256:
00A8 900000      R     MOV     DPTR,#j
00AB E0                MOVX    A,@DPTR
00AC FE                MOV     R6,A
00AD A3                INC     DPTR
00AE E0                MOVX    A,@DPTR
00AF         L?0257:
00AF FF                MOV     R7,A
00B0 E4                CLR     A
00B1 A3                INC     DPTR
00B2         L?0258:
00B2 FC                MOV     R4,A
00B3 FD                MOV     R5,A
00B4         L?0259:
00B4 E0                MOVX    A,@DPTR
00B5 F8                MOV     R0,A
00B6 A3                INC     DPTR
00B7 E0                MOVX    A,@DPTR
00B8 F9                MOV     R1,A
00B9 A3                INC     DPTR
00BA E0                MOVX    A,@DPTR
00BB FA                MOV     R2,A
00BC A3                INC     DPTR
00BD E0                MOVX    A,@DPTR
00BE 2F                ADD     A,R7
00BF FF                MOV     R7,A
00C0 22                RET     
00C1         L?0260:
00C1 E0                MOVX    A,@DPTR
00C2 900000      R     MOV     DPTR,#?_EE_ReadBlock?BYTE+04H
00C5         L?0261:
00C5 FF                MOV     R7,A
00C6         L?0262:
00C6 7401              MOV     A,#01H
00C8 F0                MOVX    @DPTR,A
00C9 A3                INC     DPTR
00CA 7400        R     MOV     A,#HIGH EE_mask
00CC F0                MOVX    @DPTR,A
00CD A3                INC     DPTR
00CE 7400        R     MOV     A,#LOW EE_mask
00D0 F0                MOVX    @DPTR,A
00D1 7B01              MOV     R3,#01H
00D3 7A00        R     MOV     R2,#HIGH EE_buf
00D5 7900        R     MOV     R1,#LOW EE_buf
00D7 22                RET     
00D8         L?0263:
00D8 24FC              ADD     A,#0FCH
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 29  

00DA FF                MOV     R7,A
00DB EE                MOV     A,R6
00DC 340F              ADDC    A,#0FH
00DE FE                MOV     R6,A
00DF E4                CLR     A
00E0 3D                ADDC    A,R5
00E1 FD                MOV     R5,A
00E2 E4                CLR     A
00E3 3C                ADDC    A,R4
00E4         L?0264:
00E4 FC                MOV     R4,A
00E5         L?0265:
00E5 900000      R     MOV     DPTR,#?_SpiFlashDmaRead2XMem?BYTE+07H
00E8         L?0266:
00E8 E4                CLR     A
00E9 F0                MOVX    @DPTR,A
00EA A3                INC     DPTR
00EB 7404              MOV     A,#04H
00ED F0                MOVX    @DPTR,A
00EE 22                RET     
00EF         L?0267:
00EF F4                CPL     A
00F0         L?0268:
00F0 FF                MOV     R7,A
00F1 900000      R     MOV     DPTR,#bptr
00F4 E0                MOVX    A,@DPTR
00F5 FE                MOV     R6,A
00F6 04                INC     A
00F7 F0                MOVX    @DPTR,A
00F8 7400        R     MOV     A,#LOW SPI_Buffer
00FA 2E                ADD     A,R6
00FB         L?0269:
00FB F582              MOV     DPL,A
00FD E4                CLR     A
00FE 3400        R     ADDC    A,#HIGH SPI_Buffer
0100 F583              MOV     DPH,A
0102 22                RET     
0103         L?0270:
0103 FF                MOV     R7,A
0104 13                RRC     A
0105 13                RRC     A
0106 13                RRC     A
0107 541F              ANL     A,#01FH
0109 FE                MOV     R6,A
010A E0                MOVX    A,@DPTR
010B FB                MOV     R3,A
010C A3                INC     DPTR
010D E0                MOVX    A,@DPTR
010E FA                MOV     R2,A
010F A3                INC     DPTR
0110 E0                MOVX    A,@DPTR
0111 F9                MOV     R1,A
0112 8E82              MOV     DPL,R6
0114 758300            MOV     DPH,#00H
0117 120000      E     LCALL   ?C?CLDOPTR
011A FD                MOV     R5,A
011B 7C00              MOV     R4,#00H
011D EF                MOV     A,R7
011E         L?0271:
011E 5407              ANL     A,#07H
0120 FF                MOV     R7,A
0121 7401              MOV     A,#01H
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 30  

0123 7E00              MOV     R6,#00H
0125 A807              MOV     R0,AR7
0127 08                INC     R0
0128 22                RET     
0129         L?0276:
0129         L?0277:
0129 EA                MOV     A,R2
012A 35F0              ADDC    A,B
012C         L?0278:
012C FE                MOV     R6,A
012D ED                MOV     A,R5
012E 39                ADDC    A,R1
012F FD                MOV     R5,A
0130 EC                MOV     A,R4
0131 38                ADDC    A,R0
0132 FC                MOV     R4,A
0133 22                RET     
0134         L?0279:
0134 900000      R     MOV     DPTR,#mask
0137         L?0280:
0137 E0                MOVX    A,@DPTR
0138 FB                MOV     R3,A
0139 A3                INC     DPTR
013A E0                MOVX    A,@DPTR
013B FA                MOV     R2,A
013C A3                INC     DPTR
013D E0                MOVX    A,@DPTR
013E 22                RET     
013F         L?0281:
013F         L?0282:
013F 7B01              MOV     R3,#01H
0141 7A00        R     MOV     R2,#HIGH SPI_Buffer
0143 7900        R     MOV     R1,#LOW SPI_Buffer
0145 22                RET     
0146         L?0283:
0146         L?0284:
0146 E0                MOVX    A,@DPTR
0147 FE                MOV     R6,A
0148 A3                INC     DPTR
0149 E0                MOVX    A,@DPTR
014A FF                MOV     R7,A
014B E4                CLR     A
014C FC                MOV     R4,A
014D FD                MOV     R5,A
014E 22                RET     
014F         L?0285:
014F 7D01              MOV     R5,#01H
0151         L?0286:
0151 120000      R     LCALL   _SpiFlashCmd
0154 7F01              MOV     R7,#01H
0156 020000      R     LJMP    _SpiFlashDmaReadLenByte
0159         L?0287:
0159         L?0288:
0159 900000      R     MOV     DPTR,#?_SPI_PageProgram?BYTE+04H
015C 7400        R     MOV     A,#HIGH SPI_Buffer
015E F0                MOVX    @DPTR,A
015F A3                INC     DPTR
0160 7400        R     MOV     A,#LOW SPI_Buffer
0162 F0                MOVX    @DPTR,A
0163 22                RET     
0164         L?0290:
0164         L?0291:
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 31  

0164 7D00              MOV     R5,#00H
0166         L?0292:
0166 7F00              MOV     R7,#00H
0168 7E00              MOV     R6,#00H
016A 7C00              MOV     R4,#00H
016C 22                RET     
016D         L?0293:
016D EF                MOV     A,R7
016E         L?0294:
016E F0                MOVX    @DPTR,A
016F A3                INC     DPTR
0170 EB                MOV     A,R3
0171 F0                MOVX    @DPTR,A
0172 A3                INC     DPTR
0173 EA                MOV     A,R2
0174 F0                MOVX    @DPTR,A
0175 A3                INC     DPTR
0176 E9                MOV     A,R1
0177 22                RET     
0178         L?0295:
0178 F9                MOV     R1,A
0179 8F82              MOV     DPL,R7
017B 758300            MOV     DPH,#00H
017E E4                CLR     A
017F 120000      E     LCALL   ?C?CSTOPTR
0182 900000      R     MOV     DPTR,#i
0185 E0                MOVX    A,@DPTR
0186 04                INC     A
0187 F0                MOVX    @DPTR,A
0188 22                RET     
0189         L?0296:
0189 7400        R     MOV     A,#LOW SPI_Buffer+01H
018B 2F                ADD     A,R7
018C         L?0297:
018C F582              MOV     DPL,A
018E E4                CLR     A
018F 3400        R     ADDC    A,#HIGH SPI_Buffer+01H
0191 F583              MOV     DPH,A
0193 E0                MOVX    A,@DPTR
0194 22                RET     
0195         L?0300:
0195 7400        R     MOV     A,#LOW SPI_Buffer+03H
0197 2D                ADD     A,R5
0198 F582              MOV     DPL,A
019A E4                CLR     A
019B 3400        R     ADDC    A,#HIGH SPI_Buffer+03H
019D F583              MOV     DPH,A
019F E0                MOVX    A,@DPTR
01A0 FD                MOV     R5,A
01A1 EE                MOV     A,R6
01A2 6F                XRL     A,R7
01A3 F4                CPL     A
01A4 22                RET     
01A5         L?0302:
01A5 E0                MOVX    A,@DPTR
01A6 FF                MOV     R7,A
01A7         L?0303:
01A7 900000      R     MOV     DPTR,#?_SpiFlashDmaRead2XMem?BYTE+07H
01AA E4                CLR     A
01AB F0                MOVX    @DPTR,A
01AC A3                INC     DPTR
01AD 22                RET     
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 32  

01AE         L?0305:
01AE FF                MOV     R7,A
01AF E0                MOVX    A,@DPTR
01B0 FD                MOV     R5,A
01B1 2400        R     ADD     A,#LOW SPI_Buffer+02H
01B3 F582              MOV     DPL,A
01B5 E4                CLR     A
01B6 3400        R     ADDC    A,#HIGH SPI_Buffer+02H
01B8 F583              MOV     DPH,A
01BA E0                MOVX    A,@DPTR
01BB 22                RET     
01BC         L?0306:
01BC         L?0307:
01BC 900000      R     MOV     DPTR,#block
01BF E0                MOVX    A,@DPTR
01C0 FF                MOV     R7,A
01C1 A3                INC     DPTR
01C2 E0                MOVX    A,@DPTR
01C3 FD                MOV     R5,A
01C4 22                RET     
01C5         L?0308:
01C5 7808              MOV     R0,#08H
01C7         L?0309:
01C7 FF                MOV     R7,A
01C8 120000      E     LCALL   ?C?ULSHR
01CB E500        E     MOV     A,regTW88+01H
01CD 22                RET     
01CE         L?0310:
01CE 7BFF              MOV     R3,#0FFH
01D0 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
01D3 EF                MOV     A,R7
01D4 F0                MOVX    @DPTR,A
01D5 22                RET     
01D6         L?0311:
01D6         L?0312:
01D6 E0                MOVX    A,@DPTR
01D7 04                INC     A
01D8 F0                MOVX    @DPTR,A
01D9 E0                MOVX    A,@DPTR
01DA C3                CLR     C
01DB 9404              SUBB    A,#04H
01DD 22                RET     
01DE         L?0315:
01DE         L?0316:
01DE 7A01              MOV     R2,#01H
01E0 7D01              MOV     R5,#01H
01E2 7F01              MOV     R7,#01H
01E4 22                RET     
01E5         L?0317:
01E5 EF                MOV     A,R7
01E6 75F080            MOV     B,#080H
01E9 A4                MUL     AB
01EA FF                MOV     R7,A
01EB E4                CLR     A
01EC FC                MOV     R4,A
01ED FD                MOV     R5,A
01EE 22                RET     
             ; FUNCTION Com00E8 (END)

             ; FUNCTION SpiFlashDmaStop (BEGIN)
                                           ; SOURCE LINE # 67
                                           ; SOURCE LINE # 68
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 33  

                                           ; SOURCE LINE # 76
0000 E500        E     MOV     A,regTW88+01H
0002 24C4              ADD     A,#0C4H
0004 120000      R     LCALL   L?0241
0007 E4                CLR     A
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
0009 22                RET     
             ; FUNCTION SpiFlashDmaStop (END)

             ; FUNCTION _SpiFlashCmdRead (BEGIN)
                                           ; SOURCE LINE # 92
;---- Variable 'dest' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
0000 EF                MOV     A,R7
0001 C4                SWAP    A
0002 33                RLC     A
0003 33                RLC     A
0004 54C0              ANL     A,#0C0H
0006 FF                MOV     R7,A
0007 900000      R     MOV     DPTR,#SPICMD_x_BYTES
000A E0                MOVX    A,@DPTR
000B 4F                ORL     A,R7
000C FF                MOV     R7,A
000D E500        E     MOV     A,regTW88+01H
000F 24C3              ADD     A,#0C3H
0011 120000      R     LCALL   L?0241
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 95
0016 900000      R     MOV     DPTR,#SPICMD_x_READ
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B E500        E     MOV     A,regTW88+01H
001D 24CA              ADD     A,#0CAH
001F 120000      R     LCALL   L?0241
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 96
0024 22                RET     
             ; FUNCTION _SpiFlashCmdRead (END)

             ; FUNCTION L?0298 (BEGIN)
0000         L?0299:
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 7F01              MOV     R7,#01H
             ; FUNCTION _SpiFlashDmaDestType (BEGIN)
                                           ; SOURCE LINE # 105
;---- Variable 'access_mode' assigned to Register 'R5' ----
;---- Variable 'dest' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 108
0004 E500        E     MOV     A,regTW88+01H
0006 24C3              ADD     A,#0C3H
0008 120000      R     LCALL   L?0241
000B E0                MOVX    A,@DPTR
000C 540F              ANL     A,#0FH
000E FE                MOV     R6,A
;---- Variable 'dat' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 109
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 34  

000F EF                MOV     A,R7
0010 C4                SWAP    A
0011 33                RLC     A
0012 33                RLC     A
0013 54C0              ANL     A,#0C0H
0015 4E                ORL     A,R6
0016 FE                MOV     R6,A
                                           ; SOURCE LINE # 110
0017 AF05              MOV     R7,AR5
0019 EF                MOV     A,R7
001A C4                SWAP    A
001B 54F0              ANL     A,#0F0H
001D 4E                ORL     A,R6
                                           ; SOURCE LINE # 111
001E FF                MOV     R7,A
001F E500        E     MOV     A,regTW88+01H
0021 24C3              ADD     A,#0C3H
0023 120000      R     LCALL   L?0241
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
0028 22                RET     
             ; FUNCTION _SpiFlashDmaDestType (END)

             ; FUNCTION _SpiFlashSetCmdLength (BEGIN)
                                           ; SOURCE LINE # 118
;---- Variable 'len' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
0000 E500        E     MOV     A,regTW88+01H
0002 24C3              ADD     A,#0C3H
0004 120000      R     LCALL   L?0241
0007 E0                MOVX    A,@DPTR
0008 54F0              ANL     A,#0F0H
000A 4F                ORL     A,R7
000B FF                MOV     R7,A
000C E500        E     MOV     A,regTW88+01H
000E 24C3              ADD     A,#0C3H
0010 120000      R     LCALL   L?0241
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 121
0015 22                RET     
             ; FUNCTION _SpiFlashSetCmdLength (END)

             ; FUNCTION _SpiFlashDmaWait (BEGIN)
                                           ; SOURCE LINE # 133
0000 900000      R     MOV     DPTR,#call_line
0003 EA                MOV     A,R2
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
;---- Variable 'delay' assigned to Register 'R5' ----
;---- Variable 'wait' assigned to Register 'R1' ----
0008 A907              MOV     R1,AR7
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 141
;---- Variable 'i' assigned to Register 'R4' ----
000A E4                CLR     A
000B FC                MOV     R4,A
000C         ?C0005:
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 35  

000C EC                MOV     A,R4
000D C3                CLR     C
000E 99                SUBB    A,R1
000F 501C              JNC     ?C0006
                                           ; SOURCE LINE # 142
0011 E500        E     MOV     A,regTW88+01H
0013 24C4              ADD     A,#0C4H
0015 120000      R     LCALL   L?0241
0018 E0                MOVX    A,@DPTR
0019 900000      R     MOV     DPTR,#vdata
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
001D E0                MOVX    A,@DPTR
001E 30E00C            JNB     ACC.0,?C0006
                                           ; SOURCE LINE # 144
0021         ?C0008:
                                           ; SOURCE LINE # 145
0021 ED                MOV     A,R5
0022 6006              JZ      ?C0007
                                           ; SOURCE LINE # 146
0024 FF                MOV     R7,A
0025 7E00              MOV     R6,#00H
0027 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 147
002A         ?C0007:
002A 0C                INC     R4
002B 80DF              SJMP    ?C0005
002D         ?C0006:
                                           ; SOURCE LINE # 148
002D EC                MOV     A,R4
002E B5011B            CJNE    A,AR1,?C0010
                                           ; SOURCE LINE # 149
0031 7BFF              MOV     R3,#0FFH
0033 7A00        R     MOV     R2,#HIGH ?SC_0
0035 7900        R     MOV     R1,#LOW ?SC_0
0037 900000      R     MOV     DPTR,#call_line
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0041 CF                XCH     A,R7
0042 F0                MOVX    @DPTR,A
0043 A3                INC     DPTR
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
0046 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 150
0049 7F01              MOV     R7,#01H
004B 22                RET     
                                           ; SOURCE LINE # 151
004C         ?C0010:
                                           ; SOURCE LINE # 152
004C 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 153
004E         ?C0011:
004E 22                RET     
             ; FUNCTION _SpiFlashDmaWait (END)

             ; FUNCTION _SpiFlashDmaStart (BEGIN)
                                           ; SOURCE LINE # 168
;---- Variable 'fWrite' assigned to Register 'R7' ----
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 36  

;---- Variable 'call_line' assigned to Register 'R2/R3' ----
;---- Variable 'fBusy' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 172
;---- Variable 'dat' assigned to Register 'R6' ----
0000 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 173
0002 EF                MOV     A,R7
0003 6004              JZ      ?C0012
0005 EE                MOV     A,R6
0006 4402              ORL     A,#02H
0008 FE                MOV     R6,A
0009         ?C0012:
                                           ; SOURCE LINE # 174
0009 ED                MOV     A,R5
000A 6004              JZ      ?C0013
000C EE                MOV     A,R6
000D 4404              ORL     A,#04H
000F FE                MOV     R6,A
0010         ?C0013:
                                           ; SOURCE LINE # 177
0010 E500        E     MOV     A,regTW88+01H
0012 24C4              ADD     A,#0C4H
0014 120000      R     LCALL   L?0241
0017 EE                MOV     A,R6
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
0019 7D01              MOV     R5,#01H
001B 7FC8              MOV     R7,#0C8H
001D 020000      R     LJMP    _SpiFlashDmaWait
             ; FUNCTION _SpiFlashDmaStart (END)

             ; FUNCTION _SpiFlashDmaBuffAddr (BEGIN)
                                           ; SOURCE LINE # 186
;---- Variable 'addr' assigned to Register 'R4/R5' ----
0000 AD07              MOV     R5,AR7
0002 AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
0004 EC                MOV     A,R4
0005 FF                MOV     R7,A
0006 E500        E     MOV     A,regTW88+01H
0008 24C6              ADD     A,#0C6H
000A 120000      R     LCALL   L?0241
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
000F E500        E     MOV     A,regTW88+01H
0011 24C7              ADD     A,#0C7H
0013 120000      R     LCALL   L?0241
0016 ED                MOV     A,R5
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 190
0018 22                RET     
             ; FUNCTION _SpiFlashDmaBuffAddr (END)

             ; FUNCTION _SpiFlashDmaReadLen (BEGIN)
                                           ; SOURCE LINE # 204
0000 900000      R     MOV     DPTR,#len
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 37  

0006 900000      R     MOV     DPTR,#len
0009 120000      R     LCALL   L?0244
000C 7810              MOV     R0,#010H
000E 120000      R     LCALL   L?0309
0011 24DA              ADD     A,#0DAH
0013 120000      R     LCALL   L?0241
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
0018 900000      R     MOV     DPTR,#len
001B 120000      R     LCALL   L?0244
001E 120000      R     LCALL   L?0308
0021 24C8              ADD     A,#0C8H
0023 120000      R     LCALL   L?0241
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
0028 900000      R     MOV     DPTR,#len
002B A3                INC     DPTR
002C A3                INC     DPTR
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 E500        E     MOV     A,regTW88+01H
0032 24C9              ADD     A,#0C9H
0034 120000      R     LCALL   L?0241
0037 EF                MOV     A,R7
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
0039 22                RET     
             ; FUNCTION _SpiFlashDmaReadLen (END)

             ; FUNCTION L?0272 (BEGIN)
0000         L?0273:
0000 7F06              MOV     R7,#06H
0002         L?0274:
0002 7D01              MOV     R5,#01H
0004         L?0275:
0004 120000      R     LCALL   _SpiFlashCmd
0007 E4                CLR     A
0008 FF                MOV     R7,A
             ; FUNCTION _SpiFlashDmaReadLenByte (BEGIN)
                                           ; SOURCE LINE # 214
;---- Variable 'len_l' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0009 E500        E     MOV     A,regTW88+01H
000B 24C9              ADD     A,#0C9H
000D 120000      R     LCALL   L?0241
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0012 22                RET     
             ; FUNCTION _SpiFlashDmaReadLenByte (END)

             ; FUNCTION L?0289 (BEGIN)
0000 120000      R     LCALL   _SpiFlashDmaDestType
0003 900000      R     MOV     DPTR,#SPICMD_x_READ
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 900000      R     MOV     DPTR,#SPICMD_x_BYTES
000B E0                MOVX    A,@DPTR
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 38  

000C FD                MOV     R5,A
             ; FUNCTION _SpiFlashCmd (BEGIN)
                                           ; SOURCE LINE # 246
;---- Variable 'cmd_len' assigned to Register 'R5' ----
;---- Variable 'cmd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
000D E500        E     MOV     A,regTW88+01H
000F 24CA              ADD     A,#0CAH
0011 120000      R     LCALL   L?0241
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 249
0016 AF05              MOV     R7,AR5
0018 020000      R     LJMP    _SpiFlashSetCmdLength
             ; FUNCTION _SpiFlashCmd (END)

             ; FUNCTION _SpiFlashCmd2 (BEGIN)
                                           ; SOURCE LINE # 258
;---- Variable 'cmd2' assigned to Register 'R5' ----
;---- Variable 'cmd1' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
0000 120000      R     LCALL   L?0239
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
0005 7F02              MOV     R7,#02H
0007 020000      R     LJMP    _SpiFlashSetCmdLength
             ; FUNCTION _SpiFlashCmd2 (END)

             ; FUNCTION _SpiFlashCmd3 (BEGIN)
                                           ; SOURCE LINE # 270
;---- Variable 'cmd1' assigned to Register 'R7' ----
;---- Variable 'cmd3' assigned to Register 'R3' ----
;---- Variable 'cmd2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
0000 120000      R     LCALL   L?0239
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
0005 E500        E     MOV     A,regTW88+01H
0007 24CC              ADD     A,#0CCH
0009 120000      R     LCALL   L?0241
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 275
000E 7F03              MOV     R7,#03H
0010 020000      R     LJMP    _SpiFlashSetCmdLength
             ; FUNCTION _SpiFlashCmd3 (END)

             ; FUNCTION _SpiFlashDmaFlashAddr (BEGIN)
                                           ; SOURCE LINE # 282
0000 900000      R     MOV     DPTR,#addr
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
0006 900000      R     MOV     DPTR,#addr
0009 120000      R     LCALL   L?0244
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 39  

000C FF                MOV     R7,A
000D 7810              MOV     R0,#010H
000F 120000      E     LCALL   ?C?ULSHR
0012 120000      R     LCALL   L?0240
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
0017 900000      R     MOV     DPTR,#addr
001A 120000      R     LCALL   L?0244
001D 120000      R     LCALL   L?0308
0020 24CC              ADD     A,#0CCH
0022 120000      R     LCALL   L?0241
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
0027 900000      R     MOV     DPTR,#addr
002A A3                INC     DPTR
002B A3                INC     DPTR
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F E500        E     MOV     A,regTW88+01H
0031 24CD              ADD     A,#0CDH
0033 120000      R     LCALL   L?0241
0036 EF                MOV     A,R7
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
0038 22                RET     
             ; FUNCTION _SpiFlashDmaFlashAddr (END)

             ; FUNCTION _SpiFlashDmaRead (BEGIN)
                                           ; SOURCE LINE # 300
;---- Variable 'dest_loc' assigned to Register 'R2/R3' ----
0000 AB05              MOV     R3,AR5
0002 AA04              MOV     R2,AR4
;---- Variable 'dest_type' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 310
0004 E4                CLR     A
0005 FD                MOV     R5,A
                                           ; SOURCE LINE # 311
0006 120000      R     LCALL   L?0289
                                           ; SOURCE LINE # 312
0009 900000      R     MOV     DPTR,#src_loc
000C 120000      R     LCALL   L?0244
000F FF                MOV     R7,A
0010 120000      R     LCALL   _SpiFlashDmaFlashAddr
                                           ; SOURCE LINE # 313
0013 AE02              MOV     R6,AR2
0015 AF03              MOV     R7,AR3
0017 120000      R     LCALL   _SpiFlashDmaBuffAddr
                                           ; SOURCE LINE # 314
001A 900000      R     MOV     DPTR,#size
001D 120000      R     LCALL   L?0283
0020 120000      R     LCALL   _SpiFlashDmaReadLen
                                           ; SOURCE LINE # 315
0023 7B3B              MOV     R3,#03BH
0025 7A01              MOV     R2,#01H
0027 7D01              MOV     R5,#01H
0029 E4                CLR     A
002A FF                MOV     R7,A
002B 020000      R     LJMP    _SpiFlashDmaStart
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 40  

             ; FUNCTION _SpiFlashDmaRead (END)

             ; FUNCTION _SpiFlashDmaRead2XMem (BEGIN)
                                           ; SOURCE LINE # 317
0000 900000      R     MOV     DPTR,#src_loc
0003 120000      E     LCALL   ?C?LSTXDATA
;---- Variable 'dest_loc' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 327
0006 E4                CLR     A
0007 FD                MOV     R5,A
0008 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 328
000A 120000      R     LCALL   L?0289
                                           ; SOURCE LINE # 329
000D 900000      R     MOV     DPTR,#src_loc
0010 120000      R     LCALL   L?0244
0013 FF                MOV     R7,A
0014 120000      R     LCALL   _SpiFlashDmaFlashAddr
                                           ; SOURCE LINE # 330
0017 AE02              MOV     R6,AR2
0019 AF01              MOV     R7,AR1
001B 120000      R     LCALL   _SpiFlashDmaBuffAddr
                                           ; SOURCE LINE # 331
001E 900000      R     MOV     DPTR,#size
0021 120000      R     LCALL   L?0283
0024 120000      R     LCALL   _SpiFlashDmaReadLen
                                           ; SOURCE LINE # 332
0027 7B4C              MOV     R3,#04CH
0029 7A01              MOV     R2,#01H
002B 7D01              MOV     R5,#01H
002D E4                CLR     A
002E FF                MOV     R7,A
002F 020000      R     LJMP    _SpiFlashDmaStart
             ; FUNCTION _SpiFlashDmaRead2XMem (END)

             ; FUNCTION _SPI_SetReadModeByRegister (BEGIN)
                                           ; SOURCE LINE # 354
;---- Variable 'mode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 357
0000 E500        E     MOV     A,regTW88+01H
0002 24C0              ADD     A,#0C0H
0004 120000      R     LCALL   L?0241
0007 E0                MOVX    A,@DPTR
0008 54F8              ANL     A,#0F8H
000A 4F                ORL     A,R7
000B FE                MOV     R6,A
000C E500        E     MOV     A,regTW88+01H
000E 24C0              ADD     A,#0C0H
0010 120000      R     LCALL   L?0241
0013 EE                MOV     A,R6
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
0015 EF                MOV     A,R7
0016 14                DEC     A
0017 601C              JZ      ?C0026
0019 14                DEC     A
001A 6020              JZ      ?C0027
001C 14                DEC     A
001D 6024              JZ      ?C0028
001F 14                DEC     A
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 41  

0020 6028              JZ      ?C0029
0022 14                DEC     A
0023 6032              JZ      ?C0030
0025 2405              ADD     A,#05H
0027 703A              JNZ     ?C0031
                                           ; SOURCE LINE # 360
0029         ?C0025:
                                           ; SOURCE LINE # 361
0029 900000      R     MOV     DPTR,#SPICMD_x_READ
002C 7403              MOV     A,#03H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 362
002F 900000      R     MOV     DPTR,#SPICMD_x_BYTES
0032 04                INC     A
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
0034 22                RET     
                                           ; SOURCE LINE # 364
0035         ?C0026:
                                           ; SOURCE LINE # 365
0035 900000      R     MOV     DPTR,#SPICMD_x_READ
0038 740B              MOV     A,#0BH
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
003A 8013              SJMP    ?C0223
                                           ; SOURCE LINE # 368
003C         ?C0027:
                                           ; SOURCE LINE # 369
003C 900000      R     MOV     DPTR,#SPICMD_x_READ
003F 743B              MOV     A,#03BH
0041         ?C0221:
                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 371
0041 800C              SJMP    ?C0223
                                           ; SOURCE LINE # 372
0043         ?C0028:
                                           ; SOURCE LINE # 373
0043 900000      R     MOV     DPTR,#SPICMD_x_READ
0046 746B              MOV     A,#06BH
0048         ?C0222:
                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 375
0048 8005              SJMP    ?C0223
                                           ; SOURCE LINE # 376
004A         ?C0029:
                                           ; SOURCE LINE # 377
004A 900000      R     MOV     DPTR,#SPICMD_x_READ
004D 74BB              MOV     A,#0BBH
004F         ?C0223:
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
0050 900000      R     MOV     DPTR,#SPICMD_x_BYTES
0053 7405              MOV     A,#05H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
0056 22                RET     
                                           ; SOURCE LINE # 380
0057         ?C0030:
                                           ; SOURCE LINE # 381
0057 900000      R     MOV     DPTR,#SPICMD_x_READ
005A 74EB              MOV     A,#0EBH
005C F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 42  

                                           ; SOURCE LINE # 382
005D 900000      R     MOV     DPTR,#SPICMD_x_BYTES
0060 7407              MOV     A,#07H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
0063         ?C0031:
0063 22                RET     
             ; FUNCTION _SPI_SetReadModeByRegister (END)

             ; FUNCTION SPI_WriteEnable (BEGIN)
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 406
0000 120000      R     LCALL   L?0298
                                           ; SOURCE LINE # 407
0003 0D                INC     R5
0004 7F06              MOV     R7,#06H
0006 120000      R     LCALL   _SpiFlashCmd
                                           ; SOURCE LINE # 408
0009 1D                DEC     R5
000A 120000      R     LCALL   L?0292
000D 120000      R     LCALL   _SpiFlashDmaReadLen
                                           ; SOURCE LINE # 409
0010 7B99              MOV     R3,#099H
0012 7A01              MOV     R2,#01H
0014 E4                CLR     A
0015 FD                MOV     R5,A
0016 7F01              MOV     R7,#01H
0018 020000      R     LJMP    _SpiFlashDmaStart
             ; FUNCTION SPI_WriteEnable (END)

             ; FUNCTION _SPI_SectorErase (BEGIN)
                                           ; SOURCE LINE # 430
0000 900000      R     MOV     DPTR,#spiaddr
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 434
0006 120000      R     LCALL   SPI_WriteEnable
                                           ; SOURCE LINE # 437
0009 120000      R     LCALL   L?0298
                                           ; SOURCE LINE # 438
000C 7D04              MOV     R5,#04H
000E 7F20              MOV     R7,#020H
0010 120000      R     LCALL   _SpiFlashCmd
                                           ; SOURCE LINE # 439
0013 900000      R     MOV     DPTR,#spiaddr
0016 120000      R     LCALL   L?0244
0019 FF                MOV     R7,A
001A 120000      R     LCALL   _SpiFlashDmaFlashAddr
                                           ; SOURCE LINE # 440
001D 120000      R     LCALL   L?0290
0020 120000      R     LCALL   _SpiFlashDmaReadLen
                                           ; SOURCE LINE # 441
0023 7BB9              MOV     R3,#0B9H
0025 120000      R     LCALL   L?0315
0028 020000      R     LJMP    _SpiFlashDmaStart
             ; FUNCTION _SPI_SectorErase (END)

             ; FUNCTION _SPI_BlockErase (BEGIN)
                                           ; SOURCE LINE # 463
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 43  

0000 900000      R     MOV     DPTR,#spiaddr
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
0006 120000      R     LCALL   SPI_WriteEnable
                                           ; SOURCE LINE # 468
0009 120000      R     LCALL   L?0299
                                           ; SOURCE LINE # 469
000C 7D04              MOV     R5,#04H
000E 7FD8              MOV     R7,#0D8H
0010 120000      R     LCALL   _SpiFlashCmd
                                           ; SOURCE LINE # 470
0013 900000      R     MOV     DPTR,#spiaddr
0016 120000      R     LCALL   L?0244
0019 FF                MOV     R7,A
001A 120000      R     LCALL   _SpiFlashDmaFlashAddr
                                           ; SOURCE LINE # 471
001D 120000      R     LCALL   L?0290
0020 120000      R     LCALL   _SpiFlashDmaReadLen
                                           ; SOURCE LINE # 472
0023 7BD8              MOV     R3,#0D8H
0025 120000      R     LCALL   L?0315
0028 020000      R     LJMP    _SpiFlashDmaStart
             ; FUNCTION _SPI_BlockErase (END)

             ; FUNCTION _SPI_PageProgram (BEGIN)
                                           ; SOURCE LINE # 496
0000 900000      R     MOV     DPTR,#spiaddr
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
0006 120000      R     LCALL   SPI_WriteEnable
                                           ; SOURCE LINE # 501
0009 E4                CLR     A
000A FD                MOV     R5,A
000B 7F03              MOV     R7,#03H
000D 120000      R     LCALL   _SpiFlashDmaDestType
                                           ; SOURCE LINE # 502
0010 7D04              MOV     R5,#04H
0012 7F02              MOV     R7,#02H
0014 120000      R     LCALL   _SpiFlashCmd
                                           ; SOURCE LINE # 503
0017 900000      R     MOV     DPTR,#spiaddr
001A 120000      R     LCALL   L?0244
001D FF                MOV     R7,A
001E 120000      R     LCALL   _SpiFlashDmaFlashAddr
                                           ; SOURCE LINE # 504
0021 900000      R     MOV     DPTR,#xaddr
0024 E0                MOVX    A,@DPTR
0025 FE                MOV     R6,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 120000      R     LCALL   _SpiFlashDmaBuffAddr
                                           ; SOURCE LINE # 505
002C 900000      R     MOV     DPTR,#cnt
002F 120000      R     LCALL   L?0284
0032 120000      R     LCALL   _SpiFlashDmaReadLen
                                           ; SOURCE LINE # 506
0035 7BFA              MOV     R3,#0FAH
0037 120000      R     LCALL   L?0316
003A 020000      R     LJMP    _SpiFlashDmaStart
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 44  

             ; FUNCTION _SPI_PageProgram (END)

             ; FUNCTION SPI_QuadInit_MICRON (BEGIN)
                                           ; SOURCE LINE # 521
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 526
0000 7F85              MOV     R7,#085H
                                           ; SOURCE LINE # 527
0002 120000      R     LCALL   L?0285
                                           ; SOURCE LINE # 528
0005 7B10              MOV     R3,#010H
0007 7A02              MOV     R2,#02H
0009 1D                DEC     R5
000A 1F                DEC     R7
000B 120000      R     LCALL   _SpiFlashDmaStart
                                           ; SOURCE LINE # 529
000E E500        E     MOV     A,regTW88+01H
0010 24D0              ADD     A,#0D0H
0012 120000      R     LCALL   L?0241
0015 E0                MOVX    A,@DPTR
0016 900000      R     MOV     DPTR,#temp
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 530
001A 7BFF              MOV     R3,#0FFH
001C 7A00        R     MOV     R2,#HIGH ?SC_35
001E 7900        R     MOV     R1,#LOW ?SC_35
0020 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0023 F0                MOVX    @DPTR,A
0024 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 531
0027 900000      R     MOV     DPTR,#temp
002A E0                MOVX    A,@DPTR
002B 646B              XRL     A,#06BH
002D 6031              JZ      ?C0037
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
002F 120000      R     LCALL   L?0272
                                           ; SOURCE LINE # 534
0032 7B16              MOV     R3,#016H
0034 120000      R     LCALL   L?0314
                                           ; SOURCE LINE # 536
0037 7D6B              MOV     R5,#06BH
0039 7F81              MOV     R7,#081H
003B 120000      R     LCALL   _SpiFlashCmd2
                                           ; SOURCE LINE # 537
003E E4                CLR     A
003F FF                MOV     R7,A
0040 120000      R     LCALL   _SpiFlashDmaReadLenByte
                                           ; SOURCE LINE # 538
0043 7B1A              MOV     R3,#01AH
0045 7A02              MOV     R2,#02H
0047 7D01              MOV     R5,#01H
0049 0F                INC     R7
004A 120000      R     LCALL   _SpiFlashDmaStart
                                           ; SOURCE LINE # 539
004D 7BFF              MOV     R3,#0FFH
004F 7A00        R     MOV     R2,#HIGH ?SC_61
0051 7900        R     MOV     R1,#LOW ?SC_61
0053 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 541
0056 7F04              MOV     R7,#04H
                                           ; SOURCE LINE # 542
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 45  

0058 120000      R     LCALL   L?0274
                                           ; SOURCE LINE # 543
005B 7B1F              MOV     R3,#01FH
005D 120000      R     LCALL   L?0314
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 568
0060         ?C0037:
0060 22                RET     
0061         L?0314:
0061 7A02              MOV     R2,#02H
0063 1D                DEC     R5
0064 0F                INC     R7
0065 120000      R     LCALL   _SpiFlashDmaStart
0068 22                RET     
             ; FUNCTION SPI_QuadInit_MICRON (END)

             ; FUNCTION SPI_QUADInit (BEGIN)
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 588
0000 120000      R     LCALL   L?0299
                                           ; SOURCE LINE # 589
0003 7FD0              MOV     R7,#0D0H
0005 7E04              MOV     R6,#04H
0007 120000      R     LCALL   _SpiFlashDmaBuffAddr
                                           ; SOURCE LINE # 590
000A 120000      R     LCALL   L?0291
000D 120000      R     LCALL   _SpiFlashDmaReadLen
                                           ; SOURCE LINE # 591
0010 7D01              MOV     R5,#01H
0012 7F9F              MOV     R7,#09FH
0014 120000      R     LCALL   _SpiFlashCmd
                                           ; SOURCE LINE # 592
0017 7F03              MOV     R7,#03H
0019 120000      R     LCALL   _SpiFlashDmaReadLenByte
                                           ; SOURCE LINE # 593
001C 7B51              MOV     R3,#051H
001E 7A02              MOV     R2,#02H
0020 E4                CLR     A
0021 1D                DEC     R5
0022 FF                MOV     R7,A
0023 120000      R     LCALL   _SpiFlashDmaStart
                                           ; SOURCE LINE # 594
0026 E500        E     MOV     A,regTW88+01H
0028 24D0              ADD     A,#0D0H
002A 120000      R     LCALL   L?0241
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 900000      R     MOV     DPTR,#vid
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 595
0033 E500        E     MOV     A,regTW88+01H
0035 24D1              ADD     A,#0D1H
0037 120000      R     LCALL   L?0241
003A E0                MOVX    A,@DPTR
003B FE                MOV     R6,A
003C 900000      R     MOV     DPTR,#dat0
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 596
0040 E500        E     MOV     A,regTW88+01H
0042 24D2              ADD     A,#0D2H
0044 120000      R     LCALL   L?0241
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 46  

0047 E0                MOVX    A,@DPTR
0048 FD                MOV     R5,A
0049 900000      R     MOV     DPTR,#cid
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 598
004D 7A00        R     MOV     R2,#HIGH ?SC_83
004F 7900        R     MOV     R1,#LOW ?SC_83
0051 120000      R     LCALL   L?0310
0054 A3                INC     DPTR
0055 EE                MOV     A,R6
0056 F0                MOVX    @DPTR,A
0057 A3                INC     DPTR
0058 ED                MOV     A,R5
0059 F0                MOVX    @DPTR,A
005A 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 600
005D 900000      R     MOV     DPTR,#vid
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 B41C08            CJNE    A,#01CH,?C0038
0065 900000      R     MOV     DPTR,#ret
0068 7402              MOV     A,#02H
006A F0                MOVX    @DPTR,A
006B 8030              SJMP    ?C0039
006D         ?C0038:
                                           ; SOURCE LINE # 601
006D EF                MOV     A,R7
006E B4C208            CJNE    A,#0C2H,?C0040
0071 900000      R     MOV     DPTR,#ret
0074 7401              MOV     A,#01H
0076 F0                MOVX    @DPTR,A
0077 8024              SJMP    ?C0039
0079         ?C0040:
                                           ; SOURCE LINE # 602
0079 EF                MOV     A,R7
007A B4EF08            CJNE    A,#0EFH,?C0042
007D 900000      R     MOV     DPTR,#ret
0080 7403              MOV     A,#03H
0082 F0                MOVX    @DPTR,A
0083 8018              SJMP    ?C0039
0085         ?C0042:
                                           ; SOURCE LINE # 604
0085 EF                MOV     A,R7
0086 B42008            CJNE    A,#020H,?C0044
0089 900000      R     MOV     DPTR,#ret
008C 7404              MOV     A,#04H
008E F0                MOVX    @DPTR,A
008F 800C              SJMP    ?C0039
0091         ?C0044:
                                           ; SOURCE LINE # 605
                                           ; SOURCE LINE # 606
0091 7BFF              MOV     R3,#0FFH
0093 7A00        R     MOV     R2,#HIGH ?SC_117
0095 7900        R     MOV     R1,#LOW ?SC_117
0097 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 607
009A 7F00              MOV     R7,#00H
009C 22                RET     
                                           ; SOURCE LINE # 608
009D         ?C0039:
                                           ; SOURCE LINE # 610
009D 900000      R     MOV     DPTR,#ret
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 47  

00A0 E0                MOVX    A,@DPTR
00A1 B4040D            CJNE    A,#04H,?C0047
00A4 900000      R     MOV     DPTR,#cid
00A7 E0                MOVX    A,@DPTR
00A8 B41806            CJNE    A,#018H,?C0047
                                           ; SOURCE LINE # 611
00AB 120000      R     LCALL   SPI_QuadInit_MICRON
                                           ; SOURCE LINE # 612
00AE 020000      R     LJMP    ?C0224
                                           ; SOURCE LINE # 613
00B1         ?C0047:
                                           ; SOURCE LINE # 619
00B1 900000      R     MOV     DPTR,#vid
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 64C2              XRL     A,#0C2H
00B8 6005              JZ      ?C0049
00BA EF                MOV     A,R7
00BB 641C              XRL     A,#01CH
00BD 7016              JNZ     ?C0048
00BF         ?C0049:
                                           ; SOURCE LINE # 620
00BF 7F05              MOV     R7,#05H
                                           ; SOURCE LINE # 621
00C1 120000      R     LCALL   L?0285
                                           ; SOURCE LINE # 622
00C4 7B6E              MOV     R3,#06EH
                                           ; SOURCE LINE # 623
00C6 120000      R     LCALL   L?0301
00C9 120000      R     LCALL   L?0241
00CC E0                MOVX    A,@DPTR
00CD 900000      R     MOV     DPTR,#dat0
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 624
00D1 5440              ANL     A,#040H
                                           ; SOURCE LINE # 625
00D3 802D              SJMP    ?C0225
00D5         ?C0048:
                                           ; SOURCE LINE # 626
00D5 900000      R     MOV     DPTR,#vid
00D8 E0                MOVX    A,@DPTR
00D9 64EF              XRL     A,#0EFH
00DB 7029              JNZ     ?C0050
                                           ; SOURCE LINE # 628
00DD 7D01              MOV     R5,#01H
00DF 7F35              MOV     R7,#035H
                                           ; SOURCE LINE # 629
00E1 120000      R     LCALL   L?0286
                                           ; SOURCE LINE # 630
00E4 7B76              MOV     R3,#076H
                                           ; SOURCE LINE # 631
00E6 120000      R     LCALL   L?0301
00E9 120000      R     LCALL   L?0241
00EC E0                MOVX    A,@DPTR
00ED 900000      R     MOV     DPTR,#dat0
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 632
00F1 7BFF              MOV     R3,#0FFH
00F3 7A00        R     MOV     R2,#HIGH ?SC_138
00F5 7900        R     MOV     R1,#LOW ?SC_138
00F7 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
00FA F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 48  

00FB 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 633
00FE 900000      R     MOV     DPTR,#dat0
0101 E0                MOVX    A,@DPTR
0102         ?C0225:
0102 900000      R     MOV     DPTR,#temp
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 644
0106         ?C0050:
                                           ; SOURCE LINE # 646
0106 900000      R     MOV     DPTR,#temp
0109 E0                MOVX    A,@DPTR
010A 6006              JZ      ?C0052
                                           ; SOURCE LINE # 647
010C         ?C0224:
010C 900000      R     MOV     DPTR,#ret
010F E0                MOVX    A,@DPTR
0110 FF                MOV     R7,A
0111 22                RET     
0112         ?C0052:
                                           ; SOURCE LINE # 652
0112 7BFF              MOV     R3,#0FFH
0114 7A00        R     MOV     R2,#HIGH ?SC_166
0116 7900        R     MOV     R1,#LOW ?SC_166
0118 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 653
011B 900000      R     MOV     DPTR,#vid
011E E0                MOVX    A,@DPTR
011F FF                MOV     R7,A
0120 64C2              XRL     A,#0C2H
0122 6005              JZ      ?C0054
0124 EF                MOV     A,R7
0125 641C              XRL     A,#01CH
0127 702A              JNZ     ?C0053
0129         ?C0054:
                                           ; SOURCE LINE # 654
                                           ; SOURCE LINE # 655
0129 120000      R     LCALL   L?0272
                                           ; SOURCE LINE # 656
012C 7B90              MOV     R3,#090H
012E 120000      R     LCALL   L?0304
                                           ; SOURCE LINE # 665
0131 7D40              MOV     R5,#040H
0133 7F01              MOV     R7,#01H
0135 120000      R     LCALL   _SpiFlashCmd2
                                           ; SOURCE LINE # 666
0138 E4                CLR     A
0139 FF                MOV     R7,A
013A 120000      R     LCALL   _SpiFlashDmaReadLenByte
                                           ; SOURCE LINE # 667
013D 7B9B              MOV     R3,#09BH
013F 7D01              MOV     R5,#01H
0141 0F                INC     R7
                                           ; SOURCE LINE # 669
0142 120000      R     LCALL   L?0313
0145 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 679
0148 7D01              MOV     R5,#01H
014A 7F04              MOV     R7,#04H
                                           ; SOURCE LINE # 680
014C 120000      R     LCALL   L?0275
                                           ; SOURCE LINE # 681
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 49  

014F 7BA9              MOV     R3,#0A9H
                                           ; SOURCE LINE # 682
0151 802D              SJMP    ?C0226
0153         ?C0053:
                                           ; SOURCE LINE # 683
0153 900000      R     MOV     DPTR,#vid
0156 E0                MOVX    A,@DPTR
0157 64EF              XRL     A,#0EFH
0159 702C              JNZ     ?C0055
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 685
015B 120000      R     LCALL   L?0273
                                           ; SOURCE LINE # 686
015E 7BAE              MOV     R3,#0AEH
0160 120000      R     LCALL   L?0304
                                           ; SOURCE LINE # 688
0163 7B02              MOV     R3,#02H
0165 E4                CLR     A
0166 FD                MOV     R5,A
0167 7F01              MOV     R7,#01H
0169 120000      R     LCALL   _SpiFlashCmd3
                                           ; SOURCE LINE # 689
016C 7BB1              MOV     R3,#0B1H
016E 0D                INC     R5
016F 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 691
0171 120000      R     LCALL   L?0313
0174 120000      E     LCALL   _dPuts
                                           ; SOURCE LINE # 709
0177 7D01              MOV     R5,#01H
0179 7F04              MOV     R7,#04H
                                           ; SOURCE LINE # 710
017B 120000      R     LCALL   L?0275
                                           ; SOURCE LINE # 711
017E 7BC7              MOV     R3,#0C7H
0180         ?C0226:
0180 7A02              MOV     R2,#02H
0182 1D                DEC     R5
0183 0F                INC     R7
0184 120000      R     LCALL   _SpiFlashDmaStart
                                           ; SOURCE LINE # 712
0187         ?C0055:
                                           ; SOURCE LINE # 713
0187 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 714
0189         ?C0046:
0189 22                RET     
018A         L?0301:
018A 7A02              MOV     R2,#02H
018C 1D                DEC     R5
018D 1F                DEC     R7
018E 120000      R     LCALL   _SpiFlashDmaStart
0191 E500        E     MOV     A,regTW88+01H
0193 24D0              ADD     A,#0D0H
0195 22                RET     
0196         L?0304:
0196 7A02              MOV     R2,#02H
0198 1D                DEC     R5
0199 0F                INC     R7
019A 120000      R     LCALL   _SpiFlashDmaStart
019D 22                RET     
019E         L?0313:
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 50  

019E 7A02              MOV     R2,#02H
01A0 120000      R     LCALL   _SpiFlashDmaStart
01A3 7BFF              MOV     R3,#0FFH
01A5 7A00        R     MOV     R2,#HIGH ?SC_184
01A7 7900        R     MOV     R1,#LOW ?SC_184
01A9 22                RET     
             ; FUNCTION SPI_QUADInit (END)

             ; FUNCTION EE_PrintCurrInfo (BEGIN)
                                           ; SOURCE LINE # 747
                                           ; SOURCE LINE # 748
                                           ; SOURCE LINE # 752
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#block
0004 F0                MOVX    @DPTR,A
0005         ?C0057:
0005 900000      R     MOV     DPTR,#block
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A C3                CLR     C
000B 9408              SUBB    A,#08H
000D 504A              JNC     ?C0060
                                           ; SOURCE LINE # 753
000F 120000      R     LCALL   L?0235
0012 900000      R     MOV     DPTR,#sector_addr
0015 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 754
0018 7BFF              MOV     R3,#0FFH
001A 7A00        R     MOV     R2,#HIGH ?SC_198
001C 7900        R     MOV     R1,#LOW ?SC_198
001E 900000      R     MOV     DPTR,#block
0021 E0                MOVX    A,@DPTR
0022 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0025 F0                MOVX    @DPTR,A
0026 120000      R     LCALL   L?0250
0029 E0                MOVX    A,@DPTR
002A 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
002D F0                MOVX    @DPTR,A
002E 900000      R     MOV     DPTR,#block
0031 120000      R     LCALL   L?0246
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
003B CF                XCH     A,R7
003C F0                MOVX    @DPTR,A
003D A3                INC     DPTR
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
0040 900000      R     MOV     DPTR,#sector_addr
0043 120000      R     LCALL   L?0244
0046 FF                MOV     R7,A
0047 900000      E     MOV     DPTR,#?_Printf?BYTE+07H
004A 120000      E     LCALL   ?C?LSTXDATA
004D 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 759
0050 900000      R     MOV     DPTR,#block
0053 E0                MOVX    A,@DPTR
0054 04                INC     A
0055 F0                MOVX    @DPTR,A
0056 020000      R     LJMP    ?C0057
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 51  

                                           ; SOURCE LINE # 760
0059         ?C0060:
0059 22                RET     
             ; FUNCTION EE_PrintCurrInfo (END)

             ; FUNCTION EE_Format (BEGIN)
                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
                                           ; SOURCE LINE # 771
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_243
0004 7900        R     MOV     R1,#LOW ?SC_243
0006 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 777
0009 E4                CLR     A
000A 900000      R     MOV     DPTR,#block
000D F0                MOVX    @DPTR,A
000E         ?C0061:
000E 900000      R     MOV     DPTR,#block
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 C3                CLR     C
0014 9408              SUBB    A,#08H
0016 505B              JNC     ?C0062
                                           ; SOURCE LINE # 778
0018 7E00              MOV     R6,#00H
001A 7C40              MOV     R4,#040H
001C 7D00              MOV     R5,#00H
001E 120000      E     LCALL   ?C?LIMUL
0021 120000      R     LCALL   L?0238
0024 900000      R     MOV     DPTR,#spi_addr
0027 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 779
002A E4                CLR     A
002B 900000      R     MOV     DPTR,#j
002E F0                MOVX    @DPTR,A
002F         ?C0064:
                                           ; SOURCE LINE # 780
002F 900000      R     MOV     DPTR,#spi_addr
0032 120000      R     LCALL   L?0244
0035 FF                MOV     R7,A
0036 120000      R     LCALL   _SPI_SectorErase
                                           ; SOURCE LINE # 781
0039 900000      R     MOV     DPTR,#spi_addr
003C 120000      R     LCALL   L?0244
003F 2400              ADD     A,#00H
0041 FF                MOV     R7,A
0042 EE                MOV     A,R6
0043 3410              ADDC    A,#010H
0045 FE                MOV     R6,A
0046 E4                CLR     A
0047 3D                ADDC    A,R5
0048 FD                MOV     R5,A
0049 E4                CLR     A
004A 3C                ADDC    A,R4
004B FC                MOV     R4,A
004C 900000      R     MOV     DPTR,#spi_addr
004F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 782
0052 900000      R     MOV     DPTR,#j
0055 120000      R     LCALL   L?0311
0058 40D5              JC      ?C0064
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 52  

005A         ?C0065:
                                           ; SOURCE LINE # 783
005A 900000      R     MOV     DPTR,#block
005D 120000      R     LCALL   L?0249
0060 E4                CLR     A
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 784
0062 EF                MOV     A,R7
0063 120000      R     LCALL   L?0247
0066 E4                CLR     A
0067 F0                MOVX    @DPTR,A
0068 A3                INC     DPTR
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 785
006A 900000      R     MOV     DPTR,#block
006D E0                MOVX    A,@DPTR
006E 04                INC     A
006F F0                MOVX    @DPTR,A
0070 020000      R     LJMP    ?C0061
0073         ?C0062:
                                           ; SOURCE LINE # 787
0073 7BFF              MOV     R3,#0FFH
0075 7A00        R     MOV     R2,#HIGH ?SC_260
0077 7900        R     MOV     R1,#LOW ?SC_260
0079 020000      E     LJMP    _dPrintf
             ; FUNCTION EE_Format (END)

             ; FUNCTION _EE_Read (BEGIN)
                                           ; SOURCE LINE # 800
0000 900000      R     MOV     DPTR,#index
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 801
                                           ; SOURCE LINE # 809
0008 900000      R     MOV     DPTR,#index
000B E0                MOVX    A,@DPTR
000C FC                MOV     R4,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FD                MOV     R5,A
0010 AE04              MOV     R6,AR4
0012 7806              MOV     R0,#06H
0014         ?C0206:
0014 CE                XCH     A,R6
0015 C3                CLR     C
0016 13                RRC     A
0017 CE                XCH     A,R6
0018 13                RRC     A
0019 D8F9              DJNZ    R0,?C0206
001B FF                MOV     R7,A
001C 900000      R     MOV     DPTR,#block
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 810
0020 ED                MOV     A,R5
0021 543F              ANL     A,#03FH
0023 A3                INC     DPTR
                                           ; SOURCE LINE # 811
0024 120000      R     LCALL   L?0254
0027 900000      R     MOV     DPTR,#block
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 53  

002A 120000      R     LCALL   L?0236
002D 900000      R     MOV     DPTR,#sector_addr
0030 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 813
0033 900000      R     MOV     DPTR,#block
0036 120000      R     LCALL   L?0246
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B A3                INC     DPTR
003C E0                MOVX    A,@DPTR
003D 900000      R     MOV     DPTR,#remain
0040 CF                XCH     A,R7
0041 F0                MOVX    @DPTR,A
0042 A3                INC     DPTR
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
0045         ?C0068:
                                           ; SOURCE LINE # 814
0045 900000      R     MOV     DPTR,#remain
0048 E0                MOVX    A,@DPTR
0049 FE                MOV     R6,A
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D 4E                ORL     A,R6
004E 7003              JNZ     $ + 5H
0050 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 815
0053 C3                CLR     C
0054 EF                MOV     A,R7
0055 9480              SUBB    A,#080H
0057 EE                MOV     A,R6
0058 9400              SUBB    A,#00H
005A 4006              JC      ?C0070
005C A3                INC     DPTR
005D 7480              MOV     A,#080H
005F F0                MOVX    @DPTR,A
0060 8005              SJMP    ?C0071
0062         ?C0070:
                                           ; SOURCE LINE # 816
0062 900000      R     MOV     DPTR,#read_cnt
0065 EF                MOV     A,R7
0066 F0                MOVX    @DPTR,A
0067         ?C0071:
                                           ; SOURCE LINE # 820
0067 900000      R     MOV     DPTR,#remain
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F E4                CLR     A
0070 900000      R     MOV     DPTR,#sector_addr
0073 120000      R     LCALL   L?0258
0076 EA                MOV     A,R2
0077 3E                ADDC    A,R6
0078 120000      R     LCALL   L?0278
007B C007              PUSH    AR7
007D 900000      R     MOV     DPTR,#read_cnt
0080 E0                MOVX    A,@DPTR
0081 FB                MOV     R3,A
0082 D007              POP     AR7
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 54  

0084 C3                CLR     C
0085 EF                MOV     A,R7
0086 9B                SUBB    A,R3
0087 FF                MOV     R7,A
0088 EE                MOV     A,R6
0089 9400              SUBB    A,#00H
008B FE                MOV     R6,A
008C ED                MOV     A,R5
008D 9400              SUBB    A,#00H
008F FD                MOV     R5,A
0090 EC                MOV     A,R4
0091 9400              SUBB    A,#00H
0093 FC                MOV     R4,A
0094 120000      R     LCALL   L?0303
0097 EB                MOV     A,R3
0098 F0                MOVX    @DPTR,A
0099 120000      R     LCALL   L?0281
009C 120000      R     LCALL   _SpiFlashDmaRead2XMem
                                           ; SOURCE LINE # 823
009F 900000      R     MOV     DPTR,#read_cnt
00A2 E0                MOVX    A,@DPTR
00A3 FF                MOV     R7,A
00A4 7E00              MOV     R6,#00H
00A6 C3                CLR     C
00A7 900000      R     MOV     DPTR,#remain+01H
00AA E0                MOVX    A,@DPTR
00AB 9F                SUBB    A,R7
00AC F0                MOVX    @DPTR,A
00AD 900000      R     MOV     DPTR,#remain
00B0 E0                MOVX    A,@DPTR
00B1 9E                SUBB    A,R6
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 825
00B3 EF                MOV     A,R7
00B4 24FC              ADD     A,#0FCH
00B6 FF                MOV     R7,A
00B7 EE                MOV     A,R6
00B8 34FF              ADDC    A,#0FFH
00BA 900000      R     MOV     DPTR,#i
00BD F0                MOVX    @DPTR,A
00BE A3                INC     DPTR
00BF EF                MOV     A,R7
00C0 F0                MOVX    @DPTR,A
00C1         ?C0072:
00C1 900000      R     MOV     DPTR,#i
00C4 E0                MOVX    A,@DPTR
00C5 FE                MOV     R6,A
00C6 A3                INC     DPTR
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9 C3                CLR     C
00CA EE                MOV     A,R6
00CB 6480              XRL     A,#080H
00CD 9480              SUBB    A,#080H
00CF 5003              JNC     $ + 5H
00D1 020000      R     LJMP    ?C0068
                                           ; SOURCE LINE # 826
00D4 7400        R     MOV     A,#LOW SPI_Buffer
00D6 2F                ADD     A,R7
00D7 F582              MOV     DPL,A
00D9 7400        R     MOV     A,#HIGH SPI_Buffer
00DB 3E                ADDC    A,R6
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 55  

00DC F583              MOV     DPH,A
00DE E0                MOVX    A,@DPTR
00DF FF                MOV     R7,A
00E0 900000      R     MOV     DPTR,#sindex
00E3 E0                MOVX    A,@DPTR
00E4 FE                MOV     R6,A
00E5 EF                MOV     A,R7
00E6 6E                XRL     A,R6
00E7 7045              JNZ     ?C0074
                                           ; SOURCE LINE # 827
00E9         ?C0075:
                                           ; SOURCE LINE # 828
00E9 900000      R     MOV     DPTR,#i
00EC E0                MOVX    A,@DPTR
00ED FC                MOV     R4,A
00EE A3                INC     DPTR
00EF E0                MOVX    A,@DPTR
00F0 2400        R     ADD     A,#LOW SPI_Buffer+01H
00F2 F582              MOV     DPL,A
00F4 7400        R     MOV     A,#HIGH SPI_Buffer+01H
00F6 3C                ADDC    A,R4
00F7 F583              MOV     DPH,A
00F9 E0                MOVX    A,@DPTR
00FA 2F                ADD     A,R7
00FB FF                MOV     R7,A
00FC E4                CLR     A
00FD 33                RLC     A
00FE FE                MOV     R6,A
00FF EF                MOV     A,R7
0100 F4                CPL     A
0101 4E                ORL     A,R6
0102 702A              JNZ     ?C0074
0104 900000      R     MOV     DPTR,#i
0107 E0                MOVX    A,@DPTR
0108 FE                MOV     R6,A
0109 A3                INC     DPTR
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C 2400        R     ADD     A,#LOW SPI_Buffer+03H
010E F582              MOV     DPL,A
0110 7400        R     MOV     A,#HIGH SPI_Buffer+03H
0112 3E                ADDC    A,R6
0113 F583              MOV     DPH,A
0115 E0                MOVX    A,@DPTR
0116 FD                MOV     R5,A
0117 7400        R     MOV     A,#LOW SPI_Buffer+02H
0119 2F                ADD     A,R7
011A F582              MOV     DPL,A
011C 7400        R     MOV     A,#HIGH SPI_Buffer+02H
011E 3E                ADDC    A,R6
011F F583              MOV     DPH,A
0121 E0                MOVX    A,@DPTR
0122 FF                MOV     R7,A
0123 2D                ADD     A,R5
0124 FD                MOV     R5,A
0125 E4                CLR     A
0126 33                RLC     A
0127 FC                MOV     R4,A
0128 ED                MOV     A,R5
0129 F4                CPL     A
012A 4C                ORL     A,R4
012B 7001              JNZ     ?C0074
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 56  

                                           ; SOURCE LINE # 829
012D 22                RET     
                                           ; SOURCE LINE # 830
012E         ?C0074:
012E 900000      R     MOV     DPTR,#i+01H
0131 E0                MOVX    A,@DPTR
0132 24FC              ADD     A,#0FCH
0134 F0                MOVX    @DPTR,A
0135 900000      R     MOV     DPTR,#i
0138 E0                MOVX    A,@DPTR
0139 34FF              ADDC    A,#0FFH
013B F0                MOVX    @DPTR,A
013C 8083              SJMP    ?C0072
                                           ; SOURCE LINE # 831
013E         ?C0069:
                                           ; SOURCE LINE # 833
013E 7BFF              MOV     R3,#0FFH
0140 7A00        R     MOV     R2,#HIGH ?SC_299
0142 7900        R     MOV     R1,#LOW ?SC_299
0144 900000      R     MOV     DPTR,#index
0147 E0                MOVX    A,@DPTR
0148 FF                MOV     R7,A
0149 A3                INC     DPTR
014A E0                MOVX    A,@DPTR
014B 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
014E CF                XCH     A,R7
014F F0                MOVX    @DPTR,A
0150 A3                INC     DPTR
0151 EF                MOV     A,R7
0152 F0                MOVX    @DPTR,A
0153 900000      R     MOV     DPTR,#block
0156 E0                MOVX    A,@DPTR
0157 900000      E     MOV     DPTR,#?_ePrintf?BYTE+05H
015A F0                MOVX    @DPTR,A
015B 120000      R     LCALL   L?0250
015E E0                MOVX    A,@DPTR
015F 900000      E     MOV     DPTR,#?_ePrintf?BYTE+06H
0162 F0                MOVX    @DPTR,A
0163 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 835
0166 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 836
0168         ?C0077:
0168 22                RET     
             ; FUNCTION _EE_Read (END)

             ; FUNCTION _EE_Write (BEGIN)
                                           ; SOURCE LINE # 845
0000 900000      R     MOV     DPTR,#dat
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
;---- Variable 'index' assigned to Register 'R2/R3' ----
0005 AB07              MOV     R3,AR7
0007 AA06              MOV     R2,AR6
                                           ; SOURCE LINE # 846
                                           ; SOURCE LINE # 852
0009 EB                MOV     A,R3
000A 7806              MOV     R0,#06H
000C         ?C0207:
000C CE                XCH     A,R6
000D C3                CLR     C
000E 13                RRC     A
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 57  

000F CE                XCH     A,R6
0010 13                RRC     A
0011 D8F9              DJNZ    R0,?C0207
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#block
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 853
0018 EB                MOV     A,R3
0019 543F              ANL     A,#03FH
001B A3                INC     DPTR
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 855
001D EF                MOV     A,R7
001E 120000      R     LCALL   L?0247
0021 E0                MOVX    A,@DPTR
0022 FE                MOV     R6,A
0023 C3                CLR     C
0024 EE                MOV     A,R6
0025 9410              SUBB    A,#010H
0027 4045              JC      ?C0078
                                           ; SOURCE LINE # 856
0029 900000      R     MOV     DPTR,#block
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 7D01              MOV     R5,#01H
0030 120000      R     LCALL   _EE_CleanBlock
0033 900000      R     MOV     DPTR,#ret
0036 EF                MOV     A,R7
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 858
0038 6034              JZ      ?C0078
                                           ; SOURCE LINE # 859
003A 7BFF              MOV     R3,#0FFH
003C 7A00        R     MOV     R2,#HIGH ?SC_353
003E 7900        R     MOV     R1,#LOW ?SC_353
0040 120000      E     LCALL   _wPrintf
                                           ; SOURCE LINE # 860
0043 900000      R     MOV     DPTR,#ret
0046 E0                MOVX    A,@DPTR
0047 54F0              ANL     A,#0F0H
0049 6009              JZ      ?C0080
004B 7BFF              MOV     R3,#0FFH
004D 7A00        R     MOV     R2,#HIGH ?SC_363
004F 7900        R     MOV     R1,#LOW ?SC_363
0051 120000      E     LCALL   _wPrintf
0054         ?C0080:
                                           ; SOURCE LINE # 861
0054 900000      R     MOV     DPTR,#ret
0057 E0                MOVX    A,@DPTR
0058 540F              ANL     A,#0FH
005A 6009              JZ      ?C0081
005C 7BFF              MOV     R3,#0FFH
005E 7A00        R     MOV     R2,#HIGH ?SC_373
0060 7900        R     MOV     R1,#LOW ?SC_373
0062 120000      E     LCALL   _wPrintf
0065         ?C0081:
                                           ; SOURCE LINE # 862
0065 7BFF              MOV     R3,#0FFH
0067 7A00        R     MOV     R2,#HIGH ?SC_386
0069 7900        R     MOV     R1,#LOW ?SC_386
006B 120000      E     LCALL   _wPrintf
                                           ; SOURCE LINE # 863
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 58  

                                           ; SOURCE LINE # 864
006E         ?C0078:
                                           ; SOURCE LINE # 865
006E 900000      R     MOV     DPTR,#block
0071 120000      R     LCALL   L?0233
0074 900000      R     MOV     DPTR,#sector_addr
0077 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 868
007A 900000      R     MOV     DPTR,#sindex
007D E0                MOVX    A,@DPTR
007E 900000      R     MOV     DPTR,#SPI_Buffer
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 869
0082 F4                CPL     A
0083 A3                INC     DPTR
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 870
0085 900000      R     MOV     DPTR,#dat
0088 E0                MOVX    A,@DPTR
0089 900000      R     MOV     DPTR,#SPI_Buffer+02H
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 871
008D F4                CPL     A
008E A3                INC     DPTR
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 872
0090 120000      R     LCALL   L?0245
0093 120000      R     LCALL   L?0284
0096 900000      R     MOV     DPTR,#sector_addr
0099 120000      R     LCALL   L?0259
009C EA                MOV     A,R2
009D 3E                ADDC    A,R6
009E 120000      R     LCALL   L?0278
00A1 120000      R     LCALL   L?0287
00A4 A3                INC     DPTR
00A5 120000      R     LCALL   L?0266
00A8 120000      R     LCALL   _SPI_PageProgram
                                           ; SOURCE LINE # 874
00AB 120000      R     LCALL   L?0245
00AE E4                CLR     A
00AF 75F004            MOV     B,#04H
00B2 020000      E     LJMP    ?C?IILDX
             ; FUNCTION _EE_Write (END)

             ; FUNCTION EE_FindCurrInfo (BEGIN)
                                           ; SOURCE LINE # 890
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 896
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_399
0004 7900        R     MOV     R1,#LOW ?SC_399
0006 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 897
0009 7BFF              MOV     R3,#0FFH
000B 7A00        R     MOV     R2,#HIGH ?SC_416
000D 7900        R     MOV     R1,#LOW ?SC_416
000F 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
0012 120000      E     LCALL   ?C?LSTKXDATA
0015 00                DB      00H
0016 08                DB      08H
0017 00                DB      00H
0018 00                DB      00H
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 59  

0019 900000      E     MOV     DPTR,#?_ePrintf?BYTE+07H
001C 120000      E     LCALL   ?C?LSTKXDATA
001F 00                DB      00H
0020 09                DB      09H
0021 FF                DB      0FFH
0022 FF                DB      0FFH
0023 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 899
0026 E4                CLR     A
0027 900000      R     MOV     DPTR,#ret
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 906
002B 900000      R     MOV     DPTR,#i
002E F0                MOVX    @DPTR,A
002F         ?C0083:
002F 900000      R     MOV     DPTR,#i
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 C3                CLR     C
0035 9408              SUBB    A,#08H
0037 4003              JC      $ + 5H
0039 020000      R     LJMP    ?C0084
                                           ; SOURCE LINE # 910
003C 7400        R     MOV     A,#LOW EE_CurrBank
003E 2F                ADD     A,R7
003F 120000      R     LCALL   L?0251
0042 7404              MOV     A,#04H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 911
0045 E4                CLR     A
0046 900000      R     MOV     DPTR,#j
0049 F0                MOVX    @DPTR,A
004A         ?C0086:
                                           ; SOURCE LINE # 912
004A 900000      R     MOV     DPTR,#i
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F 120000      R     LCALL   L?0255
0052 A3                INC     DPTR
0053 120000      R     LCALL   L?0237
0056 900000      R     MOV     DPTR,#sector_addr
0059 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 916
005C 120000      R     LCALL   L?0242
005F FF                MOV     R7,A
0060 120000      R     LCALL   L?0265
0063 120000      R     LCALL   _SpiFlashDmaRead2XMem
                                           ; SOURCE LINE # 920
0066 900000      R     MOV     DPTR,#SPI_Buffer
0069 E0                MOVX    A,@DPTR
006A F4                CPL     A
006B 701E              JNZ     ?C0089
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F B4FF19            CJNE    A,#0FFH,?C0089
0072 A3                INC     DPTR
0073 E0                MOVX    A,@DPTR
0074 B4FF14            CJNE    A,#0FFH,?C0089
0077 A3                INC     DPTR
0078 E0                MOVX    A,@DPTR
0079 B4FF0F            CJNE    A,#0FFH,?C0089
                                           ; SOURCE LINE # 923
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 60  

                                           ; SOURCE LINE # 926
007C 900000      R     MOV     DPTR,#i
007F E0                MOVX    A,@DPTR
0080 120000      R     LCALL   L?0250
0083 E0                MOVX    A,@DPTR
0084 6404              XRL     A,#04H
0086 6076              JZ      ?C0088
                                           ; SOURCE LINE # 927
0088 020000      R     LJMP    ?C0087
008B         ?C0089:
                                           ; SOURCE LINE # 930
                                           ; SOURCE LINE # 940
008B 120000      R     LCALL   L?0242
008E 120000      R     LCALL   L?0263
0091 120000      R     LCALL   _SpiFlashDmaRead2XMem
                                           ; SOURCE LINE # 943
0094 900000      R     MOV     DPTR,#SPI_Buffer
0097 E0                MOVX    A,@DPTR
0098 700C              JNZ     ?C0092
009A A3                INC     DPTR
009B E0                MOVX    A,@DPTR
009C 7008              JNZ     ?C0092
009E A3                INC     DPTR
009F E0                MOVX    A,@DPTR
00A0 7004              JNZ     ?C0092
00A2 A3                INC     DPTR
00A3 E0                MOVX    A,@DPTR
00A4 6058              JZ      ?C0088
                                           ; SOURCE LINE # 946
                                           ; SOURCE LINE # 949
00A6         ?C0092:
                                           ; SOURCE LINE # 950
                                           ; SOURCE LINE # 951
00A6 900000      R     MOV     DPTR,#i
00A9 E0                MOVX    A,@DPTR
00AA 120000      R     LCALL   L?0250
00AD E0                MOVX    A,@DPTR
00AE FF                MOV     R7,A
00AF 6404              XRL     A,#04H
00B1 6030              JZ      ?C0094
                                           ; SOURCE LINE # 956
00B3 7BFF              MOV     R3,#0FFH
00B5 7A00        R     MOV     R2,#HIGH ?SC_429
00B7 7900        R     MOV     R1,#LOW ?SC_429
00B9 900000      R     MOV     DPTR,#i
00BC E0                MOVX    A,@DPTR
00BD 900000      E     MOV     DPTR,#?_wPrintf?BYTE+03H
00C0 F0                MOVX    @DPTR,A
00C1 A3                INC     DPTR
00C2 EF                MOV     A,R7
00C3 F0                MOVX    @DPTR,A
00C4 900000      R     MOV     DPTR,#j
00C7 E0                MOVX    A,@DPTR
00C8 900000      E     MOV     DPTR,#?_wPrintf?BYTE+05H
00CB F0                MOVX    @DPTR,A
00CC 120000      E     LCALL   _wPrintf
                                           ; SOURCE LINE # 957
00CF 900000      R     MOV     DPTR,#i
00D2 E0                MOVX    A,@DPTR
00D3 FF                MOV     R7,A
00D4 7401              MOV     A,#01H
00D6 A807              MOV     R0,AR7
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 61  

00D8 08                INC     R0
00D9 8002              SJMP    ?C0209
00DB         ?C0208:
00DB C3                CLR     C
00DC 33                RLC     A
00DD         ?C0209:
00DD D8FC              DJNZ    R0,?C0208
00DF 900000      R     MOV     DPTR,#ret
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 958
00E3         ?C0094:
                                           ; SOURCE LINE # 959
00E3 120000      R     LCALL   L?0248
00E6 E0                MOVX    A,@DPTR
00E7 7008              JNZ     ?C0095
00E9 900000      R     MOV     DPTR,#j
00EC E0                MOVX    A,@DPTR
00ED 6403              XRL     A,#03H
00EF 600D              JZ      ?C0088
                                           ; SOURCE LINE # 962
00F1         ?C0095:
                                           ; SOURCE LINE # 963
                                           ; SOURCE LINE # 964
00F1 900000      R     MOV     DPTR,#j
00F4 E0                MOVX    A,@DPTR
00F5 FE                MOV     R6,A
00F6 7400        R     MOV     A,#LOW EE_CurrBank
00F8 2F                ADD     A,R7
00F9 120000      R     LCALL   L?0251
00FC EE                MOV     A,R6
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 965
                                           ; SOURCE LINE # 966
                                           ; SOURCE LINE # 967
                                           ; SOURCE LINE # 968
00FE         ?C0088:
00FE 900000      R     MOV     DPTR,#j
0101 120000      R     LCALL   L?0311
0104 5003              JNC     $ + 5H
0106 020000      R     LJMP    ?C0086
0109         ?C0087:
                                           ; SOURCE LINE # 970
0109 120000      R     LCALL   L?0248
010C E0                MOVX    A,@DPTR
010D B40408            CJNE    A,#04H,?C0097
                                           ; SOURCE LINE # 971
0110 7400        R     MOV     A,#LOW EE_CurrBank
0112 2F                ADD     A,R7
0113 120000      R     LCALL   L?0251
0116 E4                CLR     A
0117 F0                MOVX    @DPTR,A
0118         ?C0097:
                                           ; SOURCE LINE # 976
0118 900000      R     MOV     DPTR,#i
011B 120000      R     LCALL   L?0233
011E 900000      R     MOV     DPTR,#sector_addr
0121 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 977
0124 E4                CLR     A
0125 900000      R     MOV     DPTR,#j
0128 F0                MOVX    @DPTR,A
0129         ?C0098:
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 62  

0129 900000      R     MOV     DPTR,#j
012C E0                MOVX    A,@DPTR
012D FF                MOV     R7,A
012E C3                CLR     C
012F 9420              SUBB    A,#020H
0131 506F              JNC     ?C0085
                                           ; SOURCE LINE # 981
0133 EF                MOV     A,R7
0134 75F080            MOV     B,#080H
0137 A4                MUL     AB
0138 120000      R     LCALL   L?0257
013B 120000      R     LCALL   L?0276
013E 120000      R     LCALL   L?0281
0141 120000      R     LCALL   L?0303
0144 7480              MOV     A,#080H
0146 F0                MOVX    @DPTR,A
0147 120000      R     LCALL   _SpiFlashDmaRead2XMem
                                           ; SOURCE LINE # 984
014A 900000      R     MOV     DPTR,#i
014D 120000      R     LCALL   L?0246
0150 7410              MOV     A,#010H
0152 F0                MOVX    @DPTR,A
0153 A3                INC     DPTR
0154 E4                CLR     A
0155 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 985
;---- Variable 'k' assigned to Register 'R5' ----
0156 FD                MOV     R5,A
0157         ?C0101:
0157 ED                MOV     A,R5
0158 C3                CLR     C
0159 9480              SUBB    A,#080H
015B 503C              JNC     ?C0100
                                           ; SOURCE LINE # 986
015D 7400        R     MOV     A,#LOW SPI_Buffer
015F 2D                ADD     A,R5
0160 120000      R     LCALL   L?0269
0163 E0                MOVX    A,@DPTR
0164 F4                CPL     A
0165 702C              JNZ     ?C0103
0167 7400        R     MOV     A,#LOW SPI_Buffer+01H
0169 2D                ADD     A,R5
016A 120000      R     LCALL   L?0297
016D B4FF23            CJNE    A,#0FFH,?C0103
                                           ; SOURCE LINE # 987
0170 900000      R     MOV     DPTR,#j
0173 E0                MOVX    A,@DPTR
0174 75F080            MOV     B,#080H
0177 A4                MUL     AB
0178 7C00              MOV     R4,#00H
017A 2D                ADD     A,R5
017B FF                MOV     R7,A
017C EC                MOV     A,R4
017D 35F0              ADDC    A,B
017F FE                MOV     R6,A
0180 900000      R     MOV     DPTR,#i
0183 120000      R     LCALL   L?0246
0186 EE                MOV     A,R6
0187 F0                MOVX    @DPTR,A
0188 A3                INC     DPTR
0189 EF                MOV     A,R7
018A F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 63  

                                           ; SOURCE LINE # 988
018B 900000      R     MOV     DPTR,#j
018E 74FE              MOV     A,#0FEH
0190 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 989
0191 8006              SJMP    ?C0100
                                           ; SOURCE LINE # 990
                                           ; SOURCE LINE # 991
0193         ?C0103:
0193 7404              MOV     A,#04H
0195 2D                ADD     A,R5
0196 FD                MOV     R5,A
0197 80BE              SJMP    ?C0101
                                           ; SOURCE LINE # 992
0199         ?C0100:
0199 900000      R     MOV     DPTR,#j
019C E0                MOVX    A,@DPTR
019D 04                INC     A
019E F0                MOVX    @DPTR,A
019F 020000      R     LJMP    ?C0098
                                           ; SOURCE LINE # 993
01A2         ?C0085:
01A2 900000      R     MOV     DPTR,#i
01A5 E0                MOVX    A,@DPTR
01A6 04                INC     A
01A7 F0                MOVX    @DPTR,A
01A8 020000      R     LJMP    ?C0083
01AB         ?C0084:
                                           ; SOURCE LINE # 995
01AB 120000      R     LCALL   EE_PrintCurrInfo
                                           ; SOURCE LINE # 997
01AE 900000      R     MOV     DPTR,#ret
01B1 E0                MOVX    A,@DPTR
01B2 6009              JZ      ?C0105
                                           ; SOURCE LINE # 998
01B4 7BFF              MOV     R3,#0FFH
01B6 7A00        R     MOV     R2,#HIGH ?SC_473
01B8 7900        R     MOV     R1,#LOW ?SC_473
01BA 120000      E     LCALL   _wPrintf
01BD         ?C0105:
                                           ; SOURCE LINE # 1000
01BD 900000      R     MOV     DPTR,#ret
01C0 E0                MOVX    A,@DPTR
01C1 FF                MOV     R7,A
                                           ; SOURCE LINE # 1001
01C2         ?C0106:
01C2 22                RET     
             ; FUNCTION EE_FindCurrInfo (END)

             ; FUNCTION _EE_ReadBlock (BEGIN)
                                           ; SOURCE LINE # 1019
0000 900000      R     MOV     DPTR,#block
0003 120000      R     LCALL   L?0293
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1020
                                           ; SOURCE LINE # 1027
0007 E4                CLR     A
0008 900000      R     MOV     DPTR,#i
000B F0                MOVX    @DPTR,A
000C         ?C0107:
000C 900000      R     MOV     DPTR,#i
000F E0                MOVX    A,@DPTR
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 64  

0010 FF                MOV     R7,A
0011 C3                CLR     C
0012 9440              SUBB    A,#040H
0014 500B              JNC     ?C0108
                                           ; SOURCE LINE # 1028
0016 900000      R     MOV     DPTR,#buf
0019 120000      R     LCALL   L?0280
001C 120000      R     LCALL   L?0295
001F 80EB              SJMP    ?C0107
0021         ?C0108:
                                           ; SOURCE LINE # 1029
0021 E4                CLR     A
0022 900000      R     MOV     DPTR,#i
0025 F0                MOVX    @DPTR,A
0026         ?C0110:
0026 900000      R     MOV     DPTR,#i
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B C3                CLR     C
002C 9408              SUBB    A,#08H
002E 5008              JNC     ?C0111
                                           ; SOURCE LINE # 1030
0030 120000      R     LCALL   L?0279
0033 120000      R     LCALL   L?0295
0036 80EE              SJMP    ?C0110
0038         ?C0111:
                                           ; SOURCE LINE # 1032
0038 900000      R     MOV     DPTR,#block
003B 120000      R     LCALL   L?0234
003E 900000      R     MOV     DPTR,#sector_addr
0041 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1033
0044 900000      R     MOV     DPTR,#block
0047 120000      R     LCALL   L?0246
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E 900000      R     MOV     DPTR,#remain
0051 CF                XCH     A,R7
0052 F0                MOVX    @DPTR,A
0053 A3                INC     DPTR
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1035
0056 E4                CLR     A
0057 900000      R     MOV     DPTR,#j
005A F0                MOVX    @DPTR,A
005B         ?C0113:
005B 900000      R     MOV     DPTR,#j
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 C3                CLR     C
0061 9420              SUBB    A,#020H
0063 4003              JC      $ + 5H
0065 020000      R     LJMP    ?C0123
                                           ; SOURCE LINE # 1036
0068 900000      R     MOV     DPTR,#remain
006B E0                MOVX    A,@DPTR
006C FC                MOV     R4,A
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 65  

006F FD                MOV     R5,A
0070 4C                ORL     A,R4
0071 7003              JNZ     $ + 5H
0073 020000      R     LJMP    ?C0123
                                           ; SOURCE LINE # 1037
0076         ?C0116:
                                           ; SOURCE LINE # 1038
0076 C3                CLR     C
0077 ED                MOV     A,R5
0078 9480              SUBB    A,#080H
007A EC                MOV     A,R4
007B 9400              SUBB    A,#00H
007D 900000      R     MOV     DPTR,#read_cnt
0080 4005              JC      ?C0117
0082 7480              MOV     A,#080H
0084 F0                MOVX    @DPTR,A
0085 8002              SJMP    ?C0118
0087         ?C0117:
                                           ; SOURCE LINE # 1039
0087 ED                MOV     A,R5
0088 F0                MOVX    @DPTR,A
0089         ?C0118:
                                           ; SOURCE LINE # 1044
0089 120000      R     LCALL   L?0317
008C 900000      R     MOV     DPTR,#sector_addr
008F 120000      R     LCALL   L?0259
0092 120000      R     LCALL   L?0276
0095 C007              PUSH    AR7
0097 120000      R     LCALL   L?0282
009A 900000      R     MOV     DPTR,#read_cnt
009D 120000      R     LCALL   L?0302
00A0 EF                MOV     A,R7
00A1 F0                MOVX    @DPTR,A
00A2 D007              POP     AR7
00A4 120000      R     LCALL   _SpiFlashDmaRead2XMem
                                           ; SOURCE LINE # 1047
00A7 900000      R     MOV     DPTR,#read_cnt
00AA E0                MOVX    A,@DPTR
00AB FF                MOV     R7,A
00AC C3                CLR     C
00AD 900000      R     MOV     DPTR,#remain+01H
00B0 E0                MOVX    A,@DPTR
00B1 9F                SUBB    A,R7
00B2 F0                MOVX    @DPTR,A
00B3 900000      R     MOV     DPTR,#remain
00B6 E0                MOVX    A,@DPTR
00B7 9400              SUBB    A,#00H
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1049
00BA E4                CLR     A
00BB 900000      R     MOV     DPTR,#i
00BE F0                MOVX    @DPTR,A
00BF         ?C0119:
00BF 900000      R     MOV     DPTR,#read_cnt
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 900000      R     MOV     DPTR,#i
00C7 E0                MOVX    A,@DPTR
00C8 C3                CLR     C
00C9 9F                SUBB    A,R7
00CA 505D              JNC     ?C0115
                                           ; SOURCE LINE # 1050
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 66  

00CC E0                MOVX    A,@DPTR
00CD FF                MOV     R7,A
00CE 2400        R     ADD     A,#LOW SPI_Buffer
00D0 120000      R     LCALL   L?0269
00D3 E0                MOVX    A,@DPTR
00D4 FE                MOV     R6,A
;---- Variable 'ch0' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 1051
00D5 120000      R     LCALL   L?0296
;---- Variable 'ch1' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1052
00D8 900000      R     MOV     DPTR,#i
00DB 120000      R     LCALL   L?0305
00DE FC                MOV     R4,A
;---- Variable 'ch2' assigned to Register 'R4' ----
                                           ; SOURCE LINE # 1053
;---- Variable 'ch3' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1055
00DF 120000      R     LCALL   L?0300
00E2 703B              JNZ     ?C0121
00E4 EC                MOV     A,R4
00E5 6D                XRL     A,R5
00E6 F4                CPL     A
00E7 7036              JNZ     ?C0121
                                           ; SOURCE LINE # 1056
00E9 EE                MOV     A,R6
00EA 13                RRC     A
00EB 13                RRC     A
00EC 13                RRC     A
00ED 541F              ANL     A,#01FH
00EF FF                MOV     R7,A
00F0 120000      R     LCALL   L?0279
00F3 2F                ADD     A,R7
00F4 F9                MOV     R1,A
00F5 E4                CLR     A
00F6 3A                ADDC    A,R2
00F7 FA                MOV     R2,A
00F8 120000      E     LCALL   ?C?CLDPTR
00FB FF                MOV     R7,A
00FC EE                MOV     A,R6
00FD 5407              ANL     A,#07H
00FF FD                MOV     R5,A
0100 7401              MOV     A,#01H
0102 A805              MOV     R0,AR5
0104 08                INC     R0
0105 8002              SJMP    ?C0211
0107         ?C0210:
0107 C3                CLR     C
0108 33                RLC     A
0109         ?C0211:
0109 D8FC              DJNZ    R0,?C0210
010B 4F                ORL     A,R7
010C 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1057
010F 900000      R     MOV     DPTR,#buf
0112 120000      R     LCALL   L?0280
0115 F9                MOV     R1,A
0116 8E82              MOV     DPL,R6
0118 758300            MOV     DPH,#00H
011B EC                MOV     A,R4
011C 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 1058
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 67  

                                           ; SOURCE LINE # 1059
011F         ?C0121:
011F 900000      R     MOV     DPTR,#i
0122 E0                MOVX    A,@DPTR
0123 2404              ADD     A,#04H
0125 F0                MOVX    @DPTR,A
0126 020000      R     LJMP    ?C0119
                                           ; SOURCE LINE # 1060
0129         ?C0115:
0129 900000      R     MOV     DPTR,#j
012C E0                MOVX    A,@DPTR
012D 04                INC     A
012E F0                MOVX    @DPTR,A
012F 020000      R     LJMP    ?C0113
                                           ; SOURCE LINE # 1061
0132         ?C0123:
0132 22                RET     
             ; FUNCTION _EE_ReadBlock (END)

             ; FUNCTION _EE_FillLostItems (BEGIN)
                                           ; SOURCE LINE # 1069
0000 900000      R     MOV     DPTR,#bank
0003 ED                MOV     A,R5
0004 120000      R     LCALL   L?0294
;---- Variable 'block' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1070
                                           ; SOURCE LINE # 1077
0007 120000      R     LCALL   L?0254
000A 900000      R     MOV     DPTR,#bank
000D 120000      R     LCALL   L?0237
0010 900000      R     MOV     DPTR,#sector_addr
0013 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1078
0016 900000      R     MOV     DPTR,#remain
0019 7410              MOV     A,#010H
001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1080
001F 900000      R     MOV     DPTR,#j
0022 F0                MOVX    @DPTR,A
0023         ?C0124:
0023 900000      R     MOV     DPTR,#j
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 C3                CLR     C
0029 9420              SUBB    A,#020H
002B 4003              JC      $ + 5H
002D 020000      R     LJMP    ?C0136
                                           ; SOURCE LINE # 1081
0030 900000      R     MOV     DPTR,#remain
0033 E0                MOVX    A,@DPTR
0034 FC                MOV     R4,A
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FD                MOV     R5,A
0038 4C                ORL     A,R4
0039 7003              JNZ     $ + 5H
003B 020000      R     LJMP    ?C0136
                                           ; SOURCE LINE # 1082
003E         ?C0127:
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 68  

                                           ; SOURCE LINE # 1083
003E C3                CLR     C
003F ED                MOV     A,R5
0040 9480              SUBB    A,#080H
0042 EC                MOV     A,R4
0043 9400              SUBB    A,#00H
0045 900000      R     MOV     DPTR,#read_cnt
0048 4005              JC      ?C0128
004A 7480              MOV     A,#080H
004C F0                MOVX    @DPTR,A
004D 8002              SJMP    ?C0129
004F         ?C0128:
                                           ; SOURCE LINE # 1084
004F ED                MOV     A,R5
0050 F0                MOVX    @DPTR,A
0051         ?C0129:
                                           ; SOURCE LINE # 1088
0051 120000      R     LCALL   L?0317
0054 900000      R     MOV     DPTR,#sector_addr
0057 120000      R     LCALL   L?0259
005A 120000      R     LCALL   L?0277
005D C007              PUSH    AR7
005F 120000      R     LCALL   L?0282
0062 900000      R     MOV     DPTR,#read_cnt
0065 120000      R     LCALL   L?0302
0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
006A D007              POP     AR7
006C 120000      R     LCALL   _SpiFlashDmaRead2XMem
                                           ; SOURCE LINE # 1091
006F 900000      R     MOV     DPTR,#read_cnt
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 C3                CLR     C
0075 900000      R     MOV     DPTR,#remain+01H
0078 E0                MOVX    A,@DPTR
0079 9F                SUBB    A,R7
007A F0                MOVX    @DPTR,A
007B 900000      R     MOV     DPTR,#remain
007E E0                MOVX    A,@DPTR
007F 9400              SUBB    A,#00H
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1093
0082 E4                CLR     A
0083 900000      R     MOV     DPTR,#i
0086 F0                MOVX    @DPTR,A
0087         ?C0130:
0087 900000      R     MOV     DPTR,#read_cnt
008A E0                MOVX    A,@DPTR
008B FF                MOV     R7,A
008C 900000      R     MOV     DPTR,#i
008F E0                MOVX    A,@DPTR
0090 C3                CLR     C
0091 9F                SUBB    A,R7
0092 4003              JC      $ + 5H
0094 020000      R     LJMP    ?C0126
                                           ; SOURCE LINE # 1094
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 2400        R     ADD     A,#LOW SPI_Buffer
009B 120000      R     LCALL   L?0269
009E E0                MOVX    A,@DPTR
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 69  

009F FE                MOV     R6,A
00A0 900000      R     MOV     DPTR,#ch0
00A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1095
00A4 120000      R     LCALL   L?0296
;---- Variable 'ch1' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1096
00A7 900000      R     MOV     DPTR,#i
00AA 120000      R     LCALL   L?0305
00AD 900000      R     MOV     DPTR,#ch2
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1097
;---- Variable 'ch3' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1099
00B1 120000      R     LCALL   L?0300
00B4 7063              JNZ     ?C0132
00B6 900000      R     MOV     DPTR,#ch2
00B9 E0                MOVX    A,@DPTR
00BA 6D                XRL     A,R5
00BB F4                CPL     A
00BC 705B              JNZ     ?C0132
                                           ; SOURCE LINE # 1103
00BE 900000      R     MOV     DPTR,#ch0
00C1 E0                MOVX    A,@DPTR
00C2 900000      R     MOV     DPTR,#mask
00C5 120000      R     LCALL   L?0270
00C8 8005              SJMP    ?C0213
00CA         ?C0212:
00CA C3                CLR     C
00CB 33                RLC     A
00CC CE                XCH     A,R6
00CD 33                RLC     A
00CE CE                XCH     A,R6
00CF         ?C0213:
00CF D8F9              DJNZ    R0,?C0212
00D1 FF                MOV     R7,A
00D2 EE                MOV     A,R6
00D3 5C                ANL     A,R4
00D4 FE                MOV     R6,A
00D5 EF                MOV     A,R7
00D6 5D                ANL     A,R5
00D7 4E                ORL     A,R6
00D8 703F              JNZ     ?C0132
                                           ; SOURCE LINE # 1105
00DA         ?C0134:
                                           ; SOURCE LINE # 1106
                                           ; SOURCE LINE # 1107
00DA 900000      R     MOV     DPTR,#ch0
00DD E0                MOVX    A,@DPTR
00DE FF                MOV     R7,A
00DF 13                RRC     A
00E0 13                RRC     A
00E1 13                RRC     A
00E2 541F              ANL     A,#01FH
00E4 29                ADD     A,R1
00E5 F9                MOV     R1,A
00E6 E4                CLR     A
00E7 3A                ADDC    A,R2
00E8 FA                MOV     R2,A
00E9 120000      E     LCALL   ?C?CLDPTR
00EC FE                MOV     R6,A
00ED EF                MOV     A,R7
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 70  

00EE 5407              ANL     A,#07H
00F0 FF                MOV     R7,A
00F1 7401              MOV     A,#01H
00F3 A807              MOV     R0,AR7
00F5 08                INC     R0
00F6 8002              SJMP    ?C0215
00F8         ?C0214:
00F8 C3                CLR     C
00F9 33                RLC     A
00FA         ?C0215:
00FA D8FC              DJNZ    R0,?C0214
00FC 4E                ORL     A,R6
00FD 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1108
0100 900000      R     MOV     DPTR,#ch2
0103 E0                MOVX    A,@DPTR
0104 FF                MOV     R7,A
0105 900000      R     MOV     DPTR,#buf
0108 120000      R     LCALL   L?0280
010B F9                MOV     R1,A
010C 900000      R     MOV     DPTR,#ch0
010F E0                MOVX    A,@DPTR
0110 F582              MOV     DPL,A
0112 758300            MOV     DPH,#00H
0115 EF                MOV     A,R7
0116 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 1109
                                           ; SOURCE LINE # 1110
                                           ; SOURCE LINE # 1111
0119         ?C0132:
0119 900000      R     MOV     DPTR,#i
011C E0                MOVX    A,@DPTR
011D 2404              ADD     A,#04H
011F F0                MOVX    @DPTR,A
0120 020000      R     LJMP    ?C0130
                                           ; SOURCE LINE # 1112
0123         ?C0126:
0123 900000      R     MOV     DPTR,#j
0126 E0                MOVX    A,@DPTR
0127 04                INC     A
0128 F0                MOVX    @DPTR,A
0129 020000      R     LJMP    ?C0124
                                           ; SOURCE LINE # 1113
012C         ?C0136:
012C 22                RET     
             ; FUNCTION _EE_FillLostItems (END)

             ; FUNCTION _EE_WriteBlock (BEGIN)
                                           ; SOURCE LINE # 1121
0000 900000      R     MOV     DPTR,#block
0003 120000      R     LCALL   L?0293
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1122
                                           ; SOURCE LINE # 1131
0007 900000      R     MOV     DPTR,#block
000A 120000      R     LCALL   L?0234
000D 900000      R     MOV     DPTR,#sector_addr
0010 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1134
0013 E4                CLR     A
0014 900000      R     MOV     DPTR,#wptr
0017 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 71  

                                           ; SOURCE LINE # 1135
0018 900000      R     MOV     DPTR,#i
001B F0                MOVX    @DPTR,A
001C         ?C0137:
                                           ; SOURCE LINE # 1136
001C E4                CLR     A
001D 900000      R     MOV     DPTR,#bptr
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1137
0021 900000      R     MOV     DPTR,#j
0024 F0                MOVX    @DPTR,A
0025         ?C0140:
0025 900000      R     MOV     DPTR,#j
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A C3                CLR     C
002B 9420              SUBB    A,#020H
002D 5071              JNC     ?C0141
                                           ; SOURCE LINE # 1138
002F 900000      R     MOV     DPTR,#i
0032 E0                MOVX    A,@DPTR
0033 C4                SWAP    A
0034 33                RLC     A
0035 54E0              ANL     A,#0E0H
0037 FE                MOV     R6,A
0038 EF                MOV     A,R7
0039 2E                ADD     A,R6
003A 900000      R     MOV     DPTR,#idx
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1140
003E E0                MOVX    A,@DPTR
003F 900000      R     MOV     DPTR,#mask
0042 120000      R     LCALL   L?0270
0045 8005              SJMP    ?C0217
0047         ?C0216:
0047 C3                CLR     C
0048 33                RLC     A
0049 CE                XCH     A,R6
004A 33                RLC     A
004B CE                XCH     A,R6
004C         ?C0217:
004C D8F9              DJNZ    R0,?C0216
004E FF                MOV     R7,A
004F EE                MOV     A,R6
0050 5C                ANL     A,R4
0051 FE                MOV     R6,A
0052 EF                MOV     A,R7
0053 5D                ANL     A,R5
0054 4E                ORL     A,R6
0055 6040              JZ      ?C0142
                                           ; SOURCE LINE # 1142
0057 900000      R     MOV     DPTR,#idx
005A E0                MOVX    A,@DPTR
005B 120000      R     LCALL   L?0268
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1143
0060 EF                MOV     A,R7
0061 120000      R     LCALL   L?0267
0064 EF                MOV     A,R7
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1144
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 72  

0066 900000      R     MOV     DPTR,#buf
0069 120000      R     LCALL   L?0280
006C F9                MOV     R1,A
006D 900000      R     MOV     DPTR,#idx
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
0072 F582              MOV     DPL,A
0074 758300            MOV     DPH,#00H
0077 120000      E     LCALL   ?C?CLDOPTR
007A FE                MOV     R6,A
007B 900000      R     MOV     DPTR,#bptr
007E E0                MOVX    A,@DPTR
007F FD                MOV     R5,A
0080 04                INC     A
0081 F0                MOVX    @DPTR,A
0082 7400        R     MOV     A,#LOW SPI_Buffer
0084 2D                ADD     A,R5
0085 120000      R     LCALL   L?0269
0088 EE                MOV     A,R6
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1145
008A 8F82              MOV     DPL,R7
008C 758300            MOV     DPH,#00H
008F 120000      E     LCALL   ?C?CLDOPTR
0092 120000      R     LCALL   L?0267
0095 EF                MOV     A,R7
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1146
                                           ; SOURCE LINE # 1147
0097         ?C0142:
0097 900000      R     MOV     DPTR,#j
009A E0                MOVX    A,@DPTR
009B 04                INC     A
009C F0                MOVX    @DPTR,A
009D 020000      R     LJMP    ?C0140
00A0         ?C0141:
                                           ; SOURCE LINE # 1148
00A0 900000      R     MOV     DPTR,#bptr
00A3 E0                MOVX    A,@DPTR
00A4 6032              JZ      ?C0139
                                           ; SOURCE LINE # 1152
                                           ; SOURCE LINE # 1153
00A6         ?C0144:
                                           ; SOURCE LINE # 1154
00A6 900000      R     MOV     DPTR,#wptr
00A9 E0                MOVX    A,@DPTR
00AA FF                MOV     R7,A
00AB E4                CLR     A
00AC FC                MOV     R4,A
00AD FD                MOV     R5,A
00AE FE                MOV     R6,A
00AF 900000      R     MOV     DPTR,#sector_addr
00B2 120000      R     LCALL   L?0259
00B5 EE                MOV     A,R6
00B6 3A                ADDC    A,R2
00B7 120000      R     LCALL   L?0278
00BA 120000      R     LCALL   L?0287
00BD 900000      R     MOV     DPTR,#bptr
00C0 E0                MOVX    A,@DPTR
00C1 FB                MOV     R3,A
00C2 900000      R     MOV     DPTR,#?_SPI_PageProgram?BYTE+06H
00C5 E4                CLR     A
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 73  

00C6 F0                MOVX    @DPTR,A
00C7 A3                INC     DPTR
00C8 EB                MOV     A,R3
00C9 F0                MOVX    @DPTR,A
00CA 120000      R     LCALL   _SPI_PageProgram
                                           ; SOURCE LINE # 1155
00CD 900000      R     MOV     DPTR,#bptr
00D0 E0                MOVX    A,@DPTR
00D1 FF                MOV     R7,A
00D2 900000      R     MOV     DPTR,#wptr
00D5 E0                MOVX    A,@DPTR
00D6 2F                ADD     A,R7
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1156
00D8         ?C0139:
00D8 900000      R     MOV     DPTR,#i
00DB E0                MOVX    A,@DPTR
00DC 04                INC     A
00DD F0                MOVX    @DPTR,A
00DE E0                MOVX    A,@DPTR
00DF C3                CLR     C
00E0 9402              SUBB    A,#02H
00E2 5003              JNC     $ + 5H
00E4 020000      R     LJMP    ?C0137
00E7         ?C0138:
                                           ; SOURCE LINE # 1157
00E7 900000      R     MOV     DPTR,#wptr
00EA E0                MOVX    A,@DPTR
00EB FF                MOV     R7,A
00EC 900000      R     MOV     DPTR,#block
00EF 120000      R     LCALL   L?0246
00F2 E4                CLR     A
00F3 F0                MOVX    @DPTR,A
00F4 A3                INC     DPTR
00F5 EF                MOV     A,R7
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1158
00F7 22                RET     
             ; FUNCTION _EE_WriteBlock (END)

             ; FUNCTION EE_RepairMoveDone (BEGIN)
                                           ; SOURCE LINE # 1169
                                           ; SOURCE LINE # 1170
                                           ; SOURCE LINE # 1175
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_489
0004 7900        R     MOV     R1,#LOW ?SC_489
0006 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1177
0009 E4                CLR     A
000A 900000      R     MOV     DPTR,#block
000D F0                MOVX    @DPTR,A
000E         ?C0146:
000E 900000      R     MOV     DPTR,#block
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 C3                CLR     C
0014 9404              SUBB    A,#04H
0016 4003              JC      $ + 5H
0018 020000      R     LJMP    ?C0151
                                           ; SOURCE LINE # 1178
001B 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 74  

001D 7A00        R     MOV     R2,#HIGH ?SC_504
001F 7900        R     MOV     R1,#LOW ?SC_504
0021 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
0026 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1179
0029 900000      R     MOV     DPTR,#block
002C 120000      R     LCALL   L?0249
002F E0                MOVX    A,@DPTR
0030 2403              ADD     A,#03H
0032 5403              ANL     A,#03H
0034 FE                MOV     R6,A
0035 900000      R     MOV     DPTR,#prev_bank
0038 F0                MOVX    @DPTR,A
0039 FD                MOV     R5,A
                                           ; SOURCE LINE # 1180
003A 120000      R     LCALL   _EE_CheckMoveDoneBank
003D 900000      R     MOV     DPTR,#ret
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1181
0042 120000      R     LCALL   L?0306
0045 120000      R     LCALL   _EE_CheckBlankBank
0048 900000      R     MOV     DPTR,#ret
004B E0                MOVX    A,@DPTR
004C 2F                ADD     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1182
004E E0                MOVX    A,@DPTR
004F 7BFF              MOV     R3,#0FFH
0051 7045              JNZ     ?C0149
                                           ; SOURCE LINE # 1183
0053 7A00        R     MOV     R2,#HIGH ?SC_514
0055 7900        R     MOV     R1,#LOW ?SC_514
0057 900000      R     MOV     DPTR,#prev_bank
005A E0                MOVX    A,@DPTR
005B 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
005E F0                MOVX    @DPTR,A
005F 900000      R     MOV     DPTR,#block
0062 E0                MOVX    A,@DPTR
0063 120000      R     LCALL   L?0250
0066 E0                MOVX    A,@DPTR
0067 900000      E     MOV     DPTR,#?_dPrintf?BYTE+04H
006A F0                MOVX    @DPTR,A
006B 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1186
006E 900000      R     MOV     DPTR,#block
0071 120000      R     LCALL   L?0260
0074 120000      R     LCALL   _EE_ReadBlock
                                           ; SOURCE LINE # 1187
0077 120000      R     LCALL   L?0306
007A 900000      R     MOV     DPTR,#?_EE_FillLostItems?BYTE+05H
007D 120000      R     LCALL   L?0262
0080 120000      R     LCALL   _EE_FillLostItems
                                           ; SOURCE LINE # 1188
0083 900000      R     MOV     DPTR,#block
0086 E0                MOVX    A,@DPTR
0087 900000      R     MOV     DPTR,#?_EE_WriteBlock?BYTE+04H
008A 120000      R     LCALL   L?0261
008D 120000      R     LCALL   _EE_WriteBlock
                                           ; SOURCE LINE # 1189
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 75  

0090 120000      R     LCALL   L?0307
0093 120000      R     LCALL   _EE_WriteMoveDone
                                           ; SOURCE LINE # 1190
0096 8007              SJMP    ?C0148
0098         ?C0149:
                                           ; SOURCE LINE # 1191
                                           ; SOURCE LINE # 1192
0098 7A00        R     MOV     R2,#HIGH ?SC_531
009A 7900        R     MOV     R1,#LOW ?SC_531
009C 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1193
                                           ; SOURCE LINE # 1194
009F         ?C0148:
009F 900000      R     MOV     DPTR,#block
00A2 E0                MOVX    A,@DPTR
00A3 04                INC     A
00A4 F0                MOVX    @DPTR,A
00A5 020000      R     LJMP    ?C0146
                                           ; SOURCE LINE # 1195
00A8         ?C0151:
00A8 22                RET     
             ; FUNCTION EE_RepairMoveDone (END)

             ; FUNCTION _EE_CheckBlankBank (BEGIN)
                                           ; SOURCE LINE # 1200
0000 900000      R     MOV     DPTR,#bank
;---- Variable 'block' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1201
                                           ; SOURCE LINE # 1203
0003 120000      R     LCALL   L?0252
0006 120000      R     LCALL   L?0237
;---- Variable 'sector_addr' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 1208
0009 120000      R     LCALL   L?0282
000C 120000      R     LCALL   L?0265
000F 120000      R     LCALL   _SpiFlashDmaRead2XMem
                                           ; SOURCE LINE # 1211
0012 900000      R     MOV     DPTR,#SPI_Buffer
0015 E0                MOVX    A,@DPTR
0016 B4FF12            CJNE    A,#0FFH,?C0152
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B B4FF0D            CJNE    A,#0FFH,?C0152
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 B4FF08            CJNE    A,#0FFH,?C0152
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 B4FF03            CJNE    A,#0FFH,?C0152
                                           ; SOURCE LINE # 1212
0028 7F01              MOV     R7,#01H
002A 22                RET     
002B         ?C0152:
                                           ; SOURCE LINE # 1213
002B 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1214
002D         ?C0153:
002D 22                RET     
             ; FUNCTION _EE_CheckBlankBank (END)

             ; FUNCTION _EE_CheckMoveDoneBank (BEGIN)
                                           ; SOURCE LINE # 1218
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 76  

0000 900000      R     MOV     DPTR,#bank
;---- Variable 'block' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1219
                                           ; SOURCE LINE # 1221
0003 120000      R     LCALL   L?0252
0006 120000      R     LCALL   L?0237
;---- Variable 'sector_addr' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 1226
0009 120000      R     LCALL   L?0282
000C EF                MOV     A,R7
000D 120000      R     LCALL   L?0263
0010 120000      R     LCALL   _SpiFlashDmaRead2XMem
                                           ; SOURCE LINE # 1229
0013 900000      R     MOV     DPTR,#SPI_Buffer
0016 E0                MOVX    A,@DPTR
0017 700F              JNZ     ?C0154
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B 700B              JNZ     ?C0154
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F 7007              JNZ     ?C0154
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
0023 7003              JNZ     ?C0154
                                           ; SOURCE LINE # 1230
0025 7F01              MOV     R7,#01H
0027 22                RET     
0028         ?C0154:
                                           ; SOURCE LINE # 1231
0028 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1232
002A         ?C0155:
002A 22                RET     
             ; FUNCTION _EE_CheckMoveDoneBank (END)

             ; FUNCTION _EE_WriteMoveDone (BEGIN)
                                           ; SOURCE LINE # 1237
0000 900000      R     MOV     DPTR,#bank
;---- Variable 'block' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1238
                                           ; SOURCE LINE # 1240
0003 120000      R     LCALL   L?0253
0006 120000      R     LCALL   L?0237
;---- Variable 'sector_addr' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 1243
0009 E4                CLR     A
000A 900000      R     MOV     DPTR,#SPI_Buffer
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1244
000E A3                INC     DPTR
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1245
0010 A3                INC     DPTR
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1246
0012 A3                INC     DPTR
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1247
0014 EF                MOV     A,R7
0015 24FC              ADD     A,#0FCH
0017 FF                MOV     R7,A
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 77  

0018 EE                MOV     A,R6
0019 340F              ADDC    A,#0FH
001B FE                MOV     R6,A
001C E4                CLR     A
001D 3D                ADDC    A,R5
001E FD                MOV     R5,A
001F E4                CLR     A
0020 3C                ADDC    A,R4
0021 FC                MOV     R4,A
0022 120000      R     LCALL   L?0288
0025 A3                INC     DPTR
0026 120000      R     LCALL   L?0266
0029 020000      R     LJMP    _SPI_PageProgram
             ; FUNCTION _EE_WriteMoveDone (END)

             ; FUNCTION _EE_MoveBank (BEGIN)
                                           ; SOURCE LINE # 1256
0000 900000      R     MOV     DPTR,#block
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1257
                                           ; SOURCE LINE # 1260
0005 E4                CLR     A
0006 900000      R     MOV     DPTR,#ret
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1266
000A 7B01              MOV     R3,#01H
000C 900000      R     MOV     DPTR,#?_EE_ReadBlock?BYTE+04H
000F 04                INC     A
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 7400        R     MOV     A,#HIGH EE_mask
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 7400        R     MOV     A,#LOW EE_mask
0018 F0                MOVX    @DPTR,A
0019 7A00        R     MOV     R2,#HIGH EE_buf
001B 7900        R     MOV     R1,#LOW EE_buf
001D 120000      R     LCALL   _EE_ReadBlock
                                           ; SOURCE LINE # 1269
0020 900000      R     MOV     DPTR,#block
0023 120000      R     LCALL   L?0249
0026 E0                MOVX    A,@DPTR
0027 900000      R     MOV     DPTR,#prev_bank
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1270
002B 04                INC     A
002C 5403              ANL     A,#03H
002E FE                MOV     R6,A
002F 7400        R     MOV     A,#LOW EE_CurrBank
0031 2F                ADD     A,R7
0032 120000      R     LCALL   L?0251
0035 EE                MOV     A,R6
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1271
0037 900000      R     MOV     DPTR,#block
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 120000      R     LCALL   L?0247
003F E4                CLR     A
0040 F0                MOVX    @DPTR,A
0041 A3                INC     DPTR
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 78  

0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1273
0043 900000      R     MOV     DPTR,#block
0046 E0                MOVX    A,@DPTR
0047 120000      R     LCALL   L?0250
004A E0                MOVX    A,@DPTR
004B FD                MOV     R5,A
004C 120000      R     LCALL   _EE_CheckBlankBank
004F 900000      R     MOV     DPTR,#ret
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1274
0054 700F              JNZ     ?C0157
                                           ; SOURCE LINE # 1275
0056 900000      R     MOV     DPTR,#block
0059 120000      R     LCALL   L?0234
;---- Variable 'sector_addr' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 1276
005C 120000      R     LCALL   _SPI_SectorErase
                                           ; SOURCE LINE # 1277
005F 900000      R     MOV     DPTR,#ret
0062 7401              MOV     A,#01H
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1278
0065         ?C0157:
                                           ; SOURCE LINE # 1280
0065 900000      R     MOV     DPTR,#block
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A 900000      R     MOV     DPTR,#?_EE_WriteBlock?BYTE+04H
006D 120000      R     LCALL   L?0262
0070 120000      R     LCALL   _EE_WriteBlock
                                           ; SOURCE LINE # 1282
0073 900000      R     MOV     DPTR,#block
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 A3                INC     DPTR
0079 E0                MOVX    A,@DPTR
007A FD                MOV     R5,A
007B 120000      R     LCALL   _EE_WriteMoveDone
                                           ; SOURCE LINE # 1284
007E 900000      R     MOV     DPTR,#ret
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
                                           ; SOURCE LINE # 1285
0083         ?C0158:
0083 22                RET     
             ; FUNCTION _EE_MoveBank (END)

             ; FUNCTION _EE_CleanBlock (BEGIN)
                                           ; SOURCE LINE # 1305
0000 900000      R     MOV     DPTR,#block
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1306
                                           ; SOURCE LINE # 1310
0008 E4                CLR     A
0009 900000      R     MOV     DPTR,#ret
000C F0                MOVX    @DPTR,A
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 79  

                                           ; SOURCE LINE # 1317
000D ED                MOV     A,R5
000E 6402              XRL     A,#02H
0010 600E              JZ      ?C0160
0012 900000      R     MOV     DPTR,#block
0015 120000      R     LCALL   L?0246
0018 E0                MOVX    A,@DPTR
0019 FE                MOV     R6,A
001A C3                CLR     C
001B EE                MOV     A,R6
001C 9402              SUBB    A,#02H
001E 4018              JC      ?C0159
0020         ?C0160:
                                           ; SOURCE LINE # 1318
0020 900000      R     MOV     DPTR,#ret
0023 E0                MOVX    A,@DPTR
0024 04                INC     A
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1321
0026 900000      R     MOV     DPTR,#block
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 120000      R     LCALL   _EE_MoveBank
002E EF                MOV     A,R7
002F 6007              JZ      ?C0159
                                           ; SOURCE LINE # 1322
0031 900000      R     MOV     DPTR,#ret
0034 E0                MOVX    A,@DPTR
0035 2410              ADD     A,#010H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1323
0038         ?C0159:
                                           ; SOURCE LINE # 1325
0038 900000      R     MOV     DPTR,#fSkipErase
003B E0                MOVX    A,@DPTR
003C 6003              JZ      ?C0162
                                           ; SOURCE LINE # 1327
003E 020000      R     LJMP    ?C0227
0041         ?C0162:
                                           ; SOURCE LINE # 1330
0041 900000      R     MOV     DPTR,#i
0044 7401              MOV     A,#01H
0046 F0                MOVX    @DPTR,A
0047         ?C0164:
0047 900000      R     MOV     DPTR,#i
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C C3                CLR     C
004D 9404              SUBB    A,#04H
004F 505B              JNC     ?C0165
                                           ; SOURCE LINE # 1331
0051 900000      R     MOV     DPTR,#block
0054 E0                MOVX    A,@DPTR
0055 FE                MOV     R6,A
0056 120000      R     LCALL   L?0250
0059 E0                MOVX    A,@DPTR
005A 2F                ADD     A,R7
005B 5403              ANL     A,#03H
005D 900000      R     MOV     DPTR,#j
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1332
0061 EE                MOV     A,R6
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 80  

0062 FF                MOV     R7,A
0063 120000      R     LCALL   L?0255
0066 120000      R     LCALL   L?0237
0069 900000      R     MOV     DPTR,#sector_addr
006C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1337
006F 900000      R     MOV     DPTR,#sector_addr
0072 120000      R     LCALL   L?0243
0075 FF                MOV     R7,A
0076 120000      R     LCALL   L?0265
0079 120000      R     LCALL   _SpiFlashDmaRead2XMem
                                           ; SOURCE LINE # 1340
007C 900000      R     MOV     DPTR,#SPI_Buffer
007F E0                MOVX    A,@DPTR
0080 B4FF0F            CJNE    A,#0FFH,?C0167
0083 A3                INC     DPTR
0084 E0                MOVX    A,@DPTR
0085 B4FF0A            CJNE    A,#0FFH,?C0167
0088 A3                INC     DPTR
0089 E0                MOVX    A,@DPTR
008A B4FF05            CJNE    A,#0FFH,?C0167
008D A3                INC     DPTR
008E E0                MOVX    A,@DPTR
008F F4                CPL     A
0090 6011              JZ      ?C0166
                                           ; SOURCE LINE # 1342
0092         ?C0167:
                                           ; SOURCE LINE # 1343
0092 900000      R     MOV     DPTR,#sector_addr
0095 120000      R     LCALL   L?0244
0098 FF                MOV     R7,A
0099 120000      R     LCALL   _SPI_SectorErase
                                           ; SOURCE LINE # 1344
009C 900000      R     MOV     DPTR,#ret
009F E0                MOVX    A,@DPTR
00A0 2410              ADD     A,#010H
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1348
00A3         ?C0166:
00A3 900000      R     MOV     DPTR,#i
00A6 E0                MOVX    A,@DPTR
00A7 04                INC     A
00A8 F0                MOVX    @DPTR,A
00A9 020000      R     LJMP    ?C0164
00AC         ?C0165:
                                           ; SOURCE LINE # 1350
00AC         ?C0227:
00AC 900000      R     MOV     DPTR,#ret
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
                                           ; SOURCE LINE # 1351
00B1         ?C0163:
00B1 22                RET     
             ; FUNCTION _EE_CleanBlock (END)

             ; FUNCTION EE_CleanBlocks (BEGIN)
                                           ; SOURCE LINE # 1357
                                           ; SOURCE LINE # 1358
                                           ; SOURCE LINE # 1362
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_538
0004 7900        R     MOV     R1,#LOW ?SC_538
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 81  

0006 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1363
0009 E4                CLR     A
000A 900000      R     MOV     DPTR,#block
000D F0                MOVX    @DPTR,A
000E         ?C0168:
000E 900000      R     MOV     DPTR,#block
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 C3                CLR     C
0014 9408              SUBB    A,#08H
0016 501F              JNC     ?C0173
                                           ; SOURCE LINE # 1365
0018 E4                CLR     A
0019 FD                MOV     R5,A
001A 120000      R     LCALL   _EE_CleanBlock
;---- Variable 'ret' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1366
001D EF                MOV     A,R7
001E 7BFF              MOV     R3,#0FFH
0020 6006              JZ      ?C0171
0022 7A00        R     MOV     R2,#HIGH ?SC_555
0024 7900        R     MOV     R1,#LOW ?SC_555
0026 8004              SJMP    ?C0228
0028         ?C0171:
                                           ; SOURCE LINE # 1367
0028 7A00        R     MOV     R2,#HIGH ?SC_562
002A 7900        R     MOV     R1,#LOW ?SC_562
002C         ?C0228:
002C 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1368
002F         ?C0170:
002F 900000      R     MOV     DPTR,#block
0032 E0                MOVX    A,@DPTR
0033 04                INC     A
0034 F0                MOVX    @DPTR,A
0035 80D7              SJMP    ?C0168
                                           ; SOURCE LINE # 1369
0037         ?C0173:
0037 22                RET     
             ; FUNCTION EE_CleanBlocks (END)

             ; FUNCTION EE_DumpBlocks (BEGIN)
                                           ; SOURCE LINE # 1374
                                           ; SOURCE LINE # 1375
                                           ; SOURCE LINE # 1379
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#block
0004 F0                MOVX    @DPTR,A
0005         ?C0174:
0005 900000      R     MOV     DPTR,#block
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A C3                CLR     C
000B 9408              SUBB    A,#08H
000D 4003              JC      $ + 5H
000F 020000      R     LJMP    ?C0185
                                           ; SOURCE LINE # 1380
0012 7A00        R     MOV     R2,#HIGH ?SC_568
0014 7900        R     MOV     R1,#LOW ?SC_568
0016 120000      R     LCALL   L?0310
0019 120000      R     LCALL   L?0250
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 82  

001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
0021 E4                CLR     A
0022 F0                MOVX    @DPTR,A
0023 A3                INC     DPTR
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
0026 900000      R     MOV     DPTR,#block
0029 120000      R     LCALL   L?0246
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 900000      E     MOV     DPTR,#?_Printf?BYTE+06H
0033 CF                XCH     A,R7
0034 F0                MOVX    @DPTR,A
0035 A3                INC     DPTR
0036 EF                MOV     A,R7
0037 F0                MOVX    @DPTR,A
0038 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1382
003B 900000      R     MOV     DPTR,#block
003E 120000      R     LCALL   L?0260
0041 120000      R     LCALL   _EE_ReadBlock
                                           ; SOURCE LINE # 1383
0044 E4                CLR     A
0045 900000      R     MOV     DPTR,#i
0048 F0                MOVX    @DPTR,A
0049         ?C0177:
                                           ; SOURCE LINE # 1384
0049 7BFF              MOV     R3,#0FFH
004B 7A00        R     MOV     R2,#HIGH ?SC_600
004D 7900        R     MOV     R1,#LOW ?SC_600
004F 900000      R     MOV     DPTR,#block
0052 E0                MOVX    A,@DPTR
0053 75F040            MOV     B,#040H
0056 A4                MUL     AB
0057 FD                MOV     R5,A
0058 ACF0              MOV     R4,B
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C 75F010            MOV     B,#010H
005F A4                MUL     AB
0060 2D                ADD     A,R5
0061 FE                MOV     R6,A
0062 E5F0              MOV     A,B
0064 3C                ADDC    A,R4
0065 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0068 F0                MOVX    @DPTR,A
0069 A3                INC     DPTR
006A CE                XCH     A,R6
006B F0                MOVX    @DPTR,A
006C 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1385
006F E4                CLR     A
0070 900000      R     MOV     DPTR,#j
0073 F0                MOVX    @DPTR,A
0074         ?C0180:
0074 900000      R     MOV     DPTR,#j
0077 E0                MOVX    A,@DPTR
0078 FD                MOV     R5,A
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 83  

0079 C3                CLR     C
007A 9410              SUBB    A,#010H
007C 4003              JC      $ + 5H
007E 020000      R     LJMP    ?C0179
                                           ; SOURCE LINE # 1386
0081 900000      R     MOV     DPTR,#i
0084 E0                MOVX    A,@DPTR
0085 75F010            MOV     B,#010H
0088 A4                MUL     AB
0089 FF                MOV     R7,A
008A ED                MOV     A,R5
008B 7A00              MOV     R2,#00H
008D 2F                ADD     A,R7
008E FF                MOV     R7,A
008F EA                MOV     A,R2
0090 35F0              ADDC    A,B
0092 FE                MOV     R6,A
0093 EF                MOV     A,R7
0094 7803              MOV     R0,#03H
0096         ?C0218:
0096 CE                XCH     A,R6
0097 A2E7              MOV     C,ACC.7
0099 13                RRC     A
009A CE                XCH     A,R6
009B 13                RRC     A
009C D8F8              DJNZ    R0,?C0218
009E 2400        R     ADD     A,#LOW EE_mask
00A0 F582              MOV     DPL,A
00A2 7400        R     MOV     A,#HIGH EE_mask
00A4 3E                ADDC    A,R6
00A5 F583              MOV     DPH,A
00A7 E0                MOVX    A,@DPTR
00A8 FB                MOV     R3,A
00A9 7A00              MOV     R2,#00H
00AB ED                MOV     A,R5
00AC 120000      R     LCALL   L?0271
00AF 8005              SJMP    ?C0220
00B1         ?C0219:
00B1 C3                CLR     C
00B2 33                RLC     A
00B3 CE                XCH     A,R6
00B4 33                RLC     A
00B5 CE                XCH     A,R6
00B6         ?C0220:
00B6 D8F9              DJNZ    R0,?C0219
00B8 FF                MOV     R7,A
00B9 EE                MOV     A,R6
00BA 5A                ANL     A,R2
00BB FE                MOV     R6,A
00BC EF                MOV     A,R7
00BD 5B                ANL     A,R3
00BE 4E                ORL     A,R6
00BF 7BFF              MOV     R3,#0FFH
00C1 602C              JZ      ?C0183
                                           ; SOURCE LINE # 1387
00C3 7A00        R     MOV     R2,#HIGH ?SC_607
00C5 7900        R     MOV     R1,#LOW ?SC_607
00C7 900000      R     MOV     DPTR,#j
00CA E0                MOVX    A,@DPTR
00CB FF                MOV     R7,A
00CC 900000      R     MOV     DPTR,#i
00CF E0                MOVX    A,@DPTR
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 84  

00D0 75F010            MOV     B,#010H
00D3 A4                MUL     AB
00D4 2F                ADD     A,R7
00D5 F582              MOV     DPL,A
00D7 E4                CLR     A
00D8 35F0              ADDC    A,B
00DA F583              MOV     DPH,A
00DC E582              MOV     A,DPL
00DE 2400        R     ADD     A,#LOW EE_buf
00E0 F582              MOV     DPL,A
00E2 E583              MOV     A,DPH
00E4 3400        R     ADDC    A,#HIGH EE_buf
00E6 F583              MOV     DPH,A
00E8 E0                MOVX    A,@DPTR
00E9 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
00EC F0                MOVX    @DPTR,A
00ED 8004              SJMP    ?C0229
00EF         ?C0183:
                                           ; SOURCE LINE # 1389
00EF 7A00        R     MOV     R2,#HIGH ?SC_614
00F1 7900        R     MOV     R1,#LOW ?SC_614
00F3         ?C0229:
00F3 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1390
00F6         ?C0182:
00F6 900000      R     MOV     DPTR,#j
00F9 E0                MOVX    A,@DPTR
00FA 04                INC     A
00FB F0                MOVX    @DPTR,A
00FC 020000      R     LJMP    ?C0180
                                           ; SOURCE LINE # 1391
00FF         ?C0179:
00FF 900000      R     MOV     DPTR,#i
0102 120000      R     LCALL   L?0312
0105 5003              JNC     $ + 5H
0107 020000      R     LJMP    ?C0177
                                           ; SOURCE LINE # 1392
010A         ?C0176:
010A 900000      R     MOV     DPTR,#block
010D E0                MOVX    A,@DPTR
010E 04                INC     A
010F F0                MOVX    @DPTR,A
0110 020000      R     LJMP    ?C0174
                                           ; SOURCE LINE # 1393
0113         ?C0185:
0113 22                RET     
             ; FUNCTION EE_DumpBlocks (END)

             ; FUNCTION EE_Check (BEGIN)
                                           ; SOURCE LINE # 1402
                                           ; SOURCE LINE # 1403
                                           ; SOURCE LINE # 1410
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#block
0004 F0                MOVX    @DPTR,A
0005         ?C0186:
0005 900000      R     MOV     DPTR,#block
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A C3                CLR     C
000B 9408              SUBB    A,#08H
000D 5065              JNC     ?C0187
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 85  

                                           ; SOURCE LINE # 1411
000F 7BFF              MOV     R3,#0FFH
0011 7A00        R     MOV     R2,#HIGH ?SC_618
0013 7900        R     MOV     R1,#LOW ?SC_618
0015 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
001A 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1412
001D E4                CLR     A
001E 900000      R     MOV     DPTR,#bank
0021 F0                MOVX    @DPTR,A
0022         ?C0189:
0022 900000      R     MOV     DPTR,#bank
0025 E0                MOVX    A,@DPTR
0026 FD                MOV     R5,A
0027 C3                CLR     C
0028 9404              SUBB    A,#04H
002A 5040              JNC     ?C0188
                                           ; SOURCE LINE # 1413
002C 900000      R     MOV     DPTR,#block
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 120000      R     LCALL   _EE_CheckBlankBank
0034 900000      R     MOV     DPTR,#ret
0037 EF                MOV     A,R7
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1414
0039 6008              JZ      ?C0192
                                           ; SOURCE LINE # 1415
003B 7BFF              MOV     R3,#0FFH
003D 7A00        R     MOV     R2,#HIGH ?SC_629
003F 7900        R     MOV     R1,#LOW ?SC_629
                                           ; SOURCE LINE # 1416
0041 801E              SJMP    ?C0231
0043         ?C0192:
                                           ; SOURCE LINE # 1417
                                           ; SOURCE LINE # 1418
0043 900000      R     MOV     DPTR,#block
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FD                MOV     R5,A
004B 120000      R     LCALL   _EE_CheckMoveDoneBank
004E 900000      R     MOV     DPTR,#ret
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1419
0053 7BFF              MOV     R3,#0FFH
0055 6006              JZ      ?C0194
0057 7A00        R     MOV     R2,#HIGH ?SC_631
0059 7900        R     MOV     R1,#LOW ?SC_631
005B         ?C0230:
005B 8004              SJMP    ?C0231
005D         ?C0194:
                                           ; SOURCE LINE # 1420
005D 7A00        R     MOV     R2,#HIGH ?SC_633
005F 7900        R     MOV     R1,#LOW ?SC_633
0061         ?C0231:
0061 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1421
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 86  

                                           ; SOURCE LINE # 1422
0064         ?C0191:
0064 900000      R     MOV     DPTR,#bank
0067 E0                MOVX    A,@DPTR
0068 04                INC     A
0069 F0                MOVX    @DPTR,A
006A 80B6              SJMP    ?C0189
                                           ; SOURCE LINE # 1423
006C         ?C0188:
006C 900000      R     MOV     DPTR,#block
006F E0                MOVX    A,@DPTR
0070 04                INC     A
0071 F0                MOVX    @DPTR,A
0072 8091              SJMP    ?C0186
0074         ?C0187:
                                           ; SOURCE LINE # 1425
0074 120000      R     LCALL   EE_DumpBlocks
                                           ; SOURCE LINE # 1428
0077 E4                CLR     A
0078 900000      R     MOV     DPTR,#block
007B F0                MOVX    @DPTR,A
007C         ?C0196:
007C 900000      R     MOV     DPTR,#block
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 C3                CLR     C
0082 9408              SUBB    A,#08H
0084 4003              JC      $ + 5H
0086 020000      R     LJMP    ?C0205
                                           ; SOURCE LINE # 1429
0089 120000      R     LCALL   L?0235
008C 900000      R     MOV     DPTR,#sector_addr
008F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1431
0092 E4                CLR     A
0093 900000      R     MOV     DPTR,#j
0096 F0                MOVX    @DPTR,A
0097 A3                INC     DPTR
0098 F0                MOVX    @DPTR,A
0099         ?C0199:
0099 900000      R     MOV     DPTR,#j
009C E0                MOVX    A,@DPTR
009D FE                MOV     R6,A
009E A3                INC     DPTR
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 C3                CLR     C
00A2 EE                MOV     A,R6
00A3 9410              SUBB    A,#010H
00A5 4003              JC      $ + 5H
00A7 020000      R     LJMP    ?C0198
                                           ; SOURCE LINE # 1433
00AA 900000      R     MOV     DPTR,#block
00AD 120000      R     LCALL   L?0246
00B0 E0                MOVX    A,@DPTR
00B1 FC                MOV     R4,A
00B2 A3                INC     DPTR
00B3 E0                MOVX    A,@DPTR
00B4 FD                MOV     R5,A
00B5 C3                CLR     C
00B6 EF                MOV     A,R7
00B7 9D                SUBB    A,R5
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 87  

00B8 EE                MOV     A,R6
00B9 9C                SUBB    A,R4
00BA 4003              JC      $ + 5H
00BC 020000      R     LJMP    ?C0198
                                           ; SOURCE LINE # 1434
00BF         ?C0202:
                                           ; SOURCE LINE # 1440
00BF 120000      R     LCALL   L?0256
00C2 EA                MOV     A,R2
00C3 3E                ADDC    A,R6
00C4 FE                MOV     R6,A
00C5 ED                MOV     A,R5
00C6 39                ADDC    A,R1
00C7 FD                MOV     R5,A
00C8 EC                MOV     A,R4
00C9 38                ADDC    A,R0
00CA 120000      R     LCALL   L?0264
00CD 120000      R     LCALL   L?0282
00D0 120000      R     LCALL   _SpiFlashDmaRead2XMem
                                           ; SOURCE LINE # 1444
00D3 900000      R     MOV     DPTR,#SPI_Buffer+01H
00D6 E0                MOVX    A,@DPTR
00D7 FF                MOV     R7,A
00D8 900000      R     MOV     DPTR,#SPI_Buffer
00DB E0                MOVX    A,@DPTR
00DC 6F                XRL     A,R7
00DD FF                MOV     R7,A
00DE BFFF0D            CJNE    R7,#0FFH,?C0204
00E1 900000      R     MOV     DPTR,#SPI_Buffer+03H
00E4 E0                MOVX    A,@DPTR
00E5 FF                MOV     R7,A
00E6 900000      R     MOV     DPTR,#SPI_Buffer+02H
00E9 E0                MOVX    A,@DPTR
00EA 6F                XRL     A,R7
00EB F4                CPL     A
00EC 6047              JZ      ?C0201
00EE         ?C0204:
                                           ; SOURCE LINE # 1445
00EE 900000      R     MOV     DPTR,#block
00F1 E0                MOVX    A,@DPTR
00F2 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
00F5 F0                MOVX    @DPTR,A
00F6 120000      R     LCALL   L?0250
00F9 E0                MOVX    A,@DPTR
00FA 900000      E     MOV     DPTR,#?_Printf?BYTE+04H
00FD F0                MOVX    @DPTR,A
00FE 120000      R     LCALL   L?0256
0101 EA                MOV     A,R2
0102 3E                ADDC    A,R6
0103 120000      R     LCALL   L?0278
0106 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
0109 120000      E     LCALL   ?C?LSTXDATA
010C 900000      R     MOV     DPTR,#SPI_Buffer
010F E0                MOVX    A,@DPTR
0110 900000      E     MOV     DPTR,#?_Printf?BYTE+09H
0113 F0                MOVX    @DPTR,A
0114 900000      R     MOV     DPTR,#SPI_Buffer+01H
0117 E0                MOVX    A,@DPTR
0118 900000      E     MOV     DPTR,#?_Printf?BYTE+0AH
011B F0                MOVX    @DPTR,A
011C 900000      R     MOV     DPTR,#SPI_Buffer+02H
011F E0                MOVX    A,@DPTR
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 88  

0120 900000      E     MOV     DPTR,#?_Printf?BYTE+0BH
0123 F0                MOVX    @DPTR,A
0124 900000      R     MOV     DPTR,#SPI_Buffer+03H
0127 E0                MOVX    A,@DPTR
0128 900000      E     MOV     DPTR,#?_Printf?BYTE+0CH
012B F0                MOVX    @DPTR,A
012C 7BFF              MOV     R3,#0FFH
012E 7A00        R     MOV     R2,#HIGH ?SC_635
0130 7900        R     MOV     R1,#LOW ?SC_635
0132 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1449
                                           ; SOURCE LINE # 1450
0135         ?C0201:
0135 900000      R     MOV     DPTR,#j+01H
0138 E0                MOVX    A,@DPTR
0139 2404              ADD     A,#04H
013B F0                MOVX    @DPTR,A
013C 900000      R     MOV     DPTR,#j
013F E0                MOVX    A,@DPTR
0140 3400              ADDC    A,#00H
0142 F0                MOVX    @DPTR,A
0143 020000      R     LJMP    ?C0199
                                           ; SOURCE LINE # 1451
0146         ?C0198:
0146 900000      R     MOV     DPTR,#block
0149 E0                MOVX    A,@DPTR
014A 04                INC     A
014B F0                MOVX    @DPTR,A
014C 020000      R     LJMP    ?C0196
                                           ; SOURCE LINE # 1452
014F         ?C0205:
014F 22                RET     
             ; FUNCTION EE_Check (END)

C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 89  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_EE_MoveBank . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  block. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  sector_addr. . . . . . . . . . . . .  * REG *  DATA   U_LONG   0004H  4
  prev_bank. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
SPICMD_x_BYTES . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
EE_CurrBank. . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0001H  8
_SPI_SetReadModeByRegister . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SPI_QUADInit . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat0 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  vid. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  cid. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
SpiFlashVendor . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0009H  1
_dPuts . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
EE_mask. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    000AH  8
SPICMD_x_READ. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0012H  1
_EE_WriteMoveDone. . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  block. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  bank . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  sector_addr. . . . . . . . . . . . .  * REG *  DATA   U_LONG   0004H  4
EE_FindCurrInfo. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  k. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  sector_addr. . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0002H  4
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
SPI_QuadInit_MICRON. . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_EE_FillLostItems. . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  block. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  bank . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  buf. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  mask . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0005H  3
  sector_addr. . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0008H  4
  remain . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000CH  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000EH  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000FH  1
  read_cnt . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0010H  1
  ch0. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0011H  1
  ch1. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  ch2. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0012H  1
  ch3. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
_SpiFlashDmaFlashAddr. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
_delay1ms. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SPI_WriteEnable. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
EE_buf . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0013H  64
EE_PrintCurrInfo . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  block. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  sector_addr. . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0001H  4
_SPI_PageProgram . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  spiaddr. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
  xaddr. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 90  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  cnt. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
SPI_Buffer . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0053H  128
EE_WritePos. . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    00D3H  16
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SPI_BlockErase. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  spiaddr. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
_SpiFlashDmaRead . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dest_type. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  dest_loc . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
  src_loc. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0003H  4
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
EE_CleanBlocks . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  block. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_SpiFlashCmdRead . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dest . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_SPI_SectorErase . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  spiaddr. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
_SpiFlashCmd . . . . . . . . . . . . .  PUBLIC   CODE   PROC     000DH  -----
  cmd. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  cmd_len. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_EE_CheckBlankBank . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  block. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  bank . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  sector_addr. . . . . . . . . . . . .  * REG *  DATA   U_LONG   0004H  4
_PCMODEDATA. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  han. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  van. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  vfreq. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  htotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  vtotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  hsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  vsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  offseth. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0010H  2
  offsetv. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0012H  2
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  dummy2 . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  dummy3 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0018H  1
_SpiFlashDmaBuffAddr . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_EE_CleanBlock . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  block. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  fSkipErase . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  sector_addr. . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0002H  4
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
_SpiFlashDmaStart. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fWrite . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  fBusy. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  call_line. . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 91  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
_SpiFlashSetCmdLength. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_SpiFlashDmaWait . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  wait . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  delay. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  call_line. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  vdata. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
EE_Check . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  block. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  bank . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  sector_addr. . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0005H  4
SPIIMAGE . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  top. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  bottom . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
_SpiFlashDmaReadLen. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  len. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
_EE_ReadBlock. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  block. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  buf. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0001H  3
  mask . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0004H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
  ch0. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  ch1. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  ch2. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  ch3. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  sector_addr. . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0009H  4
  remain . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000DH  2
  read_cnt . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000FH  1
EE_Format. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  block. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  spi_addr . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0002H  4
SLIDEIMAGE . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
_dPrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SpiFlashDmaStop. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_ePrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
regTW88. . . . . . . . . . . . . . . .  EXTERN   DATA   PTR      -----  2
_SpiFlashDmaRead2XMem. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dest_loc . . . . . . . . . . . . . .  AUTO     DATA   PTR      0001H  3
  src_loc. . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0003H  4
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
EE_DumpBlocks. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 92  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  block. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
_EE_WriteBlock . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  block. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  buf. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0001H  3
  mask . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0004H  3
  sector_addr. . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0007H  4
  idx. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000BH  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000CH  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000DH  1
  wptr . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000EH  1
  bptr . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000FH  1
_SpiFlashCmd2. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  cmd1 . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  cmd2 . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
_SpiFlashCmd3. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  cmd1 . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  cmd2 . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  cmd3 . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
_EE_Read . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0002H  2
  block. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  sindex . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  sector_addr. . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0006H  4
  remain . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000AH  2
  read_cnt . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000CH  1
_SpiFlashDmaReadLenByte. . . . . . . .  PUBLIC   CODE   PROC     0009H  -----
  len_l. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_SpiFlashDmaDestType . . . . . . . . .  PUBLIC   CODE   PROC     0004H  -----
  dest . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  access_mode. . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
_EE_CheckMoveDoneBank. . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  block. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  bank . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  sector_addr. . . . . . . . . . . . .  * REG *  DATA   U_LONG   0004H  4
_wPrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
EE_RepairMoveDone. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  block. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  prev_bank. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_EE_Write. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
  dat. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  block. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  sindex . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  sector_addr. . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0003H  4
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.00   SPI                                                                   05/31/2013 20:18:28 PAGE 93  

   CODE SIZE        =   5175    ----
   CONSTANT SIZE    =    703    ----
   XDATA SIZE       =    227     172
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
