C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(9,SPEED) REGFILE(.\Output\TW8835_REV31.ORC) BROWSE MO
                    -DDP2 DEFINE(EVB_30,EVB_31,nullFn=//) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\List\main.lst) OBJECT(.\Output\main.obj)

line level    source

   1          /**
   2           * @file
   3           * main.c 
   4           * @author Harry Han
   5           * @author YoungHwan Bae
   6           * @author Brian Kang
   7           * @version 1.0
   8           * @section LICENSE
   9           *      Copyright (C) 2011~2012 Intersil Corporation
  10           * @section DESCRIPTION
  11           *      main file
  12           * @section DESCRIPTION
  13           *      - CPU : DP8051
  14           *      - Language: Keil C
  15           *  - See 'Release.txt' for firmware revision history 
  16           ******************************************************************************
  17           */
  18          
  19          #include <intrins.h>
  20          #include "Config.h"
  21          #include "reg.h"
  22          #include "typedefs.h"
  23          #include "TW8835.h"
  24          
  25          #include "Global.h"
  26          #include "CPU.h"
  27          #include "Printf.h"
  28          #include "util.h"
  29          #include "Monitor.h"
  30          
  31          #include "I2C.h"
  32          #include "SPI.h"
  33          
  34          #if defined(MODEL_TW8835_EXTI2C)
              #include "host.h"
              #endif
  37          #include "main.h"
  38          #include "misc.h"
  39          #include "Remo.h"
  40          #include "TouchKey.h"
  41          #include "eeprom.h"
  42          
  43          #include "Settings.h"
  44          #include "InputCtrl.h"
  45          #include "decoder.h"
  46          #include "Scaler.h"
  47          #include "ImageCtrl.h"
  48          #include "OutputCtrl.h"
  49          #include "VAdc.h"
  50          #include "DTV.h"
  51          #include "measure.h"
  52          
  53          #ifdef SUPPORT_HDMI_SiIRX
              #include <hal_cp9223.h>
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 2   

              #include <SiI_config.h>
              #include <amf.h>
              #include <infofrm.h>
              #include <registers.h>
              #include <debug_cmd.h>
              #include <CEC.h>
              extern void PollPortSwitch(void);
              extern void HdmiTask(void);
              #endif
  64          #ifdef SUPPORT_HDMI_EP9351
              #include "hdmi_ep9351.h"
              #endif
  67          
  68          #include "SOsd.h"
  69          #include "FOsd.h"
  70          #include "SpiFlashMap.h"
  71          #include "SOsdMenu.h"
  72          #include "Demo.h"
  73          #include "Debug.H"
  74          
  75          //-----------------------------------------------------------------------------
  76          /**
  77          * "system no initialize mode" global variable.
  78          *
  79          * If P1_5 is connected at the PowerUpBoot, 
  80          *   it is a system no init mode (SYS_MODE_NOINIT).
  81          * If the system is a SYS_MODE_NOINIT, 
  82          *  FW will skips the initialize routine, 
  83          *  and supports only the Monitor function.
  84          *  and SYS_MODE_NOINIT can not support a RCDMode and a PowerSaveMode.
  85          * But, if the system bootup with normal, 
  86          *  the P1_5 will be worked as a PowerSave ON/OFF switch.
  87          */
  88          //-----------------------------------------------------------------------------
  89          BYTE SysNoInitMode;
  90          
  91          //-----------------------------------------------------------------------------
  92          // Interrupt Handling Routine Variables                                                                
  93          //-----------------------------------------------------------------------------
  94          WORD main_VH_Loss_Changed;
  95          BYTE main_INT_STATUS;
  96          BYTE main_INT_STATUS2;
  97          BYTE main_INT_STATUS3;  //for SW 7FF. ext4 intr
  98          BYTE SW_Video_Status;
  99          BYTE SW_INTR_cmd;
 100          #define SW_INTR_VIDEO_CHANGED   1
 101          
 102          //-----------------------------------------------------------------------------
 103          // I2CCMD 
 104          //-----------------------------------------------------------------------------
 105          #if defined(SUPPORT_I2CCMD_SLAVE_V1)
              bit F_i2ccmd_exec=0;                            /*!< I2CCMD flag */
              #define I2CCMD_CHECK    0x20
              #define I2CCMD_EXEC             0x10
              #endif
 110          
 111          
 112          #if defined(SUPPORT_I2CCMD_TEST_SLAVE)
              BYTE ext_i2c_cmd;
              #endif
 115          
 116          #if defined(MODEL_TW8835_SLAVE) && defined(SUPPORT_I2CCMD_TEST)
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 3   

              BYTE i2c_compare_page = 0xff;
              BYTE i2c_compare_buff[256];
              //-----------------------------------------------------------------------------
              /**
              * test routine.
              */
              void test_set_i2c_slave_compare_page(BYTE test_page)
              {
                      WORD i;
                      i2c_compare_page = test_page;
                      for(i=0; i <= 255; i++) {
                              i2c_compare_buff[i] = ReadTW88(test_page << 8 | i);
                      }
                      Printf("\nsave page %bd",test_page);
              }
              #endif
 133          
 134          
 135          //=============================================================================
 136          // Video TASK ROUTINES                                                                         
 137          //=============================================================================
 138          
 139          //-----------------------------------------------------------------------------
 140          // Task NoSignal
 141          //-----------------------------------------------------------------------------
 142          #define TASK_FOSD_WIN   0
 143          #define NOSIGNAL_TIME_INTERVAL  (10*100)
 144          
 145          void NoSignalTask( void );                      //prototype
 146          void NoSignalTaskOnWaitMode(void);
 147          XDATA BYTE Task_NoSignal_cmd;           //DONE,WAIT_VIDEO,WAIT,RUN,RUN_FORCE
 148          XDATA BYTE Task_NoSignal_count;         //for dPuts("\nTask NoSignal TASK_CMD_WAIT_VIDEO");
 149          
 150          //-----------------------------------------------------------------------------
 151          /**
 152          * set NoSignalTask status
 153          *               
 154          * @param  cmd
 155          *       - TASK_CMD_DONE
 156          *       - TASK_CMD_WAIT_VIDEO
 157          *       - TASK_CMD_WAIT_MODE
 158          *       - TASK_CMD_RUN
 159          *       - TASK_CMD_RUN_FORCE
 160          */
 161          void TaskNoSignal_setCmd(BYTE cmd) 
 162          {       
 163   1              if(cmd == TASK_CMD_WAIT_VIDEO && MenuGetLevel())        
 164   1                      Task_NoSignal_cmd = TASK_CMD_DONE;      
 165   1              else
 166   1                      Task_NoSignal_cmd = cmd;
 167   1      
 168   1              if(cmd == TASK_CMD_RUN_FORCE)
 169   1                      tic_task = NOSIGNAL_TIME_INTERVAL;      //right now
 170   1      
 171   1              Task_NoSignal_count = 0;
 172   1      }                                                                                                                                                               
 173          //-----------------------------------------------------------------------------
 174          /**
 175          * get NoSignalTask status
 176          *
 177          * @return Task_NoSignal_cmd
 178          */
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 4   

 179          BYTE TaskNoSignal_getCmd(void) 
 180          {       
 181   1              return Task_NoSignal_cmd;       
 182   1      }
 183          
 184          //=============================================================================
 185          // MovingGrid TASK ROUTINES                                                                            
 186          //=============================================================================
 187          extern void MovingGridTask( void );
 188          XDATA BYTE Task_Grid_on;           //Pls, use a friend function
 189          XDATA BYTE Task_Grid_cmd;
 190          
 191          //-----------------------------------------------------------------------------
 192          /**
 193           * on/off Grid task
 194           *
 195           * @param onoff
 196          */
 197          void TaskSetGrid(BYTE onoff)  { Task_Grid_on = onoff;   }       
 198          //-----------------------------------------------------------------------------
 199          /**
 200           * get Grid task status
 201           *
 202           * @return Task_Grid_on
 203          */
 204          BYTE TaskGetGrid(void)            {     return Task_Grid_on;    }
 205          //-----------------------------------------------------------------------------
 206          /**
 207           * set Grid task command
 208           *
 209           * @param cmd
 210          */
 211          void TaskSetGridCmd(BYTE cmd) { Task_Grid_cmd = cmd;    }       
 212          //-----------------------------------------------------------------------------
 213          /**
 214           * get Grid task command
 215           *
 216           * @return Task_Grid_cmd
 217          */
 218          BYTE TaskGetGridCmd(void)         { return Task_Grid_cmd;   } 
 219          
 220          
 221          //=============================================================================
 222          // CheckAndSet LINK ROUTINES                                                                           
 223          //=============================================================================
 224          
 225          //-----------------------------------------------------------------------------
 226          /**
 227           * function pointer for CheckAndSetInput
 228           *
 229          */
 230          BYTE (*CheckAndSetInput)(void);
 231          
 232          //-----------------------------------------------------------------------------
 233          /**
 234           * dummy CheckAndSet function
 235           *
 236          */
 237          BYTE CheckAndSetUnknown(void)
 238          {
 239   1              return ERR_FAIL;
 240   1      }
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 5   

 241          
 242          //-----------------------------------------------------------------------------
 243          /**
 244           * link CheckAndSetInput Routine
 245           *
 246           * @see CheckAndSetDecoderScaler
 247           * @see CheckAndSetComponent
 248           * @see CheckAndSetPC
 249           * @see CheckAndSetDVI
 250           * @see CheckAndSetHDMI
 251           * @see CheckAndSetBT656
 252           * @see CheckAndSetUnknown
 253          */
 254          void LinkCheckAndSetInput(void)
 255          {
 256   1              switch(InputMain) {
 257   2      #if defined(SUPPORT_CVBS) || defined(SUPPORT_SVIDEO)
 258   2              case INPUT_CVBS:
 259   2              case INPUT_SVIDEO:
 260   2                      CheckAndSetInput = &CheckAndSetDecoderScaler;
 261   2                      break;
 262   2      #endif
 263   2      #ifdef SUPPORT_COMPONENT
 264   2              case INPUT_COMP:
 265   2                      CheckAndSetInput = &CheckAndSetComponent;
 266   2                      break;
 267   2      #endif
 268   2      #ifdef SUPPORT_PC
 269   2              case INPUT_PC:
 270   2                      CheckAndSetInput = &CheckAndSetPC;
 271   2                      break;
 272   2      #endif
 273   2      #ifdef SUPPORT_DVI
                      case INPUT_DVI:
                              CheckAndSetInput = &CheckAndSetDVI;
                              break;
              #endif
 278   2      #if defined(SUPPORT_HDMI_EP9351) || defined(SUPPORT_HDMI_SiIRX)
                      case INPUT_HDMIPC:
                      case INPUT_HDMITV:
                              CheckAndSetInput = &CheckAndSetHDMI;
                              break;
              #endif
 284   2      #ifdef SUPPORT_BT656
 285   2              case INPUT_BT656:
 286   2                      CheckAndSetInput = &CheckAndSetBT656;
 287   2                      break;
 288   2      #endif
 289   2              default:
 290   2                      CheckAndSetInput = &CheckAndSetUnknown;
 291   2                      break;
 292   2              }
 293   1              SW_Video_Status = 0;                                    //clear
 294   1              FOsdWinEnable(TASK_FOSD_WIN,OFF);               //WIN0, Disable
 295   1              TaskNoSignal_setCmd(TASK_CMD_DONE);             //turn off NoSignal Task
 296   1      }
 297          
 298          
 299          
 300          #ifdef SUPPORT_RCD
              //-----------------------------------------------------------------------------
              /**
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 6   

               * check RCD(Rear Camera Display) port
               *
               * @return 0:No, 1:Yes
              */
              BYTE IsBackDrivePortOn(void)
              {
                      //BT656 uses P1_6. FW can not support RCD on BT656 mode.
                      if(InputMain >= INPUT_DVI) 
                              return 0;
                      return (PORT_BACKDRIVE_MODE==0 ? 1 : 0);
              }
              #endif
 315          
 316          //-----------------------------------------------------------------------------
 317          /**
 318           * Update OSD Timer
 319           *
 320          */
 321          void UpdateOsdTimerClock(void)
 322          {
 323   1              DECLARE_LOCAL_page
 324   1      
 325   1              OsdTimerClock = (DWORD)OsdGetTime() *100;
 326   1              
 327   1              ReadTW88Page(page);
 328   1      
 329   1              //Turn On FontOSD.
 330   1              FOsdOnOff(ON, 0);       //with vdelay 0
 331   1      
 332   1              //BK120112
 333   1              if(Task_NoSignal_cmd != TASK_CMD_DONE) {
 334   2                      if(getNoSignalLogoStatus()==0)
 335   2                              InitLogo1();
 336   2              }
 337   1      
 338   1              WriteTW88Page(page);            
 339   1      }
 340          
 341          //-----------------------------------------------------------------------------
 342          /**
 343           *      Check OSD Timer and clear OSD if timer is expired.
 344          */
 345          void CheckAndClearOSD(void)
 346          {
 347   1              DECLARE_LOCAL_page
 348   1      
 349   1              if(OsdGetTime()==0)
 350   1                      return;
 351   1      
 352   1              if(OsdTimerClock==0) {
 353   2                      ReadTW88Page(page);
 354   2      
 355   2                      if(MenuGetLevel())      
 356   2                              MenuEnd();      
 357   2                      
 358   2                      //Turn OFF Font OSD
 359   2                      if(FOsdOnOff(OFF, 0))   //with vdelay 0
 360   2                              dPuts("\nCheckAndClearOSD disable FOSD");
 361   2                              
 362   2                      if(getNoSignalLogoStatus())
 363   2                              RemoveLogo();
 364   2                                              
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 7   

 365   2                      WriteTW88Page(page);
 366   2              }
 367   1      }
 368          
 369          
 370          
 371          //=============================================================================
 372          // I2CCMD routines
 373          //=============================================================================
 374          
 375          #if defined(MODEL_TW8835_SLAVE)
              //-----------------------------------------------------------------------------
              /**
              * stop internal MCU
              *
              * To resume, write REG0D4[1]=1 by I2C
              */
              void StopCPU(void)
              {
                      Printf("\nGoto STOP mode");
                      Printf("\nTo resume, write REG0D4[1]=1 by I2C");
                      SFR_PCON |= 0x12;
                      //----- need nop to clean up the 8051 pipeline.
                      _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
                      _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
                      //----------------------------
                      //to reboot, 
                      //      write REG0D4[0]=1.
                      //----------------------------          
              }
              #endif
 396          
 397          #if defined(SUPPORT_I2CCMD_SLAVE_V1)
              //-----------------------------------------------------------------------------
              // I2CCMD proto type
              //-----------------------------------------------------------------------------
              BYTE I2CCMD_Read(void);
              BYTE I2CCMD_Exec(void);
              BYTE I2CCMD_Sfr(void);
              BYTE I2CCmd_eeprom(void);
              BYTE I2CCmd_key(void);
              
              //-----------------------------------------------------------------------------
              /**
               * I2CCMD main
               *
               * @ingroup I2CCMD
               * @see I2CCMD_Read
               * @see I2CCMD_Exec
               * @see I2CCMD_Sfr
               * @see I2CCmd_eeprom
               * @see I2CCmd_key
              */
              BYTE I2CCMD_exec_main(void)
              {
                      BYTE ret;
                      //I2CCMD_REG0~I2CCMD_REG4
              
                      Printf("\nI2CCMD %bx:%bx:%bx:%bx:%bx",
                              ReadTW88(I2CCMD_REG0),
                              ReadTW88(I2CCMD_REG1),
                              ReadTW88(I2CCMD_REG2),
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 8   

                              ReadTW88(I2CCMD_REG3),
                              ReadTW88(I2CCMD_REG4));
              
                      switch(ReadTW88(I2CCMD_REG0)) {
                      case 0:         ret = I2CCMD_Read();    break;
                      case 1:         ret = I2CCMD_Exec();    break;
                      case 2:         ret = I2CCMD_Sfr();             break;
                      case 3:         ret = I2CCmd_eeprom();  break;
                      case 4:         ret = I2CCmd_key();             break;
                      default:        ret = ERR_FAIL;
                      }
                      if(ret!=ERR_SUCCESS) {  
                              WriteTW88(REG009, 0xE0);
                      }
                      return ret;
              }
              //-----------------------------------------------------------------------------
              /**
               * I2CCMD read commad
               *
               * @ingroup I2CCMD
               * @see I2CCMD_exec_main
              */
              BYTE I2CCMD_Read(void)
              {
                      BYTE cmd;
                      BYTE ret;
              
                      ret = ERR_FAIL;
              
                      cmd = ReadTW88(I2CCMD_REG1);
                      if(cmd==0) {
                              WriteTW88(I2CCMD_REG4,InputMain);
                              ret = ERR_SUCCESS;
                      }
                      else if(cmd==1) {
                              WriteTW88(I2CCMD_REG4,MenuGetLevel());
                              ret = ERR_SUCCESS;
                      }
                      else if(cmd==2) {
                              WriteTW88(I2CCMD_REG4,DebugLevel);
                              ret = ERR_SUCCESS;
                      }
                      else if(cmd==3) {
                              WriteTW88(I2CCMD_REG4,access);
                              ret = ERR_SUCCESS;
                      }
                      else if(cmd==4) {
                              WriteTW88(I2CCMD_REG4,access);
                              if(SFR_WDCON & 0x02) WriteTW88(I2CCMD_REG4,0x01);       //On
                              else                 WriteTW88(I2CCMD_REG4,0x00);       //Off
                              ret = ERR_SUCCESS;
                      }
                      else if(cmd==5) {
                              WriteTW88(I2CCMD_REG3,(WORD)SPI_Buffer>>8);
                              WriteTW88(I2CCMD_REG4,(BYTE)SPI_Buffer);
                              ret = ERR_SUCCESS;
                      }
                      else if(cmd==6) {
                              WriteTW88(I2CCMD_REG3,SPI_BUFFER_SIZE>>8);
                              WriteTW88(I2CCMD_REG4,(BYTE)SPI_BUFFER_SIZE);
                              ret = ERR_SUCCESS;
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 9   

                      }
              
                      if(ret==ERR_SUCCESS)
                              WriteTW88(REG009,0xD0); //Done
                      else
                              WriteTW88(REG009,0xF0); //FAIL
              
                      return ret;
              }
              //-----------------------------------------------------------------------------
              /**
               * I2CCMD EXE commad
               *
               * @ingroup I2CCMD
               * @see I2CCMD_exec_main
              */
              BYTE I2CCMD_Exec(void)
              {
                      BYTE cmd;
                      BYTE ret;
              
                      ret = ERR_FAIL;
              
                      cmd = ReadTW88(I2CCMD_REG1);
                      if(cmd < 0x0F) {
                              //if(MenuGetLevel())
                              //      MenuEnd();
                              //if(SpiOsdIsOn())
                              //      SpiOsdEnable(OFF);
                              if(getNoSignalLogoStatus())
                                      RemoveLogo();
              
                              //Change input
                              switch(cmd) {
                              case INPUT_CVBS:        ChangeCVBS();           ret=ERR_SUCCESS;        break;
                              case INPUT_SVIDEO:      ChangeSVIDEO();         ret=ERR_SUCCESS;        break;
              #ifdef SUPPORT_COMPONENT
                              case INPUT_COMP:        ChangeCOMPONENT();      ret=ERR_SUCCESS;        break;
              #endif
              #ifdef SUPPORT_PC
                              case INPUT_PC:          ChangePC();                     ret=ERR_SUCCESS;        break;
              #endif
              #ifdef SUPPORT_DVI
                              case INPUT_DVI:         ChangeDVI();            ret=ERR_SUCCESS;        break;
              #endif
                              case INPUT_HDMIPC:      
                              case INPUT_HDMITV:      ChangeHDMI();           ret=ERR_SUCCESS;        break;
              #ifdef SUPPORT_BT656
                              case INPUT_BT656:       ChangeBT656();          ret=ERR_SUCCESS;        break;
              #endif
                              default: break;
                              }               
                      }
                      else if(cmd==0x0F) {
                              //if(MenuGetLevel())
                              //      MenuEnd();
                              //if(SpiOsdIsOn())
                              //      SpiOsdEnable(OFF);
              
                              InputModeNext();
                              ret=ERR_SUCCESS;
                      }
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 10  

                      else if(cmd==0x10) {
                              ret = CheckAndSetInput();       
                      }
                      //FYI: if master changes an access as 0, we can not support i2ccmd anymore.
                      //else if(cmd==0x11) {
                      //      access = ReadTW88(I2CCMD_REG2); 
                      //      ret=ERR_SUCCESS;
                      //}
                      else if(cmd==0x12) {
                              DebugLevel = ReadTW88(I2CCMD_REG2);     
                              ret=ERR_SUCCESS;        
                      }
                      else if(cmd==0x80) {
                              WriteTW88(REG0D4, ReadTW88(REG0D4) | 0x01);
                      }
              #ifdef USE_EXTMCU_ISP_I2CCMD
                      else if(cmd==0x8A) {
                              //Write Done flag frist. Because, I will stop myself.
                              WriteTW88(REG009,0xD0); 
                              StopCPU();
                              return 0;
                      }
              #endif
                      else if(cmd==0x90) {
                              DisableWatchdog();
                              ret=ERR_SUCCESS;
                      }
                      else if(cmd==0x91) {
                              EnableWatchdog(0);
                              ret=ERR_SUCCESS;
                      }
              
                      if(ret==ERR_SUCCESS)
                              WriteTW88(REG009,0xD0); //Done
                      else
                              WriteTW88(REG009,0xF0); //FAIL
              
                      return ret;
              }
              
              //-----------------------------------------------------------------------------
              /**
               * I2CCMD SFR commad
               *
               * @ingroup I2CCMD
               * @see I2CCMD_exec_main
              */
              BYTE I2CCMD_Sfr(void)
              {
                      BYTE index;
                      BYTE value;
                      BYTE ret;
              
                      index = ReadTW88(I2CCMD_REG2);
              
                      if(ReadTW88(I2CCMD_REG1)==1) {
                              //write
                              value = ReadTW88(I2CCMD_REG3);
                              ret = WriteSFR(index, value);
                      }
                      else {
                              //read
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 11  

                              ret = ReadSFR(index);
                              WriteTW88(I2CCMD_REG4,ret);     //result
                      }
                      WriteTW88(REG009,0xD0); //Done
              
                      return ERR_SUCCESS;
              }
              //-----------------------------------------------------------------------------
              /**
               * I2CCMD eeprom commad
               *
               * @ingroup I2CCMD
               * @see I2CCMD_exec_main
              */
              BYTE I2CCmd_eeprom(void)
              {
                      WORD addr;
                      BYTE value;
              
                      addr = ReadTW88(I2CCMD_REG2);   addr <<=8;
                      addr |= ReadTW88(I2CCMD_REG3);
              
                      if(ReadTW88(I2CCMD_REG1)==1) {
                              //write
                              value = ReadTW88(I2CCMD_REG4);
                              EE_Write(addr,value);
                      }
                      else {
                              //read
                              value = EE_Read(addr);
                              WriteTW88(I2CCMD_REG4,value);
                      }
                      WriteTW88(REG009,0xD0); //Done
              
                      return ERR_SUCCESS;
              }
              
              //-----------------------------------------------------------------------------
              /**
               * I2CCMD Key commad
               *
               * @ingroup I2CCMD
               * @see I2CCMD_exec_main
              */
              BYTE I2CCmd_key(void)
              {
                      BYTE key;
                      BYTE ret;
              
                      ret = ERR_FAIL;
                      key = ReadTW88(I2CCMD_REG1);
              
                      if(key <= NAVI_KEY_RIGHT) {
                              if(MenuGetLevel()) {
                                      MenuKeyInput(key);
                                      ret = ERR_SUCCESS;
                              }
                      }
                      else if(key==0x06) {
                              if(MenuGetLevel()==0) {
                                      MenuStart();
                                      ret = ERR_SUCCESS;
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 12  

                              }
                      }
                      else if(key==0x07) {
                              if(MenuGetLevel()) {
                                      MenuEnd();
                                      ret = ERR_SUCCESS;
                              }
                      }
                      else 
                              ret = ERR_FAIL;
              
                      if(ret==ERR_SUCCESS)
                              WriteTW88(REG009, 0xD0);        //done
              
                      return ret;
              }
              #endif //..SUPPORT_I2CCMD_SLAVE_V1
 692          
 693          
 694          
 695          //================================
 696          // Power Save & Resume
 697          //================================
 698          BYTE Buf_r003;
 699          BYTE Buf_0B0;   // Touch
 700          BYTE Buf_106;   // ADC
 701          BYTE Buf_1E6;   // AFE mode
 702          BYTE Buf_1CB;   // LLPLL, SOG
 703          BYTE Buf_1E1;   // LLPLL GPLL
 704          BYTE Buf_4E1;   // Clock selection
 705          
 706          //-----------------------------------------------------------------------------
 707          /**
 708          * Go into Power Save Mode
 709          *
 710          * System PowerSave procedure
 711          * ==========================
 712          *
 713          *       set all GPIOs as input mode
 714          *       switch MCU clock to 27MKz
 715          *       Powerdown all analog blocks
 716          *       Power up RC oscillator
 717          *       Switch MCU/SPI clock to RC oscillator
 718          *       Power   down crysital oscillator
 719          *       Now, it is a PowerSave Mode
 720          *
 721          * @see WaitPowerOn
 722          * @see SystemPowerResume
 723          */
 724          void SystemPowerSave(void)
 725          {
 726   1              BYTE i;
 727   1      
 728   1              ePrintf("\n----- SystemPowerSave -----");
 729   1              delay1ms(10);
 730   1      
 731   1              //set all GPIOs as input mode   
 732   1              WriteTW88Page(PAGE0_GPIO);
 733   1              WriteTW88(REG08C, 0x00);
 734   1      
 735   1              FP_BiasOnOff(OFF);
 736   1      
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 13  

 737   1              WriteTW88Page(PAGE0_GENERAL);
 738   1              Buf_r003 = ReadTW88(REG003);
 739   1              Interrupt_enableVideoDetect(OFF);
 740   1      
 741   1              WriteTW88Page(PAGE0_OUTPUT);            
 742   1              WriteTW88(REG008, ReadTW88(REG008) | 0x30);     // Tri-State All outputs & FPdata 
 743   1      
 744   1              FP_PWC_OnOff(OFF);
 745   1      
 746   1              //switch MCU clock to 27MKz
 747   1              WriteTW88Page(PAGE4_CLOCK);
 748   1              Buf_4E1 = ReadTW88(REG4E1);
 749   1              WriteTW88(REG4E1, 0x00);                                        // SPI clock Source=27MHz
 750   1      
 751   1              //----- Powerdown all analog blocks
 752   1              WriteTW88Page(PAGE0_LEDC );
 753   1              WriteTW88(REG0E0, 0xF2 );                                       // LEDC
 754   1              //WriteTW88Page(PAGE0_DCDC );
 755   1              WriteTW88(REG0E8, 0xFE );                                       // DCDC, VCOM-DC, VCOM-AMP
 756   1      
 757   1              SFR_ET1 = 0;                                                            // Disable Touch Timer
 758   1              WriteTW88Page(PAGE0_TOUCH );
 759   1              Buf_0B0 = ReadTW88(REG0B0);
 760   1              WriteTW88(REG0B0, Buf_0B0 | 0x80 );                     // TSC_ADC                              *** 0.2uA
 761   1      
 762   1              WriteTW88Page(PAGE1_DECODER );
 763   1              Buf_106 = ReadTW88(REG106);
 764   1              WriteTW88(REG106, Buf_106 | 0x0F );                     // ADC
 765   1              Buf_1E6 = ReadTW88(REG1E6);
 766   1              WriteTW88(REG1E6, 0x00 );                                       // AFE Mode=low speed   *** 0.6uA
 767   1      
 768   1              //WriteTW88Page(PAGE1_VADC );
 769   1              Buf_1CB = ReadTW88(REG1CB);
 770   1              WriteTW88(REG1CB, Buf_1CB & 0x1F );                     // SOG, LLPLL
 771   1              Buf_1E1 = ReadTW88(REG1E1);
 772   1              WriteTW88(REG1E1, Buf_1E1 | 0x20 );                     // LLPLL GPLL
 773   1      
 774   1              //----- SSPLL power down
 775   1              SSPLL_PowerUp(OFF);                                                     // SSPLL
 776   1      
 777   1              //----- Switch MCU/SPI clock to RC oscillator
 778   1              WriteTW88Page(PAGE4_CLOCK);
 779   1              WriteTW88(REG4E1, 0x10);                                        // SPI clock Source=32KHz, ...
 780   1      
 781   1              //----- Power down crysital oscillator
 782   1              WriteTW88Page(PAGE0_LOPOR);
 783   1              WriteTW88(REG0D4, ReadTW88(REG0D4) | (0x80));   // Enable Xtal PD Control
 784   1              PORT_CRYSTAL_OSC = 0;                                           // Power down Xtal
 785   1      
 786   1              while( PORT_POWER_SAVE==1 );
 787   1      
 788   1              //----- Wait ~30msec to remove key bouncing
 789   1              for(i=0; i<100; i++);
 790   1      
 791   1              //
 792   1              //Now, it is a PowerSave Mode
 793   1              //
 794   1      }
 795          
 796          //-----------------------------------------------------------------------------
 797          /**
 798          * Resume from Power Save Mode                                                                          
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 14  

 799          *
 800          * System Resume procedure
 801          * ========================
 802          *
 803          *       Power up crystal oscillator
 804          *       wait until crystal oscillator stable
 805          *       switch MCU/SPI clock to 27MHz
 806          *       Power up all analog blocks
 807          *       Set MCU clock mode back
 808          *       Set GPIO mode back
 809          *       Now, Normal Operation mode
 810          *
 811          * @see WaitPowerOn
 812          * @see SystemPowerSave
 813          */
 814          void SystemPowerResume(void)
 815          {
 816   1              BYTE i;
 817   1      
 818   1              SFR_EA = 0;
 819   1      
 820   1              //----- Power up Xtal Oscillator
 821   1              WriteTW88Page(PAGE0_LOPOR);
 822   1              PORT_CRYSTAL_OSC = 1;                                                   // Power up Xtal
 823   1              WriteTW88(REG0D4, ReadTW88(REG0D4) & ~(0x80));  // Disable Xtal PD Control
 824   1      
 825   1              //----- Wait until Xtal stable (~30msec)
 826   1              for(i=0; i<100; i++);
 827   1      
 828   1              //----- switch MCU/SPI clock to 27MHz
 829   1              WriteTW88Page(PAGE4_CLOCK);
 830   1              WriteTW88(REG4E1, 0x00);                                                // SPI clock Source=27MHz, ...
 831   1      
 832   1              //----- Power up SSPLL
 833   1              SSPLL_PowerUp(ON);                                                              // SSPLL
 834   1              //DCDC data out needs 200ms.
 835   1              //GlobalBootTime = SystemClock;
 836   1              //PrintSystemClockMsg("SSPLL_PowerUp");
 837   1      
 838   1              //----- Wait until SSPLL stable (~100usec)
 839   1              for(i=0; i<200; i++);
 840   1              for(i=0; i<200; i++);
 841   1      
 842   1              //----- Power up all analog blocks
 843   1              WriteTW88Page(PAGE1_VADC );
 844   1              WriteTW88(REG1E1, Buf_1E1);                                     // LLPLL GPLL
 845   1              WriteTW88(REG1CB, Buf_1CB);                                     // LLPLL, SOG
 846   1              
 847   1              WriteTW88Page(PAGE1_DECODER );
 848   1              WriteTW88(REG106, Buf_106);                                     // ADC
 849   1              WriteTW88(REG1E6, Buf_1E6);                                     // AFE mode
 850   1              
 851   1              WriteTW88Page(PAGE0_TOUCH );
 852   1              WriteTW88(REG0B0, Buf_0B0);                                     // Touch
 853   1      
 854   1              //----- Set MCU clock mode back
 855   1              WriteTW88Page(PAGE4_CLOCK);
 856   1              WriteTW88(REG4E1, Buf_4E1);                                     // Clock selection
 857   1      
 858   1              //----- Set GPIO mode back
 859   1              WriteTW88Page(PAGE0_GPIO);
 860   1              WriteTW88(REG08C, 0x0C);
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 15  

 861   1      
 862   1              SFR_EA = 1;
 863   1      
 864   1              //
 865   1              // In case aRGB input, set Filter=0 and wait until stable and Filter=7
 866   1              //
 867   1      
 868   1      
 869   1              SFR_ET1 = 1;                                                                    // Enable Touch Timer
 870   1      
 871   1              //
 872   1              //Now, Normal Operation mode
 873   1              //
 874   1      
 875   1              while( PORT_POWER_SAVE==1 );                            // Wait untill button is released
 876   1              delay1ms(100);                                                          // To remove key bouncing
 877   1      
 878   1              //----- Power up Panel, Backlight
 879   1              //SSPLL_PowerUp needs 100ms before FW turns on the DataOut
 880   1              DCDC_StartUP();                                                         // DCDC. it has WaitVBlank.
 881   1              LedPowerUp();                                                           // LEDC
 882   1      
 883   1      
 884   1              ePuts("\n----- SystemPowerResume -------");
 885   1              Interrupt_enableVideoDetect(ON);
 886   1              WriteTW88Page(PAGE0_GPIO);
 887   1              WriteTW88(REG003, Buf_r003);    //recover ISR mask
 888   1              if(DebugLevel)
 889   1                      Prompt();
 890   1      }
 891          
 892          //-----------------------------------------------------------------------------
 893          /**
 894          * wait powerup condition on the power save state
 895          *
 896          * @return 1:by button, 2:by Touch
 897          * @see SystemPowerSave
 898          * @see SystemPowerResume
 899          */
 900          BYTE WaitPowerOn(void)
 901          {
 902   1              BYTE i;
 903   1              while(1) {
 904   2                      //----- Check Power Button
 905   2                      if(PORT_POWER_SAVE==1) {
 906   3                              for(i=0; i < 100; i++);
 907   3                              if(PORT_POWER_SAVE==1) return 1;
 908   3                      }
 909   2      
 910   2                      //----- Check Touch
 911   2                      if( P2_4==0 ) return 2;
 912   2      
 913   2                      //----- Check Remote Control
 914   2                      //if( P1_2==0 ) return 3;       // Need to confirm if it is by Power Button
 915   2              }
 916   1      }
 917          
 918          
 919          #ifndef MODEL_TW8835_EXTI2C
 920          #ifdef SUPPORT_BT656
 921          //-----------------------------------------------------------------------------
 922          /*
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 16  

 923          * init BT656 encoder
 924          *
 925          * EVB2.1 and EVB3.1 use ADV7390.
 926          * EVB2.0 and EVB3.0 use BU9969.
 927          */
 928          void InitBT656_Encoder(void)
 929          {
 930   1      #if defined(EVB_21) || defined(EVB_31)
 931   1              //enable ADV739 BT656 output
 932   1              WriteI2CByte( I2CID_ADV7390, 0x17, 0x02 );
 933   1              WriteI2CByte( I2CID_ADV7390, 0x00, 0x1C );
 934   1              WriteI2CByte( I2CID_ADV7390, 0x01, 0x00 );
 935   1              WriteI2CByte( I2CID_ADV7390, 0x80, 0x10 );
 936   1              WriteI2CByte( I2CID_ADV7390, 0x82, 0xCB );
 937   1      
 938   1              WriteI2CByte( I2CID_ADV7391, 0x17, 0x02 );
 939   1              WriteI2CByte( I2CID_ADV7391, 0x00, 0x1C );
 940   1              WriteI2CByte( I2CID_ADV7391, 0x01, 0x00 );
 941   1              WriteI2CByte( I2CID_ADV7391, 0x80, 0x10 );
 942   1              WriteI2CByte( I2CID_ADV7391, 0x82, 0xCB );
 943   1      #elif defined(EVB_20) || defined(EVB_30)
                      //enable BU9969 BT656 output
                      WriteI2CByte( I2CID_BU9969, 0, 1 );
                      WriteI2CByte( I2CID_BU9969, 1, 7 );
                      WriteI2CByte( I2CID_BU9969, 6, 6 );
                      //delay1ms(1);
                      WriteI2CByte( I2CID_BU9969, 2, 0 );
                      WriteI2CByte( I2CID_BU9969, 4, 0 );
                      WriteI2CByte( I2CID_BU9969, 5, 0 );
                      WriteI2CByte( I2CID_BU9969, 7, 0 );
                      WriteI2CByte( I2CID_BU9969, 0x10, 0 );
                      WriteI2CByte( I2CID_BU9969, 0x11, 0 );
              #endif
 956   1      }
 957          #endif
 958          #endif
 959          
 960          
 961          //=============================================================================
 962          //      PICO qHD                                                               
 963          //=============================================================================
 964          #ifdef PICO_GENERIC
              //-----------------------------------------------------------------------------
              /**
              * power on FLCOS
              *
              *       VDD(1.8V) -> VCC(3.3V) -> AVCC(5V)
              *       GPIO64       GPIO63       GPIO65
              *       Note:
              *       It needs a GPIO61 ON before FW calls FLCOS_PowerOn()
              */
              void FLCOS_PowerOn(void)
              {
                      WriteTW88Page(0);
              
                      //VDD (1.8V)ON
                      WriteTW88(REG096, ReadTW88(REG096) | 0x10);             //GPIO64
                      //VCC(3.3V) ON
                      WriteTW88(REG096, ReadTW88(REG096) | 0x08);             //GPIO63
                      delay1ms(30);   //min. 23ms
                      //AVCC(5.0V) ON
                      WriteTW88(REG096, ReadTW88(REG096) | 0x20);             //GPIO65
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 17  

                      delay1ms(10);  //min. 1ms
              }
              //-----------------------------------------------------------------------------
              /**
              * init FLCOS
              */
              void FLCOS_init(void)
              {
                  dPuts("\nFLCOS_init");
                      WriteI2CByte(I2CID_E330_FLCOS, 0x01, 0x00);      //BK111201 Sleeve1 use 0x20.
                      WriteI2CByte(I2CID_E330_FLCOS, 0x02, 0x00);      //BK111202 Sleeve1 use 0xC0
              
                      WriteI2CByte(I2CID_E330_FLCOS, 0xd0, 0x01);     //HFlip.
                      WriteI2CByte(I2CID_E330_FLCOS, 0x06, 0x02);
                      WriteI2CByte(I2CID_E330_FLCOS, 0x07, 0x40);
                      WriteI2CByte(I2CID_E330_FLCOS, 0x08, 0x09);
                      WriteI2CByte(I2CID_E330_FLCOS, 0x09, 0x02);
                      WriteI2CByte(I2CID_E330_FLCOS, 0x0a, 0x67);
                      WriteI2CByte(I2CID_E330_FLCOS, 0x0b, 0x06);
                      WriteI2CByte(I2CID_E330_FLCOS, 0x0c, 0x00);
                      WriteI2CByte(I2CID_E330_FLCOS, 0x0d, 0x00);
                      WriteI2CByte(I2CID_E330_FLCOS, 0x0e, 0x00);
                      WriteI2CByte(I2CID_E330_FLCOS, 0x55, 0x11);             //set nSleep bit.(wakeup)
                  //dPuts("\nwrite Panel x55=0x11");
              //      WriteI2CByte(I2CID_E330_FLCOS, 0x55, 0x00);
              }
              //-----------------------------------------------------------------------------
              /**
              * toggle FLCOS
              *
              * FLCOS keeps try to use a previous video timming.
              * toggle the TCON pin output to restart FLCOS.
              */
              void FLCOS_toggle(void)
              {
              #if 1
                      BYTE Status;
                      WriteTW88Page(0);
                      Status = ReadTW88(REG007);
                      WriteTW88(REG007, Status & ~0x07);      //clear
                      delay1ms(500);
                      WriteTW88(REG007, Status);                      //restore
              #else
                      WriteI2CByte(I2CID_E330_FLCOS, 0x55, 0x00);     
                      delay1ms(300);  //100ms:NG,  PWRDN time was 1500us. 
                      WriteI2CByte(I2CID_E330_FLCOS, 0x55, 0x11);     
              #endif
              }
              
              //-----------------------------------------------------------------------------
              /**
              * enable LED Driver
              */
              void LEDDriverEnable(BYTE fOn)
              {
                      WriteTW88Page(0);
                      if(fOn) WriteTW88(REG094, ReadTW88(REG094) | 0x20);             //GPIO_45=1
                      else    WriteTW88(REG094, ReadTW88(REG094) & ~0x20);    //GPIO_45=0
                      //delay1ms(100);
              }
              //-----------------------------------------------------------------------------
              /**
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 18  

              * init LED Driver
              */
              void LEDDriverInit(void)
              {
                      WriteI2CByte(I2CID_ISL97901, 0x02, 0x04);       
                      WriteI2CByte(I2CID_ISL97901, 0x06, 0x02);       
              #if 0
                      WriteI2CByte(I2CID_ISL97901, 0x13, 0xc0);       //red
                      WriteI2CByte(I2CID_ISL97901, 0x14, 0xc0);       
                      WriteI2CByte(I2CID_ISL97901, 0x15, 0xc0);       
                      WriteI2CByte(I2CID_ISL97901, 0x16, 0x80);       
              #else   
                      //Dang suggest 120117. Need confirm
                      WriteI2CByte(I2CID_ISL97901, 0x13, 0x00);       //red
                      WriteI2CByte(I2CID_ISL97901, 0x14, 0x00);       
                      WriteI2CByte(I2CID_ISL97901, 0x15, 0x00);       
                      WriteI2CByte(I2CID_ISL97901, 0x16, 0x00);       
                      WriteI2CByte(I2CID_ISL97901, 0x17, 0x55);       
              #endif
              }
              
              //-----------------------------------------------------------------------------
              /**
              * default GPIO for qHD
              */
              void qHD_GpioDefault(void)
              {
                      WriteTW88Page(PAGE0_GPIO);
                                                                                                                              //GPIO_0x
                                                                                                                              //00:SCDT
                                                                                                                              //01:HDMI_INT
                                                                                                                              //7  6  5  4  3  2  1  0
                      WriteTW88(REG088, ReadTW88(REG088) & ~0x03);            //                  I  I
                      WriteTW88(REG080, ReadTW88(REG080) | 0x03);                     //                                      G  G
              
              
                                                                                                                              //GPIO_4x
                                                                                                                              //44: RSOP76238 IN : Remocon
                                                                                                                              //45: LED_DR_EN
                                                                                                                              //7  6  5  4  3  2  1  0
                      WriteTW88(REG094, ReadTW88(REG094) & ~0x20);            //x  x  0  0  x  x  x  x
                      WriteTW88(REG08C, ReadTW88(REG08C) | 0x20);                     //      O  X         
                      WriteTW88(REG084, ReadTW88(REG084) | 0x20);                     //      G  X         
              
                                                                                                                              //GPIO_5x
                                                                                                                              //57:EN_SW1
              //                                                                                                              //7  6  5  4  3  2  1  0
              //      WriteTW88(REG095, ReadTW88(REG095) | 0x80);                     //1
              //      WriteTW88(REG08D, ReadTW88(REG08D) | 0x80);                     //O
              //      WriteTW88(REG085, ReadTW88(REG085) | 0x80);                     //G
              
                                                                                                                              //GPIO_6x
                                                                                                                              //60: HDMI_RST#
                                                                                                                              //61: EN_3V3
                                                                                                                              //62: EN_1V2
                                                                                                                              //63: EN_VCC
                                                                                                                              //64: EN_VDD
                                                                                                                              //65: EN_AVCC
                                                                                                                              //7  6  5  4  3  2  1  0
                      WriteTW88(REG096,(ReadTW88(REG094) & ~0x3E) & 0x01);//      0  0  0      0  0  1
                      WriteTW88(REG08E, ReadTW88(REG08E) | 0x3F);                     //      O  O  O  O  O  O
                      WriteTW88(REG086, ReadTW88(REG086) | 0x3F);                     //              G  G  G  G      G  G
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 19  

              }
              #endif //..PICO_GENERIC
1111          
1112          
1113          
1114          //=============================================================================
1115          // RearCameraDisplayMode                                                                               
1116          //=============================================================================
1117          #ifdef SUPPORT_RCD
              //-----------------------------------------------------------------------------
              /**
              *       Turn On/Off Back drive grid SPIOSD image
              */
              static void BackDriveGrid(BYTE on)
              {
                      if(on) {
                              //draw parkgrid
                              SOsdWinBuffClean(0);
              
                              //init DE
                              SpiOsdSetDeValue();
              
                              //init SOSD
                              WaitVBlank(1);
                              SpiOsdEnable(ON);
                              SpiOsdResetRLC(1,0);
                              SpiOsdWinImageLocBit(1,0);
                              SpiOsdWinLutOffset( 1, 0 /*SOSD_WIN_BG,  WINBG_LUTLOC*/ );  //old: SpiOsdLoadLUT_ptr
                              SpiOsdWinFillColor( 1, 0 );
              
                              MovingGridInit();
                              //MovingGridDemo(0 /*Task_Grid_n*/);
                              MovingGridTask_init();
                              MovingGridLUT(3);       //I like it.
              
                      }
                      else {
                              SpiOsdWinHWOffAll(0);   //without wait
                              StartVideoInput();
                      }
              }
              
              //-----------------------------------------------------------------------------
              /**
              * init RCD mode
              *
              * goto RCDMode (RearCameraDisplay Mode)
              * and, prepare ParkingGrid.
              * RCDMode does not support a video ISR.
              * @return
              *       0:success
              *       other:error code
              */
              BYTE InitRCDMode(BYTE fPowerUpBoot)
              {
                      BYTE ret;
              
                      Printf("\nInitRCDMode(%bd)",fPowerUpBoot);
                      if(fPowerUpBoot==0) {
                              if(MenuGetLevel()) {
                                      MenuQuitMenu();
                                      SpiOsdWinHWOffAll(1);   //with WaitVBlank
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 20  

                              }
                              //FYI. I don't care demo page.
                      }
              
                      //skip CheckEEPROM() and manually assign DevegLevel
                      DebugLevel = 1;
              
                      //set default setting.
                      InitWithNTSC();
              
                      FP_GpioDefault();
              
                      SSPLL_PowerUp(ON);
                      //PrintSystemClockMsg("SSPLL_PowerUp");
                      //DCDC needs 100ms, but we have enough delay on...
              
              
                      WriteTW88Page(PAGE0_GENERAL);
                      WriteTW88(REG040, ReadTW88(REG040) & ~0x10);
              
                      DCDC_StartUP();
              
                      PrintSystemClockMsg("before DecoderCheck");
              
              #if 1
                      //We add a check routine because the customer wants a stable video..
                      //Current code only check the NTSC. 
                      //If you want to PAL, change REG11D value.
                      //If we assign only NTSC, it uses a 300ms.
                      //If we add all standard, it uses a 500ms.
                      WriteTW88Page(1);
                      WriteTW88(REG11D, 0x01);
              
                      //wait until we have a stable signal
                      ret=DecoderCheckVDLOSS(100);
                      if(ret) {
                              ePuts("\nCheckAndSetDecoderScaler VDLOSS");
                      }
                      else {
                              //get standard
                              ret = DecoderCheckSTD(100);
                              if ( ret == 0x80 ) {
                                  ePrintf("\nCheckAndSetDecoderScaler NoSTD");
                                      //return( 2 );
                              }
                              else {
                                      ret >>= 4;
                                      //InputSubMode = mode;
                                      ePrintf("\nMode:%bx",ret);
                              }
                      }
                      PrintSystemClockMsg("after DecoderCheck");
              #endif
              
                      //disable interrupt.
                      WriteTW88Page(PAGE0_GENERAL );
                      WriteTW88(REG003, 0xFE );       // enable only SW interrupt
              
                      LedBackLight(ON);
                      ScalerSetMuteManual(OFF);
              
                      //draw parkgrid
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 21  

                      BackDriveGrid(ON);
              
                      LedPowerUp();
              
                      return ret;
              }
              #endif
1240          
1241          #ifdef SUPPORT_RCD
              #define RET_RCDMODE_UNKNOWN     0
              #define RET_RCDMODE_OFF         1
              #define RET_RCDMODE_PSM         2
              //-----------------------------------------------------------------------------
              /* RCDMode main_loop
              *
              * RearCameraDisplayMode LOOP
              * ==========================
              */
              BYTE RCDMode_loop(void)
              {
                      //---------------------------------------------------------------
                      //                                   RearCameraDisplayMode Loop 
                      //---------------------------------------------------------------
                      while(1) {
                              //-------------- Check Serial Port ---------------------
                              Monitor();                              // for new monitor functions
              
                              if(IsBackDrivePortOn()==0) {
                                      //let's move to the normal mode(playback mode)
                                      return 1;
                              }
                              if(PORT_POWER_SAVE==1 && SysNoInitMode==SYS_MODE_NORMAL) {
                                      return RET_RCDMODE_PSM;
                              }
                              if(access==0)   
                                      continue;
              
                              if(Task_Grid_on)
                                      MovingGridTask();
                      } //..while(1)
                      return 0;
              }
              #endif
1276          
1277          
1278          //-----------------------------------------------------------------------------
1279          /**
1280          * print model, version, compile date
1281          *
1282          * example:
1283          *       ********************************************************
1284          *        TW8835 Evaluation Board 3.1 - 18:52:43 (May 14 2012) SLAVE
1285          *       ********************************************************
1286          */
1287          #ifdef MODEL_TW8835_EXTI2C
              static void PrintModelVersionInfo(BYTE fSlave)
              #else
1290          static void PrintModelVersionInfo(void)
1291          #endif
1292          {
1293   1              //-------------------------------------
1294   1              Printf("\n********************************************************");
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 22  

1295   1      #if defined(MODEL_TW8830)
                      Puts("\n TW8830 ");
              #elif defined(MODEL_TW8835)
1298   1              Puts("\n TW8835 ");
1299   1      #elif defined(MODEL_TW8836)
                      Puts("\n TW8836 ");
              #else
                      Puts("\n TW88XX ");
              #endif
1304   1      #if defined(DP80390)
                      Puts("DP80390 ");
              #endif
1307   1      #if defined(SUPPORT_8BIT_CHIP_ACCESS)
                      Puts("8BIT ");
              #endif
1310   1      #if defined(CHIP_MANUAL_TEST) 
                      Puts(" CHIPTEST ");
              #endif
1313   1      #if defined(MODEL_TW8835FPGA) || defined(MODEL_TW8836FPGA)
                      Puts("FPGA Verification - ");
              #elif defined(MODEL_TW8835RTL) || defined(MODEL_TW8836RTL)
                      Puts("RTL Verification - ");
              #else
1318   1              Puts("Evaluation Board ");
1319   1              #ifdef EVB_10
                      Puts("1.0 - ");
                      #elif defined(EVB_21)
                      Puts("2.1 - ");
                      #elif defined(EVB_20)
                      Puts("2.0 - ");
                      #elif defined(EVB_31)
1326   1              Puts("3.1 - ");
1327   1              #elif defined(EVB_30)
                      Puts("3.0 - ");
                      #else
                      Puts("0.0 - ");
                      #endif
1332   1      #endif
1333   1              Printf("%s (%s)", __TIME__, __DATE__);
1334   1      #ifdef MODEL_TW8835_EXTI2C
                      if(fSlave)      Puts(" SLAVE");
                      else            Puts(" HOST");
              #endif
1338   1      #ifdef MODEL_TW8835_SLAVE
                      Puts(" SLAVE");
              #endif
1341   1      #ifdef MODEL_TW8835_MASTER
              BUG..Use main-master.c file
              #endif
1344   1      
1345   1              Printf("\n********************************************************");
1346   1      }
1347          
1348          
1349          
1350          
1351          //=============================================================================
1352          // INIT ROUTINES
1353          //=============================================================================
1354          //-----------------------------------------------------------------------------
1355          extern BYTE      OsdTime;
1356          /**
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 23  

1357          * init global variables
1358          */
1359          void InitVariables(void)
1360          {
1361   1              DebugLevel=0;
1362   1              access = 1;
1363   1              SW_key = 0;
1364   1      
1365   1              //--task variables
1366   1              Task_Grid_on = 0;
1367   1              Task_Grid_cmd = 0;
1368   1              Task_NoSignal_cmd = TASK_CMD_DONE;
1369   1              SW_INTR_cmd = 0;
1370   1      
1371   1              SpiFlashVendor = 0;     //see spi.h
1372   1      #ifdef DEBUG_REMO_NEC
                      DebugRemoStep = 0;  //only for test BK110328
              #endif
1375   1      //      FirstInitDone = 0;
1376   1      #if defined(SUPPORT_I2CCMD_TEST_SLAVE)
                      ext_i2c_cmd=0;
                      ext_i2c_timer=0;
              #endif
1380   1      
1381   1              OsdTime =       0;
1382   1      }
1383          
1384          //=============================================================================
1385          // Init QuadIO SPI Flash                                                                       
1386          //=============================================================================
1387          
1388          //-----------------------------------------------------------------------------
1389          /**
1390          * init core
1391          *
1392          * prepare SPIFLASH QuadIO
1393          * enable chip interrupt
1394          * enable remocon
1395          *
1396          */
1397          void InitCore(BYTE fPowerUpBoot)
1398          {
1399   1              if(fPowerUpBoot) {
1400   2                      //check port 1.5. if high, it is a skip(NoInit) mode.
1401   2                      SysNoInitMode = SYS_MODE_NORMAL;
1402   2      //BK120423
1403   2      #ifdef MODEL_TW8836FPGA
                              if(1)   
              #else
1406   2                      if(PORT_NOINIT_MODE == 1)       
1407   2      #endif
1408   2                      {
1409   3                              SysNoInitMode = SYS_MODE_NOINIT;
1410   3                              //turn on the SKIP_MODE.
1411   3                              access = 0;
1412   3                                              
1413   3                              McuSpiClkSelect(MCUSPI_CLK_27M);
1414   3                              return;
1415   3                      }
1416   2              }
1417   1      
1418   1              Puts("\nInitCore");     
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 24  

1419   1              //----- Set SPI mode
1420   1              SpiFlashVendor = SPI_QUADInit();
1421   1              SPI_SetReadModeByRegister(SPI_READ_MODE);               // Match DMA READ mode with SPI-read
1422   1      
1423   1              //----- Enable Chip Interrupt
1424   1      
1425   1              WriteTW88Page(PAGE0_GENERAL );
1426   1              WriteTW88(REG002, 0xFF );       // Clear Pending Interrupts
1427   1              WriteTW88(REG003, 0xFE );       // enable SW. disable all other interrupts
1428   1      
1429   1      #ifndef MODEL_TW8835_EXTI2C
1430   1              //enable remocon interrupt.
1431   1              EnableRemoInt();
1432   1      #endif
1433   1      }
1434          
1435          //=============================================================================
1436          //                                                                     
1437          //=============================================================================
1438          
1439          //-----------------------------------------------------------------------------
1440          /**
1441          * start video with a saved input
1442          *
1443          * @see ChangeInput
1444          */
1445          void StartVideoInput(void)
1446          {
1447   1              BYTE InputMainEE;
1448   1                                      
1449   1      #if defined(PICO_GENERIC)
                      //"pico generic" only have a HDMI input.
                      if((InputMainEE != INPUT_HDMIPC) && (InputMainEE != INPUT_HDMITV)) {
                              if(GetHdmiModeEE())  InputMainEE = INPUT_HDMITV;
                              else                             InputMainEE = INPUT_HDMIPC;
                              SaveInputEE(InputMainEE);
                      }
              #endif
1457   1      
1458   1      
1459   1              ePrintf("\nStart with Saved Input: ");
1460   1              InputMainEE = GetInputEE();
1461   1              PrintfInput(InputMainEE,1);
1462   1      
1463   1              InputMain = 0xff;                       // start with saved input                                               
1464   1              ChangeInput( InputMainEE );     
1465   1      }
1466          
1467          
1468          
1469          //--------------------------------------------------
1470          // Description  : Video initialize
1471          // Input Value  : None
1472          // Output Value : None
1473          //--------------------------------------------------
1474          
1475          //-----------------------------------------------------------------------------
1476          /**
1477          * initialize TW8835 System
1478          *
1479          *       CheckEEPROM
1480          *       InitWithNTSC
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 25  

1481          *       Set default GPIO
1482          *       SSPLL_PowerUp
1483          *       Startup DCDC
1484          *       download Font
1485          *       Start Video input
1486          *       InitLogo1
1487          *       Powerup LED
1488          *       Remove Logo
1489          *       Init Touch
1490          *
1491          * @param bool fPowerUpBoot
1492          *       if fPowerUpBoot is true, 
1493          *               download default value,
1494          *               turn on Panel
1495          * @return 0:success
1496          * @see InitWithNTSC
1497          * @see FP_GpioDefault
1498          * @see SSPLL_PowerUp
1499          * @see DCDC_StartUP
1500          * @see FontOsdInit
1501          * @see StartVideoInput
1502          * @see InitLogo1
1503          * @see LedPowerUp
1504          * @see RemoveLogoWithWait
1505          * @see OsdSetTime
1506          * @see OsdSetTransRate
1507          * @see BackLightSetRate
1508          * @see MeasSetErrTolerance
1509          * @see InitTouch
1510          * @see UpdateOsdTimerClock
1511          */
1512          BYTE InitSystem(BYTE fPowerUpBoot)
1513          {
1514   1      #ifndef MODEL_TW8835_EXTI2C
1515   1              BYTE ee_mode;
1516   1      #endif
1517   1              BYTE value;
1518   1              BYTE FirstInitDone;
1519   1      #ifdef SW_I2C_SLAVE
                      BYTE i;
              #endif
1522   1      
1523   1              if(access==0) {
1524   2                      //do nothing.
1525   2                      return 0;
1526   2              }
1527   1      
1528   1              //check EEPROM
1529   1      #ifdef MODEL_TW8835_EXTI2C
                      // do nothing. InitHostSystem() will setup ee_mode and DebugLevel
              #else
1532   1              ee_mode = CheckEEPROM();
1533   1              if(ee_mode==1) {
1534   2                      //---------- if FW version is not matched, initialize EEPROM data -----------
1535   2                      InitWithNTSC();
1536   2                      
1537   2                      DebugLevel = 3;
1538   2      
1539   2                      #ifdef USE_SFLASH_EEPROM
1540   2                      EE_Format();
1541   2                      EE_FindCurrInfo();
1542   2                      #endif
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 26  

1543   2              
1544   2                      InputMain = 0xff;       // start with saved input
1545   2                      InitializeEE();         //save all default EE values.
1546   2              
1547   2                      DebugLevel = 0;
1548   2                      SaveDebugLevelEE(DebugLevel);
1549   2      
1550   2                      ee_mode = 0;
1551   2              }
1552   1      
1553   1              //read debug level
1554   1              DebugLevel = GetDebugLevelEE();
1555   1              if((DebugLevel==0) && (fPowerUpBoot))
1556   1                      Printf("\n===> Debugging was OFF (%02bx)", DebugLevel);
1557   1              else 
1558   1                      ePrintf("\n===> Debugging is ON (%02bx)", DebugLevel);
1559   1      #endif
1560   1      
1561   1              ePrintf("\nInitSystem(%bd)",fPowerUpBoot);
1562   1      
1563   1      
1564   1              //
1565   1              //set default setting.
1566   1              //
1567   1              if(fPowerUpBoot) {
1568   2      
1569   2                      //Init HW with default
1570   2                      InitWithNTSC();
1571   2      
1572   2                      //------------------
1573   2                      //first GPIO position
1574   2      #if defined(PICO_GENERIC)
                              qHD_GpioDefault();
              #else
1577   2                      FP_GpioDefault();
1578   2      #endif
1579   2      
1580   2                      SSPLL_PowerUp(ON);
1581   2                      //DCDC data out needs 200ms.
1582   2                      PrintSystemClockMsg("SSPLL_PowerUp");
1583   2      
1584   2      #if 0 //BKFYI120112. If you want to use CKLPLL, select MCUSPI_CLK_PCLK 
                              McuSpiClkSelect(MCUSPI_CLK_PCLK);
              #endif
1587   2      
1588   2      #ifdef SUPPORT_I2C2
                              //I2C2 test position.
                              //If you are using I2C2, you can add your code from here.
                              WriteI2C2Byte(0x8C,0x00,0xAB);
                              Printf("\nI2C2 test value %bx",ReadI2C2Byte(0x8C,0x00));
              #endif
1594   2              }
1595   1      
1596   1      #ifdef SUPPORT_HDMI_SiIRX
                      //it will supply +3V3 and +1V2.
                      HDMI_SystemInit();
              #endif
1600   1      #ifdef SUPPORT_HDMI_EP9351
                      //it will download EDID & HDCP
                      Hdmi_SystemInit_EP9351();
              #endif
1604   1      
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 27  

1605   1              InputMain = GetInputEE();
1606   1              FirstInitDone = 0;
1607   1      
1608   1              if(fPowerUpBoot) {
1609   2                      //---------------------
1610   2                      // turn on DCDC
1611   2                      //---------------------
1612   2                      DCDC_StartUP();
1613   2              }
1614   1              //---------------
1615   1              //FontOSD first message
1616   1              FontOsdInit();
1617   1              FOsdSetDeValue();
1618   1      #if 1 //BKFYI. first FontOSD Message.
1619   1              FOsdIndexMsgPrint(FOSD_STR1_TW8835);
1620   1              FOsdWinEnable(0, OFF);  //win0, disable..
1621   1      #endif
1622   1      
1623   1      
1624   1      #if defined(PICO_GENERIC)
                      //--------------------
                      //
                      //--------------------
                      FLCOS_PowerOn();
                      LEDDriverEnable(ON); //it needs 100ms delay before LEDDriverInit()
              
                      FLCOS_init();
                  delay1ms(100);
              
                      LEDDriverInit();  //    NSLEDDriverinit();
                      //WriteI2CByte(I2CID_E330_FLCOS, 0x55, 0x11);   //wakeup
                      PrintSystemClockMsg("After Init FLCOS & LED");
              #endif
1638   1              
1639   1              DumpClock(0);
1640   1              //------------------------
1641   1              //start with saved input
1642   1              //------------------------
1643   1              StartVideoInput();
1644   1              PrintSystemClockMsg("StartVideoInput");
1645   1      
1646   1              //
1647   1              //Logo and LedPowetUp
1648   1              //
1649   1              if(FirstInitDone ==0) {
1650   2                      InitLogo1();
1651   2                      FirstInitDone =1;
1652   2              }
1653   1              LedPowerUp();
1654   1      
1655   1      #ifndef MODEL_TW8835_EXTI2C
1656   1      #ifdef SUPPORT_BT656
1657   1              //enable BT656 output encoder
1658   1              if(fPowerUpBoot)
1659   1                      InitBT656_Encoder();
1660   1      #endif
1661   1      #endif
1662   1              //
1663   1              //remove InitLogo
1664   1              //
1665   1              if(FirstInitDone ==1) {
1666   2                      FirstInitDone = 2;
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 28  

1667   2      #ifdef NOSIGNAL_LOGO
1668   2                      if(Task_NoSignal_cmd == TASK_CMD_DONE) {
1669   3                              RemoveLogoWithWait(fPowerUpBoot);
1670   3                              FOsdWinEnable(0, OFF);  //win0, disable..
1671   3                      }
1672   2      #else
                              RemoveLogoWithWait(1);
                              if(Task_NoSignal_cmd == TASK_CMD_DONE)
                                      FOsdWinEnable(0, OFF);  //win0, disable..
              #endif
1677   2              }       
1678   1      #ifdef NOSIGNAL_LOGO 
1679   1              //BK120803. If VDLoss, set FreerunManual.
1680   1              else {
1681   2                      WriteTW88Page(PAGE0_GENERAL);
1682   2                      if(ReadTW88(REG004) & 0x01)
1683   2                              ScalerSetFreerunManual(ON);
1684   2              }
1685   1      #endif
1686   1      
1687   1              //------------------------
1688   1              // setup eeprom effect
1689   1              //------------------------
1690   1              SetAspectHW(GetAspectModeEE());
1691   1              value = EE_Read(EEP_FLIP);      //mirror
1692   1              if(value) {
1693   2                      WriteTW88Page(PAGE2_SCALER);
1694   2                  WriteTW88(REG201, ReadTW88(REG201) | 0x80);
1695   2              }
1696   1              OsdSetTime(EE_Read(EEP_OSD_TIMEOUT));
1697   1      
1698   1      
1699   1              OsdSetTransRate(EE_Read(EEP_OSD_TRANSPARENCY));
1700   1              BackLightSetRate(EE_Read(EEP_BACKLIGHT));
1701   1              //set the Error Tolerance value for "En Changed Detection"
1702   1              MeasSetErrTolerance(0x04);              //tolerance set to 32
1703   1      
1704   1      
1705   1      #ifdef USE_SFLASH_EEPROM
1706   1              //to cleanup E3PROM
1707   1              //call EE_CleanBlocks();
1708   1      #endif
1709   1      
1710   1      
1711   1      #ifdef SUPPORT_TOUCH
1712   1              //read CalibDataX[] and CalibDataY[] from EEPROM.
1713   1              ReadCalibDataFromEE();
1714   1              InitTouch();    
1715   1      
1716   1              SetTouchStatus(TOUCHEND);
1717   1              SetLastTouchStatus(TOUCHEND);
1718   1      #endif
1719   1      
1720   1              UpdateOsdTimerClock();
1721   1              //dPrintf("\nOsdTimerClock:%ld",OsdTimerClock);
1722   1      
1723   1      #ifdef SW_I2C_SLAVE
                      dbg_sw_i2c_sda_count = 0;
                      dbg_sw_i2c_scl_count = 0;
                      sw_i2c_regidx = 0;
                      for(i=0; i < 4; i++) {
                              dbg_sw_i2c_index[i] = 0;
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 29  

                              dbg_sw_i2c_devid[i] = 0;
                              dbg_sw_i2c_regidx[i] = 0;
                              dbg_sw_i2c_data[i] = 0; 
                      }
              
                      sw_i2c_index = 0x00;
                      E2IE |=  0x80;
              #endif
1737   1      
1738   1      #if defined(MODEL_TW8835_SLAVE)
                      //
                      // check PORT
                      //
                      Puts("\nI2C with GPIO(P1_3/INT10) ");
                      if(PORT_I2CCMD_GPIO_SLAVE) {
                              Printf("Ready!!"); 
              
                              SFR_E2IE  |= 0x08; //enable INT10 interrupt
                      }
                      else
                              Printf("FAIL!!"); 
              #if defined(SUPPORT_EXTMCU_ISP) && defined(USE_EXTMCU_ISP_GPIO)
                      Puts("\nI2C with ISP(P3_2) ");
                      if(PORT_EXTMCU_ISP) Printf("Ready!!");
                      else {
                              Printf("FAIL!!. access become 0");
                              access = 0;
                      }
              #endif
              #endif
1759   1      
1760   1              // re calculate FOSD DE
1761   1              FOsdSetDeValue();
1762   1      
1763   1      #ifdef SUPPORT_WATCHDOG
                      //if(access)
                              EnableWatchdog(0);
                              F_watch = 1; //for first  wdt_last value
              #endif
1768   1      
1769   1              //dPuts("\nInitSystem-END");
1770   1              return 0;
1771   1      }
1772          
1773          //=============================================================================
1774          // Video Signal Task                                                                           
1775          //=============================================================================
1776          
1777          //-----------------------------------------------------------------------------
1778          /**
1779          * do Video Signal Task Routine
1780          *
1781          *
1782          * @see Interrupt_enableVideoDetect
1783          * @see CheckAndSetInput
1784          * @see VInput_enableOutput
1785          */
1786          void NoSignalTask(void)
1787          {       
1788   1              DECLARE_LOCAL_page
1789   1              BYTE ret;
1790   1              BYTE r004;
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 30  

1791   1      
1792   1              if(Task_Grid_on)
1793   1                      // MovingGridTask uses tic_task. It can not coexist with NoSignalTask.
1794   1                      return;
1795   1      
1796   1              if(Task_NoSignal_cmd==TASK_CMD_DONE)
1797   1                      return;
1798   1      
1799   1              if(tic_task < NOSIGNAL_TIME_INTERVAL) 
1800   1                      return;
1801   1      
1802   1              if(Task_NoSignal_cmd==TASK_CMD_WAIT_VIDEO) {
1803   2      
1804   2                      ReadTW88Page(page);
1805   2      
1806   2                      FOsdWinToggleEnable(TASK_FOSD_WIN); //WIN0-toggle
1807   2                      if(Task_NoSignal_count < 3) {
1808   3                              dPuts("\nTask NoSignal TASK_CMD_WAIT_VIDEO");
1809   3                              Task_NoSignal_count++;
1810   3                      }
1811   2                      tic_task = 0;
1812   2      
1813   2                      WriteTW88Page(page);
1814   2                      return;
1815   2              }
1816   1              if(Task_NoSignal_cmd==TASK_CMD_WAIT_MODE)
1817   1                      return;
1818   1       
1819   1              //--------------------------------------------
1820   1              //
1821   1              //--------------------------------------------
1822   1      
1823   1              dPuts("\n***Task NoSignal TASK_CMD_RUN");
1824   1              if(Task_NoSignal_cmd == TASK_CMD_RUN_FORCE)
1825   1                      dPuts("_FORCE");
1826   1      
1827   1              ReadTW88Page(page);
1828   1              WriteTW88Page(PAGE0_GENERAL);
1829   1              r004 = ReadTW88(REG004);
1830   1              if(r004 & 0x01) {                                               
1831   2                      ePrintf("..Wait...Video");
1832   2      
1833   2                      tic_task = 0;
1834   2                      WriteTW88Page(page);
1835   2                      return;
1836   2              }
1837   1      
1838   1              //turn off Interrupt.
1839   1              Interrupt_enableVideoDetect(OFF);
1840   1      
1841   1              //start negotition
1842   1              ret = CheckAndSetInput();
1843   1      
1844   1              //turn on Interrupt. 
1845   1              //if success, VInput_enableOutput() will be executed.
1846   1              Interrupt_enableVideoDetect(ON);
1847   1      
1848   1              if(ret==ERR_SUCCESS) {
1849   2                      dPuts("\n***Task NoSignal***SUCCESS");
1850   2                      VInput_enableOutput(VH_Loss_Changed);
1851   2                      FOsdWinEnable(TASK_FOSD_WIN,OFF);       //WIN0, Disable
1852   2      
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 31  

1853   2      
1854   2      #ifdef NOSIGNAL_LOGO
1855   2                      if(getNoSignalLogoStatus()) {
1856   3                              ScalerSetFreerunManual(OFF);    //BK120803
1857   3                              RemoveLogo();
1858   3                      }
1859   2      #endif
1860   2      #ifdef PICO_GENERIC
                              FLCOS_toggle();
              #endif
1863   2      
1864   2              }
1865   1      #ifdef SUPPORT_PC
1866   1              else {
1867   2                      //fail 
1868   2                      if(InputMain==INPUT_PC) {
1869   3                              WriteTW88Page(PAGE0_GENERAL);
1870   3                              if(ReadTW88(REG004) & 0x01)
1871   3                                      FOsdIndexMsgPrint(FOSD_STR2_NOSIGNAL);  //over write
1872   3                              else
1873   3                                      FOsdIndexMsgPrint(FOSD_STR3_OUTRANGE);  //replace 
1874   3                      }
1875   2              }
1876   1      #endif
1877   1      
1878   1      
1879   1              //update tic_task.
1880   1              tic_task = 0;
1881   1      
1882   1              WriteTW88Page(page);
1883   1      }
1884          //-----------------------------------------------------------------------------
1885          /**
1886          *  Check each input status
1887          *
1888          *  recover routine for unstable video input status.
1889          *  only need it when user connect/disconnect the connector 
1890          *  or, the QA toggles the video mode on the pattern generator.
1891          */
1892          void NoSignalTaskOnWaitMode(void)
1893          {
1894   1              BYTE ret;
1895   1              DECLARE_LOCAL_page
1896   1              if((Task_NoSignal_cmd != TASK_CMD_WAIT_MODE))
1897   1                      return;
1898   1              
1899   1              ReadTW88Page(page); 
1900   1              if(InputMain==INPUT_CVBS || InputMain==INPUT_SVIDEO) {
1901   2                      ret=DecoderReadDetectedMode();
1902   2                      //only consider NTSC & PAL with an idle mode.
1903   2                      if(ret == 0 || ret == 1) {
1904   3                              if(InputSubMode != ret) {
1905   4                                      ScalerSetMuteManual( ON );
1906   4      
1907   4                                      SW_INTR_cmd = SW_INTR_VIDEO_CHANGED;
1908   4                                      dPrintf("\nRequest SW Interrupt cmd:%bd InputSubMode:%bd->%bd",SW_INTR_cmd, InputSubMode,ret);
1909   4                                      InputSubMode = ret;
1910   4                                      WriteTW88Page(PAGE0_GENERAL);
1911   4                                      WriteTW88(REG00F, SW_INTR_VIDEO);       //SW interrupt.         
1912   4                              } 
1913   3                      }
1914   2              }
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 32  

1915   1      #ifdef SUPPORT_COMPONENT
1916   1              else if(InputMain==INPUT_COMP) {
1917   2                      ret = VAdcGetInputStatus();     //detected input.
1918   2                      if(ret & 0x08) {                        //check the compoiste detect status first.
1919   3                              ret &= 0x07;
1920   3                              if( (ret!=7) && (InputSubMode != ret) ) {
1921   4                                      ScalerSetMuteManual( ON );
1922   4      
1923   4                                      SW_INTR_cmd = SW_INTR_VIDEO_CHANGED;
1924   4                                      dPrintf("\nRequest SW Interrupt cmd:%bd InputSubMode:%bd->%bd",SW_INTR_cmd, InputSubMode,ret);
1925   4                                      InputSubMode = ret;
1926   4                                      WriteTW88Page(PAGE0_GENERAL);
1927   4                                      WriteTW88(REG00F, SW_INTR_VIDEO);       //SW interrupt.         
1928   4                              } 
1929   3                      }
1930   2              }
1931   1      #endif
1932   1              WriteTW88Page(page);
1933   1      }
1934          
1935          //=============================================================================
1936          // Interrupt Handling Routine                                                                  
1937          //=============================================================================
1938          //-----------------------------------------------------------------------------
1939          /**
1940          * enable VideoDetect interrupt
1941          *
1942          * Turn off the SYNC Change(R003[2]) mask,
1943          *               the Video Loss(R003[1]) mask,
1944          *               the WirteReg0x00F(R003[0] mask.
1945          * 
1946          * Turn On  the Video Loss(R003[1]) mask,
1947          *               the WirteReg0x00F(R003[0] mask. 
1948          *
1949          * I do not turn on the SYNC Change.
1950          * if you want to turn on SYNC, You have to call Interrupt_enableSyncDetect(ON).
1951          *
1952          * @param bool fOn
1953          * @see Interrupt_enableSyncDetect
1954          */
1955          void Interrupt_enableVideoDetect(BYTE fOn)
1956          {
1957   1      #ifdef DEBUG_ISR
                      WORD temp_VH_Loss_Changed;
                      BYTE temp_INT_STATUS, temp_INT_STATUS2;
              #endif
1961   1              DECLARE_LOCAL_page
1962   1      
1963   1              ReadTW88Page(page);
1964   1              WriteTW88Page(PAGE0_GENERAL);
1965   1              if(fOn) {
1966   2                      WriteTW88(REG002, 0xFF);        //clear
1967   2                      WriteTW88(REG004, 0xFF);        //clear
1968   2                      WriteTW88(REG003, 0xFC);        //release Video, but still block SYNC
1969   2              }
1970   1              else {
1971   2                      WriteTW88(REG003, 0xFE);        //block.
1972   2                      WriteTW88(REG002, 0xFF);        //clear
1973   2                      WriteTW88(REG004, 0xFF);        //clear
1974   2      
1975   2      #ifdef DEBUG_ISR
                              //copy
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 33  

                              temp_INT_STATUS = INT_STATUS;
                              temp_VH_Loss_Changed = VH_Loss_Changed;
                              temp_INT_STATUS2 = INT_STATUS2;
              #endif
1981   2                      //clear
1982   2                      INT_STATUS = 0;
1983   2                      VH_Loss_Changed = 0;
1984   2                      INT_STATUS2 = 0;
1985   2      #ifdef DEBUG_ISR
                              if(temp_INT_STATUS+temp_VH_Loss_Changed+temp_INT_STATUS2)
                                      dPrintf("\nclear INT_STATUS:%bx INT_STATUS2:%bx VH_Loss_Changed:%d",temp_INT_STATUS,temp_INT_STATUS2,te
             -mp_VH_Loss_Changed);
              #endif
1989   2              }
1990   1              WriteTW88Page(page);
1991   1      }
1992          
1993          //-----------------------------------------------------------------------------
1994          /**
1995          * Turn off/on SYNC Interrupt mask.
1996          *
1997          * @see Interrupt_enableVideoDetect
1998          */
1999          void Interrupt_enableSyncDetect(BYTE fOn)
2000          {
2001   1              DECLARE_LOCAL_page
2002   1      #ifdef DEBUG_ISR
                      BYTE temp_INT_STATUS, temp_INT_STATUS2;
              #endif
2005   1      
2006   1              ReadTW88Page(page);
2007   1              WriteTW88Page(PAGE0_GENERAL);
2008   1              if(fOn) {
2009   2                      WriteTW88(REG002, 0x04);        //clear
2010   2                      WriteTW88(REG004, 0x06);        //clear
2011   2                      WriteTW88(REG003, ReadTW88(REG003) & ~0x04);    //release
2012   2      
2013   2                      SW_Video_Status = 1;
2014   2                      //dPrintf("\nSW_Video_Status:%bd",SW_Video_Status);
2015   2              }
2016   1              else {
2017   2                      WriteTW88(REG003, ReadTW88(REG003) | 0x04);     //block
2018   2                      WriteTW88(REG002, 0x04);        //clear
2019   2                      WriteTW88(REG004, 0x06);        //clear
2020   2      
2021   2      #ifdef DEBUG_ISR
                              //copy
                              temp_INT_STATUS = INT_STATUS;
                              temp_INT_STATUS2 = INT_STATUS2;
              #endif
2026   2                      //clear
2027   2                      INT_STATUS &= ~0x04;
2028   2                      INT_STATUS2 &= ~0x06;
2029   2      #ifdef DEBUG_ISR
                              if( (temp_INT_STATUS != INT_STATUS) || (temp_INT_STATUS2 != INT_STATUS2))
                                      dPrintf("\nclear SYNC at INT_STATUS:%bx INT_STATUS2:%bx",temp_INT_STATUS,temp_INT_STATUS2);
              #endif
2033   2              }
2034   1              WriteTW88Page(page);
2035   1      }
2036          
2037          //-----------------------------------------------------------------------------
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 34  

2038          /**
2039          * do interrupt polling
2040          *
2041          * Read interrupt global value that changed on interrupt service routine,
2042          * and print status.
2043          *
2044          * @see ext0_int
2045          * @see InterruptHandlerRoutine
2046          */
2047          void InterruptPollingRoutine(void)
2048          {
2049   1              DECLARE_LOCAL_page
2050   1              BYTE temp_INT_STATUS_ACC, temp_INT_STATUS2_ACC;
2051   1              BYTE r003;
2052   1              BYTE i, tmp;
2053   1      
2054   1              //------------ Chip Interrupt --------------    
2055   1              SFR_EX0 = 0;    //disable INT0
2056   1              //copy
2057   1              main_INT_STATUS = INT_STATUS;         
2058   1              main_INT_STATUS2 = INT_STATUS2;
2059   1              main_VH_Loss_Changed = VH_Loss_Changed;
2060   1              temp_INT_STATUS_ACC = INT_STATUS_ACC;
2061   1              temp_INT_STATUS2_ACC = INT_STATUS2_ACC;
2062   1              //clear
2063   1              INT_STATUS = 0;                 //can be removed
2064   1              INT_STATUS2 = 0;                //can be removed
2065   1              VH_Loss_Changed = 0;
2066   1              INT_STATUS_ACC = 0;
2067   1              INT_STATUS2_ACC = 0;
2068   1              SFR_EX0 = 1;    //enable INT0
2069   1      
2070   1              ReadTW88Page(page);
2071   1              WriteTW88Page(PAGE0_GENERAL);
2072   1              r003 = ReadTW88(REG003);
2073   1              WriteTW88Page(page);
2074   1      
2075   1              //mask
2076   1              main_INT_STATUS &= ~r003;
2077   1      
2078   1              //
2079   1              // print INT debug message
2080   1              //
2081   1              if(main_INT_STATUS & 0x07) {
2082   2                      ePrintf("\nInterrupt !!! [%02bx] ", main_INT_STATUS);
2083   2                      tmp = main_INT_STATUS;
2084   2                      for(i=0; i<8; i++) {
2085   3                              if(tmp & 0x80) ePrintf("1"); else ePrintf("0");
2086   3                              tmp <<= 1;
2087   3                      }
2088   2                      //adjust from _ACC
2089   2                      if(main_INT_STATUS != temp_INT_STATUS_ACC) {
2090   3                              temp_INT_STATUS_ACC     &= ~r003;
2091   3                              if(main_INT_STATUS != temp_INT_STATUS_ACC) {
2092   4                                      ePrintf(" [ACC:%02bx]", temp_INT_STATUS_ACC);
2093   4                                      if(temp_INT_STATUS_ACC & 0x01)
2094   4                                              main_INT_STATUS |= 0x01;                                //NOTE
2095   4                              }
2096   3                      }
2097   2                      ePrintf(" [%02bx] ", main_INT_STATUS2);
2098   2                      tmp = main_INT_STATUS2;
2099   2                      for(i=0; i<3; i++) {
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 35  

2100   3                              if(tmp & 0x04) ePrintf("1"); else ePrintf("0");
2101   3                              tmp <<= 1;
2102   3                      }
2103   2                      //adjust from _ACC
2104   2                      if(main_INT_STATUS2 != temp_INT_STATUS2_ACC) {
2105   3                              ePrintf(" [ACC2:%02bx]", temp_INT_STATUS2_ACC);
2106   3                              if((r003 & 0x04) == 0) {
2107   4                                      main_INT_STATUS2 |= (temp_INT_STATUS2_ACC & 0x06);      //NOTE
2108   4                                      ePrintf("->[%02bx]",main_INT_STATUS2);  
2109   4                              }
2110   3                      }
2111   2      
2112   2                      ePrintf(" mask:%bx",r003);
2113   2              }
2114   1              //if( main_INT_STATUS & 0x80 ) ePrintf("\n   - SPI-DMA completion ");
2115   1              //if( main_INT_STATUS & 0x40 ) ePrintf("\n   - V display end ");
2116   1              //if( main_INT_STATUS & 0x20 ) ePrintf("\n   - Measurement Ready ");
2117   1              //if( main_INT_STATUS & 0x08 ) ePrintf("\n   - VSync leading edge ");
2118   1      
2119   1              //if( main_INT_STATUS & 0x04 ) {
2120   1              //      ePrintf("\n   - Sync Changed ");
2121   1              //      if(main_INT_STATUS2 & 0x02) ePrintf(" - HSync changed ");
2122   1              //      if(main_INT_STATUS2 & 0x04) ePrintf(" - VSync changed ");
2123   1              //}
2124   1      
2125   1              if( (main_INT_STATUS & 0x04 ) && (main_INT_STATUS2 & 0x04)) {
2126   2                      ePrintf("\n   - Sync Changed ");
2127   2                      ePrintf(" - VSync changed ");
2128   2              }                       
2129   1      
2130   1              if(main_VH_Loss_Changed) {              //INT_STATUS[1] use accumulated VH_Loss_Changed value.
2131   2                      //Video change happen.
2132   2                      ePrintf("\n   - V/H Loss Changed:%d ", main_VH_Loss_Changed);
2133   2                      if(main_INT_STATUS2 & 0x01)     ePrintf(" - Video Loss ");
2134   2                      else                                            ePrintf(" - Video found ");
2135   2              }
2136   1              if(main_INT_STATUS & 0x01) {
2137   2      #ifdef SUPPORT_8BIT_CHIP_ACCESS
                              ePrintf("\n   - Write register 0x00F ");
              #else           
2140   2                      //Printf("\nR00F[%02bx]",ReadTW88(REG00F));
2141   2      #endif
2142   2                      if(SW_INTR_cmd == SW_INTR_VIDEO_CHANGED)
2143   2                              dPrintf("\n*****SW_INTR_VIDEO_CHANGED");
2144   2      #if defined(SUPPORT_I2CCMD_SLAVE_V1)
                              else {
                                      BYTE cmd;
                                      cmd = ReadTW88(REG00F);
                                      if(cmd & SW_INTR_EXTERN) {
                                              if(cmd & I2CCMD_CHECK) {
                                                      WriteTW88(REG009, 0xA1);
                                                      return; 
                                              }
                                              if(cmd & I2CCMD_EXEC) {
                                                      F_i2ccmd_exec = 1;      //request loop routine
                                                      WriteTW88(REG009, 0xA1);
                                                      return;                                         
                                              }
                                      }       
                              }               
              #endif
2161   2              }
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 36  

2162   1      
2163   1              //----------------------------------------
2164   1              // now, We uses 
2165   1              //      main_INT_STATUS
2166   1              //  main_INT_STATUS2
2167   1              //  main_VH_Loss_Changed
2168   1      }
2169          
2170          //-----------------------------------------------------------------------------
2171          /**
2172          * Interrupt Handler Routine 
2173          *
2174          * use InterruptPollingRoutine first
2175          * @see ext0_int
2176          * @see InterruptPollingRoutine
2177          */
2178          void InterruptHandlerRoutine(void)
2179          {
2180   1              DECLARE_LOCAL_page
2181   1      
2182   1              BYTE ret;
2183   1              BYTE r004;
2184   1              BYTE not_detected;
2185   1      
2186   1              ReadTW88Page(page);
2187   1              if(main_INT_STATUS & 0x01) {
2188   2                      if(SW_INTR_cmd == SW_INTR_VIDEO_CHANGED) {
2189   3                              SW_INTR_cmd = 0;
2190   3      
2191   3                              LedBackLight(OFF);
2192   3                              ScalerSetMuteManual( ON );
2193   3      
2194   3                              //start negotiation right now
2195   3                              TaskNoSignal_setCmd(TASK_CMD_RUN_FORCE);                
2196   3                      }
2197   2                      else {
2198   3                              //assume external MCU requests interrupts.
2199   3                              //read DMA buffer registers that the external MCU write the commmand.
2200   3                              //we need a pre-defined format
2201   3                              //execute
2202   3      
2203   3                      }
2204   2                      //NOTE:TASK_CMD_RUN2 can be replaced on the following condition. LedBackLight(OFF) can make a problem.
2205   2              }
2206   1              //CHECK SYNCH first and then check VDLoss. VDLoss will have a high priority.
2207   1              if( main_INT_STATUS & 0x04 ) {
2208   2                      //check only VSync.     I have too many HSync.
2209   2                      //service SYNC only when we have a video.
2210   2                      if(( (main_INT_STATUS2 & 0x05) == 0x04 ) && (Task_NoSignal_cmd==TASK_CMD_DONE || Task_NoSignal_cmd==TASK
             -_CMD_WAIT_MODE)) {
2211   3                              if(InputMain==INPUT_CVBS || InputMain==INPUT_SVIDEO) {
2212   4                                      dPrintf("\n*****SYNC CHANGED");
2213   4      
2214   4                                      ret=DecoderReadDetectedMode();
2215   4                                      not_detected = ret & 0x08 ? 1 : 0;      //if not_detected is 1, not yet detected(in progress).
2216   4                                      ret &= 0x07;
2217   4                                      dPrintf(" InputSubMode %bd->%bd",InputSubMode,ret);
2218   4                                      if(not_detected || (ret == 7)) {
2219   5                                              dPrintf(" WAIT");
2220   5                                              TaskNoSignal_setCmd(TASK_CMD_WAIT_MODE);
2221   5                                      }
2222   4                                      else if(InputSubMode != ret) {
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 37  

2223   5                                              dPrintf(" NEGO");
2224   5                                              LedBackLight(OFF);
2225   5                                              ScalerSetMuteManual( ON );
2226   5              
2227   5                                              //start negotiation     right now
2228   5                                              TaskNoSignal_setCmd(TASK_CMD_RUN_FORCE);
2229   5                                      }
2230   4                                      else
2231   4                                              dPrintf(" SKIP");
2232   4                              }
2233   3      #ifdef SUPPORT_COMPONENT
2234   3                              else if(InputMain==INPUT_COMP) {
2235   4                                      dPrintf("\n*****SYNC CHANGED");
2236   4              
2237   4                                      ret = VAdcGetInputStatus();     //detected input.
2238   4                                      not_detected = ret & 0x08 ? 0:1;         //if not_detected is 1, not yet detected.
2239   4                                      ret &= 0x07;
2240   4                                      dPrintf(" InputSubMode %bd->%bd",InputSubMode,ret);
2241   4                                      if(not_detected || (ret == 7)) {
2242   5                                              dPrintf(" WAIT");
2243   5                                              TaskNoSignal_setCmd(TASK_CMD_WAIT_MODE);
2244   5                                      }
2245   4                                      else if(InputSubMode != ret) {
2246   5                                              dPrintf(" NEGO");
2247   5                                              LedBackLight(OFF);
2248   5                                              ScalerSetMuteManual( ON );
2249   5              
2250   5                                              //start negotiation right now
2251   5                                              TaskNoSignal_setCmd(TASK_CMD_RUN_FORCE);
2252   5                                      }
2253   4                                      else
2254   4                                              dPrintf(" SKIP");
2255   4                              }
2256   3      #endif
2257   3      #ifdef SUPPORT_PC
2258   3                              else if(InputMain==INPUT_PC) {
2259   4                                      //Need to verify.
2260   4              
2261   4                                      //-------------------------------
2262   4                                      // Video Signal is already changed. I can not use a FreeRun with FOSD message.
2263   4                                      //WaitVBlank(1);
2264   4                                      LedBackLight(OFF);
2265   4                                      ScalerSetMuteManual( ON );
2266   4              
2267   4                                      dPrintf("\n*****SYNC CHANGED");
2268   4                                      dPrintf(" NEGO");
2269   4      
2270   4                                      //start negotiation     right now
2271   4                                      TaskNoSignal_setCmd(TASK_CMD_RUN_FORCE);
2272   4                              }
2273   3      #endif
2274   3                              else {
2275   4                                      //Need to verify.
2276   4      
2277   4                                      //-------------------------------
2278   4                                      // Video Signal is already changed. I can not use a FreeRun with FOSD message.
2279   4                                      //WaitVBlank(1);
2280   4                                      LedBackLight(OFF);
2281   4                                      ScalerSetMuteManual( ON );
2282   4      
2283   4                                      dPrintf("\n*****SYNC CHANGED");
2284   4                                      dPrintf(" NEGO");
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 38  

2285   4      
2286   4                                      //start negotiation     right now
2287   4                                      TaskNoSignal_setCmd(TASK_CMD_RUN_FORCE);
2288   4                              }
2289   3                      }
2290   2              }
2291   1      
2292   1      
2293   1              if(main_VH_Loss_Changed) {              //INT_STATUS[1] use accumulated VH_Loss_Changed value.
2294   2                      //Video change happen.
2295   2                      main_VH_Loss_Changed = 0;
2296   2                      if(InputMain==INPUT_PC) {
2297   3                              ;
2298   3                      }
2299   2                      else {
2300   3                              //------------------------
2301   3                              //read INT_STATUS2 value from HW.
2302   3                              //ReadTW88Page(page);
2303   3                              WriteTW88Page(PAGE0_GENERAL);
2304   3                              r004 = ReadTW88(REG004);
2305   3                              //WriteTW88Page(page);
2306   3                              if(((main_INT_STATUS2 ^ r004) & 0x01) == 0x01) {                                                
2307   4                                      ePrintf("\nWarning SW replace Video Loss");
2308   4                              //      main_INT_STATUS2 ^= 0x01;
2309   4                              }
2310   3                      }
2311   2                      //--OK, what is a current status
2312   2                      if(main_INT_STATUS2 & 0x01) {
2313   3                              //Video Loss Happen
2314   3                              if(SW_Video_Status) {
2315   4                                      dPuts("\nVideo Loss Happen");
2316   4                                      //turn off SYNC                                                 
2317   4                                      SW_Video_Status = 0;
2318   4                                      //dPrintf("\nSW_Video_Status:%bd",SW_Video_Status);
2319   4      
2320   4                                      Interrupt_enableSyncDetect(OFF);
2321   4      #ifdef SUPPORT_COMPONENT
2322   4                                      if(InputMain == INPUT_COMP) {
2323   5                                              //Change to 0 for fast recover.
2324   5                                              VAdcSetFilterBandwidth(0, 0);           
2325   5                                      }
2326   4      #endif
2327   4                                      //free run
2328   4                                      ScalerCheckPanelFreerunValue();                                                                         
2329   4                                      ScalerSetFreerunManual(ON);     // turn on Free Run Manual
2330   4                                      ScalerSetMuteManual( ON );      // turn on Mute Manual
2331   4                              
2332   4                                      //start "No Signal" blinking
2333   4                                      if(MenuGetLevel()==0) {
2334   5                                              FOsdIndexMsgPrint(FOSD_STR2_NOSIGNAL);
2335   5      #ifdef NOSIGNAL_LOGO
2336   5                                              if(getNoSignalLogoStatus() == 0)
2337   5                                                      InitLogo1();                                            
2338   5      #endif
2339   5                                      }
2340   4      
2341   4                                      tic_task = 0;
2342   4                                      TaskNoSignal_setCmd(TASK_CMD_WAIT_VIDEO);       //block the negotiation until you have a Video Signal
2343   4                              }
2344   3                              else {
2345   4                                      //tic_task = 0;
2346   4                                      TaskNoSignal_setCmd(TASK_CMD_WAIT_VIDEO);       //block the negotiation until you have a Video Signal
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 39  

2347   4                              }
2348   3                      }
2349   2                      else {
2350   3                              //Video Found Happen
2351   3                              if(SW_Video_Status==0) {
2352   4                                      dPuts("\nVideo found Happen");
2353   4                                      SW_Video_Status = 1;
2354   4                                      //dPrintf("\nSW_Video_Status:%bd",SW_Video_Status);
2355   4      
2356   4                                      //turn ON SYNC
2357   4                                      //Interrupt_enableSyncDetect(ON);  not yet. turn on it after it decide the video mode.
2358   4                              }                                               
2359   3      
2360   3                              if(Task_NoSignal_cmd==TASK_CMD_DONE) {
2361   4                                      dPrintf("\n********RECHECK");
2362   4                                      tic_task = NOSIGNAL_TIME_INTERVAL;                      //do it right now..     
2363   4                              }
2364   3                              else {
2365   4                                      tic_task=NOSIGNAL_TIME_INTERVAL - 500;          //wait 500ms. 100ms is too short.
2366   4                              }
2367   3                              //start negotiation
2368   3                              TaskNoSignal_setCmd(TASK_CMD_RUN);      
2369   3                      }
2370   2              }
2371   1              WriteTW88Page(page);
2372   1      }
2373          
2374          
2375          
2376          
2377          //=============================================================================
2378          // MAIN LOOP                                                                           
2379          //=============================================================================
2380          //external
2381          //      INT_STATUS
2382          //      EX0
2383          //      P1_3
2384          //extern BYTE   TouchStatus;
2385          //
2386          #define RET_MAIN_LOOP_PSM_BY_REMO       1
2387          #define RET_MAIN_LOOP_PSM_BY_PORT       2
2388          #define RET_MAIN_LOOP_RCDMODE           3
2389          /**
2390           * main_loop
2391           *
2392           * main_loop
2393           * =========
2394           *
2395           * @param void
2396           * @return 
2397           *      0: 
2398           *      1:PowerSaveMode by Remo
2399           *      2:PowerSaveMode by Port
2400           *      3:RCDMode by Port
2401           * @see ext0_int
2402           * @see InterruptPollingRoutine
2403           * @see InterruptHandlerRoutine
2404           * @see I2CCMD_exec_main
2405           * @see Monitor
2406           * @see CheckKeyIn
2407           * @see CheckRemo
2408           * @see GetTouch2
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 40  

2409           * @see ActionTouch
2410           * @see CheckAndClearOSD
2411           * @see NoSignalTask
2412           * @see NoSignalTaskOnWaitMode
2413          */
2414          BYTE main_loop(void)
2415          {
2416   1              BYTE ret;
2417   1      #ifdef SUPPORT_HDMI_SiIRX
                      uint16_t wOldTickCnt = 0;
                      uint16_t wNewTickCnt = 0;
                      uint16_t wTickDiff;
              #endif
2422   1      
2423   1              //---------------------------------------------------------------
2424   1              //                                   Main Loop 
2425   1              //---------------------------------------------------------------
2426   1              while(1) {
2427   2                      //-------------- Check TW8835 Interrupt ------------------------
2428   2                      if(access) {
2429   3      #ifdef MODEL_TW8835_EXTI2C
                                      if(eint10_intr_count) {
                                              Printf("\n$$eint10_intr_count:%bd",eint10_intr_count);
                                              eint10_intr_count = 0;
                                              //execute Pseudo ext0_int
                                              Ext0PseudoISR();
                                      }
              #endif          
2437   3                              if(INT_STATUS || VH_Loss_Changed ) {
2438   4                                      InterruptPollingRoutine();
2439   4                                      InterruptHandlerRoutine();
2440   4                              }
2441   3                      }
2442   2      #ifdef MODEL_TW8836
                              if(INT_STATUS3) {
                                      extern DWORD IntCount;
                                      Printf("\nINT_STATUS3:%bx  count: %ld",INT_STATUS3, IntCount );
                                      INT_STATUS3 = 0;
                              }
              #endif
2449   2      
2450   2                      //-------------- I2CCMD -------------------------------
2451   2      #if defined(SUPPORT_I2CCMD_SLAVE_V1)
                              if(F_i2ccmd_exec) {
                                      F_i2ccmd_exec = 0;
                                      I2CCMD_exec_main();
                              }
              #endif
2457   2      
2458   2                      //-------------- ext_i2c_timer ------------------------
2459   2      #if defined(SUPPORT_I2CCMD_TEST_SLAVE)
                              if(ext_i2c_cmd) {
                                      if(ext_i2c_timer)
                                              continue;
              
                                      //if timeover
                                      WriteTW88(REG009,0);    // ? clear
                                      
                                      ext_i2c_cmd = 0;                //clear
                                      InitISR(0);     
                                      Printf("\next_i2c_timer expire");
                              }
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 41  

              #endif
2472   2      
2473   2                      //-------------- Check Watchdog ------------------------
2474   2      #ifndef MODEL_TW8835_EXTI2C
2475   2      #ifdef DEBUG_WATCHDOG
                              if( F_watch ) {
                                      static DWORD wdt_last=0;
                                      DWORD wdt_diff;
              
                                      F_watch = 0;
              
                                      //RestartWatchdog
                                      RestartWatchdog();
              
                                      wdt_diff = SystemClock - wdt_last;
                                      wdt_last = SystemClock;
                                      ePrintf("\nWatchdog Interrupt !!! %02bx  %ld.%ldsec", SFR_WDCON, SystemClock/100, SystemClock%100);
                                      ePrintf(" diff:%ld.%02ldsec",wdt_diff/100, wdt_diff%100);
              
                                      RestartWatchdog();
                              }
              #elif defined(SUPPORT_WATCHDOG)
                              //RestartWatchdog
                              RestartWatchdog();
              #endif
2496   2      #endif          
2497   2              
2498   2                      //-------------- Check Serial Port ---------------------
2499   2                      Monitor();                              // for new monitor functions
2500   2      #ifdef SUPPORT_UART1
                              Monitor1();                             // for UART1
              #endif
2503   2      
2504   2      
2505   2                      //-------------- SW I2C SLAVE ---------------------
2506   2      #ifdef SW_I2C_SLAVE
                              if(dbg_sw_i2c_sda_count && sw_i2c_index==0 /*(E2IE & 0x40)==0*/) {
                                      BYTE i;
                                      //only print out when you have a READ command.
                                      //the previous WRITE command also print out when you have a READ command.
                                      //or
                                      //print out when sw_i2c_index has a value 0.
                                      Printf("\nSW_I2C_SLAVE %bd",dbg_sw_i2c_sda_count);
                                      for(i=0; i < dbg_sw_i2c_sda_count; i++) {
                                              if(dbg_sw_i2c_index[i]) {
                                                      Printf("\n%bd::index:%bx devid:%02bx",
                                                              i,dbg_sw_i2c_index[i],dbg_sw_i2c_devid[i] );
                      
                                                      if(dbg_sw_i2c_devid[i] & 0x01) {
                                                              //read 
                                                              Printf(" ACK:%02bx",dbg_sw_i2c_data[i]);
                                                      }
                                                      else {
                                                              //write
                                                              Printf(" regidx:%02bx",dbg_sw_i2c_regidx[i]);
                                                              Printf(" data:%02bx",dbg_sw_i2c_data[i]);
                                                      }       
                                              }
                                      }
                                      dbg_sw_i2c_sda_count=0;
                              }
              #endif
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 42  

2533   2      
2534   2                      //-------------- block access routines -----------------
2535   2                      if ( access == 0 ) continue;            
2536   2                      /* NOTE: If you donot have an access, You can not pass */
2537   2      
2538   2                      //-------------- Check Keypad input --------------------
2539   2                      CheckKeyIn();
2540   2      
2541   2                      //-------------- Check Remote Controller ---------------
2542   2                      ret = CheckRemo();
2543   2                      if(ret == REQUEST_POWER_OFF && SysNoInitMode==SYS_MODE_NORMAL) {
2544   3                              ePrintf("\n===POWER SAVE===by Remo");
2545   3                              ret = 1;
2546   3                              break;
2547   3                      }
2548   2      
2549   2                      //-------------- Check special port ---------------
2550   2      #ifdef SUPPORT_RCD
                              if(IsBackDrivePortOn() && SysNoInitMode==SYS_MODE_NORMAL) {
                                      ePrintf("\n===RCDMode requested");
                                      ret = 3;
                                      break;
                              }                       
              #endif          
2557   2                      if(PORT_POWER_SAVE==1 && SysNoInitMode==SYS_MODE_NORMAL) {
2558   3                              ePrintf("\n===POWER SAVE===by PORT_POWER_SAVE");
2559   3                              ret = 2;
2560   3                              break;
2561   3                      }
2562   2      #if defined(MODEL_TW8835_SLAVE)
              #if defined(SUPPORT_EXTMCU_ISP) && defined(USE_EXTMCU_ISP_GPIO)
                              if(PORT_EXTMCU_ISP==0 && SysNoInitMode==SYS_MODE_NORMAL)
                                      StopCPU();
              #endif
              #endif
2568   2      
2569   2                      //-------------- Check Touch ---------------
2570   2      #ifdef SUPPORT_TOUCH
2571   2      #ifdef MODEL_TW8835_EXTI2C
                              if(timer1_intr_count)
                                      TscPseudoISR();
              #endif
2575   2                      if ( TraceAuto ) TraceTouch();
2576   2                      ret = GetTouch2();
2577   2                      if(ret) {
2578   3      #ifdef DEBUG_TOUCH_SW
                                      dPrintf("==>Tsc Action");
              #endif
2581   3                              ActionTouch();          
2582   3                      }
2583   2      #endif
2584   2                              
2585   2                      //-------------- Check OSD timer -----------------------
2586   2                      CheckAndClearOSD();
2587   2      
2588   2                      //============== HDMI Section ==========================
2589   2      #ifdef SUPPORT_HDMI_SiIRX
                      //if ( (!DEBUG_PAUSE_FIRMWARE) && (!GPIO_GetComMode())  )
                      {
                          if (TIMER_Expired(TIMER__POLLING)) {
                              TIMER_Set(TIMER__POLLING, 20);       //poll every 20ms     
                              //+PollPortSwitch();  
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 43  

                              PollInterrupt();
                          }
                                      //+CEC_Event_Handler();
                                      HdmiTask();
              
                                      wNewTickCnt = TIMER_GetTickCounter();
                                      if ( wNewTickCnt > wOldTickCnt ){
                                              wTickDiff = wNewTickCnt - wOldTickCnt;
                                      }
                                      else { /* counter wrapping */
                                              wTickDiff = ( 0xFFFF - wOldTickCnt ) + wNewTickCnt;
                                      }
                                      wTickDiff >>= 1; /* scaling ticks to ms */
                                      if ( wTickDiff > 36 ){
                                              wOldTickCnt = wNewTickCnt;
                                              HdmiProcIfTo( wTickDiff );
                                      }
                      }
                      DEBUG_POLL();
              #endif
2615   2      
2616   2                      //============== Task Section ==========================
2617   2      
2618   2                      if(Task_Grid_on)
2619   2                              MovingGridTask();
2620   2                      //--------------
2621   2                      
2622   2                      NoSignalTask();
2623   2                      NoSignalTaskOnWaitMode(); //Check each input status when WAIT_MODE
2624   2              } //..while(1)
2625   1      
2626   1              return ret;
2627   1      }
2628          
2629          
2630          //=============================================================================
2631          // MAIN
2632          //=============================================================================
2633          #define PSM_REQ_FROM_NORMAL             1
2634          #define PSM_REQ_FROM_RCDMODE    2
2635          /**
2636           * main
2637           *
2638           * main
2639           * ====
2640           *
2641           *      InitCPU
2642           *      InitCore
2643           *      InitSystem
2644           *      while(1)
2645           *              main_loop
2646           *
2647           * @param void
2648           * @return NONE
2649           * @see InitCPU
2650           * @see InitCore
2651           * @see InitSystem
2652           * @see main_loop
2653          */
2654          void main(void)
2655          {
2656   1              BYTE request_power_save_mode;
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 44  

2657   1              BYTE ret;
2658   1      #ifdef SUPPORT_RCD
                      DWORD BootTime;
              #endif
2661   1      
2662   1              InitVariables();
2663   1              InitCPU();
2664   1      #if defined(MODEL_TW8835_EXTI2C)
                      InitHostCore(1);
              #else
2667   1              InitCore(1);
2668   1      #endif
2669   1      
2670   1              //-------------------------------------
2671   1              // PRINT MODEL VERSION
2672   1      #ifdef MODEL_TW8835_EXTI2C
                      PrintModelVersionInfo(0);
              #else
2675   1              PrintModelVersionInfo();
2676   1      #endif
2677   1      
2678   1              if(access==0) {
2679   2                      Puts("\n***SKIP_MODE_ON***");
2680   2                      DebugLevel=3;
2681   2                      //skip...do nothing
2682   2                      Puts("\nneed **init core***ee find***init***");
2683   2              }
2684   1      
2685   1              SetMonAddress(TW88I2CAddress);
2686   1              Prompt(); //first prompt
2687   1      
2688   1      #ifdef MODEL_TW8836RTL
                      //-------------------------------------
                      // RTL Verification
                      //-------------------------------------
                      ret=main_loop();
                      //you can not be here...
              #endif
2695   1      
2696   1              //==================================================
2697   1              // Init System
2698   1              //==================================================
2699   1      #if defined(MODEL_TW8835_EXTI2C)
                      InitHostSystem(1);
              
                      //Check Slave
                      WriteTW88Page(0);
                      if((ReadTW88(REG000) & 0xFC) == 0x74)
                              Printf("\nOK Slave is a TW8835");
                      else {
                              Printf("\nSlave fail..Please reboot Slave & Master");
                              return;
                      }
                      //init slave core
                      InitCore(1);
                      //-------------------------------------
                      // PRINT Slave VERSION
                      //-------------------------------------
                      PrintModelVersionInfo(1);
              
                      SetMonAddress(TW88I2CAddress);
                      Prompt(); //2nd prompt
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 45  

              #endif //..MODEL_TW8835_EXTI2C
2720   1      
2721   1              //-------------------
2722   1              // InitSystem
2723   1              //-------------------
2724   1      #ifdef CHIP_MANUAL_TEST
                      InitSystemForChipTest(1);
                      Chip_Manual_Test();
              #else
2728   1      #ifdef SUPPORT_RCD
                      if((PORT_BACKDRIVE_MODE==0) && (SysNoInitMode == SYS_MODE_NORMAL)) { //see IsBackDrivePortOn()
                              InputMain = 0;  //dummy
                              InitRCDMode(1);
                      }
                      else 
              #endif
2735   1              InitSystem(1);
2736   1      #endif
2737   1      
2738   1              PrintSystemClockMsg("start loop");
2739   1              //dump clock
2740   1              DumpClock(0);
2741   1      #ifdef MODEL_TW8835_EXTI2C
                      Prompt(); //third prompt
              #else
2744   1              Prompt(); //second prompt
2745   1      #endif
2746   1      
2747   1      
2748   1      #if 0
              //Printf("\nline:%d",__LINE__);
                      WriteHostPage(0);
                      Printf("\nHOST SSPLL:%bx:%bx:%bx", ReadHost(REG0F8), ReadHost(REG0F9), ReadHost(REG0FA));
                      WriteHostPage(2);
                      Printf("\nHOST 20D:%bx", ReadHost(REG20D));
                      WriteHostPage(PAGE4_CLOCK);
                      Printf("\nHOST 4E0:%bx 4E1:%bx", ReadHost(REG4E0), ReadHost(REG4E1));
              
                      WriteHost(REG4E1, 0x02);
              Printf("\nline:%d",__LINE__);
                      WriteHost(REG4E0, 0x01);
              Printf("\nline:%d",__LINE__);
              //??    WriteHost(REG4E1, 0x22);
                      WriteHostPage(0);
              Printf("\nline:%d",__LINE__);
              #endif
2765   1      
2766   1              WriteTW88Page(PAGE0_GENERAL);
2767   1      
2768   1      #if 1
2769   1              WriteTW88(REG084, 0x0C);
2770   1              WriteTW88(REG08C, 0x0C);
2771   1              WriteTW88(REG0E3, 0x1C);
2772   1              WriteTW88(REG0E0, 0x61);
2773   1              WriteTW88(REG0E8, 0x61);
2774   1              WriteTW88(REG0EB, 0x29);
2775   1      
2776   1      #endif
2777   1      
2778   1      
2779   1              request_power_save_mode = 0;
2780   1              while(1) 
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 46  

2781   1              {
2782   2                      //----------------------
2783   2                      //check power save first
2784   2                      //----------------------
2785   2                      if((SysNoInitMode == SYS_MODE_NORMAL) && (request_power_save_mode)) {
2786   3                              //move to PowerSaveMode
2787   3                              SystemPowerSave();      
2788   3                              WaitPowerOn();          //wait PowerOn keypad, PowerOn Remo. not Touch
2789   3                              SystemPowerResume();
2790   3      
2791   3      #ifdef SUPPORT_RCD
                                      if(request_power_save_mode == PSM_REQ_FROM_NORMAL) {
                                              if(IsBackDrivePortOn()) 
                                                      //Normal->RCDMode
                                                      InitRCDMode(0);
                                              else {
                                                      //Normal->Normal
                                                      //InitSystem(0);                
                                              }
                                      }
                                      else if(request_power_save_mode == PSM_REQ_FROM_RCDMODE) {
                                              if(IsBackDrivePortOn()==0) {
                                                      //RCDMode->Normal
                                                      //turn off a parkgrid task first
                                                      TaskSetGrid(OFF);
                                                      SpiOsdWinHWEnable(0,OFF);
                                                      SpiOsdWinHWEnable(1,OFF);
                                                      SpiOsdEnable(OFF);
                                                      InitSystem(0);  //InitSystem with skip ...
                                              }
                                              //else
                                              //      RCDMode->RCDMode
                                      }
              #endif
2815   3                              request_power_save_mode=0;
2816   3                      }
2817   2      #ifdef SUPPORT_RCD
                              //----------------------
                              //check RCD mode
                              else if((SysNoInitMode == SYS_MODE_NORMAL) && IsBackDrivePortOn()) {
                                      //==================================================
                                      // RCDMODE LOOP
                                      //==================================================
                                      ret=RCDMode_loop();
                                      ePrintf("\nRCDMode_loop() ret %bd",ret);
                                      if(ret==RET_RCDMODE_PSM)
                                              //move to PSMode
                                              request_power_save_mode=PSM_REQ_FROM_RCDMODE;   //from RCDMODE  
                                      else if(ret==RET_RCDMODE_OFF) {
                                              BootTime = SystemClock;
                                              //move to Normal Mode
                                              //turn off a parkgrid task first
                                              TaskSetGrid(OFF);
                                              SpiOsdWinHWEnable(0,OFF);
                                              SpiOsdWinHWEnable(1,OFF);
                                              SpiOsdEnable(OFF);
                                              InitSystem(0);          //InitSystem with skip ...
              
                                              BootTime = SystemClock - BootTime;
                                              ePrintf("\nBootTime(RCD2Normal):%ld.%ldsec", BootTime/100, BootTime%100 );
                                      }
                              }
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 47  

              #endif
2844   2                      //----------------------
2845   2                      //normal or NoInit mode
2846   2                      else {
2847   3                              //==================================================
2848   3                              // MAIN LOOP
2849   3                              //==================================================
2850   3                              ret=main_loop();                
2851   3                              //exit when power save. or RCDMode. 
2852   3                              //FYI:SkipMode can not exit the main_loop.
2853   3                              ePrintf("\nmain_loop() ret %bd",ret);
2854   3      
2855   3      #ifdef SUPPORT_RCD
                                      if(ret==RET_MAIN_LOOP_RCDMODE) {        
                                              BootTime = SystemClock;
                                              FOsdOnOff(OFF, 0);      ////with vdelay 1               
              
                                              //move to RCDMode
                                              InitRCDMode(0);
              
                                              BootTime = SystemClock - BootTime;
                                              ePrintf("\nBootTime(Normal2RCD):%ld.%ldsec", BootTime/100, BootTime%100 );
                                      }
                                      else
              #endif                   
2868   3                              if(ret==RET_MAIN_LOOP_PSM_BY_REMO || ret==RET_MAIN_LOOP_PSM_BY_PORT)
2869   3                                      //move to PowerSave Mode
2870   3                                      request_power_save_mode=PSM_REQ_FROM_NORMAL;
2871   3                              //else 
2872   3                              //      DO NOTHING
2873   3                      }
2874   2              }       
2875   1              //you can not be here...
2876   1      }
2877          //==============MAIN.C=======END
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 48  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00D2 (BEGIN)
0000         L?0211:
0000 F0                MOVX    @DPTR,A
0001         L?0212:
0001 E500        E     MOV     A,regTW88+01H
0003 2404              ADD     A,#04H
0005         L?0213:
0005 F582              MOV     DPL,A
0007 E4                CLR     A
0008 3500        E     ADDC    A,regTW88
000A F583              MOV     DPH,A
000C 22                RET     
000D         L?0214:
000D 74FF              MOV     A,#0FFH
000F         L?0215:
000F F0                MOVX    @DPTR,A
0010         L?0216:
0010 850082      E     MOV     DPL,regTW88+01H
0013 850083      E     MOV     DPH,regTW88
0016 A3                INC     DPTR
0017 A3                INC     DPTR
0018 22                RET     
0019         L?0217:
0019 FF                MOV     R7,A
001A         L?0218:
001A E500        E     MOV     A,regTW88+01H
001C 2406              ADD     A,#06H
001E         L?0219:
001E F582              MOV     DPL,A
0020 E500        E     MOV     A,regTW88
0022 3401              ADDC    A,#01H
0024 F583              MOV     DPH,A
0026 22                RET     
0027         L?0220:
0027         L?0221:
0027 E500        E     MOV     A,regTW88+01H
0029 24E1              ADD     A,#0E1H
002B F582              MOV     DPL,A
002D E500        E     MOV     A,regTW88
002F 3404              ADDC    A,#04H
0031 F583              MOV     DPH,A
0033 22                RET     
0034         L?0224:
0034         L?0225:
0034 900000      R     MOV     DPTR,#CheckAndSetInput
0037 74FF              MOV     A,#0FFH
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B 22                RET     
003C         L?0226:
003C 900000      R     MOV     DPTR,#ret
003F         L?0227:
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 900000      E     MOV     DPTR,#InputSubMode
0044 E0                MOVX    A,@DPTR
0045 6F                XRL     A,R7
0046 22                RET     
0047         L?0229:
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 49  

0047 7BFF              MOV     R3,#0FFH
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
004D F0                MOVX    @DPTR,A
004E 22                RET     
004F         L?0230:
004F 900000      R     MOV     DPTR,#tmp
0052 E0                MOVX    A,@DPTR
0053 25E0              ADD     A,ACC
0055 F0                MOVX    @DPTR,A
0056 900000      R     MOV     DPTR,#i
0059 E0                MOVX    A,@DPTR
005A 04                INC     A
005B F0                MOVX    @DPTR,A
005C E0                MOVX    A,@DPTR
005D C3                CLR     C
005E 22                RET     
005F         L?0235:
005F E0                MOVX    A,@DPTR
0060 900000      R     MOV     DPTR,#tmp
0063 F0                MOVX    @DPTR,A
0064 E4                CLR     A
0065 900000      R     MOV     DPTR,#i
0068 F0                MOVX    @DPTR,A
0069 22                RET     
             ; FUNCTION Com00D2 (END)

             ; FUNCTION _TaskNoSignal_setCmd (BEGIN)
                                           ; SOURCE LINE # 161
;---- Variable 'cmd' assigned to Register 'R6' ----
0000 AE07              MOV     R6,AR7
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
0002 EE                MOV     A,R6
0003 B4010D            CJNE    A,#01H,?C0001
0006 120000      E     LCALL   MenuGetLevel
0009 EF                MOV     A,R7
000A 6007              JZ      ?C0001
                                           ; SOURCE LINE # 164
000C E4                CLR     A
000D 900000      R     MOV     DPTR,#Task_NoSignal_cmd
0010 F0                MOVX    @DPTR,A
0011 8005              SJMP    ?C0002
0013         ?C0001:
                                           ; SOURCE LINE # 166
0013 900000      R     MOV     DPTR,#Task_NoSignal_cmd
0016 EE                MOV     A,R6
0017 F0                MOVX    @DPTR,A
0018         ?C0002:
                                           ; SOURCE LINE # 168
0018 EE                MOV     A,R6
0019 B40406            CJNE    A,#04H,?C0003
                                           ; SOURCE LINE # 169
001C 750003      E     MOV     tic_task,#03H
001F 7500E8      E     MOV     tic_task+01H,#0E8H
0022         ?C0003:
                                           ; SOURCE LINE # 171
0022 E4                CLR     A
0023 900000      R     MOV     DPTR,#Task_NoSignal_count
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
0027 22                RET     
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 50  

             ; FUNCTION _TaskNoSignal_setCmd (END)

             ; FUNCTION TaskNoSignal_getCmd (BEGIN)
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
0000 900000      R     MOV     DPTR,#Task_NoSignal_cmd
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 182
0005         ?C0005:
0005 22                RET     
             ; FUNCTION TaskNoSignal_getCmd (END)

             ; FUNCTION _TaskSetGrid (BEGIN)
                                           ; SOURCE LINE # 197
;---- Variable 'onoff' assigned to Register 'R7' ----
0000 900000      R     MOV     DPTR,#Task_Grid_on
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 22                RET     
             ; FUNCTION _TaskSetGrid (END)

             ; FUNCTION TaskGetGrid (BEGIN)
                                           ; SOURCE LINE # 204
0000 900000      R     MOV     DPTR,#Task_Grid_on
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005         ?C0007:
0005 22                RET     
             ; FUNCTION TaskGetGrid (END)

             ; FUNCTION _TaskSetGridCmd (BEGIN)
                                           ; SOURCE LINE # 211
;---- Variable 'cmd' assigned to Register 'R7' ----
0000 900000      R     MOV     DPTR,#Task_Grid_cmd
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 22                RET     
             ; FUNCTION _TaskSetGridCmd (END)

             ; FUNCTION TaskGetGridCmd (BEGIN)
                                           ; SOURCE LINE # 218
0000 900000      R     MOV     DPTR,#Task_Grid_cmd
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005         ?C0009:
0005 22                RET     
             ; FUNCTION TaskGetGridCmd (END)

             ; FUNCTION CheckAndSetUnknown (BEGIN)
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
0000 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 240
0002         ?C0010:
0002 22                RET     
             ; FUNCTION CheckAndSetUnknown (END)

             ; FUNCTION LinkCheckAndSetInput (BEGIN)
                                           ; SOURCE LINE # 254
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 51  

                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
0000 900000      E     MOV     DPTR,#InputMain
0003 E0                MOVX    A,@DPTR
0004 14                DEC     A
0005 600E              JZ      ?C0013
0007 14                DEC     A
0008 6017              JZ      ?C0014
000A 14                DEC     A
000B 6020              JZ      ?C0015
000D 24FC              ADD     A,#0FCH
000F 6028              JZ      ?C0016
0011 2407              ADD     A,#07H
0013 7030              JNZ     ?C0017
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 259
0015         ?C0013:
                                           ; SOURCE LINE # 260
0015 120000      R     LCALL   L?0224
0018 7400        E     MOV     A,#HIGH CheckAndSetDecoderScaler
001A F0                MOVX    @DPTR,A
001B A3                INC     DPTR
001C 7400        E     MOV     A,#LOW CheckAndSetDecoderScaler
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 261
001F 802E              SJMP    ?C0011
                                           ; SOURCE LINE # 264
0021         ?C0014:
                                           ; SOURCE LINE # 265
0021 120000      R     LCALL   L?0224
0024 7400        E     MOV     A,#HIGH CheckAndSetComponent
0026 F0                MOVX    @DPTR,A
0027 A3                INC     DPTR
0028 7400        E     MOV     A,#LOW CheckAndSetComponent
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
002B 8022              SJMP    ?C0011
                                           ; SOURCE LINE # 269
002D         ?C0015:
                                           ; SOURCE LINE # 270
002D 120000      R     LCALL   L?0225
0030 7400        E     MOV     A,#HIGH CheckAndSetPC
0032 F0                MOVX    @DPTR,A
0033 A3                INC     DPTR
0034 7400        E     MOV     A,#LOW CheckAndSetPC
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 271
0037 8016              SJMP    ?C0011
                                           ; SOURCE LINE # 285
0039         ?C0016:
                                           ; SOURCE LINE # 286
0039 120000      R     LCALL   L?0225
003C 7400        E     MOV     A,#HIGH CheckAndSetBT656
003E F0                MOVX    @DPTR,A
003F A3                INC     DPTR
0040 7400        E     MOV     A,#LOW CheckAndSetBT656
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
0043 800A              SJMP    ?C0011
                                           ; SOURCE LINE # 289
0045         ?C0017:
                                           ; SOURCE LINE # 290
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 52  

0045 120000      R     LCALL   L?0225
0048 7400        R     MOV     A,#HIGH CheckAndSetUnknown
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C 7400        R     MOV     A,#LOW CheckAndSetUnknown
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 292
004F         ?C0011:
                                           ; SOURCE LINE # 293
004F E4                CLR     A
0050 900000      R     MOV     DPTR,#SW_Video_Status
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
0054 FD                MOV     R5,A
0055 FF                MOV     R7,A
0056 120000      E     LCALL   _FOsdWinEnable
                                           ; SOURCE LINE # 295
0059 E4                CLR     A
005A FF                MOV     R7,A
005B 020000      R     LJMP    _TaskNoSignal_setCmd
             ; FUNCTION LinkCheckAndSetInput (END)

             ; FUNCTION UpdateOsdTimerClock (BEGIN)
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 325
0000 120000      E     LCALL   OsdGetTime
0003 7E00              MOV     R6,#00H
0005 7C00              MOV     R4,#00H
0007 7D64              MOV     R5,#064H
0009 120000      E     LCALL   ?C?LIMUL
000C 8F00        E     MOV     OsdTimerClock+03H,R7
000E 8E00        E     MOV     OsdTimerClock+02H,R6
0010 8D00        E     MOV     OsdTimerClock+01H,R5
0012 8C00        E     MOV     OsdTimerClock,R4
                                           ; SOURCE LINE # 330
0014 E4                CLR     A
0015 FD                MOV     R5,A
0016 7F01              MOV     R7,#01H
0018 120000      E     LCALL   _FOsdOnOff
                                           ; SOURCE LINE # 333
001B 900000      R     MOV     DPTR,#Task_NoSignal_cmd
001E E0                MOVX    A,@DPTR
001F 6009              JZ      ?C0021
                                           ; SOURCE LINE # 334
0021 120000      E     LCALL   getNoSignalLogoStatus
0024 EF                MOV     A,R7
0025 7003              JNZ     ?C0021
                                           ; SOURCE LINE # 335
0027 120000      E     LCALL   InitLogo1
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 339
002A         ?C0021:
002A 22                RET     
             ; FUNCTION UpdateOsdTimerClock (END)

             ; FUNCTION CheckAndClearOSD (BEGIN)
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 349
0000 120000      E     LCALL   OsdGetTime
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 53  

0003 EF                MOV     A,R7
0004 6037              JZ      ?C0023
0006         ?C0022:
                                           ; SOURCE LINE # 352
0006 E4                CLR     A
0007 FF                MOV     R7,A
0008 FE                MOV     R6,A
0009 FD                MOV     R5,A
000A FC                MOV     R4,A
000B AB00        E     MOV     R3,OsdTimerClock+03H
000D AA00        E     MOV     R2,OsdTimerClock+02H
000F A900        E     MOV     R1,OsdTimerClock+01H
0011 A800        E     MOV     R0,OsdTimerClock
0013 C3                CLR     C
0014 120000      E     LCALL   ?C?ULCMP
0017 7024              JNZ     ?C0023
                                           ; SOURCE LINE # 355
0019 120000      E     LCALL   MenuGetLevel
001C EF                MOV     A,R7
001D 6003              JZ      ?C0025
                                           ; SOURCE LINE # 356
001F 120000      E     LCALL   MenuEnd
0022         ?C0025:
                                           ; SOURCE LINE # 359
0022 E4                CLR     A
0023 FD                MOV     R5,A
0024 FF                MOV     R7,A
0025 120000      E     LCALL   _FOsdOnOff
0028 EF                MOV     A,R7
0029 6009              JZ      ?C0026
                                           ; SOURCE LINE # 360
002B 7BFF              MOV     R3,#0FFH
002D 7A00        R     MOV     R2,#HIGH ?SC_0
002F 7900        R     MOV     R1,#LOW ?SC_0
0031 120000      E     LCALL   _dPuts
0034         ?C0026:
                                           ; SOURCE LINE # 362
0034 120000      E     LCALL   getNoSignalLogoStatus
0037 EF                MOV     A,R7
0038 6003              JZ      ?C0023
                                           ; SOURCE LINE # 363
003A 120000      E     LCALL   RemoveLogo
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
003D         ?C0023:
003D 22                RET     
             ; FUNCTION CheckAndClearOSD (END)

             ; FUNCTION SystemPowerSave (BEGIN)
                                           ; SOURCE LINE # 724
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 728
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_31
0004 7900        R     MOV     R1,#LOW ?SC_31
0006 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 729
0009 7F0A              MOV     R7,#0AH
000B 7E00              MOV     R6,#00H
000D 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 733
0010 E500        E     MOV     A,regTW88+01H
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 54  

0012 248C              ADD     A,#08CH
0014 120000      R     LCALL   L?0213
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 735
0019 FF                MOV     R7,A
001A 120000      E     LCALL   _FP_BiasOnOff
                                           ; SOURCE LINE # 738
001D 120000      R     LCALL   L?0216
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 900000      R     MOV     DPTR,#Buf_r003
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 739
0026 E4                CLR     A
0027 FF                MOV     R7,A
0028 120000      R     LCALL   _Interrupt_enableVideoDetect
                                           ; SOURCE LINE # 742
002B E500        E     MOV     A,regTW88+01H
002D 2408              ADD     A,#08H
002F 120000      R     LCALL   L?0213
0032 E0                MOVX    A,@DPTR
0033 4430              ORL     A,#030H
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 744
0036 E4                CLR     A
0037 FF                MOV     R7,A
0038 120000      E     LCALL   _FP_PWC_OnOff
                                           ; SOURCE LINE # 748
003B 120000      R     LCALL   L?0220
003E E0                MOVX    A,@DPTR
003F 900000      R     MOV     DPTR,#Buf_4E1
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 749
0043 120000      R     LCALL   L?0220
0046 E4                CLR     A
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 753
0048 E500        E     MOV     A,regTW88+01H
004A 24E0              ADD     A,#0E0H
004C 120000      R     LCALL   L?0213
004F 74F2              MOV     A,#0F2H
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 755
0052 E500        E     MOV     A,regTW88+01H
0054 24E8              ADD     A,#0E8H
0056 120000      R     LCALL   L?0213
0059 74FE              MOV     A,#0FEH
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 757
005C C2AB              CLR     SFR_ET1
                                           ; SOURCE LINE # 759
005E E500        E     MOV     A,regTW88+01H
0060 24B0              ADD     A,#0B0H
0062 120000      R     LCALL   L?0213
0065 E0                MOVX    A,@DPTR
0066 900000      R     MOV     DPTR,#Buf_0B0
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 760
006A 4480              ORL     A,#080H
006C FF                MOV     R7,A
006D E500        E     MOV     A,regTW88+01H
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 55  

006F 24B0              ADD     A,#0B0H
0071 120000      R     LCALL   L?0213
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 763
0076 120000      R     LCALL   L?0218
0079 E0                MOVX    A,@DPTR
007A 900000      R     MOV     DPTR,#Buf_106
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 764
007E 440F              ORL     A,#0FH
0080 120000      R     LCALL   L?0217
0083 EF                MOV     A,R7
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 765
0085 E500        E     MOV     A,regTW88+01H
0087 24E6              ADD     A,#0E6H
0089 120000      R     LCALL   L?0219
008C E0                MOVX    A,@DPTR
008D 900000      R     MOV     DPTR,#Buf_1E6
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 766
0091 E500        E     MOV     A,regTW88+01H
0093 24E6              ADD     A,#0E6H
0095 120000      R     LCALL   L?0219
0098 E4                CLR     A
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 769
009A E500        E     MOV     A,regTW88+01H
009C 24CB              ADD     A,#0CBH
009E 120000      R     LCALL   L?0219
00A1 E0                MOVX    A,@DPTR
00A2 900000      R     MOV     DPTR,#Buf_1CB
00A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 770
00A6 541F              ANL     A,#01FH
00A8 FF                MOV     R7,A
00A9 E500        E     MOV     A,regTW88+01H
00AB 24CB              ADD     A,#0CBH
00AD 120000      R     LCALL   L?0219
00B0 EF                MOV     A,R7
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 771
00B2 E500        E     MOV     A,regTW88+01H
00B4 24E1              ADD     A,#0E1H
00B6 120000      R     LCALL   L?0219
00B9 E0                MOVX    A,@DPTR
00BA 900000      R     MOV     DPTR,#Buf_1E1
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 772
00BE 4420              ORL     A,#020H
00C0 FF                MOV     R7,A
00C1 E500        E     MOV     A,regTW88+01H
00C3 24E1              ADD     A,#0E1H
00C5 120000      R     LCALL   L?0219
00C8 EF                MOV     A,R7
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 775
00CA E4                CLR     A
00CB FF                MOV     R7,A
00CC 120000      E     LCALL   _SSPLL_PowerUp
                                           ; SOURCE LINE # 779
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 56  

00CF 120000      R     LCALL   L?0221
00D2 7410              MOV     A,#010H
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 783
00D5 E500        E     MOV     A,regTW88+01H
00D7 24D4              ADD     A,#0D4H
00D9 120000      R     LCALL   L?0213
00DC E0                MOVX    A,@DPTR
00DD 4480              ORL     A,#080H
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 784
00E0 C2A7              CLR     P2_7
00E2         ?C0028:
                                           ; SOURCE LINE # 786
00E2 2095FD            JB      P1_5,?C0028
00E5         ?C0029:
                                           ; SOURCE LINE # 789
;---- Variable 'i' assigned to Register 'R7' ----
00E5 E4                CLR     A
00E6 FF                MOV     R7,A
00E7         ?C0030:
00E7 0F                INC     R7
00E8 EF                MOV     A,R7
00E9 B464FB            CJNE    A,#064H,?C0030
                                           ; SOURCE LINE # 794
00EC         ?C0033:
00EC 22                RET     
             ; FUNCTION SystemPowerSave (END)

             ; FUNCTION SystemPowerResume (BEGIN)
                                           ; SOURCE LINE # 814
                                           ; SOURCE LINE # 815
                                           ; SOURCE LINE # 818
0000 C2AF              CLR     SFR_EA
                                           ; SOURCE LINE # 822
0002 D2A7              SETB    P2_7
                                           ; SOURCE LINE # 823
0004 E500        E     MOV     A,regTW88+01H
0006 24D4              ADD     A,#0D4H
0008 120000      R     LCALL   L?0213
000B E0                MOVX    A,@DPTR
000C 547F              ANL     A,#07FH
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 826
;---- Variable 'i' assigned to Register 'R7' ----
000F E4                CLR     A
0010 FF                MOV     R7,A
0011         ?C0034:
0011 0F                INC     R7
0012 EF                MOV     A,R7
0013 B464FB            CJNE    A,#064H,?C0034
0016         ?C0035:
                                           ; SOURCE LINE # 830
0016 120000      R     LCALL   L?0221
0019 E4                CLR     A
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 833
001B 7F01              MOV     R7,#01H
001D 120000      E     LCALL   _SSPLL_PowerUp
                                           ; SOURCE LINE # 839
0020 1F                DEC     R7
0021         ?C0037:
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 57  

0021 0F                INC     R7
0022 EF                MOV     A,R7
0023 B4C8FB            CJNE    A,#0C8H,?C0037
0026         ?C0038:
                                           ; SOURCE LINE # 840
0026 E4                CLR     A
0027 FF                MOV     R7,A
0028         ?C0040:
0028 0F                INC     R7
0029 EF                MOV     A,R7
002A B4C8FB            CJNE    A,#0C8H,?C0040
002D         ?C0041:
                                           ; SOURCE LINE # 844
002D 900000      R     MOV     DPTR,#Buf_1E1
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 E500        E     MOV     A,regTW88+01H
0034 24E1              ADD     A,#0E1H
0036 120000      R     LCALL   L?0219
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 845
003B 900000      R     MOV     DPTR,#Buf_1CB
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 E500        E     MOV     A,regTW88+01H
0042 24CB              ADD     A,#0CBH
0044 120000      R     LCALL   L?0219
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 848
0049 900000      R     MOV     DPTR,#Buf_106
004C E0                MOVX    A,@DPTR
004D 120000      R     LCALL   L?0217
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 849
0052 900000      R     MOV     DPTR,#Buf_1E6
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 E500        E     MOV     A,regTW88+01H
0059 24E6              ADD     A,#0E6H
005B 120000      R     LCALL   L?0219
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 852
0060 900000      R     MOV     DPTR,#Buf_0B0
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 E500        E     MOV     A,regTW88+01H
0067 24B0              ADD     A,#0B0H
0069 120000      R     LCALL   L?0213
006C EF                MOV     A,R7
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 856
006E 900000      R     MOV     DPTR,#Buf_4E1
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 120000      R     LCALL   L?0221
0076 EF                MOV     A,R7
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 860
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 58  

0078 E500        E     MOV     A,regTW88+01H
007A 248C              ADD     A,#08CH
007C 120000      R     LCALL   L?0213
007F 740C              MOV     A,#0CH
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 862
0082 D2AF              SETB    SFR_EA
                                           ; SOURCE LINE # 869
0084 D2AB              SETB    SFR_ET1
0086         ?C0043:
                                           ; SOURCE LINE # 875
0086 2095FD            JB      P1_5,?C0043
0089         ?C0044:
                                           ; SOURCE LINE # 876
0089 7F64              MOV     R7,#064H
008B 7E00              MOV     R6,#00H
008D 120000      E     LCALL   _delay1ms
                                           ; SOURCE LINE # 880
0090 120000      E     LCALL   DCDC_StartUP
                                           ; SOURCE LINE # 881
0093 120000      E     LCALL   LedPowerUp
                                           ; SOURCE LINE # 884
0096 7BFF              MOV     R3,#0FFH
0098 7A00        R     MOV     R2,#HIGH ?SC_60
009A 7900        R     MOV     R1,#LOW ?SC_60
009C 120000      E     LCALL   _ePuts
                                           ; SOURCE LINE # 885
009F 7F01              MOV     R7,#01H
00A1 120000      R     LCALL   _Interrupt_enableVideoDetect
                                           ; SOURCE LINE # 887
00A4 900000      R     MOV     DPTR,#Buf_r003
00A7 E0                MOVX    A,@DPTR
00A8 120000      R     LCALL   L?0216
00AB A3                INC     DPTR
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 888
00AD 900000      E     MOV     DPTR,#DebugLevel
00B0 E0                MOVX    A,@DPTR
00B1 6003              JZ      ?C0046
                                           ; SOURCE LINE # 889
00B3 120000      E     LCALL   Prompt
                                           ; SOURCE LINE # 890
00B6         ?C0046:
00B6 22                RET     
             ; FUNCTION SystemPowerResume (END)

             ; FUNCTION WaitPowerOn (BEGIN)
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 901
0000         ?C0047:
                                           ; SOURCE LINE # 903
                                           ; SOURCE LINE # 905
0000 30950D            JNB     P1_5,?C0049
                                           ; SOURCE LINE # 906
;---- Variable 'i' assigned to Register 'R7' ----
0003 E4                CLR     A
0004 FF                MOV     R7,A
0005         ?C0050:
0005 0F                INC     R7
0006 EF                MOV     A,R7
0007 B464FB            CJNE    A,#064H,?C0050
000A         ?C0051:
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 59  

                                           ; SOURCE LINE # 907
000A 309503            JNB     P1_5,?C0049
000D 7F01              MOV     R7,#01H
000F 22                RET     
                                           ; SOURCE LINE # 908
0010         ?C0049:
                                           ; SOURCE LINE # 911
0010 20A4ED            JB      P2_4,?C0047
0013 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 915
                                           ; SOURCE LINE # 916
0015         ?C0054:
0015 22                RET     
             ; FUNCTION WaitPowerOn (END)

             ; FUNCTION InitBT656_Encoder (BEGIN)
                                           ; SOURCE LINE # 928
                                           ; SOURCE LINE # 929
                                           ; SOURCE LINE # 932
0000 7FD6              MOV     R7,#0D6H
                                           ; SOURCE LINE # 933
0002 120000      R     LCALL   L?0233
0005 7FD6              MOV     R7,#0D6H
0007 120000      E     LCALL   _WriteI2CByte
                                           ; SOURCE LINE # 934
000A 7FD6              MOV     R7,#0D6H
                                           ; SOURCE LINE # 935
000C 120000      R     LCALL   L?0234
000F 7FD6              MOV     R7,#0D6H
0011 120000      E     LCALL   _WriteI2CByte
                                           ; SOURCE LINE # 936
0014 7BCB              MOV     R3,#0CBH
0016 7D82              MOV     R5,#082H
0018 7FD6              MOV     R7,#0D6H
001A 120000      E     LCALL   _WriteI2CByte
                                           ; SOURCE LINE # 938
001D 7F56              MOV     R7,#056H
                                           ; SOURCE LINE # 939
001F 120000      R     LCALL   L?0233
0022 7F56              MOV     R7,#056H
0024 120000      E     LCALL   _WriteI2CByte
                                           ; SOURCE LINE # 940
0027 7F56              MOV     R7,#056H
                                           ; SOURCE LINE # 941
0029 120000      R     LCALL   L?0234
002C 7F56              MOV     R7,#056H
002E 120000      E     LCALL   _WriteI2CByte
                                           ; SOURCE LINE # 942
0031 7BCB              MOV     R3,#0CBH
0033 7D82              MOV     R5,#082H
0035 7F56              MOV     R7,#056H
0037 020000      E     LJMP    _WriteI2CByte
                                           ; SOURCE LINE # 956
003A         L?0233:
003A 7B02              MOV     R3,#02H
003C 7D17              MOV     R5,#017H
003E 120000      E     LCALL   _WriteI2CByte
0041 7B1C              MOV     R3,#01CH
0043 E4                CLR     A
0044 FD                MOV     R5,A
0045 22                RET     
0046         L?0234:
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 60  

0046 E4                CLR     A
0047 FB                MOV     R3,A
0048 7D01              MOV     R5,#01H
004A 120000      E     LCALL   _WriteI2CByte
004D 7B10              MOV     R3,#010H
004F 7D80              MOV     R5,#080H
0051 22                RET     
             ; FUNCTION InitBT656_Encoder (END)

             ; FUNCTION PrintModelVersionInfo (BEGIN)
                                           ; SOURCE LINE # 1290
                                           ; SOURCE LINE # 1292
                                           ; SOURCE LINE # 1294
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_93
0004 7900        R     MOV     R1,#LOW ?SC_93
0006 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1298
0009 7BFF              MOV     R3,#0FFH
000B 7A00        R     MOV     R2,#HIGH ?SC_151
000D 7900        R     MOV     R1,#LOW ?SC_151
000F 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1318
0012 7BFF              MOV     R3,#0FFH
0014 7A00        R     MOV     R2,#HIGH ?SC_161
0016 7900        R     MOV     R1,#LOW ?SC_161
0018 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1326
001B 7BFF              MOV     R3,#0FFH
001D 7A00        R     MOV     R2,#HIGH ?SC_179
001F 7900        R     MOV     R1,#LOW ?SC_179
0021 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1333
0024 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0027 74FF              MOV     A,#0FFH
0029 F0                MOVX    @DPTR,A
002A A3                INC     DPTR
002B 7400        R     MOV     A,#HIGH ?SC_194
002D F0                MOVX    @DPTR,A
002E A3                INC     DPTR
002F 7400        R     MOV     A,#LOW ?SC_194
0031 F0                MOVX    @DPTR,A
0032 A3                INC     DPTR
0033 74FF              MOV     A,#0FFH
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 7400        R     MOV     A,#HIGH ?SC_203
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B 7400        R     MOV     A,#LOW ?SC_203
003D F0                MOVX    @DPTR,A
003E 7BFF              MOV     R3,#0FFH
0040 7A00        R     MOV     R2,#HIGH ?SC_186
0042 7900        R     MOV     R1,#LOW ?SC_186
0044 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1345
0047 7BFF              MOV     R3,#0FFH
0049 7A00        R     MOV     R2,#HIGH ?SC_93
004B 7900        R     MOV     R1,#LOW ?SC_93
004D 020000      E     LJMP    _Printf
             ; FUNCTION PrintModelVersionInfo (END)

C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 61  

             ; FUNCTION InitVariables (BEGIN)
                                           ; SOURCE LINE # 1359
                                           ; SOURCE LINE # 1360
                                           ; SOURCE LINE # 1361
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#DebugLevel
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1362
0005 D200        E     SETB    access
                                           ; SOURCE LINE # 1363
0007 900000      E     MOV     DPTR,#SW_key
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1366
000B 900000      R     MOV     DPTR,#Task_Grid_on
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1367
000F 900000      R     MOV     DPTR,#Task_Grid_cmd
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1368
0013 900000      R     MOV     DPTR,#Task_NoSignal_cmd
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1369
0017 900000      R     MOV     DPTR,#SW_INTR_cmd
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1371
001B 900000      E     MOV     DPTR,#SpiFlashVendor
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1381
001F 900000      E     MOV     DPTR,#OsdTime
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1382
0023 22                RET     
             ; FUNCTION InitVariables (END)

             ; FUNCTION _InitCore (BEGIN)
                                           ; SOURCE LINE # 1397
;---- Variable 'fPowerUpBoot' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1398
                                           ; SOURCE LINE # 1399
0000 EF                MOV     A,R7
0001 6011              JZ      ?C0059
                                           ; SOURCE LINE # 1401
0003 E4                CLR     A
0004 900000      R     MOV     DPTR,#SysNoInitMode
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1406
0008 309509            JNB     P1_5,?C0059
                                           ; SOURCE LINE # 1408
                                           ; SOURCE LINE # 1409
000B 04                INC     A
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1411
000D C200        E     CLR     access
                                           ; SOURCE LINE # 1413
000F E4                CLR     A
0010 FF                MOV     R7,A
0011 020000      E     LJMP    _McuSpiClkSelect
                                           ; SOURCE LINE # 1415
                                           ; SOURCE LINE # 1416
0014         ?C0059:
                                           ; SOURCE LINE # 1418
0014 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 62  

0016 7A00        R     MOV     R2,#HIGH ?SC_215
0018 7900        R     MOV     R1,#LOW ?SC_215
001A 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1420
001D 120000      E     LCALL   SPI_QUADInit
0020 900000      E     MOV     DPTR,#SpiFlashVendor
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1421
0025 7F05              MOV     R7,#05H
0027 120000      E     LCALL   _SPI_SetReadModeByRegister
                                           ; SOURCE LINE # 1426
002A 120000      R     LCALL   L?0216
                                           ; SOURCE LINE # 1427
002D 120000      R     LCALL   L?0214
0030 A3                INC     DPTR
0031 14                DEC     A
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1431
0033 E4                CLR     A
0034 7800        E     MOV     R0,#LOW RemoDataReady
0036 F6                MOV     @R0,A
0037 43FB04            ORL     SFR_E2IE,#04H
                                           ; SOURCE LINE # 1433
003A         ?C0061:
003A 22                RET     
             ; FUNCTION _InitCore (END)

             ; FUNCTION StartVideoInput (BEGIN)
                                           ; SOURCE LINE # 1445
                                           ; SOURCE LINE # 1446
                                           ; SOURCE LINE # 1459
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_225
0004 7900        R     MOV     R1,#LOW ?SC_225
0006 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 1460
0009 120000      E     LCALL   GetInputEE
000C 900000      R     MOV     DPTR,#InputMainEE
000F EF                MOV     A,R7
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1461
0011 7D01              MOV     R5,#01H
0013 120000      E     LCALL   _PrintfInput
                                           ; SOURCE LINE # 1463
0016 900000      E     MOV     DPTR,#InputMain
0019 74FF              MOV     A,#0FFH
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1464
001C 900000      R     MOV     DPTR,#InputMainEE
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 020000      E     LJMP    _ChangeInput
             ; FUNCTION StartVideoInput (END)

             ; FUNCTION _InitSystem (BEGIN)
                                           ; SOURCE LINE # 1512
0000 900000      R     MOV     DPTR,#fPowerUpBoot
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1513
                                           ; SOURCE LINE # 1523
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 63  

0005 200003      E     JB      access,?C0063
                                           ; SOURCE LINE # 1525
0008 7F00              MOV     R7,#00H
000A 22                RET     
                                           ; SOURCE LINE # 1526
000B         ?C0063:
                                           ; SOURCE LINE # 1532
000B 120000      E     LCALL   CheckEEPROM
000E 900000      R     MOV     DPTR,#ee_mode
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1533
0013 BF0126            CJNE    R7,#01H,?C0065
                                           ; SOURCE LINE # 1535
0016 120000      E     LCALL   InitWithNTSC
                                           ; SOURCE LINE # 1537
0019 900000      E     MOV     DPTR,#DebugLevel
001C 7403              MOV     A,#03H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1540
001F 120000      E     LCALL   EE_Format
                                           ; SOURCE LINE # 1541
0022 120000      E     LCALL   EE_FindCurrInfo
                                           ; SOURCE LINE # 1544
0025 900000      E     MOV     DPTR,#InputMain
0028 74FF              MOV     A,#0FFH
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1545
002B 120000      E     LCALL   InitializeEE
                                           ; SOURCE LINE # 1547
002E E4                CLR     A
002F 900000      E     MOV     DPTR,#DebugLevel
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1548
0033 FF                MOV     R7,A
0034 120000      E     LCALL   _SaveDebugLevelEE
                                           ; SOURCE LINE # 1550
0037 E4                CLR     A
0038 900000      R     MOV     DPTR,#ee_mode
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1551
003C         ?C0065:
                                           ; SOURCE LINE # 1554
003C 120000      E     LCALL   GetDebugLevelEE
003F 900000      E     MOV     DPTR,#DebugLevel
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1555
0044 7019              JNZ     ?C0066
0046 900000      R     MOV     DPTR,#fPowerUpBoot
0049 E0                MOVX    A,@DPTR
004A 6013              JZ      ?C0066
                                           ; SOURCE LINE # 1556
004C 7BFF              MOV     R3,#0FFH
004E 7A00        R     MOV     R2,#HIGH ?SC_251
0050 7900        R     MOV     R1,#LOW ?SC_251
0052 900000      E     MOV     DPTR,#DebugLevel
0055 E0                MOVX    A,@DPTR
0056 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0059 F0                MOVX    @DPTR,A
005A 120000      E     LCALL   _Printf
005D 800D              SJMP    ?C0067
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 64  

005F         ?C0066:
                                           ; SOURCE LINE # 1558
005F 7A00        R     MOV     R2,#HIGH ?SC_283
0061 7900        R     MOV     R1,#LOW ?SC_283
0063 900000      E     MOV     DPTR,#DebugLevel
0066 120000      R     LCALL   L?0229
0069 120000      E     LCALL   _ePrintf
006C         ?C0067:
                                           ; SOURCE LINE # 1561
006C 7A00        R     MOV     R2,#HIGH ?SC_313
006E 7900        R     MOV     R1,#LOW ?SC_313
0070 900000      R     MOV     DPTR,#fPowerUpBoot
0073 120000      R     LCALL   L?0229
0076 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 1567
0079 900000      R     MOV     DPTR,#fPowerUpBoot
007C E0                MOVX    A,@DPTR
007D 6014              JZ      ?C0068
                                           ; SOURCE LINE # 1570
007F 120000      E     LCALL   InitWithNTSC
                                           ; SOURCE LINE # 1577
0082 120000      E     LCALL   FP_GpioDefault
                                           ; SOURCE LINE # 1580
0085 7F01              MOV     R7,#01H
0087 120000      E     LCALL   _SSPLL_PowerUp
                                           ; SOURCE LINE # 1582
008A 7BFF              MOV     R3,#0FFH
008C 7A00        R     MOV     R2,#HIGH ?SC_330
008E 7900        R     MOV     R1,#LOW ?SC_330
0090 120000      E     LCALL   _PrintSystemClockMsg
                                           ; SOURCE LINE # 1594
0093         ?C0068:
                                           ; SOURCE LINE # 1605
0093 120000      E     LCALL   GetInputEE
0096 900000      E     MOV     DPTR,#InputMain
0099 EF                MOV     A,R7
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1606
009B E4                CLR     A
009C 900000      R     MOV     DPTR,#FirstInitDone
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1608
00A0 900000      R     MOV     DPTR,#fPowerUpBoot
00A3 E0                MOVX    A,@DPTR
00A4 6003              JZ      ?C0069
                                           ; SOURCE LINE # 1612
00A6 120000      E     LCALL   DCDC_StartUP
                                           ; SOURCE LINE # 1613
00A9         ?C0069:
                                           ; SOURCE LINE # 1616
00A9 120000      E     LCALL   FontOsdInit
                                           ; SOURCE LINE # 1617
00AC 120000      E     LCALL   FOsdSetDeValue
                                           ; SOURCE LINE # 1619
00AF 7F01              MOV     R7,#01H
00B1 120000      E     LCALL   _FOsdIndexMsgPrint
                                           ; SOURCE LINE # 1620
00B4 E4                CLR     A
00B5 FD                MOV     R5,A
00B6 FF                MOV     R7,A
00B7 120000      E     LCALL   _FOsdWinEnable
                                           ; SOURCE LINE # 1639
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 65  

00BA E4                CLR     A
00BB FF                MOV     R7,A
00BC 120000      E     LCALL   _DumpClock
                                           ; SOURCE LINE # 1643
00BF 120000      R     LCALL   StartVideoInput
                                           ; SOURCE LINE # 1644
00C2 7BFF              MOV     R3,#0FFH
00C4 7A00        R     MOV     R2,#HIGH ?SC_344
00C6 7900        R     MOV     R1,#LOW ?SC_344
00C8 120000      E     LCALL   _PrintSystemClockMsg
                                           ; SOURCE LINE # 1649
00CB 900000      R     MOV     DPTR,#FirstInitDone
00CE E0                MOVX    A,@DPTR
00CF 7009              JNZ     ?C0070
                                           ; SOURCE LINE # 1650
00D1 120000      E     LCALL   InitLogo1
                                           ; SOURCE LINE # 1651
00D4 900000      R     MOV     DPTR,#FirstInitDone
00D7 7401              MOV     A,#01H
00D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1652
00DA         ?C0070:
                                           ; SOURCE LINE # 1653
00DA 120000      E     LCALL   LedPowerUp
                                           ; SOURCE LINE # 1658
00DD 900000      R     MOV     DPTR,#fPowerUpBoot
00E0 E0                MOVX    A,@DPTR
00E1 6003              JZ      ?C0071
                                           ; SOURCE LINE # 1659
00E3 120000      R     LCALL   InitBT656_Encoder
00E6         ?C0071:
                                           ; SOURCE LINE # 1665
00E6 900000      R     MOV     DPTR,#FirstInitDone
00E9 E0                MOVX    A,@DPTR
00EA B40119            CJNE    A,#01H,?C0072
                                           ; SOURCE LINE # 1666
00ED 7402              MOV     A,#02H
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1668
00F0 900000      R     MOV     DPTR,#Task_NoSignal_cmd
00F3 E0                MOVX    A,@DPTR
00F4 701C              JNZ     ?C0074
                                           ; SOURCE LINE # 1669
00F6 900000      R     MOV     DPTR,#fPowerUpBoot
00F9 E0                MOVX    A,@DPTR
00FA FF                MOV     R7,A
00FB 120000      E     LCALL   _RemoveLogoWithWait
                                           ; SOURCE LINE # 1670
00FE E4                CLR     A
00FF FD                MOV     R5,A
0100 FF                MOV     R7,A
0101 120000      E     LCALL   _FOsdWinEnable
                                           ; SOURCE LINE # 1671
                                           ; SOURCE LINE # 1677
0104 800C              SJMP    ?C0074
0106         ?C0072:
                                           ; SOURCE LINE # 1680
                                           ; SOURCE LINE # 1682
0106 120000      R     LCALL   L?0212
0109 E0                MOVX    A,@DPTR
010A 30E005            JNB     ACC.0,?C0074
                                           ; SOURCE LINE # 1683
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 66  

010D 7F01              MOV     R7,#01H
010F 120000      E     LCALL   _ScalerSetFreerunManual
                                           ; SOURCE LINE # 1684
0112         ?C0074:
                                           ; SOURCE LINE # 1690
0112 120000      E     LCALL   GetAspectModeEE
0115 120000      E     LCALL   _SetAspectHW
                                           ; SOURCE LINE # 1691
0118 7F3B              MOV     R7,#03BH
011A 7E00              MOV     R6,#00H
011C 120000      E     LCALL   _EE_Read
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1692
011F EF                MOV     A,R7
0120 6010              JZ      ?C0076
                                           ; SOURCE LINE # 1694
0122 E500        E     MOV     A,regTW88+01H
0124 2401              ADD     A,#01H
0126 F582              MOV     DPL,A
0128 E500        E     MOV     A,regTW88
012A 3402              ADDC    A,#02H
012C F583              MOV     DPH,A
012E E0                MOVX    A,@DPTR
012F 4480              ORL     A,#080H
0131 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1695
0132         ?C0076:
                                           ; SOURCE LINE # 1696
0132 7F3A              MOV     R7,#03AH
0134 7E00              MOV     R6,#00H
0136 120000      E     LCALL   _EE_Read
0139 120000      E     LCALL   _OsdSetTime
                                           ; SOURCE LINE # 1699
013C 7F39              MOV     R7,#039H
013E 7E00              MOV     R6,#00H
0140 120000      E     LCALL   _EE_Read
0143 120000      E     LCALL   _OsdSetTransRate
                                           ; SOURCE LINE # 1700
0146 7F3C              MOV     R7,#03CH
0148 7E00              MOV     R6,#00H
014A 120000      E     LCALL   _EE_Read
014D 120000      E     LCALL   _BackLightSetRate
                                           ; SOURCE LINE # 1702
0150 7F04              MOV     R7,#04H
0152 120000      E     LCALL   _MeasSetErrTolerance
                                           ; SOURCE LINE # 1713
0155 120000      E     LCALL   ReadCalibDataFromEE
                                           ; SOURCE LINE # 1714
0158 120000      E     LCALL   InitTouch
                                           ; SOURCE LINE # 1716
015B E4                CLR     A
015C FF                MOV     R7,A
015D 120000      E     LCALL   _SetTouchStatus
                                           ; SOURCE LINE # 1717
0160 120000      E     LCALL   _SetLastTouchStatus
                                           ; SOURCE LINE # 1720
0163 120000      R     LCALL   UpdateOsdTimerClock
                                           ; SOURCE LINE # 1761
0166 120000      E     LCALL   FOsdSetDeValue
                                           ; SOURCE LINE # 1770
0169 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1771
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 67  

016B         ?C0064:
016B 22                RET     
             ; FUNCTION _InitSystem (END)

             ; FUNCTION NoSignalTask (BEGIN)
                                           ; SOURCE LINE # 1786
                                           ; SOURCE LINE # 1787
                                           ; SOURCE LINE # 1792
0000 900000      R     MOV     DPTR,#Task_Grid_on
0003 E0                MOVX    A,@DPTR
0004 6003              JZ      $ + 5H
0006 020000      R     LJMP    ?C0078
0009         ?C0077:
                                           ; SOURCE LINE # 1796
0009 900000      R     MOV     DPTR,#Task_NoSignal_cmd
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
000E 7003              JNZ     $ + 5H
0010 020000      R     LJMP    ?C0078
0013         ?C0079:
                                           ; SOURCE LINE # 1799
0013 C3                CLR     C
0014 E500        E     MOV     A,tic_task+01H
0016 94E8              SUBB    A,#0E8H
0018 E500        E     MOV     A,tic_task
001A 9403              SUBB    A,#03H
001C 5003              JNC     $ + 5H
001E 020000      R     LJMP    ?C0078
0021         ?C0080:
                                           ; SOURCE LINE # 1802
0021 EF                MOV     A,R7
0022 B40120            CJNE    A,#01H,?C0081
                                           ; SOURCE LINE # 1806
0025 E4                CLR     A
0026 FF                MOV     R7,A
0027 120000      E     LCALL   _FOsdWinToggleEnable
                                           ; SOURCE LINE # 1807
002A 900000      R     MOV     DPTR,#Task_NoSignal_count
002D E0                MOVX    A,@DPTR
002E C3                CLR     C
002F 9403              SUBB    A,#03H
0031 500F              JNC     ?C0082
                                           ; SOURCE LINE # 1808
0033 7BFF              MOV     R3,#0FFH
0035 7A00        R     MOV     R2,#HIGH ?SC_360
0037 7900        R     MOV     R1,#LOW ?SC_360
0039 120000      E     LCALL   _dPuts
                                           ; SOURCE LINE # 1809
003C 900000      R     MOV     DPTR,#Task_NoSignal_count
003F E0                MOVX    A,@DPTR
0040 04                INC     A
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1810
0042         ?C0082:
                                           ; SOURCE LINE # 1811
0042 020000      R     LJMP    ?C0195
                                           ; SOURCE LINE # 1815
0045         ?C0081:
                                           ; SOURCE LINE # 1816
0045 900000      R     MOV     DPTR,#Task_NoSignal_cmd
0048 E0                MOVX    A,@DPTR
0049 6402              XRL     A,#02H
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 68  

004B 7003              JNZ     $ + 5H
004D 020000      R     LJMP    ?C0078
0050         ?C0083:
                                           ; SOURCE LINE # 1823
0050 7BFF              MOV     R3,#0FFH
0052 7A00        R     MOV     R2,#HIGH ?SC_395
0054 7900        R     MOV     R1,#LOW ?SC_395
0056 120000      E     LCALL   _dPuts
                                           ; SOURCE LINE # 1824
0059 900000      R     MOV     DPTR,#Task_NoSignal_cmd
005C E0                MOVX    A,@DPTR
005D B40409            CJNE    A,#04H,?C0084
                                           ; SOURCE LINE # 1825
0060 7BFF              MOV     R3,#0FFH
0062 7A00        R     MOV     R2,#HIGH ?SC_426
0064 7900        R     MOV     R1,#LOW ?SC_426
0066 120000      E     LCALL   _dPuts
0069         ?C0084:
                                           ; SOURCE LINE # 1829
0069 120000      R     LCALL   L?0212
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
;---- Variable 'r004' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1830
006E 30E00B            JNB     ACC.0,?C0085
                                           ; SOURCE LINE # 1831
0071 7BFF              MOV     R3,#0FFH
0073 7A00        R     MOV     R2,#HIGH ?SC_433
0075 7900        R     MOV     R1,#LOW ?SC_433
0077 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 1833
007A 805C              SJMP    ?C0196
                                           ; SOURCE LINE # 1836
007C         ?C0085:
                                           ; SOURCE LINE # 1839
007C E4                CLR     A
007D FF                MOV     R7,A
007E 120000      R     LCALL   _Interrupt_enableVideoDetect
                                           ; SOURCE LINE # 1842
0081 900000      R     MOV     DPTR,#CheckAndSetInput
0084 A3                INC     DPTR
0085 E0                MOVX    A,@DPTR
0086 FA                MOV     R2,A
0087 A3                INC     DPTR
0088 E0                MOVX    A,@DPTR
0089 F9                MOV     R1,A
008A 120000      E     LCALL   ?C?ICALL
008D 900000      R     MOV     DPTR,#ret
0090 EF                MOV     A,R7
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1846
0092 7F01              MOV     R7,#01H
0094 120000      R     LCALL   _Interrupt_enableVideoDetect
                                           ; SOURCE LINE # 1848
0097 900000      R     MOV     DPTR,#ret
009A E0                MOVX    A,@DPTR
009B 7024              JNZ     ?C0086
                                           ; SOURCE LINE # 1849
009D 7BFF              MOV     R3,#0FFH
009F 7A00        R     MOV     R2,#HIGH ?SC_448
00A1 7900        R     MOV     R1,#LOW ?SC_448
00A3 120000      E     LCALL   _dPuts
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 69  

                                           ; SOURCE LINE # 1850
00A6 AF00        E     MOV     R7,VH_Loss_Changed+01H
00A8 120000      E     LCALL   _VInput_enableOutput
                                           ; SOURCE LINE # 1851
00AB E4                CLR     A
00AC FD                MOV     R5,A
00AD FF                MOV     R7,A
00AE 120000      E     LCALL   _FOsdWinEnable
                                           ; SOURCE LINE # 1855
00B1 120000      E     LCALL   getNoSignalLogoStatus
00B4 EF                MOV     A,R7
00B5 6021              JZ      ?C0088
                                           ; SOURCE LINE # 1856
00B7 E4                CLR     A
00B8 FF                MOV     R7,A
00B9 120000      E     LCALL   _ScalerSetFreerunManual
                                           ; SOURCE LINE # 1857
00BC 120000      E     LCALL   RemoveLogo
                                           ; SOURCE LINE # 1858
                                           ; SOURCE LINE # 1864
00BF 8017              SJMP    ?C0088
00C1         ?C0086:
                                           ; SOURCE LINE # 1866
                                           ; SOURCE LINE # 1868
00C1 900000      E     MOV     DPTR,#InputMain
00C4 E0                MOVX    A,@DPTR
00C5 B40310            CJNE    A,#03H,?C0088
                                           ; SOURCE LINE # 1870
00C8 120000      R     LCALL   L?0212
00CB E0                MOVX    A,@DPTR
00CC 30E004            JNB     ACC.0,?C0090
                                           ; SOURCE LINE # 1871
00CF 7F02              MOV     R7,#02H
00D1 8002              SJMP    ?C0197
00D3         ?C0090:
                                           ; SOURCE LINE # 1873
00D3 7F03              MOV     R7,#03H
00D5         ?C0197:
00D5 120000      E     LCALL   _FOsdIndexMsgPrint
                                           ; SOURCE LINE # 1874
                                           ; SOURCE LINE # 1875
00D8         ?C0088:
                                           ; SOURCE LINE # 1880
00D8         ?C0195:
00D8         ?C0196:
00D8 E4                CLR     A
00D9 F500        E     MOV     tic_task,A
00DB F500        E     MOV     tic_task+01H,A
                                           ; SOURCE LINE # 1883
00DD         ?C0078:
00DD 22                RET     
             ; FUNCTION NoSignalTask (END)

             ; FUNCTION NoSignalTaskOnWaitMode (BEGIN)
                                           ; SOURCE LINE # 1892
                                           ; SOURCE LINE # 1893
                                           ; SOURCE LINE # 1896
0000 900000      R     MOV     DPTR,#Task_NoSignal_cmd
0003 E0                MOVX    A,@DPTR
0004 6402              XRL     A,#02H
0006 6003              JZ      $ + 5H
0008 020000      R     LJMP    ?C0093
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 70  

000B         ?C0092:
                                           ; SOURCE LINE # 1900
000B 900000      E     MOV     DPTR,#InputMain
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 6004              JZ      ?C0095
0012 6401              XRL     A,#01H
0014 7019              JNZ     ?C0094
0016         ?C0095:
                                           ; SOURCE LINE # 1901
0016 120000      E     LCALL   DecoderReadDetectedMode
0019 900000      R     MOV     DPTR,#ret
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1903
001E 6005              JZ      ?C0097
0020 E0                MOVX    A,@DPTR
0021 6401              XRL     A,#01H
0023 7064              JNZ     ?C0093
0025         ?C0097:
                                           ; SOURCE LINE # 1904
0025 900000      R     MOV     DPTR,#ret
0028 120000      R     LCALL   L?0227
002B 605C              JZ      ?C0093
                                           ; SOURCE LINE # 1905
                                           ; SOURCE LINE # 1907
                                           ; SOURCE LINE # 1908
                                           ; SOURCE LINE # 1909
                                           ; SOURCE LINE # 1911
                                           ; SOURCE LINE # 1912
                                           ; SOURCE LINE # 1913
                                           ; SOURCE LINE # 1914
002D 8020              SJMP    ?C0198
002F         ?C0094:
                                           ; SOURCE LINE # 1916
002F 900000      E     MOV     DPTR,#InputMain
0032 E0                MOVX    A,@DPTR
0033 6402              XRL     A,#02H
0035 7052              JNZ     ?C0093
                                           ; SOURCE LINE # 1917
0037 120000      E     LCALL   VAdcGetInputStatus
003A 900000      R     MOV     DPTR,#ret
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1918
003F 30E347            JNB     ACC.3,?C0093
                                           ; SOURCE LINE # 1919
0042 E0                MOVX    A,@DPTR
0043 5407              ANL     A,#07H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1920
0046 6407              XRL     A,#07H
0048 603F              JZ      ?C0093
004A 120000      R     LCALL   L?0227
004D 603A              JZ      ?C0093
                                           ; SOURCE LINE # 1921
004F         ?C0198:
004F 7F01              MOV     R7,#01H
0051 120000      E     LCALL   _ScalerSetMuteManual
                                           ; SOURCE LINE # 1923
0054 900000      R     MOV     DPTR,#SW_INTR_cmd
0057 7401              MOV     A,#01H
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 71  

0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1924
005A 7BFF              MOV     R3,#0FFH
005C 7A00        R     MOV     R2,#HIGH ?SC_476
005E 7900        R     MOV     R1,#LOW ?SC_476
0060 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
0063 F0                MOVX    @DPTR,A
0064 900000      E     MOV     DPTR,#InputSubMode
0067 E0                MOVX    A,@DPTR
0068 900000      E     MOV     DPTR,#?_dPrintf?BYTE+04H
006B F0                MOVX    @DPTR,A
006C 900000      R     MOV     DPTR,#ret
006F E0                MOVX    A,@DPTR
0070 900000      E     MOV     DPTR,#?_dPrintf?BYTE+05H
0073 F0                MOVX    @DPTR,A
0074 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 1925
0077 900000      R     MOV     DPTR,#ret
007A E0                MOVX    A,@DPTR
007B 900000      E     MOV     DPTR,#InputSubMode
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1927
007F E500        E     MOV     A,regTW88+01H
0081 240F              ADD     A,#0FH
0083 120000      R     LCALL   L?0213
0086 7480              MOV     A,#080H
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1928
                                           ; SOURCE LINE # 1929
                                           ; SOURCE LINE # 1930
                                           ; SOURCE LINE # 1933
0089         ?C0093:
0089 22                RET     
             ; FUNCTION NoSignalTaskOnWaitMode (END)

             ; FUNCTION _Interrupt_enableVideoDetect (BEGIN)
                                           ; SOURCE LINE # 1955
;---- Variable 'fOn' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1956
                                           ; SOURCE LINE # 1965
0000 EF                MOV     A,R7
0001 6010              JZ      ?C0103
                                           ; SOURCE LINE # 1966
0003 120000      R     LCALL   L?0216
0006 74FF              MOV     A,#0FFH
                                           ; SOURCE LINE # 1967
0008 120000      R     LCALL   L?0211
                                           ; SOURCE LINE # 1968
000B 120000      R     LCALL   L?0214
000E A3                INC     DPTR
000F 74FC              MOV     A,#0FCH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1969
0012 22                RET     
0013         ?C0103:
                                           ; SOURCE LINE # 1970
                                           ; SOURCE LINE # 1971
0013 120000      R     LCALL   L?0216
0016 A3                INC     DPTR
0017 74FE              MOV     A,#0FEH
                                           ; SOURCE LINE # 1972
0019 120000      R     LCALL   L?0215
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 72  

001C 04                INC     A
                                           ; SOURCE LINE # 1973
001D 120000      R     LCALL   L?0211
0020 74FF              MOV     A,#0FFH
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1982
0023 E4                CLR     A
0024 F500        E     MOV     INT_STATUS,A
                                           ; SOURCE LINE # 1983
0026 F500        E     MOV     VH_Loss_Changed,A
0028 F500        E     MOV     VH_Loss_Changed+01H,A
                                           ; SOURCE LINE # 1984
002A F500        E     MOV     INT_STATUS2,A
                                           ; SOURCE LINE # 1989
                                           ; SOURCE LINE # 1991
002C         ?C0105:
002C 22                RET     
             ; FUNCTION _Interrupt_enableVideoDetect (END)

             ; FUNCTION _Interrupt_enableSyncDetect (BEGIN)
                                           ; SOURCE LINE # 1999
;---- Variable 'fOn' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2000
                                           ; SOURCE LINE # 2008
0000 EF                MOV     A,R7
0001 601C              JZ      ?C0106
                                           ; SOURCE LINE # 2009
0003 120000      R     LCALL   L?0216
0006 7404              MOV     A,#04H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2010
0009 2500        E     ADD     A,regTW88+01H
000B 120000      R     LCALL   L?0213
000E 7406              MOV     A,#06H
                                           ; SOURCE LINE # 2011
0010 120000      R     LCALL   L?0215
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 54FB              ANL     A,#0FBH
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2013
0018 900000      R     MOV     DPTR,#SW_Video_Status
001B 7401              MOV     A,#01H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2015
001E 22                RET     
001F         ?C0106:
                                           ; SOURCE LINE # 2016
                                           ; SOURCE LINE # 2017
001F 120000      R     LCALL   L?0216
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 4404              ORL     A,#04H
                                           ; SOURCE LINE # 2018
0026 120000      R     LCALL   L?0215
0029 7404              MOV     A,#04H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2019
002C 2500        E     ADD     A,regTW88+01H
002E 120000      R     LCALL   L?0213
0031 7406              MOV     A,#06H
0033 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 73  

                                           ; SOURCE LINE # 2027
0034 5300FB      E     ANL     INT_STATUS,#0FBH
                                           ; SOURCE LINE # 2028
0037 5300F9      E     ANL     INT_STATUS2,#0F9H
                                           ; SOURCE LINE # 2033
                                           ; SOURCE LINE # 2035
003A         ?C0108:
003A 22                RET     
             ; FUNCTION _Interrupt_enableSyncDetect (END)

             ; FUNCTION InterruptPollingRoutine (BEGIN)
                                           ; SOURCE LINE # 2047
                                           ; SOURCE LINE # 2048
                                           ; SOURCE LINE # 2055
0000 C2A8              CLR     SFR_EX0
                                           ; SOURCE LINE # 2057
0002 900000      R     MOV     DPTR,#main_INT_STATUS
0005 E500        E     MOV     A,INT_STATUS
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2058
0008 900000      R     MOV     DPTR,#main_INT_STATUS2
000B E500        E     MOV     A,INT_STATUS2
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2059
000E 900000      R     MOV     DPTR,#main_VH_Loss_Changed
0011 E500        E     MOV     A,VH_Loss_Changed
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 E500        E     MOV     A,VH_Loss_Changed+01H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2060
0018 900000      R     MOV     DPTR,#temp_INT_STATUS_ACC
001B E500        E     MOV     A,INT_STATUS_ACC
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2061
001E A3                INC     DPTR
001F E500        E     MOV     A,INT_STATUS2_ACC
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2063
0022 E4                CLR     A
0023 F500        E     MOV     INT_STATUS,A
                                           ; SOURCE LINE # 2064
0025 F500        E     MOV     INT_STATUS2,A
                                           ; SOURCE LINE # 2065
0027 F500        E     MOV     VH_Loss_Changed,A
0029 F500        E     MOV     VH_Loss_Changed+01H,A
                                           ; SOURCE LINE # 2066
002B F500        E     MOV     INT_STATUS_ACC,A
                                           ; SOURCE LINE # 2067
002D F500        E     MOV     INT_STATUS2_ACC,A
                                           ; SOURCE LINE # 2068
002F D2A8              SETB    SFR_EX0
                                           ; SOURCE LINE # 2072
0031 120000      R     LCALL   L?0216
0034 A3                INC     DPTR
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 900000      R     MOV     DPTR,#r003
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2076
003B 900000      R     MOV     DPTR,#main_INT_STATUS
003E E0                MOVX    A,@DPTR
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 74  

003F FE                MOV     R6,A
0040 EF                MOV     A,R7
0041 F4                CPL     A
0042 FF                MOV     R7,A
0043 EE                MOV     A,R6
0044 5F                ANL     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2081
0046 5407              ANL     A,#07H
0048 7003              JNZ     $ + 5H
004A 020000      R     LJMP    ?C0109
                                           ; SOURCE LINE # 2082
004D 7A00        R     MOV     R2,#HIGH ?SC_528
004F 7900        R     MOV     R1,#LOW ?SC_528
0051 120000      R     LCALL   L?0223
                                           ; SOURCE LINE # 2083
0054 900000      R     MOV     DPTR,#main_INT_STATUS
                                           ; SOURCE LINE # 2084
0057 120000      R     LCALL   L?0235
005A         ?C0110:
                                           ; SOURCE LINE # 2085
005A 900000      R     MOV     DPTR,#tmp
005D E0                MOVX    A,@DPTR
005E 7BFF              MOV     R3,#0FFH
0060 30E706            JNB     ACC.7,?C0113
0063 7A00        R     MOV     R2,#HIGH ?SC_552
0065 7900        R     MOV     R1,#LOW ?SC_552
0067 8004              SJMP    ?C0199
0069         ?C0113:
0069 7A00        R     MOV     R2,#HIGH ?SC_554
006B 7900        R     MOV     R1,#LOW ?SC_554
006D         ?C0199:
006D 120000      E     LCALL   _ePrintf
0070         ?C0114:
                                           ; SOURCE LINE # 2086
                                           ; SOURCE LINE # 2087
0070 120000      R     LCALL   L?0230
0073 9408              SUBB    A,#08H
0075 40E3              JC      ?C0110
0077         ?C0111:
                                           ; SOURCE LINE # 2089
0077 900000      R     MOV     DPTR,#temp_INT_STATUS_ACC
007A E0                MOVX    A,@DPTR
007B FF                MOV     R7,A
007C 900000      R     MOV     DPTR,#main_INT_STATUS
007F E0                MOVX    A,@DPTR
0080 FE                MOV     R6,A
0081 6F                XRL     A,R7
0082 6026              JZ      ?C0115
                                           ; SOURCE LINE # 2090
0084 900000      R     MOV     DPTR,#r003
0087 E0                MOVX    A,@DPTR
0088 F4                CPL     A
0089 FD                MOV     R5,A
008A EF                MOV     A,R7
008B 5D                ANL     A,R5
008C FF                MOV     R7,A
008D 900000      R     MOV     DPTR,#temp_INT_STATUS_ACC
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2091
0091 EE                MOV     A,R6
0092 6F                XRL     A,R7
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 75  

0093 6015              JZ      ?C0115
                                           ; SOURCE LINE # 2092
0095 7A00        R     MOV     R2,#HIGH ?SC_556
0097 7900        R     MOV     R1,#LOW ?SC_556
0099 120000      R     LCALL   L?0223
                                           ; SOURCE LINE # 2093
009C 900000      R     MOV     DPTR,#temp_INT_STATUS_ACC
009F E0                MOVX    A,@DPTR
00A0 30E007            JNB     ACC.0,?C0115
                                           ; SOURCE LINE # 2094
00A3 900000      R     MOV     DPTR,#main_INT_STATUS
00A6 E0                MOVX    A,@DPTR
00A7 4401              ORL     A,#01H
00A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2095
                                           ; SOURCE LINE # 2096
00AA         ?C0115:
                                           ; SOURCE LINE # 2097
00AA 7A00        R     MOV     R2,#HIGH ?SC_569
00AC 7900        R     MOV     R1,#LOW ?SC_569
00AE 900000      R     MOV     DPTR,#main_INT_STATUS2
00B1 120000      R     LCALL   L?0232
                                           ; SOURCE LINE # 2098
00B4 900000      R     MOV     DPTR,#main_INT_STATUS2
                                           ; SOURCE LINE # 2099
00B7 120000      R     LCALL   L?0235
00BA         ?C0118:
                                           ; SOURCE LINE # 2100
00BA 900000      R     MOV     DPTR,#tmp
00BD E0                MOVX    A,@DPTR
00BE 7BFF              MOV     R3,#0FFH
00C0 30E206            JNB     ACC.2,?C0121
00C3 7A00        R     MOV     R2,#HIGH ?SC_552
00C5 7900        R     MOV     R1,#LOW ?SC_552
00C7 8004              SJMP    ?C0200
00C9         ?C0121:
00C9 7A00        R     MOV     R2,#HIGH ?SC_554
00CB 7900        R     MOV     R1,#LOW ?SC_554
00CD         ?C0200:
00CD 120000      E     LCALL   _ePrintf
00D0         ?C0122:
                                           ; SOURCE LINE # 2101
                                           ; SOURCE LINE # 2102
00D0 120000      R     LCALL   L?0230
00D3 9403              SUBB    A,#03H
00D5 40E3              JC      ?C0118
00D7         ?C0119:
                                           ; SOURCE LINE # 2104
00D7 900000      R     MOV     DPTR,#temp_INT_STATUS2_ACC
00DA E0                MOVX    A,@DPTR
00DB FF                MOV     R7,A
00DC 900000      R     MOV     DPTR,#main_INT_STATUS2
00DF E0                MOVX    A,@DPTR
00E0 6F                XRL     A,R7
00E1 6034              JZ      ?C0123
                                           ; SOURCE LINE # 2105
00E3 7BFF              MOV     R3,#0FFH
00E5 7A00        R     MOV     R2,#HIGH ?SC_579
00E7 7900        R     MOV     R1,#LOW ?SC_579
00E9 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
00EC EF                MOV     A,R7
00ED F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 76  

00EE 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 2106
00F1 900000      R     MOV     DPTR,#r003
00F4 E0                MOVX    A,@DPTR
00F5 20E21F            JB      ACC.2,?C0123
                                           ; SOURCE LINE # 2107
00F8 900000      R     MOV     DPTR,#main_INT_STATUS2
00FB E0                MOVX    A,@DPTR
00FC FF                MOV     R7,A
00FD 900000      R     MOV     DPTR,#temp_INT_STATUS2_ACC
0100 E0                MOVX    A,@DPTR
0101 5406              ANL     A,#06H
0103 FE                MOV     R6,A
0104 EF                MOV     A,R7
0105 4E                ORL     A,R6
0106 900000      R     MOV     DPTR,#main_INT_STATUS2
0109 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2108
010A 7BFF              MOV     R3,#0FFH
010C 7A00        R     MOV     R2,#HIGH ?SC_593
010E 7900        R     MOV     R1,#LOW ?SC_593
0110 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
0113 F0                MOVX    @DPTR,A
0114 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 2109
                                           ; SOURCE LINE # 2110
0117         ?C0123:
                                           ; SOURCE LINE # 2112
0117 7A00        R     MOV     R2,#HIGH ?SC_603
0119 7900        R     MOV     R1,#LOW ?SC_603
011B 900000      R     MOV     DPTR,#r003
011E 120000      R     LCALL   L?0232
                                           ; SOURCE LINE # 2113
0121         ?C0109:
                                           ; SOURCE LINE # 2125
0121 900000      R     MOV     DPTR,#main_INT_STATUS
0124 E0                MOVX    A,@DPTR
0125 30E219            JNB     ACC.2,?C0125
0128 900000      R     MOV     DPTR,#main_INT_STATUS2
012B E0                MOVX    A,@DPTR
012C 30E212            JNB     ACC.2,?C0125
                                           ; SOURCE LINE # 2126
012F 7BFF              MOV     R3,#0FFH
0131 7A00        R     MOV     R2,#HIGH ?SC_613
0133 7900        R     MOV     R1,#LOW ?SC_613
0135 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 2127
0138 7BFF              MOV     R3,#0FFH
013A 7A00        R     MOV     R2,#HIGH ?SC_633
013C 7900        R     MOV     R1,#LOW ?SC_633
013E 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 2128
0141         ?C0125:
                                           ; SOURCE LINE # 2130
0141 900000      R     MOV     DPTR,#main_VH_Loss_Changed
0144 E0                MOVX    A,@DPTR
0145 FE                MOV     R6,A
0146 A3                INC     DPTR
0147 E0                MOVX    A,@DPTR
0148 FF                MOV     R7,A
0149 4E                ORL     A,R6
014A 6027              JZ      ?C0126
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 77  

                                           ; SOURCE LINE # 2132
014C 7BFF              MOV     R3,#0FFH
014E 7A00        R     MOV     R2,#HIGH ?SC_651
0150 7900        R     MOV     R1,#LOW ?SC_651
0152 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
0155 EE                MOV     A,R6
0156 F0                MOVX    @DPTR,A
0157 A3                INC     DPTR
0158 EF                MOV     A,R7
0159 F0                MOVX    @DPTR,A
015A 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 2133
015D 900000      R     MOV     DPTR,#main_INT_STATUS2
0160 E0                MOVX    A,@DPTR
0161 7BFF              MOV     R3,#0FFH
0163 30E006            JNB     ACC.0,?C0127
0166 7A00        R     MOV     R2,#HIGH ?SC_678
0168 7900        R     MOV     R1,#LOW ?SC_678
016A 8004              SJMP    ?C0201
016C         ?C0127:
                                           ; SOURCE LINE # 2134
016C 7A00        R     MOV     R2,#HIGH ?SC_693
016E 7900        R     MOV     R1,#LOW ?SC_693
0170         ?C0201:
0170 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 2135
0173         ?C0126:
                                           ; SOURCE LINE # 2136
0173 900000      R     MOV     DPTR,#main_INT_STATUS
0176 E0                MOVX    A,@DPTR
0177 30E010            JNB     ACC.0,?C0131
                                           ; SOURCE LINE # 2142
017A 900000      R     MOV     DPTR,#SW_INTR_cmd
017D E0                MOVX    A,@DPTR
017E B40109            CJNE    A,#01H,?C0131
                                           ; SOURCE LINE # 2143
0181 7BFF              MOV     R3,#0FFH
0183 7A00        R     MOV     R2,#HIGH ?SC_709
0185 7900        R     MOV     R1,#LOW ?SC_709
0187 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 2161
                                           ; SOURCE LINE # 2168
018A         ?C0131:
018A 22                RET     
018B         L?0223:
018B 7BFF              MOV     R3,#0FFH
018D E0                MOVX    A,@DPTR
018E 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
0191 F0                MOVX    @DPTR,A
0192 120000      E     LCALL   _ePrintf
0195 22                RET     
0196         L?0232:
0196 7BFF              MOV     R3,#0FFH
0198 E0                MOVX    A,@DPTR
0199 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
019C F0                MOVX    @DPTR,A
019D 120000      E     LCALL   _ePrintf
01A0 22                RET     
             ; FUNCTION InterruptPollingRoutine (END)

             ; FUNCTION InterruptHandlerRoutine (BEGIN)
                                           ; SOURCE LINE # 2178
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 78  

                                           ; SOURCE LINE # 2179
                                           ; SOURCE LINE # 2187
0000 900000      R     MOV     DPTR,#main_INT_STATUS
0003 E0                MOVX    A,@DPTR
0004 30E017            JNB     ACC.0,?C0132
                                           ; SOURCE LINE # 2188
0007 900000      R     MOV     DPTR,#SW_INTR_cmd
000A E0                MOVX    A,@DPTR
000B B40110            CJNE    A,#01H,?C0132
                                           ; SOURCE LINE # 2189
000E E4                CLR     A
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2191
0010 FF                MOV     R7,A
0011 120000      E     LCALL   _LedBackLight
                                           ; SOURCE LINE # 2192
0014 7F01              MOV     R7,#01H
0016 120000      E     LCALL   _ScalerSetMuteManual
                                           ; SOURCE LINE # 2195
0019 7F04              MOV     R7,#04H
001B 120000      R     LCALL   _TaskNoSignal_setCmd
                                           ; SOURCE LINE # 2196
                                           ; SOURCE LINE # 2197
                                           ; SOURCE LINE # 2203
                                           ; SOURCE LINE # 2205
001E         ?C0132:
                                           ; SOURCE LINE # 2207
001E 900000      R     MOV     DPTR,#main_INT_STATUS
0021 E0                MOVX    A,@DPTR
0022 20E203            JB      ACC.2,$ + 6H
0025 020000      R     LJMP    ?C0135
                                           ; SOURCE LINE # 2210
0028 900000      R     MOV     DPTR,#main_INT_STATUS2
002B E0                MOVX    A,@DPTR
002C 5405              ANL     A,#05H
002E 6404              XRL     A,#04H
0030 6003              JZ      $ + 5H
0032 020000      R     LJMP    ?C0135
0035 900000      R     MOV     DPTR,#Task_NoSignal_cmd
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 6007              JZ      ?C0137
003C 6402              XRL     A,#02H
003E 6003              JZ      $ + 5H
0040 020000      R     LJMP    ?C0135
0043         ?C0137:
                                           ; SOURCE LINE # 2211
0043 900000      E     MOV     DPTR,#InputMain
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 6004              JZ      ?C0139
004A 6401              XRL     A,#01H
004C 702E              JNZ     ?C0138
004E         ?C0139:
                                           ; SOURCE LINE # 2212
004E 120000      R     LCALL   L?0231
                                           ; SOURCE LINE # 2214
0051 120000      E     LCALL   DecoderReadDetectedMode
0054 900000      R     MOV     DPTR,#ret
0057 EF                MOV     A,R7
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2215
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 79  

0059 30E304            JNB     ACC.3,?C0140
005C 7F01              MOV     R7,#01H
005E 8002              SJMP    ?C0141
0060         ?C0140:
0060 7F00              MOV     R7,#00H
0062         ?C0141:
                                           ; SOURCE LINE # 2216
                                           ; SOURCE LINE # 2217
                                           ; SOURCE LINE # 2218
0062 120000      R     LCALL   L?0222
0065 703D              JNZ     ?C0202
0067 900000      R     MOV     DPTR,#ret
006A E0                MOVX    A,@DPTR
006B B40702            CJNE    A,#07H,?C0142
006E         ?C0143:
                                           ; SOURCE LINE # 2219
                                           ; SOURCE LINE # 2220
                                           ; SOURCE LINE # 2221
006E 8034              SJMP    ?C0202
0070         ?C0142:
                                           ; SOURCE LINE # 2222
0070 120000      R     LCALL   L?0226
0073 7BFF              MOV     R3,#0FFH
0075 6002              JZ      ?C0145
                                           ; SOURCE LINE # 2223
                                           ; SOURCE LINE # 2224
                                           ; SOURCE LINE # 2225
                                           ; SOURCE LINE # 2228
                                           ; SOURCE LINE # 2229
0077 803F              SJMP    ?C0203
0079         ?C0145:
                                           ; SOURCE LINE # 2231
                                           ; SOURCE LINE # 2232
0079 020000      R     LJMP    ?C0204
007C         ?C0138:
                                           ; SOURCE LINE # 2234
007C 900000      E     MOV     DPTR,#InputMain
007F E0                MOVX    A,@DPTR
0080 6402              XRL     A,#02H
0082 704B              JNZ     ?C0148
                                           ; SOURCE LINE # 2235
0084 120000      R     LCALL   L?0231
                                           ; SOURCE LINE # 2237
0087 120000      E     LCALL   VAdcGetInputStatus
008A 900000      R     MOV     DPTR,#ret
008D EF                MOV     A,R7
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2238
008F 30E304            JNB     ACC.3,?C0149
0092 7F00              MOV     R7,#00H
0094 8002              SJMP    ?C0150
0096         ?C0149:
0096 7F01              MOV     R7,#01H
0098         ?C0150:
                                           ; SOURCE LINE # 2239
                                           ; SOURCE LINE # 2240
                                           ; SOURCE LINE # 2241
0098 120000      R     LCALL   L?0222
009B 7007              JNZ     ?C0152
009D 900000      R     MOV     DPTR,#ret
00A0 E0                MOVX    A,@DPTR
00A1 B4070D            CJNE    A,#07H,?C0151
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 80  

00A4         ?C0152:
                                           ; SOURCE LINE # 2242
00A4         ?C0202:
00A4 7BFF              MOV     R3,#0FFH
00A6 7A00        R     MOV     R2,#HIGH ?SC_779
00A8 7900        R     MOV     R1,#LOW ?SC_779
00AA 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 2243
00AD 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 2244
00AF 8039              SJMP    ?C0206
00B1         ?C0151:
                                           ; SOURCE LINE # 2245
00B1 120000      R     LCALL   L?0226
00B4 7BFF              MOV     R3,#0FFH
00B6 600E              JZ      ?C0154
                                           ; SOURCE LINE # 2246
00B8         ?C0203:
00B8 7A00        R     MOV     R2,#HIGH ?SC_785
00BA 7900        R     MOV     R1,#LOW ?SC_785
00BC 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 2247
                                           ; SOURCE LINE # 2248
00BF 120000      R     LCALL   L?0228
                                           ; SOURCE LINE # 2251
00C2 7F04              MOV     R7,#04H
00C4         ?C0205:
                                           ; SOURCE LINE # 2252
00C4 8024              SJMP    ?C0206
00C6         ?C0154:
                                           ; SOURCE LINE # 2254
00C6         ?C0204:
00C6 7A00        R     MOV     R2,#HIGH ?SC_791
00C8 7900        R     MOV     R1,#LOW ?SC_791
00CA 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 2255
00CD 801E              SJMP    ?C0135
00CF         ?C0148:
                                           ; SOURCE LINE # 2258
00CF 900000      E     MOV     DPTR,#InputMain
00D2 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 2264
                                           ; SOURCE LINE # 2265
                                           ; SOURCE LINE # 2267
                                           ; SOURCE LINE # 2268
                                           ; SOURCE LINE # 2271
                                           ; SOURCE LINE # 2272
                                           ; SOURCE LINE # 2274
                                           ; SOURCE LINE # 2280
                                           ; SOURCE LINE # 2281
00D3 120000      R     LCALL   L?0228
                                           ; SOURCE LINE # 2283
00D6 7BFF              MOV     R3,#0FFH
00D8 7A00        R     MOV     R2,#HIGH ?SC_737
00DA 7900        R     MOV     R1,#LOW ?SC_737
00DC 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 2284
00DF 7BFF              MOV     R3,#0FFH
00E1 7A00        R     MOV     R2,#HIGH ?SC_785
00E3 7900        R     MOV     R1,#LOW ?SC_785
00E5 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 2287
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 81  

00E8 7F04              MOV     R7,#04H
00EA         ?C0206:
00EA 120000      R     LCALL   _TaskNoSignal_setCmd
                                           ; SOURCE LINE # 2288
                                           ; SOURCE LINE # 2289
                                           ; SOURCE LINE # 2290
00ED         ?C0135:
                                           ; SOURCE LINE # 2293
00ED 900000      R     MOV     DPTR,#main_VH_Loss_Changed
00F0 E0                MOVX    A,@DPTR
00F1 7002              JNZ     ?C0194
00F3 A3                INC     DPTR
00F4 E0                MOVX    A,@DPTR
00F5         ?C0194:
00F5 7003              JNZ     $ + 5H
00F7 020000      R     LJMP    ?C0173
                                           ; SOURCE LINE # 2295
00FA E4                CLR     A
00FB 900000      R     MOV     DPTR,#main_VH_Loss_Changed
00FE F0                MOVX    @DPTR,A
00FF A3                INC     DPTR
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2296
0101 900000      E     MOV     DPTR,#InputMain
0104 E0                MOVX    A,@DPTR
0105 6403              XRL     A,#03H
0107 6016              JZ      ?C0161
                                           ; SOURCE LINE # 2298
0109         ?C0160:
                                           ; SOURCE LINE # 2299
                                           ; SOURCE LINE # 2304
0109 120000      R     LCALL   L?0212
010C E0                MOVX    A,@DPTR
010D FF                MOV     R7,A
;---- Variable 'r004' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2306
010E 900000      R     MOV     DPTR,#main_INT_STATUS2
0111 E0                MOVX    A,@DPTR
0112 6F                XRL     A,R7
0113 30E009            JNB     ACC.0,?C0161
                                           ; SOURCE LINE # 2307
0116 7BFF              MOV     R3,#0FFH
0118 7A00        R     MOV     R2,#HIGH ?SC_797
011A 7900        R     MOV     R1,#LOW ?SC_797
011C 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 2309
                                           ; SOURCE LINE # 2310
011F         ?C0161:
                                           ; SOURCE LINE # 2312
011F 900000      R     MOV     DPTR,#main_INT_STATUS2
0122 E0                MOVX    A,@DPTR
0123 30E04F            JNB     ACC.0,?C0163
                                           ; SOURCE LINE # 2314
0126 900000      R     MOV     DPTR,#SW_Video_Status
0129 E0                MOVX    A,@DPTR
012A 6045              JZ      ?C0164
                                           ; SOURCE LINE # 2315
012C 7BFF              MOV     R3,#0FFH
012E 7A00        R     MOV     R2,#HIGH ?SC_828
0130 7900        R     MOV     R1,#LOW ?SC_828
0132 120000      E     LCALL   _dPuts
                                           ; SOURCE LINE # 2317
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 82  

0135 E4                CLR     A
0136 900000      R     MOV     DPTR,#SW_Video_Status
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2320
013A FF                MOV     R7,A
013B 120000      R     LCALL   _Interrupt_enableSyncDetect
                                           ; SOURCE LINE # 2322
013E 900000      E     MOV     DPTR,#InputMain
0141 E0                MOVX    A,@DPTR
0142 B40206            CJNE    A,#02H,?C0165
                                           ; SOURCE LINE # 2324
0145 E4                CLR     A
0146 FD                MOV     R5,A
0147 FC                MOV     R4,A
0148 120000      E     LCALL   _VAdcSetFilterBandwidth
                                           ; SOURCE LINE # 2325
014B         ?C0165:
                                           ; SOURCE LINE # 2328
014B 120000      E     LCALL   ScalerCheckPanelFreerunValue
                                           ; SOURCE LINE # 2329
014E 7F01              MOV     R7,#01H
0150 120000      E     LCALL   _ScalerSetFreerunManual
                                           ; SOURCE LINE # 2330
0153 120000      E     LCALL   _ScalerSetMuteManual
                                           ; SOURCE LINE # 2333
0156 120000      E     LCALL   MenuGetLevel
0159 EF                MOV     A,R7
015A 700E              JNZ     ?C0166
                                           ; SOURCE LINE # 2334
015C 7F02              MOV     R7,#02H
015E 120000      E     LCALL   _FOsdIndexMsgPrint
                                           ; SOURCE LINE # 2336
0161 120000      E     LCALL   getNoSignalLogoStatus
0164 EF                MOV     A,R7
0165 7003              JNZ     ?C0166
                                           ; SOURCE LINE # 2337
0167 120000      E     LCALL   InitLogo1
                                           ; SOURCE LINE # 2339
016A         ?C0166:
                                           ; SOURCE LINE # 2341
016A E4                CLR     A
016B F500        E     MOV     tic_task,A
016D F500        E     MOV     tic_task+01H,A
                                           ; SOURCE LINE # 2342
                                           ; SOURCE LINE # 2343
016F 8000              SJMP    ?C0207
0171         ?C0164:
                                           ; SOURCE LINE # 2344
                                           ; SOURCE LINE # 2346
0171         ?C0207:
0171 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2347
                                           ; SOURCE LINE # 2348
0173 8034              SJMP    ?C0208
0175         ?C0163:
                                           ; SOURCE LINE # 2349
                                           ; SOURCE LINE # 2351
0175 900000      R     MOV     DPTR,#SW_Video_Status
0178 E0                MOVX    A,@DPTR
0179 700F              JNZ     ?C0170
                                           ; SOURCE LINE # 2352
017B 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 83  

017D 7A00        R     MOV     R2,#HIGH ?SC_847
017F 7900        R     MOV     R1,#LOW ?SC_847
0181 120000      E     LCALL   _dPuts
                                           ; SOURCE LINE # 2353
0184 900000      R     MOV     DPTR,#SW_Video_Status
0187 7401              MOV     A,#01H
0189 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2358
018A         ?C0170:
                                           ; SOURCE LINE # 2360
018A 900000      R     MOV     DPTR,#Task_NoSignal_cmd
018D E0                MOVX    A,@DPTR
018E 7011              JNZ     ?C0171
                                           ; SOURCE LINE # 2361
0190 7BFF              MOV     R3,#0FFH
0192 7A00        R     MOV     R2,#HIGH ?SC_867
0194 7900        R     MOV     R1,#LOW ?SC_867
0196 120000      E     LCALL   _dPrintf
                                           ; SOURCE LINE # 2362
0199 750003      E     MOV     tic_task,#03H
019C 7500E8      E     MOV     tic_task+01H,#0E8H
                                           ; SOURCE LINE # 2363
019F 8006              SJMP    ?C0172
01A1         ?C0171:
                                           ; SOURCE LINE # 2364
                                           ; SOURCE LINE # 2365
01A1 750001      E     MOV     tic_task,#01H
01A4 7500F4      E     MOV     tic_task+01H,#0F4H
                                           ; SOURCE LINE # 2366
01A7         ?C0172:
                                           ; SOURCE LINE # 2368
01A7 7F03              MOV     R7,#03H
01A9         ?C0208:
01A9 120000      R     LCALL   _TaskNoSignal_setCmd
                                           ; SOURCE LINE # 2369
                                           ; SOURCE LINE # 2370
                                           ; SOURCE LINE # 2372
01AC         ?C0173:
01AC 22                RET     
01AD         L?0222:
01AD 900000      R     MOV     DPTR,#not_detected
01B0 EF                MOV     A,R7
01B1 F0                MOVX    @DPTR,A
01B2 900000      R     MOV     DPTR,#ret
01B5 E0                MOVX    A,@DPTR
01B6 5407              ANL     A,#07H
01B8 FF                MOV     R7,A
01B9 F0                MOVX    @DPTR,A
01BA 7BFF              MOV     R3,#0FFH
01BC 7A00        R     MOV     R2,#HIGH ?SC_756
01BE 7900        R     MOV     R1,#LOW ?SC_756
01C0 900000      E     MOV     DPTR,#InputSubMode
01C3 E0                MOVX    A,@DPTR
01C4 900000      E     MOV     DPTR,#?_dPrintf?BYTE+03H
01C7 F0                MOVX    @DPTR,A
01C8 A3                INC     DPTR
01C9 EF                MOV     A,R7
01CA F0                MOVX    @DPTR,A
01CB 120000      E     LCALL   _dPrintf
01CE 900000      R     MOV     DPTR,#not_detected
01D1 E0                MOVX    A,@DPTR
01D2 22                RET     
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 84  

01D3         L?0228:
01D3 E4                CLR     A
01D4 FF                MOV     R7,A
01D5 120000      E     LCALL   _LedBackLight
01D8 7F01              MOV     R7,#01H
01DA 120000      E     LCALL   _ScalerSetMuteManual
01DD 22                RET     
01DE         L?0231:
01DE 7BFF              MOV     R3,#0FFH
01E0 7A00        R     MOV     R2,#HIGH ?SC_737
01E2 7900        R     MOV     R1,#LOW ?SC_737
01E4 120000      E     LCALL   _dPrintf
01E7 22                RET     
             ; FUNCTION InterruptHandlerRoutine (END)

             ; FUNCTION main_loop (BEGIN)
                                           ; SOURCE LINE # 2414
                                           ; SOURCE LINE # 2415
0000         ?C0174:
                                           ; SOURCE LINE # 2426
                                           ; SOURCE LINE # 2428
0000 300010      E     JNB     access,?C0176
                                           ; SOURCE LINE # 2437
0003 E500        E     MOV     A,INT_STATUS
0005 7006              JNZ     ?C0178
0007 E500        E     MOV     A,VH_Loss_Changed+01H
0009 4500        E     ORL     A,VH_Loss_Changed
000B 6006              JZ      ?C0176
000D         ?C0178:
                                           ; SOURCE LINE # 2438
000D 120000      R     LCALL   InterruptPollingRoutine
                                           ; SOURCE LINE # 2439
0010 120000      R     LCALL   InterruptHandlerRoutine
                                           ; SOURCE LINE # 2440
                                           ; SOURCE LINE # 2441
0013         ?C0176:
                                           ; SOURCE LINE # 2499
0013 120000      E     LCALL   Monitor
                                           ; SOURCE LINE # 2535
0016 3000E7      E     JNB     access,?C0174
0019         ?C0179:
                                           ; SOURCE LINE # 2539
0019 120000      E     LCALL   CheckKeyIn
                                           ; SOURCE LINE # 2542
001C 120000      E     LCALL   CheckRemo
001F 900000      R     MOV     DPTR,#ret
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2543
0024 BF0417            CJNE    R7,#04H,?C0180
0027 900000      R     MOV     DPTR,#SysNoInitMode
002A E0                MOVX    A,@DPTR
002B 7011              JNZ     ?C0180
                                           ; SOURCE LINE # 2544
002D 7BFF              MOV     R3,#0FFH
002F 7A00        R     MOV     R2,#HIGH ?SC_884
0031 7900        R     MOV     R1,#LOW ?SC_884
0033 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 2545
0036 900000      R     MOV     DPTR,#ret
0039 7401              MOV     A,#01H
003B F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 85  

                                           ; SOURCE LINE # 2546
003C 8041              SJMP    ?C0175
                                           ; SOURCE LINE # 2547
003E         ?C0180:
                                           ; SOURCE LINE # 2557
003E 309517            JNB     P1_5,?C0181
0041 900000      R     MOV     DPTR,#SysNoInitMode
0044 E0                MOVX    A,@DPTR
0045 7011              JNZ     ?C0181
                                           ; SOURCE LINE # 2558
0047 7BFF              MOV     R3,#0FFH
0049 7A00        R     MOV     R2,#HIGH ?SC_909
004B 7900        R     MOV     R1,#LOW ?SC_909
004D 120000      E     LCALL   _ePrintf
                                           ; SOURCE LINE # 2559
0050 900000      R     MOV     DPTR,#ret
0053 7402              MOV     A,#02H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2560
0056 8027              SJMP    ?C0175
                                           ; SOURCE LINE # 2561
0058         ?C0181:
                                           ; SOURCE LINE # 2575
0058 300003      E     JNB     TraceAuto,?C0182
005B 120000      E     LCALL   TraceTouch
005E         ?C0182:
                                           ; SOURCE LINE # 2576
005E 120000      E     LCALL   GetTouch2
0061 900000      R     MOV     DPTR,#ret
0064 EF                MOV     A,R7
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2577
0066 6003              JZ      ?C0183
                                           ; SOURCE LINE # 2581
0068 120000      E     LCALL   ActionTouch
                                           ; SOURCE LINE # 2582
006B         ?C0183:
                                           ; SOURCE LINE # 2586
006B 120000      R     LCALL   CheckAndClearOSD
                                           ; SOURCE LINE # 2618
006E 900000      R     MOV     DPTR,#Task_Grid_on
0071 E0                MOVX    A,@DPTR
0072 6003              JZ      ?C0184
                                           ; SOURCE LINE # 2619
0074 120000      E     LCALL   MovingGridTask
0077         ?C0184:
                                           ; SOURCE LINE # 2622
0077 120000      R     LCALL   NoSignalTask
                                           ; SOURCE LINE # 2623
007A 120000      R     LCALL   NoSignalTaskOnWaitMode
                                           ; SOURCE LINE # 2624
007D 8081              SJMP    ?C0174
007F         ?C0175:
                                           ; SOURCE LINE # 2626
007F 900000      R     MOV     DPTR,#ret
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
                                           ; SOURCE LINE # 2627
0084         ?C0185:
0084 22                RET     
             ; FUNCTION main_loop (END)

C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 86  

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 2654
                                           ; SOURCE LINE # 2655
                                           ; SOURCE LINE # 2662
0000 120000      R     LCALL   InitVariables
                                           ; SOURCE LINE # 2663
0003 120000      E     LCALL   InitCPU
                                           ; SOURCE LINE # 2667
0006 7F01              MOV     R7,#01H
0008 120000      R     LCALL   _InitCore
                                           ; SOURCE LINE # 2675
000B 120000      R     LCALL   PrintModelVersionInfo
                                           ; SOURCE LINE # 2678
000E 200018      E     JB      access,?C0186
                                           ; SOURCE LINE # 2679
0011 7BFF              MOV     R3,#0FFH
0013 7A00        R     MOV     R2,#HIGH ?SC_945
0015 7900        R     MOV     R1,#LOW ?SC_945
0017 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 2680
001A 900000      E     MOV     DPTR,#DebugLevel
001D 7403              MOV     A,#03H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2682
0020 7BFF              MOV     R3,#0FFH
0022 7A00        R     MOV     R2,#HIGH ?SC_965
0024 7900        R     MOV     R1,#LOW ?SC_965
0026 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 2683
0029         ?C0186:
                                           ; SOURCE LINE # 2685
0029 7F8A              MOV     R7,#08AH
002B 120000      E     LCALL   _SetMonAddress
                                           ; SOURCE LINE # 2686
002E 120000      E     LCALL   Prompt
                                           ; SOURCE LINE # 2735
0031 7F01              MOV     R7,#01H
0033 120000      R     LCALL   _InitSystem
                                           ; SOURCE LINE # 2738
0036 7BFF              MOV     R3,#0FFH
0038 7A00        R     MOV     R2,#HIGH ?SC_1003
003A 7900        R     MOV     R1,#LOW ?SC_1003
003C 120000      E     LCALL   _PrintSystemClockMsg
                                           ; SOURCE LINE # 2740
003F E4                CLR     A
0040 FF                MOV     R7,A
0041 120000      E     LCALL   _DumpClock
                                           ; SOURCE LINE # 2744
0044 120000      E     LCALL   Prompt
                                           ; SOURCE LINE # 2769
0047 E500        E     MOV     A,regTW88+01H
0049 2484              ADD     A,#084H
004B 120000      R     LCALL   L?0213
004E 740C              MOV     A,#0CH
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2770
0051 E500        E     MOV     A,regTW88+01H
0053 248C              ADD     A,#08CH
0055 120000      R     LCALL   L?0213
0058 740C              MOV     A,#0CH
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2771
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 87  

005B E500        E     MOV     A,regTW88+01H
005D 24E3              ADD     A,#0E3H
005F 120000      R     LCALL   L?0213
0062 741C              MOV     A,#01CH
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2772
0065 E500        E     MOV     A,regTW88+01H
0067 24E0              ADD     A,#0E0H
0069 120000      R     LCALL   L?0213
006C 7461              MOV     A,#061H
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2773
006F E500        E     MOV     A,regTW88+01H
0071 24E8              ADD     A,#0E8H
0073 120000      R     LCALL   L?0213
0076 7461              MOV     A,#061H
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2774
0079 E500        E     MOV     A,regTW88+01H
007B 24EB              ADD     A,#0EBH
007D 120000      R     LCALL   L?0213
0080 7429              MOV     A,#029H
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2779
0083 8015              SJMP    ?C0209
0085         ?C0187:
                                           ; SOURCE LINE # 2780
                                           ; SOURCE LINE # 2781
                                           ; SOURCE LINE # 2785
0085 900000      R     MOV     DPTR,#SysNoInitMode
0088 E0                MOVX    A,@DPTR
0089 7016              JNZ     ?C0189
008B 900000      R     MOV     DPTR,#request_power_save_mode
008E E0                MOVX    A,@DPTR
008F 6010              JZ      ?C0189
                                           ; SOURCE LINE # 2787
0091 120000      R     LCALL   SystemPowerSave
                                           ; SOURCE LINE # 2788
0094 120000      R     LCALL   WaitPowerOn
                                           ; SOURCE LINE # 2789
0097 120000      R     LCALL   SystemPowerResume
                                           ; SOURCE LINE # 2815
009A         ?C0209:
009A E4                CLR     A
009B 900000      R     MOV     DPTR,#request_power_save_mode
009E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2816
009F 80E4              SJMP    ?C0187
00A1         ?C0189:
                                           ; SOURCE LINE # 2846
                                           ; SOURCE LINE # 2850
00A1 120000      R     LCALL   main_loop
00A4 900000      R     MOV     DPTR,#ret
00A7 EF                MOV     A,R7
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2853
00A9 7BFF              MOV     R3,#0FFH
00AB 7A00        R     MOV     R2,#HIGH ?SC_1014
00AD 7900        R     MOV     R1,#LOW ?SC_1014
00AF 900000      E     MOV     DPTR,#?_ePrintf?BYTE+03H
00B2 F0                MOVX    @DPTR,A
00B3 120000      E     LCALL   _ePrintf
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 88  

                                           ; SOURCE LINE # 2868
00B6 900000      R     MOV     DPTR,#ret
00B9 E0                MOVX    A,@DPTR
00BA FF                MOV     R7,A
00BB 6401              XRL     A,#01H
00BD 6004              JZ      ?C0192
00BF EF                MOV     A,R7
00C0 B402C2            CJNE    A,#02H,?C0187
00C3         ?C0192:
                                           ; SOURCE LINE # 2870
00C3 900000      R     MOV     DPTR,#request_power_save_mode
00C6 7401              MOV     A,#01H
00C8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2873
                                           ; SOURCE LINE # 2874
00C9 80BA              SJMP    ?C0187
             ; FUNCTION main (END)

C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 89  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


PrintModelVersionInfo. . . . . . . . .  STATIC   CODE   PROC     0000H  -----
getNoSignalLogoStatus. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
InitCPU. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
InterruptHandlerRoutine. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  r004 . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  not_detected . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
_SaveDebugLevelEE. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
UpdateOsdTimerClock. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Buf_r003 . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
RemoveLogo . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MeasSetErrTolerance . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_LedBackLight. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Prompt . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_DumpClock . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SPI_SetReadModeByRegister . . . . . .  EXTERN   CODE   PROC     -----  -----
_PrintfInput . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RemoDataReady. . . . . . . . . . . . .  EXTERN   IDATA  U_CHAR   -----  1
_ScalerSetMuteManual . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TraceAuto. . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
INT_STATUS2_ACC. . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
st_animation . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  53
  active . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  current. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  speed. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  vcnt . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  srcx . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000DH  20
  srcy . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0021H  20
SystemPowerResume. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
ScalerCheckPanelFreerunValue . . . . .  EXTERN   CODE   PROC     -----  -----
SPI_QUADInit . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SpiFlashVendor . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
MovingGridTask . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
menu_fitem_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  winno. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  osdram . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  zoom_h . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  zoom_v . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  BPP1Color. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  BPP3_palette . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  BPP3_color . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
GetDebugLevelEE. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dPuts . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Task_Grid_cmd. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0001H  1
menu_fitem_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  15
  winno. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 90  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  osdram . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  zoom_h . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  zoom_v . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  BPP1Color. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  BPP3_palette . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  BPP3_color . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
_ePuts . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
NoSignalTaskOnWaitMode . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_VAdcSetFilterBandwidth. . . . . . . .  EXTERN   CODE   PROC     -----  -----
Buf_106. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0002H  1
P2_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
P1_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
SFR_ET1. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
GetAspectModeEE. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P2_7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
InterruptPollingRoutine. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  temp_INT_STATUS_ACC. . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  temp_INT_STATUS2_ACC . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  r003 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  tmp. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
menu_page_info_s . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  focus. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  select . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  item_start . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  item_total . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  items. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  texts. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0008H  3
CheckAndSetUnknown . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SFR_EX0. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
menu_page_info_t . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  11
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  focus. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  select . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  item_start . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  item_total . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  items. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  texts. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0008H  3
InputMain. . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
EE_FindCurrInfo. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OsdTimerClock. . . . . . . . . . . . .  EXTERN   DATA   U_LONG   -----  4
_FP_PWC_OnOff. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
InitTouch. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Interrupt_enableSyncDetect. . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fOn. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SysNoInitMode. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0003H  1
VAdcGetInputStatus . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_InitSystem. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fPowerUpBoot . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  ee_mode. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 91  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  FirstInitDone. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
menu_sitem_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  23
  osd_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  p. . . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  align. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  image. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
  image1 . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
  image_type . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  lut. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  up . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  down . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0016H  1
StartVideoInput. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  InputMainEE. . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
Buf_0B0. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0004H  1
menu_sitem_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  23
  osd_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  p. . . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  align. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  image. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
  image1 . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
  image_type . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  lut. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  up . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  down . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0016H  1
RLE2_HEADER. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  id . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  op_bmpbits . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  rledata_cnt. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  LUT_format . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  LUT_colors . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
_InitCore. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fPowerUpBoot . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Task_NoSignal_count. . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0005H  1
_FOsdIndexMsgPrint . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
InitializeEE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetMonAddress . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_delay1ms. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Buf_1E1. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0006H  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  request_power_save_mode. . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
DCDC_StartUP . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 92  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


Buf_4E1. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0007H  1
Buf_1E6. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0008H  1
SystemPowerSave. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Task_NoSignal_cmd. . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0009H  1
fosd_menu_item_s . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  12
  ram. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  zoom . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  ch_space_low . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  color. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  win. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  alpha_value. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  alpha_color_index. . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  reserved9. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  reserved10 . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  reserved11 . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
_BackLightSetRate. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CheckEEPROM. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MenuEnd. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VH_Loss_Changed. . . . . . . . . . . .  EXTERN   DATA   U_INT    -----  2
_SetAspectHW . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_PrintSystemClockMsg . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
INT_STATUS . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
Buf_1CB. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   000AH  1
MenuGetLevel . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
InitVariables. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
NoSignalTask . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  r004 . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_PCMODEDATA. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  han. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  van. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  vfreq. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  htotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  vtotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  hsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  vsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  offseth. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0010H  2
  offsetv. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0012H  2
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  dummy2 . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  dummy3 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0018H  1
CheckAndSetPC. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CheckAndSetInput . . . . . . . . . . .  PUBLIC   XDATA  PTR      000BH  3
OsdTime. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
main_VH_Loss_Changed . . . . . . . . .  PUBLIC   XDATA  U_INT    000EH  2
main_INT_STATUS. . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0010H  1
Task_Grid_on . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0011H  1
_RemoveLogoWithWait. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 93  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_SetTouchStatus. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CheckAndSetDecoderScaler . . . . . . .  EXTERN   CODE   PROC     -----  -----
menu_image_header_s. . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  lut_loc. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  image_loc. . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  bpp. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  lut_size . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
menu_image_header_t. . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  17
  lut_loc. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  image_loc. . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  bpp. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  lut_size . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
GetInputEE . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TaskGetGrid. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
main_loop. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
CheckKeyIn . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
FOsdSetDeValue . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
InputSubMode . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_SSPLL_PowerUp . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CheckAndClearOSD . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_FOsdOnOff . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LinkCheckAndSetInput . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_ScalerSetFreerunManual. . . . . . . .  EXTERN   CODE   PROC     -----  -----
_VInput_enableOutput . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_TaskSetGrid . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  onoff. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_RLE_HEADER. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  id . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  cp . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bmp. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000CH  3
_FOsdWinToggleEnable . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
FP_GpioDefault . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SPIIMAGE . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  top. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  bottom . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
SFR_EA . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
SFR_E2IE . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
_FP_BiasOnOff. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetLastTouchStatus. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 94  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_McuSpiClkSelect . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SW_key . . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
TaskGetGridCmd . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
EE_Format. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
tic_task . . . . . . . . . . . . . . .  EXTERN   DATA   U_INT    -----  2
FontOsdInit. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SLIDEIMAGE . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
GetTouch2. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
InitLogo1. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OsdGetTime . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_dPrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
INT_STATUS_ACC . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
_ePrintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
regTW88. . . . . . . . . . . . . . . .  EXTERN   DATA   PTR      -----  2
CheckAndSetBT656 . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ChangeInput . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CheckAndSetComponent . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SW_INTR_cmd. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0012H  1
MY_SLIDEIMAGE. . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  10
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  lut_size . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0006H  4
_TaskSetGridCmd. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  cmd. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_WriteI2CByte. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DebugLevel . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
INT_STATUS2. . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
WaitPowerOn. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
FONT_SPI_INFO_s. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
_OsdSetTime. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
image_info_s . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
FONT_SPI_INFO_t. . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  25
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 95  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bpp2 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  bpp3 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bpp4 . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  palette_bpp2 . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
  palette_bpp3 . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
  palette_bpp4 . . . . . . . . . . . .  MEMBER   -----  PTR      0016H  3
ActionTouch. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_EE_Read . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
image_info_t . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  lut_type . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  dx . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  dy . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
_FOsdWinEnable . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DecoderReadDetectedMode. . . . . . . .  EXTERN   CODE   PROC     -----  -----
Monitor. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
SW_Video_Status. . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0013H  1
main_INT_STATUS2 . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0014H  1
LedPowerUp . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
main_INT_STATUS3 . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0015H  1
TaskNoSignal_getCmd. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
InitWithNTSC . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_OsdSetTransRate . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
InitBT656_Encoder. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
access . . . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
CheckRemo. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Interrupt_enableVideoDetect . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fOn. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
MY_RLE_INFO. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  5
  rle. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  w. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  h. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
TraceTouch . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
image_item_info_s. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  9
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  info . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  alpha. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
_TaskNoSignal_setCmd . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  cmd. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
image_item_info_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  loc. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  info . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  alpha. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
ReadCalibDataFromEE. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3182    ----
   CONSTANT SIZE    =   1035    ----
C51 COMPILER V9.00   MAIN                                                                  06/05/2014 15:34:47 PAGE 96  

   XDATA SIZE       =     22      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
