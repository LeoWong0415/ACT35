C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE UTIL
OBJECT MODULE PLACED IN .\Output\Util.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE Util.c LARGE OPTIMIZE(9,SPEED) REGFILE(.\Output\TW8835_REV31.ORC) BROWSE MO
                    -DDP2 DEFINE(EVB_30,EVB_31,nullFn=//) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\List\Util.lst) OBJECT(.\Output\Util.obj)

line level    source

   1          /**
   2           * @file
   3           * util.c 
   4           * @author Harry Han
   5           * @author YoungHwan Bae
   6           * @author Brian Kang
   7           * @version 1.0
   8           * @section LICENSE
   9           *      Copyright (C) 2011~2012 Intersil Corporation
  10           * @section DESCRIPTION
  11           *      utility library
  12           *
  13          */
  14          #include "Config.h"
  15          #include "reg.h"
  16          #include "typedefs.h"
  17          #include "TW8835.h"
  18          #include <stdarg.h>
  19          #include <intrins.h>
  20          
  21          #include "Util.h"
  22          #include "printf.h"
  23          #include "Global.h"
  24          
  25          //=============================================================================
  26          //              Convert ASCII to Binery                                             
  27          //              Convert ASCII to ASCII HEX
  28          //              Convert ASCII to Integer                                    
  29          //=============================================================================
  30          
  31          //-----------------------------------------------------------------------------
  32          /**
  33          * return binary value of 'asc' or null for error
  34          */
  35          BYTE Asc1Bin(BYTE asc)
  36          {
  37   1              if(asc>='0' && asc <='9') return (asc - '0');
  38   1              if(asc>='a' && asc <='f') return (asc - 'a' + 0x0a);
  39   1              if(asc>='A' && asc <='F') return (asc - 'A' + 0x0a);
  40   1              return 0;
  41   1      }
  42          //-----------------------------------------------------------------------------
  43          /**
  44          * Convert *str ASCII to HEX (8 digits max)
  45          */
  46          DWORD a2h(BYTE *str)
  47          {
  48   1              DWORD num=0;
  49   1              BYTE i;
  50   1      
  51   1              for(i=0; i<8; i++, str++) {
  52   2                      if( *str=='\0' || *str==' ' ) break;
  53   2                      num = num*0x10 + Asc1Bin(*str);
  54   2              }
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 2   

  55   1              return num;
  56   1      }
  57          //-----------------------------------------------------------------------------
  58          /**
  59          * Convert *str ASCII to integer(DOUBLE size)
  60          */
  61          DWORD a2i(BYTE *str)
  62          {
  63   1              DWORD num=0;
  64   1              BYTE i;
  65   1      
  66   1              for(i=0; ; i++, str++) {
  67   2                      if( *str=='\0' || *str==' ' ) break;
  68   2                      num = num*10 + *str - '0';
  69   2              }
  70   1              return num;
  71   1      }
  72          
  73          //=============================================================================
  74          //              Convert to Upper Case
  75          //              String Compare
  76          //              Integer to Ascii
  77          //              Return string length
  78          //              Copy String
  79          //              Cat String
  80          //=============================================================================
  81          
  82          //-----------------------------------------------------------------------------
  83          /** 
  84          * return uppercase ASCII character of 'ch'
  85          */
  86          BYTE toupper(BYTE ch)
  87          {
  88   1              if( ch>='a' && ch<='z' )
  89   1                      return (ch - 'a' + 'A');
  90   1      
  91   1              return ch;
  92   1      }
  93          
  94          //-----------------------------------------------------------------------------
  95          /**
  96          * Compare *ptr1 to *ptr2. Return 1 for no compare, return 0 for compare 
  97          *
  98          * *ptr1 and *ptr2 modified
  99          * Case insensitve
 100          * Length of *ptr1 and *ptr2 must be equal to compare
 101          */
 102          int stricmp(BYTE *ptr1, BYTE *ptr2)
 103          {
 104   1      #if 0
                      int     i, ret;
                      
                      for(i=0; *ptr1; i++) {
                              ret = toupper(*ptr1++) - toupper(*ptr2++);
                              if( ret ) return ret;
                      }
                      ret = toupper(*ptr1) - toupper(*ptr2);
                      if( ret ) return ret;
              
                      return 0;
              #else
 116   1              while (1) {
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 3   

 117   2                      if( toupper(*ptr1) != toupper(*ptr2) ) return 1;
 118   2                      if (*ptr1 == 0) return 0;
 119   2                      ptr1++;
 120   2                      ptr2++;
 121   2              }
 122   1      #endif
 123   1      }
 124          
 125          
 126          //-----------------------------------------------------------------------------
 127          /**
 128          * itoa
 129          *
 130          * max 10000
 131          * @param n              input number
 132          * @ buff *buff  output buffer. 
 133          *       I do not check buff size. buff[] have to be big enough. 
 134          * @return
 135          *       - 0 something wrong
 136          *       - n length of ascii character
 137          */
 138          BYTE TWitoa(short n, BYTE *buff)
 139          {
 140   1              BYTE next,start;
 141   1              WORD k, q;
 142   1      
 143   1              next = 0;
 144   1              start = 0;
 145   1      
 146   1              if(n < 0) {
 147   2                      buff[next++] = '-';
 148   2                      n = 0 - n;
 149   2                      start++;
 150   2              }
 151   1              if(n == 0)
 152   1                      buff[next++] = '0';
 153   1              else 
 154   1              {
 155   2                      k = 10000;               //max
 156   2                      while( k > 0) 
 157   2                      {
 158   3                              if(n==0)        q = 0;
 159   3                              else            q = n / k;
 160   3                              if((next!=start) || (q > 0)) { 
 161   4                                      buff[next++] = '0' + q;
 162   4                              }
 163   3                              n -= (q*k);
 164   3                              k = k / 10;
 165   3                      } 
 166   2              }
 167   1              buff[next] = 0x00;      //make string.            
 168   1              return next;
 169   1      }
 170          
 171          //-----------------------------------------------------------------------------
 172          /**
 173          * convert hex byte to ASCII string
 174          */
 175          BYTE TWhtos(BYTE n, BYTE *buff)
 176          {
 177   1              BYTE nibble;
 178   1              nibble = n >> 4;
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 4   

 179   1              if(nibble <= 9) buff[0] = '0'+nibble;
 180   1              else            buff[0] = 'A'+nibble - 0x0A;
 181   1              nibble = n & 0x0F;
 182   1              if(nibble <= 9) buff[1] = '0'+nibble;
 183   1              else            buff[1] = 'A'+nibble - 0x0A;
 184   1              buff[2] = 0;
 185   1              if(n >> 4)
 186   1                      return 1;
 187   1              return 0;               
 188   1      }
 189          
 190          #ifdef SUPPORT_FOSD_MENU
              //-----------------------------------------------------------------------------
              /**
              * convert uchar to string ASCII string. use radix
              */
              BYTE TWutoa(WORD value, BYTE *str, BYTE radix)
              {
                      BYTE cnt, *str1;
                      WORD i, div;
              
                      #ifdef DEBUG_OSD
              //      dPrintf("\r\n++(utoa):0x%x__", value);
                      #endif
              
                      str1 = str;
                      cnt=0;
                      if( radix==10) {
                              for(div = 10000; div>=10; div/=10) {
                                      i = value/div;
                                      if( i ) {
                                              *str++ = i+'0';
                                              cnt++;
                                      }
                                      else if( cnt )          // 100, 200, 20,,,,
                                              *str++ = '0';
              
                                      value%=div;
                              }
                              *str++ = value+'0';
                              *str = 0;
                      }
                      else if( radix==16) {
                              for(div = 0x1000; div>=0x10; div/=0x10) {
                                      i = value/div;
                                      if( i ) {
                                              if( i>=0xa ) 
                                                      *str++ = i-0xa+'A';
                                              else
                                                      *str++ = i+'0';
                                              value%=div;
                                      }
                              }
                              if( value>=0xa ) 
                                      *str++ = value-0xa+'A';
                              else
                                      *str++ = value+'0';
                              *str = 0;
                      }
                      return 1;
              }
              #endif
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 5   

 241          
 242          #if 0
              //-----------------------------------------------------------------------------
              /**
              * strlen
              */
              BYTE strlen( BYTE *str )
              {
                      BYTE i=0;
              
                      while( *str++ ) i++;
                      return i;
              }
              #endif
 255          #if 0
              //-----------------------------------------------------------------------------
              /**
              * return legth of *s string
              */
              BYTE TWstrlen(BYTE *s)
              {
                      BYTE *p = s;
                      while(*p) p++;
                      return p - s;
              }
              #endif
 267          //-----------------------------------------------------------------------------
 268          /**
 269          * return legth of *s string. check an escape code.
 270          *
 271          * support an ESCAPE char( >= 0xF0)
 272          */
 273          BYTE TWstrlen(BYTE *s)
 274          {
 275   1              BYTE *p = s;
 276   1              BYTE escape=0;
 277   1              while(1) {
 278   2                      if(*p >= 0xF0) {  //??Escape
 279   3                              escape = 1;
 280   3                              if(*p==0xFF/*FONT_ROM*/)
 281   3                                      escape = 0;
 282   3                              p++;
 283   3                              continue;
 284   3                      }
 285   2                      if(escape) {
 286   3                              p++;
 287   3                      }
 288   2                      else {
 289   3                              if(*p==0)
 290   3                                      break;
 291   3                              p++;
 292   3                      }
 293   2              }
 294   1              return p - s;
 295   1      }
 296          
 297          //-----------------------------------------------------------------------------
 298          /**
 299          * copy *s into *d. 
 300          *
 301          * note, *d must have same or more buffer reserved as *s
 302          */
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 6   

 303          BYTE *TWstrcpy(BYTE *d,BYTE *s)
 304          {
 305   1              BYTE *dd = d;
 306   1              while(*s)
 307   1                      *dd++ = *s++;
 308   1              *dd = 0;
 309   1      
 310   1              return d;
 311   1      }
 312          
 313          //-----------------------------------------------------------------------------
 314          /**
 315          * append *s onto *d. note, *d must have buffer reserved for *s
 316          */
 317          BYTE *TWstrcat(BYTE *d,BYTE *s)
 318          {
 319   1              BYTE *dd = d;
 320   1              while(*dd)
 321   1                      dd++;
 322   1              while(*s)
 323   1                      *dd++ = *s++;
 324   1              *dd = 0;
 325   1      
 326   1              return d;
 327   1      }
 328          //-----------------------------------------------------------------------------
 329          /**
 330          * is a digit character
 331          */
 332          BYTE IsDigit(BYTE c)
 333          {
 334   1              if(c >= 0x30 && c <= 0x39)
 335   1                      return 1;
 336   1              return 0;
 337   1      }
 338          
 339          #if defined(SUPPORT_TOUCH)
 340          //-----------------------------------------------------------------------------
 341          /**
 342          * ABS for short 
 343          */
 344          short TWabsShort(short value)
 345          {
 346   1              if(value >0)    return value;
 347   1              return -value;
 348   1      }
 349          #endif
 350          
 351          
 352          
 353          //=============================================================================
 354          //memcmp                                             
 355          //memcpy
 356          //memset                                   
 357          //=============================================================================
 358          
 359          #if defined(SUPPORT_HDMI_SiIRX)
              /**
              * memcmp
              *
              * same: int memcmp( const void * ptr1, const void * ptr2, size_t num )
              */
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 7   

              int TWmemcmp( const void * ptr1, const void * ptr2, WORD num )
              {
                      BYTE *d,*s;
                      WORD i;
                      d = ptr1;
                      s = ptr2;
                      for(i=1; i <= num; i++) {
                              if(d > s)       return i;
                              if(d < s)   return -i;
                      }
                      return 0;
              
              }
              /**
              * memcpy
              */
              void *TWmemcpy( void * destination, const void * source, WORD num )
              {
                      BYTE *d,*s;
                      d = destination;
                      s = source;
                      while(num--) {
                              *d++ = *s++;
                      }
                      return destination;
              
              }
              #endif
 393          #if defined(SUPPORT_HDMI_SiIRX) || defined(SUPPORT_HDMI_EP9351)
              /**
              * memset
              */
              void *TWmemset( void * ptr, int value, WORD num )
              {
                      BYTE *d;
                      d = ptr;
                      while(num--) {
                              *d++ = (BYTE)value;
                      }
                      return ptr;
              }
              #endif
 407          
 408          
 409          #if 0
              //-----------------------------------------------------------------------------
              /**
              * check a register value
              *
              * only for debug
              */
              void CheckRegister(BYTE page, BYTE reg, WORD line)
              {
              #ifdef SUPPORT_8BIT_CHIP_ACCESS
                      BYTE page;
                      ReadTW88Page(page);
                      WriteTW88Page(page);
                      Printf("\nCHECK:%d 0x%01bx%02bx:%bx",line, page, reg, ReadTW88(reg));
                      WriteTW88Page(page);
              #else
                      WORD addr;
                      addr = page;
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 8   

                      addr <<= 8;
                      addr |= reg;
                      Printf("\nCHECK:%d 0x03x:%bx",line, addr, ReadTW88(addr));
              }
              #endif
              #endif
 433          
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0041 (BEGIN)
0000         L?0066:
0000         L?0067:
0000 900000      R     MOV     DPTR,#buff
0003         L?0068:
0003 E0                MOVX    A,@DPTR
0004 FB                MOV     R3,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FA                MOV     R2,A
0008 A3                INC     DPTR
0009 E0                MOVX    A,@DPTR
000A F9                MOV     R1,A
000B 22                RET     
000C         L?0069:
000C         L?0070:
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EA                MOV     A,R2
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 E9                MOV     A,R1
0013 F0                MOVX    @DPTR,A
0014 22                RET     
0015         L?0071:
0015 FF                MOV     R7,A
0016 E0                MOVX    A,@DPTR
0017 FB                MOV     R3,A
0018         L?0072:
0018 A3                INC     DPTR
0019 E4                CLR     A
001A 75F001            MOV     B,#01H
001D 120000      E     LCALL   ?C?ILDIX
0020 A9F0              MOV     R1,B
0022 FA                MOV     R2,A
0023 22                RET     
0024         L?0073:
0024         L?0074:
0024 E4                CLR     A
0025 75F001            MOV     B,#01H
0028 020000      E     LJMP    ?C?IILDX
002B         L?0075:
002B         L?0076:
002B E0                MOVX    A,@DPTR
002C FC                MOV     R4,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FE                MOV     R6,A
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 22                RET     
0037         L?0077:
0037 E0                MOVX    A,@DPTR
0038 F8                MOV     R0,A
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 10  

0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B F9                MOV     R1,A
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E FA                MOV     R2,A
003F A3                INC     DPTR
0040 E0                MOVX    A,@DPTR
0041 FB                MOV     R3,A
0042 020000      E     LJMP    ?C?LMUL
0045         L?0078:
0045 FF                MOV     R7,A
0046 EE                MOV     A,R6
0047 3A                ADDC    A,R2
0048 FE                MOV     R6,A
0049 ED                MOV     A,R5
004A 39                ADDC    A,R1
004B FD                MOV     R5,A
004C EC                MOV     A,R4
004D 38                ADDC    A,R0
004E FC                MOV     R4,A
004F 22                RET     
0050         L?0079:
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 04                INC     A
0054 F0                MOVX    @DPTR,A
0055 8F82              MOV     DPL,R7
0057 758300            MOV     DPH,#00H
005A 22                RET     
             ; FUNCTION Com0041 (END)

             ; FUNCTION _Asc1Bin (BEGIN)
                                           ; SOURCE LINE # 35
;---- Variable 'asc' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 37
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9430              SUBB    A,#030H
0004 400C              JC      ?C0001
0006 EF                MOV     A,R7
0007 D3                SETB    C
0008 9439              SUBB    A,#039H
000A 5006              JNC     ?C0001
000C C3                CLR     C
000D EF                MOV     A,R7
000E 9430              SUBB    A,#030H
0010 FF                MOV     R7,A
0011 22                RET     
0012         ?C0001:
                                           ; SOURCE LINE # 38
0012 EF                MOV     A,R7
0013 C3                CLR     C
0014 9461              SUBB    A,#061H
0016 400B              JC      ?C0003
0018 EF                MOV     A,R7
0019 D3                SETB    C
001A 9466              SUBB    A,#066H
001C 5005              JNC     ?C0003
001E EF                MOV     A,R7
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 11  

001F 24A9              ADD     A,#0A9H
0021 FF                MOV     R7,A
0022 22                RET     
0023         ?C0003:
                                           ; SOURCE LINE # 39
0023 EF                MOV     A,R7
0024 C3                CLR     C
0025 9441              SUBB    A,#041H
0027 400B              JC      ?C0004
0029 EF                MOV     A,R7
002A D3                SETB    C
002B 9446              SUBB    A,#046H
002D 5005              JNC     ?C0004
002F EF                MOV     A,R7
0030 24C9              ADD     A,#0C9H
0032 FF                MOV     R7,A
0033 22                RET     
0034         ?C0004:
                                           ; SOURCE LINE # 40
0034 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 41
0036         ?C0002:
0036 22                RET     
             ; FUNCTION _Asc1Bin (END)

             ; FUNCTION _a2h (BEGIN)
                                           ; SOURCE LINE # 46
0000 900000      R     MOV     DPTR,#str
0003 120000      R     LCALL   L?0069
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
0006 A3                INC     DPTR
0007 120000      E     LCALL   ?C?LSTKXDATA
000A 00                DB      00H
000B 00                DB      00H
000C 00                DB      00H
000D 00                DB      00H
                                           ; SOURCE LINE # 51
000E E4                CLR     A
000F 900000      R     MOV     DPTR,#i
0012 F0                MOVX    @DPTR,A
0013         ?C0005:
0013 900000      R     MOV     DPTR,#i
0016 E0                MOVX    A,@DPTR
0017 C3                CLR     C
0018 9408              SUBB    A,#08H
001A 504B              JNC     ?C0006
                                           ; SOURCE LINE # 52
001C 900000      R     MOV     DPTR,#str
001F 120000      R     LCALL   L?0068
0022 120000      E     LCALL   ?C?CLDPTR
0025 6040              JZ      ?C0006
0027 6420              XRL     A,#020H
0029 603C              JZ      ?C0006
002B         ?C0008:
                                           ; SOURCE LINE # 53
002B 120000      E     LCALL   ?C?CLDPTR
002E FF                MOV     R7,A
002F 120000      R     LCALL   _Asc1Bin
0032 E4                CLR     A
0033 FC                MOV     R4,A
0034 FD                MOV     R5,A
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 12  

0035 FE                MOV     R6,A
0036 C004              PUSH    AR4
0038 C005              PUSH    AR5
003A C006              PUSH    AR6
003C C007              PUSH    AR7
003E 7F10              MOV     R7,#010H
0040 900000      R     MOV     DPTR,#num
0043 120000      R     LCALL   L?0077
0046 D003              POP     AR3
0048 D002              POP     AR2
004A D001              POP     AR1
004C D000              POP     AR0
004E EF                MOV     A,R7
004F 2B                ADD     A,R3
0050 120000      R     LCALL   L?0078
0053 900000      R     MOV     DPTR,#num
0056 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 54
0059 900000      R     MOV     DPTR,#i
005C E0                MOVX    A,@DPTR
005D 04                INC     A
005E F0                MOVX    @DPTR,A
005F 900000      R     MOV     DPTR,#str+01H
0062 120000      R     LCALL   L?0073
0065 80AC              SJMP    ?C0005
0067         ?C0006:
                                           ; SOURCE LINE # 55
0067 900000      R     MOV     DPTR,#num
006A 120000      R     LCALL   L?0075
                                           ; SOURCE LINE # 56
006D         ?C0010:
006D 22                RET     
             ; FUNCTION _a2h (END)

             ; FUNCTION _a2i (BEGIN)
                                           ; SOURCE LINE # 61
0000 900000      R     MOV     DPTR,#str
0003 120000      R     LCALL   L?0069
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
0006 A3                INC     DPTR
0007 120000      E     LCALL   ?C?LSTKXDATA
000A 00                DB      00H
000B 00                DB      00H
000C 00                DB      00H
000D 00                DB      00H
                                           ; SOURCE LINE # 66
000E E4                CLR     A
000F 900000      R     MOV     DPTR,#i
0012 F0                MOVX    @DPTR,A
0013         ?C0011:
                                           ; SOURCE LINE # 67
0013 900000      R     MOV     DPTR,#str
0016 120000      R     LCALL   L?0068
0019 120000      E     LCALL   ?C?CLDPTR
001C 6055              JZ      ?C0012
001E 6420              XRL     A,#020H
0020 6051              JZ      ?C0012
0022         ?C0014:
                                           ; SOURCE LINE # 68
0022 E4                CLR     A
0023 7F0A              MOV     R7,#0AH
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 13  

0025 FE                MOV     R6,A
0026 FD                MOV     R5,A
0027 FC                MOV     R4,A
0028 900000      R     MOV     DPTR,#num
002B 120000      R     LCALL   L?0077
002E A804              MOV     R0,AR4
0030 C005              PUSH    AR5
0032 C006              PUSH    AR6
0034 C007              PUSH    AR7
0036 900000      R     MOV     DPTR,#str
0039 120000      R     LCALL   L?0068
003C 120000      E     LCALL   ?C?CLDPTR
003F FF                MOV     R7,A
0040 E4                CLR     A
0041 FC                MOV     R4,A
0042 FD                MOV     R5,A
0043 FE                MOV     R6,A
0044 D003              POP     AR3
0046 D002              POP     AR2
0048 D001              POP     AR1
004A EB                MOV     A,R3
004B 2F                ADD     A,R7
004C 120000      R     LCALL   L?0078
004F EF                MOV     A,R7
0050 24D0              ADD     A,#0D0H
0052 FF                MOV     R7,A
0053 EE                MOV     A,R6
0054 34FF              ADDC    A,#0FFH
0056 FE                MOV     R6,A
0057 ED                MOV     A,R5
0058 34FF              ADDC    A,#0FFH
005A FD                MOV     R5,A
005B EC                MOV     A,R4
005C 34FF              ADDC    A,#0FFH
005E FC                MOV     R4,A
005F 900000      R     MOV     DPTR,#num
0062 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 69
0065 900000      R     MOV     DPTR,#i
0068 E0                MOVX    A,@DPTR
0069 04                INC     A
006A F0                MOVX    @DPTR,A
006B 900000      R     MOV     DPTR,#str+01H
006E 120000      R     LCALL   L?0073
0071 80A0              SJMP    ?C0011
0073         ?C0012:
                                           ; SOURCE LINE # 70
0073 900000      R     MOV     DPTR,#num
0076 120000      R     LCALL   L?0075
                                           ; SOURCE LINE # 71
0079         ?C0016:
0079 22                RET     
             ; FUNCTION _a2i (END)

             ; FUNCTION _toupper (BEGIN)
                                           ; SOURCE LINE # 86
;---- Variable 'ch' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9461              SUBB    A,#061H
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 14  

0004 400B              JC      ?C0017
0006 EF                MOV     A,R7
0007 D3                SETB    C
0008 947A              SUBB    A,#07AH
000A 5005              JNC     ?C0017
                                           ; SOURCE LINE # 89
000C EF                MOV     A,R7
000D 24E0              ADD     A,#0E0H
000F FF                MOV     R7,A
0010 22                RET     
0011         ?C0017:
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
0011         ?C0018:
0011 22                RET     
             ; FUNCTION _toupper (END)

             ; FUNCTION _stricmp (BEGIN)
                                           ; SOURCE LINE # 102
0000 900000      R     MOV     DPTR,#ptr1
0003 120000      R     LCALL   L?0070
                                           ; SOURCE LINE # 103
0006         ?C0019:
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
0006 900000      R     MOV     DPTR,#ptr2
0009 120000      R     LCALL   L?0068
000C 120000      E     LCALL   ?C?CLDPTR
000F FF                MOV     R7,A
0010 120000      R     LCALL   _toupper
0013 AE07              MOV     R6,AR7
0015 900000      R     MOV     DPTR,#ptr1
0018 120000      R     LCALL   L?0068
001B 120000      E     LCALL   ?C?CLDPTR
001E FF                MOV     R7,A
001F 120000      R     LCALL   _toupper
0022 EF                MOV     A,R7
0023 6E                XRL     A,R6
0024 6005              JZ      ?C0021
0026 7E00              MOV     R6,#00H
0028 7F01              MOV     R7,#01H
002A 22                RET     
002B         ?C0021:
                                           ; SOURCE LINE # 118
002B 900000      R     MOV     DPTR,#ptr1
002E 120000      R     LCALL   L?0068
0031 120000      E     LCALL   ?C?CLDPTR
0034 7003              JNZ     ?C0023
0036 FE                MOV     R6,A
0037 FF                MOV     R7,A
0038 22                RET     
0039         ?C0023:
                                           ; SOURCE LINE # 119
0039 900000      R     MOV     DPTR,#ptr1+01H
003C 120000      R     LCALL   L?0074
                                           ; SOURCE LINE # 120
003F 900000      R     MOV     DPTR,#ptr2+01H
0042 120000      R     LCALL   L?0074
                                           ; SOURCE LINE # 121
0045 80BF              SJMP    ?C0019
             ; FUNCTION _stricmp (END)

C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 15  

             ; FUNCTION _TWitoa (BEGIN)
                                           ; SOURCE LINE # 138
0000 900000      R     MOV     DPTR,#buff
0003 120000      R     LCALL   L?0070
0006 900000      R     MOV     DPTR,#n
0009 EE                MOV     A,R6
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 143
000E E4                CLR     A
000F 900000      R     MOV     DPTR,#next
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0013 A3                INC     DPTR
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
0015 C3                CLR     C
0016 EE                MOV     A,R6
0017 6480              XRL     A,#080H
0019 9480              SUBB    A,#080H
001B 5026              JNC     ?C0024
                                           ; SOURCE LINE # 147
001D 120000      R     LCALL   L?0066
0020 120000      R     LCALL   L?0079
0023 742D              MOV     A,#02DH
0025 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 148
0028 900000      R     MOV     DPTR,#n
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 C3                CLR     C
0031 E4                CLR     A
0032 9F                SUBB    A,R7
0033 FF                MOV     R7,A
0034 E4                CLR     A
0035 9E                SUBB    A,R6
0036 900000      R     MOV     DPTR,#n
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
003D 900000      R     MOV     DPTR,#start
0040 E0                MOVX    A,@DPTR
0041 04                INC     A
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
0043         ?C0024:
                                           ; SOURCE LINE # 151
0043 900000      R     MOV     DPTR,#n
0046 E0                MOVX    A,@DPTR
0047 7002              JNZ     ?C0060
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B         ?C0060:
004B 700E              JNZ     ?C0025
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 16  

                                           ; SOURCE LINE # 152
004D 120000      R     LCALL   L?0066
0050 120000      R     LCALL   L?0079
0053 7430              MOV     A,#030H
0055 120000      E     LCALL   ?C?CSTOPTR
0058 020000      R     LJMP    ?C0026
005B         ?C0025:
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
005B 900000      R     MOV     DPTR,#k
005E 7427              MOV     A,#027H
0060 F0                MOVX    @DPTR,A
0061 A3                INC     DPTR
0062 7410              MOV     A,#010H
0064 F0                MOVX    @DPTR,A
0065         ?C0027:
                                           ; SOURCE LINE # 156
0065 900000      R     MOV     DPTR,#k
0068 E0                MOVX    A,@DPTR
0069 FC                MOV     R4,A
006A A3                INC     DPTR
006B E0                MOVX    A,@DPTR
006C FD                MOV     R5,A
006D D3                SETB    C
006E 9400              SUBB    A,#00H
0070 EC                MOV     A,R4
0071 9400              SUBB    A,#00H
0073 5003              JNC     $ + 5H
0075 020000      R     LJMP    ?C0026
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
0078 900000      R     MOV     DPTR,#n
007B E0                MOVX    A,@DPTR
007C FE                MOV     R6,A
007D A3                INC     DPTR
007E E0                MOVX    A,@DPTR
007F FF                MOV     R7,A
0080 4E                ORL     A,R6
0081 7008              JNZ     ?C0029
0083 900000      R     MOV     DPTR,#q
0086 F0                MOVX    @DPTR,A
0087 A3                INC     DPTR
0088 F0                MOVX    @DPTR,A
0089 800B              SJMP    ?C0030
008B         ?C0029:
                                           ; SOURCE LINE # 159
008B 120000      E     LCALL   ?C?UIDIV
008E 900000      R     MOV     DPTR,#q
0091 EE                MOV     A,R6
0092 F0                MOVX    @DPTR,A
0093 A3                INC     DPTR
0094 EF                MOV     A,R7
0095 F0                MOVX    @DPTR,A
0096         ?C0030:
                                           ; SOURCE LINE # 160
0096 900000      R     MOV     DPTR,#start
0099 E0                MOVX    A,@DPTR
009A FF                MOV     R7,A
009B 900000      R     MOV     DPTR,#next
009E E0                MOVX    A,@DPTR
009F B5070F            CJNE    A,AR7,?C0032
00A2 D3                SETB    C
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 17  

00A3 900000      R     MOV     DPTR,#q+01H
00A6 E0                MOVX    A,@DPTR
00A7 9400              SUBB    A,#00H
00A9 900000      R     MOV     DPTR,#q
00AC E0                MOVX    A,@DPTR
00AD 9400              SUBB    A,#00H
00AF 4019              JC      ?C0031
00B1         ?C0032:
                                           ; SOURCE LINE # 161
00B1 900000      R     MOV     DPTR,#q
00B4 A3                INC     DPTR
00B5 E0                MOVX    A,@DPTR
00B6 2430              ADD     A,#030H
00B8 FF                MOV     R7,A
00B9 120000      R     LCALL   L?0067
00BC A3                INC     DPTR
00BD E0                MOVX    A,@DPTR
00BE FE                MOV     R6,A
00BF 04                INC     A
00C0 F0                MOVX    @DPTR,A
00C1 8E82              MOV     DPL,R6
00C3 758300            MOV     DPH,#00H
00C6 EF                MOV     A,R7
00C7 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 162
00CA         ?C0031:
                                           ; SOURCE LINE # 163
00CA 900000      R     MOV     DPTR,#k
00CD 120000      R     LCALL   L?0076
00D0 120000      E     LCALL   ?C?IMUL
00D3 C3                CLR     C
00D4 900000      R     MOV     DPTR,#n+01H
00D7 E0                MOVX    A,@DPTR
00D8 9F                SUBB    A,R7
00D9 F0                MOVX    @DPTR,A
00DA 900000      R     MOV     DPTR,#n
00DD E0                MOVX    A,@DPTR
00DE 9E                SUBB    A,R6
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
00E0 900000      R     MOV     DPTR,#k
00E3 E0                MOVX    A,@DPTR
00E4 FE                MOV     R6,A
00E5 A3                INC     DPTR
00E6 E0                MOVX    A,@DPTR
00E7 FF                MOV     R7,A
00E8 7C00              MOV     R4,#00H
00EA 7D0A              MOV     R5,#0AH
00EC 120000      E     LCALL   ?C?UIDIV
00EF 900000      R     MOV     DPTR,#k
00F2 EE                MOV     A,R6
00F3 F0                MOVX    @DPTR,A
00F4 A3                INC     DPTR
00F5 EF                MOV     A,R7
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
00F7 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 166
00FA         ?C0026:
                                           ; SOURCE LINE # 167
00FA 120000      R     LCALL   L?0067
00FD A3                INC     DPTR
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 18  

00FE E0                MOVX    A,@DPTR
00FF FF                MOV     R7,A
0100 F582              MOV     DPL,A
0102 758300            MOV     DPH,#00H
0105 E4                CLR     A
0106 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
0109         ?C0033:
0109 22                RET     
             ; FUNCTION _TWitoa (END)

             ; FUNCTION _TWhtos (BEGIN)
                                           ; SOURCE LINE # 175
;---- Variable 'buff' assigned to Register 'R1/R2/R3' ----
;---- Variable 'n' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 178
0000 EF                MOV     A,R7
0001 C4                SWAP    A
0002 540F              ANL     A,#0FH
0004 FE                MOV     R6,A
;---- Variable 'nibble' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 179
0005 D3                SETB    C
0006 9409              SUBB    A,#09H
0008 EE                MOV     A,R6
0009 5004              JNC     ?C0034
000B 2430              ADD     A,#030H
000D 8002              SJMP    ?C0062
000F         ?C0034:
                                           ; SOURCE LINE # 180
000F 2437              ADD     A,#037H
0011         ?C0062:
0011 120000      E     LCALL   ?C?CSTPTR
0014         ?C0035:
                                           ; SOURCE LINE # 181
0014 EF                MOV     A,R7
0015 540F              ANL     A,#0FH
0017 FE                MOV     R6,A
                                           ; SOURCE LINE # 182
0018 D3                SETB    C
0019 9409              SUBB    A,#09H
001B EE                MOV     A,R6
001C 5004              JNC     ?C0036
001E 2430              ADD     A,#030H
0020 8002              SJMP    ?C0061
0022         ?C0036:
                                           ; SOURCE LINE # 183
0022 2437              ADD     A,#037H
0024         ?C0061:
0024 900001            MOV     DPTR,#01H
0027 120000      E     LCALL   ?C?CSTOPTR
002A         ?C0037:
                                           ; SOURCE LINE # 184
002A 900002            MOV     DPTR,#02H
002D E4                CLR     A
002E 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 185
0031 EF                MOV     A,R7
0032 C4                SWAP    A
0033 540F              ANL     A,#0FH
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 19  

0035 6003              JZ      ?C0038
                                           ; SOURCE LINE # 186
0037 7F01              MOV     R7,#01H
0039 22                RET     
003A         ?C0038:
                                           ; SOURCE LINE # 187
003A 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 188
003C         ?C0039:
003C 22                RET     
             ; FUNCTION _TWhtos (END)

             ; FUNCTION _TWstrlen (BEGIN)
                                           ; SOURCE LINE # 273
0000 900000      R     MOV     DPTR,#s
0003 120000      R     LCALL   L?0070
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 275
0006 A3                INC     DPTR
0007 120000      R     LCALL   L?0070
                                           ; SOURCE LINE # 276
;---- Variable 'escape' assigned to Register 'R7' ----
000A E4                CLR     A
000B FF                MOV     R7,A
000C         ?C0040:
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
000C 900000      R     MOV     DPTR,#p
000F 120000      R     LCALL   L?0068
0012 120000      E     LCALL   ?C?CLDPTR
0015 FE                MOV     R6,A
0016 C3                CLR     C
0017 94F0              SUBB    A,#0F0H
0019 4009              JC      ?C0042
                                           ; SOURCE LINE # 279
001B 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 280
001D EE                MOV     A,R6
001E B4FF01            CJNE    A,#0FFH,?C0043
                                           ; SOURCE LINE # 281
0021 1F                DEC     R7
0022         ?C0043:
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 283
0022 800A              SJMP    ?C0064
                                           ; SOURCE LINE # 284
0024         ?C0042:
                                           ; SOURCE LINE # 285
0024 EF                MOV     A,R7
0025 6002              JZ      ?C0044
                                           ; SOURCE LINE # 286
0027         ?C0063:
                                           ; SOURCE LINE # 287
0027 8005              SJMP    ?C0064
0029         ?C0044:
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
0029 120000      E     LCALL   ?C?CLDPTR
002C 6008              JZ      ?C0041
                                           ; SOURCE LINE # 290
002E         ?C0046:
                                           ; SOURCE LINE # 291
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 20  

002E         ?C0064:
002E 900000      R     MOV     DPTR,#p+01H
0031 120000      R     LCALL   L?0074
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
0034 80D6              SJMP    ?C0040
0036         ?C0041:
                                           ; SOURCE LINE # 294
0036 900000      R     MOV     DPTR,#s
0039 A3                INC     DPTR
003A A3                INC     DPTR
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D A3                INC     DPTR
003E A3                INC     DPTR
003F A3                INC     DPTR
0040 E0                MOVX    A,@DPTR
0041 C3                CLR     C
0042 9F                SUBB    A,R7
0043 FF                MOV     R7,A
                                           ; SOURCE LINE # 295
0044         ?C0047:
0044 22                RET     
             ; FUNCTION _TWstrlen (END)

             ; FUNCTION _TWstrcpy (BEGIN)
                                           ; SOURCE LINE # 303
0000 900000      R     MOV     DPTR,#d
0003 120000      R     LCALL   L?0070
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
0006 900000      R     MOV     DPTR,#dd
0009 120000      R     LCALL   L?0070
000C         ?C0048:
                                           ; SOURCE LINE # 306
000C 900000      R     MOV     DPTR,#s
000F 120000      R     LCALL   L?0068
0012 120000      E     LCALL   ?C?CLDPTR
0015 6015              JZ      ?C0049
                                           ; SOURCE LINE # 307
0017 900000      R     MOV     DPTR,#s
001A 120000      R     LCALL   L?0072
001D 120000      E     LCALL   ?C?CLDPTR
0020 900000      R     MOV     DPTR,#dd
0023 120000      R     LCALL   L?0071
0026 EF                MOV     A,R7
0027 120000      E     LCALL   ?C?CSTPTR
002A 80E0              SJMP    ?C0048
002C         ?C0049:
                                           ; SOURCE LINE # 308
002C 900000      R     MOV     DPTR,#dd
002F 120000      R     LCALL   L?0068
0032 E4                CLR     A
0033 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 310
0036 900000      R     MOV     DPTR,#d
0039 120000      R     LCALL   L?0068
                                           ; SOURCE LINE # 311
003C         ?C0050:
003C 22                RET     
             ; FUNCTION _TWstrcpy (END)

C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 21  

             ; FUNCTION _TWstrcat (BEGIN)
                                           ; SOURCE LINE # 317
0000 900000      R     MOV     DPTR,#d
0003 120000      R     LCALL   L?0070
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
0006 900000      R     MOV     DPTR,#dd
0009 120000      R     LCALL   L?0070
000C         ?C0051:
                                           ; SOURCE LINE # 320
000C 900000      R     MOV     DPTR,#dd
000F 120000      R     LCALL   L?0068
0012 120000      E     LCALL   ?C?CLDPTR
0015 6008              JZ      ?C0053
                                           ; SOURCE LINE # 321
0017 900000      R     MOV     DPTR,#dd+01H
001A 120000      R     LCALL   L?0074
001D 80ED              SJMP    ?C0051
001F         ?C0053:
                                           ; SOURCE LINE # 322
001F 900000      R     MOV     DPTR,#s
0022 120000      R     LCALL   L?0068
0025 120000      E     LCALL   ?C?CLDPTR
0028 6015              JZ      ?C0054
                                           ; SOURCE LINE # 323
002A 900000      R     MOV     DPTR,#s
002D 120000      R     LCALL   L?0072
0030 120000      E     LCALL   ?C?CLDPTR
0033 900000      R     MOV     DPTR,#dd
0036 120000      R     LCALL   L?0071
0039 EF                MOV     A,R7
003A 120000      E     LCALL   ?C?CSTPTR
003D 80E0              SJMP    ?C0053
003F         ?C0054:
                                           ; SOURCE LINE # 324
003F 900000      R     MOV     DPTR,#dd
0042 120000      R     LCALL   L?0068
0045 E4                CLR     A
0046 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 326
0049 900000      R     MOV     DPTR,#d
004C 120000      R     LCALL   L?0068
                                           ; SOURCE LINE # 327
004F         ?C0055:
004F 22                RET     
             ; FUNCTION _TWstrcat (END)

             ; FUNCTION _IsDigit (BEGIN)
                                           ; SOURCE LINE # 332
;---- Variable 'c' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9430              SUBB    A,#030H
0004 4009              JC      ?C0056
0006 EF                MOV     A,R7
0007 D3                SETB    C
0008 9439              SUBB    A,#039H
000A 5003              JNC     ?C0056
                                           ; SOURCE LINE # 335
000C 7F01              MOV     R7,#01H
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 22  

000E 22                RET     
000F         ?C0056:
                                           ; SOURCE LINE # 336
000F 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 337
0011         ?C0057:
0011 22                RET     
             ; FUNCTION _IsDigit (END)

             ; FUNCTION _TWabsShort (BEGIN)
                                           ; SOURCE LINE # 344
;---- Variable 'value' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
0000 D3                SETB    C
0001 EF                MOV     A,R7
0002 9400              SUBB    A,#00H
0004 EE                MOV     A,R6
0005 6480              XRL     A,#080H
0007 9480              SUBB    A,#080H
0009 4001              JC      ?C0058
000B 22                RET     
000C         ?C0058:
                                           ; SOURCE LINE # 347
000C C3                CLR     C
000D E4                CLR     A
000E 9F                SUBB    A,R7
000F FF                MOV     R7,A
0010 E4                CLR     A
0011 9E                SUBB    A,R6
0012 FE                MOV     R6,A
                                           ; SOURCE LINE # 348
0013         ?C0059:
0013 22                RET     
             ; FUNCTION _TWabsShort (END)

C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 23  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_stricmp . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ptr1 . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  ptr2 . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
_toupper . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_IsDigit . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  c. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_PCMODEDATA. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  25
  support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  han. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  van. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  vfreq. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  htotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  vtotal . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  hsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  vsyncpol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  offseth. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0010H  2
  offsetv. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0012H  2
  dummy0 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  dummy1 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  dummy2 . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  dummy3 . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0018H  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_TWstrcat. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  d. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  s. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  dd . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0006H  3
_TWstrlen. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  p. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  escape . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SPIIMAGE . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  left . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  top. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  right. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  bottom . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
_TWstrcpy. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  d. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  s. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  dd . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0006H  3
SLIDEIMAGE . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  start. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
_TWitoa. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n. . . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0000H  2
  buff . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  next . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
C51 COMPILER V9.00   UTIL                                                                  05/31/2013 20:18:28 PAGE 24  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  start. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  k. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
  q. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0009H  2
_Asc1Bin . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  asc. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_TWhtos. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  buff . . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  nibble . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
va_list. . . . . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
_TWabsShort. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
_a2h . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  num. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0003H  4
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
_a2i . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  num. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0003H  4
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1042    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      57
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
